
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000264a0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002fc  20000000  000264a0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000053d4  20000300  000267a0  000402fc  2**4
                  ALLOC
  3 .stack        00002004  200056d4  0002bb74  000402fc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000402fc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00040324  2**0
                  CONTENTS, READONLY
  6 .debug_info   001109e0  00000000  00000000  0004037d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000facb  00000000  00000000  00150d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00016285  00000000  00000000  00160828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003b18  00000000  00000000  00176aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000037b0  00000000  00000000  0017a5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028a74  00000000  00000000  0017dd75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005396b  00000000  00000000  001a67e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c0439  00000000  00000000  001fa154  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000e080  00000000  00000000  002ba590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 76 00 20 0d 75 01 00 05 76 01 00 05 76 01 00     .v. .u...v...v..
	...
      2c:	a5 66 00 00 00 00 00 00 00 00 00 00 c1 67 00 00     .f...........g..
      3c:	09 68 00 00 05 76 01 00 05 76 01 00 05 76 01 00     .h...v...v...v..
      4c:	5d 36 01 00 89 2b 01 00 05 76 01 00 61 04 00 00     ]6...+...v..a...
      5c:	05 76 01 00 a5 05 00 00 01 3d 01 00 19 3d 01 00     .v.......=...=..
      6c:	31 3d 01 00 49 3d 01 00 61 3d 01 00 79 3d 01 00     1=..I=..a=..y=..
      7c:	55 74 01 00 69 74 01 00 7d 74 01 00 91 43 00 00     Ut..it..}t...C..
      8c:	a5 43 00 00 b9 43 00 00 00 00 00 00 00 00 00 00     .C...C..........
      9c:	e9 02 00 00 05 76 01 00 25 04 00 00 05 76 01 00     .....v..%....v..
      ac:	05 76 01 00 00 00 00 00                             .v......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000300 	.word	0x20000300
      d4:	00000000 	.word	0x00000000
      d8:	000264a0 	.word	0x000264a0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000304 	.word	0x20000304
     108:	000264a0 	.word	0x000264a0
     10c:	000264a0 	.word	0x000264a0
     110:	00000000 	.word	0x00000000

00000114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	681b      	ldr	r3, [r3, #0]
     120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     122:	68fb      	ldr	r3, [r7, #12]
     124:	7e5b      	ldrb	r3, [r3, #25]
     126:	b2db      	uxtb	r3, r3
     128:	b25b      	sxtb	r3, r3
     12a:	2b00      	cmp	r3, #0
     12c:	da01      	bge.n	132 <adc_is_syncing+0x1e>
		return true;
     12e:	2301      	movs	r3, #1
     130:	e000      	b.n	134 <adc_is_syncing+0x20>
	}

	return false;
     132:	2300      	movs	r3, #0
}
     134:	0018      	movs	r0, r3
     136:	46bd      	mov	sp, r7
     138:	b004      	add	sp, #16
     13a:	bd80      	pop	{r7, pc}

0000013c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     13c:	b580      	push	{r7, lr}
     13e:	b084      	sub	sp, #16
     140:	af00      	add	r7, sp, #0
     142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     144:	687b      	ldr	r3, [r7, #4]
     146:	681b      	ldr	r3, [r3, #0]
     148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	687b      	ldr	r3, [r7, #4]
     14e:	0018      	movs	r0, r3
     150:	4b0b      	ldr	r3, [pc, #44]	; (180 <adc_start_conversion+0x44>)
     152:	4798      	blx	r3
     154:	1e03      	subs	r3, r0, #0
     156:	d1f9      	bne.n	14c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     158:	68fb      	ldr	r3, [r7, #12]
     15a:	7b1b      	ldrb	r3, [r3, #12]
     15c:	b2db      	uxtb	r3, r3
     15e:	2202      	movs	r2, #2
     160:	4313      	orrs	r3, r2
     162:	b2da      	uxtb	r2, r3
     164:	68fb      	ldr	r3, [r7, #12]
     166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     168:	46c0      	nop			; (mov r8, r8)
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	0018      	movs	r0, r3
     16e:	4b04      	ldr	r3, [pc, #16]	; (180 <adc_start_conversion+0x44>)
     170:	4798      	blx	r3
     172:	1e03      	subs	r3, r0, #0
     174:	d1f9      	bne.n	16a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     176:	46c0      	nop			; (mov r8, r8)
     178:	46bd      	mov	sp, r7
     17a:	b004      	add	sp, #16
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	00000115 	.word	0x00000115

00000184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     184:	b580      	push	{r7, lr}
     186:	b084      	sub	sp, #16
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
     18c:	000a      	movs	r2, r1
     18e:	1cfb      	adds	r3, r7, #3
     190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     192:	687b      	ldr	r3, [r7, #4]
     194:	681b      	ldr	r3, [r3, #0]
     196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     198:	68fb      	ldr	r3, [r7, #12]
     19a:	1cfa      	adds	r2, r7, #3
     19c:	7812      	ldrb	r2, [r2, #0]
     19e:	759a      	strb	r2, [r3, #22]
}
     1a0:	46c0      	nop			; (mov r8, r8)
     1a2:	46bd      	mov	sp, r7
     1a4:	b004      	add	sp, #16
     1a6:	bd80      	pop	{r7, pc}

000001a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b084      	sub	sp, #16
     1ac:	af00      	add	r7, sp, #0
     1ae:	0002      	movs	r2, r0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     1b4:	1dfb      	adds	r3, r7, #7
     1b6:	781a      	ldrb	r2, [r3, #0]
     1b8:	4b47      	ldr	r3, [pc, #284]	; (2d8 <_adc_interrupt_handler+0x130>)
     1ba:	0092      	lsls	r2, r2, #2
     1bc:	58d3      	ldr	r3, [r2, r3]
     1be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     1c0:	68fb      	ldr	r3, [r7, #12]
     1c2:	681b      	ldr	r3, [r3, #0]
     1c4:	7e1b      	ldrb	r3, [r3, #24]
     1c6:	b2da      	uxtb	r2, r3
     1c8:	68fb      	ldr	r3, [r7, #12]
     1ca:	681b      	ldr	r3, [r3, #0]
     1cc:	7ddb      	ldrb	r3, [r3, #23]
     1ce:	b2db      	uxtb	r3, r3
     1d0:	4013      	ands	r3, r2
     1d2:	b2db      	uxtb	r3, r3
     1d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     1d6:	68bb      	ldr	r3, [r7, #8]
     1d8:	2201      	movs	r2, #1
     1da:	4013      	ands	r3, r2
     1dc:	d045      	beq.n	26a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     1de:	68fb      	ldr	r3, [r7, #12]
     1e0:	681b      	ldr	r3, [r3, #0]
     1e2:	2201      	movs	r2, #1
     1e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	68fb      	ldr	r3, [r7, #12]
     1ea:	0018      	movs	r0, r3
     1ec:	4b3b      	ldr	r3, [pc, #236]	; (2dc <_adc_interrupt_handler+0x134>)
     1ee:	4798      	blx	r3
     1f0:	1e03      	subs	r3, r0, #0
     1f2:	d1f9      	bne.n	1e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	695b      	ldr	r3, [r3, #20]
     1f8:	1c99      	adds	r1, r3, #2
     1fa:	68fa      	ldr	r2, [r7, #12]
     1fc:	6151      	str	r1, [r2, #20]
     1fe:	68fa      	ldr	r2, [r7, #12]
     200:	6812      	ldr	r2, [r2, #0]
     202:	8b52      	ldrh	r2, [r2, #26]
     204:	b292      	uxth	r2, r2
     206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     208:	68fb      	ldr	r3, [r7, #12]
     20a:	8b1b      	ldrh	r3, [r3, #24]
     20c:	b29b      	uxth	r3, r3
     20e:	3b01      	subs	r3, #1
     210:	b29b      	uxth	r3, r3
     212:	68fa      	ldr	r2, [r7, #12]
     214:	1c19      	adds	r1, r3, #0
     216:	8311      	strh	r1, [r2, #24]
     218:	2b00      	cmp	r3, #0
     21a:	d008      	beq.n	22e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
     21c:	68fb      	ldr	r3, [r7, #12]
     21e:	7f5b      	ldrb	r3, [r3, #29]
     220:	2b00      	cmp	r3, #0
     222:	d022      	beq.n	26a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     224:	68fb      	ldr	r3, [r7, #12]
     226:	0018      	movs	r0, r3
     228:	4b2d      	ldr	r3, [pc, #180]	; (2e0 <_adc_interrupt_handler+0x138>)
     22a:	4798      	blx	r3
     22c:	e01d      	b.n	26a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     22e:	68fb      	ldr	r3, [r7, #12]
     230:	2101      	movs	r1, #1
     232:	0018      	movs	r0, r3
     234:	4b2b      	ldr	r3, [pc, #172]	; (2e4 <_adc_interrupt_handler+0x13c>)
     236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     238:	68fb      	ldr	r3, [r7, #12]
     23a:	7f1b      	ldrb	r3, [r3, #28]
     23c:	b2db      	uxtb	r3, r3
     23e:	2b05      	cmp	r3, #5
     240:	d113      	bne.n	26a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
     242:	68fb      	ldr	r3, [r7, #12]
     244:	2200      	movs	r2, #0
     246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     248:	68fb      	ldr	r3, [r7, #12]
     24a:	7edb      	ldrb	r3, [r3, #27]
     24c:	001a      	movs	r2, r3
     24e:	2301      	movs	r3, #1
     250:	4013      	ands	r3, r2
     252:	d00a      	beq.n	26a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     254:	68fb      	ldr	r3, [r7, #12]
     256:	7e9b      	ldrb	r3, [r3, #26]
     258:	001a      	movs	r2, r3
     25a:	2301      	movs	r3, #1
     25c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     25e:	d004      	beq.n	26a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     260:	68fb      	ldr	r3, [r7, #12]
     262:	689b      	ldr	r3, [r3, #8]
     264:	68fa      	ldr	r2, [r7, #12]
     266:	0010      	movs	r0, r2
     268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     26a:	68bb      	ldr	r3, [r7, #8]
     26c:	2204      	movs	r2, #4
     26e:	4013      	ands	r3, r2
     270:	d014      	beq.n	29c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     272:	68fb      	ldr	r3, [r7, #12]
     274:	681b      	ldr	r3, [r3, #0]
     276:	2204      	movs	r2, #4
     278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     27a:	68fb      	ldr	r3, [r7, #12]
     27c:	7edb      	ldrb	r3, [r3, #27]
     27e:	001a      	movs	r2, r3
     280:	2302      	movs	r3, #2
     282:	4013      	ands	r3, r2
     284:	d00a      	beq.n	29c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     286:	68fb      	ldr	r3, [r7, #12]
     288:	7e9b      	ldrb	r3, [r3, #26]
     28a:	001a      	movs	r2, r3
     28c:	2302      	movs	r3, #2
     28e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     290:	d004      	beq.n	29c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     292:	68fb      	ldr	r3, [r7, #12]
     294:	68db      	ldr	r3, [r3, #12]
     296:	68fa      	ldr	r2, [r7, #12]
     298:	0010      	movs	r0, r2
     29a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     29c:	68bb      	ldr	r3, [r7, #8]
     29e:	2202      	movs	r2, #2
     2a0:	4013      	ands	r3, r2
     2a2:	d014      	beq.n	2ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     2a4:	68fb      	ldr	r3, [r7, #12]
     2a6:	681b      	ldr	r3, [r3, #0]
     2a8:	2202      	movs	r2, #2
     2aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     2ac:	68fb      	ldr	r3, [r7, #12]
     2ae:	7edb      	ldrb	r3, [r3, #27]
     2b0:	001a      	movs	r2, r3
     2b2:	2304      	movs	r3, #4
     2b4:	4013      	ands	r3, r2
     2b6:	d00a      	beq.n	2ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     2b8:	68fb      	ldr	r3, [r7, #12]
     2ba:	7e9b      	ldrb	r3, [r3, #26]
     2bc:	001a      	movs	r2, r3
     2be:	2304      	movs	r3, #4
     2c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     2c2:	d004      	beq.n	2ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     2c4:	68fb      	ldr	r3, [r7, #12]
     2c6:	691b      	ldr	r3, [r3, #16]
     2c8:	68fa      	ldr	r2, [r7, #12]
     2ca:	0010      	movs	r0, r2
     2cc:	4798      	blx	r3
		}
	}
}
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	46bd      	mov	sp, r7
     2d2:	b004      	add	sp, #16
     2d4:	bd80      	pop	{r7, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	200041b4 	.word	0x200041b4
     2dc:	00000115 	.word	0x00000115
     2e0:	0000013d 	.word	0x0000013d
     2e4:	00000185 	.word	0x00000185

000002e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     2ec:	2000      	movs	r0, #0
     2ee:	4b02      	ldr	r3, [pc, #8]	; (2f8 <ADC_Handler+0x10>)
     2f0:	4798      	blx	r3
}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	46bd      	mov	sp, r7
     2f6:	bd80      	pop	{r7, pc}
     2f8:	000001a9 	.word	0x000001a9

000002fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	b082      	sub	sp, #8
     300:	af00      	add	r7, sp, #0
     302:	0002      	movs	r2, r0
     304:	1dfb      	adds	r3, r7, #7
     306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     308:	4a07      	ldr	r2, [pc, #28]	; (328 <system_interrupt_disable+0x2c>)
     30a:	1dfb      	adds	r3, r7, #7
     30c:	781b      	ldrb	r3, [r3, #0]
     30e:	0019      	movs	r1, r3
     310:	231f      	movs	r3, #31
     312:	400b      	ands	r3, r1
     314:	2101      	movs	r1, #1
     316:	4099      	lsls	r1, r3
     318:	000b      	movs	r3, r1
     31a:	0019      	movs	r1, r3
     31c:	2380      	movs	r3, #128	; 0x80
     31e:	50d1      	str	r1, [r2, r3]
}
     320:	46c0      	nop			; (mov r8, r8)
     322:	46bd      	mov	sp, r7
     324:	b002      	add	sp, #8
     326:	bd80      	pop	{r7, pc}
     328:	e000e100 	.word	0xe000e100

0000032c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
     32c:	b580      	push	{r7, lr}
     32e:	b084      	sub	sp, #16
     330:	af00      	add	r7, sp, #0
     332:	0002      	movs	r2, r0
     334:	1dfb      	adds	r3, r7, #7
     336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
     338:	1dfb      	adds	r3, r7, #7
     33a:	781a      	ldrb	r2, [r3, #0]
     33c:	4b37      	ldr	r3, [pc, #220]	; (41c <_dac_interrupt_handler+0xf0>)
     33e:	0092      	lsls	r2, r2, #2
     340:	58d3      	ldr	r3, [r2, r3]
     342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
     344:	68fb      	ldr	r3, [r7, #12]
     346:	681b      	ldr	r3, [r3, #0]
     348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     34a:	68bb      	ldr	r3, [r7, #8]
     34c:	799b      	ldrb	r3, [r3, #6]
     34e:	b2db      	uxtb	r3, r3
     350:	001a      	movs	r2, r3
     352:	2301      	movs	r3, #1
     354:	4013      	ands	r3, r2
     356:	d00e      	beq.n	376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     358:	68bb      	ldr	r3, [r7, #8]
     35a:	2201      	movs	r2, #1
     35c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
     35e:	68fb      	ldr	r3, [r7, #12]
     360:	3314      	adds	r3, #20
     362:	2b00      	cmp	r3, #0
     364:	d007      	beq.n	376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
     366:	68fb      	ldr	r3, [r7, #12]
     368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
     36a:	2b00      	cmp	r3, #0
     36c:	d003      	beq.n	376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     36e:	68fb      	ldr	r3, [r7, #12]
     370:	699b      	ldr	r3, [r3, #24]
     372:	2000      	movs	r0, #0
     374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     376:	68bb      	ldr	r3, [r7, #8]
     378:	799b      	ldrb	r3, [r3, #6]
     37a:	b2db      	uxtb	r3, r3
     37c:	001a      	movs	r2, r3
     37e:	2302      	movs	r3, #2
     380:	4013      	ands	r3, r2
     382:	d047      	beq.n	414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     384:	68bb      	ldr	r3, [r7, #8]
     386:	2202      	movs	r2, #2
     388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
     38a:	68fb      	ldr	r3, [r7, #12]
     38c:	899b      	ldrh	r3, [r3, #12]
     38e:	b29b      	uxth	r3, r3
     390:	2b00      	cmp	r3, #0
     392:	d033      	beq.n	3fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
     394:	68fb      	ldr	r3, [r7, #12]
     396:	689a      	ldr	r2, [r3, #8]
     398:	68fb      	ldr	r3, [r7, #12]
     39a:	89db      	ldrh	r3, [r3, #14]
     39c:	b29b      	uxth	r3, r3
     39e:	1c59      	adds	r1, r3, #1
     3a0:	b288      	uxth	r0, r1
     3a2:	68f9      	ldr	r1, [r7, #12]
     3a4:	81c8      	strh	r0, [r1, #14]
     3a6:	005b      	lsls	r3, r3, #1
     3a8:	18d3      	adds	r3, r2, r3
     3aa:	881b      	ldrh	r3, [r3, #0]
     3ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
     3ae:	68bb      	ldr	r3, [r7, #8]
     3b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
     3b2:	68fb      	ldr	r3, [r7, #12]
     3b4:	899b      	ldrh	r3, [r3, #12]
     3b6:	b29b      	uxth	r3, r3
     3b8:	3b01      	subs	r3, #1
     3ba:	b29a      	uxth	r2, r3
     3bc:	68fb      	ldr	r3, [r7, #12]
     3be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
     3c0:	68fb      	ldr	r3, [r7, #12]
     3c2:	899b      	ldrh	r3, [r3, #12]
     3c4:	b29b      	uxth	r3, r3
     3c6:	2b00      	cmp	r3, #0
     3c8:	d118      	bne.n	3fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
     3ca:	68fb      	ldr	r3, [r7, #12]
     3cc:	2220      	movs	r2, #32
     3ce:	2100      	movs	r1, #0
     3d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     3d2:	68bb      	ldr	r3, [r7, #8]
     3d4:	2202      	movs	r2, #2
     3d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     3d8:	68bb      	ldr	r3, [r7, #8]
     3da:	2202      	movs	r2, #2
     3dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
     3de:	2019      	movs	r0, #25
     3e0:	4b0f      	ldr	r3, [pc, #60]	; (420 <_dac_interrupt_handler+0xf4>)
     3e2:	4798      	blx	r3

				if ((module->callback) &&
     3e4:	68fb      	ldr	r3, [r7, #12]
     3e6:	3314      	adds	r3, #20
     3e8:	2b00      	cmp	r3, #0
     3ea:	d007      	beq.n	3fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
     3ec:	68fb      	ldr	r3, [r7, #12]
     3ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
     3f0:	2b00      	cmp	r3, #0
     3f2:	d003      	beq.n	3fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     3f4:	68fb      	ldr	r3, [r7, #12]
     3f6:	69db      	ldr	r3, [r3, #28]
     3f8:	2000      	movs	r0, #0
     3fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
     3fc:	68fb      	ldr	r3, [r7, #12]
     3fe:	3314      	adds	r3, #20
     400:	2b00      	cmp	r3, #0
     402:	d007      	beq.n	414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
     404:	68fb      	ldr	r3, [r7, #12]
     406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
     408:	2b00      	cmp	r3, #0
     40a:	d003      	beq.n	414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     40c:	68fb      	ldr	r3, [r7, #12]
     40e:	695b      	ldr	r3, [r3, #20]
     410:	2000      	movs	r0, #0
     412:	4798      	blx	r3
		}
	}
}
     414:	46c0      	nop			; (mov r8, r8)
     416:	46bd      	mov	sp, r7
     418:	b004      	add	sp, #16
     41a:	bd80      	pop	{r7, pc}
     41c:	200041b8 	.word	0x200041b8
     420:	000002fd 	.word	0x000002fd

00000424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     424:	b580      	push	{r7, lr}
     426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
     428:	2000      	movs	r0, #0
     42a:	4b02      	ldr	r3, [pc, #8]	; (434 <DAC_Handler+0x10>)
     42c:	4798      	blx	r3
}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	46bd      	mov	sp, r7
     432:	bd80      	pop	{r7, pc}
     434:	0000032d 	.word	0x0000032d

00000438 <system_interrupt_enter_critical_section>:
{
     438:	b580      	push	{r7, lr}
     43a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     43c:	4b02      	ldr	r3, [pc, #8]	; (448 <system_interrupt_enter_critical_section+0x10>)
     43e:	4798      	blx	r3
}
     440:	46c0      	nop			; (mov r8, r8)
     442:	46bd      	mov	sp, r7
     444:	bd80      	pop	{r7, pc}
     446:	46c0      	nop			; (mov r8, r8)
     448:	000127e9 	.word	0x000127e9

0000044c <system_interrupt_leave_critical_section>:
{
     44c:	b580      	push	{r7, lr}
     44e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     450:	4b02      	ldr	r3, [pc, #8]	; (45c <system_interrupt_leave_critical_section+0x10>)
     452:	4798      	blx	r3
}
     454:	46c0      	nop			; (mov r8, r8)
     456:	46bd      	mov	sp, r7
     458:	bd80      	pop	{r7, pc}
     45a:	46c0      	nop			; (mov r8, r8)
     45c:	0001283d 	.word	0x0001283d

00000460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     460:	b580      	push	{r7, lr}
     462:	b086      	sub	sp, #24
     464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
     466:	4b49      	ldr	r3, [pc, #292]	; (58c <DMAC_Handler+0x12c>)
     468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     46a:	4b49      	ldr	r3, [pc, #292]	; (590 <DMAC_Handler+0x130>)
     46c:	8c1b      	ldrh	r3, [r3, #32]
     46e:	b29b      	uxth	r3, r3
     470:	b2da      	uxtb	r2, r3
     472:	2317      	movs	r3, #23
     474:	18fb      	adds	r3, r7, r3
     476:	210f      	movs	r1, #15
     478:	400a      	ands	r2, r1
     47a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     47c:	2317      	movs	r3, #23
     47e:	18fb      	adds	r3, r7, r3
     480:	781a      	ldrb	r2, [r3, #0]
     482:	4b44      	ldr	r3, [pc, #272]	; (594 <DMAC_Handler+0x134>)
     484:	0092      	lsls	r2, r2, #2
     486:	58d3      	ldr	r3, [r2, r3]
     488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     48a:	4a41      	ldr	r2, [pc, #260]	; (590 <DMAC_Handler+0x130>)
     48c:	693b      	ldr	r3, [r7, #16]
     48e:	781b      	ldrb	r3, [r3, #0]
     490:	210f      	movs	r1, #15
     492:	400b      	ands	r3, r1
     494:	b2d9      	uxtb	r1, r3
     496:	233f      	movs	r3, #63	; 0x3f
     498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
     49a:	493d      	ldr	r1, [pc, #244]	; (590 <DMAC_Handler+0x130>)
     49c:	230f      	movs	r3, #15
     49e:	18fb      	adds	r3, r7, r3
     4a0:	224e      	movs	r2, #78	; 0x4e
     4a2:	5c8a      	ldrb	r2, [r1, r2]
     4a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     4a6:	693b      	ldr	r3, [r7, #16]
     4a8:	781b      	ldrb	r3, [r3, #0]
     4aa:	4a3b      	ldr	r2, [pc, #236]	; (598 <DMAC_Handler+0x138>)
     4ac:	011b      	lsls	r3, r3, #4
     4ae:	18d3      	adds	r3, r2, r3
     4b0:	3302      	adds	r3, #2
     4b2:	881b      	ldrh	r3, [r3, #0]
     4b4:	b29b      	uxth	r3, r3
     4b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     4b8:	693b      	ldr	r3, [r7, #16]
     4ba:	781b      	ldrb	r3, [r3, #0]
     4bc:	4a37      	ldr	r2, [pc, #220]	; (59c <DMAC_Handler+0x13c>)
     4be:	011b      	lsls	r3, r3, #4
     4c0:	18d3      	adds	r3, r2, r3
     4c2:	3302      	adds	r3, #2
     4c4:	881b      	ldrh	r3, [r3, #0]
     4c6:	b29b      	uxth	r3, r3
     4c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
     4ca:	68ba      	ldr	r2, [r7, #8]
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	1ad2      	subs	r2, r2, r3
     4d0:	693b      	ldr	r3, [r7, #16]
     4d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     4d4:	230f      	movs	r3, #15
     4d6:	18fb      	adds	r3, r7, r3
     4d8:	781b      	ldrb	r3, [r3, #0]
     4da:	2201      	movs	r2, #1
     4dc:	4013      	ands	r3, r2
     4de:	d016      	beq.n	50e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     4e0:	4a2b      	ldr	r2, [pc, #172]	; (590 <DMAC_Handler+0x130>)
     4e2:	234e      	movs	r3, #78	; 0x4e
     4e4:	2101      	movs	r1, #1
     4e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     4e8:	693b      	ldr	r3, [r7, #16]
     4ea:	2210      	movs	r2, #16
     4ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     4ee:	693b      	ldr	r3, [r7, #16]
     4f0:	7c1b      	ldrb	r3, [r3, #16]
     4f2:	001a      	movs	r2, r3
     4f4:	2301      	movs	r3, #1
     4f6:	4013      	ands	r3, r2
     4f8:	d042      	beq.n	580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     4fa:	693b      	ldr	r3, [r7, #16]
     4fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     4fe:	2b00      	cmp	r3, #0
     500:	d03e      	beq.n	580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     502:	693b      	ldr	r3, [r7, #16]
     504:	685b      	ldr	r3, [r3, #4]
     506:	693a      	ldr	r2, [r7, #16]
     508:	0010      	movs	r0, r2
     50a:	4798      	blx	r3
     50c:	e038      	b.n	580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     50e:	230f      	movs	r3, #15
     510:	18fb      	adds	r3, r7, r3
     512:	781b      	ldrb	r3, [r3, #0]
     514:	2202      	movs	r2, #2
     516:	4013      	ands	r3, r2
     518:	d016      	beq.n	548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     51a:	4a1d      	ldr	r2, [pc, #116]	; (590 <DMAC_Handler+0x130>)
     51c:	234e      	movs	r3, #78	; 0x4e
     51e:	2102      	movs	r1, #2
     520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
     522:	693b      	ldr	r3, [r7, #16]
     524:	2200      	movs	r2, #0
     526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     528:	693b      	ldr	r3, [r7, #16]
     52a:	7c1b      	ldrb	r3, [r3, #16]
     52c:	001a      	movs	r2, r3
     52e:	2302      	movs	r3, #2
     530:	4013      	ands	r3, r2
     532:	d025      	beq.n	580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     534:	693b      	ldr	r3, [r7, #16]
     536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     538:	2b00      	cmp	r3, #0
     53a:	d021      	beq.n	580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     53c:	693b      	ldr	r3, [r7, #16]
     53e:	689b      	ldr	r3, [r3, #8]
     540:	693a      	ldr	r2, [r7, #16]
     542:	0010      	movs	r0, r2
     544:	4798      	blx	r3
     546:	e01b      	b.n	580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     548:	230f      	movs	r3, #15
     54a:	18fb      	adds	r3, r7, r3
     54c:	781b      	ldrb	r3, [r3, #0]
     54e:	2204      	movs	r2, #4
     550:	4013      	ands	r3, r2
     552:	d015      	beq.n	580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     554:	4a0e      	ldr	r2, [pc, #56]	; (590 <DMAC_Handler+0x130>)
     556:	234e      	movs	r3, #78	; 0x4e
     558:	2104      	movs	r1, #4
     55a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
     55c:	693b      	ldr	r3, [r7, #16]
     55e:	2206      	movs	r2, #6
     560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     562:	693b      	ldr	r3, [r7, #16]
     564:	7c1b      	ldrb	r3, [r3, #16]
     566:	001a      	movs	r2, r3
     568:	2304      	movs	r3, #4
     56a:	4013      	ands	r3, r2
     56c:	d008      	beq.n	580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     56e:	693b      	ldr	r3, [r7, #16]
     570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     572:	2b00      	cmp	r3, #0
     574:	d004      	beq.n	580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     576:	693b      	ldr	r3, [r7, #16]
     578:	68db      	ldr	r3, [r3, #12]
     57a:	693a      	ldr	r2, [r7, #16]
     57c:	0010      	movs	r0, r2
     57e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
     580:	4b07      	ldr	r3, [pc, #28]	; (5a0 <DMAC_Handler+0x140>)
     582:	4798      	blx	r3
}
     584:	46c0      	nop			; (mov r8, r8)
     586:	46bd      	mov	sp, r7
     588:	b006      	add	sp, #24
     58a:	bd80      	pop	{r7, pc}
     58c:	00000439 	.word	0x00000439
     590:	41004800 	.word	0x41004800
     594:	20000370 	.word	0x20000370
     598:	200041c0 	.word	0x200041c0
     59c:	20000320 	.word	0x20000320
     5a0:	0000044d 	.word	0x0000044d

000005a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     5a4:	b580      	push	{r7, lr}
     5a6:	b082      	sub	sp, #8
     5a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
     5aa:	4b15      	ldr	r3, [pc, #84]	; (600 <EVSYS_Handler+0x5c>)
     5ac:	691b      	ldr	r3, [r3, #16]
     5ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     5b0:	4b14      	ldr	r3, [pc, #80]	; (604 <EVSYS_Handler+0x60>)
     5b2:	699b      	ldr	r3, [r3, #24]
     5b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
     5b6:	4b12      	ldr	r3, [pc, #72]	; (600 <EVSYS_Handler+0x5c>)
     5b8:	689a      	ldr	r2, [r3, #8]
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	431a      	orrs	r2, r3
     5be:	4b10      	ldr	r3, [pc, #64]	; (600 <EVSYS_Handler+0x5c>)
     5c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     5c2:	4b10      	ldr	r3, [pc, #64]	; (604 <EVSYS_Handler+0x60>)
     5c4:	4a10      	ldr	r2, [pc, #64]	; (608 <EVSYS_Handler+0x64>)
     5c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     5c8:	e008      	b.n	5dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
     5ca:	687b      	ldr	r3, [r7, #4]
     5cc:	685a      	ldr	r2, [r3, #4]
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	681b      	ldr	r3, [r3, #0]
     5d2:	0018      	movs	r0, r3
     5d4:	4790      	blx	r2
		current_hook = current_hook->next;
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	689b      	ldr	r3, [r3, #8]
     5da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	2b00      	cmp	r3, #0
     5e0:	d1f3      	bne.n	5ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     5e2:	4b07      	ldr	r3, [pc, #28]	; (600 <EVSYS_Handler+0x5c>)
     5e4:	68db      	ldr	r3, [r3, #12]
     5e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
     5e8:	4b05      	ldr	r3, [pc, #20]	; (600 <EVSYS_Handler+0x5c>)
     5ea:	689b      	ldr	r3, [r3, #8]
     5ec:	683a      	ldr	r2, [r7, #0]
     5ee:	43d2      	mvns	r2, r2
     5f0:	401a      	ands	r2, r3
     5f2:	4b03      	ldr	r3, [pc, #12]	; (600 <EVSYS_Handler+0x5c>)
     5f4:	609a      	str	r2, [r3, #8]
}
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	46bd      	mov	sp, r7
     5fa:	b002      	add	sp, #8
     5fc:	bd80      	pop	{r7, pc}
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	20000000 	.word	0x20000000
     604:	42000400 	.word	0x42000400
     608:	0f0fffff 	.word	0x0f0fffff

0000060c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     60c:	b580      	push	{r7, lr}
     60e:	b082      	sub	sp, #8
     610:	af00      	add	r7, sp, #0
     612:	0002      	movs	r2, r0
     614:	6039      	str	r1, [r7, #0]
     616:	1dfb      	adds	r3, r7, #7
     618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     61a:	1dfb      	adds	r3, r7, #7
     61c:	781b      	ldrb	r3, [r3, #0]
     61e:	2b01      	cmp	r3, #1
     620:	d00a      	beq.n	638 <system_apb_clock_set_mask+0x2c>
     622:	2b02      	cmp	r3, #2
     624:	d00f      	beq.n	646 <system_apb_clock_set_mask+0x3a>
     626:	2b00      	cmp	r3, #0
     628:	d114      	bne.n	654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     62a:	4b0e      	ldr	r3, [pc, #56]	; (664 <system_apb_clock_set_mask+0x58>)
     62c:	4a0d      	ldr	r2, [pc, #52]	; (664 <system_apb_clock_set_mask+0x58>)
     62e:	6991      	ldr	r1, [r2, #24]
     630:	683a      	ldr	r2, [r7, #0]
     632:	430a      	orrs	r2, r1
     634:	619a      	str	r2, [r3, #24]
			break;
     636:	e00f      	b.n	658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <system_apb_clock_set_mask+0x58>)
     63a:	4a0a      	ldr	r2, [pc, #40]	; (664 <system_apb_clock_set_mask+0x58>)
     63c:	69d1      	ldr	r1, [r2, #28]
     63e:	683a      	ldr	r2, [r7, #0]
     640:	430a      	orrs	r2, r1
     642:	61da      	str	r2, [r3, #28]
			break;
     644:	e008      	b.n	658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     646:	4b07      	ldr	r3, [pc, #28]	; (664 <system_apb_clock_set_mask+0x58>)
     648:	4a06      	ldr	r2, [pc, #24]	; (664 <system_apb_clock_set_mask+0x58>)
     64a:	6a11      	ldr	r1, [r2, #32]
     64c:	683a      	ldr	r2, [r7, #0]
     64e:	430a      	orrs	r2, r1
     650:	621a      	str	r2, [r3, #32]
			break;
     652:	e001      	b.n	658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     654:	2317      	movs	r3, #23
     656:	e000      	b.n	65a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     658:	2300      	movs	r3, #0
}
     65a:	0018      	movs	r0, r3
     65c:	46bd      	mov	sp, r7
     65e:	b002      	add	sp, #8
     660:	bd80      	pop	{r7, pc}
     662:	46c0      	nop			; (mov r8, r8)
     664:	40000400 	.word	0x40000400

00000668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
     668:	b580      	push	{r7, lr}
     66a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
     66c:	2102      	movs	r1, #2
     66e:	2002      	movs	r0, #2
     670:	4b07      	ldr	r3, [pc, #28]	; (690 <_system_events_init+0x28>)
     672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     674:	4b07      	ldr	r3, [pc, #28]	; (694 <_system_events_init+0x2c>)
     676:	2201      	movs	r2, #1
     678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	4b05      	ldr	r3, [pc, #20]	; (694 <_system_events_init+0x2c>)
     67e:	781b      	ldrb	r3, [r3, #0]
     680:	b2db      	uxtb	r3, r3
     682:	001a      	movs	r2, r3
     684:	2301      	movs	r3, #1
     686:	4013      	ands	r3, r2
     688:	d1f8      	bne.n	67c <_system_events_init+0x14>
	}
}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	46bd      	mov	sp, r7
     68e:	bd80      	pop	{r7, pc}
     690:	0000060d 	.word	0x0000060d
     694:	42000400 	.word	0x42000400

00000698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     698:	b580      	push	{r7, lr}
     69a:	b084      	sub	sp, #16
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	681b      	ldr	r3, [r3, #0]
     6a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     6a6:	68fb      	ldr	r3, [r7, #12]
     6a8:	69db      	ldr	r3, [r3, #28]
     6aa:	2207      	movs	r2, #7
     6ac:	4013      	ands	r3, r2
     6ae:	1e5a      	subs	r2, r3, #1
     6b0:	4193      	sbcs	r3, r2
     6b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     6b4:	0018      	movs	r0, r3
     6b6:	46bd      	mov	sp, r7
     6b8:	b004      	add	sp, #16
     6ba:	bd80      	pop	{r7, pc}

000006bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     6bc:	b580      	push	{r7, lr}
     6be:	b082      	sub	sp, #8
     6c0:	af00      	add	r7, sp, #0
     6c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     6c4:	46c0      	nop			; (mov r8, r8)
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	0018      	movs	r0, r3
     6ca:	4b04      	ldr	r3, [pc, #16]	; (6dc <_i2c_master_wait_for_sync+0x20>)
     6cc:	4798      	blx	r3
     6ce:	1e03      	subs	r3, r0, #0
     6d0:	d1f9      	bne.n	6c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	46bd      	mov	sp, r7
     6d6:	b002      	add	sp, #8
     6d8:	bd80      	pop	{r7, pc}
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	00000699 	.word	0x00000699

000006e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     6e0:	b580      	push	{r7, lr}
     6e2:	b084      	sub	sp, #16
     6e4:	af00      	add	r7, sp, #0
     6e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	681b      	ldr	r3, [r3, #0]
     6ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6ee:	68fb      	ldr	r3, [r7, #12]
     6f0:	681b      	ldr	r3, [r3, #0]
     6f2:	011b      	lsls	r3, r3, #4
     6f4:	0fdb      	lsrs	r3, r3, #31
     6f6:	b2db      	uxtb	r3, r3
     6f8:	001a      	movs	r2, r3
     6fa:	230b      	movs	r3, #11
     6fc:	18fb      	adds	r3, r7, r3
     6fe:	1e51      	subs	r1, r2, #1
     700:	418a      	sbcs	r2, r1
     702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     704:	2308      	movs	r3, #8
     706:	18fb      	adds	r3, r7, r3
     708:	687a      	ldr	r2, [r7, #4]
     70a:	8b52      	ldrh	r2, [r2, #26]
     70c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
     70e:	687b      	ldr	r3, [r7, #4]
     710:	8b9b      	ldrh	r3, [r3, #28]
     712:	b29a      	uxth	r2, r3
     714:	2308      	movs	r3, #8
     716:	18fb      	adds	r3, r7, r3
     718:	2108      	movs	r1, #8
     71a:	1879      	adds	r1, r7, r1
     71c:	8809      	ldrh	r1, [r1, #0]
     71e:	1a8a      	subs	r2, r1, r2
     720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
     722:	687b      	ldr	r3, [r7, #4]
     724:	8b9b      	ldrh	r3, [r3, #28]
     726:	b29b      	uxth	r3, r3
     728:	3b01      	subs	r3, #1
     72a:	b29a      	uxth	r2, r3
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
     730:	230b      	movs	r3, #11
     732:	18fb      	adds	r3, r7, r3
     734:	781b      	ldrb	r3, [r3, #0]
     736:	2b00      	cmp	r3, #0
     738:	d010      	beq.n	75c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	7adb      	ldrb	r3, [r3, #11]
     73e:	2b00      	cmp	r3, #0
     740:	d01c      	beq.n	77c <_i2c_master_read+0x9c>
     742:	687b      	ldr	r3, [r7, #4]
     744:	8b9b      	ldrh	r3, [r3, #28]
     746:	b29b      	uxth	r3, r3
     748:	2b01      	cmp	r3, #1
     74a:	d117      	bne.n	77c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     74c:	68fb      	ldr	r3, [r7, #12]
     74e:	685b      	ldr	r3, [r3, #4]
     750:	2280      	movs	r2, #128	; 0x80
     752:	02d2      	lsls	r2, r2, #11
     754:	431a      	orrs	r2, r3
     756:	68fb      	ldr	r3, [r7, #12]
     758:	605a      	str	r2, [r3, #4]
     75a:	e00f      	b.n	77c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	7adb      	ldrb	r3, [r3, #11]
     760:	2b00      	cmp	r3, #0
     762:	d00b      	beq.n	77c <_i2c_master_read+0x9c>
     764:	687b      	ldr	r3, [r7, #4]
     766:	8b9b      	ldrh	r3, [r3, #28]
     768:	b29b      	uxth	r3, r3
     76a:	2b00      	cmp	r3, #0
     76c:	d106      	bne.n	77c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     76e:	68fb      	ldr	r3, [r7, #12]
     770:	685b      	ldr	r3, [r3, #4]
     772:	2280      	movs	r2, #128	; 0x80
     774:	02d2      	lsls	r2, r2, #11
     776:	431a      	orrs	r2, r3
     778:	68fb      	ldr	r3, [r7, #12]
     77a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	8b9b      	ldrh	r3, [r3, #28]
     780:	b29b      	uxth	r3, r3
     782:	2b00      	cmp	r3, #0
     784:	d10e      	bne.n	7a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
     786:	687b      	ldr	r3, [r7, #4]
     788:	7a9b      	ldrb	r3, [r3, #10]
     78a:	2b00      	cmp	r3, #0
     78c:	d00a      	beq.n	7a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     78e:	687b      	ldr	r3, [r7, #4]
     790:	0018      	movs	r0, r3
     792:	4b0e      	ldr	r3, [pc, #56]	; (7cc <_i2c_master_read+0xec>)
     794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     796:	68fb      	ldr	r3, [r7, #12]
     798:	685b      	ldr	r3, [r3, #4]
     79a:	22c0      	movs	r2, #192	; 0xc0
     79c:	0292      	lsls	r2, r2, #10
     79e:	431a      	orrs	r2, r3
     7a0:	68fb      	ldr	r3, [r7, #12]
     7a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	0018      	movs	r0, r3
     7a8:	4b08      	ldr	r3, [pc, #32]	; (7cc <_i2c_master_read+0xec>)
     7aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	6a1a      	ldr	r2, [r3, #32]
     7b0:	2308      	movs	r3, #8
     7b2:	18fb      	adds	r3, r7, r3
     7b4:	881b      	ldrh	r3, [r3, #0]
     7b6:	18d3      	adds	r3, r2, r3
     7b8:	68fa      	ldr	r2, [r7, #12]
     7ba:	2128      	movs	r1, #40	; 0x28
     7bc:	5c52      	ldrb	r2, [r2, r1]
     7be:	b2d2      	uxtb	r2, r2
     7c0:	701a      	strb	r2, [r3, #0]
}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	46bd      	mov	sp, r7
     7c6:	b004      	add	sp, #16
     7c8:	bd80      	pop	{r7, pc}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	000006bd 	.word	0x000006bd

000007d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     7d0:	b580      	push	{r7, lr}
     7d2:	b084      	sub	sp, #16
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	681b      	ldr	r3, [r3, #0]
     7dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     7de:	68fb      	ldr	r3, [r7, #12]
     7e0:	8b5b      	ldrh	r3, [r3, #26]
     7e2:	b29b      	uxth	r3, r3
     7e4:	001a      	movs	r2, r3
     7e6:	2304      	movs	r3, #4
     7e8:	4013      	ands	r3, r2
     7ea:	d004      	beq.n	7f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     7ec:	687b      	ldr	r3, [r7, #4]
     7ee:	2225      	movs	r2, #37	; 0x25
     7f0:	211e      	movs	r1, #30
     7f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
     7f4:	e024      	b.n	840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
     7f6:	230a      	movs	r3, #10
     7f8:	18fb      	adds	r3, r7, r3
     7fa:	687a      	ldr	r2, [r7, #4]
     7fc:	8b52      	ldrh	r2, [r2, #26]
     7fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
     800:	687b      	ldr	r3, [r7, #4]
     802:	8b9b      	ldrh	r3, [r3, #28]
     804:	b29a      	uxth	r2, r3
     806:	230a      	movs	r3, #10
     808:	18fb      	adds	r3, r7, r3
     80a:	210a      	movs	r1, #10
     80c:	1879      	adds	r1, r7, r1
     80e:	8809      	ldrh	r1, [r1, #0]
     810:	1a8a      	subs	r2, r1, r2
     812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
     814:	687b      	ldr	r3, [r7, #4]
     816:	8b9b      	ldrh	r3, [r3, #28]
     818:	b29b      	uxth	r3, r3
     81a:	3b01      	subs	r3, #1
     81c:	b29a      	uxth	r2, r3
     81e:	687b      	ldr	r3, [r7, #4]
     820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
     822:	687b      	ldr	r3, [r7, #4]
     824:	0018      	movs	r0, r3
     826:	4b08      	ldr	r3, [pc, #32]	; (848 <_i2c_master_write+0x78>)
     828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	6a1a      	ldr	r2, [r3, #32]
     82e:	230a      	movs	r3, #10
     830:	18fb      	adds	r3, r7, r3
     832:	881b      	ldrh	r3, [r3, #0]
     834:	18d3      	adds	r3, r2, r3
     836:	781b      	ldrb	r3, [r3, #0]
     838:	b2d9      	uxtb	r1, r3
     83a:	68fb      	ldr	r3, [r7, #12]
     83c:	2228      	movs	r2, #40	; 0x28
     83e:	5499      	strb	r1, [r3, r2]
}
     840:	46bd      	mov	sp, r7
     842:	b004      	add	sp, #16
     844:	bd80      	pop	{r7, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	000006bd 	.word	0x000006bd

0000084c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
     84c:	b580      	push	{r7, lr}
     84e:	b084      	sub	sp, #16
     850:	af00      	add	r7, sp, #0
     852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     854:	687b      	ldr	r3, [r7, #4]
     856:	681b      	ldr	r3, [r3, #0]
     858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     85a:	68fb      	ldr	r3, [r7, #12]
     85c:	7e1b      	ldrb	r3, [r3, #24]
     85e:	b2db      	uxtb	r3, r3
     860:	001a      	movs	r2, r3
     862:	2301      	movs	r3, #1
     864:	4013      	ands	r3, r2
     866:	d02b      	beq.n	8c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     868:	68fb      	ldr	r3, [r7, #12]
     86a:	2201      	movs	r2, #1
     86c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	8b5b      	ldrh	r3, [r3, #26]
     872:	b29b      	uxth	r3, r3
     874:	001a      	movs	r2, r3
     876:	2302      	movs	r3, #2
     878:	4013      	ands	r3, r2
     87a:	d004      	beq.n	886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	2225      	movs	r2, #37	; 0x25
     880:	2141      	movs	r1, #65	; 0x41
     882:	5499      	strb	r1, [r3, r2]
     884:	e01c      	b.n	8c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     886:	68fb      	ldr	r3, [r7, #12]
     888:	8b5b      	ldrh	r3, [r3, #26]
     88a:	b29b      	uxth	r3, r3
     88c:	001a      	movs	r2, r3
     88e:	2304      	movs	r3, #4
     890:	4013      	ands	r3, r2
     892:	d015      	beq.n	8c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     894:	687b      	ldr	r3, [r7, #4]
     896:	2225      	movs	r2, #37	; 0x25
     898:	2118      	movs	r1, #24
     89a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	2200      	movs	r2, #0
     8a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	7a9b      	ldrb	r3, [r3, #10]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d00a      	beq.n	8c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	0018      	movs	r0, r3
     8ae:	4b13      	ldr	r3, [pc, #76]	; (8fc <_i2c_master_async_address_response+0xb0>)
     8b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	685b      	ldr	r3, [r3, #4]
     8b6:	22c0      	movs	r2, #192	; 0xc0
     8b8:	0292      	lsls	r2, r2, #10
     8ba:	431a      	orrs	r2, r3
     8bc:	68fb      	ldr	r3, [r7, #12]
     8be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	8b9b      	ldrh	r3, [r3, #28]
     8c4:	b29a      	uxth	r2, r3
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	2225      	movs	r2, #37	; 0x25
     8ce:	5c9b      	ldrb	r3, [r3, r2]
     8d0:	b2db      	uxtb	r3, r3
     8d2:	2b05      	cmp	r3, #5
     8d4:	d10e      	bne.n	8f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     8d6:	687b      	ldr	r3, [r7, #4]
     8d8:	2224      	movs	r2, #36	; 0x24
     8da:	5c9b      	ldrb	r3, [r3, r2]
     8dc:	b2db      	uxtb	r3, r3
     8de:	2b00      	cmp	r3, #0
     8e0:	d104      	bne.n	8ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	0018      	movs	r0, r3
     8e6:	4b06      	ldr	r3, [pc, #24]	; (900 <_i2c_master_async_address_response+0xb4>)
     8e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
     8ea:	e003      	b.n	8f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	0018      	movs	r0, r3
     8f0:	4b04      	ldr	r3, [pc, #16]	; (904 <_i2c_master_async_address_response+0xb8>)
     8f2:	4798      	blx	r3
}
     8f4:	46c0      	nop			; (mov r8, r8)
     8f6:	46bd      	mov	sp, r7
     8f8:	b004      	add	sp, #16
     8fa:	bd80      	pop	{r7, pc}
     8fc:	000006bd 	.word	0x000006bd
     900:	000007d1 	.word	0x000007d1
     904:	000006e1 	.word	0x000006e1

00000908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
     908:	b580      	push	{r7, lr}
     90a:	b084      	sub	sp, #16
     90c:	af00      	add	r7, sp, #0
     90e:	60f8      	str	r0, [r7, #12]
     910:	60b9      	str	r1, [r7, #8]
     912:	1dfb      	adds	r3, r7, #7
     914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
     916:	1dfb      	adds	r3, r7, #7
     918:	781b      	ldrb	r3, [r3, #0]
     91a:	68fa      	ldr	r2, [r7, #12]
     91c:	3302      	adds	r3, #2
     91e:	009b      	lsls	r3, r3, #2
     920:	18d3      	adds	r3, r2, r3
     922:	3304      	adds	r3, #4
     924:	68ba      	ldr	r2, [r7, #8]
     926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
     928:	68fb      	ldr	r3, [r7, #12]
     92a:	7e1b      	ldrb	r3, [r3, #24]
     92c:	b2db      	uxtb	r3, r3
     92e:	b25a      	sxtb	r2, r3
     930:	1dfb      	adds	r3, r7, #7
     932:	781b      	ldrb	r3, [r3, #0]
     934:	2101      	movs	r1, #1
     936:	4099      	lsls	r1, r3
     938:	000b      	movs	r3, r1
     93a:	b25b      	sxtb	r3, r3
     93c:	4313      	orrs	r3, r2
     93e:	b25b      	sxtb	r3, r3
     940:	b2da      	uxtb	r2, r3
     942:	68fb      	ldr	r3, [r7, #12]
     944:	761a      	strb	r2, [r3, #24]
}
     946:	46c0      	nop			; (mov r8, r8)
     948:	46bd      	mov	sp, r7
     94a:	b004      	add	sp, #16
     94c:	bd80      	pop	{r7, pc}
	...

00000950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     950:	b590      	push	{r4, r7, lr}
     952:	b087      	sub	sp, #28
     954:	af00      	add	r7, sp, #0
     956:	6078      	str	r0, [r7, #4]
     958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
     960:	683b      	ldr	r3, [r7, #0]
     962:	685a      	ldr	r2, [r3, #4]
     964:	687b      	ldr	r3, [r7, #4]
     966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
     968:	683b      	ldr	r3, [r7, #0]
     96a:	885a      	ldrh	r2, [r3, #2]
     96c:	687b      	ldr	r3, [r7, #4]
     96e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     970:	687b      	ldr	r3, [r7, #4]
     972:	2224      	movs	r2, #36	; 0x24
     974:	2101      	movs	r1, #1
     976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
     978:	687b      	ldr	r3, [r7, #4]
     97a:	2225      	movs	r2, #37	; 0x25
     97c:	2105      	movs	r1, #5
     97e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     980:	693b      	ldr	r3, [r7, #16]
     982:	681b      	ldr	r3, [r3, #0]
     984:	011b      	lsls	r3, r3, #4
     986:	0fdb      	lsrs	r3, r3, #31
     988:	b2db      	uxtb	r3, r3
     98a:	001a      	movs	r2, r3
     98c:	230f      	movs	r3, #15
     98e:	18fb      	adds	r3, r7, r3
     990:	1e51      	subs	r1, r2, #1
     992:	418a      	sbcs	r2, r1
     994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     996:	683b      	ldr	r3, [r7, #0]
     998:	7a5b      	ldrb	r3, [r3, #9]
     99a:	2b00      	cmp	r3, #0
     99c:	d006      	beq.n	9ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     99e:	683b      	ldr	r3, [r7, #0]
     9a0:	7a9a      	ldrb	r2, [r3, #10]
     9a2:	687b      	ldr	r3, [r7, #4]
     9a4:	0011      	movs	r1, r2
     9a6:	0018      	movs	r0, r3
     9a8:	4b3b      	ldr	r3, [pc, #236]	; (a98 <_i2c_master_read_packet+0x148>)
     9aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     9ac:	230f      	movs	r3, #15
     9ae:	18fb      	adds	r3, r7, r3
     9b0:	781b      	ldrb	r3, [r3, #0]
     9b2:	2b00      	cmp	r3, #0
     9b4:	d00b      	beq.n	9ce <_i2c_master_read_packet+0x7e>
     9b6:	683b      	ldr	r3, [r7, #0]
     9b8:	885b      	ldrh	r3, [r3, #2]
     9ba:	2b01      	cmp	r3, #1
     9bc:	d107      	bne.n	9ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     9be:	693b      	ldr	r3, [r7, #16]
     9c0:	685b      	ldr	r3, [r3, #4]
     9c2:	2280      	movs	r2, #128	; 0x80
     9c4:	02d2      	lsls	r2, r2, #11
     9c6:	431a      	orrs	r2, r3
     9c8:	693b      	ldr	r3, [r7, #16]
     9ca:	605a      	str	r2, [r3, #4]
     9cc:	e005      	b.n	9da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     9ce:	693b      	ldr	r3, [r7, #16]
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	4a32      	ldr	r2, [pc, #200]	; (a9c <_i2c_master_read_packet+0x14c>)
     9d4:	401a      	ands	r2, r3
     9d6:	693b      	ldr	r3, [r7, #16]
     9d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
     9da:	683b      	ldr	r3, [r7, #0]
     9dc:	7a1b      	ldrb	r3, [r3, #8]
     9de:	2b00      	cmp	r3, #0
     9e0:	d045      	beq.n	a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     9e2:	683b      	ldr	r3, [r7, #0]
     9e4:	881b      	ldrh	r3, [r3, #0]
     9e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9e8:	683b      	ldr	r3, [r7, #0]
     9ea:	7a5b      	ldrb	r3, [r3, #9]
     9ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     9ee:	4313      	orrs	r3, r2
     9f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9f2:	2380      	movs	r3, #128	; 0x80
     9f4:	021b      	lsls	r3, r3, #8
     9f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
     9f8:	693b      	ldr	r3, [r7, #16]
     9fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     9fc:	2317      	movs	r3, #23
     9fe:	18fc      	adds	r4, r7, r3
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	0018      	movs	r0, r3
     a04:	4b26      	ldr	r3, [pc, #152]	; (aa0 <_i2c_master_read_packet+0x150>)
     a06:	4798      	blx	r3
     a08:	0003      	movs	r3, r0
     a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a0c:	693b      	ldr	r3, [r7, #16]
     a0e:	685b      	ldr	r3, [r3, #4]
     a10:	4a22      	ldr	r2, [pc, #136]	; (a9c <_i2c_master_read_packet+0x14c>)
     a12:	401a      	ands	r2, r3
     a14:	693b      	ldr	r3, [r7, #16]
     a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     a18:	2317      	movs	r3, #23
     a1a:	18fb      	adds	r3, r7, r3
     a1c:	781b      	ldrb	r3, [r3, #0]
     a1e:	2b00      	cmp	r3, #0
     a20:	d107      	bne.n	a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
     a22:	2317      	movs	r3, #23
     a24:	18fc      	adds	r4, r7, r3
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	0018      	movs	r0, r3
     a2a:	4b1e      	ldr	r3, [pc, #120]	; (aa4 <_i2c_master_read_packet+0x154>)
     a2c:	4798      	blx	r3
     a2e:	0003      	movs	r3, r0
     a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
     a32:	2317      	movs	r3, #23
     a34:	18fb      	adds	r3, r7, r3
     a36:	781b      	ldrb	r3, [r3, #0]
     a38:	2b00      	cmp	r3, #0
     a3a:	d114      	bne.n	a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
     a3c:	693b      	ldr	r3, [r7, #16]
     a3e:	2203      	movs	r2, #3
     a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a42:	683b      	ldr	r3, [r7, #0]
     a44:	881b      	ldrh	r3, [r3, #0]
     a46:	0a1b      	lsrs	r3, r3, #8
     a48:	b29b      	uxth	r3, r3
     a4a:	2278      	movs	r2, #120	; 0x78
     a4c:	4313      	orrs	r3, r2
     a4e:	b29b      	uxth	r3, r3
     a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a52:	683b      	ldr	r3, [r7, #0]
     a54:	7a5b      	ldrb	r3, [r3, #9]
     a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a5a:	2201      	movs	r2, #1
     a5c:	4313      	orrs	r3, r2
     a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a60:	693b      	ldr	r3, [r7, #16]
     a62:	625a      	str	r2, [r3, #36]	; 0x24
     a64:	e012      	b.n	a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
     a66:	2317      	movs	r3, #23
     a68:	18fb      	adds	r3, r7, r3
     a6a:	781b      	ldrb	r3, [r3, #0]
     a6c:	e00f      	b.n	a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
     a6e:	693b      	ldr	r3, [r7, #16]
     a70:	2203      	movs	r2, #3
     a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     a74:	683b      	ldr	r3, [r7, #0]
     a76:	881b      	ldrh	r3, [r3, #0]
     a78:	005b      	lsls	r3, r3, #1
     a7a:	2201      	movs	r2, #1
     a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     a7e:	683b      	ldr	r3, [r7, #0]
     a80:	7a5b      	ldrb	r3, [r3, #9]
     a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     a84:	4313      	orrs	r3, r2
     a86:	001a      	movs	r2, r3
     a88:	693b      	ldr	r3, [r7, #16]
     a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
     a8c:	2300      	movs	r3, #0
}
     a8e:	0018      	movs	r0, r3
     a90:	46bd      	mov	sp, r7
     a92:	b007      	add	sp, #28
     a94:	bd90      	pop	{r4, r7, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	0000433d 	.word	0x0000433d
     a9c:	fffbffff 	.word	0xfffbffff
     aa0:	000042df 	.word	0x000042df
     aa4:	00004281 	.word	0x00004281

00000aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     aa8:	b580      	push	{r7, lr}
     aaa:	b082      	sub	sp, #8
     aac:	af00      	add	r7, sp, #0
     aae:	6078      	str	r0, [r7, #4]
     ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     ab2:	687b      	ldr	r3, [r7, #4]
     ab4:	8b9b      	ldrh	r3, [r3, #28]
     ab6:	b29b      	uxth	r3, r3
     ab8:	2b00      	cmp	r3, #0
     aba:	d001      	beq.n	ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
     abc:	2305      	movs	r3, #5
     abe:	e00c      	b.n	ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	2201      	movs	r2, #1
     ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	2201      	movs	r2, #1
     aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
     acc:	683a      	ldr	r2, [r7, #0]
     ace:	687b      	ldr	r3, [r7, #4]
     ad0:	0011      	movs	r1, r2
     ad2:	0018      	movs	r0, r3
     ad4:	4b03      	ldr	r3, [pc, #12]	; (ae4 <i2c_master_read_packet_job+0x3c>)
     ad6:	4798      	blx	r3
     ad8:	0003      	movs	r3, r0
}
     ada:	0018      	movs	r0, r3
     adc:	46bd      	mov	sp, r7
     ade:	b002      	add	sp, #8
     ae0:	bd80      	pop	{r7, pc}
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	00000951 	.word	0x00000951

00000ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ae8:	b580      	push	{r7, lr}
     aea:	b084      	sub	sp, #16
     aec:	af00      	add	r7, sp, #0
     aee:	6078      	str	r0, [r7, #4]
     af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	681b      	ldr	r3, [r3, #0]
     af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     af8:	683b      	ldr	r3, [r7, #0]
     afa:	7a5b      	ldrb	r3, [r3, #9]
     afc:	2b00      	cmp	r3, #0
     afe:	d006      	beq.n	b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     b00:	683b      	ldr	r3, [r7, #0]
     b02:	7a9a      	ldrb	r2, [r3, #10]
     b04:	687b      	ldr	r3, [r7, #4]
     b06:	0011      	movs	r1, r2
     b08:	0018      	movs	r0, r3
     b0a:	4b1e      	ldr	r3, [pc, #120]	; (b84 <_i2c_master_write_packet+0x9c>)
     b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     b0e:	68fb      	ldr	r3, [r7, #12]
     b10:	685b      	ldr	r3, [r3, #4]
     b12:	4a1d      	ldr	r2, [pc, #116]	; (b88 <_i2c_master_write_packet+0xa0>)
     b14:	401a      	ands	r2, r3
     b16:	68fb      	ldr	r3, [r7, #12]
     b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     b1a:	683b      	ldr	r3, [r7, #0]
     b1c:	685a      	ldr	r2, [r3, #4]
     b1e:	687b      	ldr	r3, [r7, #4]
     b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
     b22:	683b      	ldr	r3, [r7, #0]
     b24:	885a      	ldrh	r2, [r3, #2]
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     b2a:	687b      	ldr	r3, [r7, #4]
     b2c:	2224      	movs	r2, #36	; 0x24
     b2e:	2100      	movs	r1, #0
     b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
     b32:	687b      	ldr	r3, [r7, #4]
     b34:	2225      	movs	r2, #37	; 0x25
     b36:	2105      	movs	r1, #5
     b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     b3a:	68fb      	ldr	r3, [r7, #12]
     b3c:	2203      	movs	r2, #3
     b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     b40:	683b      	ldr	r3, [r7, #0]
     b42:	7a1b      	ldrb	r3, [r3, #8]
     b44:	2b00      	cmp	r3, #0
     b46:	d00d      	beq.n	b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b48:	683b      	ldr	r3, [r7, #0]
     b4a:	881b      	ldrh	r3, [r3, #0]
     b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b4e:	683b      	ldr	r3, [r7, #0]
     b50:	7a5b      	ldrb	r3, [r3, #9]
     b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b54:	4313      	orrs	r3, r2
     b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b58:	2380      	movs	r3, #128	; 0x80
     b5a:	021b      	lsls	r3, r3, #8
     b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b5e:	68fb      	ldr	r3, [r7, #12]
     b60:	625a      	str	r2, [r3, #36]	; 0x24
     b62:	e009      	b.n	b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b64:	683b      	ldr	r3, [r7, #0]
     b66:	881b      	ldrh	r3, [r3, #0]
     b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     b6a:	683b      	ldr	r3, [r7, #0]
     b6c:	7a5b      	ldrb	r3, [r3, #9]
     b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b70:	4313      	orrs	r3, r2
     b72:	001a      	movs	r2, r3
     b74:	68fb      	ldr	r3, [r7, #12]
     b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
     b78:	2300      	movs	r3, #0
}
     b7a:	0018      	movs	r0, r3
     b7c:	46bd      	mov	sp, r7
     b7e:	b004      	add	sp, #16
     b80:	bd80      	pop	{r7, pc}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	0000433d 	.word	0x0000433d
     b88:	fffbffff 	.word	0xfffbffff

00000b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     b8c:	b580      	push	{r7, lr}
     b8e:	b082      	sub	sp, #8
     b90:	af00      	add	r7, sp, #0
     b92:	6078      	str	r0, [r7, #4]
     b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	8b9b      	ldrh	r3, [r3, #28]
     b9a:	b29b      	uxth	r3, r3
     b9c:	2b00      	cmp	r3, #0
     b9e:	d001      	beq.n	ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
     ba0:	2305      	movs	r3, #5
     ba2:	e00c      	b.n	bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
     ba4:	687b      	ldr	r3, [r7, #4]
     ba6:	2201      	movs	r2, #1
     ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	2201      	movs	r2, #1
     bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
     bb0:	683a      	ldr	r2, [r7, #0]
     bb2:	687b      	ldr	r3, [r7, #4]
     bb4:	0011      	movs	r1, r2
     bb6:	0018      	movs	r0, r3
     bb8:	4b03      	ldr	r3, [pc, #12]	; (bc8 <i2c_master_write_packet_job+0x3c>)
     bba:	4798      	blx	r3
     bbc:	0003      	movs	r3, r0
}
     bbe:	0018      	movs	r0, r3
     bc0:	46bd      	mov	sp, r7
     bc2:	b002      	add	sp, #8
     bc4:	bd80      	pop	{r7, pc}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	00000ae9 	.word	0x00000ae9

00000bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     bcc:	b580      	push	{r7, lr}
     bce:	b086      	sub	sp, #24
     bd0:	af00      	add	r7, sp, #0
     bd2:	0002      	movs	r2, r0
     bd4:	1dfb      	adds	r3, r7, #7
     bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
     bd8:	1dfb      	adds	r3, r7, #7
     bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
     bdc:	4b93      	ldr	r3, [pc, #588]	; (e2c <_i2c_master_interrupt_handler+0x260>)
     bde:	0092      	lsls	r2, r2, #2
     be0:	58d3      	ldr	r3, [r2, r3]
     be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     be4:	697b      	ldr	r3, [r7, #20]
     be6:	681b      	ldr	r3, [r3, #0]
     be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     bea:	693b      	ldr	r3, [r7, #16]
     bec:	681b      	ldr	r3, [r3, #0]
     bee:	011b      	lsls	r3, r3, #4
     bf0:	0fdb      	lsrs	r3, r3, #31
     bf2:	b2db      	uxtb	r3, r3
     bf4:	001a      	movs	r2, r3
     bf6:	230f      	movs	r3, #15
     bf8:	18fb      	adds	r3, r7, r3
     bfa:	1e51      	subs	r1, r2, #1
     bfc:	418a      	sbcs	r2, r1
     bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     c00:	230e      	movs	r3, #14
     c02:	18fb      	adds	r3, r7, r3
     c04:	697a      	ldr	r2, [r7, #20]
     c06:	7e52      	ldrb	r2, [r2, #25]
     c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     c0a:	697b      	ldr	r3, [r7, #20]
     c0c:	7e1b      	ldrb	r3, [r3, #24]
     c0e:	b2da      	uxtb	r2, r3
     c10:	230e      	movs	r3, #14
     c12:	18fb      	adds	r3, r7, r3
     c14:	210e      	movs	r1, #14
     c16:	1879      	adds	r1, r7, r1
     c18:	7809      	ldrb	r1, [r1, #0]
     c1a:	400a      	ands	r2, r1
     c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     c1e:	697b      	ldr	r3, [r7, #20]
     c20:	8b5b      	ldrh	r3, [r3, #26]
     c22:	b29b      	uxth	r3, r3
     c24:	2b00      	cmp	r3, #0
     c26:	d109      	bne.n	c3c <_i2c_master_interrupt_handler+0x70>
     c28:	697b      	ldr	r3, [r7, #20]
     c2a:	8b9b      	ldrh	r3, [r3, #28]
     c2c:	b29b      	uxth	r3, r3
     c2e:	2b00      	cmp	r3, #0
     c30:	d004      	beq.n	c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
     c32:	697b      	ldr	r3, [r7, #20]
     c34:	0018      	movs	r0, r3
     c36:	4b7e      	ldr	r3, [pc, #504]	; (e30 <_i2c_master_interrupt_handler+0x264>)
     c38:	4798      	blx	r3
     c3a:	e070      	b.n	d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     c3c:	697b      	ldr	r3, [r7, #20]
     c3e:	8b5b      	ldrh	r3, [r3, #26]
     c40:	b29b      	uxth	r3, r3
     c42:	2b00      	cmp	r3, #0
     c44:	d039      	beq.n	cba <_i2c_master_interrupt_handler+0xee>
     c46:	697b      	ldr	r3, [r7, #20]
     c48:	8b9b      	ldrh	r3, [r3, #28]
     c4a:	b29b      	uxth	r3, r3
     c4c:	2b00      	cmp	r3, #0
     c4e:	d134      	bne.n	cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
     c50:	697b      	ldr	r3, [r7, #20]
     c52:	2225      	movs	r2, #37	; 0x25
     c54:	5c9b      	ldrb	r3, [r3, r2]
     c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     c58:	2b05      	cmp	r3, #5
     c5a:	d12e      	bne.n	cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     c5c:	697b      	ldr	r3, [r7, #20]
     c5e:	2224      	movs	r2, #36	; 0x24
     c60:	5c9b      	ldrb	r3, [r3, r2]
     c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
     c64:	2b00      	cmp	r3, #0
     c66:	d128      	bne.n	cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     c68:	693b      	ldr	r3, [r7, #16]
     c6a:	2203      	movs	r2, #3
     c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     c6e:	697b      	ldr	r3, [r7, #20]
     c70:	2200      	movs	r2, #0
     c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
     c74:	697b      	ldr	r3, [r7, #20]
     c76:	2225      	movs	r2, #37	; 0x25
     c78:	2100      	movs	r1, #0
     c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
     c7c:	697b      	ldr	r3, [r7, #20]
     c7e:	7a9b      	ldrb	r3, [r3, #10]
     c80:	2b00      	cmp	r3, #0
     c82:	d00b      	beq.n	c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     c84:	697b      	ldr	r3, [r7, #20]
     c86:	0018      	movs	r0, r3
     c88:	4b6a      	ldr	r3, [pc, #424]	; (e34 <_i2c_master_interrupt_handler+0x268>)
     c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c8c:	693b      	ldr	r3, [r7, #16]
     c8e:	685b      	ldr	r3, [r3, #4]
     c90:	22c0      	movs	r2, #192	; 0xc0
     c92:	0292      	lsls	r2, r2, #10
     c94:	431a      	orrs	r2, r3
     c96:	693b      	ldr	r3, [r7, #16]
     c98:	605a      	str	r2, [r3, #4]
     c9a:	e002      	b.n	ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     c9c:	693b      	ldr	r3, [r7, #16]
     c9e:	2201      	movs	r2, #1
     ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     ca2:	230e      	movs	r3, #14
     ca4:	18fb      	adds	r3, r7, r3
     ca6:	781b      	ldrb	r3, [r3, #0]
     ca8:	2201      	movs	r2, #1
     caa:	4013      	ands	r3, r2
     cac:	d037      	beq.n	d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     cae:	697b      	ldr	r3, [r7, #20]
     cb0:	68db      	ldr	r3, [r3, #12]
     cb2:	697a      	ldr	r2, [r7, #20]
     cb4:	0010      	movs	r0, r2
     cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     cb8:	e031      	b.n	d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     cba:	697b      	ldr	r3, [r7, #20]
     cbc:	8b5b      	ldrh	r3, [r3, #26]
     cbe:	b29b      	uxth	r3, r3
     cc0:	2b00      	cmp	r3, #0
     cc2:	d02c      	beq.n	d1e <_i2c_master_interrupt_handler+0x152>
     cc4:	697b      	ldr	r3, [r7, #20]
     cc6:	8b9b      	ldrh	r3, [r3, #28]
     cc8:	b29b      	uxth	r3, r3
     cca:	2b00      	cmp	r3, #0
     ccc:	d027      	beq.n	d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     cce:	693b      	ldr	r3, [r7, #16]
     cd0:	8b5b      	ldrh	r3, [r3, #26]
     cd2:	b29b      	uxth	r3, r3
     cd4:	001a      	movs	r2, r3
     cd6:	2320      	movs	r3, #32
     cd8:	4013      	ands	r3, r2
     cda:	d111      	bne.n	d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     cdc:	230f      	movs	r3, #15
     cde:	18fb      	adds	r3, r7, r3
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	2201      	movs	r2, #1
     ce4:	4053      	eors	r3, r2
     ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     ce8:	2b00      	cmp	r3, #0
     cea:	d104      	bne.n	cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     cec:	697b      	ldr	r3, [r7, #20]
     cee:	8b9b      	ldrh	r3, [r3, #28]
     cf0:	b29b      	uxth	r3, r3
     cf2:	2b01      	cmp	r3, #1
     cf4:	d004      	beq.n	d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
     cf6:	697b      	ldr	r3, [r7, #20]
     cf8:	2225      	movs	r2, #37	; 0x25
     cfa:	2141      	movs	r1, #65	; 0x41
     cfc:	5499      	strb	r1, [r3, r2]
     cfe:	e00e      	b.n	d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     d00:	697b      	ldr	r3, [r7, #20]
     d02:	2224      	movs	r2, #36	; 0x24
     d04:	5c9b      	ldrb	r3, [r3, r2]
     d06:	b2db      	uxtb	r3, r3
     d08:	2b00      	cmp	r3, #0
     d0a:	d104      	bne.n	d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
     d0c:	697b      	ldr	r3, [r7, #20]
     d0e:	0018      	movs	r0, r3
     d10:	4b49      	ldr	r3, [pc, #292]	; (e38 <_i2c_master_interrupt_handler+0x26c>)
     d12:	4798      	blx	r3
     d14:	e003      	b.n	d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
     d16:	697b      	ldr	r3, [r7, #20]
     d18:	0018      	movs	r0, r3
     d1a:	4b48      	ldr	r3, [pc, #288]	; (e3c <_i2c_master_interrupt_handler+0x270>)
     d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d1e:	697b      	ldr	r3, [r7, #20]
     d20:	8b5b      	ldrh	r3, [r3, #26]
     d22:	b29b      	uxth	r3, r3
     d24:	2b00      	cmp	r3, #0
     d26:	d047      	beq.n	db8 <_i2c_master_interrupt_handler+0x1ec>
     d28:	697b      	ldr	r3, [r7, #20]
     d2a:	8b9b      	ldrh	r3, [r3, #28]
     d2c:	b29b      	uxth	r3, r3
     d2e:	2b00      	cmp	r3, #0
     d30:	d142      	bne.n	db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
     d32:	697b      	ldr	r3, [r7, #20]
     d34:	2225      	movs	r2, #37	; 0x25
     d36:	5c9b      	ldrb	r3, [r3, r2]
     d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d3a:	2b05      	cmp	r3, #5
     d3c:	d13c      	bne.n	db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	2224      	movs	r2, #36	; 0x24
     d42:	5c9b      	ldrb	r3, [r3, r2]
     d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
     d46:	2b01      	cmp	r3, #1
     d48:	d136      	bne.n	db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     d4a:	693b      	ldr	r3, [r7, #16]
     d4c:	7e1b      	ldrb	r3, [r3, #24]
     d4e:	b2db      	uxtb	r3, r3
     d50:	001a      	movs	r2, r3
     d52:	2302      	movs	r3, #2
     d54:	4013      	ands	r3, r2
     d56:	d002      	beq.n	d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     d58:	693b      	ldr	r3, [r7, #16]
     d5a:	2202      	movs	r2, #2
     d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     d5e:	693b      	ldr	r3, [r7, #16]
     d60:	2203      	movs	r2, #3
     d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     d64:	697b      	ldr	r3, [r7, #20]
     d66:	2200      	movs	r2, #0
     d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
     d6a:	697b      	ldr	r3, [r7, #20]
     d6c:	2225      	movs	r2, #37	; 0x25
     d6e:	2100      	movs	r1, #0
     d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     d72:	230e      	movs	r3, #14
     d74:	18fb      	adds	r3, r7, r3
     d76:	781b      	ldrb	r3, [r3, #0]
     d78:	2202      	movs	r2, #2
     d7a:	4013      	ands	r3, r2
     d7c:	d00b      	beq.n	d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     d7e:	697b      	ldr	r3, [r7, #20]
     d80:	2224      	movs	r2, #36	; 0x24
     d82:	5c9b      	ldrb	r3, [r3, r2]
     d84:	b2db      	uxtb	r3, r3
     d86:	2b01      	cmp	r3, #1
     d88:	d105      	bne.n	d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     d8a:	697b      	ldr	r3, [r7, #20]
     d8c:	691b      	ldr	r3, [r3, #16]
     d8e:	697a      	ldr	r2, [r7, #20]
     d90:	0010      	movs	r0, r2
     d92:	4798      	blx	r3
     d94:	e010      	b.n	db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     d96:	230e      	movs	r3, #14
     d98:	18fb      	adds	r3, r7, r3
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	2201      	movs	r2, #1
     d9e:	4013      	ands	r3, r2
     da0:	d00a      	beq.n	db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     da2:	697b      	ldr	r3, [r7, #20]
     da4:	2224      	movs	r2, #36	; 0x24
     da6:	5c9b      	ldrb	r3, [r3, r2]
     da8:	b2db      	uxtb	r3, r3
     daa:	2b00      	cmp	r3, #0
     dac:	d104      	bne.n	db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     dae:	697b      	ldr	r3, [r7, #20]
     db0:	68db      	ldr	r3, [r3, #12]
     db2:	697a      	ldr	r2, [r7, #20]
     db4:	0010      	movs	r0, r2
     db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     db8:	697b      	ldr	r3, [r7, #20]
     dba:	2225      	movs	r2, #37	; 0x25
     dbc:	5c9b      	ldrb	r3, [r3, r2]
     dbe:	b2db      	uxtb	r3, r3
     dc0:	2b05      	cmp	r3, #5
     dc2:	d02e      	beq.n	e22 <_i2c_master_interrupt_handler+0x256>
     dc4:	697b      	ldr	r3, [r7, #20]
     dc6:	2225      	movs	r2, #37	; 0x25
     dc8:	5c9b      	ldrb	r3, [r3, r2]
     dca:	b2db      	uxtb	r3, r3
     dcc:	2b00      	cmp	r3, #0
     dce:	d028      	beq.n	e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     dd0:	693b      	ldr	r3, [r7, #16]
     dd2:	2203      	movs	r2, #3
     dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     dd6:	697b      	ldr	r3, [r7, #20]
     dd8:	2200      	movs	r2, #0
     dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
     ddc:	697b      	ldr	r3, [r7, #20]
     dde:	2200      	movs	r2, #0
     de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     de2:	697b      	ldr	r3, [r7, #20]
     de4:	2225      	movs	r2, #37	; 0x25
     de6:	5c9b      	ldrb	r3, [r3, r2]
     de8:	b2db      	uxtb	r3, r3
     dea:	2b41      	cmp	r3, #65	; 0x41
     dec:	d00e      	beq.n	e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
     dee:	697b      	ldr	r3, [r7, #20]
     df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     df2:	2b00      	cmp	r3, #0
     df4:	d00a      	beq.n	e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
     df6:	697b      	ldr	r3, [r7, #20]
     df8:	0018      	movs	r0, r3
     dfa:	4b0e      	ldr	r3, [pc, #56]	; (e34 <_i2c_master_interrupt_handler+0x268>)
     dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     dfe:	693b      	ldr	r3, [r7, #16]
     e00:	685b      	ldr	r3, [r3, #4]
     e02:	22e0      	movs	r2, #224	; 0xe0
     e04:	02d2      	lsls	r2, r2, #11
     e06:	431a      	orrs	r2, r3
     e08:	693b      	ldr	r3, [r7, #16]
     e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     e0c:	230e      	movs	r3, #14
     e0e:	18fb      	adds	r3, r7, r3
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	2204      	movs	r2, #4
     e14:	4013      	ands	r3, r2
     e16:	d004      	beq.n	e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     e18:	697b      	ldr	r3, [r7, #20]
     e1a:	695b      	ldr	r3, [r3, #20]
     e1c:	697a      	ldr	r2, [r7, #20]
     e1e:	0010      	movs	r0, r2
     e20:	4798      	blx	r3
		}
	}
}
     e22:	46c0      	nop			; (mov r8, r8)
     e24:	46bd      	mov	sp, r7
     e26:	b006      	add	sp, #24
     e28:	bd80      	pop	{r7, pc}
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	20005648 	.word	0x20005648
     e30:	0000084d 	.word	0x0000084d
     e34:	000006bd 	.word	0x000006bd
     e38:	000007d1 	.word	0x000007d1
     e3c:	000006e1 	.word	0x000006e1

00000e40 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
     e40:	b580      	push	{r7, lr}
     e42:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     e44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     e48:	4b02      	ldr	r3, [pc, #8]	; (e54 <NVIC_SystemReset+0x14>)
     e4a:	4a03      	ldr	r2, [pc, #12]	; (e58 <NVIC_SystemReset+0x18>)
     e4c:	60da      	str	r2, [r3, #12]
     e4e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
     e52:	e7fe      	b.n	e52 <NVIC_SystemReset+0x12>
     e54:	e000ed00 	.word	0xe000ed00
     e58:	05fa0004 	.word	0x05fa0004

00000e5c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
     e5c:	b580      	push	{r7, lr}
     e5e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
     e60:	4b02      	ldr	r3, [pc, #8]	; (e6c <system_reset+0x10>)
     e62:	4798      	blx	r3
}
     e64:	46c0      	nop			; (mov r8, r8)
     e66:	46bd      	mov	sp, r7
     e68:	bd80      	pop	{r7, pc}
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	00000e41 	.word	0x00000e41

00000e70 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
     e70:	b580      	push	{r7, lr}
     e72:	b086      	sub	sp, #24
     e74:	af00      	add	r7, sp, #0
     e76:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
     e78:	4b9c      	ldr	r3, [pc, #624]	; (10ec <vCommandConsoleTask+0x27c>)
     e7a:	0018      	movs	r0, r3
     e7c:	4b9c      	ldr	r3, [pc, #624]	; (10f0 <vCommandConsoleTask+0x280>)
     e7e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
     e80:	4b9c      	ldr	r3, [pc, #624]	; (10f4 <vCommandConsoleTask+0x284>)
     e82:	0018      	movs	r0, r3
     e84:	4b9a      	ldr	r3, [pc, #616]	; (10f0 <vCommandConsoleTask+0x280>)
     e86:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
     e88:	4b9b      	ldr	r3, [pc, #620]	; (10f8 <vCommandConsoleTask+0x288>)
     e8a:	0018      	movs	r0, r3
     e8c:	4b98      	ldr	r3, [pc, #608]	; (10f0 <vCommandConsoleTask+0x280>)
     e8e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xI2cScan);
     e90:	4b9a      	ldr	r3, [pc, #616]	; (10fc <vCommandConsoleTask+0x28c>)
     e92:	0018      	movs	r0, r3
     e94:	4b96      	ldr	r3, [pc, #600]	; (10f0 <vCommandConsoleTask+0x280>)
     e96:	4798      	blx	r3
	// New Command registrations for version ans ticks
	FreeRTOS_CLIRegisterCommand(&xVersionCommand);
     e98:	4b99      	ldr	r3, [pc, #612]	; (1100 <vCommandConsoleTask+0x290>)
     e9a:	0018      	movs	r0, r3
     e9c:	4b94      	ldr	r3, [pc, #592]	; (10f0 <vCommandConsoleTask+0x280>)
     e9e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xTicksCommand);
     ea0:	4b98      	ldr	r3, [pc, #608]	; (1104 <vCommandConsoleTask+0x294>)
     ea2:	0018      	movs	r0, r3
     ea4:	4b92      	ldr	r3, [pc, #584]	; (10f0 <vCommandConsoleTask+0x280>)
     ea6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xGetIMUDataCommand);
     ea8:	4b97      	ldr	r3, [pc, #604]	; (1108 <vCommandConsoleTask+0x298>)
     eaa:	0018      	movs	r0, r3
     eac:	4b90      	ldr	r3, [pc, #576]	; (10f0 <vCommandConsoleTask+0x280>)
     eae:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xGetHapticCommand);
     eb0:	4b96      	ldr	r3, [pc, #600]	; (110c <vCommandConsoleTask+0x29c>)
     eb2:	0018      	movs	r0, r3
     eb4:	4b8e      	ldr	r3, [pc, #568]	; (10f0 <vCommandConsoleTask+0x280>)
     eb6:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
     eb8:	2317      	movs	r3, #23
     eba:	18fb      	adds	r3, r7, r3
     ebc:	2200      	movs	r2, #0
     ebe:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
     ec0:	4b93      	ldr	r3, [pc, #588]	; (1110 <vCommandConsoleTask+0x2a0>)
     ec2:	0018      	movs	r0, r3
     ec4:	4b93      	ldr	r3, [pc, #588]	; (1114 <vCommandConsoleTask+0x2a4>)
     ec6:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
     ec8:	2203      	movs	r2, #3
     eca:	2100      	movs	r1, #0
     ecc:	2001      	movs	r0, #1
     ece:	4b92      	ldr	r3, [pc, #584]	; (1118 <vCommandConsoleTask+0x2a8>)
     ed0:	4798      	blx	r3
     ed2:	0002      	movs	r2, r0
     ed4:	4b91      	ldr	r3, [pc, #580]	; (111c <vCommandConsoleTask+0x2ac>)
     ed6:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
     ed8:	4b90      	ldr	r3, [pc, #576]	; (111c <vCommandConsoleTask+0x2ac>)
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	2b00      	cmp	r3, #0
     ede:	d107      	bne.n	ef0 <vCommandConsoleTask+0x80>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
     ee0:	4b8f      	ldr	r3, [pc, #572]	; (1120 <vCommandConsoleTask+0x2b0>)
     ee2:	0019      	movs	r1, r3
     ee4:	2003      	movs	r0, #3
     ee6:	4b8f      	ldr	r3, [pc, #572]	; (1124 <vCommandConsoleTask+0x2b4>)
     ee8:	4798      	blx	r3
        vTaskSuspend(NULL);
     eea:	2000      	movs	r0, #0
     eec:	4b8e      	ldr	r3, [pc, #568]	; (1128 <vCommandConsoleTask+0x2b8>)
     eee:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
     ef0:	230c      	movs	r3, #12
     ef2:	18fb      	adds	r3, r7, r3
     ef4:	0018      	movs	r0, r3
     ef6:	4b8d      	ldr	r3, [pc, #564]	; (112c <vCommandConsoleTask+0x2bc>)
     ef8:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
     efa:	230c      	movs	r3, #12
     efc:	18fb      	adds	r3, r7, r3
     efe:	781b      	ldrb	r3, [r3, #0]
     f00:	2b0a      	cmp	r3, #10
     f02:	d004      	beq.n	f0e <vCommandConsoleTask+0x9e>
     f04:	230c      	movs	r3, #12
     f06:	18fb      	adds	r3, r7, r3
     f08:	781b      	ldrb	r3, [r3, #0]
     f0a:	2b0d      	cmp	r3, #13
     f0c:	d137      	bne.n	f7e <vCommandConsoleTask+0x10e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
     f0e:	4b88      	ldr	r3, [pc, #544]	; (1130 <vCommandConsoleTask+0x2c0>)
     f10:	0018      	movs	r0, r3
     f12:	4b80      	ldr	r3, [pc, #512]	; (1114 <vCommandConsoleTask+0x2a4>)
     f14:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
     f16:	4b87      	ldr	r3, [pc, #540]	; (1134 <vCommandConsoleTask+0x2c4>)
     f18:	2200      	movs	r2, #0
     f1a:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
     f1c:	4b86      	ldr	r3, [pc, #536]	; (1138 <vCommandConsoleTask+0x2c8>)
     f1e:	2200      	movs	r2, #0
     f20:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
     f22:	4986      	ldr	r1, [pc, #536]	; (113c <vCommandConsoleTask+0x2cc>)
     f24:	4b86      	ldr	r3, [pc, #536]	; (1140 <vCommandConsoleTask+0x2d0>)
     f26:	2231      	movs	r2, #49	; 0x31
     f28:	0018      	movs	r0, r3
     f2a:	4b86      	ldr	r3, [pc, #536]	; (1144 <vCommandConsoleTask+0x2d4>)
     f2c:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
     f2e:	4b84      	ldr	r3, [pc, #528]	; (1140 <vCommandConsoleTask+0x2d0>)
     f30:	2231      	movs	r2, #49	; 0x31
     f32:	2100      	movs	r1, #0
     f34:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
     f36:	4984      	ldr	r1, [pc, #528]	; (1148 <vCommandConsoleTask+0x2d8>)
     f38:	4b80      	ldr	r3, [pc, #512]	; (113c <vCommandConsoleTask+0x2cc>)
     f3a:	2264      	movs	r2, #100	; 0x64
     f3c:	0018      	movs	r0, r3
     f3e:	4b83      	ldr	r3, [pc, #524]	; (114c <vCommandConsoleTask+0x2dc>)
     f40:	4798      	blx	r3
     f42:	0003      	movs	r3, r0
     f44:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
     f46:	4b80      	ldr	r3, [pc, #512]	; (1148 <vCommandConsoleTask+0x2d8>)
     f48:	2263      	movs	r2, #99	; 0x63
     f4a:	2100      	movs	r1, #0
     f4c:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
     f4e:	4b7e      	ldr	r3, [pc, #504]	; (1148 <vCommandConsoleTask+0x2d8>)
     f50:	0018      	movs	r0, r3
     f52:	4b70      	ldr	r3, [pc, #448]	; (1114 <vCommandConsoleTask+0x2a4>)
     f54:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
     f56:	693b      	ldr	r3, [r7, #16]
     f58:	2b00      	cmp	r3, #0
     f5a:	d1ec      	bne.n	f36 <vCommandConsoleTask+0xc6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
     f5c:	2317      	movs	r3, #23
     f5e:	18fb      	adds	r3, r7, r3
     f60:	2200      	movs	r2, #0
     f62:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
     f64:	4b75      	ldr	r3, [pc, #468]	; (113c <vCommandConsoleTask+0x2cc>)
     f66:	2232      	movs	r2, #50	; 0x32
     f68:	2100      	movs	r1, #0
     f6a:	0018      	movs	r0, r3
     f6c:	4b78      	ldr	r3, [pc, #480]	; (1150 <vCommandConsoleTask+0x2e0>)
     f6e:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
     f70:	4b75      	ldr	r3, [pc, #468]	; (1148 <vCommandConsoleTask+0x2d8>)
     f72:	2264      	movs	r2, #100	; 0x64
     f74:	2100      	movs	r1, #0
     f76:	0018      	movs	r0, r3
     f78:	4b75      	ldr	r3, [pc, #468]	; (1150 <vCommandConsoleTask+0x2e0>)
     f7a:	4798      	blx	r3
     f7c:	e0b5      	b.n	10ea <vCommandConsoleTask+0x27a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
     f7e:	4b6d      	ldr	r3, [pc, #436]	; (1134 <vCommandConsoleTask+0x2c4>)
     f80:	781b      	ldrb	r3, [r3, #0]
     f82:	2b00      	cmp	r3, #0
     f84:	d059      	beq.n	103a <vCommandConsoleTask+0x1ca>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
     f86:	4b6c      	ldr	r3, [pc, #432]	; (1138 <vCommandConsoleTask+0x2c8>)
     f88:	781b      	ldrb	r3, [r3, #0]
     f8a:	2b03      	cmp	r3, #3
     f8c:	d80c      	bhi.n	fa8 <vCommandConsoleTask+0x138>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
     f8e:	4b6a      	ldr	r3, [pc, #424]	; (1138 <vCommandConsoleTask+0x2c8>)
     f90:	781b      	ldrb	r3, [r3, #0]
     f92:	1c5a      	adds	r2, r3, #1
     f94:	b2d1      	uxtb	r1, r2
     f96:	4a68      	ldr	r2, [pc, #416]	; (1138 <vCommandConsoleTask+0x2c8>)
     f98:	7011      	strb	r1, [r2, #0]
     f9a:	001a      	movs	r2, r3
     f9c:	230c      	movs	r3, #12
     f9e:	18fb      	adds	r3, r7, r3
     fa0:	7819      	ldrb	r1, [r3, #0]
     fa2:	4b6c      	ldr	r3, [pc, #432]	; (1154 <vCommandConsoleTask+0x2e4>)
     fa4:	5499      	strb	r1, [r3, r2]
     fa6:	e005      	b.n	fb4 <vCommandConsoleTask+0x144>
                } else {
                    isEscapeCode = false;
     fa8:	4b62      	ldr	r3, [pc, #392]	; (1134 <vCommandConsoleTask+0x2c4>)
     faa:	2200      	movs	r2, #0
     fac:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
     fae:	4b62      	ldr	r3, [pc, #392]	; (1138 <vCommandConsoleTask+0x2c8>)
     fb0:	2200      	movs	r2, #0
     fb2:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
     fb4:	4b60      	ldr	r3, [pc, #384]	; (1138 <vCommandConsoleTask+0x2c8>)
     fb6:	781b      	ldrb	r3, [r3, #0]
     fb8:	2b01      	cmp	r3, #1
     fba:	d999      	bls.n	ef0 <vCommandConsoleTask+0x80>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
     fbc:	4a66      	ldr	r2, [pc, #408]	; (1158 <vCommandConsoleTask+0x2e8>)
     fbe:	4b65      	ldr	r3, [pc, #404]	; (1154 <vCommandConsoleTask+0x2e4>)
     fc0:	0011      	movs	r1, r2
     fc2:	0018      	movs	r0, r3
     fc4:	4b65      	ldr	r3, [pc, #404]	; (115c <vCommandConsoleTask+0x2ec>)
     fc6:	4798      	blx	r3
     fc8:	1e03      	subs	r3, r0, #0
     fca:	d02f      	beq.n	102c <vCommandConsoleTask+0x1bc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
     fcc:	4964      	ldr	r1, [pc, #400]	; (1160 <vCommandConsoleTask+0x2f0>)
     fce:	4b5b      	ldr	r3, [pc, #364]	; (113c <vCommandConsoleTask+0x2cc>)
     fd0:	221b      	movs	r2, #27
     fd2:	0018      	movs	r0, r3
     fd4:	4b63      	ldr	r3, [pc, #396]	; (1164 <vCommandConsoleTask+0x2f4>)
     fd6:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
     fd8:	4b58      	ldr	r3, [pc, #352]	; (113c <vCommandConsoleTask+0x2cc>)
     fda:	0018      	movs	r0, r3
     fdc:	4b4d      	ldr	r3, [pc, #308]	; (1114 <vCommandConsoleTask+0x2a4>)
     fde:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
     fe0:	2317      	movs	r3, #23
     fe2:	18fb      	adds	r3, r7, r3
     fe4:	2200      	movs	r2, #0
     fe6:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
     fe8:	4b54      	ldr	r3, [pc, #336]	; (113c <vCommandConsoleTask+0x2cc>)
     fea:	2232      	movs	r2, #50	; 0x32
     fec:	2100      	movs	r1, #0
     fee:	0018      	movs	r0, r3
     ff0:	4b57      	ldr	r3, [pc, #348]	; (1150 <vCommandConsoleTask+0x2e0>)
     ff2:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
     ff4:	4952      	ldr	r1, [pc, #328]	; (1140 <vCommandConsoleTask+0x2d0>)
     ff6:	4b51      	ldr	r3, [pc, #324]	; (113c <vCommandConsoleTask+0x2cc>)
     ff8:	2231      	movs	r2, #49	; 0x31
     ffa:	0018      	movs	r0, r3
     ffc:	4b51      	ldr	r3, [pc, #324]	; (1144 <vCommandConsoleTask+0x2d4>)
     ffe:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
    1000:	4b4e      	ldr	r3, [pc, #312]	; (113c <vCommandConsoleTask+0x2cc>)
    1002:	0018      	movs	r0, r3
    1004:	4b58      	ldr	r3, [pc, #352]	; (1168 <vCommandConsoleTask+0x2f8>)
    1006:	4798      	blx	r3
    1008:	0003      	movs	r3, r0
    100a:	2b30      	cmp	r3, #48	; 0x30
    100c:	d806      	bhi.n	101c <vCommandConsoleTask+0x1ac>
    100e:	4b4c      	ldr	r3, [pc, #304]	; (1140 <vCommandConsoleTask+0x2d0>)
    1010:	0018      	movs	r0, r3
    1012:	4b55      	ldr	r3, [pc, #340]	; (1168 <vCommandConsoleTask+0x2f8>)
    1014:	4798      	blx	r3
    1016:	0003      	movs	r3, r0
    1018:	b2da      	uxtb	r2, r3
    101a:	e000      	b.n	101e <vCommandConsoleTask+0x1ae>
    101c:	2231      	movs	r2, #49	; 0x31
    101e:	2317      	movs	r3, #23
    1020:	18fb      	adds	r3, r7, r3
    1022:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
    1024:	4b45      	ldr	r3, [pc, #276]	; (113c <vCommandConsoleTask+0x2cc>)
    1026:	0018      	movs	r0, r3
    1028:	4b3a      	ldr	r3, [pc, #232]	; (1114 <vCommandConsoleTask+0x2a4>)
    102a:	4798      	blx	r3
                    }

                    isEscapeCode = false;
    102c:	4b41      	ldr	r3, [pc, #260]	; (1134 <vCommandConsoleTask+0x2c4>)
    102e:	2200      	movs	r2, #0
    1030:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
    1032:	4b41      	ldr	r3, [pc, #260]	; (1138 <vCommandConsoleTask+0x2c8>)
    1034:	2200      	movs	r2, #0
    1036:	701a      	strb	r2, [r3, #0]
    1038:	e75a      	b.n	ef0 <vCommandConsoleTask+0x80>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
    103a:	230c      	movs	r3, #12
    103c:	18fb      	adds	r3, r7, r3
    103e:	781b      	ldrb	r3, [r3, #0]
    1040:	2b0d      	cmp	r3, #13
    1042:	d100      	bne.n	1046 <vCommandConsoleTask+0x1d6>
    1044:	e754      	b.n	ef0 <vCommandConsoleTask+0x80>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    1046:	230c      	movs	r3, #12
    1048:	18fb      	adds	r3, r7, r3
    104a:	781b      	ldrb	r3, [r3, #0]
    104c:	2b08      	cmp	r3, #8
    104e:	d004      	beq.n	105a <vCommandConsoleTask+0x1ea>
    1050:	230c      	movs	r3, #12
    1052:	18fb      	adds	r3, r7, r3
    1054:	781b      	ldrb	r3, [r3, #0]
    1056:	2b7f      	cmp	r3, #127	; 0x7f
    1058:	d11c      	bne.n	1094 <vCommandConsoleTask+0x224>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
    105a:	2308      	movs	r3, #8
    105c:	18fb      	adds	r3, r7, r3
    105e:	4a43      	ldr	r2, [pc, #268]	; (116c <vCommandConsoleTask+0x2fc>)
    1060:	6812      	ldr	r2, [r2, #0]
    1062:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
    1064:	2308      	movs	r3, #8
    1066:	18fb      	adds	r3, r7, r3
    1068:	0018      	movs	r0, r3
    106a:	4b2a      	ldr	r3, [pc, #168]	; (1114 <vCommandConsoleTask+0x2a4>)
    106c:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
    106e:	2317      	movs	r3, #23
    1070:	18fb      	adds	r3, r7, r3
    1072:	781b      	ldrb	r3, [r3, #0]
    1074:	2b00      	cmp	r3, #0
    1076:	d037      	beq.n	10e8 <vCommandConsoleTask+0x278>
                    cInputIndex--;
    1078:	2317      	movs	r3, #23
    107a:	18fb      	adds	r3, r7, r3
    107c:	781a      	ldrb	r2, [r3, #0]
    107e:	2317      	movs	r3, #23
    1080:	18fb      	adds	r3, r7, r3
    1082:	3a01      	subs	r2, #1
    1084:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
    1086:	2317      	movs	r3, #23
    1088:	18fb      	adds	r3, r7, r3
    108a:	781b      	ldrb	r3, [r3, #0]
    108c:	4a2b      	ldr	r2, [pc, #172]	; (113c <vCommandConsoleTask+0x2cc>)
    108e:	2100      	movs	r1, #0
    1090:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    1092:	e029      	b.n	10e8 <vCommandConsoleTask+0x278>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
    1094:	230c      	movs	r3, #12
    1096:	18fb      	adds	r3, r7, r3
    1098:	781b      	ldrb	r3, [r3, #0]
    109a:	2b1b      	cmp	r3, #27
    109c:	d106      	bne.n	10ac <vCommandConsoleTask+0x23c>
                isEscapeCode = true;  // Next characters will be code arguments
    109e:	4b25      	ldr	r3, [pc, #148]	; (1134 <vCommandConsoleTask+0x2c4>)
    10a0:	2201      	movs	r2, #1
    10a2:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
    10a4:	4b24      	ldr	r3, [pc, #144]	; (1138 <vCommandConsoleTask+0x2c8>)
    10a6:	2200      	movs	r2, #0
    10a8:	701a      	strb	r2, [r3, #0]
    10aa:	e721      	b.n	ef0 <vCommandConsoleTask+0x80>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
    10ac:	2317      	movs	r3, #23
    10ae:	18fb      	adds	r3, r7, r3
    10b0:	781b      	ldrb	r3, [r3, #0]
    10b2:	2b31      	cmp	r3, #49	; 0x31
    10b4:	d80e      	bhi.n	10d4 <vCommandConsoleTask+0x264>
                    pcInputString[cInputIndex] = cRxedChar[0];
    10b6:	2317      	movs	r3, #23
    10b8:	18fb      	adds	r3, r7, r3
    10ba:	781b      	ldrb	r3, [r3, #0]
    10bc:	220c      	movs	r2, #12
    10be:	18ba      	adds	r2, r7, r2
    10c0:	7811      	ldrb	r1, [r2, #0]
    10c2:	4a1e      	ldr	r2, [pc, #120]	; (113c <vCommandConsoleTask+0x2cc>)
    10c4:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
    10c6:	2317      	movs	r3, #23
    10c8:	18fb      	adds	r3, r7, r3
    10ca:	781a      	ldrb	r2, [r3, #0]
    10cc:	2317      	movs	r3, #23
    10ce:	18fb      	adds	r3, r7, r3
    10d0:	3201      	adds	r2, #1
    10d2:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
    10d4:	230c      	movs	r3, #12
    10d6:	18fb      	adds	r3, r7, r3
    10d8:	2200      	movs	r2, #0
    10da:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
    10dc:	230c      	movs	r3, #12
    10de:	18fb      	adds	r3, r7, r3
    10e0:	0018      	movs	r0, r3
    10e2:	4b0c      	ldr	r3, [pc, #48]	; (1114 <vCommandConsoleTask+0x2a4>)
    10e4:	4798      	blx	r3
    10e6:	e703      	b.n	ef0 <vCommandConsoleTask+0x80>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    10e8:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
    10ea:	e701      	b.n	ef0 <vCommandConsoleTask+0x80>
    10ec:	00022598 	.word	0x00022598
    10f0:	00004485 	.word	0x00004485
    10f4:	00022608 	.word	0x00022608
    10f8:	000225a8 	.word	0x000225a8
    10fc:	000225b8 	.word	0x000225b8
    1100:	000225c8 	.word	0x000225c8
    1104:	000225d8 	.word	0x000225d8
    1108:	000225e8 	.word	0x000225e8
    110c:	000225f8 	.word	0x000225f8
    1110:	000222fc 	.word	0x000222fc
    1114:	0000a3a9 	.word	0x0000a3a9
    1118:	00006a49 	.word	0x00006a49
    111c:	20004210 	.word	0x20004210
    1120:	000224b0 	.word	0x000224b0
    1124:	0000a495 	.word	0x0000a495
    1128:	00008835 	.word	0x00008835
    112c:	00001171 	.word	0x00001171
    1130:	000224d0 	.word	0x000224d0
    1134:	20000394 	.word	0x20000394
    1138:	20000395 	.word	0x20000395
    113c:	200003cc 	.word	0x200003cc
    1140:	20000398 	.word	0x20000398
    1144:	00021307 	.word	0x00021307
    1148:	20000400 	.word	0x20000400
    114c:	000044f5 	.word	0x000044f5
    1150:	00020f1f 	.word	0x00020f1f
    1154:	20000464 	.word	0x20000464
    1158:	000224d4 	.word	0x000224d4
    115c:	00021221 	.word	0x00021221
    1160:	000224d8 	.word	0x000224d8
    1164:	000211dd 	.word	0x000211dd
    1168:	000212d7 	.word	0x000212d7
    116c:	000224e0 	.word	0x000224e0

00001170 <FreeRTOS_read>:
* @details		The function waits to acquire semaphone cliCharReadySemaphore then calls SerialConsoleReadCharacter to read 
                a character, if -1 is received it repeats, if 0 is received, it will load the character into character variable
* @note         None
*****************************************************************************/
static void FreeRTOS_read(char *character)
{   
    1170:	b580      	push	{r7, lr}
    1172:	b084      	sub	sp, #16
    1174:	af00      	add	r7, sp, #0
    1176:	6078      	str	r0, [r7, #4]
    // SerialConsoleReadCharacter returns -1 when no characters are received
    // and 0 when it has received character
    int is_rx_char = SerialConsoleReadCharacter((uint8_t *)character);
    1178:	687b      	ldr	r3, [r7, #4]
    117a:	0018      	movs	r0, r3
    117c:	4b0d      	ldr	r3, [pc, #52]	; (11b4 <FreeRTOS_read+0x44>)
    117e:	4798      	blx	r3
    1180:	0003      	movs	r3, r0
    1182:	60fb      	str	r3, [r7, #12]
    while(is_rx_char==-1){
    1184:	e00f      	b.n	11a6 <FreeRTOS_read+0x36>
        if(xSemaphoreTake(cliCharReadySemaphore,portMAX_DELAY)){
    1186:	4b0c      	ldr	r3, [pc, #48]	; (11b8 <FreeRTOS_read+0x48>)
    1188:	681a      	ldr	r2, [r3, #0]
    118a:	2301      	movs	r3, #1
    118c:	425b      	negs	r3, r3
    118e:	0019      	movs	r1, r3
    1190:	0010      	movs	r0, r2
    1192:	4b0a      	ldr	r3, [pc, #40]	; (11bc <FreeRTOS_read+0x4c>)
    1194:	4798      	blx	r3
    1196:	1e03      	subs	r3, r0, #0
    1198:	d005      	beq.n	11a6 <FreeRTOS_read+0x36>
            is_rx_char = SerialConsoleReadCharacter((uint8_t *)character);
    119a:	687b      	ldr	r3, [r7, #4]
    119c:	0018      	movs	r0, r3
    119e:	4b05      	ldr	r3, [pc, #20]	; (11b4 <FreeRTOS_read+0x44>)
    11a0:	4798      	blx	r3
    11a2:	0003      	movs	r3, r0
    11a4:	60fb      	str	r3, [r7, #12]
    while(is_rx_char==-1){
    11a6:	68fb      	ldr	r3, [r7, #12]
    11a8:	3301      	adds	r3, #1
    11aa:	d0ec      	beq.n	1186 <FreeRTOS_read+0x16>
        }

    }
    // vTaskSuspend(NULL);  // We suspend ourselves. Please remove this when doing your code
}
    11ac:	46c0      	nop			; (mov r8, r8)
    11ae:	46bd      	mov	sp, r7
    11b0:	b004      	add	sp, #16
    11b2:	bd80      	pop	{r7, pc}
    11b4:	0000a445 	.word	0x0000a445
    11b8:	20004210 	.word	0x20004210
    11bc:	00007a01 	.word	0x00007a01

000011c0 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
    11c0:	b580      	push	{r7, lr}
    11c2:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
    11c4:	4b0a      	ldr	r3, [pc, #40]	; (11f0 <CliCharReadySemaphoreGiveFromISR+0x30>)
    11c6:	2200      	movs	r2, #0
    11c8:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
    11ca:	4b0a      	ldr	r3, [pc, #40]	; (11f4 <CliCharReadySemaphoreGiveFromISR+0x34>)
    11cc:	681b      	ldr	r3, [r3, #0]
    11ce:	4a08      	ldr	r2, [pc, #32]	; (11f0 <CliCharReadySemaphoreGiveFromISR+0x30>)
    11d0:	0011      	movs	r1, r2
    11d2:	0018      	movs	r0, r3
    11d4:	4b08      	ldr	r3, [pc, #32]	; (11f8 <CliCharReadySemaphoreGiveFromISR+0x38>)
    11d6:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    11d8:	4b05      	ldr	r3, [pc, #20]	; (11f0 <CliCharReadySemaphoreGiveFromISR+0x30>)
    11da:	681b      	ldr	r3, [r3, #0]
    11dc:	2b00      	cmp	r3, #0
    11de:	d003      	beq.n	11e8 <CliCharReadySemaphoreGiveFromISR+0x28>
    11e0:	4b06      	ldr	r3, [pc, #24]	; (11fc <CliCharReadySemaphoreGiveFromISR+0x3c>)
    11e2:	2280      	movs	r2, #128	; 0x80
    11e4:	0552      	lsls	r2, r2, #21
    11e6:	601a      	str	r2, [r3, #0]
}
    11e8:	46c0      	nop			; (mov r8, r8)
    11ea:	46bd      	mov	sp, r7
    11ec:	bd80      	pop	{r7, pc}
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	20000468 	.word	0x20000468
    11f4:	20004210 	.word	0x20004210
    11f8:	00007379 	.word	0x00007379
    11fc:	e000ed04 	.word	0xe000ed04

00001200 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1200:	b590      	push	{r4, r7, lr}
    1202:	b087      	sub	sp, #28
    1204:	af00      	add	r7, sp, #0
    1206:	60f8      	str	r0, [r7, #12]
    1208:	60b9      	str	r1, [r7, #8]
    120a:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
    120c:	2317      	movs	r3, #23
    120e:	18fb      	adds	r3, r7, r3
    1210:	221b      	movs	r2, #27
    1212:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
    1214:	2317      	movs	r3, #23
    1216:	18fb      	adds	r3, r7, r3
    1218:	781b      	ldrb	r3, [r3, #0]
    121a:	4a08      	ldr	r2, [pc, #32]	; (123c <xCliClearTerminalScreen+0x3c>)
    121c:	4808      	ldr	r0, [pc, #32]	; (1240 <xCliClearTerminalScreen+0x40>)
    121e:	210f      	movs	r1, #15
    1220:	4c08      	ldr	r4, [pc, #32]	; (1244 <xCliClearTerminalScreen+0x44>)
    1222:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
    1224:	4a06      	ldr	r2, [pc, #24]	; (1240 <xCliClearTerminalScreen+0x40>)
    1226:	68b9      	ldr	r1, [r7, #8]
    1228:	68fb      	ldr	r3, [r7, #12]
    122a:	0018      	movs	r0, r3
    122c:	4b05      	ldr	r3, [pc, #20]	; (1244 <xCliClearTerminalScreen+0x44>)
    122e:	4798      	blx	r3
    return pdFALSE;
    1230:	2300      	movs	r3, #0
}
    1232:	0018      	movs	r0, r3
    1234:	46bd      	mov	sp, r7
    1236:	b007      	add	sp, #28
    1238:	bd90      	pop	{r4, r7, pc}
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	000224e4 	.word	0x000224e4
    1240:	20000384 	.word	0x20000384
    1244:	00021179 	.word	0x00021179

00001248 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1248:	b580      	push	{r7, lr}
    124a:	b084      	sub	sp, #16
    124c:	af00      	add	r7, sp, #0
    124e:	60f8      	str	r0, [r7, #12]
    1250:	60b9      	str	r1, [r7, #8]
    1252:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
    1254:	2002      	movs	r0, #2
    1256:	4b03      	ldr	r3, [pc, #12]	; (1264 <CLI_OTAU+0x1c>)
    1258:	4798      	blx	r3

    return pdFALSE;
    125a:	2300      	movs	r3, #0
}
    125c:	0018      	movs	r0, r3
    125e:	46bd      	mov	sp, r7
    1260:	b004      	add	sp, #16
    1262:	bd80      	pop	{r7, pc}
    1264:	00003aed 	.word	0x00003aed

00001268 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1268:	b580      	push	{r7, lr}
    126a:	b084      	sub	sp, #16
    126c:	af00      	add	r7, sp, #0
    126e:	60f8      	str	r0, [r7, #12]
    1270:	60b9      	str	r1, [r7, #8]
    1272:	607a      	str	r2, [r7, #4]
    system_reset();
    1274:	4b03      	ldr	r3, [pc, #12]	; (1284 <CLI_ResetDevice+0x1c>)
    1276:	4798      	blx	r3
    return pdFALSE;
    1278:	2300      	movs	r3, #0
}
    127a:	0018      	movs	r0, r3
    127c:	46bd      	mov	sp, r7
    127e:	b004      	add	sp, #16
    1280:	bd80      	pop	{r7, pc}
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	00000e5d 	.word	0x00000e5d

00001288 <CLI_Version>:
// Version CLI Command 
BaseType_t CLI_Version(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1288:	b590      	push	{r4, r7, lr}
    128a:	b085      	sub	sp, #20
    128c:	af00      	add	r7, sp, #0
    128e:	60f8      	str	r0, [r7, #12]
    1290:	60b9      	str	r1, [r7, #8]
    1292:	607a      	str	r2, [r7, #4]
	// Use snprintf to safely format the firmware version string into the provided buffer
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Firmware Version: %s\r\n", FIRMWARE_VERSION);
    1294:	4b05      	ldr	r3, [pc, #20]	; (12ac <CLI_Version+0x24>)
    1296:	4a06      	ldr	r2, [pc, #24]	; (12b0 <CLI_Version+0x28>)
    1298:	68b9      	ldr	r1, [r7, #8]
    129a:	68f8      	ldr	r0, [r7, #12]
    129c:	4c05      	ldr	r4, [pc, #20]	; (12b4 <CLI_Version+0x2c>)
    129e:	47a0      	blx	r4
	return pdFALSE; // Indicates no further output is expected
    12a0:	2300      	movs	r3, #0
}
    12a2:	0018      	movs	r0, r3
    12a4:	46bd      	mov	sp, r7
    12a6:	b005      	add	sp, #20
    12a8:	bd90      	pop	{r4, r7, pc}
    12aa:	46c0      	nop			; (mov r8, r8)
    12ac:	000224ec 	.word	0x000224ec
    12b0:	000224f4 	.word	0x000224f4
    12b4:	00021179 	.word	0x00021179

000012b8 <CLI_Ticks>:

// Ticks CLI Command 
BaseType_t CLI_Ticks(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    12b8:	b590      	push	{r4, r7, lr}
    12ba:	b087      	sub	sp, #28
    12bc:	af00      	add	r7, sp, #0
    12be:	60f8      	str	r0, [r7, #12]
    12c0:	60b9      	str	r1, [r7, #8]
    12c2:	607a      	str	r2, [r7, #4]
	// Retrieve the current tick count using FreeRTOS's xTaskGetTickCount()
	const TickType_t ticks = xTaskGetTickCount();
    12c4:	4b07      	ldr	r3, [pc, #28]	; (12e4 <CLI_Ticks+0x2c>)
    12c6:	4798      	blx	r3
    12c8:	0003      	movs	r3, r0
    12ca:	617b      	str	r3, [r7, #20]
	// Format the tick count into the provided buffer
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Ticks since start: %lu\r\n", (unsigned long)ticks);
    12cc:	697b      	ldr	r3, [r7, #20]
    12ce:	4a06      	ldr	r2, [pc, #24]	; (12e8 <CLI_Ticks+0x30>)
    12d0:	68b9      	ldr	r1, [r7, #8]
    12d2:	68f8      	ldr	r0, [r7, #12]
    12d4:	4c05      	ldr	r4, [pc, #20]	; (12ec <CLI_Ticks+0x34>)
    12d6:	47a0      	blx	r4
	return pdFALSE; // Indicates no further output is expected
    12d8:	2300      	movs	r3, #0
}
    12da:	0018      	movs	r0, r3
    12dc:	46bd      	mov	sp, r7
    12de:	b007      	add	sp, #28
    12e0:	bd90      	pop	{r4, r7, pc}
    12e2:	46c0      	nop			; (mov r8, r8)
    12e4:	00008b9d 	.word	0x00008b9d
    12e8:	0002250c 	.word	0x0002250c
    12ec:	00021179 	.word	0x00021179

000012f0 <CLI_i2cScan>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    12f0:	b590      	push	{r4, r7, lr}
    12f2:	b08f      	sub	sp, #60	; 0x3c
    12f4:	af00      	add	r7, sp, #0
    12f6:	60f8      	str	r0, [r7, #12]
    12f8:	60b9      	str	r1, [r7, #8]
    12fa:	607a      	str	r2, [r7, #4]
    I2C_Data i2cDevice;
    uint8_t address;
    // Send 0 command byte
    uint8_t dataOut[2] = {0, 0};
    12fc:	2318      	movs	r3, #24
    12fe:	18fb      	adds	r3, r7, r3
    1300:	2200      	movs	r2, #0
    1302:	701a      	strb	r2, [r3, #0]
    1304:	2318      	movs	r3, #24
    1306:	18fb      	adds	r3, r7, r3
    1308:	2200      	movs	r2, #0
    130a:	705a      	strb	r2, [r3, #1]
    uint8_t dataIn[2];
    dataOut[0] = 0;
    130c:	2318      	movs	r3, #24
    130e:	18fb      	adds	r3, r7, r3
    1310:	2200      	movs	r2, #0
    1312:	701a      	strb	r2, [r3, #0]
    dataOut[1] = 0;
    1314:	2318      	movs	r3, #24
    1316:	18fb      	adds	r3, r7, r3
    1318:	2200      	movs	r2, #0
    131a:	705a      	strb	r2, [r3, #1]
    i2cDevice.address = 0;
    131c:	231c      	movs	r3, #28
    131e:	18fb      	adds	r3, r7, r3
    1320:	2200      	movs	r2, #0
    1322:	701a      	strb	r2, [r3, #0]
    i2cDevice.msgIn = (uint8_t *)&dataIn[0];
    1324:	231c      	movs	r3, #28
    1326:	18fb      	adds	r3, r7, r3
    1328:	2214      	movs	r2, #20
    132a:	18ba      	adds	r2, r7, r2
    132c:	609a      	str	r2, [r3, #8]
    i2cDevice.lenOut = 1;
    132e:	231c      	movs	r3, #28
    1330:	18fb      	adds	r3, r7, r3
    1332:	2201      	movs	r2, #1
    1334:	81da      	strh	r2, [r3, #14]
    i2cDevice.msgOut = (const uint8_t *)&dataOut[0];
    1336:	231c      	movs	r3, #28
    1338:	18fb      	adds	r3, r7, r3
    133a:	2218      	movs	r2, #24
    133c:	18ba      	adds	r2, r7, r2
    133e:	605a      	str	r2, [r3, #4]
    i2cDevice.lenIn = 1;
    1340:	231c      	movs	r3, #28
    1342:	18fb      	adds	r3, r7, r3
    1344:	2201      	movs	r2, #1
    1346:	819a      	strh	r2, [r3, #12]

    SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
    1348:	4b2c      	ldr	r3, [pc, #176]	; (13fc <CLI_i2cScan+0x10c>)
    134a:	0018      	movs	r0, r3
    134c:	4b2c      	ldr	r3, [pc, #176]	; (1400 <CLI_i2cScan+0x110>)
    134e:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
    1350:	2300      	movs	r3, #0
    1352:	637b      	str	r3, [r7, #52]	; 0x34
    1354:	e046      	b.n	13e4 <CLI_i2cScan+0xf4>
        snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
    1356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1358:	4a2a      	ldr	r2, [pc, #168]	; (1404 <CLI_i2cScan+0x114>)
    135a:	482b      	ldr	r0, [pc, #172]	; (1408 <CLI_i2cScan+0x118>)
    135c:	210f      	movs	r1, #15
    135e:	4c2b      	ldr	r4, [pc, #172]	; (140c <CLI_i2cScan+0x11c>)
    1360:	47a0      	blx	r4
        SerialConsoleWriteString(bufCli);
    1362:	4b29      	ldr	r3, [pc, #164]	; (1408 <CLI_i2cScan+0x118>)
    1364:	0018      	movs	r0, r3
    1366:	4b26      	ldr	r3, [pc, #152]	; (1400 <CLI_i2cScan+0x110>)
    1368:	4798      	blx	r3

        for (int j = 0; j < 16; j++) {
    136a:	2300      	movs	r3, #0
    136c:	633b      	str	r3, [r7, #48]	; 0x30
    136e:	e02f      	b.n	13d0 <CLI_i2cScan+0xe0>
            i2cDevice.address = (i + j) << 1;
    1370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1372:	b2da      	uxtb	r2, r3
    1374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1376:	b2db      	uxtb	r3, r3
    1378:	18d3      	adds	r3, r2, r3
    137a:	b2db      	uxtb	r3, r3
    137c:	18db      	adds	r3, r3, r3
    137e:	b2da      	uxtb	r2, r3
    1380:	231c      	movs	r3, #28
    1382:	18fb      	adds	r3, r7, r3
    1384:	701a      	strb	r2, [r3, #0]

            int32_t ret = I2cWriteDataWait(&i2cDevice, 100);
    1386:	231c      	movs	r3, #28
    1388:	18fb      	adds	r3, r7, r3
    138a:	2164      	movs	r1, #100	; 0x64
    138c:	0018      	movs	r0, r3
    138e:	4b20      	ldr	r3, [pc, #128]	; (1410 <CLI_i2cScan+0x120>)
    1390:	4798      	blx	r3
    1392:	0003      	movs	r3, r0
    1394:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (ret == 0) {
    1396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1398:	2b00      	cmp	r3, #0
    139a:	d10c      	bne.n	13b6 <CLI_i2cScan+0xc6>
                snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cDevice.address);
    139c:	231c      	movs	r3, #28
    139e:	18fb      	adds	r3, r7, r3
    13a0:	781b      	ldrb	r3, [r3, #0]
    13a2:	4a18      	ldr	r2, [pc, #96]	; (1404 <CLI_i2cScan+0x114>)
    13a4:	4818      	ldr	r0, [pc, #96]	; (1408 <CLI_i2cScan+0x118>)
    13a6:	210f      	movs	r1, #15
    13a8:	4c18      	ldr	r4, [pc, #96]	; (140c <CLI_i2cScan+0x11c>)
    13aa:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
    13ac:	4b16      	ldr	r3, [pc, #88]	; (1408 <CLI_i2cScan+0x118>)
    13ae:	0018      	movs	r0, r3
    13b0:	4b13      	ldr	r3, [pc, #76]	; (1400 <CLI_i2cScan+0x110>)
    13b2:	4798      	blx	r3
    13b4:	e009      	b.n	13ca <CLI_i2cScan+0xda>
            } else {
                snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
    13b6:	4b14      	ldr	r3, [pc, #80]	; (1408 <CLI_i2cScan+0x118>)
    13b8:	4a16      	ldr	r2, [pc, #88]	; (1414 <CLI_i2cScan+0x124>)
    13ba:	8811      	ldrh	r1, [r2, #0]
    13bc:	8019      	strh	r1, [r3, #0]
    13be:	7892      	ldrb	r2, [r2, #2]
    13c0:	709a      	strb	r2, [r3, #2]
                SerialConsoleWriteString(bufCli);
    13c2:	4b11      	ldr	r3, [pc, #68]	; (1408 <CLI_i2cScan+0x118>)
    13c4:	0018      	movs	r0, r3
    13c6:	4b0e      	ldr	r3, [pc, #56]	; (1400 <CLI_i2cScan+0x110>)
    13c8:	4798      	blx	r3
        for (int j = 0; j < 16; j++) {
    13ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    13cc:	3301      	adds	r3, #1
    13ce:	633b      	str	r3, [r7, #48]	; 0x30
    13d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    13d2:	2b0f      	cmp	r3, #15
    13d4:	ddcc      	ble.n	1370 <CLI_i2cScan+0x80>
            }
        }
        SerialConsoleWriteString("\r\n");
    13d6:	4b10      	ldr	r3, [pc, #64]	; (1418 <CLI_i2cScan+0x128>)
    13d8:	0018      	movs	r0, r3
    13da:	4b09      	ldr	r3, [pc, #36]	; (1400 <CLI_i2cScan+0x110>)
    13dc:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
    13de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13e0:	3310      	adds	r3, #16
    13e2:	637b      	str	r3, [r7, #52]	; 0x34
    13e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13e6:	2b7f      	cmp	r3, #127	; 0x7f
    13e8:	ddb5      	ble.n	1356 <CLI_i2cScan+0x66>
    }
    SerialConsoleWriteString("\r\n");
    13ea:	4b0b      	ldr	r3, [pc, #44]	; (1418 <CLI_i2cScan+0x128>)
    13ec:	0018      	movs	r0, r3
    13ee:	4b04      	ldr	r3, [pc, #16]	; (1400 <CLI_i2cScan+0x110>)
    13f0:	4798      	blx	r3
    return pdFALSE;
    13f2:	2300      	movs	r3, #0
}
    13f4:	0018      	movs	r0, r3
    13f6:	46bd      	mov	sp, r7
    13f8:	b00f      	add	sp, #60	; 0x3c
    13fa:	bd90      	pop	{r4, r7, pc}
    13fc:	00022528 	.word	0x00022528
    1400:	0000a3a9 	.word	0x0000a3a9
    1404:	0002255c 	.word	0x0002255c
    1408:	20000384 	.word	0x20000384
    140c:	00021179 	.word	0x00021179
    1410:	00001e59 	.word	0x00001e59
    1414:	00022564 	.word	0x00022564
    1418:	000224d0 	.word	0x000224d0

0000141c <CLI_IMU_data>:
 * @param pcWriteBuffer 
 * @param xWriteBufferLen 
 * @param pcCommandString 
 * @return BaseType_t 
 */
BaseType_t CLI_IMU_data(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
    141c:	b5b0      	push	{r4, r5, r7, lr}
    141e:	b088      	sub	sp, #32
    1420:	af02      	add	r7, sp, #8
    1422:	60f8      	str	r0, [r7, #12]
    1424:	60b9      	str	r1, [r7, #8]
    1426:	607a      	str	r2, [r7, #4]
    static int16_t raw_acceleration_data[3];
    static float acceleration_mg[3];
    uint8_t data_ready_flag;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
    1428:	4b2c      	ldr	r3, [pc, #176]	; (14dc <CLI_IMU_data+0xc0>)
    142a:	4798      	blx	r3
    142c:	0003      	movs	r3, r0
    142e:	617b      	str	r3, [r7, #20]
    data_ready_flag = 0;
    1430:	2313      	movs	r3, #19
    1432:	18fb      	adds	r3, r7, r3
    1434:	2200      	movs	r2, #0
    1436:	701a      	strb	r2, [r3, #0]
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &data_ready_flag);
    1438:	2313      	movs	r3, #19
    143a:	18fa      	adds	r2, r7, r3
    143c:	697b      	ldr	r3, [r7, #20]
    143e:	0011      	movs	r1, r2
    1440:	0018      	movs	r0, r3
    1442:	4b27      	ldr	r3, [pc, #156]	; (14e0 <CLI_IMU_data+0xc4>)
    1444:	4798      	blx	r3
    if(data_ready_flag){
    1446:	2313      	movs	r3, #19
    1448:	18fb      	adds	r3, r7, r3
    144a:	781b      	ldrb	r3, [r3, #0]
    144c:	2b00      	cmp	r3, #0
    144e:	d040      	beq.n	14d2 <CLI_IMU_data+0xb6>
        memset(raw_acceleration_data, 0x00, 3 * sizeof(int16_t));
    1450:	4b24      	ldr	r3, [pc, #144]	; (14e4 <CLI_IMU_data+0xc8>)
    1452:	2206      	movs	r2, #6
    1454:	2100      	movs	r1, #0
    1456:	0018      	movs	r0, r3
    1458:	4b23      	ldr	r3, [pc, #140]	; (14e8 <CLI_IMU_data+0xcc>)
    145a:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, raw_acceleration_data);
    145c:	4a21      	ldr	r2, [pc, #132]	; (14e4 <CLI_IMU_data+0xc8>)
    145e:	697b      	ldr	r3, [r7, #20]
    1460:	0011      	movs	r1, r2
    1462:	0018      	movs	r0, r3
    1464:	4b21      	ldr	r3, [pc, #132]	; (14ec <CLI_IMU_data+0xd0>)
    1466:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(raw_acceleration_data[0]);
    1468:	4b1e      	ldr	r3, [pc, #120]	; (14e4 <CLI_IMU_data+0xc8>)
    146a:	2200      	movs	r2, #0
    146c:	5e9b      	ldrsh	r3, [r3, r2]
    146e:	0018      	movs	r0, r3
    1470:	4b1f      	ldr	r3, [pc, #124]	; (14f0 <CLI_IMU_data+0xd4>)
    1472:	4798      	blx	r3
    1474:	1c02      	adds	r2, r0, #0
    1476:	4b1f      	ldr	r3, [pc, #124]	; (14f4 <CLI_IMU_data+0xd8>)
    1478:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(raw_acceleration_data[1]);
    147a:	4b1a      	ldr	r3, [pc, #104]	; (14e4 <CLI_IMU_data+0xc8>)
    147c:	2202      	movs	r2, #2
    147e:	5e9b      	ldrsh	r3, [r3, r2]
    1480:	0018      	movs	r0, r3
    1482:	4b1b      	ldr	r3, [pc, #108]	; (14f0 <CLI_IMU_data+0xd4>)
    1484:	4798      	blx	r3
    1486:	1c02      	adds	r2, r0, #0
    1488:	4b1a      	ldr	r3, [pc, #104]	; (14f4 <CLI_IMU_data+0xd8>)
    148a:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(raw_acceleration_data[2]);
    148c:	4b15      	ldr	r3, [pc, #84]	; (14e4 <CLI_IMU_data+0xc8>)
    148e:	2204      	movs	r2, #4
    1490:	5e9b      	ldrsh	r3, [r3, r2]
    1492:	0018      	movs	r0, r3
    1494:	4b16      	ldr	r3, [pc, #88]	; (14f0 <CLI_IMU_data+0xd4>)
    1496:	4798      	blx	r3
    1498:	1c02      	adds	r2, r0, #0
    149a:	4b16      	ldr	r3, [pc, #88]	; (14f4 <CLI_IMU_data+0xd8>)
    149c:	609a      	str	r2, [r3, #8]
        snprintf(pcWriteBuffer, xWriteBufferLen, "Ax: %d, Ay: %d, Az: %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
    149e:	4b15      	ldr	r3, [pc, #84]	; (14f4 <CLI_IMU_data+0xd8>)
    14a0:	681a      	ldr	r2, [r3, #0]
    14a2:	4b15      	ldr	r3, [pc, #84]	; (14f8 <CLI_IMU_data+0xdc>)
    14a4:	1c10      	adds	r0, r2, #0
    14a6:	4798      	blx	r3
    14a8:	0005      	movs	r5, r0
    14aa:	4b12      	ldr	r3, [pc, #72]	; (14f4 <CLI_IMU_data+0xd8>)
    14ac:	685a      	ldr	r2, [r3, #4]
    14ae:	4b12      	ldr	r3, [pc, #72]	; (14f8 <CLI_IMU_data+0xdc>)
    14b0:	1c10      	adds	r0, r2, #0
    14b2:	4798      	blx	r3
    14b4:	0004      	movs	r4, r0
    14b6:	4b0f      	ldr	r3, [pc, #60]	; (14f4 <CLI_IMU_data+0xd8>)
    14b8:	689a      	ldr	r2, [r3, #8]
    14ba:	4b0f      	ldr	r3, [pc, #60]	; (14f8 <CLI_IMU_data+0xdc>)
    14bc:	1c10      	adds	r0, r2, #0
    14be:	4798      	blx	r3
    14c0:	0003      	movs	r3, r0
    14c2:	4a0e      	ldr	r2, [pc, #56]	; (14fc <CLI_IMU_data+0xe0>)
    14c4:	68b9      	ldr	r1, [r7, #8]
    14c6:	68f8      	ldr	r0, [r7, #12]
    14c8:	9301      	str	r3, [sp, #4]
    14ca:	9400      	str	r4, [sp, #0]
    14cc:	002b      	movs	r3, r5
    14ce:	4c0c      	ldr	r4, [pc, #48]	; (1500 <CLI_IMU_data+0xe4>)
    14d0:	47a0      	blx	r4
        // SerialConsoleWriteString(bufCli);
    }
    // SerialConsoleWriteString("\r\n");
    return pdFALSE;
    14d2:	2300      	movs	r3, #0
    
}
    14d4:	0018      	movs	r0, r3
    14d6:	46bd      	mov	sp, r7
    14d8:	b006      	add	sp, #24
    14da:	bdb0      	pop	{r4, r5, r7, pc}
    14dc:	000022d9 	.word	0x000022d9
    14e0:	000020c9 	.word	0x000020c9
    14e4:	2000046c 	.word	0x2000046c
    14e8:	00020f1f 	.word	0x00020f1f
    14ec:	00002105 	.word	0x00002105
    14f0:	00002091 	.word	0x00002091
    14f4:	20000474 	.word	0x20000474
    14f8:	0001f4c5 	.word	0x0001f4c5
    14fc:	00022568 	.word	0x00022568
    1500:	00021179 	.word	0x00021179

00001504 <CLI_Haptic>:

BaseType_t CLI_Haptic(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
    1504:	b580      	push	{r7, lr}
    1506:	b086      	sub	sp, #24
    1508:	af00      	add	r7, sp, #0
    150a:	60f8      	str	r0, [r7, #12]
    150c:	60b9      	str	r1, [r7, #8]
    150e:	607a      	str	r2, [r7, #4]
    hapdev_ctx_t *dev_ctx;
    dev_ctx = GetHapStruct();
    1510:	4b09      	ldr	r3, [pc, #36]	; (1538 <CLI_Haptic+0x34>)
    1512:	4798      	blx	r3
    1514:	0003      	movs	r3, r0
    1516:	617b      	str	r3, [r7, #20]
    drv2605_go(dev_ctx);
    1518:	697b      	ldr	r3, [r7, #20]
    151a:	0018      	movs	r0, r3
    151c:	4b07      	ldr	r3, [pc, #28]	; (153c <CLI_Haptic+0x38>)
    151e:	4798      	blx	r3
    snprintf(pcWriteBuffer, xWriteBufferLen, "Go Command Sent\r\n");
    1520:	4a07      	ldr	r2, [pc, #28]	; (1540 <CLI_Haptic+0x3c>)
    1522:	68b9      	ldr	r1, [r7, #8]
    1524:	68fb      	ldr	r3, [r7, #12]
    1526:	0018      	movs	r0, r3
    1528:	4b06      	ldr	r3, [pc, #24]	; (1544 <CLI_Haptic+0x40>)
    152a:	4798      	blx	r3
    return pdFALSE;
    152c:	2300      	movs	r3, #0
}
    152e:	0018      	movs	r0, r3
    1530:	46bd      	mov	sp, r7
    1532:	b006      	add	sp, #24
    1534:	bd80      	pop	{r7, pc}
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	000017f9 	.word	0x000017f9
    153c:	000015ed 	.word	0x000015ed
    1540:	00022584 	.word	0x00022584
    1544:	00021179 	.word	0x00021179

00001548 <drv2605_readStatusReg>:
 * 
 * @param ctx 
 * @return uint8_t Returns status of register
 * NOTE: Should be 0xE0 for normal condition
 */
uint8_t drv2605_readStatusReg(hapdev_ctx_t *ctx){
    1548:	b590      	push	{r4, r7, lr}
    154a:	b085      	sub	sp, #20
    154c:	af00      	add	r7, sp, #0
    154e:	6078      	str	r0, [r7, #4]
    uint8_t reg;
    uint32_t error = drv2605_read_reg(ctx, DRV2605_REG_STATUS, &reg, 1);
    1550:	230b      	movs	r3, #11
    1552:	18fa      	adds	r2, r7, r3
    1554:	6878      	ldr	r0, [r7, #4]
    1556:	2301      	movs	r3, #1
    1558:	2100      	movs	r1, #0
    155a:	4c05      	ldr	r4, [pc, #20]	; (1570 <drv2605_readStatusReg+0x28>)
    155c:	47a0      	blx	r4
    155e:	0003      	movs	r3, r0
    1560:	60fb      	str	r3, [r7, #12]
    return reg;
    1562:	230b      	movs	r3, #11
    1564:	18fb      	adds	r3, r7, r3
    1566:	781b      	ldrb	r3, [r3, #0]
}
    1568:	0018      	movs	r0, r3
    156a:	46bd      	mov	sp, r7
    156c:	b005      	add	sp, #20
    156e:	bd90      	pop	{r4, r7, pc}
    1570:	00001693 	.word	0x00001693

00001574 <drv2605_setWaveform>:
    Playback starts at slot 0 and continues through to slot 7, stopping if it
  encounters a value of 0. A list of available waveforms can be found in
  section 11.2 of the datasheet: http://www.adafruit.com/datasheets/DRV2605.pdf
*/
/**************************************************************************/
void drv2605_setWaveform(hapdev_ctx_t *ctx, uint8_t slot, uint8_t w) {
    1574:	b590      	push	{r4, r7, lr}
    1576:	b085      	sub	sp, #20
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
    157c:	0008      	movs	r0, r1
    157e:	0011      	movs	r1, r2
    1580:	1cfb      	adds	r3, r7, #3
    1582:	1c02      	adds	r2, r0, #0
    1584:	701a      	strb	r2, [r3, #0]
    1586:	1cbb      	adds	r3, r7, #2
    1588:	1c0a      	adds	r2, r1, #0
    158a:	701a      	strb	r2, [r3, #0]
    uint8_t reg = w;
    158c:	230f      	movs	r3, #15
    158e:	18fb      	adds	r3, r7, r3
    1590:	1cba      	adds	r2, r7, #2
    1592:	7812      	ldrb	r2, [r2, #0]
    1594:	701a      	strb	r2, [r3, #0]
  drv2605_write_reg(ctx, DRV2605_REG_WAVESEQ1 + slot, &reg, 1);
    1596:	1cfb      	adds	r3, r7, #3
    1598:	781b      	ldrb	r3, [r3, #0]
    159a:	3304      	adds	r3, #4
    159c:	b2d9      	uxtb	r1, r3
    159e:	230f      	movs	r3, #15
    15a0:	18fa      	adds	r2, r7, r3
    15a2:	6878      	ldr	r0, [r7, #4]
    15a4:	2301      	movs	r3, #1
    15a6:	4c03      	ldr	r4, [pc, #12]	; (15b4 <drv2605_setWaveform+0x40>)
    15a8:	47a0      	blx	r4
}
    15aa:	46c0      	nop			; (mov r8, r8)
    15ac:	46bd      	mov	sp, r7
    15ae:	b005      	add	sp, #20
    15b0:	bd90      	pop	{r4, r7, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	0000164d 	.word	0x0000164d

000015b8 <drv2605_selectLibrary>:

    See section 7.6.4 in the datasheet for more details:
  http://www.adafruit.com/datasheets/DRV2605.pdf
*/
/**************************************************************************/
void drv2605_selectLibrary(hapdev_ctx_t *ctx, uint8_t lib) {
    15b8:	b590      	push	{r4, r7, lr}
    15ba:	b085      	sub	sp, #20
    15bc:	af00      	add	r7, sp, #0
    15be:	6078      	str	r0, [r7, #4]
    15c0:	000a      	movs	r2, r1
    15c2:	1cfb      	adds	r3, r7, #3
    15c4:	701a      	strb	r2, [r3, #0]
//   writeRegister8(DRV2605_REG_LIBRARY, lib);
    uint8_t reg = lib;
    15c6:	230f      	movs	r3, #15
    15c8:	18fb      	adds	r3, r7, r3
    15ca:	1cfa      	adds	r2, r7, #3
    15cc:	7812      	ldrb	r2, [r2, #0]
    15ce:	701a      	strb	r2, [r3, #0]
    drv2605_write_reg(ctx, DRV2605_REG_LIBRARY, &reg, 1);
    15d0:	230f      	movs	r3, #15
    15d2:	18fa      	adds	r2, r7, r3
    15d4:	6878      	ldr	r0, [r7, #4]
    15d6:	2301      	movs	r3, #1
    15d8:	2103      	movs	r1, #3
    15da:	4c03      	ldr	r4, [pc, #12]	; (15e8 <drv2605_selectLibrary+0x30>)
    15dc:	47a0      	blx	r4
}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	46bd      	mov	sp, r7
    15e2:	b005      	add	sp, #20
    15e4:	bd90      	pop	{r4, r7, pc}
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	0000164d 	.word	0x0000164d

000015ec <drv2605_go>:
/**************************************************************************/
/*!
  @brief Start playback of the waveforms (start moving!).
*/
/**************************************************************************/
void drv2605_go(hapdev_ctx_t *ctx) { 
    15ec:	b590      	push	{r4, r7, lr}
    15ee:	b085      	sub	sp, #20
    15f0:	af00      	add	r7, sp, #0
    15f2:	6078      	str	r0, [r7, #4]
    // writeRegister8(DRV2605_REG_GO, 1); 
    uint8_t reg = 1;
    15f4:	230f      	movs	r3, #15
    15f6:	18fb      	adds	r3, r7, r3
    15f8:	2201      	movs	r2, #1
    15fa:	701a      	strb	r2, [r3, #0]
    drv2605_write_reg(ctx, DRV2605_REG_GO, &reg, 1); 
    15fc:	230f      	movs	r3, #15
    15fe:	18fa      	adds	r2, r7, r3
    1600:	6878      	ldr	r0, [r7, #4]
    1602:	2301      	movs	r3, #1
    1604:	210c      	movs	r1, #12
    1606:	4c03      	ldr	r4, [pc, #12]	; (1614 <drv2605_go+0x28>)
    1608:	47a0      	blx	r4
}
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	46bd      	mov	sp, r7
    160e:	b005      	add	sp, #20
    1610:	bd90      	pop	{r4, r7, pc}
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	0000164d 	.word	0x0000164d

00001618 <drv2605_setMode>:
    5: Real-time playback\n
    6: Diagnostics\n
    7: Auto calibration
*/
/**************************************************************************/
void drv2605_setMode(hapdev_ctx_t *ctx, uint8_t mode) {
    1618:	b590      	push	{r4, r7, lr}
    161a:	b085      	sub	sp, #20
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
    1620:	000a      	movs	r2, r1
    1622:	1cfb      	adds	r3, r7, #3
    1624:	701a      	strb	r2, [r3, #0]
//   writeRegister8(DRV2605_REG_MODE, mode);
uint8_t reg = mode;
    1626:	230f      	movs	r3, #15
    1628:	18fb      	adds	r3, r7, r3
    162a:	1cfa      	adds	r2, r7, #3
    162c:	7812      	ldrb	r2, [r2, #0]
    162e:	701a      	strb	r2, [r3, #0]
drv2605_write_reg(ctx, DRV2605_REG_MODE, &reg, 1);
    1630:	230f      	movs	r3, #15
    1632:	18fa      	adds	r2, r7, r3
    1634:	6878      	ldr	r0, [r7, #4]
    1636:	2301      	movs	r3, #1
    1638:	2101      	movs	r1, #1
    163a:	4c03      	ldr	r4, [pc, #12]	; (1648 <drv2605_setMode+0x30>)
    163c:	47a0      	blx	r4
}
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	46bd      	mov	sp, r7
    1642:	b005      	add	sp, #20
    1644:	bd90      	pop	{r4, r7, pc}
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	0000164d 	.word	0x0000164d

0000164c <drv2605_write_reg>:
  *
  */
int32_t drv2605_write_reg(hapdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
    164c:	b5b0      	push	{r4, r5, r7, lr}
    164e:	b086      	sub	sp, #24
    1650:	af00      	add	r7, sp, #0
    1652:	60f8      	str	r0, [r7, #12]
    1654:	0008      	movs	r0, r1
    1656:	607a      	str	r2, [r7, #4]
    1658:	0019      	movs	r1, r3
    165a:	230b      	movs	r3, #11
    165c:	18fb      	adds	r3, r7, r3
    165e:	1c02      	adds	r2, r0, #0
    1660:	701a      	strb	r2, [r3, #0]
    1662:	2308      	movs	r3, #8
    1664:	18fb      	adds	r3, r7, r3
    1666:	1c0a      	adds	r2, r1, #0
    1668:	801a      	strh	r2, [r3, #0]
    int32_t ret;

    ret = ctx->write_reg(ctx->handle, reg, data, len);
    166a:	68fb      	ldr	r3, [r7, #12]
    166c:	681c      	ldr	r4, [r3, #0]
    166e:	68fb      	ldr	r3, [r7, #12]
    1670:	6898      	ldr	r0, [r3, #8]
    1672:	2308      	movs	r3, #8
    1674:	18fb      	adds	r3, r7, r3
    1676:	881d      	ldrh	r5, [r3, #0]
    1678:	687a      	ldr	r2, [r7, #4]
    167a:	230b      	movs	r3, #11
    167c:	18fb      	adds	r3, r7, r3
    167e:	7819      	ldrb	r1, [r3, #0]
    1680:	002b      	movs	r3, r5
    1682:	47a0      	blx	r4
    1684:	0003      	movs	r3, r0
    1686:	617b      	str	r3, [r7, #20]

    return ret; 
    1688:	697b      	ldr	r3, [r7, #20]
}
    168a:	0018      	movs	r0, r3
    168c:	46bd      	mov	sp, r7
    168e:	b006      	add	sp, #24
    1690:	bdb0      	pop	{r4, r5, r7, pc}

00001692 <drv2605_read_reg>:
  *
  */
int32_t drv2605_read_reg(hapdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
    1692:	b5b0      	push	{r4, r5, r7, lr}
    1694:	b086      	sub	sp, #24
    1696:	af00      	add	r7, sp, #0
    1698:	60f8      	str	r0, [r7, #12]
    169a:	0008      	movs	r0, r1
    169c:	607a      	str	r2, [r7, #4]
    169e:	0019      	movs	r1, r3
    16a0:	230b      	movs	r3, #11
    16a2:	18fb      	adds	r3, r7, r3
    16a4:	1c02      	adds	r2, r0, #0
    16a6:	701a      	strb	r2, [r3, #0]
    16a8:	2308      	movs	r3, #8
    16aa:	18fb      	adds	r3, r7, r3
    16ac:	1c0a      	adds	r2, r1, #0
    16ae:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
    16b0:	68fb      	ldr	r3, [r7, #12]
    16b2:	685c      	ldr	r4, [r3, #4]
    16b4:	68fb      	ldr	r3, [r7, #12]
    16b6:	6898      	ldr	r0, [r3, #8]
    16b8:	2308      	movs	r3, #8
    16ba:	18fb      	adds	r3, r7, r3
    16bc:	881d      	ldrh	r5, [r3, #0]
    16be:	687a      	ldr	r2, [r7, #4]
    16c0:	230b      	movs	r3, #11
    16c2:	18fb      	adds	r3, r7, r3
    16c4:	7819      	ldrb	r1, [r3, #0]
    16c6:	002b      	movs	r3, r5
    16c8:	47a0      	blx	r4
    16ca:	0003      	movs	r3, r0
    16cc:	617b      	str	r3, [r7, #20]

  return ret;
    16ce:	697b      	ldr	r3, [r7, #20]
}
    16d0:	0018      	movs	r0, r3
    16d2:	46bd      	mov	sp, r7
    16d4:	b006      	add	sp, #24
    16d6:	bdb0      	pop	{r4, r5, r7, pc}

000016d8 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    16d8:	b580      	push	{r7, lr}
    16da:	b086      	sub	sp, #24
    16dc:	af00      	add	r7, sp, #0
    16de:	60f8      	str	r0, [r7, #12]
    16e0:	0008      	movs	r0, r1
    16e2:	607a      	str	r2, [r7, #4]
    16e4:	0019      	movs	r1, r3
    16e6:	230b      	movs	r3, #11
    16e8:	18fb      	adds	r3, r7, r3
    16ea:	1c02      	adds	r2, r0, #0
    16ec:	701a      	strb	r2, [r3, #0]
    16ee:	2308      	movs	r3, #8
    16f0:	18fb      	adds	r3, r7, r3
    16f2:	1c0a      	adds	r2, r1, #0
    16f4:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "HapData" to send to the device
	//TIP: Use the array "msgOutHap" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
  // First position reg
  msgOutHap[0] = reg;
    16f6:	4b22      	ldr	r3, [pc, #136]	; (1780 <platform_write+0xa8>)
    16f8:	220b      	movs	r2, #11
    16fa:	18ba      	adds	r2, r7, r2
    16fc:	7812      	ldrb	r2, [r2, #0]
    16fe:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i < len; i++){
    1700:	2316      	movs	r3, #22
    1702:	18fb      	adds	r3, r7, r3
    1704:	2200      	movs	r2, #0
    1706:	801a      	strh	r2, [r3, #0]
    1708:	e012      	b.n	1730 <platform_write+0x58>
		msgOutHap[i+1] = bufp[i];
    170a:	2316      	movs	r3, #22
    170c:	18fb      	adds	r3, r7, r3
    170e:	881b      	ldrh	r3, [r3, #0]
    1710:	3301      	adds	r3, #1
    1712:	2216      	movs	r2, #22
    1714:	18ba      	adds	r2, r7, r2
    1716:	8812      	ldrh	r2, [r2, #0]
    1718:	6879      	ldr	r1, [r7, #4]
    171a:	188a      	adds	r2, r1, r2
    171c:	7811      	ldrb	r1, [r2, #0]
    171e:	4a18      	ldr	r2, [pc, #96]	; (1780 <platform_write+0xa8>)
    1720:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i < len; i++){
    1722:	2316      	movs	r3, #22
    1724:	18fb      	adds	r3, r7, r3
    1726:	881a      	ldrh	r2, [r3, #0]
    1728:	2316      	movs	r3, #22
    172a:	18fb      	adds	r3, r7, r3
    172c:	3201      	adds	r2, #1
    172e:	801a      	strh	r2, [r3, #0]
    1730:	2316      	movs	r3, #22
    1732:	18fa      	adds	r2, r7, r3
    1734:	2308      	movs	r3, #8
    1736:	18fb      	adds	r3, r7, r3
    1738:	8812      	ldrh	r2, [r2, #0]
    173a:	881b      	ldrh	r3, [r3, #0]
    173c:	429a      	cmp	r2, r3
    173e:	d3e4      	bcc.n	170a <platform_write+0x32>
	}
	HapData.address = DRV2605_ADDR;
    1740:	4b10      	ldr	r3, [pc, #64]	; (1784 <platform_write+0xac>)
    1742:	225a      	movs	r2, #90	; 0x5a
    1744:	701a      	strb	r2, [r3, #0]
	HapData.msgOut = &msgOutHap;
    1746:	4b0f      	ldr	r3, [pc, #60]	; (1784 <platform_write+0xac>)
    1748:	4a0d      	ldr	r2, [pc, #52]	; (1780 <platform_write+0xa8>)
    174a:	605a      	str	r2, [r3, #4]
	HapData.lenOut = len + 1;
    174c:	2308      	movs	r3, #8
    174e:	18fb      	adds	r3, r7, r3
    1750:	881b      	ldrh	r3, [r3, #0]
    1752:	3301      	adds	r3, #1
    1754:	b29a      	uxth	r2, r3
    1756:	4b0b      	ldr	r3, [pc, #44]	; (1784 <platform_write+0xac>)
    1758:	81da      	strh	r2, [r3, #14]
	HapData.lenIn = len;
    175a:	4b0a      	ldr	r3, [pc, #40]	; (1784 <platform_write+0xac>)
    175c:	2208      	movs	r2, #8
    175e:	18ba      	adds	r2, r7, r2
    1760:	8812      	ldrh	r2, [r2, #0]
    1762:	819a      	strh	r2, [r3, #12]
	HapData.msgIn = bufp;
    1764:	4b07      	ldr	r3, [pc, #28]	; (1784 <platform_write+0xac>)
    1766:	687a      	ldr	r2, [r7, #4]
    1768:	609a      	str	r2, [r3, #8]
  return I2cWriteDataWait(&HapData, 100);
    176a:	4b06      	ldr	r3, [pc, #24]	; (1784 <platform_write+0xac>)
    176c:	2164      	movs	r1, #100	; 0x64
    176e:	0018      	movs	r0, r3
    1770:	4b05      	ldr	r3, [pc, #20]	; (1788 <platform_write+0xb0>)
    1772:	4798      	blx	r3
    1774:	0003      	movs	r3, r0
}
    1776:	0018      	movs	r0, r3
    1778:	46bd      	mov	sp, r7
    177a:	b006      	add	sp, #24
    177c:	bd80      	pop	{r7, pc}
    177e:	46c0      	nop			; (mov r8, r8)
    1780:	20004224 	.word	0x20004224
    1784:	20004214 	.word	0x20004214
    1788:	00001e59 	.word	0x00001e59

0000178c <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    178c:	b580      	push	{r7, lr}
    178e:	b084      	sub	sp, #16
    1790:	af00      	add	r7, sp, #0
    1792:	60f8      	str	r0, [r7, #12]
    1794:	0008      	movs	r0, r1
    1796:	607a      	str	r2, [r7, #4]
    1798:	0019      	movs	r1, r3
    179a:	230b      	movs	r3, #11
    179c:	18fb      	adds	r3, r7, r3
    179e:	1c02      	adds	r2, r0, #0
    17a0:	701a      	strb	r2, [r3, #0]
    17a2:	2308      	movs	r3, #8
    17a4:	18fb      	adds	r3, r7, r3
    17a6:	1c0a      	adds	r2, r1, #0
    17a8:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "HapData" to send to the device
	//TIP: Check the structure "HapData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	msgOutHap[0] = reg;
    17aa:	4b10      	ldr	r3, [pc, #64]	; (17ec <platform_read+0x60>)
    17ac:	220b      	movs	r2, #11
    17ae:	18ba      	adds	r2, r7, r2
    17b0:	7812      	ldrb	r2, [r2, #0]
    17b2:	701a      	strb	r2, [r3, #0]
	HapData.address = DRV2605_ADDR;
    17b4:	4b0e      	ldr	r3, [pc, #56]	; (17f0 <platform_read+0x64>)
    17b6:	225a      	movs	r2, #90	; 0x5a
    17b8:	701a      	strb	r2, [r3, #0]
	HapData.msgIn = bufp;
    17ba:	4b0d      	ldr	r3, [pc, #52]	; (17f0 <platform_read+0x64>)
    17bc:	687a      	ldr	r2, [r7, #4]
    17be:	609a      	str	r2, [r3, #8]
	HapData.lenIn = len;
    17c0:	4b0b      	ldr	r3, [pc, #44]	; (17f0 <platform_read+0x64>)
    17c2:	2208      	movs	r2, #8
    17c4:	18ba      	adds	r2, r7, r2
    17c6:	8812      	ldrh	r2, [r2, #0]
    17c8:	819a      	strh	r2, [r3, #12]
	HapData.lenOut = 1;
    17ca:	4b09      	ldr	r3, [pc, #36]	; (17f0 <platform_read+0x64>)
    17cc:	2201      	movs	r2, #1
    17ce:	81da      	strh	r2, [r3, #14]
	HapData.msgOut = &msgOutHap;
    17d0:	4b07      	ldr	r3, [pc, #28]	; (17f0 <platform_read+0x64>)
    17d2:	4a06      	ldr	r2, [pc, #24]	; (17ec <platform_read+0x60>)
    17d4:	605a      	str	r2, [r3, #4]
	
	return I2cReadDataWait(&HapData, 100, 100);
    17d6:	4b06      	ldr	r3, [pc, #24]	; (17f0 <platform_read+0x64>)
    17d8:	2264      	movs	r2, #100	; 0x64
    17da:	2164      	movs	r1, #100	; 0x64
    17dc:	0018      	movs	r0, r3
    17de:	4b05      	ldr	r3, [pc, #20]	; (17f4 <platform_read+0x68>)
    17e0:	4798      	blx	r3
    17e2:	0003      	movs	r3, r0
}
    17e4:	0018      	movs	r0, r3
    17e6:	46bd      	mov	sp, r7
    17e8:	b004      	add	sp, #16
    17ea:	bd80      	pop	{r7, pc}
    17ec:	20004224 	.word	0x20004224
    17f0:	20004214 	.word	0x20004214
    17f4:	00001f31 	.word	0x00001f31

000017f8 <GetHapStruct>:


hapdev_ctx_t * GetHapStruct(void)
{
    17f8:	b580      	push	{r7, lr}
    17fa:	af00      	add	r7, sp, #0
return &dev_ctx_drv2605;
    17fc:	4b01      	ldr	r3, [pc, #4]	; (1804 <GetHapStruct+0xc>)
}
    17fe:	0018      	movs	r0, r3
    1800:	46bd      	mov	sp, r7
    1802:	bd80      	pop	{r7, pc}
    1804:	20000014 	.word	0x20000014

00001808 <InitHaptic>:



int32_t InitHaptic(void)
{
    1808:	b580      	push	{r7, lr}
    180a:	b082      	sub	sp, #8
    180c:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
    180e:	2300      	movs	r3, #0
    1810:	607b      	str	r3, [r7, #4]
    drv2605_selectLibrary(&dev_ctx_drv2605, 1);
    1812:	4b0f      	ldr	r3, [pc, #60]	; (1850 <InitHaptic+0x48>)
    1814:	2101      	movs	r1, #1
    1816:	0018      	movs	r0, r3
    1818:	4b0e      	ldr	r3, [pc, #56]	; (1854 <InitHaptic+0x4c>)
    181a:	4798      	blx	r3
    drv2605_setMode(&dev_ctx_drv2605, DRV2605_MODE_INTTRIG);
    181c:	4b0c      	ldr	r3, [pc, #48]	; (1850 <InitHaptic+0x48>)
    181e:	2100      	movs	r1, #0
    1820:	0018      	movs	r0, r3
    1822:	4b0d      	ldr	r3, [pc, #52]	; (1858 <InitHaptic+0x50>)
    1824:	4798      	blx	r3
    drv2605_setWaveform(&dev_ctx_drv2605, 0, 1);
    1826:	4b0a      	ldr	r3, [pc, #40]	; (1850 <InitHaptic+0x48>)
    1828:	2201      	movs	r2, #1
    182a:	2100      	movs	r1, #0
    182c:	0018      	movs	r0, r3
    182e:	4b0b      	ldr	r3, [pc, #44]	; (185c <InitHaptic+0x54>)
    1830:	4798      	blx	r3
    drv2605_setWaveform(&dev_ctx_drv2605, 1, 0);
    1832:	4b07      	ldr	r3, [pc, #28]	; (1850 <InitHaptic+0x48>)
    1834:	2200      	movs	r2, #0
    1836:	2101      	movs	r1, #1
    1838:	0018      	movs	r0, r3
    183a:	4b08      	ldr	r3, [pc, #32]	; (185c <InitHaptic+0x54>)
    183c:	4798      	blx	r3
    drv2605_go(&dev_ctx_drv2605);
    183e:	4b04      	ldr	r3, [pc, #16]	; (1850 <InitHaptic+0x48>)
    1840:	0018      	movs	r0, r3
    1842:	4b07      	ldr	r3, [pc, #28]	; (1860 <InitHaptic+0x58>)
    1844:	4798      	blx	r3
  return error;
    1846:	687b      	ldr	r3, [r7, #4]
}
    1848:	0018      	movs	r0, r3
    184a:	46bd      	mov	sp, r7
    184c:	b002      	add	sp, #8
    184e:	bd80      	pop	{r7, pc}
    1850:	20000014 	.word	0x20000014
    1854:	000015b9 	.word	0x000015b9
    1858:	00001619 	.word	0x00001619
    185c:	00001575 	.word	0x00001575
    1860:	000015ed 	.word	0x000015ed

00001864 <system_interrupt_enable>:
{
    1864:	b580      	push	{r7, lr}
    1866:	b082      	sub	sp, #8
    1868:	af00      	add	r7, sp, #0
    186a:	0002      	movs	r2, r0
    186c:	1dfb      	adds	r3, r7, #7
    186e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1870:	4b06      	ldr	r3, [pc, #24]	; (188c <system_interrupt_enable+0x28>)
    1872:	1dfa      	adds	r2, r7, #7
    1874:	7812      	ldrb	r2, [r2, #0]
    1876:	0011      	movs	r1, r2
    1878:	221f      	movs	r2, #31
    187a:	400a      	ands	r2, r1
    187c:	2101      	movs	r1, #1
    187e:	4091      	lsls	r1, r2
    1880:	000a      	movs	r2, r1
    1882:	601a      	str	r2, [r3, #0]
}
    1884:	46c0      	nop			; (mov r8, r8)
    1886:	46bd      	mov	sp, r7
    1888:	b002      	add	sp, #8
    188a:	bd80      	pop	{r7, pc}
    188c:	e000e100 	.word	0xe000e100

00001890 <i2c_master_is_syncing>:
{
    1890:	b580      	push	{r7, lr}
    1892:	b084      	sub	sp, #16
    1894:	af00      	add	r7, sp, #0
    1896:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1898:	687b      	ldr	r3, [r7, #4]
    189a:	681b      	ldr	r3, [r3, #0]
    189c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    189e:	68fb      	ldr	r3, [r7, #12]
    18a0:	69db      	ldr	r3, [r3, #28]
    18a2:	2207      	movs	r2, #7
    18a4:	4013      	ands	r3, r2
    18a6:	1e5a      	subs	r2, r3, #1
    18a8:	4193      	sbcs	r3, r2
    18aa:	b2db      	uxtb	r3, r3
}
    18ac:	0018      	movs	r0, r3
    18ae:	46bd      	mov	sp, r7
    18b0:	b004      	add	sp, #16
    18b2:	bd80      	pop	{r7, pc}

000018b4 <_i2c_master_wait_for_sync>:
{
    18b4:	b580      	push	{r7, lr}
    18b6:	b082      	sub	sp, #8
    18b8:	af00      	add	r7, sp, #0
    18ba:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    18bc:	46c0      	nop			; (mov r8, r8)
    18be:	687b      	ldr	r3, [r7, #4]
    18c0:	0018      	movs	r0, r3
    18c2:	4b04      	ldr	r3, [pc, #16]	; (18d4 <_i2c_master_wait_for_sync+0x20>)
    18c4:	4798      	blx	r3
    18c6:	1e03      	subs	r3, r0, #0
    18c8:	d1f9      	bne.n	18be <_i2c_master_wait_for_sync+0xa>
}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	46bd      	mov	sp, r7
    18ce:	b002      	add	sp, #8
    18d0:	bd80      	pop	{r7, pc}
    18d2:	46c0      	nop			; (mov r8, r8)
    18d4:	00001891 	.word	0x00001891

000018d8 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    18d8:	b580      	push	{r7, lr}
    18da:	b082      	sub	sp, #8
    18dc:	af00      	add	r7, sp, #0
    18de:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	2264      	movs	r2, #100	; 0x64
    18e4:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    18e6:	687b      	ldr	r3, [r7, #4]
    18e8:	4a1b      	ldr	r2, [pc, #108]	; (1958 <i2c_master_get_config_defaults+0x80>)
    18ea:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    18ec:	687b      	ldr	r3, [r7, #4]
    18ee:	2200      	movs	r2, #0
    18f0:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	2200      	movs	r2, #0
    18f6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    18f8:	687b      	ldr	r3, [r7, #4]
    18fa:	2200      	movs	r2, #0
    18fc:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    18fe:	687b      	ldr	r3, [r7, #4]
    1900:	2280      	movs	r2, #128	; 0x80
    1902:	0392      	lsls	r2, r2, #14
    1904:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    1906:	687b      	ldr	r3, [r7, #4]
    1908:	2201      	movs	r2, #1
    190a:	4252      	negs	r2, r2
    190c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	2201      	movs	r2, #1
    1912:	4252      	negs	r2, r2
    1914:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1916:	687b      	ldr	r3, [r7, #4]
    1918:	2200      	movs	r2, #0
    191a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    191c:	687b      	ldr	r3, [r7, #4]
    191e:	2200      	movs	r2, #0
    1920:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	2224      	movs	r2, #36	; 0x24
    1926:	2100      	movs	r1, #0
    1928:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    192a:	687b      	ldr	r3, [r7, #4]
    192c:	2200      	movs	r2, #0
    192e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1930:	687b      	ldr	r3, [r7, #4]
    1932:	222c      	movs	r2, #44	; 0x2c
    1934:	2100      	movs	r1, #0
    1936:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1938:	687b      	ldr	r3, [r7, #4]
    193a:	222d      	movs	r2, #45	; 0x2d
    193c:	2100      	movs	r1, #0
    193e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	222e      	movs	r2, #46	; 0x2e
    1944:	2100      	movs	r1, #0
    1946:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1948:	687b      	ldr	r3, [r7, #4]
    194a:	22d7      	movs	r2, #215	; 0xd7
    194c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	46bd      	mov	sp, r7
    1952:	b002      	add	sp, #8
    1954:	bd80      	pop	{r7, pc}
    1956:	46c0      	nop			; (mov r8, r8)
    1958:	00000d48 	.word	0x00000d48

0000195c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    195c:	b580      	push	{r7, lr}
    195e:	b084      	sub	sp, #16
    1960:	af00      	add	r7, sp, #0
    1962:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1964:	687b      	ldr	r3, [r7, #4]
    1966:	681b      	ldr	r3, [r3, #0]
    1968:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    196a:	2300      	movs	r3, #0
    196c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    196e:	687b      	ldr	r3, [r7, #4]
    1970:	0018      	movs	r0, r3
    1972:	4b14      	ldr	r3, [pc, #80]	; (19c4 <i2c_master_enable+0x68>)
    1974:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1976:	68bb      	ldr	r3, [r7, #8]
    1978:	681b      	ldr	r3, [r3, #0]
    197a:	2202      	movs	r2, #2
    197c:	431a      	orrs	r2, r3
    197e:	68bb      	ldr	r3, [r7, #8]
    1980:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1982:	687b      	ldr	r3, [r7, #4]
    1984:	681b      	ldr	r3, [r3, #0]
    1986:	0018      	movs	r0, r3
    1988:	4b0f      	ldr	r3, [pc, #60]	; (19c8 <i2c_master_enable+0x6c>)
    198a:	4798      	blx	r3
    198c:	0003      	movs	r3, r0
    198e:	0018      	movs	r0, r3
    1990:	4b0e      	ldr	r3, [pc, #56]	; (19cc <i2c_master_enable+0x70>)
    1992:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1994:	e00c      	b.n	19b0 <i2c_master_enable+0x54>
		timeout_counter++;
    1996:	68fb      	ldr	r3, [r7, #12]
    1998:	3301      	adds	r3, #1
    199a:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    199c:	687b      	ldr	r3, [r7, #4]
    199e:	88db      	ldrh	r3, [r3, #6]
    19a0:	001a      	movs	r2, r3
    19a2:	68fb      	ldr	r3, [r7, #12]
    19a4:	429a      	cmp	r2, r3
    19a6:	d803      	bhi.n	19b0 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    19a8:	68bb      	ldr	r3, [r7, #8]
    19aa:	2210      	movs	r2, #16
    19ac:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    19ae:	e006      	b.n	19be <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    19b0:	68bb      	ldr	r3, [r7, #8]
    19b2:	8b5b      	ldrh	r3, [r3, #26]
    19b4:	b29b      	uxth	r3, r3
    19b6:	001a      	movs	r2, r3
    19b8:	2310      	movs	r3, #16
    19ba:	4013      	ands	r3, r2
    19bc:	d0eb      	beq.n	1996 <i2c_master_enable+0x3a>
		}
	}
}
    19be:	46bd      	mov	sp, r7
    19c0:	b004      	add	sp, #16
    19c2:	bd80      	pop	{r7, pc}
    19c4:	000018b5 	.word	0x000018b5
    19c8:	00013cbd 	.word	0x00013cbd
    19cc:	00001865 	.word	0x00001865

000019d0 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	b082      	sub	sp, #8
    19d4:	af00      	add	r7, sp, #0
    19d6:	6078      	str	r0, [r7, #4]
    19d8:	000a      	movs	r2, r1
    19da:	1cfb      	adds	r3, r7, #3
    19dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	7e5b      	ldrb	r3, [r3, #25]
    19e2:	b2db      	uxtb	r3, r3
    19e4:	b25a      	sxtb	r2, r3
    19e6:	1cfb      	adds	r3, r7, #3
    19e8:	781b      	ldrb	r3, [r3, #0]
    19ea:	2101      	movs	r1, #1
    19ec:	4099      	lsls	r1, r3
    19ee:	000b      	movs	r3, r1
    19f0:	b25b      	sxtb	r3, r3
    19f2:	4313      	orrs	r3, r2
    19f4:	b25b      	sxtb	r3, r3
    19f6:	b2da      	uxtb	r2, r3
    19f8:	687b      	ldr	r3, [r7, #4]
    19fa:	765a      	strb	r2, [r3, #25]
}
    19fc:	46c0      	nop			; (mov r8, r8)
    19fe:	46bd      	mov	sp, r7
    1a00:	b002      	add	sp, #8
    1a02:	bd80      	pop	{r7, pc}

00001a04 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
    1a04:	b590      	push	{r4, r7, lr}
    1a06:	b091      	sub	sp, #68	; 0x44
    1a08:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
    1a0a:	2300      	movs	r3, #0
    1a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
    1a0e:	233a      	movs	r3, #58	; 0x3a
    1a10:	18fb      	adds	r3, r7, r3
    1a12:	2200      	movs	r2, #0
    1a14:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
    1a16:	1d3b      	adds	r3, r7, #4
    1a18:	0018      	movs	r0, r3
    1a1a:	4b21      	ldr	r3, [pc, #132]	; (1aa0 <I2cDriverConfigureSensorBus+0x9c>)
    1a1c:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    1a1e:	1d3b      	adds	r3, r7, #4
    1a20:	4a20      	ldr	r2, [pc, #128]	; (1aa4 <I2cDriverConfigureSensorBus+0xa0>)
    1a22:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    1a24:	1d3b      	adds	r3, r7, #4
    1a26:	4a20      	ldr	r2, [pc, #128]	; (1aa8 <I2cDriverConfigureSensorBus+0xa4>)
    1a28:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
    1a2a:	1d3b      	adds	r3, r7, #4
    1a2c:	22fa      	movs	r2, #250	; 0xfa
    1a2e:	0092      	lsls	r2, r2, #2
    1a30:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
    1a32:	233b      	movs	r3, #59	; 0x3b
    1a34:	18fb      	adds	r3, r7, r3
    1a36:	2203      	movs	r2, #3
    1a38:	701a      	strb	r2, [r3, #0]
    1a3a:	e01e      	b.n	1a7a <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
    1a3c:	233a      	movs	r3, #58	; 0x3a
    1a3e:	18fc      	adds	r4, r7, r3
    1a40:	1d3a      	adds	r2, r7, #4
    1a42:	491a      	ldr	r1, [pc, #104]	; (1aac <I2cDriverConfigureSensorBus+0xa8>)
    1a44:	4b1a      	ldr	r3, [pc, #104]	; (1ab0 <I2cDriverConfigureSensorBus+0xac>)
    1a46:	0018      	movs	r0, r3
    1a48:	4b1a      	ldr	r3, [pc, #104]	; (1ab4 <I2cDriverConfigureSensorBus+0xb0>)
    1a4a:	4798      	blx	r3
    1a4c:	0003      	movs	r3, r0
    1a4e:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
    1a50:	233a      	movs	r3, #58	; 0x3a
    1a52:	18fb      	adds	r3, r7, r3
    1a54:	781b      	ldrb	r3, [r3, #0]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d104      	bne.n	1a64 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
    1a5a:	233a      	movs	r3, #58	; 0x3a
    1a5c:	18fb      	adds	r3, r7, r3
    1a5e:	781b      	ldrb	r3, [r3, #0]
    1a60:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
    1a62:	e00f      	b.n	1a84 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
    1a64:	4b12      	ldr	r3, [pc, #72]	; (1ab0 <I2cDriverConfigureSensorBus+0xac>)
    1a66:	0018      	movs	r0, r3
    1a68:	4b13      	ldr	r3, [pc, #76]	; (1ab8 <I2cDriverConfigureSensorBus+0xb4>)
    1a6a:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
    1a6c:	233b      	movs	r3, #59	; 0x3b
    1a6e:	18fb      	adds	r3, r7, r3
    1a70:	781a      	ldrb	r2, [r3, #0]
    1a72:	233b      	movs	r3, #59	; 0x3b
    1a74:	18fb      	adds	r3, r7, r3
    1a76:	3a01      	subs	r2, #1
    1a78:	701a      	strb	r2, [r3, #0]
    1a7a:	233b      	movs	r3, #59	; 0x3b
    1a7c:	18fb      	adds	r3, r7, r3
    1a7e:	781b      	ldrb	r3, [r3, #0]
    1a80:	2b00      	cmp	r3, #0
    1a82:	d1db      	bne.n	1a3c <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
    1a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a86:	2b00      	cmp	r3, #0
    1a88:	d104      	bne.n	1a94 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
    1a8a:	4b09      	ldr	r3, [pc, #36]	; (1ab0 <I2cDriverConfigureSensorBus+0xac>)
    1a8c:	0018      	movs	r0, r3
    1a8e:	4b0b      	ldr	r3, [pc, #44]	; (1abc <I2cDriverConfigureSensorBus+0xb8>)
    1a90:	4798      	blx	r3
    1a92:	e000      	b.n	1a96 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
    1a94:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
    1a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1a98:	0018      	movs	r0, r3
    1a9a:	46bd      	mov	sp, r7
    1a9c:	b011      	add	sp, #68	; 0x44
    1a9e:	bd90      	pop	{r4, r7, pc}
    1aa0:	000018d9 	.word	0x000018d9
    1aa4:	00080002 	.word	0x00080002
    1aa8:	00090002 	.word	0x00090002
    1aac:	42000800 	.word	0x42000800
    1ab0:	20004268 	.word	0x20004268
    1ab4:	000040e5 	.word	0x000040e5
    1ab8:	00004219 	.word	0x00004219
    1abc:	0000195d 	.word	0x0000195d

00001ac0 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
    1ac0:	b580      	push	{r7, lr}
    1ac2:	b084      	sub	sp, #16
    1ac4:	af00      	add	r7, sp, #0
    1ac6:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    1ac8:	4b0e      	ldr	r3, [pc, #56]	; (1b04 <I2cSensorsTxComplete+0x44>)
    1aca:	2200      	movs	r2, #0
    1acc:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
    1ace:	4b0d      	ldr	r3, [pc, #52]	; (1b04 <I2cSensorsTxComplete+0x44>)
    1ad0:	2201      	movs	r2, #1
    1ad2:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1ad4:	2300      	movs	r3, #0
    1ad6:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    1ad8:	4b0b      	ldr	r3, [pc, #44]	; (1b08 <I2cSensorsTxComplete+0x48>)
    1ada:	681b      	ldr	r3, [r3, #0]
    1adc:	220c      	movs	r2, #12
    1ade:	18ba      	adds	r2, r7, r2
    1ae0:	0011      	movs	r1, r2
    1ae2:	0018      	movs	r0, r3
    1ae4:	4b09      	ldr	r3, [pc, #36]	; (1b0c <I2cSensorsTxComplete+0x4c>)
    1ae6:	4798      	blx	r3
    sensorTransmitError = false;
    1ae8:	4b09      	ldr	r3, [pc, #36]	; (1b10 <I2cSensorsTxComplete+0x50>)
    1aea:	2200      	movs	r2, #0
    1aec:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    1aee:	68fb      	ldr	r3, [r7, #12]
    1af0:	2b00      	cmp	r3, #0
    1af2:	d003      	beq.n	1afc <I2cSensorsTxComplete+0x3c>
    1af4:	4b07      	ldr	r3, [pc, #28]	; (1b14 <I2cSensorsTxComplete+0x54>)
    1af6:	2280      	movs	r2, #128	; 0x80
    1af8:	0552      	lsls	r2, r2, #21
    1afa:	601a      	str	r2, [r3, #0]
}
    1afc:	46c0      	nop			; (mov r8, r8)
    1afe:	46bd      	mov	sp, r7
    1b00:	b004      	add	sp, #16
    1b02:	bd80      	pop	{r7, pc}
    1b04:	20000484 	.word	0x20000484
    1b08:	20004290 	.word	0x20004290
    1b0c:	00007379 	.word	0x00007379
    1b10:	20000480 	.word	0x20000480
    1b14:	e000ed04 	.word	0xe000ed04

00001b18 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	b084      	sub	sp, #16
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    1b20:	4b0e      	ldr	r3, [pc, #56]	; (1b5c <I2cSensorsRxComplete+0x44>)
    1b22:	2200      	movs	r2, #0
    1b24:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
    1b26:	4b0d      	ldr	r3, [pc, #52]	; (1b5c <I2cSensorsRxComplete+0x44>)
    1b28:	2201      	movs	r2, #1
    1b2a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1b2c:	2300      	movs	r3, #0
    1b2e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    1b30:	4b0b      	ldr	r3, [pc, #44]	; (1b60 <I2cSensorsRxComplete+0x48>)
    1b32:	681b      	ldr	r3, [r3, #0]
    1b34:	220c      	movs	r2, #12
    1b36:	18ba      	adds	r2, r7, r2
    1b38:	0011      	movs	r1, r2
    1b3a:	0018      	movs	r0, r3
    1b3c:	4b09      	ldr	r3, [pc, #36]	; (1b64 <I2cSensorsRxComplete+0x4c>)
    1b3e:	4798      	blx	r3
    sensorTransmitError = false;
    1b40:	4b09      	ldr	r3, [pc, #36]	; (1b68 <I2cSensorsRxComplete+0x50>)
    1b42:	2200      	movs	r2, #0
    1b44:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    1b46:	68fb      	ldr	r3, [r7, #12]
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d003      	beq.n	1b54 <I2cSensorsRxComplete+0x3c>
    1b4c:	4b07      	ldr	r3, [pc, #28]	; (1b6c <I2cSensorsRxComplete+0x54>)
    1b4e:	2280      	movs	r2, #128	; 0x80
    1b50:	0552      	lsls	r2, r2, #21
    1b52:	601a      	str	r2, [r3, #0]
}
    1b54:	46c0      	nop			; (mov r8, r8)
    1b56:	46bd      	mov	sp, r7
    1b58:	b004      	add	sp, #16
    1b5a:	bd80      	pop	{r7, pc}
    1b5c:	20000484 	.word	0x20000484
    1b60:	20004290 	.word	0x20004290
    1b64:	00007379 	.word	0x00007379
    1b68:	20000480 	.word	0x20000480
    1b6c:	e000ed04 	.word	0xe000ed04

00001b70 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
    1b70:	b580      	push	{r7, lr}
    1b72:	b084      	sub	sp, #16
    1b74:	af00      	add	r7, sp, #0
    1b76:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    1b78:	4b0e      	ldr	r3, [pc, #56]	; (1bb4 <I2cSensorsError+0x44>)
    1b7a:	2200      	movs	r2, #0
    1b7c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
    1b7e:	4b0d      	ldr	r3, [pc, #52]	; (1bb4 <I2cSensorsError+0x44>)
    1b80:	2201      	movs	r2, #1
    1b82:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1b84:	2300      	movs	r3, #0
    1b86:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    1b88:	4b0b      	ldr	r3, [pc, #44]	; (1bb8 <I2cSensorsError+0x48>)
    1b8a:	681b      	ldr	r3, [r3, #0]
    1b8c:	220c      	movs	r2, #12
    1b8e:	18ba      	adds	r2, r7, r2
    1b90:	0011      	movs	r1, r2
    1b92:	0018      	movs	r0, r3
    1b94:	4b09      	ldr	r3, [pc, #36]	; (1bbc <I2cSensorsError+0x4c>)
    1b96:	4798      	blx	r3
    sensorTransmitError = true;
    1b98:	4b09      	ldr	r3, [pc, #36]	; (1bc0 <I2cSensorsError+0x50>)
    1b9a:	2201      	movs	r2, #1
    1b9c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    1b9e:	68fb      	ldr	r3, [r7, #12]
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	d003      	beq.n	1bac <I2cSensorsError+0x3c>
    1ba4:	4b07      	ldr	r3, [pc, #28]	; (1bc4 <I2cSensorsError+0x54>)
    1ba6:	2280      	movs	r2, #128	; 0x80
    1ba8:	0552      	lsls	r2, r2, #21
    1baa:	601a      	str	r2, [r3, #0]
}
    1bac:	46c0      	nop			; (mov r8, r8)
    1bae:	46bd      	mov	sp, r7
    1bb0:	b004      	add	sp, #16
    1bb2:	bd80      	pop	{r7, pc}
    1bb4:	20000484 	.word	0x20000484
    1bb8:	20004290 	.word	0x20004290
    1bbc:	00007379 	.word	0x00007379
    1bc0:	20000480 	.word	0x20000480
    1bc4:	e000ed04 	.word	0xe000ed04

00001bc8 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1bcc:	4911      	ldr	r1, [pc, #68]	; (1c14 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
    1bce:	4b12      	ldr	r3, [pc, #72]	; (1c18 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1bd0:	2200      	movs	r2, #0
    1bd2:	0018      	movs	r0, r3
    1bd4:	4b11      	ldr	r3, [pc, #68]	; (1c1c <I2cDriverRegisterSensorBusCallbacks+0x54>)
    1bd6:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1bd8:	4b0f      	ldr	r3, [pc, #60]	; (1c18 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1bda:	2100      	movs	r1, #0
    1bdc:	0018      	movs	r0, r3
    1bde:	4b10      	ldr	r3, [pc, #64]	; (1c20 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    1be0:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
    1be2:	4910      	ldr	r1, [pc, #64]	; (1c24 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
    1be4:	4b0c      	ldr	r3, [pc, #48]	; (1c18 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1be6:	2201      	movs	r2, #1
    1be8:	0018      	movs	r0, r3
    1bea:	4b0c      	ldr	r3, [pc, #48]	; (1c1c <I2cDriverRegisterSensorBusCallbacks+0x54>)
    1bec:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
    1bee:	4b0a      	ldr	r3, [pc, #40]	; (1c18 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1bf0:	2101      	movs	r1, #1
    1bf2:	0018      	movs	r0, r3
    1bf4:	4b0a      	ldr	r3, [pc, #40]	; (1c20 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    1bf6:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
    1bf8:	490b      	ldr	r1, [pc, #44]	; (1c28 <I2cDriverRegisterSensorBusCallbacks+0x60>)
    1bfa:	4b07      	ldr	r3, [pc, #28]	; (1c18 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1bfc:	2202      	movs	r2, #2
    1bfe:	0018      	movs	r0, r3
    1c00:	4b06      	ldr	r3, [pc, #24]	; (1c1c <I2cDriverRegisterSensorBusCallbacks+0x54>)
    1c02:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
    1c04:	4b04      	ldr	r3, [pc, #16]	; (1c18 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1c06:	2102      	movs	r1, #2
    1c08:	0018      	movs	r0, r3
    1c0a:	4b05      	ldr	r3, [pc, #20]	; (1c20 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    1c0c:	4798      	blx	r3
}
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	46bd      	mov	sp, r7
    1c12:	bd80      	pop	{r7, pc}
    1c14:	00001ac1 	.word	0x00001ac1
    1c18:	20004268 	.word	0x20004268
    1c1c:	00000909 	.word	0x00000909
    1c20:	000019d1 	.word	0x000019d1
    1c24:	00001b19 	.word	0x00001b19
    1c28:	00001b71 	.word	0x00001b71

00001c2c <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	b082      	sub	sp, #8
    1c30:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
    1c32:	2300      	movs	r3, #0
    1c34:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
    1c36:	4b14      	ldr	r3, [pc, #80]	; (1c88 <I2cInitializeDriver+0x5c>)
    1c38:	4798      	blx	r3
    1c3a:	0003      	movs	r3, r0
    1c3c:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	2b00      	cmp	r3, #0
    1c42:	d11a      	bne.n	1c7a <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
    1c44:	4b11      	ldr	r3, [pc, #68]	; (1c8c <I2cInitializeDriver+0x60>)
    1c46:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
    1c48:	2001      	movs	r0, #1
    1c4a:	4b11      	ldr	r3, [pc, #68]	; (1c90 <I2cInitializeDriver+0x64>)
    1c4c:	4798      	blx	r3
    1c4e:	0002      	movs	r2, r0
    1c50:	4b10      	ldr	r3, [pc, #64]	; (1c94 <I2cInitializeDriver+0x68>)
    1c52:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
    1c54:	2203      	movs	r2, #3
    1c56:	2100      	movs	r1, #0
    1c58:	2001      	movs	r0, #1
    1c5a:	4b0f      	ldr	r3, [pc, #60]	; (1c98 <I2cInitializeDriver+0x6c>)
    1c5c:	4798      	blx	r3
    1c5e:	0002      	movs	r2, r0
    1c60:	4b0e      	ldr	r3, [pc, #56]	; (1c9c <I2cInitializeDriver+0x70>)
    1c62:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
    1c64:	4b0b      	ldr	r3, [pc, #44]	; (1c94 <I2cInitializeDriver+0x68>)
    1c66:	681b      	ldr	r3, [r3, #0]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d003      	beq.n	1c74 <I2cInitializeDriver+0x48>
    1c6c:	4b0b      	ldr	r3, [pc, #44]	; (1c9c <I2cInitializeDriver+0x70>)
    1c6e:	681b      	ldr	r3, [r3, #0]
    1c70:	2b00      	cmp	r3, #0
    1c72:	d103      	bne.n	1c7c <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
    1c74:	2306      	movs	r3, #6
    1c76:	607b      	str	r3, [r7, #4]
        goto exit;
    1c78:	e000      	b.n	1c7c <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
    1c7a:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    1c7c:	687b      	ldr	r3, [r7, #4]
}
    1c7e:	0018      	movs	r0, r3
    1c80:	46bd      	mov	sp, r7
    1c82:	b002      	add	sp, #8
    1c84:	bd80      	pop	{r7, pc}
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	00001a05 	.word	0x00001a05
    1c8c:	00001bc9 	.word	0x00001bc9
    1c90:	00006cb1 	.word	0x00006cb1
    1c94:	20004264 	.word	0x20004264
    1c98:	00006a49 	.word	0x00006a49
    1c9c:	20004290 	.word	0x20004290

00001ca0 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
    1ca0:	b590      	push	{r4, r7, lr}
    1ca2:	b085      	sub	sp, #20
    1ca4:	af00      	add	r7, sp, #0
    1ca6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    1ca8:	2300      	movs	r3, #0
    1caa:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
    1cac:	687b      	ldr	r3, [r7, #4]
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d003      	beq.n	1cba <I2cWriteData+0x1a>
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	685b      	ldr	r3, [r3, #4]
    1cb6:	2b00      	cmp	r3, #0
    1cb8:	d103      	bne.n	1cc2 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
    1cba:	2308      	movs	r3, #8
    1cbc:	425b      	negs	r3, r3
    1cbe:	60fb      	str	r3, [r7, #12]
        goto exit;
    1cc0:	e01f      	b.n	1d02 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
    1cc2:	687b      	ldr	r3, [r7, #4]
    1cc4:	781b      	ldrb	r3, [r3, #0]
    1cc6:	b29a      	uxth	r2, r3
    1cc8:	4b10      	ldr	r3, [pc, #64]	; (1d0c <I2cWriteData+0x6c>)
    1cca:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	685a      	ldr	r2, [r3, #4]
    1cd0:	4b0e      	ldr	r3, [pc, #56]	; (1d0c <I2cWriteData+0x6c>)
    1cd2:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	89da      	ldrh	r2, [r3, #14]
    1cd8:	4b0c      	ldr	r3, [pc, #48]	; (1d0c <I2cWriteData+0x6c>)
    1cda:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    1cdc:	230b      	movs	r3, #11
    1cde:	18fc      	adds	r4, r7, r3
    1ce0:	4a0a      	ldr	r2, [pc, #40]	; (1d0c <I2cWriteData+0x6c>)
    1ce2:	4b0b      	ldr	r3, [pc, #44]	; (1d10 <I2cWriteData+0x70>)
    1ce4:	0011      	movs	r1, r2
    1ce6:	0018      	movs	r0, r3
    1ce8:	4b0a      	ldr	r3, [pc, #40]	; (1d14 <I2cWriteData+0x74>)
    1cea:	4798      	blx	r3
    1cec:	0003      	movs	r3, r0
    1cee:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
    1cf0:	230b      	movs	r3, #11
    1cf2:	18fb      	adds	r3, r7, r3
    1cf4:	781b      	ldrb	r3, [r3, #0]
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	d003      	beq.n	1d02 <I2cWriteData+0x62>
        error = ERROR_IO;
    1cfa:	2306      	movs	r3, #6
    1cfc:	425b      	negs	r3, r3
    1cfe:	60fb      	str	r3, [r7, #12]
        goto exit;
    1d00:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    1d02:	68fb      	ldr	r3, [r7, #12]
}
    1d04:	0018      	movs	r0, r3
    1d06:	46bd      	mov	sp, r7
    1d08:	b005      	add	sp, #20
    1d0a:	bd90      	pop	{r4, r7, pc}
    1d0c:	20004294 	.word	0x20004294
    1d10:	20004268 	.word	0x20004268
    1d14:	00000b8d 	.word	0x00000b8d

00001d18 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
    1d18:	b590      	push	{r4, r7, lr}
    1d1a:	b085      	sub	sp, #20
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    1d20:	2300      	movs	r3, #0
    1d22:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
    1d24:	687b      	ldr	r3, [r7, #4]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d003      	beq.n	1d32 <I2cReadData+0x1a>
    1d2a:	687b      	ldr	r3, [r7, #4]
    1d2c:	685b      	ldr	r3, [r3, #4]
    1d2e:	2b00      	cmp	r3, #0
    1d30:	d103      	bne.n	1d3a <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
    1d32:	2308      	movs	r3, #8
    1d34:	425b      	negs	r3, r3
    1d36:	60fb      	str	r3, [r7, #12]
        goto exit;
    1d38:	e01f      	b.n	1d7a <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
    1d3a:	687b      	ldr	r3, [r7, #4]
    1d3c:	781b      	ldrb	r3, [r3, #0]
    1d3e:	b29a      	uxth	r2, r3
    1d40:	4b10      	ldr	r3, [pc, #64]	; (1d84 <I2cReadData+0x6c>)
    1d42:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
    1d44:	687b      	ldr	r3, [r7, #4]
    1d46:	689a      	ldr	r2, [r3, #8]
    1d48:	4b0e      	ldr	r3, [pc, #56]	; (1d84 <I2cReadData+0x6c>)
    1d4a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
    1d4c:	687b      	ldr	r3, [r7, #4]
    1d4e:	899a      	ldrh	r2, [r3, #12]
    1d50:	4b0c      	ldr	r3, [pc, #48]	; (1d84 <I2cReadData+0x6c>)
    1d52:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    1d54:	230b      	movs	r3, #11
    1d56:	18fc      	adds	r4, r7, r3
    1d58:	4a0a      	ldr	r2, [pc, #40]	; (1d84 <I2cReadData+0x6c>)
    1d5a:	4b0b      	ldr	r3, [pc, #44]	; (1d88 <I2cReadData+0x70>)
    1d5c:	0011      	movs	r1, r2
    1d5e:	0018      	movs	r0, r3
    1d60:	4b0a      	ldr	r3, [pc, #40]	; (1d8c <I2cReadData+0x74>)
    1d62:	4798      	blx	r3
    1d64:	0003      	movs	r3, r0
    1d66:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
    1d68:	230b      	movs	r3, #11
    1d6a:	18fb      	adds	r3, r7, r3
    1d6c:	781b      	ldrb	r3, [r3, #0]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d003      	beq.n	1d7a <I2cReadData+0x62>
        error = ERROR_IO;
    1d72:	2306      	movs	r3, #6
    1d74:	425b      	negs	r3, r3
    1d76:	60fb      	str	r3, [r7, #12]
        goto exit;
    1d78:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    1d7a:	68fb      	ldr	r3, [r7, #12]
}
    1d7c:	0018      	movs	r0, r3
    1d7e:	46bd      	mov	sp, r7
    1d80:	b005      	add	sp, #20
    1d82:	bd90      	pop	{r4, r7, pc}
    1d84:	20004294 	.word	0x20004294
    1d88:	20004268 	.word	0x20004268
    1d8c:	00000aa9 	.word	0x00000aa9

00001d90 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
    1d90:	b590      	push	{r4, r7, lr}
    1d92:	b083      	sub	sp, #12
    1d94:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
    1d96:	2300      	movs	r3, #0
    1d98:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
    1d9a:	4b09      	ldr	r3, [pc, #36]	; (1dc0 <I2cFreeMutex+0x30>)
    1d9c:	6818      	ldr	r0, [r3, #0]
    1d9e:	2300      	movs	r3, #0
    1da0:	2200      	movs	r2, #0
    1da2:	2100      	movs	r1, #0
    1da4:	4c07      	ldr	r4, [pc, #28]	; (1dc4 <I2cFreeMutex+0x34>)
    1da6:	47a0      	blx	r4
    1da8:	0003      	movs	r3, r0
    1daa:	2b01      	cmp	r3, #1
    1dac:	d002      	beq.n	1db4 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
    1dae:	2314      	movs	r3, #20
    1db0:	425b      	negs	r3, r3
    1db2:	607b      	str	r3, [r7, #4]
    }
    return error;
    1db4:	687b      	ldr	r3, [r7, #4]
}
    1db6:	0018      	movs	r0, r3
    1db8:	46bd      	mov	sp, r7
    1dba:	b003      	add	sp, #12
    1dbc:	bd90      	pop	{r4, r7, pc}
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	20004264 	.word	0x20004264
    1dc4:	00006cf1 	.word	0x00006cf1

00001dc8 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
    1dc8:	b580      	push	{r7, lr}
    1dca:	b084      	sub	sp, #16
    1dcc:	af00      	add	r7, sp, #0
    1dce:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    1dd0:	2300      	movs	r3, #0
    1dd2:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
    1dd4:	4b08      	ldr	r3, [pc, #32]	; (1df8 <I2cGetMutex+0x30>)
    1dd6:	681b      	ldr	r3, [r3, #0]
    1dd8:	687a      	ldr	r2, [r7, #4]
    1dda:	0011      	movs	r1, r2
    1ddc:	0018      	movs	r0, r3
    1dde:	4b07      	ldr	r3, [pc, #28]	; (1dfc <I2cGetMutex+0x34>)
    1de0:	4798      	blx	r3
    1de2:	0003      	movs	r3, r0
    1de4:	2b01      	cmp	r3, #1
    1de6:	d002      	beq.n	1dee <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
    1de8:	231d      	movs	r3, #29
    1dea:	425b      	negs	r3, r3
    1dec:	60fb      	str	r3, [r7, #12]
    }
    return error;
    1dee:	68fb      	ldr	r3, [r7, #12]
}
    1df0:	0018      	movs	r0, r3
    1df2:	46bd      	mov	sp, r7
    1df4:	b004      	add	sp, #16
    1df6:	bd80      	pop	{r7, pc}
    1df8:	20004264 	.word	0x20004264
    1dfc:	00007a01 	.word	0x00007a01

00001e00 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
    1e00:	b580      	push	{r7, lr}
    1e02:	b084      	sub	sp, #16
    1e04:	af00      	add	r7, sp, #0
    1e06:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    1e08:	2300      	movs	r3, #0
    1e0a:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
    1e0c:	4b04      	ldr	r3, [pc, #16]	; (1e20 <I2cGetSemaphoreHandle+0x20>)
    1e0e:	681a      	ldr	r2, [r3, #0]
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	601a      	str	r2, [r3, #0]
    return error;
    1e14:	68fb      	ldr	r3, [r7, #12]
}
    1e16:	0018      	movs	r0, r3
    1e18:	46bd      	mov	sp, r7
    1e1a:	b004      	add	sp, #16
    1e1c:	bd80      	pop	{r7, pc}
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	20004290 	.word	0x20004290

00001e24 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	af00      	add	r7, sp, #0
    return sensorTransmitError;
    1e28:	4b02      	ldr	r3, [pc, #8]	; (1e34 <I2cGetTaskErrorStatus+0x10>)
    1e2a:	781b      	ldrb	r3, [r3, #0]
}
    1e2c:	0018      	movs	r0, r3
    1e2e:	46bd      	mov	sp, r7
    1e30:	bd80      	pop	{r7, pc}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	20000480 	.word	0x20000480

00001e38 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
    1e38:	b580      	push	{r7, lr}
    1e3a:	b082      	sub	sp, #8
    1e3c:	af00      	add	r7, sp, #0
    1e3e:	0002      	movs	r2, r0
    1e40:	1dfb      	adds	r3, r7, #7
    1e42:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
    1e44:	4b03      	ldr	r3, [pc, #12]	; (1e54 <I2cSetTaskErrorStatus+0x1c>)
    1e46:	1dfa      	adds	r2, r7, #7
    1e48:	7812      	ldrb	r2, [r2, #0]
    1e4a:	701a      	strb	r2, [r3, #0]
}
    1e4c:	46c0      	nop			; (mov r8, r8)
    1e4e:	46bd      	mov	sp, r7
    1e50:	b002      	add	sp, #8
    1e52:	bd80      	pop	{r7, pc}
    1e54:	20000480 	.word	0x20000480

00001e58 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
    1e58:	b580      	push	{r7, lr}
    1e5a:	b084      	sub	sp, #16
    1e5c:	af00      	add	r7, sp, #0
    1e5e:	6078      	str	r0, [r7, #4]
    1e60:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
    1e62:	2300      	movs	r3, #0
    1e64:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
    1e66:	2300      	movs	r3, #0
    1e68:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
    1e6a:	2396      	movs	r3, #150	; 0x96
    1e6c:	005b      	lsls	r3, r3, #1
    1e6e:	0018      	movs	r0, r3
    1e70:	4b28      	ldr	r3, [pc, #160]	; (1f14 <I2cWriteDataWait+0xbc>)
    1e72:	4798      	blx	r3
    1e74:	0003      	movs	r3, r0
    1e76:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
    1e78:	68fb      	ldr	r3, [r7, #12]
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d138      	bne.n	1ef0 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
    1e7e:	2308      	movs	r3, #8
    1e80:	18fb      	adds	r3, r7, r3
    1e82:	0018      	movs	r0, r3
    1e84:	4b24      	ldr	r3, [pc, #144]	; (1f18 <I2cWriteDataWait+0xc0>)
    1e86:	4798      	blx	r3
    1e88:	0003      	movs	r3, r0
    1e8a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
    1e8c:	68fb      	ldr	r3, [r7, #12]
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d130      	bne.n	1ef4 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
    1e92:	687b      	ldr	r3, [r7, #4]
    1e94:	0018      	movs	r0, r3
    1e96:	4b21      	ldr	r3, [pc, #132]	; (1f1c <I2cWriteDataWait+0xc4>)
    1e98:	4798      	blx	r3
    1e9a:	0003      	movs	r3, r0
    1e9c:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
    1e9e:	68fb      	ldr	r3, [r7, #12]
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d12a      	bne.n	1efa <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    1ea4:	68bb      	ldr	r3, [r7, #8]
    1ea6:	683a      	ldr	r2, [r7, #0]
    1ea8:	0011      	movs	r1, r2
    1eaa:	0018      	movs	r0, r3
    1eac:	4b1c      	ldr	r3, [pc, #112]	; (1f20 <I2cWriteDataWait+0xc8>)
    1eae:	4798      	blx	r3
    1eb0:	0003      	movs	r3, r0
    1eb2:	2b01      	cmp	r3, #1
    1eb4:	d111      	bne.n	1eda <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    1eb6:	4b1b      	ldr	r3, [pc, #108]	; (1f24 <I2cWriteDataWait+0xcc>)
    1eb8:	4798      	blx	r3
    1eba:	1e03      	subs	r3, r0, #0
    1ebc:	d011      	beq.n	1ee2 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
    1ebe:	2000      	movs	r0, #0
    1ec0:	4b19      	ldr	r3, [pc, #100]	; (1f28 <I2cWriteDataWait+0xd0>)
    1ec2:	4798      	blx	r3
            if (error != ERROR_NONE) {
    1ec4:	68fb      	ldr	r3, [r7, #12]
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	d003      	beq.n	1ed2 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
    1eca:	2321      	movs	r3, #33	; 0x21
    1ecc:	425b      	negs	r3, r3
    1ece:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
    1ed0:	e014      	b.n	1efc <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
    1ed2:	2303      	movs	r3, #3
    1ed4:	425b      	negs	r3, r3
    1ed6:	60fb      	str	r3, [r7, #12]
            goto exitError0;
    1ed8:	e010      	b.n	1efc <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
    1eda:	2303      	movs	r3, #3
    1edc:	425b      	negs	r3, r3
    1ede:	60fb      	str	r3, [r7, #12]
        goto exitError0;
    1ee0:	e00c      	b.n	1efc <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
    1ee2:	4b12      	ldr	r3, [pc, #72]	; (1f2c <I2cWriteDataWait+0xd4>)
    1ee4:	4798      	blx	r3
    1ee6:	0002      	movs	r2, r0
    1ee8:	68fb      	ldr	r3, [r7, #12]
    1eea:	4313      	orrs	r3, r2
    1eec:	60fb      	str	r3, [r7, #12]
    1eee:	e002      	b.n	1ef6 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
    1ef0:	46c0      	nop			; (mov r8, r8)
    1ef2:	e000      	b.n	1ef6 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
    1ef4:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
    1ef6:	68fb      	ldr	r3, [r7, #12]
    1ef8:	e007      	b.n	1f0a <I2cWriteDataWait+0xb2>
        goto exitError0;
    1efa:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
    1efc:	4b0b      	ldr	r3, [pc, #44]	; (1f2c <I2cWriteDataWait+0xd4>)
    1efe:	4798      	blx	r3
    1f00:	0002      	movs	r2, r0
    1f02:	68fb      	ldr	r3, [r7, #12]
    1f04:	4313      	orrs	r3, r2
    1f06:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
    1f08:	68fb      	ldr	r3, [r7, #12]
}
    1f0a:	0018      	movs	r0, r3
    1f0c:	46bd      	mov	sp, r7
    1f0e:	b004      	add	sp, #16
    1f10:	bd80      	pop	{r7, pc}
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	00001dc9 	.word	0x00001dc9
    1f18:	00001e01 	.word	0x00001e01
    1f1c:	00001ca1 	.word	0x00001ca1
    1f20:	00007a01 	.word	0x00007a01
    1f24:	00001e25 	.word	0x00001e25
    1f28:	00001e39 	.word	0x00001e39
    1f2c:	00001d91 	.word	0x00001d91

00001f30 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
    1f30:	b580      	push	{r7, lr}
    1f32:	b086      	sub	sp, #24
    1f34:	af00      	add	r7, sp, #0
    1f36:	60f8      	str	r0, [r7, #12]
    1f38:	60b9      	str	r1, [r7, #8]
    1f3a:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
    1f3c:	2300      	movs	r3, #0
    1f3e:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
    1f40:	2300      	movs	r3, #0
    1f42:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
    1f44:	2396      	movs	r3, #150	; 0x96
    1f46:	005b      	lsls	r3, r3, #1
    1f48:	0018      	movs	r0, r3
    1f4a:	4b36      	ldr	r3, [pc, #216]	; (2024 <STACK_SIZE+0x24>)
    1f4c:	4798      	blx	r3
    1f4e:	0003      	movs	r3, r0
    1f50:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
    1f52:	697b      	ldr	r3, [r7, #20]
    1f54:	2b00      	cmp	r3, #0
    1f56:	d155      	bne.n	2004 <STACK_SIZE+0x4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
    1f58:	2310      	movs	r3, #16
    1f5a:	18fb      	adds	r3, r7, r3
    1f5c:	0018      	movs	r0, r3
    1f5e:	4b32      	ldr	r3, [pc, #200]	; (2028 <STACK_SIZE+0x28>)
    1f60:	4798      	blx	r3
    1f62:	0003      	movs	r3, r0
    1f64:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
    1f66:	697b      	ldr	r3, [r7, #20]
    1f68:	2b00      	cmp	r3, #0
    1f6a:	d14d      	bne.n	2008 <STACK_SIZE+0x8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
    1f6c:	68fb      	ldr	r3, [r7, #12]
    1f6e:	0018      	movs	r0, r3
    1f70:	4b2e      	ldr	r3, [pc, #184]	; (202c <STACK_SIZE+0x2c>)
    1f72:	4798      	blx	r3
    1f74:	0003      	movs	r3, r0
    1f76:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
    1f78:	697b      	ldr	r3, [r7, #20]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d147      	bne.n	200e <STACK_SIZE+0xe>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    1f7e:	693b      	ldr	r3, [r7, #16]
    1f80:	687a      	ldr	r2, [r7, #4]
    1f82:	0011      	movs	r1, r2
    1f84:	0018      	movs	r0, r3
    1f86:	4b2a      	ldr	r3, [pc, #168]	; (2030 <STACK_SIZE+0x30>)
    1f88:	4798      	blx	r3
    1f8a:	0003      	movs	r3, r0
    1f8c:	2b01      	cmp	r3, #1
    1f8e:	d118      	bne.n	1fc2 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    1f90:	4b28      	ldr	r3, [pc, #160]	; (2034 <STACK_SIZE+0x34>)
    1f92:	4798      	blx	r3
    1f94:	1e03      	subs	r3, r0, #0
    1f96:	d006      	beq.n	1fa6 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
    1f98:	2000      	movs	r0, #0
    1f9a:	4b27      	ldr	r3, [pc, #156]	; (2038 <STACK_SIZE+0x38>)
    1f9c:	4798      	blx	r3
            error = ERROR_ABORTED;
    1f9e:	2303      	movs	r3, #3
    1fa0:	425b      	negs	r3, r3
    1fa2:	617b      	str	r3, [r7, #20]
            goto exitError0;
    1fa4:	e034      	b.n	2010 <STACK_SIZE+0x10>
        }
        vTaskDelay(delay);
    1fa6:	68bb      	ldr	r3, [r7, #8]
    1fa8:	0018      	movs	r0, r3
    1faa:	4b24      	ldr	r3, [pc, #144]	; (203c <STACK_SIZE+0x3c>)
    1fac:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
    1fae:	68fb      	ldr	r3, [r7, #12]
    1fb0:	0018      	movs	r0, r3
    1fb2:	4b23      	ldr	r3, [pc, #140]	; (2040 <STACK_SIZE+0x40>)
    1fb4:	4798      	blx	r3
    1fb6:	0003      	movs	r3, r0
    1fb8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
    1fba:	697b      	ldr	r3, [r7, #20]
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d004      	beq.n	1fca <I2cReadDataWait+0x9a>
        goto exitError0;
    1fc0:	e026      	b.n	2010 <STACK_SIZE+0x10>
        error = ERR_TIMEOUT;
    1fc2:	2303      	movs	r3, #3
    1fc4:	425b      	negs	r3, r3
    1fc6:	617b      	str	r3, [r7, #20]
        goto exitError0;
    1fc8:	e022      	b.n	2010 <STACK_SIZE+0x10>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    1fca:	693b      	ldr	r3, [r7, #16]
    1fcc:	687a      	ldr	r2, [r7, #4]
    1fce:	0011      	movs	r1, r2
    1fd0:	0018      	movs	r0, r3
    1fd2:	4b17      	ldr	r3, [pc, #92]	; (2030 <STACK_SIZE+0x30>)
    1fd4:	4798      	blx	r3
    1fd6:	0003      	movs	r3, r0
    1fd8:	2b01      	cmp	r3, #1
    1fda:	d10a      	bne.n	1ff2 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    1fdc:	4b15      	ldr	r3, [pc, #84]	; (2034 <STACK_SIZE+0x34>)
    1fde:	4798      	blx	r3
    1fe0:	1e03      	subs	r3, r0, #0
    1fe2:	d00a      	beq.n	1ffa <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
    1fe4:	2000      	movs	r0, #0
    1fe6:	4b14      	ldr	r3, [pc, #80]	; (2038 <STACK_SIZE+0x38>)
    1fe8:	4798      	blx	r3
            error = ERROR_ABORTED;
    1fea:	2303      	movs	r3, #3
    1fec:	425b      	negs	r3, r3
    1fee:	617b      	str	r3, [r7, #20]
            goto exitError0;
    1ff0:	e00e      	b.n	2010 <STACK_SIZE+0x10>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
    1ff2:	2303      	movs	r3, #3
    1ff4:	425b      	negs	r3, r3
    1ff6:	617b      	str	r3, [r7, #20]
        goto exitError0;
    1ff8:	e00a      	b.n	2010 <STACK_SIZE+0x10>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
    1ffa:	4b12      	ldr	r3, [pc, #72]	; (2044 <STACK_SIZE+0x44>)
    1ffc:	4798      	blx	r3
    1ffe:	0003      	movs	r3, r0
    2000:	617b      	str	r3, [r7, #20]
    2002:	e002      	b.n	200a <STACK_SIZE+0xa>
    if (ERROR_NONE != error) goto exit;
    2004:	46c0      	nop			; (mov r8, r8)
    2006:	e000      	b.n	200a <STACK_SIZE+0xa>
    if (ERROR_NONE != error) goto exit;
    2008:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
    200a:	697b      	ldr	r3, [r7, #20]
    200c:	e005      	b.n	201a <STACK_SIZE+0x1a>
        goto exitError0;
    200e:	46c0      	nop			; (mov r8, r8)

exitError0:
    error = I2cFreeMutex();
    2010:	4b0c      	ldr	r3, [pc, #48]	; (2044 <STACK_SIZE+0x44>)
    2012:	4798      	blx	r3
    2014:	0003      	movs	r3, r0
    2016:	617b      	str	r3, [r7, #20]
    // xSemaphoreGive(semHandle);
    return error;
    2018:	697b      	ldr	r3, [r7, #20]
}
    201a:	0018      	movs	r0, r3
    201c:	46bd      	mov	sp, r7
    201e:	b006      	add	sp, #24
    2020:	bd80      	pop	{r7, pc}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	00001dc9 	.word	0x00001dc9
    2028:	00001e01 	.word	0x00001e01
    202c:	00001ca1 	.word	0x00001ca1
    2030:	00007a01 	.word	0x00007a01
    2034:	00001e25 	.word	0x00001e25
    2038:	00001e39 	.word	0x00001e39
    203c:	00008755 	.word	0x00008755
    2040:	00001d19 	.word	0x00001d19
    2044:	00001d91 	.word	0x00001d91

00002048 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
    2048:	b5b0      	push	{r4, r5, r7, lr}
    204a:	b086      	sub	sp, #24
    204c:	af00      	add	r7, sp, #0
    204e:	60f8      	str	r0, [r7, #12]
    2050:	0008      	movs	r0, r1
    2052:	607a      	str	r2, [r7, #4]
    2054:	0019      	movs	r1, r3
    2056:	230b      	movs	r3, #11
    2058:	18fb      	adds	r3, r7, r3
    205a:	1c02      	adds	r2, r0, #0
    205c:	701a      	strb	r2, [r3, #0]
    205e:	2308      	movs	r3, #8
    2060:	18fb      	adds	r3, r7, r3
    2062:	1c0a      	adds	r2, r1, #0
    2064:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
    2066:	68fb      	ldr	r3, [r7, #12]
    2068:	685c      	ldr	r4, [r3, #4]
    206a:	68fb      	ldr	r3, [r7, #12]
    206c:	6898      	ldr	r0, [r3, #8]
    206e:	2308      	movs	r3, #8
    2070:	18fb      	adds	r3, r7, r3
    2072:	881d      	ldrh	r5, [r3, #0]
    2074:	687a      	ldr	r2, [r7, #4]
    2076:	230b      	movs	r3, #11
    2078:	18fb      	adds	r3, r7, r3
    207a:	7819      	ldrb	r1, [r3, #0]
    207c:	002b      	movs	r3, r5
    207e:	47a0      	blx	r4
    2080:	0003      	movs	r3, r0
    2082:	617b      	str	r3, [r7, #20]

  return ret;
    2084:	697b      	ldr	r3, [r7, #20]
}
    2086:	0018      	movs	r0, r3
    2088:	46bd      	mov	sp, r7
    208a:	b006      	add	sp, #24
    208c:	bdb0      	pop	{r4, r5, r7, pc}
	...

00002090 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
    2090:	b580      	push	{r7, lr}
    2092:	b082      	sub	sp, #8
    2094:	af00      	add	r7, sp, #0
    2096:	0002      	movs	r2, r0
    2098:	1dbb      	adds	r3, r7, #6
    209a:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
    209c:	1dbb      	adds	r3, r7, #6
    209e:	2200      	movs	r2, #0
    20a0:	5e9a      	ldrsh	r2, [r3, r2]
    20a2:	4b06      	ldr	r3, [pc, #24]	; (20bc <lsm6dso_from_fs2_to_mg+0x2c>)
    20a4:	0010      	movs	r0, r2
    20a6:	4798      	blx	r3
    20a8:	1c02      	adds	r2, r0, #0
    20aa:	4b05      	ldr	r3, [pc, #20]	; (20c0 <lsm6dso_from_fs2_to_mg+0x30>)
    20ac:	4905      	ldr	r1, [pc, #20]	; (20c4 <lsm6dso_from_fs2_to_mg+0x34>)
    20ae:	1c10      	adds	r0, r2, #0
    20b0:	4798      	blx	r3
    20b2:	1c03      	adds	r3, r0, #0
}
    20b4:	1c18      	adds	r0, r3, #0
    20b6:	46bd      	mov	sp, r7
    20b8:	b002      	add	sp, #8
    20ba:	bd80      	pop	{r7, pc}
    20bc:	0001f505 	.word	0x0001f505
    20c0:	0001f285 	.word	0x0001f285
    20c4:	3d79db23 	.word	0x3d79db23

000020c8 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
    20c8:	b590      	push	{r4, r7, lr}
    20ca:	b085      	sub	sp, #20
    20cc:	af00      	add	r7, sp, #0
    20ce:	6078      	str	r0, [r7, #4]
    20d0:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
    20d2:	2308      	movs	r3, #8
    20d4:	18fa      	adds	r2, r7, r3
    20d6:	6878      	ldr	r0, [r7, #4]
    20d8:	2301      	movs	r3, #1
    20da:	211e      	movs	r1, #30
    20dc:	4c08      	ldr	r4, [pc, #32]	; (2100 <lsm6dso_xl_flag_data_ready_get+0x38>)
    20de:	47a0      	blx	r4
    20e0:	0003      	movs	r3, r0
    20e2:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
    20e4:	2308      	movs	r3, #8
    20e6:	18fb      	adds	r3, r7, r3
    20e8:	781b      	ldrb	r3, [r3, #0]
    20ea:	07db      	lsls	r3, r3, #31
    20ec:	0fdb      	lsrs	r3, r3, #31
    20ee:	b2db      	uxtb	r3, r3
    20f0:	001a      	movs	r2, r3
    20f2:	683b      	ldr	r3, [r7, #0]
    20f4:	701a      	strb	r2, [r3, #0]

  return ret;
    20f6:	68fb      	ldr	r3, [r7, #12]
}
    20f8:	0018      	movs	r0, r3
    20fa:	46bd      	mov	sp, r7
    20fc:	b005      	add	sp, #20
    20fe:	bd90      	pop	{r4, r7, pc}
    2100:	00002049 	.word	0x00002049

00002104 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
    2104:	b590      	push	{r4, r7, lr}
    2106:	b087      	sub	sp, #28
    2108:	af00      	add	r7, sp, #0
    210a:	6078      	str	r0, [r7, #4]
    210c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
    210e:	230c      	movs	r3, #12
    2110:	18fa      	adds	r2, r7, r3
    2112:	6878      	ldr	r0, [r7, #4]
    2114:	2306      	movs	r3, #6
    2116:	2128      	movs	r1, #40	; 0x28
    2118:	4c26      	ldr	r4, [pc, #152]	; (21b4 <lsm6dso_acceleration_raw_get+0xb0>)
    211a:	47a0      	blx	r4
    211c:	0003      	movs	r3, r0
    211e:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
    2120:	230c      	movs	r3, #12
    2122:	18fb      	adds	r3, r7, r3
    2124:	785b      	ldrb	r3, [r3, #1]
    2126:	b21a      	sxth	r2, r3
    2128:	683b      	ldr	r3, [r7, #0]
    212a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
    212c:	683b      	ldr	r3, [r7, #0]
    212e:	2200      	movs	r2, #0
    2130:	5e9b      	ldrsh	r3, [r3, r2]
    2132:	b29b      	uxth	r3, r3
    2134:	021b      	lsls	r3, r3, #8
    2136:	b29a      	uxth	r2, r3
    2138:	230c      	movs	r3, #12
    213a:	18fb      	adds	r3, r7, r3
    213c:	781b      	ldrb	r3, [r3, #0]
    213e:	b29b      	uxth	r3, r3
    2140:	18d3      	adds	r3, r2, r3
    2142:	b29b      	uxth	r3, r3
    2144:	b21a      	sxth	r2, r3
    2146:	683b      	ldr	r3, [r7, #0]
    2148:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
    214a:	683b      	ldr	r3, [r7, #0]
    214c:	3302      	adds	r3, #2
    214e:	220c      	movs	r2, #12
    2150:	18ba      	adds	r2, r7, r2
    2152:	78d2      	ldrb	r2, [r2, #3]
    2154:	b212      	sxth	r2, r2
    2156:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
    2158:	683b      	ldr	r3, [r7, #0]
    215a:	3302      	adds	r3, #2
    215c:	683a      	ldr	r2, [r7, #0]
    215e:	3202      	adds	r2, #2
    2160:	2100      	movs	r1, #0
    2162:	5e52      	ldrsh	r2, [r2, r1]
    2164:	b292      	uxth	r2, r2
    2166:	0212      	lsls	r2, r2, #8
    2168:	b291      	uxth	r1, r2
    216a:	220c      	movs	r2, #12
    216c:	18ba      	adds	r2, r7, r2
    216e:	7892      	ldrb	r2, [r2, #2]
    2170:	b292      	uxth	r2, r2
    2172:	188a      	adds	r2, r1, r2
    2174:	b292      	uxth	r2, r2
    2176:	b212      	sxth	r2, r2
    2178:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
    217a:	683b      	ldr	r3, [r7, #0]
    217c:	3304      	adds	r3, #4
    217e:	220c      	movs	r2, #12
    2180:	18ba      	adds	r2, r7, r2
    2182:	7952      	ldrb	r2, [r2, #5]
    2184:	b212      	sxth	r2, r2
    2186:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
    2188:	683b      	ldr	r3, [r7, #0]
    218a:	3304      	adds	r3, #4
    218c:	683a      	ldr	r2, [r7, #0]
    218e:	3204      	adds	r2, #4
    2190:	2100      	movs	r1, #0
    2192:	5e52      	ldrsh	r2, [r2, r1]
    2194:	b292      	uxth	r2, r2
    2196:	0212      	lsls	r2, r2, #8
    2198:	b291      	uxth	r1, r2
    219a:	220c      	movs	r2, #12
    219c:	18ba      	adds	r2, r7, r2
    219e:	7912      	ldrb	r2, [r2, #4]
    21a0:	b292      	uxth	r2, r2
    21a2:	188a      	adds	r2, r1, r2
    21a4:	b292      	uxth	r2, r2
    21a6:	b212      	sxth	r2, r2
    21a8:	801a      	strh	r2, [r3, #0]

  return ret;
    21aa:	697b      	ldr	r3, [r7, #20]
}
    21ac:	0018      	movs	r0, r3
    21ae:	46bd      	mov	sp, r7
    21b0:	b007      	add	sp, #28
    21b2:	bd90      	pop	{r4, r7, pc}
    21b4:	00002049 	.word	0x00002049

000021b8 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    21b8:	b580      	push	{r7, lr}
    21ba:	b086      	sub	sp, #24
    21bc:	af00      	add	r7, sp, #0
    21be:	60f8      	str	r0, [r7, #12]
    21c0:	0008      	movs	r0, r1
    21c2:	607a      	str	r2, [r7, #4]
    21c4:	0019      	movs	r1, r3
    21c6:	230b      	movs	r3, #11
    21c8:	18fb      	adds	r3, r7, r3
    21ca:	1c02      	adds	r2, r0, #0
    21cc:	701a      	strb	r2, [r3, #0]
    21ce:	2308      	movs	r3, #8
    21d0:	18fb      	adds	r3, r7, r3
    21d2:	1c0a      	adds	r2, r1, #0
    21d4:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
  // First position reg
  msgOutImu[0] = reg;
    21d6:	4b22      	ldr	r3, [pc, #136]	; (2260 <platform_write+0xa8>)
    21d8:	220b      	movs	r2, #11
    21da:	18ba      	adds	r2, r7, r2
    21dc:	7812      	ldrb	r2, [r2, #0]
    21de:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i < len; i++){
    21e0:	2316      	movs	r3, #22
    21e2:	18fb      	adds	r3, r7, r3
    21e4:	2200      	movs	r2, #0
    21e6:	801a      	strh	r2, [r3, #0]
    21e8:	e012      	b.n	2210 <platform_write+0x58>
		msgOutImu[i+1] = bufp[i];
    21ea:	2316      	movs	r3, #22
    21ec:	18fb      	adds	r3, r7, r3
    21ee:	881b      	ldrh	r3, [r3, #0]
    21f0:	3301      	adds	r3, #1
    21f2:	2216      	movs	r2, #22
    21f4:	18ba      	adds	r2, r7, r2
    21f6:	8812      	ldrh	r2, [r2, #0]
    21f8:	6879      	ldr	r1, [r7, #4]
    21fa:	188a      	adds	r2, r1, r2
    21fc:	7811      	ldrb	r1, [r2, #0]
    21fe:	4a18      	ldr	r2, [pc, #96]	; (2260 <platform_write+0xa8>)
    2200:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i < len; i++){
    2202:	2316      	movs	r3, #22
    2204:	18fb      	adds	r3, r7, r3
    2206:	881a      	ldrh	r2, [r3, #0]
    2208:	2316      	movs	r3, #22
    220a:	18fb      	adds	r3, r7, r3
    220c:	3201      	adds	r2, #1
    220e:	801a      	strh	r2, [r3, #0]
    2210:	2316      	movs	r3, #22
    2212:	18fa      	adds	r2, r7, r3
    2214:	2308      	movs	r3, #8
    2216:	18fb      	adds	r3, r7, r3
    2218:	8812      	ldrh	r2, [r2, #0]
    221a:	881b      	ldrh	r3, [r3, #0]
    221c:	429a      	cmp	r2, r3
    221e:	d3e4      	bcc.n	21ea <platform_write+0x32>
	}
	imuData.address = 0x6B;
    2220:	4b10      	ldr	r3, [pc, #64]	; (2264 <platform_write+0xac>)
    2222:	226b      	movs	r2, #107	; 0x6b
    2224:	701a      	strb	r2, [r3, #0]
	imuData.msgOut = &msgOutImu;
    2226:	4b0f      	ldr	r3, [pc, #60]	; (2264 <platform_write+0xac>)
    2228:	4a0d      	ldr	r2, [pc, #52]	; (2260 <platform_write+0xa8>)
    222a:	605a      	str	r2, [r3, #4]
	imuData.lenOut = len + 1;
    222c:	2308      	movs	r3, #8
    222e:	18fb      	adds	r3, r7, r3
    2230:	881b      	ldrh	r3, [r3, #0]
    2232:	3301      	adds	r3, #1
    2234:	b29a      	uxth	r2, r3
    2236:	4b0b      	ldr	r3, [pc, #44]	; (2264 <platform_write+0xac>)
    2238:	81da      	strh	r2, [r3, #14]
	imuData.lenIn = len;
    223a:	4b0a      	ldr	r3, [pc, #40]	; (2264 <platform_write+0xac>)
    223c:	2208      	movs	r2, #8
    223e:	18ba      	adds	r2, r7, r2
    2240:	8812      	ldrh	r2, [r2, #0]
    2242:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
    2244:	4b07      	ldr	r3, [pc, #28]	; (2264 <platform_write+0xac>)
    2246:	687a      	ldr	r2, [r7, #4]
    2248:	609a      	str	r2, [r3, #8]
  return I2cWriteDataWait(&imuData, 100);
    224a:	4b06      	ldr	r3, [pc, #24]	; (2264 <platform_write+0xac>)
    224c:	2164      	movs	r1, #100	; 0x64
    224e:	0018      	movs	r0, r3
    2250:	4b05      	ldr	r3, [pc, #20]	; (2268 <platform_write+0xb0>)
    2252:	4798      	blx	r3
    2254:	0003      	movs	r3, r0
}
    2256:	0018      	movs	r0, r3
    2258:	46bd      	mov	sp, r7
    225a:	b006      	add	sp, #24
    225c:	bd80      	pop	{r7, pc}
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	200042a0 	.word	0x200042a0
    2264:	200042e0 	.word	0x200042e0
    2268:	00001e59 	.word	0x00001e59

0000226c <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    226c:	b580      	push	{r7, lr}
    226e:	b084      	sub	sp, #16
    2270:	af00      	add	r7, sp, #0
    2272:	60f8      	str	r0, [r7, #12]
    2274:	0008      	movs	r0, r1
    2276:	607a      	str	r2, [r7, #4]
    2278:	0019      	movs	r1, r3
    227a:	230b      	movs	r3, #11
    227c:	18fb      	adds	r3, r7, r3
    227e:	1c02      	adds	r2, r0, #0
    2280:	701a      	strb	r2, [r3, #0]
    2282:	2308      	movs	r3, #8
    2284:	18fb      	adds	r3, r7, r3
    2286:	1c0a      	adds	r2, r1, #0
    2288:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	msgOutImu[0] = reg;
    228a:	4b10      	ldr	r3, [pc, #64]	; (22cc <platform_read+0x60>)
    228c:	220b      	movs	r2, #11
    228e:	18ba      	adds	r2, r7, r2
    2290:	7812      	ldrb	r2, [r2, #0]
    2292:	701a      	strb	r2, [r3, #0]
	imuData.address = 0x6B;
    2294:	4b0e      	ldr	r3, [pc, #56]	; (22d0 <platform_read+0x64>)
    2296:	226b      	movs	r2, #107	; 0x6b
    2298:	701a      	strb	r2, [r3, #0]
	imuData.msgIn = bufp;
    229a:	4b0d      	ldr	r3, [pc, #52]	; (22d0 <platform_read+0x64>)
    229c:	687a      	ldr	r2, [r7, #4]
    229e:	609a      	str	r2, [r3, #8]
	imuData.lenIn = len;
    22a0:	4b0b      	ldr	r3, [pc, #44]	; (22d0 <platform_read+0x64>)
    22a2:	2208      	movs	r2, #8
    22a4:	18ba      	adds	r2, r7, r2
    22a6:	8812      	ldrh	r2, [r2, #0]
    22a8:	819a      	strh	r2, [r3, #12]
	imuData.lenOut = 1;
    22aa:	4b09      	ldr	r3, [pc, #36]	; (22d0 <platform_read+0x64>)
    22ac:	2201      	movs	r2, #1
    22ae:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &msgOutImu;
    22b0:	4b07      	ldr	r3, [pc, #28]	; (22d0 <platform_read+0x64>)
    22b2:	4a06      	ldr	r2, [pc, #24]	; (22cc <platform_read+0x60>)
    22b4:	605a      	str	r2, [r3, #4]
	
	return I2cReadDataWait(&imuData, 100, 100);
    22b6:	4b06      	ldr	r3, [pc, #24]	; (22d0 <platform_read+0x64>)
    22b8:	2264      	movs	r2, #100	; 0x64
    22ba:	2164      	movs	r1, #100	; 0x64
    22bc:	0018      	movs	r0, r3
    22be:	4b05      	ldr	r3, [pc, #20]	; (22d4 <platform_read+0x68>)
    22c0:	4798      	blx	r3
    22c2:	0003      	movs	r3, r0
}
    22c4:	0018      	movs	r0, r3
    22c6:	46bd      	mov	sp, r7
    22c8:	b004      	add	sp, #16
    22ca:	bd80      	pop	{r7, pc}
    22cc:	200042a0 	.word	0x200042a0
    22d0:	200042e0 	.word	0x200042e0
    22d4:	00001f31 	.word	0x00001f31

000022d8 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
    22d8:	b580      	push	{r7, lr}
    22da:	af00      	add	r7, sp, #0
return &dev_ctx;
    22dc:	4b01      	ldr	r3, [pc, #4]	; (22e4 <GetImuStruct+0xc>)
}
    22de:	0018      	movs	r0, r3
    22e0:	46bd      	mov	sp, r7
    22e2:	bd80      	pop	{r7, pc}
    22e4:	20000020 	.word	0x20000020

000022e8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    22e8:	b580      	push	{r7, lr}
    22ea:	b084      	sub	sp, #16
    22ec:	af00      	add	r7, sp, #0
    22ee:	0002      	movs	r2, r0
    22f0:	1dfb      	adds	r3, r7, #7
    22f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    22f4:	230f      	movs	r3, #15
    22f6:	18fb      	adds	r3, r7, r3
    22f8:	1dfa      	adds	r2, r7, #7
    22fa:	7812      	ldrb	r2, [r2, #0]
    22fc:	09d2      	lsrs	r2, r2, #7
    22fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2300:	230e      	movs	r3, #14
    2302:	18fb      	adds	r3, r7, r3
    2304:	1dfa      	adds	r2, r7, #7
    2306:	7812      	ldrb	r2, [r2, #0]
    2308:	0952      	lsrs	r2, r2, #5
    230a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    230c:	4b0d      	ldr	r3, [pc, #52]	; (2344 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    230e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2310:	230f      	movs	r3, #15
    2312:	18fb      	adds	r3, r7, r3
    2314:	781b      	ldrb	r3, [r3, #0]
    2316:	2b00      	cmp	r3, #0
    2318:	d10f      	bne.n	233a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    231a:	230f      	movs	r3, #15
    231c:	18fb      	adds	r3, r7, r3
    231e:	781b      	ldrb	r3, [r3, #0]
    2320:	009b      	lsls	r3, r3, #2
    2322:	2210      	movs	r2, #16
    2324:	4694      	mov	ip, r2
    2326:	44bc      	add	ip, r7
    2328:	4463      	add	r3, ip
    232a:	3b08      	subs	r3, #8
    232c:	681a      	ldr	r2, [r3, #0]
    232e:	230e      	movs	r3, #14
    2330:	18fb      	adds	r3, r7, r3
    2332:	781b      	ldrb	r3, [r3, #0]
    2334:	01db      	lsls	r3, r3, #7
    2336:	18d3      	adds	r3, r2, r3
    2338:	e000      	b.n	233c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    233a:	2300      	movs	r3, #0
	}
}
    233c:	0018      	movs	r0, r3
    233e:	46bd      	mov	sp, r7
    2340:	b004      	add	sp, #16
    2342:	bd80      	pop	{r7, pc}
    2344:	41004400 	.word	0x41004400

00002348 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2348:	b580      	push	{r7, lr}
    234a:	b082      	sub	sp, #8
    234c:	af00      	add	r7, sp, #0
    234e:	0002      	movs	r2, r0
    2350:	1dfb      	adds	r3, r7, #7
    2352:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2354:	1dfb      	adds	r3, r7, #7
    2356:	781b      	ldrb	r3, [r3, #0]
    2358:	0018      	movs	r0, r3
    235a:	4b03      	ldr	r3, [pc, #12]	; (2368 <port_get_group_from_gpio_pin+0x20>)
    235c:	4798      	blx	r3
    235e:	0003      	movs	r3, r0
}
    2360:	0018      	movs	r0, r3
    2362:	46bd      	mov	sp, r7
    2364:	b002      	add	sp, #8
    2366:	bd80      	pop	{r7, pc}
    2368:	000022e9 	.word	0x000022e9

0000236c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    236c:	b580      	push	{r7, lr}
    236e:	b084      	sub	sp, #16
    2370:	af00      	add	r7, sp, #0
    2372:	0002      	movs	r2, r0
    2374:	1dfb      	adds	r3, r7, #7
    2376:	701a      	strb	r2, [r3, #0]
    2378:	1dbb      	adds	r3, r7, #6
    237a:	1c0a      	adds	r2, r1, #0
    237c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    237e:	1dfb      	adds	r3, r7, #7
    2380:	781b      	ldrb	r3, [r3, #0]
    2382:	0018      	movs	r0, r3
    2384:	4b0d      	ldr	r3, [pc, #52]	; (23bc <port_pin_set_output_level+0x50>)
    2386:	4798      	blx	r3
    2388:	0003      	movs	r3, r0
    238a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    238c:	1dfb      	adds	r3, r7, #7
    238e:	781b      	ldrb	r3, [r3, #0]
    2390:	221f      	movs	r2, #31
    2392:	4013      	ands	r3, r2
    2394:	2201      	movs	r2, #1
    2396:	409a      	lsls	r2, r3
    2398:	0013      	movs	r3, r2
    239a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    239c:	1dbb      	adds	r3, r7, #6
    239e:	781b      	ldrb	r3, [r3, #0]
    23a0:	2b00      	cmp	r3, #0
    23a2:	d003      	beq.n	23ac <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    23a4:	68fb      	ldr	r3, [r7, #12]
    23a6:	68ba      	ldr	r2, [r7, #8]
    23a8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    23aa:	e002      	b.n	23b2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    23ac:	68fb      	ldr	r3, [r7, #12]
    23ae:	68ba      	ldr	r2, [r7, #8]
    23b0:	615a      	str	r2, [r3, #20]
}
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	46bd      	mov	sp, r7
    23b6:	b004      	add	sp, #16
    23b8:	bd80      	pop	{r7, pc}
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	00002349 	.word	0x00002349

000023c0 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
    23c0:	b580      	push	{r7, lr}
    23c2:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
    23c4:	4b02      	ldr	r3, [pc, #8]	; (23d0 <init_state+0x10>)
    23c6:	2200      	movs	r2, #0
    23c8:	701a      	strb	r2, [r3, #0]
}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	46bd      	mov	sp, r7
    23ce:	bd80      	pop	{r7, pc}
    23d0:	200004ad 	.word	0x200004ad

000023d4 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
    23d4:	b580      	push	{r7, lr}
    23d6:	b082      	sub	sp, #8
    23d8:	af00      	add	r7, sp, #0
    23da:	0002      	movs	r2, r0
    23dc:	1dfb      	adds	r3, r7, #7
    23de:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
    23e0:	1dfb      	adds	r3, r7, #7
    23e2:	781b      	ldrb	r3, [r3, #0]
    23e4:	b25b      	sxtb	r3, r3
    23e6:	43db      	mvns	r3, r3
    23e8:	b25b      	sxtb	r3, r3
    23ea:	4a06      	ldr	r2, [pc, #24]	; (2404 <clear_state+0x30>)
    23ec:	7812      	ldrb	r2, [r2, #0]
    23ee:	b252      	sxtb	r2, r2
    23f0:	4013      	ands	r3, r2
    23f2:	b25b      	sxtb	r3, r3
    23f4:	b2da      	uxtb	r2, r3
    23f6:	4b03      	ldr	r3, [pc, #12]	; (2404 <clear_state+0x30>)
    23f8:	701a      	strb	r2, [r3, #0]
}
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	46bd      	mov	sp, r7
    23fe:	b002      	add	sp, #8
    2400:	bd80      	pop	{r7, pc}
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	200004ad 	.word	0x200004ad

00002408 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
    2408:	b580      	push	{r7, lr}
    240a:	b082      	sub	sp, #8
    240c:	af00      	add	r7, sp, #0
    240e:	0002      	movs	r2, r0
    2410:	1dfb      	adds	r3, r7, #7
    2412:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
    2414:	4b05      	ldr	r3, [pc, #20]	; (242c <add_state+0x24>)
    2416:	781a      	ldrb	r2, [r3, #0]
    2418:	1dfb      	adds	r3, r7, #7
    241a:	781b      	ldrb	r3, [r3, #0]
    241c:	4313      	orrs	r3, r2
    241e:	b2da      	uxtb	r2, r3
    2420:	4b02      	ldr	r3, [pc, #8]	; (242c <add_state+0x24>)
    2422:	701a      	strb	r2, [r3, #0]
}
    2424:	46c0      	nop			; (mov r8, r8)
    2426:	46bd      	mov	sp, r7
    2428:	b002      	add	sp, #8
    242a:	bd80      	pop	{r7, pc}
    242c:	200004ad 	.word	0x200004ad

00002430 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
    2430:	b580      	push	{r7, lr}
    2432:	b082      	sub	sp, #8
    2434:	af00      	add	r7, sp, #0
    2436:	0002      	movs	r2, r0
    2438:	1dfb      	adds	r3, r7, #7
    243a:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
    243c:	4b06      	ldr	r3, [pc, #24]	; (2458 <is_state_set+0x28>)
    243e:	781b      	ldrb	r3, [r3, #0]
    2440:	1dfa      	adds	r2, r7, #7
    2442:	7812      	ldrb	r2, [r2, #0]
    2444:	4013      	ands	r3, r2
    2446:	b2db      	uxtb	r3, r3
    2448:	1e5a      	subs	r2, r3, #1
    244a:	4193      	sbcs	r3, r2
    244c:	b2db      	uxtb	r3, r3
}
    244e:	0018      	movs	r0, r3
    2450:	46bd      	mov	sp, r7
    2452:	b002      	add	sp, #8
    2454:	bd80      	pop	{r7, pc}
    2456:	46c0      	nop			; (mov r8, r8)
    2458:	200004ad 	.word	0x200004ad

0000245c <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
    245c:	b590      	push	{r4, r7, lr}
    245e:	b085      	sub	sp, #20
    2460:	af00      	add	r7, sp, #0
    2462:	6078      	str	r0, [r7, #4]
    2464:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
    2466:	687b      	ldr	r3, [r7, #4]
    2468:	2b00      	cmp	r3, #0
    246a:	d002      	beq.n	2472 <is_exist_file+0x16>
    246c:	683b      	ldr	r3, [r7, #0]
    246e:	2b00      	cmp	r3, #0
    2470:	d101      	bne.n	2476 <is_exist_file+0x1a>
        return false;
    2472:	2300      	movs	r3, #0
    2474:	e013      	b.n	249e <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    2476:	230f      	movs	r3, #15
    2478:	18fc      	adds	r4, r7, r3
    247a:	6839      	ldr	r1, [r7, #0]
    247c:	4b0a      	ldr	r3, [pc, #40]	; (24a8 <is_exist_file+0x4c>)
    247e:	2200      	movs	r2, #0
    2480:	0018      	movs	r0, r3
    2482:	4b0a      	ldr	r3, [pc, #40]	; (24ac <is_exist_file+0x50>)
    2484:	4798      	blx	r3
    2486:	0003      	movs	r3, r0
    2488:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
    248a:	4b07      	ldr	r3, [pc, #28]	; (24a8 <is_exist_file+0x4c>)
    248c:	0018      	movs	r0, r3
    248e:	4b08      	ldr	r3, [pc, #32]	; (24b0 <is_exist_file+0x54>)
    2490:	4798      	blx	r3
    return (ret == FR_OK);
    2492:	230f      	movs	r3, #15
    2494:	18fb      	adds	r3, r7, r3
    2496:	781b      	ldrb	r3, [r3, #0]
    2498:	425a      	negs	r2, r3
    249a:	4153      	adcs	r3, r2
    249c:	b2db      	uxtb	r3, r3
}
    249e:	0018      	movs	r0, r3
    24a0:	46bd      	mov	sp, r7
    24a2:	b005      	add	sp, #20
    24a4:	bd90      	pop	{r4, r7, pc}
    24a6:	46c0      	nop			; (mov r8, r8)
    24a8:	200006e0 	.word	0x200006e0
    24ac:	00019f41 	.word	0x00019f41
    24b0:	0001a941 	.word	0x0001a941

000024b4 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
    24b4:	b580      	push	{r7, lr}
    24b6:	b09e      	sub	sp, #120	; 0x78
    24b8:	af00      	add	r7, sp, #0
    24ba:	60f8      	str	r0, [r7, #12]
    24bc:	60b9      	str	r1, [r7, #8]
    24be:	1dfb      	adds	r3, r7, #7
    24c0:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
    24c2:	2376      	movs	r3, #118	; 0x76
    24c4:	18fb      	adds	r3, r7, r3
    24c6:	2201      	movs	r2, #1
    24c8:	801a      	strh	r2, [r3, #0]
    24ca:	2374      	movs	r3, #116	; 0x74
    24cc:	18fb      	adds	r3, r7, r3
    24ce:	2200      	movs	r2, #0
    24d0:	801a      	strh	r2, [r3, #0]
    24d2:	236e      	movs	r3, #110	; 0x6e
    24d4:	18fb      	adds	r3, r7, r3
    24d6:	2200      	movs	r2, #0
    24d8:	801a      	strh	r2, [r3, #0]
    24da:	2372      	movs	r3, #114	; 0x72
    24dc:	18fb      	adds	r3, r7, r3
    24de:	2200      	movs	r2, #0
    24e0:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    24e2:	2324      	movs	r3, #36	; 0x24
    24e4:	18fb      	adds	r3, r7, r3
    24e6:	0018      	movs	r0, r3
    24e8:	2341      	movs	r3, #65	; 0x41
    24ea:	001a      	movs	r2, r3
    24ec:	2100      	movs	r1, #0
    24ee:	4b92      	ldr	r3, [pc, #584]	; (2738 <rename_to_unique+0x284>)
    24f0:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    24f2:	2318      	movs	r3, #24
    24f4:	18fb      	adds	r3, r7, r3
    24f6:	0018      	movs	r0, r3
    24f8:	2309      	movs	r3, #9
    24fa:	001a      	movs	r2, r3
    24fc:	2100      	movs	r1, #0
    24fe:	4b8e      	ldr	r3, [pc, #568]	; (2738 <rename_to_unique+0x284>)
    2500:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
    2502:	2314      	movs	r3, #20
    2504:	18fb      	adds	r3, r7, r3
    2506:	2200      	movs	r2, #0
    2508:	601a      	str	r2, [r3, #0]
    char *p = NULL;
    250a:	2300      	movs	r3, #0
    250c:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
    250e:	2371      	movs	r3, #113	; 0x71
    2510:	18fb      	adds	r3, r7, r3
    2512:	2200      	movs	r2, #0
    2514:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
    2516:	68bb      	ldr	r3, [r7, #8]
    2518:	2b00      	cmp	r3, #0
    251a:	d101      	bne.n	2520 <rename_to_unique+0x6c>
        return false;
    251c:	2300      	movs	r3, #0
    251e:	e106      	b.n	272e <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
    2520:	68ba      	ldr	r2, [r7, #8]
    2522:	68fb      	ldr	r3, [r7, #12]
    2524:	0011      	movs	r1, r2
    2526:	0018      	movs	r0, r3
    2528:	4b84      	ldr	r3, [pc, #528]	; (273c <rename_to_unique+0x288>)
    252a:	4798      	blx	r3
    252c:	0003      	movs	r3, r0
    252e:	001a      	movs	r2, r3
    2530:	2301      	movs	r3, #1
    2532:	4053      	eors	r3, r2
    2534:	b2db      	uxtb	r3, r3
    2536:	2b00      	cmp	r3, #0
    2538:	d001      	beq.n	253e <rename_to_unique+0x8a>
        return true;
    253a:	2301      	movs	r3, #1
    253c:	e0f7      	b.n	272e <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    253e:	68bb      	ldr	r3, [r7, #8]
    2540:	0018      	movs	r0, r3
    2542:	4b7f      	ldr	r3, [pc, #508]	; (2740 <rename_to_unique+0x28c>)
    2544:	4798      	blx	r3
    2546:	0003      	movs	r3, r0
    2548:	2b40      	cmp	r3, #64	; 0x40
    254a:	d901      	bls.n	2550 <rename_to_unique+0x9c>
        return false;
    254c:	2300      	movs	r3, #0
    254e:	e0ee      	b.n	272e <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
    2550:	68bb      	ldr	r3, [r7, #8]
    2552:	212e      	movs	r1, #46	; 0x2e
    2554:	0018      	movs	r0, r3
    2556:	4b7b      	ldr	r3, [pc, #492]	; (2744 <rename_to_unique+0x290>)
    2558:	4798      	blx	r3
    255a:	0003      	movs	r3, r0
    255c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
    255e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2560:	2b00      	cmp	r3, #0
    2562:	d052      	beq.n	260a <rename_to_unique+0x156>
        ext_len = strlen(p);
    2564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2566:	0018      	movs	r0, r3
    2568:	4b75      	ldr	r3, [pc, #468]	; (2740 <rename_to_unique+0x28c>)
    256a:	4798      	blx	r3
    256c:	0002      	movs	r2, r0
    256e:	236e      	movs	r3, #110	; 0x6e
    2570:	18fb      	adds	r3, r7, r3
    2572:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    2574:	236e      	movs	r3, #110	; 0x6e
    2576:	18fb      	adds	r3, r7, r3
    2578:	881b      	ldrh	r3, [r3, #0]
    257a:	2b07      	cmp	r3, #7
    257c:	d837      	bhi.n	25ee <rename_to_unique+0x13a>
            valid_ext = true;
    257e:	2371      	movs	r3, #113	; 0x71
    2580:	18fb      	adds	r3, r7, r3
    2582:	2201      	movs	r2, #1
    2584:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
    2586:	6eba      	ldr	r2, [r7, #104]	; 0x68
    2588:	2318      	movs	r3, #24
    258a:	18fb      	adds	r3, r7, r3
    258c:	0011      	movs	r1, r2
    258e:	0018      	movs	r0, r3
    2590:	4b6d      	ldr	r3, [pc, #436]	; (2748 <rename_to_unique+0x294>)
    2592:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    2594:	68bb      	ldr	r3, [r7, #8]
    2596:	0018      	movs	r0, r3
    2598:	4b69      	ldr	r3, [pc, #420]	; (2740 <rename_to_unique+0x28c>)
    259a:	4798      	blx	r3
    259c:	0002      	movs	r2, r0
    259e:	236e      	movs	r3, #110	; 0x6e
    25a0:	18fb      	adds	r3, r7, r3
    25a2:	881b      	ldrh	r3, [r3, #0]
    25a4:	1ad3      	subs	r3, r2, r3
    25a6:	2b3c      	cmp	r3, #60	; 0x3c
    25a8:	d911      	bls.n	25ce <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    25aa:	2374      	movs	r3, #116	; 0x74
    25ac:	18fb      	adds	r3, r7, r3
    25ae:	226e      	movs	r2, #110	; 0x6e
    25b0:	18ba      	adds	r2, r7, r2
    25b2:	8812      	ldrh	r2, [r2, #0]
    25b4:	213c      	movs	r1, #60	; 0x3c
    25b6:	1a8a      	subs	r2, r1, r2
    25b8:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
    25ba:	2374      	movs	r3, #116	; 0x74
    25bc:	18fb      	adds	r3, r7, r3
    25be:	881a      	ldrh	r2, [r3, #0]
    25c0:	68b9      	ldr	r1, [r7, #8]
    25c2:	2324      	movs	r3, #36	; 0x24
    25c4:	18fb      	adds	r3, r7, r3
    25c6:	0018      	movs	r0, r3
    25c8:	4b60      	ldr	r3, [pc, #384]	; (274c <rename_to_unique+0x298>)
    25ca:	4798      	blx	r3
    25cc:	e02a      	b.n	2624 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
    25ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
    25d0:	68bb      	ldr	r3, [r7, #8]
    25d2:	1ad2      	subs	r2, r2, r3
    25d4:	2374      	movs	r3, #116	; 0x74
    25d6:	18fb      	adds	r3, r7, r3
    25d8:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
    25da:	2374      	movs	r3, #116	; 0x74
    25dc:	18fb      	adds	r3, r7, r3
    25de:	881a      	ldrh	r2, [r3, #0]
    25e0:	68b9      	ldr	r1, [r7, #8]
    25e2:	2324      	movs	r3, #36	; 0x24
    25e4:	18fb      	adds	r3, r7, r3
    25e6:	0018      	movs	r0, r3
    25e8:	4b58      	ldr	r3, [pc, #352]	; (274c <rename_to_unique+0x298>)
    25ea:	4798      	blx	r3
    25ec:	e01a      	b.n	2624 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    25ee:	2374      	movs	r3, #116	; 0x74
    25f0:	18fb      	adds	r3, r7, r3
    25f2:	223c      	movs	r2, #60	; 0x3c
    25f4:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
    25f6:	2374      	movs	r3, #116	; 0x74
    25f8:	18fb      	adds	r3, r7, r3
    25fa:	881a      	ldrh	r2, [r3, #0]
    25fc:	68b9      	ldr	r1, [r7, #8]
    25fe:	2324      	movs	r3, #36	; 0x24
    2600:	18fb      	adds	r3, r7, r3
    2602:	0018      	movs	r0, r3
    2604:	4b51      	ldr	r3, [pc, #324]	; (274c <rename_to_unique+0x298>)
    2606:	4798      	blx	r3
    2608:	e00c      	b.n	2624 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    260a:	2374      	movs	r3, #116	; 0x74
    260c:	18fb      	adds	r3, r7, r3
    260e:	223c      	movs	r2, #60	; 0x3c
    2610:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
    2612:	2374      	movs	r3, #116	; 0x74
    2614:	18fb      	adds	r3, r7, r3
    2616:	881a      	ldrh	r2, [r3, #0]
    2618:	68b9      	ldr	r1, [r7, #8]
    261a:	2324      	movs	r3, #36	; 0x24
    261c:	18fb      	adds	r3, r7, r3
    261e:	0018      	movs	r0, r3
    2620:	4b4a      	ldr	r3, [pc, #296]	; (274c <rename_to_unique+0x298>)
    2622:	4798      	blx	r3
    }

    name[name_len++] = '-';
    2624:	2374      	movs	r3, #116	; 0x74
    2626:	18fb      	adds	r3, r7, r3
    2628:	881b      	ldrh	r3, [r3, #0]
    262a:	2274      	movs	r2, #116	; 0x74
    262c:	18ba      	adds	r2, r7, r2
    262e:	1c59      	adds	r1, r3, #1
    2630:	8011      	strh	r1, [r2, #0]
    2632:	001a      	movs	r2, r3
    2634:	2324      	movs	r3, #36	; 0x24
    2636:	18fb      	adds	r3, r7, r3
    2638:	212d      	movs	r1, #45	; 0x2d
    263a:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    263c:	2376      	movs	r3, #118	; 0x76
    263e:	18fb      	adds	r3, r7, r3
    2640:	2200      	movs	r2, #0
    2642:	801a      	strh	r2, [r3, #0]
    2644:	2372      	movs	r3, #114	; 0x72
    2646:	18fb      	adds	r3, r7, r3
    2648:	2201      	movs	r2, #1
    264a:	801a      	strh	r2, [r3, #0]
    264c:	e010      	b.n	2670 <rename_to_unique+0x1bc>
        count *= 10;
    264e:	2372      	movs	r3, #114	; 0x72
    2650:	18fa      	adds	r2, r7, r3
    2652:	2372      	movs	r3, #114	; 0x72
    2654:	18fb      	adds	r3, r7, r3
    2656:	881b      	ldrh	r3, [r3, #0]
    2658:	1c19      	adds	r1, r3, #0
    265a:	0089      	lsls	r1, r1, #2
    265c:	18cb      	adds	r3, r1, r3
    265e:	18db      	adds	r3, r3, r3
    2660:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    2662:	2376      	movs	r3, #118	; 0x76
    2664:	18fb      	adds	r3, r7, r3
    2666:	881a      	ldrh	r2, [r3, #0]
    2668:	2376      	movs	r3, #118	; 0x76
    266a:	18fb      	adds	r3, r7, r3
    266c:	3201      	adds	r2, #1
    266e:	801a      	strh	r2, [r3, #0]
    2670:	2376      	movs	r3, #118	; 0x76
    2672:	18fb      	adds	r3, r7, r3
    2674:	881b      	ldrh	r3, [r3, #0]
    2676:	2b02      	cmp	r3, #2
    2678:	d9e9      	bls.n	264e <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
    267a:	2376      	movs	r3, #118	; 0x76
    267c:	18fb      	adds	r3, r7, r3
    267e:	2201      	movs	r2, #1
    2680:	801a      	strh	r2, [r3, #0]
    2682:	e04b      	b.n	271c <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    2684:	2376      	movs	r3, #118	; 0x76
    2686:	18fb      	adds	r3, r7, r3
    2688:	881a      	ldrh	r2, [r3, #0]
    268a:	4931      	ldr	r1, [pc, #196]	; (2750 <rename_to_unique+0x29c>)
    268c:	2314      	movs	r3, #20
    268e:	18fb      	adds	r3, r7, r3
    2690:	0018      	movs	r0, r3
    2692:	4b30      	ldr	r3, [pc, #192]	; (2754 <rename_to_unique+0x2a0>)
    2694:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
    2696:	2374      	movs	r3, #116	; 0x74
    2698:	18fb      	adds	r3, r7, r3
    269a:	881b      	ldrh	r3, [r3, #0]
    269c:	2224      	movs	r2, #36	; 0x24
    269e:	18ba      	adds	r2, r7, r2
    26a0:	18d3      	adds	r3, r2, r3
    26a2:	2214      	movs	r2, #20
    26a4:	18b9      	adds	r1, r7, r2
    26a6:	2203      	movs	r2, #3
    26a8:	0018      	movs	r0, r3
    26aa:	4b28      	ldr	r3, [pc, #160]	; (274c <rename_to_unique+0x298>)
    26ac:	4798      	blx	r3
        if (valid_ext) {
    26ae:	2371      	movs	r3, #113	; 0x71
    26b0:	18fb      	adds	r3, r7, r3
    26b2:	781b      	ldrb	r3, [r3, #0]
    26b4:	2b00      	cmp	r3, #0
    26b6:	d00c      	beq.n	26d2 <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
    26b8:	2374      	movs	r3, #116	; 0x74
    26ba:	18fb      	adds	r3, r7, r3
    26bc:	881b      	ldrh	r3, [r3, #0]
    26be:	3303      	adds	r3, #3
    26c0:	2224      	movs	r2, #36	; 0x24
    26c2:	18ba      	adds	r2, r7, r2
    26c4:	18d3      	adds	r3, r2, r3
    26c6:	2218      	movs	r2, #24
    26c8:	18ba      	adds	r2, r7, r2
    26ca:	0011      	movs	r1, r2
    26cc:	0018      	movs	r0, r3
    26ce:	4b1e      	ldr	r3, [pc, #120]	; (2748 <rename_to_unique+0x294>)
    26d0:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
    26d2:	2324      	movs	r3, #36	; 0x24
    26d4:	18fa      	adds	r2, r7, r3
    26d6:	68fb      	ldr	r3, [r7, #12]
    26d8:	0011      	movs	r1, r2
    26da:	0018      	movs	r0, r3
    26dc:	4b17      	ldr	r3, [pc, #92]	; (273c <rename_to_unique+0x288>)
    26de:	4798      	blx	r3
    26e0:	0003      	movs	r3, r0
    26e2:	001a      	movs	r2, r3
    26e4:	2301      	movs	r3, #1
    26e6:	4053      	eors	r3, r2
    26e8:	b2db      	uxtb	r3, r3
    26ea:	2b00      	cmp	r3, #0
    26ec:	d00f      	beq.n	270e <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
    26ee:	1dfb      	adds	r3, r7, #7
    26f0:	781a      	ldrb	r2, [r3, #0]
    26f2:	68bb      	ldr	r3, [r7, #8]
    26f4:	2100      	movs	r1, #0
    26f6:	0018      	movs	r0, r3
    26f8:	4b0f      	ldr	r3, [pc, #60]	; (2738 <rename_to_unique+0x284>)
    26fa:	4798      	blx	r3
            strcpy(file_path_name, name);
    26fc:	2324      	movs	r3, #36	; 0x24
    26fe:	18fa      	adds	r2, r7, r3
    2700:	68bb      	ldr	r3, [r7, #8]
    2702:	0011      	movs	r1, r2
    2704:	0018      	movs	r0, r3
    2706:	4b10      	ldr	r3, [pc, #64]	; (2748 <rename_to_unique+0x294>)
    2708:	4798      	blx	r3
            return true;
    270a:	2301      	movs	r3, #1
    270c:	e00f      	b.n	272e <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
    270e:	2376      	movs	r3, #118	; 0x76
    2710:	18fb      	adds	r3, r7, r3
    2712:	881a      	ldrh	r2, [r3, #0]
    2714:	2376      	movs	r3, #118	; 0x76
    2716:	18fb      	adds	r3, r7, r3
    2718:	3201      	adds	r2, #1
    271a:	801a      	strh	r2, [r3, #0]
    271c:	2376      	movs	r3, #118	; 0x76
    271e:	18fa      	adds	r2, r7, r3
    2720:	2372      	movs	r3, #114	; 0x72
    2722:	18fb      	adds	r3, r7, r3
    2724:	8812      	ldrh	r2, [r2, #0]
    2726:	881b      	ldrh	r3, [r3, #0]
    2728:	429a      	cmp	r2, r3
    272a:	d3ab      	bcc.n	2684 <rename_to_unique+0x1d0>
        }
    }
    return false;
    272c:	2300      	movs	r3, #0
}
    272e:	0018      	movs	r0, r3
    2730:	46bd      	mov	sp, r7
    2732:	b01e      	add	sp, #120	; 0x78
    2734:	bd80      	pop	{r7, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	00020f1f 	.word	0x00020f1f
    273c:	0000245d 	.word	0x0000245d
    2740:	000212d7 	.word	0x000212d7
    2744:	00021331 	.word	0x00021331
    2748:	0002128b 	.word	0x0002128b
    274c:	00021307 	.word	0x00021307
    2750:	0002262c 	.word	0x0002262c
    2754:	000211dd 	.word	0x000211dd

00002758 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
    2758:	b590      	push	{r4, r7, lr}
    275a:	b085      	sub	sp, #20
    275c:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
    275e:	2001      	movs	r0, #1
    2760:	4b23      	ldr	r3, [pc, #140]	; (27f0 <start_download+0x98>)
    2762:	4798      	blx	r3
    2764:	0003      	movs	r3, r0
    2766:	001a      	movs	r2, r3
    2768:	2301      	movs	r3, #1
    276a:	4053      	eors	r3, r2
    276c:	b2db      	uxtb	r3, r3
    276e:	2b00      	cmp	r3, #0
    2770:	d005      	beq.n	277e <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
    2772:	4b20      	ldr	r3, [pc, #128]	; (27f4 <start_download+0x9c>)
    2774:	0019      	movs	r1, r3
    2776:	2001      	movs	r0, #1
    2778:	4b1f      	ldr	r3, [pc, #124]	; (27f8 <start_download+0xa0>)
    277a:	4798      	blx	r3
        return;
    277c:	e034      	b.n	27e8 <start_download+0x90>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
    277e:	2002      	movs	r0, #2
    2780:	4b1b      	ldr	r3, [pc, #108]	; (27f0 <start_download+0x98>)
    2782:	4798      	blx	r3
    2784:	0003      	movs	r3, r0
    2786:	001a      	movs	r2, r3
    2788:	2301      	movs	r3, #1
    278a:	4053      	eors	r3, r2
    278c:	b2db      	uxtb	r3, r3
    278e:	2b00      	cmp	r3, #0
    2790:	d005      	beq.n	279e <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
    2792:	4b1a      	ldr	r3, [pc, #104]	; (27fc <start_download+0xa4>)
    2794:	0019      	movs	r1, r3
    2796:	2001      	movs	r0, #1
    2798:	4b17      	ldr	r3, [pc, #92]	; (27f8 <start_download+0xa0>)
    279a:	4798      	blx	r3
        return;
    279c:	e024      	b.n	27e8 <start_download+0x90>
    }

    if (is_state_set(GET_REQUESTED)) {
    279e:	2004      	movs	r0, #4
    27a0:	4b13      	ldr	r3, [pc, #76]	; (27f0 <start_download+0x98>)
    27a2:	4798      	blx	r3
    27a4:	1e03      	subs	r3, r0, #0
    27a6:	d005      	beq.n	27b4 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
    27a8:	4b15      	ldr	r3, [pc, #84]	; (2800 <start_download+0xa8>)
    27aa:	0019      	movs	r1, r3
    27ac:	2001      	movs	r0, #1
    27ae:	4b12      	ldr	r3, [pc, #72]	; (27f8 <start_download+0xa0>)
    27b0:	4798      	blx	r3
        return;
    27b2:	e019      	b.n	27e8 <start_download+0x90>
    }

    if (is_state_set(DOWNLOADING)) {
    27b4:	2008      	movs	r0, #8
    27b6:	4b0e      	ldr	r3, [pc, #56]	; (27f0 <start_download+0x98>)
    27b8:	4798      	blx	r3
    27ba:	1e03      	subs	r3, r0, #0
    27bc:	d005      	beq.n	27ca <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
    27be:	4b11      	ldr	r3, [pc, #68]	; (2804 <start_download+0xac>)
    27c0:	0019      	movs	r1, r3
    27c2:	2001      	movs	r0, #1
    27c4:	4b0c      	ldr	r3, [pc, #48]	; (27f8 <start_download+0xa0>)
    27c6:	4798      	blx	r3
        return;
    27c8:	e00e      	b.n	27e8 <start_download+0x90>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
    27ca:	4b0f      	ldr	r3, [pc, #60]	; (2808 <start_download+0xb0>)
    27cc:	0019      	movs	r1, r3
    27ce:	2001      	movs	r0, #1
    27d0:	4b09      	ldr	r3, [pc, #36]	; (27f8 <start_download+0xa0>)
    27d2:	4798      	blx	r3
    int http_req_status = http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    27d4:	490d      	ldr	r1, [pc, #52]	; (280c <start_download+0xb4>)
    27d6:	480e      	ldr	r0, [pc, #56]	; (2810 <start_download+0xb8>)
    27d8:	2300      	movs	r3, #0
    27da:	9300      	str	r3, [sp, #0]
    27dc:	2300      	movs	r3, #0
    27de:	2201      	movs	r2, #1
    27e0:	4c0c      	ldr	r4, [pc, #48]	; (2814 <start_download+0xbc>)
    27e2:	47a0      	blx	r4
    27e4:	0003      	movs	r3, r0
    27e6:	607b      	str	r3, [r7, #4]
}
    27e8:	46bd      	mov	sp, r7
    27ea:	b003      	add	sp, #12
    27ec:	bd90      	pop	{r4, r7, pc}
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	00002431 	.word	0x00002431
    27f4:	00022634 	.word	0x00022634
    27f8:	0000a495 	.word	0x0000a495
    27fc:	00022660 	.word	0x00022660
    2800:	0002268c 	.word	0x0002268c
    2804:	000226b8 	.word	0x000226b8
    2808:	000226e4 	.word	0x000226e4
    280c:	00022710 	.word	0x00022710
    2810:	20004348 	.word	0x20004348
    2814:	0001d595 	.word	0x0001d595

00002818 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
    2818:	b5b0      	push	{r4, r5, r7, lr}
    281a:	b086      	sub	sp, #24
    281c:	af00      	add	r7, sp, #0
    281e:	6078      	str	r0, [r7, #4]
    2820:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
    2822:	687b      	ldr	r3, [r7, #4]
    2824:	2b00      	cmp	r3, #0
    2826:	d002      	beq.n	282e <store_file_packet+0x16>
    2828:	683b      	ldr	r3, [r7, #0]
    282a:	2b00      	cmp	r3, #0
    282c:	d105      	bne.n	283a <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
    282e:	4b58      	ldr	r3, [pc, #352]	; (2990 <store_file_packet+0x178>)
    2830:	0019      	movs	r1, r3
    2832:	2001      	movs	r0, #1
    2834:	4b57      	ldr	r3, [pc, #348]	; (2994 <store_file_packet+0x17c>)
    2836:	4798      	blx	r3
        return;
    2838:	e0a6      	b.n	2988 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
    283a:	2008      	movs	r0, #8
    283c:	4b56      	ldr	r3, [pc, #344]	; (2998 <store_file_packet+0x180>)
    283e:	4798      	blx	r3
    2840:	0003      	movs	r3, r0
    2842:	001a      	movs	r2, r3
    2844:	2301      	movs	r3, #1
    2846:	4053      	eors	r3, r2
    2848:	b2db      	uxtb	r3, r3
    284a:	2b00      	cmp	r3, #0
    284c:	d055      	beq.n	28fa <store_file_packet+0xe2>
        char *cp = NULL;
    284e:	2300      	movs	r3, #0
    2850:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    2852:	4b52      	ldr	r3, [pc, #328]	; (299c <store_file_packet+0x184>)
    2854:	2230      	movs	r2, #48	; 0x30
    2856:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
    2858:	4b50      	ldr	r3, [pc, #320]	; (299c <store_file_packet+0x184>)
    285a:	223a      	movs	r2, #58	; 0x3a
    285c:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
    285e:	4b50      	ldr	r3, [pc, #320]	; (29a0 <store_file_packet+0x188>)
    2860:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
    2862:	e002      	b.n	286a <store_file_packet+0x52>
            cp--;
    2864:	697b      	ldr	r3, [r7, #20]
    2866:	3b01      	subs	r3, #1
    2868:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
    286a:	697b      	ldr	r3, [r7, #20]
    286c:	781b      	ldrb	r3, [r3, #0]
    286e:	2b2f      	cmp	r3, #47	; 0x2f
    2870:	d1f8      	bne.n	2864 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
    2872:	697b      	ldr	r3, [r7, #20]
    2874:	0018      	movs	r0, r3
    2876:	4b4b      	ldr	r3, [pc, #300]	; (29a4 <store_file_packet+0x18c>)
    2878:	4798      	blx	r3
    287a:	0003      	movs	r3, r0
    287c:	2b01      	cmp	r3, #1
    287e:	d924      	bls.n	28ca <store_file_packet+0xb2>
            cp++;
    2880:	697b      	ldr	r3, [r7, #20]
    2882:	3301      	adds	r3, #1
    2884:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
    2886:	697a      	ldr	r2, [r7, #20]
    2888:	4b47      	ldr	r3, [pc, #284]	; (29a8 <store_file_packet+0x190>)
    288a:	0011      	movs	r1, r2
    288c:	0018      	movs	r0, r3
    288e:	4b47      	ldr	r3, [pc, #284]	; (29ac <store_file_packet+0x194>)
    2890:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    2892:	4942      	ldr	r1, [pc, #264]	; (299c <store_file_packet+0x184>)
    2894:	4b46      	ldr	r3, [pc, #280]	; (29b0 <store_file_packet+0x198>)
    2896:	2240      	movs	r2, #64	; 0x40
    2898:	0018      	movs	r0, r3
    289a:	4b46      	ldr	r3, [pc, #280]	; (29b4 <store_file_packet+0x19c>)
    289c:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
    289e:	4a3f      	ldr	r2, [pc, #252]	; (299c <store_file_packet+0x184>)
    28a0:	4b45      	ldr	r3, [pc, #276]	; (29b8 <store_file_packet+0x1a0>)
    28a2:	0019      	movs	r1, r3
    28a4:	2001      	movs	r0, #1
    28a6:	4b3b      	ldr	r3, [pc, #236]	; (2994 <store_file_packet+0x17c>)
    28a8:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    28aa:	2313      	movs	r3, #19
    28ac:	18fc      	adds	r4, r7, r3
    28ae:	493b      	ldr	r1, [pc, #236]	; (299c <store_file_packet+0x184>)
    28b0:	4b3f      	ldr	r3, [pc, #252]	; (29b0 <store_file_packet+0x198>)
    28b2:	220a      	movs	r2, #10
    28b4:	0018      	movs	r0, r3
    28b6:	4b41      	ldr	r3, [pc, #260]	; (29bc <store_file_packet+0x1a4>)
    28b8:	4798      	blx	r3
    28ba:	0003      	movs	r3, r0
    28bc:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
    28be:	2313      	movs	r3, #19
    28c0:	18fb      	adds	r3, r7, r3
    28c2:	781b      	ldrb	r3, [r3, #0]
    28c4:	2b00      	cmp	r3, #0
    28c6:	d012      	beq.n	28ee <store_file_packet+0xd6>
    28c8:	e008      	b.n	28dc <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
    28ca:	4b3d      	ldr	r3, [pc, #244]	; (29c0 <store_file_packet+0x1a8>)
    28cc:	0019      	movs	r1, r3
    28ce:	2001      	movs	r0, #1
    28d0:	4b30      	ldr	r3, [pc, #192]	; (2994 <store_file_packet+0x17c>)
    28d2:	4798      	blx	r3
            add_state(CANCELED);
    28d4:	2020      	movs	r0, #32
    28d6:	4b3b      	ldr	r3, [pc, #236]	; (29c4 <store_file_packet+0x1ac>)
    28d8:	4798      	blx	r3
            return;
    28da:	e055      	b.n	2988 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
    28dc:	2313      	movs	r3, #19
    28de:	18fb      	adds	r3, r7, r3
    28e0:	781a      	ldrb	r2, [r3, #0]
    28e2:	4b39      	ldr	r3, [pc, #228]	; (29c8 <store_file_packet+0x1b0>)
    28e4:	0019      	movs	r1, r3
    28e6:	2001      	movs	r0, #1
    28e8:	4b2a      	ldr	r3, [pc, #168]	; (2994 <store_file_packet+0x17c>)
    28ea:	4798      	blx	r3
            return;
    28ec:	e04c      	b.n	2988 <store_file_packet+0x170>
        }

        received_file_size = 0;
    28ee:	4b37      	ldr	r3, [pc, #220]	; (29cc <store_file_packet+0x1b4>)
    28f0:	2200      	movs	r2, #0
    28f2:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
    28f4:	2008      	movs	r0, #8
    28f6:	4b33      	ldr	r3, [pc, #204]	; (29c4 <store_file_packet+0x1ac>)
    28f8:	4798      	blx	r3
    }

    if (data != NULL) {
    28fa:	687b      	ldr	r3, [r7, #4]
    28fc:	2b00      	cmp	r3, #0
    28fe:	d043      	beq.n	2988 <store_file_packet+0x170>
        UINT wsize = 0;
    2900:	2300      	movs	r3, #0
    2902:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
    2904:	2313      	movs	r3, #19
    2906:	18fc      	adds	r4, r7, r3
    2908:	230c      	movs	r3, #12
    290a:	18fb      	adds	r3, r7, r3
    290c:	683a      	ldr	r2, [r7, #0]
    290e:	6879      	ldr	r1, [r7, #4]
    2910:	4827      	ldr	r0, [pc, #156]	; (29b0 <store_file_packet+0x198>)
    2912:	4d2f      	ldr	r5, [pc, #188]	; (29d0 <store_file_packet+0x1b8>)
    2914:	47a8      	blx	r5
    2916:	0003      	movs	r3, r0
    2918:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
    291a:	2313      	movs	r3, #19
    291c:	18fb      	adds	r3, r7, r3
    291e:	781b      	ldrb	r3, [r3, #0]
    2920:	2b00      	cmp	r3, #0
    2922:	d00c      	beq.n	293e <store_file_packet+0x126>
            f_close(&file_object);
    2924:	4b22      	ldr	r3, [pc, #136]	; (29b0 <store_file_packet+0x198>)
    2926:	0018      	movs	r0, r3
    2928:	4b2a      	ldr	r3, [pc, #168]	; (29d4 <store_file_packet+0x1bc>)
    292a:	4798      	blx	r3
            add_state(CANCELED);
    292c:	2020      	movs	r0, #32
    292e:	4b25      	ldr	r3, [pc, #148]	; (29c4 <store_file_packet+0x1ac>)
    2930:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
    2932:	4b29      	ldr	r3, [pc, #164]	; (29d8 <store_file_packet+0x1c0>)
    2934:	0019      	movs	r1, r3
    2936:	2001      	movs	r0, #1
    2938:	4b16      	ldr	r3, [pc, #88]	; (2994 <store_file_packet+0x17c>)
    293a:	4798      	blx	r3
            return;
    293c:	e024      	b.n	2988 <store_file_packet+0x170>
        }

        received_file_size += wsize;
    293e:	4b23      	ldr	r3, [pc, #140]	; (29cc <store_file_packet+0x1b4>)
    2940:	681a      	ldr	r2, [r3, #0]
    2942:	68fb      	ldr	r3, [r7, #12]
    2944:	18d2      	adds	r2, r2, r3
    2946:	4b21      	ldr	r3, [pc, #132]	; (29cc <store_file_packet+0x1b4>)
    2948:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    294a:	4b20      	ldr	r3, [pc, #128]	; (29cc <store_file_packet+0x1b4>)
    294c:	681a      	ldr	r2, [r3, #0]
    294e:	4b23      	ldr	r3, [pc, #140]	; (29dc <store_file_packet+0x1c4>)
    2950:	681b      	ldr	r3, [r3, #0]
    2952:	4923      	ldr	r1, [pc, #140]	; (29e0 <store_file_packet+0x1c8>)
    2954:	2001      	movs	r0, #1
    2956:	4c0f      	ldr	r4, [pc, #60]	; (2994 <store_file_packet+0x17c>)
    2958:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
    295a:	4b1c      	ldr	r3, [pc, #112]	; (29cc <store_file_packet+0x1b4>)
    295c:	681a      	ldr	r2, [r3, #0]
    295e:	4b1f      	ldr	r3, [pc, #124]	; (29dc <store_file_packet+0x1c4>)
    2960:	681b      	ldr	r3, [r3, #0]
    2962:	429a      	cmp	r2, r3
    2964:	d310      	bcc.n	2988 <store_file_packet+0x170>
            f_close(&file_object);
    2966:	4b12      	ldr	r3, [pc, #72]	; (29b0 <store_file_packet+0x198>)
    2968:	0018      	movs	r0, r3
    296a:	4b1a      	ldr	r3, [pc, #104]	; (29d4 <store_file_packet+0x1bc>)
    296c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
    296e:	4b1d      	ldr	r3, [pc, #116]	; (29e4 <store_file_packet+0x1cc>)
    2970:	0019      	movs	r1, r3
    2972:	2001      	movs	r0, #1
    2974:	4b07      	ldr	r3, [pc, #28]	; (2994 <store_file_packet+0x17c>)
    2976:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
    2978:	2100      	movs	r1, #0
    297a:	2017      	movs	r0, #23
    297c:	4b1a      	ldr	r3, [pc, #104]	; (29e8 <store_file_packet+0x1d0>)
    297e:	4798      	blx	r3
            add_state(COMPLETED);
    2980:	2010      	movs	r0, #16
    2982:	4b10      	ldr	r3, [pc, #64]	; (29c4 <store_file_packet+0x1ac>)
    2984:	4798      	blx	r3
            return;
    2986:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    2988:	46bd      	mov	sp, r7
    298a:	b006      	add	sp, #24
    298c:	bdb0      	pop	{r4, r5, r7, pc}
    298e:	46c0      	nop			; (mov r8, r8)
    2990:	00022730 	.word	0x00022730
    2994:	0000a495 	.word	0x0000a495
    2998:	00002431 	.word	0x00002431
    299c:	200000b0 	.word	0x200000b0
    29a0:	0002272d 	.word	0x0002272d
    29a4:	000212d7 	.word	0x000212d7
    29a8:	200000b2 	.word	0x200000b2
    29ac:	0002128b 	.word	0x0002128b
    29b0:	200006e0 	.word	0x200006e0
    29b4:	000024b5 	.word	0x000024b5
    29b8:	00022794 	.word	0x00022794
    29bc:	00019f41 	.word	0x00019f41
    29c0:	00022754 	.word	0x00022754
    29c4:	00002409 	.word	0x00002409
    29c8:	000227bc 	.word	0x000227bc
    29cc:	20000708 	.word	0x20000708
    29d0:	0001a471 	.word	0x0001a471
    29d4:	0001a941 	.word	0x0001a941
    29d8:	000227f0 	.word	0x000227f0
    29dc:	20000704 	.word	0x20000704
    29e0:	0002282c 	.word	0x0002282c
    29e4:	00022860 	.word	0x00022860
    29e8:	0000236d 	.word	0x0000236d

000029ec <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
    29ec:	b590      	push	{r4, r7, lr}
    29ee:	b085      	sub	sp, #20
    29f0:	af00      	add	r7, sp, #0
    29f2:	60f8      	str	r0, [r7, #12]
    29f4:	60b9      	str	r1, [r7, #8]
    29f6:	607a      	str	r2, [r7, #4]
    switch (type) {
    29f8:	68bb      	ldr	r3, [r7, #8]
    29fa:	2b04      	cmp	r3, #4
    29fc:	d900      	bls.n	2a00 <http_client_callback+0x14>
    29fe:	e077      	b.n	2af0 <http_client_callback+0x104>
    2a00:	68bb      	ldr	r3, [r7, #8]
    2a02:	009a      	lsls	r2, r3, #2
    2a04:	4b3c      	ldr	r3, [pc, #240]	; (2af8 <http_client_callback+0x10c>)
    2a06:	18d3      	adds	r3, r2, r3
    2a08:	681b      	ldr	r3, [r3, #0]
    2a0a:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
    2a0c:	4b3b      	ldr	r3, [pc, #236]	; (2afc <http_client_callback+0x110>)
    2a0e:	0019      	movs	r1, r3
    2a10:	2001      	movs	r0, #1
    2a12:	4b3b      	ldr	r3, [pc, #236]	; (2b00 <http_client_callback+0x114>)
    2a14:	4798      	blx	r3
            break;
    2a16:	e06b      	b.n	2af0 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
    2a18:	4b3a      	ldr	r3, [pc, #232]	; (2b04 <http_client_callback+0x118>)
    2a1a:	0019      	movs	r1, r3
    2a1c:	2001      	movs	r0, #1
    2a1e:	4b38      	ldr	r3, [pc, #224]	; (2b00 <http_client_callback+0x114>)
    2a20:	4798      	blx	r3
            add_state(GET_REQUESTED);
    2a22:	2004      	movs	r0, #4
    2a24:	4b38      	ldr	r3, [pc, #224]	; (2b08 <http_client_callback+0x11c>)
    2a26:	4798      	blx	r3
            break;
    2a28:	e062      	b.n	2af0 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
    2a2a:	687b      	ldr	r3, [r7, #4]
    2a2c:	881b      	ldrh	r3, [r3, #0]
    2a2e:	001a      	movs	r2, r3
    2a30:	687b      	ldr	r3, [r7, #4]
    2a32:	685b      	ldr	r3, [r3, #4]
    2a34:	4935      	ldr	r1, [pc, #212]	; (2b0c <http_client_callback+0x120>)
    2a36:	2001      	movs	r0, #1
    2a38:	4c31      	ldr	r4, [pc, #196]	; (2b00 <http_client_callback+0x114>)
    2a3a:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	881b      	ldrh	r3, [r3, #0]
    2a40:	2bc8      	cmp	r3, #200	; 0xc8
    2a42:	d10d      	bne.n	2a60 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	685a      	ldr	r2, [r3, #4]
    2a48:	4b31      	ldr	r3, [pc, #196]	; (2b10 <http_client_callback+0x124>)
    2a4a:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
    2a4c:	4b31      	ldr	r3, [pc, #196]	; (2b14 <http_client_callback+0x128>)
    2a4e:	2200      	movs	r2, #0
    2a50:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	685a      	ldr	r2, [r3, #4]
    2a56:	2380      	movs	r3, #128	; 0x80
    2a58:	009b      	lsls	r3, r3, #2
    2a5a:	429a      	cmp	r2, r3
    2a5c:	d843      	bhi.n	2ae6 <http_client_callback+0xfa>
    2a5e:	e003      	b.n	2a68 <http_client_callback+0x7c>
                add_state(CANCELED);
    2a60:	2020      	movs	r0, #32
    2a62:	4b29      	ldr	r3, [pc, #164]	; (2b08 <http_client_callback+0x11c>)
    2a64:	4798      	blx	r3
                return;
    2a66:	e043      	b.n	2af0 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
    2a68:	687b      	ldr	r3, [r7, #4]
    2a6a:	689a      	ldr	r2, [r3, #8]
    2a6c:	687b      	ldr	r3, [r7, #4]
    2a6e:	685b      	ldr	r3, [r3, #4]
    2a70:	0019      	movs	r1, r3
    2a72:	0010      	movs	r0, r2
    2a74:	4b28      	ldr	r3, [pc, #160]	; (2b18 <http_client_callback+0x12c>)
    2a76:	4798      	blx	r3
                add_state(COMPLETED);
    2a78:	2010      	movs	r0, #16
    2a7a:	4b23      	ldr	r3, [pc, #140]	; (2b08 <http_client_callback+0x11c>)
    2a7c:	4798      	blx	r3
            }
            break;
    2a7e:	e032      	b.n	2ae6 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    2a80:	687b      	ldr	r3, [r7, #4]
    2a82:	685a      	ldr	r2, [r3, #4]
    2a84:	687b      	ldr	r3, [r7, #4]
    2a86:	681b      	ldr	r3, [r3, #0]
    2a88:	0019      	movs	r1, r3
    2a8a:	0010      	movs	r0, r2
    2a8c:	4b22      	ldr	r3, [pc, #136]	; (2b18 <http_client_callback+0x12c>)
    2a8e:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
    2a90:	687b      	ldr	r3, [r7, #4]
    2a92:	7a1b      	ldrb	r3, [r3, #8]
    2a94:	2b00      	cmp	r3, #0
    2a96:	d028      	beq.n	2aea <http_client_callback+0xfe>
                add_state(COMPLETED);
    2a98:	2010      	movs	r0, #16
    2a9a:	4b1b      	ldr	r3, [pc, #108]	; (2b08 <http_client_callback+0x11c>)
    2a9c:	4798      	blx	r3
            }

            break;
    2a9e:	e024      	b.n	2aea <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	681a      	ldr	r2, [r3, #0]
    2aa4:	4b1d      	ldr	r3, [pc, #116]	; (2b1c <http_client_callback+0x130>)
    2aa6:	0019      	movs	r1, r3
    2aa8:	2001      	movs	r0, #1
    2aaa:	4b15      	ldr	r3, [pc, #84]	; (2b00 <http_client_callback+0x114>)
    2aac:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
    2aae:	687b      	ldr	r3, [r7, #4]
    2ab0:	681b      	ldr	r3, [r3, #0]
    2ab2:	330b      	adds	r3, #11
    2ab4:	d11b      	bne.n	2aee <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
    2ab6:	2008      	movs	r0, #8
    2ab8:	4b19      	ldr	r3, [pc, #100]	; (2b20 <http_client_callback+0x134>)
    2aba:	4798      	blx	r3
    2abc:	1e03      	subs	r3, r0, #0
    2abe:	d006      	beq.n	2ace <http_client_callback+0xe2>
                    f_close(&file_object);
    2ac0:	4b18      	ldr	r3, [pc, #96]	; (2b24 <http_client_callback+0x138>)
    2ac2:	0018      	movs	r0, r3
    2ac4:	4b18      	ldr	r3, [pc, #96]	; (2b28 <http_client_callback+0x13c>)
    2ac6:	4798      	blx	r3
                    clear_state(DOWNLOADING);
    2ac8:	2008      	movs	r0, #8
    2aca:	4b18      	ldr	r3, [pc, #96]	; (2b2c <http_client_callback+0x140>)
    2acc:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
    2ace:	2004      	movs	r0, #4
    2ad0:	4b13      	ldr	r3, [pc, #76]	; (2b20 <http_client_callback+0x134>)
    2ad2:	4798      	blx	r3
    2ad4:	1e03      	subs	r3, r0, #0
    2ad6:	d002      	beq.n	2ade <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
    2ad8:	2004      	movs	r0, #4
    2ada:	4b14      	ldr	r3, [pc, #80]	; (2b2c <http_client_callback+0x140>)
    2adc:	4798      	blx	r3
                }

                start_download();
    2ade:	4b14      	ldr	r3, [pc, #80]	; (2b30 <http_client_callback+0x144>)
    2ae0:	4798      	blx	r3
            }

            break;
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	e003      	b.n	2aee <http_client_callback+0x102>
            break;
    2ae6:	46c0      	nop			; (mov r8, r8)
    2ae8:	e002      	b.n	2af0 <http_client_callback+0x104>
            break;
    2aea:	46c0      	nop			; (mov r8, r8)
    2aec:	e000      	b.n	2af0 <http_client_callback+0x104>
            break;
    2aee:	46c0      	nop			; (mov r8, r8)
    }
}
    2af0:	46bd      	mov	sp, r7
    2af2:	b005      	add	sp, #20
    2af4:	bd90      	pop	{r4, r7, pc}
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	00022fa0 	.word	0x00022fa0
    2afc:	00022894 	.word	0x00022894
    2b00:	0000a495 	.word	0x0000a495
    2b04:	000228cc 	.word	0x000228cc
    2b08:	00002409 	.word	0x00002409
    2b0c:	000228f8 	.word	0x000228f8
    2b10:	20000704 	.word	0x20000704
    2b14:	20000708 	.word	0x20000708
    2b18:	00002819 	.word	0x00002819
    2b1c:	00022934 	.word	0x00022934
    2b20:	00002431 	.word	0x00002431
    2b24:	200006e0 	.word	0x200006e0
    2b28:	0001a941 	.word	0x0001a941
    2b2c:	000023d5 	.word	0x000023d5
    2b30:	00002759 	.word	0x00002759

00002b34 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    2b34:	b580      	push	{r7, lr}
    2b36:	b082      	sub	sp, #8
    2b38:	af00      	add	r7, sp, #0
    2b3a:	603a      	str	r2, [r7, #0]
    2b3c:	1dfb      	adds	r3, r7, #7
    2b3e:	1c02      	adds	r2, r0, #0
    2b40:	701a      	strb	r2, [r3, #0]
    2b42:	1dbb      	adds	r3, r7, #6
    2b44:	1c0a      	adds	r2, r1, #0
    2b46:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
    2b48:	683a      	ldr	r2, [r7, #0]
    2b4a:	1dbb      	adds	r3, r7, #6
    2b4c:	7819      	ldrb	r1, [r3, #0]
    2b4e:	1dfb      	adds	r3, r7, #7
    2b50:	781b      	ldrb	r3, [r3, #0]
    2b52:	b25b      	sxtb	r3, r3
    2b54:	0018      	movs	r0, r3
    2b56:	4b03      	ldr	r3, [pc, #12]	; (2b64 <socket_cb+0x30>)
    2b58:	4798      	blx	r3
}
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	46bd      	mov	sp, r7
    2b5e:	b002      	add	sp, #8
    2b60:	bd80      	pop	{r7, pc}
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	0001d2a5 	.word	0x0001d2a5

00002b68 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    2b68:	b5b0      	push	{r4, r5, r7, lr}
    2b6a:	b086      	sub	sp, #24
    2b6c:	af04      	add	r7, sp, #16
    2b6e:	6078      	str	r0, [r7, #4]
    2b70:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
    2b72:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
    2b74:	22ff      	movs	r2, #255	; 0xff
    2b76:	4013      	ands	r3, r2
    2b78:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
    2b7a:	683b      	ldr	r3, [r7, #0]
    2b7c:	0a1b      	lsrs	r3, r3, #8
    2b7e:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
    2b80:	23ff      	movs	r3, #255	; 0xff
    2b82:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
    2b84:	683a      	ldr	r2, [r7, #0]
    2b86:	0c12      	lsrs	r2, r2, #16
    2b88:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
    2b8a:	22ff      	movs	r2, #255	; 0xff
    2b8c:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
    2b8e:	6839      	ldr	r1, [r7, #0]
    2b90:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
    2b92:	000d      	movs	r5, r1
    2b94:	6878      	ldr	r0, [r7, #4]
    2b96:	4909      	ldr	r1, [pc, #36]	; (2bbc <resolve_cb+0x54>)
    2b98:	9502      	str	r5, [sp, #8]
    2b9a:	9201      	str	r2, [sp, #4]
    2b9c:	9300      	str	r3, [sp, #0]
    2b9e:	0023      	movs	r3, r4
    2ba0:	0002      	movs	r2, r0
    2ba2:	2001      	movs	r0, #1
    2ba4:	4c06      	ldr	r4, [pc, #24]	; (2bc0 <resolve_cb+0x58>)
    2ba6:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    2ba8:	683a      	ldr	r2, [r7, #0]
    2baa:	687b      	ldr	r3, [r7, #4]
    2bac:	0011      	movs	r1, r2
    2bae:	0018      	movs	r0, r3
    2bb0:	4b04      	ldr	r3, [pc, #16]	; (2bc4 <resolve_cb+0x5c>)
    2bb2:	4798      	blx	r3
}
    2bb4:	46c0      	nop			; (mov r8, r8)
    2bb6:	46bd      	mov	sp, r7
    2bb8:	b002      	add	sp, #8
    2bba:	bdb0      	pop	{r4, r5, r7, pc}
    2bbc:	00022964 	.word	0x00022964
    2bc0:	0000a495 	.word	0x0000a495
    2bc4:	0001d409 	.word	0x0001d409

00002bc8 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    2bc8:	b590      	push	{r4, r7, lr}
    2bca:	b087      	sub	sp, #28
    2bcc:	af02      	add	r7, sp, #8
    2bce:	0002      	movs	r2, r0
    2bd0:	6039      	str	r1, [r7, #0]
    2bd2:	1dfb      	adds	r3, r7, #7
    2bd4:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
    2bd6:	1dfb      	adds	r3, r7, #7
    2bd8:	781b      	ldrb	r3, [r3, #0]
    2bda:	2b2c      	cmp	r3, #44	; 0x2c
    2bdc:	d002      	beq.n	2be4 <wifi_cb+0x1c>
    2bde:	2b32      	cmp	r3, #50	; 0x32
    2be0:	d03d      	beq.n	2c5e <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
    2be2:	e06f      	b.n	2cc4 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    2be4:	683b      	ldr	r3, [r7, #0]
    2be6:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    2be8:	68fb      	ldr	r3, [r7, #12]
    2bea:	781b      	ldrb	r3, [r3, #0]
    2bec:	2b01      	cmp	r3, #1
    2bee:	d107      	bne.n	2c00 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
    2bf0:	4b36      	ldr	r3, [pc, #216]	; (2ccc <wifi_cb+0x104>)
    2bf2:	0019      	movs	r1, r3
    2bf4:	2001      	movs	r0, #1
    2bf6:	4b36      	ldr	r3, [pc, #216]	; (2cd0 <wifi_cb+0x108>)
    2bf8:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
    2bfa:	4b36      	ldr	r3, [pc, #216]	; (2cd4 <wifi_cb+0x10c>)
    2bfc:	4798      	blx	r3
            break;
    2bfe:	e05e      	b.n	2cbe <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    2c00:	68fb      	ldr	r3, [r7, #12]
    2c02:	781b      	ldrb	r3, [r3, #0]
    2c04:	2b00      	cmp	r3, #0
    2c06:	d15a      	bne.n	2cbe <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    2c08:	4b33      	ldr	r3, [pc, #204]	; (2cd8 <wifi_cb+0x110>)
    2c0a:	0019      	movs	r1, r3
    2c0c:	2001      	movs	r0, #1
    2c0e:	4b30      	ldr	r3, [pc, #192]	; (2cd0 <wifi_cb+0x108>)
    2c10:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
    2c12:	2002      	movs	r0, #2
    2c14:	4b31      	ldr	r3, [pc, #196]	; (2cdc <wifi_cb+0x114>)
    2c16:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
    2c18:	2008      	movs	r0, #8
    2c1a:	4b31      	ldr	r3, [pc, #196]	; (2ce0 <wifi_cb+0x118>)
    2c1c:	4798      	blx	r3
    2c1e:	1e03      	subs	r3, r0, #0
    2c20:	d006      	beq.n	2c30 <wifi_cb+0x68>
                    f_close(&file_object);
    2c22:	4b30      	ldr	r3, [pc, #192]	; (2ce4 <wifi_cb+0x11c>)
    2c24:	0018      	movs	r0, r3
    2c26:	4b30      	ldr	r3, [pc, #192]	; (2ce8 <wifi_cb+0x120>)
    2c28:	4798      	blx	r3
                    clear_state(DOWNLOADING);
    2c2a:	2008      	movs	r0, #8
    2c2c:	4b2b      	ldr	r3, [pc, #172]	; (2cdc <wifi_cb+0x114>)
    2c2e:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
    2c30:	2004      	movs	r0, #4
    2c32:	4b2b      	ldr	r3, [pc, #172]	; (2ce0 <wifi_cb+0x118>)
    2c34:	4798      	blx	r3
    2c36:	1e03      	subs	r3, r0, #0
    2c38:	d002      	beq.n	2c40 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
    2c3a:	2004      	movs	r0, #4
    2c3c:	4b27      	ldr	r3, [pc, #156]	; (2cdc <wifi_cb+0x114>)
    2c3e:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
    2c40:	4b2a      	ldr	r3, [pc, #168]	; (2cec <wifi_cb+0x124>)
    2c42:	2101      	movs	r1, #1
    2c44:	0018      	movs	r0, r3
    2c46:	4b2a      	ldr	r3, [pc, #168]	; (2cf0 <wifi_cb+0x128>)
    2c48:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    2c4a:	4a2a      	ldr	r2, [pc, #168]	; (2cf4 <wifi_cb+0x12c>)
    2c4c:	482a      	ldr	r0, [pc, #168]	; (2cf8 <wifi_cb+0x130>)
    2c4e:	23ff      	movs	r3, #255	; 0xff
    2c50:	9300      	str	r3, [sp, #0]
    2c52:	0013      	movs	r3, r2
    2c54:	2202      	movs	r2, #2
    2c56:	2111      	movs	r1, #17
    2c58:	4c28      	ldr	r4, [pc, #160]	; (2cfc <wifi_cb+0x134>)
    2c5a:	47a0      	blx	r4
            break;
    2c5c:	e02f      	b.n	2cbe <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    2c5e:	683b      	ldr	r3, [r7, #0]
    2c60:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    2c62:	68bb      	ldr	r3, [r7, #8]
    2c64:	781b      	ldrb	r3, [r3, #0]
    2c66:	0018      	movs	r0, r3
    2c68:	68bb      	ldr	r3, [r7, #8]
    2c6a:	3301      	adds	r3, #1
    2c6c:	781b      	ldrb	r3, [r3, #0]
    2c6e:	001c      	movs	r4, r3
    2c70:	68bb      	ldr	r3, [r7, #8]
    2c72:	3302      	adds	r3, #2
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	001a      	movs	r2, r3
    2c78:	68bb      	ldr	r3, [r7, #8]
    2c7a:	3303      	adds	r3, #3
    2c7c:	781b      	ldrb	r3, [r3, #0]
    2c7e:	4920      	ldr	r1, [pc, #128]	; (2d00 <wifi_cb+0x138>)
    2c80:	9301      	str	r3, [sp, #4]
    2c82:	9200      	str	r2, [sp, #0]
    2c84:	0023      	movs	r3, r4
    2c86:	0002      	movs	r2, r0
    2c88:	2001      	movs	r0, #1
    2c8a:	4c11      	ldr	r4, [pc, #68]	; (2cd0 <wifi_cb+0x108>)
    2c8c:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
    2c8e:	2002      	movs	r0, #2
    2c90:	4b1c      	ldr	r3, [pc, #112]	; (2d04 <wifi_cb+0x13c>)
    2c92:	4798      	blx	r3
            if (do_download_flag == 1) {
    2c94:	4b1c      	ldr	r3, [pc, #112]	; (2d08 <wifi_cb+0x140>)
    2c96:	781b      	ldrb	r3, [r3, #0]
    2c98:	2b01      	cmp	r3, #1
    2c9a:	d102      	bne.n	2ca2 <wifi_cb+0xda>
                start_download();
    2c9c:	4b1b      	ldr	r3, [pc, #108]	; (2d0c <wifi_cb+0x144>)
    2c9e:	4798      	blx	r3
        } break;
    2ca0:	e00f      	b.n	2cc2 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    2ca2:	4a1b      	ldr	r2, [pc, #108]	; (2d10 <wifi_cb+0x148>)
    2ca4:	4b11      	ldr	r3, [pc, #68]	; (2cec <wifi_cb+0x124>)
    2ca6:	0011      	movs	r1, r2
    2ca8:	0018      	movs	r0, r3
    2caa:	4b1a      	ldr	r3, [pc, #104]	; (2d14 <wifi_cb+0x14c>)
    2cac:	4798      	blx	r3
    2cae:	1e03      	subs	r3, r0, #0
    2cb0:	d007      	beq.n	2cc2 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    2cb2:	4b19      	ldr	r3, [pc, #100]	; (2d18 <wifi_cb+0x150>)
    2cb4:	0019      	movs	r1, r3
    2cb6:	2001      	movs	r0, #1
    2cb8:	4b05      	ldr	r3, [pc, #20]	; (2cd0 <wifi_cb+0x108>)
    2cba:	4798      	blx	r3
        } break;
    2cbc:	e001      	b.n	2cc2 <wifi_cb+0xfa>
            break;
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	e000      	b.n	2cc4 <wifi_cb+0xfc>
        } break;
    2cc2:	46c0      	nop			; (mov r8, r8)
    }
}
    2cc4:	46c0      	nop			; (mov r8, r8)
    2cc6:	46bd      	mov	sp, r7
    2cc8:	b005      	add	sp, #20
    2cca:	bd90      	pop	{r4, r7, pc}
    2ccc:	00022994 	.word	0x00022994
    2cd0:	0000a495 	.word	0x0000a495
    2cd4:	0000ea75 	.word	0x0000ea75
    2cd8:	000229b4 	.word	0x000229b4
    2cdc:	000023d5 	.word	0x000023d5
    2ce0:	00002431 	.word	0x00002431
    2ce4:	200006e0 	.word	0x200006e0
    2ce8:	0001a941 	.word	0x0001a941
    2cec:	2000070c 	.word	0x2000070c
    2cf0:	0001bf51 	.word	0x0001bf51
    2cf4:	000229d8 	.word	0x000229d8
    2cf8:	000229e8 	.word	0x000229e8
    2cfc:	0000e5a1 	.word	0x0000e5a1
    2d00:	000229fc 	.word	0x000229fc
    2d04:	00002409 	.word	0x00002409
    2d08:	200004ac 	.word	0x200004ac
    2d0c:	00002759 	.word	0x00002759
    2d10:	00022618 	.word	0x00022618
    2d14:	0001be1d 	.word	0x0001be1d
    2d18:	00022a24 	.word	0x00022a24

00002d1c <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
    2d1c:	b590      	push	{r4, r7, lr}
    2d1e:	b083      	sub	sp, #12
    2d20:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
    2d22:	4b29      	ldr	r3, [pc, #164]	; (2dc8 <init_storage+0xac>)
    2d24:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
    2d26:	4b29      	ldr	r3, [pc, #164]	; (2dcc <init_storage+0xb0>)
    2d28:	0019      	movs	r1, r3
    2d2a:	2001      	movs	r0, #1
    2d2c:	4b28      	ldr	r3, [pc, #160]	; (2dd0 <init_storage+0xb4>)
    2d2e:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
    2d30:	1dfc      	adds	r4, r7, #7
    2d32:	2000      	movs	r0, #0
    2d34:	4b27      	ldr	r3, [pc, #156]	; (2dd4 <init_storage+0xb8>)
    2d36:	4798      	blx	r3
    2d38:	0003      	movs	r3, r0
    2d3a:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
    2d3c:	1dfb      	adds	r3, r7, #7
    2d3e:	781b      	ldrb	r3, [r3, #0]
    2d40:	2b01      	cmp	r3, #1
    2d42:	d110      	bne.n	2d66 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
    2d44:	4b24      	ldr	r3, [pc, #144]	; (2dd8 <init_storage+0xbc>)
    2d46:	0019      	movs	r1, r3
    2d48:	2001      	movs	r0, #1
    2d4a:	4b21      	ldr	r3, [pc, #132]	; (2dd0 <init_storage+0xb4>)
    2d4c:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
    2d4e:	4b23      	ldr	r3, [pc, #140]	; (2ddc <init_storage+0xc0>)
    2d50:	0019      	movs	r1, r3
    2d52:	2001      	movs	r0, #1
    2d54:	4b1e      	ldr	r3, [pc, #120]	; (2dd0 <init_storage+0xb4>)
    2d56:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    2d58:	46c0      	nop			; (mov r8, r8)
    2d5a:	2000      	movs	r0, #0
    2d5c:	4b20      	ldr	r3, [pc, #128]	; (2de0 <init_storage+0xc4>)
    2d5e:	4798      	blx	r3
    2d60:	0003      	movs	r3, r0
    2d62:	2b02      	cmp	r3, #2
    2d64:	d1f9      	bne.n	2d5a <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
    2d66:	1dfb      	adds	r3, r7, #7
    2d68:	781b      	ldrb	r3, [r3, #0]
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	d1e0      	bne.n	2d30 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
    2d6e:	4b1d      	ldr	r3, [pc, #116]	; (2de4 <init_storage+0xc8>)
    2d70:	0019      	movs	r1, r3
    2d72:	2001      	movs	r0, #1
    2d74:	4b16      	ldr	r3, [pc, #88]	; (2dd0 <init_storage+0xb4>)
    2d76:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
    2d78:	238c      	movs	r3, #140	; 0x8c
    2d7a:	009a      	lsls	r2, r3, #2
    2d7c:	4b1a      	ldr	r3, [pc, #104]	; (2de8 <init_storage+0xcc>)
    2d7e:	2100      	movs	r1, #0
    2d80:	0018      	movs	r0, r3
    2d82:	4b1a      	ldr	r3, [pc, #104]	; (2dec <init_storage+0xd0>)
    2d84:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    2d86:	1dbc      	adds	r4, r7, #6
    2d88:	4b17      	ldr	r3, [pc, #92]	; (2de8 <init_storage+0xcc>)
    2d8a:	0019      	movs	r1, r3
    2d8c:	2000      	movs	r0, #0
    2d8e:	4b18      	ldr	r3, [pc, #96]	; (2df0 <init_storage+0xd4>)
    2d90:	4798      	blx	r3
    2d92:	0003      	movs	r3, r0
    2d94:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
    2d96:	1dbb      	adds	r3, r7, #6
    2d98:	781b      	ldrb	r3, [r3, #0]
    2d9a:	2b0b      	cmp	r3, #11
    2d9c:	d107      	bne.n	2dae <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
    2d9e:	1dbb      	adds	r3, r7, #6
    2da0:	781a      	ldrb	r2, [r3, #0]
    2da2:	4b14      	ldr	r3, [pc, #80]	; (2df4 <init_storage+0xd8>)
    2da4:	0019      	movs	r1, r3
    2da6:	2001      	movs	r0, #1
    2da8:	4b09      	ldr	r3, [pc, #36]	; (2dd0 <init_storage+0xb4>)
    2daa:	4798      	blx	r3
            return;
    2dac:	e008      	b.n	2dc0 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
    2dae:	4b12      	ldr	r3, [pc, #72]	; (2df8 <init_storage+0xdc>)
    2db0:	0019      	movs	r1, r3
    2db2:	2001      	movs	r0, #1
    2db4:	4b06      	ldr	r3, [pc, #24]	; (2dd0 <init_storage+0xb4>)
    2db6:	4798      	blx	r3
        add_state(STORAGE_READY);
    2db8:	2001      	movs	r0, #1
    2dba:	4b10      	ldr	r3, [pc, #64]	; (2dfc <init_storage+0xe0>)
    2dbc:	4798      	blx	r3
        return;
    2dbe:	46c0      	nop			; (mov r8, r8)
    }
}
    2dc0:	46bd      	mov	sp, r7
    2dc2:	b003      	add	sp, #12
    2dc4:	bd90      	pop	{r4, r7, pc}
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	0000b2ad 	.word	0x0000b2ad
    2dcc:	00022a48 	.word	0x00022a48
    2dd0:	0000a495 	.word	0x0000a495
    2dd4:	0000b789 	.word	0x0000b789
    2dd8:	00022a80 	.word	0x00022a80
    2ddc:	00022aa8 	.word	0x00022aa8
    2de0:	0000b2fd 	.word	0x0000b2fd
    2de4:	00022adc 	.word	0x00022adc
    2de8:	200004b0 	.word	0x200004b0
    2dec:	00020f1f 	.word	0x00020f1f
    2df0:	00019ee9 	.word	0x00019ee9
    2df4:	00022b00 	.word	0x00022b00
    2df8:	00022b30 	.word	0x00022b30
    2dfc:	00002409 	.word	0x00002409

00002e00 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
    2e00:	b580      	push	{r7, lr}
    2e02:	b082      	sub	sp, #8
    2e04:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
    2e06:	1d3b      	adds	r3, r7, #4
    2e08:	0018      	movs	r0, r3
    2e0a:	4b08      	ldr	r3, [pc, #32]	; (2e2c <configure_timer+0x2c>)
    2e0c:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
    2e0e:	1d3a      	adds	r2, r7, #4
    2e10:	4b07      	ldr	r3, [pc, #28]	; (2e30 <configure_timer+0x30>)
    2e12:	0011      	movs	r1, r2
    2e14:	0018      	movs	r0, r3
    2e16:	4b07      	ldr	r3, [pc, #28]	; (2e34 <configure_timer+0x34>)
    2e18:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
    2e1a:	4b05      	ldr	r3, [pc, #20]	; (2e30 <configure_timer+0x30>)
    2e1c:	0018      	movs	r0, r3
    2e1e:	4b06      	ldr	r3, [pc, #24]	; (2e38 <configure_timer+0x38>)
    2e20:	4798      	blx	r3
}
    2e22:	46c0      	nop			; (mov r8, r8)
    2e24:	46bd      	mov	sp, r7
    2e26:	b002      	add	sp, #8
    2e28:	bd80      	pop	{r7, pc}
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	0001ea39 	.word	0x0001ea39
    2e30:	200042f0 	.word	0x200042f0
    2e34:	0001ea5d 	.word	0x0001ea5d
    2e38:	0001eb49 	.word	0x0001eb49

00002e3c <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
    2e3c:	b580      	push	{r7, lr}
    2e3e:	b088      	sub	sp, #32
    2e40:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
    2e42:	003b      	movs	r3, r7
    2e44:	0018      	movs	r0, r3
    2e46:	4b16      	ldr	r3, [pc, #88]	; (2ea0 <configure_http_client+0x64>)
    2e48:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    2e4a:	003b      	movs	r3, r7
    2e4c:	2280      	movs	r2, #128	; 0x80
    2e4e:	0092      	lsls	r2, r2, #2
    2e50:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
    2e52:	003b      	movs	r3, r7
    2e54:	4a13      	ldr	r2, [pc, #76]	; (2ea4 <configure_http_client+0x68>)
    2e56:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
    2e58:	003b      	movs	r3, r7
    2e5a:	22bc      	movs	r2, #188	; 0xbc
    2e5c:	32ff      	adds	r2, #255	; 0xff
    2e5e:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
    2e60:	003b      	movs	r3, r7
    2e62:	2201      	movs	r2, #1
    2e64:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
    2e66:	003a      	movs	r2, r7
    2e68:	4b0f      	ldr	r3, [pc, #60]	; (2ea8 <configure_http_client+0x6c>)
    2e6a:	0011      	movs	r1, r2
    2e6c:	0018      	movs	r0, r3
    2e6e:	4b0f      	ldr	r3, [pc, #60]	; (2eac <configure_http_client+0x70>)
    2e70:	4798      	blx	r3
    2e72:	0003      	movs	r3, r0
    2e74:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
    2e76:	69fb      	ldr	r3, [r7, #28]
    2e78:	2b00      	cmp	r3, #0
    2e7a:	da06      	bge.n	2e8a <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    2e7c:	69fa      	ldr	r2, [r7, #28]
    2e7e:	4b0c      	ldr	r3, [pc, #48]	; (2eb0 <configure_http_client+0x74>)
    2e80:	0019      	movs	r1, r3
    2e82:	2001      	movs	r0, #1
    2e84:	4b0b      	ldr	r3, [pc, #44]	; (2eb4 <configure_http_client+0x78>)
    2e86:	4798      	blx	r3
        while (1) {
    2e88:	e7fe      	b.n	2e88 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
    2e8a:	4a0b      	ldr	r2, [pc, #44]	; (2eb8 <configure_http_client+0x7c>)
    2e8c:	4b06      	ldr	r3, [pc, #24]	; (2ea8 <configure_http_client+0x6c>)
    2e8e:	0011      	movs	r1, r2
    2e90:	0018      	movs	r0, r3
    2e92:	4b0a      	ldr	r3, [pc, #40]	; (2ebc <configure_http_client+0x80>)
    2e94:	4798      	blx	r3
}
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	46bd      	mov	sp, r7
    2e9a:	b008      	add	sp, #32
    2e9c:	bd80      	pop	{r7, pc}
    2e9e:	46c0      	nop			; (mov r8, r8)
    2ea0:	0001d0cd 	.word	0x0001d0cd
    2ea4:	200042f0 	.word	0x200042f0
    2ea8:	20004348 	.word	0x20004348
    2eac:	0001d119 	.word	0x0001d119
    2eb0:	00022b54 	.word	0x00022b54
    2eb4:	0000a495 	.word	0x0000a495
    2eb8:	000029ed 	.word	0x000029ed
    2ebc:	0001d205 	.word	0x0001d205

00002ec0 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    2ec0:	b580      	push	{r7, lr}
    2ec2:	b082      	sub	sp, #8
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	603a      	str	r2, [r7, #0]
    2ec8:	1dfb      	adds	r3, r7, #7
    2eca:	1c02      	adds	r2, r0, #0
    2ecc:	701a      	strb	r2, [r3, #0]
    2ece:	1dbb      	adds	r3, r7, #6
    2ed0:	1c0a      	adds	r2, r1, #0
    2ed2:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
    2ed4:	683a      	ldr	r2, [r7, #0]
    2ed6:	1dbb      	adds	r3, r7, #6
    2ed8:	7819      	ldrb	r1, [r3, #0]
    2eda:	1dfb      	adds	r3, r7, #7
    2edc:	781b      	ldrb	r3, [r3, #0]
    2ede:	b25b      	sxtb	r3, r3
    2ee0:	0018      	movs	r0, r3
    2ee2:	4b03      	ldr	r3, [pc, #12]	; (2ef0 <socket_event_handler+0x30>)
    2ee4:	4798      	blx	r3
}
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	46bd      	mov	sp, r7
    2eea:	b002      	add	sp, #8
    2eec:	bd80      	pop	{r7, pc}
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	0001bdc5 	.word	0x0001bdc5

00002ef4 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    2ef4:	b580      	push	{r7, lr}
    2ef6:	b082      	sub	sp, #8
    2ef8:	af00      	add	r7, sp, #0
    2efa:	6078      	str	r0, [r7, #4]
    2efc:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
    2efe:	683a      	ldr	r2, [r7, #0]
    2f00:	687b      	ldr	r3, [r7, #4]
    2f02:	0011      	movs	r1, r2
    2f04:	0018      	movs	r0, r3
    2f06:	4b03      	ldr	r3, [pc, #12]	; (2f14 <socket_resolve_handler+0x20>)
    2f08:	4798      	blx	r3
}
    2f0a:	46c0      	nop			; (mov r8, r8)
    2f0c:	46bd      	mov	sp, r7
    2f0e:	b002      	add	sp, #8
    2f10:	bd80      	pop	{r7, pc}
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	0001bdf9 	.word	0x0001bdf9

00002f18 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
    2f18:	b590      	push	{r4, r7, lr}
    2f1a:	b089      	sub	sp, #36	; 0x24
    2f1c:	af02      	add	r7, sp, #8
    2f1e:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
    2f20:	2310      	movs	r3, #16
    2f22:	18fb      	adds	r3, r7, r3
    2f24:	2200      	movs	r2, #0
    2f26:	701a      	strb	r2, [r3, #0]
    2f28:	2310      	movs	r3, #16
    2f2a:	18fb      	adds	r3, r7, r3
    2f2c:	2200      	movs	r2, #0
    2f2e:	705a      	strb	r2, [r3, #1]
    2f30:	2310      	movs	r3, #16
    2f32:	18fb      	adds	r3, r7, r3
    2f34:	2200      	movs	r2, #0
    2f36:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    2f38:	687b      	ldr	r3, [r7, #4]
    2f3a:	685b      	ldr	r3, [r3, #4]
    2f3c:	685a      	ldr	r2, [r3, #4]
    2f3e:	687b      	ldr	r3, [r7, #4]
    2f40:	685b      	ldr	r3, [r3, #4]
    2f42:	689b      	ldr	r3, [r3, #8]
    2f44:	4924      	ldr	r1, [pc, #144]	; (2fd8 <SubscribeHandlerLedTopic+0xc0>)
    2f46:	2001      	movs	r0, #1
    2f48:	4c24      	ldr	r4, [pc, #144]	; (2fdc <SubscribeHandlerLedTopic+0xc4>)
    2f4a:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
    2f4c:	687b      	ldr	r3, [r7, #4]
    2f4e:	681b      	ldr	r3, [r3, #0]
    2f50:	689b      	ldr	r3, [r3, #8]
    2f52:	4923      	ldr	r1, [pc, #140]	; (2fe0 <SubscribeHandlerLedTopic+0xc8>)
    2f54:	2204      	movs	r2, #4
    2f56:	0018      	movs	r0, r3
    2f58:	4b22      	ldr	r3, [pc, #136]	; (2fe4 <SubscribeHandlerLedTopic+0xcc>)
    2f5a:	4798      	blx	r3
    2f5c:	1e03      	subs	r3, r0, #0
    2f5e:	d137      	bne.n	2fd0 <SubscribeHandlerLedTopic+0xb8>
        char *p = (char *)&msgData->message->payload[4];
    2f60:	687b      	ldr	r3, [r7, #4]
    2f62:	681b      	ldr	r3, [r3, #0]
    2f64:	689b      	ldr	r3, [r3, #8]
    2f66:	3304      	adds	r3, #4
    2f68:	60fb      	str	r3, [r7, #12]
        int nb = 0;
    2f6a:	2300      	movs	r3, #0
    2f6c:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
    2f6e:	e015      	b.n	2f9c <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
    2f70:	697c      	ldr	r4, [r7, #20]
    2f72:	1c63      	adds	r3, r4, #1
    2f74:	617b      	str	r3, [r7, #20]
    2f76:	68fb      	ldr	r3, [r7, #12]
    2f78:	220c      	movs	r2, #12
    2f7a:	18b9      	adds	r1, r7, r2
    2f7c:	220a      	movs	r2, #10
    2f7e:	0018      	movs	r0, r3
    2f80:	4b19      	ldr	r3, [pc, #100]	; (2fe8 <SubscribeHandlerLedTopic+0xd0>)
    2f82:	4798      	blx	r3
    2f84:	0003      	movs	r3, r0
    2f86:	b2da      	uxtb	r2, r3
    2f88:	2310      	movs	r3, #16
    2f8a:	18fb      	adds	r3, r7, r3
    2f8c:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
    2f8e:	68fb      	ldr	r3, [r7, #12]
    2f90:	781b      	ldrb	r3, [r3, #0]
    2f92:	2b2c      	cmp	r3, #44	; 0x2c
    2f94:	d10a      	bne.n	2fac <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
    2f96:	68fb      	ldr	r3, [r7, #12]
    2f98:	3301      	adds	r3, #1
    2f9a:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
    2f9c:	697b      	ldr	r3, [r7, #20]
    2f9e:	2b02      	cmp	r3, #2
    2fa0:	dc05      	bgt.n	2fae <SubscribeHandlerLedTopic+0x96>
    2fa2:	68fb      	ldr	r3, [r7, #12]
    2fa4:	781b      	ldrb	r3, [r3, #0]
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d1e2      	bne.n	2f70 <SubscribeHandlerLedTopic+0x58>
    2faa:	e000      	b.n	2fae <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
    2fac:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
    2fae:	2310      	movs	r3, #16
    2fb0:	18fb      	adds	r3, r7, r3
    2fb2:	781b      	ldrb	r3, [r3, #0]
    2fb4:	001a      	movs	r2, r3
    2fb6:	2310      	movs	r3, #16
    2fb8:	18fb      	adds	r3, r7, r3
    2fba:	785b      	ldrb	r3, [r3, #1]
    2fbc:	0018      	movs	r0, r3
    2fbe:	2310      	movs	r3, #16
    2fc0:	18fb      	adds	r3, r7, r3
    2fc2:	789b      	ldrb	r3, [r3, #2]
    2fc4:	4909      	ldr	r1, [pc, #36]	; (2fec <SubscribeHandlerLedTopic+0xd4>)
    2fc6:	9300      	str	r3, [sp, #0]
    2fc8:	0003      	movs	r3, r0
    2fca:	2001      	movs	r0, #1
    2fcc:	4c03      	ldr	r4, [pc, #12]	; (2fdc <SubscribeHandlerLedTopic+0xc4>)
    2fce:	47a0      	blx	r4
    }
}
    2fd0:	46c0      	nop			; (mov r8, r8)
    2fd2:	46bd      	mov	sp, r7
    2fd4:	b007      	add	sp, #28
    2fd6:	bd90      	pop	{r4, r7, pc}
    2fd8:	00022b9c 	.word	0x00022b9c
    2fdc:	0000a495 	.word	0x0000a495
    2fe0:	00022ba4 	.word	0x00022ba4
    2fe4:	000212e5 	.word	0x000212e5
    2fe8:	00021491 	.word	0x00021491
    2fec:	00022bac 	.word	0x00022bac

00002ff0 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
    2ff0:	b590      	push	{r4, r7, lr}
    2ff2:	b08b      	sub	sp, #44	; 0x2c
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
    2ff8:	230c      	movs	r3, #12
    2ffa:	18fb      	adds	r3, r7, r3
    2ffc:	2214      	movs	r2, #20
    2ffe:	21ff      	movs	r1, #255	; 0xff
    3000:	0018      	movs	r0, r3
    3002:	4b41      	ldr	r3, [pc, #260]	; (3108 <SubscribeHandlerGameTopic+0x118>)
    3004:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
    3006:	687b      	ldr	r3, [r7, #4]
    3008:	681b      	ldr	r3, [r3, #0]
    300a:	689b      	ldr	r3, [r3, #8]
    300c:	493f      	ldr	r1, [pc, #252]	; (310c <SubscribeHandlerGameTopic+0x11c>)
    300e:	2209      	movs	r2, #9
    3010:	0018      	movs	r0, r3
    3012:	4b3f      	ldr	r3, [pc, #252]	; (3110 <SubscribeHandlerGameTopic+0x120>)
    3014:	4798      	blx	r3
    3016:	1e03      	subs	r3, r0, #0
    3018:	d159      	bne.n	30ce <SubscribeHandlerGameTopic+0xde>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
    301a:	4b3e      	ldr	r3, [pc, #248]	; (3114 <SubscribeHandlerGameTopic+0x124>)
    301c:	0019      	movs	r1, r3
    301e:	2001      	movs	r0, #1
    3020:	4b3d      	ldr	r3, [pc, #244]	; (3118 <SubscribeHandlerGameTopic+0x128>)
    3022:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    3024:	687b      	ldr	r3, [r7, #4]
    3026:	685b      	ldr	r3, [r3, #4]
    3028:	685a      	ldr	r2, [r3, #4]
    302a:	687b      	ldr	r3, [r7, #4]
    302c:	685b      	ldr	r3, [r3, #4]
    302e:	689b      	ldr	r3, [r3, #8]
    3030:	493a      	ldr	r1, [pc, #232]	; (311c <SubscribeHandlerGameTopic+0x12c>)
    3032:	2001      	movs	r0, #1
    3034:	4c38      	ldr	r4, [pc, #224]	; (3118 <SubscribeHandlerGameTopic+0x128>)
    3036:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	68da      	ldr	r2, [r3, #12]
    303e:	687b      	ldr	r3, [r7, #4]
    3040:	681b      	ldr	r3, [r3, #0]
    3042:	689b      	ldr	r3, [r3, #8]
    3044:	4936      	ldr	r1, [pc, #216]	; (3120 <SubscribeHandlerGameTopic+0x130>)
    3046:	2001      	movs	r0, #1
    3048:	4c33      	ldr	r4, [pc, #204]	; (3118 <SubscribeHandlerGameTopic+0x128>)
    304a:	47a0      	blx	r4

        int nb = 0;
    304c:	2300      	movs	r3, #0
    304e:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	681b      	ldr	r3, [r3, #0]
    3054:	689b      	ldr	r3, [r3, #8]
    3056:	3309      	adds	r3, #9
    3058:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
    305a:	e015      	b.n	3088 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
    305c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    305e:	1c63      	adds	r3, r4, #1
    3060:	627b      	str	r3, [r7, #36]	; 0x24
    3062:	68bb      	ldr	r3, [r7, #8]
    3064:	2208      	movs	r2, #8
    3066:	18b9      	adds	r1, r7, r2
    3068:	220a      	movs	r2, #10
    306a:	0018      	movs	r0, r3
    306c:	4b2d      	ldr	r3, [pc, #180]	; (3124 <SubscribeHandlerGameTopic+0x134>)
    306e:	4798      	blx	r3
    3070:	0003      	movs	r3, r0
    3072:	b2da      	uxtb	r2, r3
    3074:	230c      	movs	r3, #12
    3076:	18fb      	adds	r3, r7, r3
    3078:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
    307a:	68bb      	ldr	r3, [r7, #8]
    307c:	781b      	ldrb	r3, [r3, #0]
    307e:	2b2c      	cmp	r3, #44	; 0x2c
    3080:	d10a      	bne.n	3098 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
    3082:	68bb      	ldr	r3, [r7, #8]
    3084:	3301      	adds	r3, #1
    3086:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
    3088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    308a:	2b13      	cmp	r3, #19
    308c:	dc05      	bgt.n	309a <SubscribeHandlerGameTopic+0xaa>
    308e:	68bb      	ldr	r3, [r7, #8]
    3090:	781b      	ldrb	r3, [r3, #0]
    3092:	2b00      	cmp	r3, #0
    3094:	d1e2      	bne.n	305c <SubscribeHandlerGameTopic+0x6c>
    3096:	e000      	b.n	309a <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
    3098:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
    309a:	4b23      	ldr	r3, [pc, #140]	; (3128 <SubscribeHandlerGameTopic+0x138>)
    309c:	0019      	movs	r1, r3
    309e:	2001      	movs	r0, #1
    30a0:	4b1d      	ldr	r3, [pc, #116]	; (3118 <SubscribeHandlerGameTopic+0x128>)
    30a2:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
    30a4:	2300      	movs	r3, #0
    30a6:	623b      	str	r3, [r7, #32]
    30a8:	e00d      	b.n	30c6 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
    30aa:	230c      	movs	r3, #12
    30ac:	18fa      	adds	r2, r7, r3
    30ae:	6a3b      	ldr	r3, [r7, #32]
    30b0:	18d3      	adds	r3, r2, r3
    30b2:	781b      	ldrb	r3, [r3, #0]
    30b4:	001a      	movs	r2, r3
    30b6:	4b1d      	ldr	r3, [pc, #116]	; (312c <SubscribeHandlerGameTopic+0x13c>)
    30b8:	0019      	movs	r1, r3
    30ba:	2001      	movs	r0, #1
    30bc:	4b16      	ldr	r3, [pc, #88]	; (3118 <SubscribeHandlerGameTopic+0x128>)
    30be:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
    30c0:	6a3b      	ldr	r3, [r7, #32]
    30c2:	3301      	adds	r3, #1
    30c4:	623b      	str	r3, [r7, #32]
    30c6:	6a3b      	ldr	r3, [r7, #32]
    30c8:	2b13      	cmp	r3, #19
    30ca:	ddee      	ble.n	30aa <SubscribeHandlerGameTopic+0xba>
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
    30cc:	e018      	b.n	3100 <SubscribeHandlerGameTopic+0x110>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
    30ce:	4b18      	ldr	r3, [pc, #96]	; (3130 <SubscribeHandlerGameTopic+0x140>)
    30d0:	0019      	movs	r1, r3
    30d2:	2001      	movs	r0, #1
    30d4:	4b10      	ldr	r3, [pc, #64]	; (3118 <SubscribeHandlerGameTopic+0x128>)
    30d6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	685b      	ldr	r3, [r3, #4]
    30dc:	685a      	ldr	r2, [r3, #4]
    30de:	687b      	ldr	r3, [r7, #4]
    30e0:	685b      	ldr	r3, [r3, #4]
    30e2:	689b      	ldr	r3, [r3, #8]
    30e4:	490d      	ldr	r1, [pc, #52]	; (311c <SubscribeHandlerGameTopic+0x12c>)
    30e6:	2001      	movs	r0, #1
    30e8:	4c0b      	ldr	r4, [pc, #44]	; (3118 <SubscribeHandlerGameTopic+0x128>)
    30ea:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    30ec:	687b      	ldr	r3, [r7, #4]
    30ee:	681b      	ldr	r3, [r3, #0]
    30f0:	68da      	ldr	r2, [r3, #12]
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	681b      	ldr	r3, [r3, #0]
    30f6:	689b      	ldr	r3, [r3, #8]
    30f8:	4909      	ldr	r1, [pc, #36]	; (3120 <SubscribeHandlerGameTopic+0x130>)
    30fa:	2001      	movs	r0, #1
    30fc:	4c06      	ldr	r4, [pc, #24]	; (3118 <SubscribeHandlerGameTopic+0x128>)
    30fe:	47a0      	blx	r4
}
    3100:	46c0      	nop			; (mov r8, r8)
    3102:	46bd      	mov	sp, r7
    3104:	b00b      	add	sp, #44	; 0x2c
    3106:	bd90      	pop	{r4, r7, pc}
    3108:	00020f1f 	.word	0x00020f1f
    310c:	00022bc0 	.word	0x00022bc0
    3110:	000212e5 	.word	0x000212e5
    3114:	00022bcc 	.word	0x00022bcc
    3118:	0000a495 	.word	0x0000a495
    311c:	00022b9c 	.word	0x00022b9c
    3120:	00022be8 	.word	0x00022be8
    3124:	00021491 	.word	0x00021491
    3128:	00022bf0 	.word	0x00022bf0
    312c:	00022c04 	.word	0x00022c04
    3130:	00022c08 	.word	0x00022c08

00003134 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
    3134:	b590      	push	{r4, r7, lr}
    3136:	b083      	sub	sp, #12
    3138:	af00      	add	r7, sp, #0
    313a:	6078      	str	r0, [r7, #4]
    LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
    313c:	4b09      	ldr	r3, [pc, #36]	; (3164 <SubscribeHandlerImuTopic+0x30>)
    313e:	0019      	movs	r1, r3
    3140:	2001      	movs	r0, #1
    3142:	4b09      	ldr	r3, [pc, #36]	; (3168 <SubscribeHandlerImuTopic+0x34>)
    3144:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    3146:	687b      	ldr	r3, [r7, #4]
    3148:	685b      	ldr	r3, [r3, #4]
    314a:	685a      	ldr	r2, [r3, #4]
    314c:	687b      	ldr	r3, [r7, #4]
    314e:	685b      	ldr	r3, [r3, #4]
    3150:	689b      	ldr	r3, [r3, #8]
    3152:	4906      	ldr	r1, [pc, #24]	; (316c <SubscribeHandlerImuTopic+0x38>)
    3154:	2001      	movs	r0, #1
    3156:	4c04      	ldr	r4, [pc, #16]	; (3168 <SubscribeHandlerImuTopic+0x34>)
    3158:	47a0      	blx	r4
}
    315a:	46c0      	nop			; (mov r8, r8)
    315c:	46bd      	mov	sp, r7
    315e:	b003      	add	sp, #12
    3160:	bd90      	pop	{r4, r7, pc}
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	00022c38 	.word	0x00022c38
    3168:	0000a495 	.word	0x0000a495
    316c:	00022b9c 	.word	0x00022b9c

00003170 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    3170:	b590      	push	{r4, r7, lr}
    3172:	b08b      	sub	sp, #44	; 0x2c
    3174:	af06      	add	r7, sp, #24
    3176:	60f8      	str	r0, [r7, #12]
    3178:	60b9      	str	r1, [r7, #8]
    317a:	607a      	str	r2, [r7, #4]
    switch (type) {
    317c:	68bb      	ldr	r3, [r7, #8]
    317e:	2b01      	cmp	r3, #1
    3180:	d03b      	beq.n	31fa <mqtt_callback+0x8a>
    3182:	2b05      	cmp	r3, #5
    3184:	d05e      	beq.n	3244 <mqtt_callback+0xd4>
    3186:	2b00      	cmp	r3, #0
    3188:	d000      	beq.n	318c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
    318a:	e061      	b.n	3250 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	681b      	ldr	r3, [r3, #0]
    3190:	2b00      	cmp	r3, #0
    3192:	db25      	blt.n	31e0 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
    3194:	4b30      	ldr	r3, [pc, #192]	; (3258 <mqtt_callback+0xe8>)
    3196:	0019      	movs	r1, r3
    3198:	2001      	movs	r0, #1
    319a:	4b30      	ldr	r3, [pc, #192]	; (325c <mqtt_callback+0xec>)
    319c:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
    319e:	4930      	ldr	r1, [pc, #192]	; (3260 <mqtt_callback+0xf0>)
    31a0:	4a30      	ldr	r2, [pc, #192]	; (3264 <mqtt_callback+0xf4>)
    31a2:	68f8      	ldr	r0, [r7, #12]
    31a4:	2300      	movs	r3, #0
    31a6:	9305      	str	r3, [sp, #20]
    31a8:	2300      	movs	r3, #0
    31aa:	9304      	str	r3, [sp, #16]
    31ac:	2300      	movs	r3, #0
    31ae:	9303      	str	r3, [sp, #12]
    31b0:	2300      	movs	r3, #0
    31b2:	9302      	str	r3, [sp, #8]
    31b4:	2300      	movs	r3, #0
    31b6:	9301      	str	r3, [sp, #4]
    31b8:	4b2a      	ldr	r3, [pc, #168]	; (3264 <mqtt_callback+0xf4>)
    31ba:	9300      	str	r3, [sp, #0]
    31bc:	000b      	movs	r3, r1
    31be:	2101      	movs	r1, #1
    31c0:	4c29      	ldr	r4, [pc, #164]	; (3268 <mqtt_callback+0xf8>)
    31c2:	47a0      	blx	r4
    31c4:	1e03      	subs	r3, r0, #0
    31c6:	d005      	beq.n	31d4 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
    31c8:	4b28      	ldr	r3, [pc, #160]	; (326c <mqtt_callback+0xfc>)
    31ca:	0019      	movs	r1, r3
    31cc:	2001      	movs	r0, #1
    31ce:	4b23      	ldr	r3, [pc, #140]	; (325c <mqtt_callback+0xec>)
    31d0:	4798      	blx	r3
        } break;
    31d2:	e03d      	b.n	3250 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
    31d4:	4b26      	ldr	r3, [pc, #152]	; (3270 <mqtt_callback+0x100>)
    31d6:	0019      	movs	r1, r3
    31d8:	2001      	movs	r0, #1
    31da:	4b20      	ldr	r3, [pc, #128]	; (325c <mqtt_callback+0xec>)
    31dc:	4798      	blx	r3
        } break;
    31de:	e037      	b.n	3250 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    31e0:	4a24      	ldr	r2, [pc, #144]	; (3274 <mqtt_callback+0x104>)
    31e2:	4b25      	ldr	r3, [pc, #148]	; (3278 <mqtt_callback+0x108>)
    31e4:	0019      	movs	r1, r3
    31e6:	2001      	movs	r0, #1
    31e8:	4b1c      	ldr	r3, [pc, #112]	; (325c <mqtt_callback+0xec>)
    31ea:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    31ec:	4a21      	ldr	r2, [pc, #132]	; (3274 <mqtt_callback+0x104>)
    31ee:	68fb      	ldr	r3, [r7, #12]
    31f0:	0011      	movs	r1, r2
    31f2:	0018      	movs	r0, r3
    31f4:	4b21      	ldr	r3, [pc, #132]	; (327c <mqtt_callback+0x10c>)
    31f6:	4798      	blx	r3
        } break;
    31f8:	e02a      	b.n	3250 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    31fa:	687b      	ldr	r3, [r7, #4]
    31fc:	781b      	ldrb	r3, [r3, #0]
    31fe:	2b00      	cmp	r3, #0
    3200:	d117      	bne.n	3232 <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
    3202:	4b1f      	ldr	r3, [pc, #124]	; (3280 <mqtt_callback+0x110>)
    3204:	491f      	ldr	r1, [pc, #124]	; (3284 <mqtt_callback+0x114>)
    3206:	68f8      	ldr	r0, [r7, #12]
    3208:	2202      	movs	r2, #2
    320a:	4c1f      	ldr	r4, [pc, #124]	; (3288 <mqtt_callback+0x118>)
    320c:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
    320e:	4b1f      	ldr	r3, [pc, #124]	; (328c <mqtt_callback+0x11c>)
    3210:	491f      	ldr	r1, [pc, #124]	; (3290 <mqtt_callback+0x120>)
    3212:	68f8      	ldr	r0, [r7, #12]
    3214:	2202      	movs	r2, #2
    3216:	4c1c      	ldr	r4, [pc, #112]	; (3288 <mqtt_callback+0x118>)
    3218:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
    321a:	4b1e      	ldr	r3, [pc, #120]	; (3294 <mqtt_callback+0x124>)
    321c:	491e      	ldr	r1, [pc, #120]	; (3298 <mqtt_callback+0x128>)
    321e:	68f8      	ldr	r0, [r7, #12]
    3220:	2202      	movs	r2, #2
    3222:	4c19      	ldr	r4, [pc, #100]	; (3288 <mqtt_callback+0x118>)
    3224:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
    3226:	4b1d      	ldr	r3, [pc, #116]	; (329c <mqtt_callback+0x12c>)
    3228:	0019      	movs	r1, r3
    322a:	2001      	movs	r0, #1
    322c:	4b0b      	ldr	r3, [pc, #44]	; (325c <mqtt_callback+0xec>)
    322e:	4798      	blx	r3
            break;
    3230:	e00e      	b.n	3250 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
    3232:	687b      	ldr	r3, [r7, #4]
    3234:	781b      	ldrb	r3, [r3, #0]
    3236:	001a      	movs	r2, r3
    3238:	4b19      	ldr	r3, [pc, #100]	; (32a0 <mqtt_callback+0x130>)
    323a:	0019      	movs	r1, r3
    323c:	2001      	movs	r0, #1
    323e:	4b07      	ldr	r3, [pc, #28]	; (325c <mqtt_callback+0xec>)
    3240:	4798      	blx	r3
            break;
    3242:	e005      	b.n	3250 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
    3244:	4b17      	ldr	r3, [pc, #92]	; (32a4 <mqtt_callback+0x134>)
    3246:	0019      	movs	r1, r3
    3248:	2001      	movs	r0, #1
    324a:	4b04      	ldr	r3, [pc, #16]	; (325c <mqtt_callback+0xec>)
    324c:	4798      	blx	r3
            break;
    324e:	46c0      	nop			; (mov r8, r8)
}
    3250:	46c0      	nop			; (mov r8, r8)
    3252:	46bd      	mov	sp, r7
    3254:	b005      	add	sp, #20
    3256:	bd90      	pop	{r4, r7, pc}
    3258:	00022c9c 	.word	0x00022c9c
    325c:	0000a495 	.word	0x0000a495
    3260:	00022cb8 	.word	0x00022cb8
    3264:	00022cc8 	.word	0x00022cc8
    3268:	0001be65 	.word	0x0001be65
    326c:	00022cd4 	.word	0x00022cd4
    3270:	00022cfc 	.word	0x00022cfc
    3274:	00022618 	.word	0x00022618
    3278:	00022d18 	.word	0x00022d18
    327c:	0001be1d 	.word	0x0001be1d
    3280:	00002ff1 	.word	0x00002ff1
    3284:	00022d50 	.word	0x00022d50
    3288:	0001c005 	.word	0x0001c005
    328c:	00002f19 	.word	0x00002f19
    3290:	00022c78 	.word	0x00022c78
    3294:	00003135 	.word	0x00003135
    3298:	00022d64 	.word	0x00022d64
    329c:	00022d78 	.word	0x00022d78
    32a0:	00022d8c 	.word	0x00022d8c
    32a4:	00022dc0 	.word	0x00022dc0

000032a8 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	b088      	sub	sp, #32
    32ac:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
    32ae:	1d3b      	adds	r3, r7, #4
    32b0:	0018      	movs	r0, r3
    32b2:	4b1f      	ldr	r3, [pc, #124]	; (3330 <configure_mqtt+0x88>)
    32b4:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
    32b6:	1d3b      	adds	r3, r7, #4
    32b8:	4a1e      	ldr	r2, [pc, #120]	; (3334 <configure_mqtt+0x8c>)
    32ba:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    32bc:	1d3b      	adds	r3, r7, #4
    32be:	2280      	movs	r2, #128	; 0x80
    32c0:	0092      	lsls	r2, r2, #2
    32c2:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
    32c4:	1d3b      	adds	r3, r7, #4
    32c6:	4a1c      	ldr	r2, [pc, #112]	; (3338 <configure_mqtt+0x90>)
    32c8:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    32ca:	1d3b      	adds	r3, r7, #4
    32cc:	2280      	movs	r2, #128	; 0x80
    32ce:	0092      	lsls	r2, r2, #2
    32d0:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
    32d2:	1d3b      	adds	r3, r7, #4
    32d4:	4a19      	ldr	r2, [pc, #100]	; (333c <configure_mqtt+0x94>)
    32d6:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
    32d8:	1d3b      	adds	r3, r7, #4
    32da:	4a19      	ldr	r2, [pc, #100]	; (3340 <configure_mqtt+0x98>)
    32dc:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
    32de:	1d3a      	adds	r2, r7, #4
    32e0:	4b18      	ldr	r3, [pc, #96]	; (3344 <configure_mqtt+0x9c>)
    32e2:	0011      	movs	r1, r2
    32e4:	0018      	movs	r0, r3
    32e6:	4b18      	ldr	r3, [pc, #96]	; (3348 <configure_mqtt+0xa0>)
    32e8:	4798      	blx	r3
    32ea:	0003      	movs	r3, r0
    32ec:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
    32ee:	69fb      	ldr	r3, [r7, #28]
    32f0:	2b00      	cmp	r3, #0
    32f2:	da06      	bge.n	3302 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
    32f4:	69fa      	ldr	r2, [r7, #28]
    32f6:	4b15      	ldr	r3, [pc, #84]	; (334c <configure_mqtt+0xa4>)
    32f8:	0019      	movs	r1, r3
    32fa:	2001      	movs	r0, #1
    32fc:	4b14      	ldr	r3, [pc, #80]	; (3350 <configure_mqtt+0xa8>)
    32fe:	4798      	blx	r3
        while (1) {
    3300:	e7fe      	b.n	3300 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    3302:	4a14      	ldr	r2, [pc, #80]	; (3354 <configure_mqtt+0xac>)
    3304:	4b0f      	ldr	r3, [pc, #60]	; (3344 <configure_mqtt+0x9c>)
    3306:	0011      	movs	r1, r2
    3308:	0018      	movs	r0, r3
    330a:	4b13      	ldr	r3, [pc, #76]	; (3358 <configure_mqtt+0xb0>)
    330c:	4798      	blx	r3
    330e:	0003      	movs	r3, r0
    3310:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
    3312:	69fb      	ldr	r3, [r7, #28]
    3314:	2b00      	cmp	r3, #0
    3316:	da06      	bge.n	3326 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
    3318:	69fa      	ldr	r2, [r7, #28]
    331a:	4b10      	ldr	r3, [pc, #64]	; (335c <configure_mqtt+0xb4>)
    331c:	0019      	movs	r1, r3
    331e:	2001      	movs	r0, #1
    3320:	4b0b      	ldr	r3, [pc, #44]	; (3350 <configure_mqtt+0xa8>)
    3322:	4798      	blx	r3
        while (1) {
    3324:	e7fe      	b.n	3324 <configure_mqtt+0x7c>
        }
    }
}
    3326:	46c0      	nop			; (mov r8, r8)
    3328:	46bd      	mov	sp, r7
    332a:	b008      	add	sp, #32
    332c:	bd80      	pop	{r7, pc}
    332e:	46c0      	nop			; (mov r8, r8)
    3330:	0001bd5d 	.word	0x0001bd5d
    3334:	20000744 	.word	0x20000744
    3338:	20000944 	.word	0x20000944
    333c:	0000075b 	.word	0x0000075b
    3340:	00001770 	.word	0x00001770
    3344:	2000070c 	.word	0x2000070c
    3348:	0001bcad 	.word	0x0001bcad
    334c:	00022dd4 	.word	0x00022dd4
    3350:	0000a495 	.word	0x0000a495
    3354:	00003171 	.word	0x00003171
    3358:	0001bd9d 	.word	0x0001bd9d
    335c:	00022e08 	.word	0x00022e08

00003360 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
    3360:	b580      	push	{r7, lr}
    3362:	b084      	sub	sp, #16
    3364:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
    3366:	1d3b      	adds	r3, r7, #4
    3368:	0018      	movs	r0, r3
    336a:	4b0b      	ldr	r3, [pc, #44]	; (3398 <configure_extint_channel+0x38>)
    336c:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
    336e:	1d3b      	adds	r3, r7, #4
    3370:	2237      	movs	r2, #55	; 0x37
    3372:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
    3374:	1d3b      	adds	r3, r7, #4
    3376:	2200      	movs	r2, #0
    3378:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    337a:	1d3b      	adds	r3, r7, #4
    337c:	2201      	movs	r2, #1
    337e:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    3380:	1d3b      	adds	r3, r7, #4
    3382:	2202      	movs	r2, #2
    3384:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    3386:	1d3b      	adds	r3, r7, #4
    3388:	0019      	movs	r1, r3
    338a:	2007      	movs	r0, #7
    338c:	4b03      	ldr	r3, [pc, #12]	; (339c <configure_extint_channel+0x3c>)
    338e:	4798      	blx	r3
}
    3390:	46c0      	nop			; (mov r8, r8)
    3392:	46bd      	mov	sp, r7
    3394:	b004      	add	sp, #16
    3396:	bd80      	pop	{r7, pc}
    3398:	00012e95 	.word	0x00012e95
    339c:	00012ec9 	.word	0x00012ec9

000033a0 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
    33a0:	b580      	push	{r7, lr}
    33a2:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    33a4:	4b06      	ldr	r3, [pc, #24]	; (33c0 <configure_extint_callbacks+0x20>)
    33a6:	2200      	movs	r2, #0
    33a8:	2107      	movs	r1, #7
    33aa:	0018      	movs	r0, r3
    33ac:	4b05      	ldr	r3, [pc, #20]	; (33c4 <configure_extint_callbacks+0x24>)
    33ae:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    33b0:	2100      	movs	r1, #0
    33b2:	2007      	movs	r0, #7
    33b4:	4b04      	ldr	r3, [pc, #16]	; (33c8 <configure_extint_callbacks+0x28>)
    33b6:	4798      	blx	r3
}
    33b8:	46c0      	nop			; (mov r8, r8)
    33ba:	46bd      	mov	sp, r7
    33bc:	bd80      	pop	{r7, pc}
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	000033cd 	.word	0x000033cd
    33c4:	00012a95 	.word	0x00012a95
    33c8:	00012af9 	.word	0x00012af9

000033cc <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
    33cc:	b5b0      	push	{r4, r5, r7, lr}
    33ce:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
    33d0:	4b0c      	ldr	r3, [pc, #48]	; (3404 <extint_detection_callback+0x38>)
    33d2:	681b      	ldr	r3, [r3, #0]
    33d4:	1c5a      	adds	r2, r3, #1
    33d6:	4b0b      	ldr	r3, [pc, #44]	; (3404 <extint_detection_callback+0x38>)
    33d8:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
    33da:	4b0a      	ldr	r3, [pc, #40]	; (3404 <extint_detection_callback+0x38>)
    33dc:	681b      	ldr	r3, [r3, #0]
    33de:	2b28      	cmp	r3, #40	; 0x28
    33e0:	d902      	bls.n	33e8 <extint_detection_callback+0x1c>
    33e2:	4b08      	ldr	r3, [pc, #32]	; (3404 <extint_detection_callback+0x38>)
    33e4:	2201      	movs	r2, #1
    33e6:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
    33e8:	4b06      	ldr	r3, [pc, #24]	; (3404 <extint_detection_callback+0x38>)
    33ea:	681b      	ldr	r3, [r3, #0]
    33ec:	4a06      	ldr	r2, [pc, #24]	; (3408 <extint_detection_callback+0x3c>)
    33ee:	4807      	ldr	r0, [pc, #28]	; (340c <extint_detection_callback+0x40>)
    33f0:	213f      	movs	r1, #63	; 0x3f
    33f2:	4c07      	ldr	r4, [pc, #28]	; (3410 <extint_detection_callback+0x44>)
    33f4:	47a0      	blx	r4
    isPressed = true;
    33f6:	4b07      	ldr	r3, [pc, #28]	; (3414 <extint_detection_callback+0x48>)
    33f8:	2201      	movs	r2, #1
    33fa:	701a      	strb	r2, [r3, #0]
    // Published in the Wifi thread main loop
}
    33fc:	46c0      	nop			; (mov r8, r8)
    33fe:	46bd      	mov	sp, r7
    3400:	bdb0      	pop	{r4, r5, r7, pc}
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	200000ac 	.word	0x200000ac
    3408:	00022e3c 	.word	0x00022e3c
    340c:	2000006c 	.word	0x2000006c
    3410:	00021179 	.word	0x00021179
    3414:	20000b44 	.word	0x20000b44

00003418 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
    3418:	b580      	push	{r7, lr}
    341a:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
    341c:	4a15      	ldr	r2, [pc, #84]	; (3474 <HTTP_DownloadFileInit+0x5c>)
    341e:	4b16      	ldr	r3, [pc, #88]	; (3478 <HTTP_DownloadFileInit+0x60>)
    3420:	0011      	movs	r1, r2
    3422:	0018      	movs	r0, r3
    3424:	4b15      	ldr	r3, [pc, #84]	; (347c <HTTP_DownloadFileInit+0x64>)
    3426:	4798      	blx	r3
    3428:	1e03      	subs	r3, r0, #0
    342a:	d008      	beq.n	343e <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    342c:	4b14      	ldr	r3, [pc, #80]	; (3480 <HTTP_DownloadFileInit+0x68>)
    342e:	0019      	movs	r1, r3
    3430:	2001      	movs	r0, #1
    3432:	4b14      	ldr	r3, [pc, #80]	; (3484 <HTTP_DownloadFileInit+0x6c>)
    3434:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
    3436:	e002      	b.n	343e <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
    3438:	2000      	movs	r0, #0
    343a:	4b13      	ldr	r3, [pc, #76]	; (3488 <HTTP_DownloadFileInit+0x70>)
    343c:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
    343e:	4b0e      	ldr	r3, [pc, #56]	; (3478 <HTTP_DownloadFileInit+0x60>)
    3440:	2234      	movs	r2, #52	; 0x34
    3442:	5c9b      	ldrb	r3, [r3, r2]
    3444:	2b00      	cmp	r3, #0
    3446:	d1f7      	bne.n	3438 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
    3448:	4b10      	ldr	r3, [pc, #64]	; (348c <HTTP_DownloadFileInit+0x74>)
    344a:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
    344c:	4b10      	ldr	r3, [pc, #64]	; (3490 <HTTP_DownloadFileInit+0x78>)
    344e:	2201      	movs	r2, #1
    3450:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
    3452:	4a10      	ldr	r2, [pc, #64]	; (3494 <HTTP_DownloadFileInit+0x7c>)
    3454:	4b10      	ldr	r3, [pc, #64]	; (3498 <HTTP_DownloadFileInit+0x80>)
    3456:	0011      	movs	r1, r2
    3458:	0018      	movs	r0, r3
    345a:	4b10      	ldr	r3, [pc, #64]	; (349c <HTTP_DownloadFileInit+0x84>)
    345c:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
    345e:	4b10      	ldr	r3, [pc, #64]	; (34a0 <HTTP_DownloadFileInit+0x88>)
    3460:	4798      	blx	r3

    start_download();
    3462:	4b10      	ldr	r3, [pc, #64]	; (34a4 <HTTP_DownloadFileInit+0x8c>)
    3464:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
    3466:	4b10      	ldr	r3, [pc, #64]	; (34a8 <HTTP_DownloadFileInit+0x90>)
    3468:	2203      	movs	r2, #3
    346a:	701a      	strb	r2, [r3, #0]
}
    346c:	46c0      	nop			; (mov r8, r8)
    346e:	46bd      	mov	sp, r7
    3470:	bd80      	pop	{r7, pc}
    3472:	46c0      	nop			; (mov r8, r8)
    3474:	00022618 	.word	0x00022618
    3478:	2000070c 	.word	0x2000070c
    347c:	0001bf51 	.word	0x0001bf51
    3480:	00022a24 	.word	0x00022a24
    3484:	0000a495 	.word	0x0000a495
    3488:	0000e585 	.word	0x0000e585
    348c:	00011b41 	.word	0x00011b41
    3490:	200004ac 	.word	0x200004ac
    3494:	00002b69 	.word	0x00002b69
    3498:	00002b35 	.word	0x00002b35
    349c:	00011b89 	.word	0x00011b89
    34a0:	00011af1 	.word	0x00011af1
    34a4:	00002759 	.word	0x00002759
    34a8:	20000498 	.word	0x20000498

000034ac <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
    34ac:	b590      	push	{r4, r7, lr}
    34ae:	b085      	sub	sp, #20
    34b0:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    34b2:	e009      	b.n	34c8 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    34b4:	2000      	movs	r0, #0
    34b6:	4b2a      	ldr	r3, [pc, #168]	; (3560 <HTTP_DownloadFileTransaction+0xb4>)
    34b8:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    34ba:	4b2a      	ldr	r3, [pc, #168]	; (3564 <HTTP_DownloadFileTransaction+0xb8>)
    34bc:	0018      	movs	r0, r3
    34be:	4b2a      	ldr	r3, [pc, #168]	; (3568 <HTTP_DownloadFileTransaction+0xbc>)
    34c0:	4798      	blx	r3
        vTaskDelay(5);
    34c2:	2005      	movs	r0, #5
    34c4:	4b29      	ldr	r3, [pc, #164]	; (356c <HTTP_DownloadFileTransaction+0xc0>)
    34c6:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    34c8:	2010      	movs	r0, #16
    34ca:	4b29      	ldr	r3, [pc, #164]	; (3570 <HTTP_DownloadFileTransaction+0xc4>)
    34cc:	4798      	blx	r3
    34ce:	0003      	movs	r3, r0
    34d0:	001a      	movs	r2, r3
    34d2:	2301      	movs	r3, #1
    34d4:	4053      	eors	r3, r2
    34d6:	b2db      	uxtb	r3, r3
    34d8:	2b00      	cmp	r3, #0
    34da:	d009      	beq.n	34f0 <HTTP_DownloadFileTransaction+0x44>
    34dc:	2020      	movs	r0, #32
    34de:	4b24      	ldr	r3, [pc, #144]	; (3570 <HTTP_DownloadFileTransaction+0xc4>)
    34e0:	4798      	blx	r3
    34e2:	0003      	movs	r3, r0
    34e4:	001a      	movs	r2, r3
    34e6:	2301      	movs	r3, #1
    34e8:	4053      	eors	r3, r2
    34ea:	b2db      	uxtb	r3, r3
    34ec:	2b00      	cmp	r3, #0
    34ee:	d1e1      	bne.n	34b4 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
    34f0:	4b20      	ldr	r3, [pc, #128]	; (3574 <HTTP_DownloadFileTransaction+0xc8>)
    34f2:	4798      	blx	r3
    vTaskDelay(1000);
    34f4:	23fa      	movs	r3, #250	; 0xfa
    34f6:	009b      	lsls	r3, r3, #2
    34f8:	0018      	movs	r0, r3
    34fa:	4b1c      	ldr	r3, [pc, #112]	; (356c <HTTP_DownloadFileTransaction+0xc0>)
    34fc:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
    34fe:	4b1e      	ldr	r3, [pc, #120]	; (3578 <HTTP_DownloadFileTransaction+0xcc>)
    3500:	2200      	movs	r2, #0
    3502:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
    3504:	003b      	movs	r3, r7
    3506:	4a1d      	ldr	r2, [pc, #116]	; (357c <HTTP_DownloadFileTransaction+0xd0>)
    3508:	ca13      	ldmia	r2!, {r0, r1, r4}
    350a:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    350c:	003b      	movs	r3, r7
    350e:	2230      	movs	r2, #48	; 0x30
    3510:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    3512:	230f      	movs	r3, #15
    3514:	18fc      	adds	r4, r7, r3
    3516:	0039      	movs	r1, r7
    3518:	4b19      	ldr	r3, [pc, #100]	; (3580 <HTTP_DownloadFileTransaction+0xd4>)
    351a:	220a      	movs	r2, #10
    351c:	0018      	movs	r0, r3
    351e:	4b19      	ldr	r3, [pc, #100]	; (3584 <HTTP_DownloadFileTransaction+0xd8>)
    3520:	4798      	blx	r3
    3522:	0003      	movs	r3, r0
    3524:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
    3526:	230f      	movs	r3, #15
    3528:	18fb      	adds	r3, r7, r3
    352a:	781b      	ldrb	r3, [r3, #0]
    352c:	2b00      	cmp	r3, #0
    352e:	d008      	beq.n	3542 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    3530:	230f      	movs	r3, #15
    3532:	18fb      	adds	r3, r7, r3
    3534:	781a      	ldrb	r2, [r3, #0]
    3536:	4b14      	ldr	r3, [pc, #80]	; (3588 <HTTP_DownloadFileTransaction+0xdc>)
    3538:	0019      	movs	r1, r3
    353a:	2000      	movs	r0, #0
    353c:	4b13      	ldr	r3, [pc, #76]	; (358c <HTTP_DownloadFileTransaction+0xe0>)
    353e:	4798      	blx	r3
    3540:	e003      	b.n	354a <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
    3542:	4b13      	ldr	r3, [pc, #76]	; (3590 <HTTP_DownloadFileTransaction+0xe4>)
    3544:	0018      	movs	r0, r3
    3546:	4b13      	ldr	r3, [pc, #76]	; (3594 <HTTP_DownloadFileTransaction+0xe8>)
    3548:	4798      	blx	r3
    }

    f_close(&file_object);
    354a:	4b0d      	ldr	r3, [pc, #52]	; (3580 <HTTP_DownloadFileTransaction+0xd4>)
    354c:	0018      	movs	r0, r3
    354e:	4b12      	ldr	r3, [pc, #72]	; (3598 <HTTP_DownloadFileTransaction+0xec>)
    3550:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
    3552:	4b12      	ldr	r3, [pc, #72]	; (359c <HTTP_DownloadFileTransaction+0xf0>)
    3554:	2200      	movs	r2, #0
    3556:	701a      	strb	r2, [r3, #0]
}
    3558:	46c0      	nop			; (mov r8, r8)
    355a:	46bd      	mov	sp, r7
    355c:	b005      	add	sp, #20
    355e:	bd90      	pop	{r4, r7, pc}
    3560:	0000e585 	.word	0x0000e585
    3564:	200042f0 	.word	0x200042f0
    3568:	0001ec79 	.word	0x0001ec79
    356c:	00008755 	.word	0x00008755
    3570:	00002431 	.word	0x00002431
    3574:	00011b41 	.word	0x00011b41
    3578:	200004ac 	.word	0x200004ac
    357c:	00022e74 	.word	0x00022e74
    3580:	200006e0 	.word	0x200006e0
    3584:	00019f41 	.word	0x00019f41
    3588:	00022e50 	.word	0x00022e50
    358c:	0000a495 	.word	0x0000a495
    3590:	00022e60 	.word	0x00022e60
    3594:	0000a3a9 	.word	0x0000a3a9
    3598:	0001a941 	.word	0x0001a941
    359c:	20000498 	.word	0x20000498

000035a0 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
    35a0:	b580      	push	{r7, lr}
    35a2:	af00      	add	r7, sp, #0
    socketDeinit();
    35a4:	4b18      	ldr	r3, [pc, #96]	; (3608 <MQTT_InitRoutine+0x68>)
    35a6:	4798      	blx	r3
    configure_mqtt();
    35a8:	4b18      	ldr	r3, [pc, #96]	; (360c <MQTT_InitRoutine+0x6c>)
    35aa:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    35ac:	4a18      	ldr	r2, [pc, #96]	; (3610 <MQTT_InitRoutine+0x70>)
    35ae:	4b19      	ldr	r3, [pc, #100]	; (3614 <MQTT_InitRoutine+0x74>)
    35b0:	0011      	movs	r1, r2
    35b2:	0018      	movs	r0, r3
    35b4:	4b18      	ldr	r3, [pc, #96]	; (3618 <MQTT_InitRoutine+0x78>)
    35b6:	4798      	blx	r3
    socketInit();
    35b8:	4b18      	ldr	r3, [pc, #96]	; (361c <MQTT_InitRoutine+0x7c>)
    35ba:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
    35bc:	4b18      	ldr	r3, [pc, #96]	; (3620 <MQTT_InitRoutine+0x80>)
    35be:	2234      	movs	r2, #52	; 0x34
    35c0:	5c9b      	ldrb	r3, [r3, r2]
    35c2:	2201      	movs	r2, #1
    35c4:	4053      	eors	r3, r2
    35c6:	b2db      	uxtb	r3, r3
    35c8:	2b00      	cmp	r3, #0
    35ca:	d00c      	beq.n	35e6 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    35cc:	4a15      	ldr	r2, [pc, #84]	; (3624 <MQTT_InitRoutine+0x84>)
    35ce:	4b14      	ldr	r3, [pc, #80]	; (3620 <MQTT_InitRoutine+0x80>)
    35d0:	0011      	movs	r1, r2
    35d2:	0018      	movs	r0, r3
    35d4:	4b14      	ldr	r3, [pc, #80]	; (3628 <MQTT_InitRoutine+0x88>)
    35d6:	4798      	blx	r3
    35d8:	1e03      	subs	r3, r0, #0
    35da:	d004      	beq.n	35e6 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    35dc:	4b13      	ldr	r3, [pc, #76]	; (362c <MQTT_InitRoutine+0x8c>)
    35de:	0019      	movs	r1, r3
    35e0:	2001      	movs	r0, #1
    35e2:	4b13      	ldr	r3, [pc, #76]	; (3630 <MQTT_InitRoutine+0x90>)
    35e4:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
    35e6:	4b0e      	ldr	r3, [pc, #56]	; (3620 <MQTT_InitRoutine+0x80>)
    35e8:	2234      	movs	r2, #52	; 0x34
    35ea:	5c9b      	ldrb	r3, [r3, r2]
    35ec:	2b00      	cmp	r3, #0
    35ee:	d004      	beq.n	35fa <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
    35f0:	4b10      	ldr	r3, [pc, #64]	; (3634 <MQTT_InitRoutine+0x94>)
    35f2:	0019      	movs	r1, r3
    35f4:	2001      	movs	r0, #1
    35f6:	4b0e      	ldr	r3, [pc, #56]	; (3630 <MQTT_InitRoutine+0x90>)
    35f8:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
    35fa:	4b0f      	ldr	r3, [pc, #60]	; (3638 <MQTT_InitRoutine+0x98>)
    35fc:	2201      	movs	r2, #1
    35fe:	701a      	strb	r2, [r3, #0]
}
    3600:	46c0      	nop			; (mov r8, r8)
    3602:	46bd      	mov	sp, r7
    3604:	bd80      	pop	{r7, pc}
    3606:	46c0      	nop			; (mov r8, r8)
    3608:	00011b41 	.word	0x00011b41
    360c:	000032a9 	.word	0x000032a9
    3610:	00002ef5 	.word	0x00002ef5
    3614:	00002ec1 	.word	0x00002ec1
    3618:	00011b89 	.word	0x00011b89
    361c:	00011af1 	.word	0x00011af1
    3620:	2000070c 	.word	0x2000070c
    3624:	00022618 	.word	0x00022618
    3628:	0001be1d 	.word	0x0001be1d
    362c:	00022a24 	.word	0x00022a24
    3630:	0000a495 	.word	0x0000a495
    3634:	00022e80 	.word	0x00022e80
    3638:	20000498 	.word	0x20000498

0000363c <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
    363c:	b580      	push	{r7, lr}
    363e:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
    3640:	2000      	movs	r0, #0
    3642:	4b0b      	ldr	r3, [pc, #44]	; (3670 <MQTT_HandleTransactions+0x34>)
    3644:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
    3646:	4b0b      	ldr	r3, [pc, #44]	; (3674 <MQTT_HandleTransactions+0x38>)
    3648:	0018      	movs	r0, r3
    364a:	4b0b      	ldr	r3, [pc, #44]	; (3678 <MQTT_HandleTransactions+0x3c>)
    364c:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
    364e:	4b0b      	ldr	r3, [pc, #44]	; (367c <MQTT_HandleTransactions+0x40>)
    3650:	4798      	blx	r3
    MQTT_HandleImuMessages();
    3652:	4b0b      	ldr	r3, [pc, #44]	; (3680 <MQTT_HandleTransactions+0x44>)
    3654:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
    3656:	4b0b      	ldr	r3, [pc, #44]	; (3684 <MQTT_HandleTransactions+0x48>)
    3658:	2234      	movs	r2, #52	; 0x34
    365a:	5c9b      	ldrb	r3, [r3, r2]
    365c:	2b00      	cmp	r3, #0
    365e:	d004      	beq.n	366a <MQTT_HandleTransactions+0x2e>
    3660:	4b08      	ldr	r3, [pc, #32]	; (3684 <MQTT_HandleTransactions+0x48>)
    3662:	2164      	movs	r1, #100	; 0x64
    3664:	0018      	movs	r0, r3
    3666:	4b08      	ldr	r3, [pc, #32]	; (3688 <MQTT_HandleTransactions+0x4c>)
    3668:	4798      	blx	r3
}
    366a:	46c0      	nop			; (mov r8, r8)
    366c:	46bd      	mov	sp, r7
    366e:	bd80      	pop	{r7, pc}
    3670:	0000e585 	.word	0x0000e585
    3674:	200042f0 	.word	0x200042f0
    3678:	0001ec79 	.word	0x0001ec79
    367c:	00003719 	.word	0x00003719
    3680:	0000368d 	.word	0x0000368d
    3684:	2000070c 	.word	0x2000070c
    3688:	0001c04d 	.word	0x0001c04d

0000368c <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
    368c:	b590      	push	{r4, r7, lr}
    368e:	b085      	sub	sp, #20
    3690:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
    3692:	4b18      	ldr	r3, [pc, #96]	; (36f4 <MQTT_HandleImuMessages+0x68>)
    3694:	681b      	ldr	r3, [r3, #0]
    3696:	0039      	movs	r1, r7
    3698:	2200      	movs	r2, #0
    369a:	0018      	movs	r0, r3
    369c:	4b16      	ldr	r3, [pc, #88]	; (36f8 <MQTT_HandleImuMessages+0x6c>)
    369e:	4798      	blx	r3
    36a0:	0003      	movs	r3, r0
    36a2:	2b01      	cmp	r3, #1
    36a4:	d121      	bne.n	36ea <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
    36a6:	003b      	movs	r3, r7
    36a8:	2200      	movs	r2, #0
    36aa:	5e9b      	ldrsh	r3, [r3, r2]
    36ac:	001c      	movs	r4, r3
    36ae:	003b      	movs	r3, r7
    36b0:	2202      	movs	r2, #2
    36b2:	5e9b      	ldrsh	r3, [r3, r2]
    36b4:	0019      	movs	r1, r3
    36b6:	003b      	movs	r3, r7
    36b8:	2204      	movs	r2, #4
    36ba:	5e9b      	ldrsh	r3, [r3, r2]
    36bc:	4a0f      	ldr	r2, [pc, #60]	; (36fc <MQTT_HandleImuMessages+0x70>)
    36be:	4810      	ldr	r0, [pc, #64]	; (3700 <MQTT_HandleImuMessages+0x74>)
    36c0:	9301      	str	r3, [sp, #4]
    36c2:	9100      	str	r1, [sp, #0]
    36c4:	0023      	movs	r3, r4
    36c6:	213f      	movs	r1, #63	; 0x3f
    36c8:	4c0e      	ldr	r4, [pc, #56]	; (3704 <MQTT_HandleImuMessages+0x78>)
    36ca:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
    36cc:	4b0c      	ldr	r3, [pc, #48]	; (3700 <MQTT_HandleImuMessages+0x74>)
    36ce:	0018      	movs	r0, r3
    36d0:	4b0d      	ldr	r3, [pc, #52]	; (3708 <MQTT_HandleImuMessages+0x7c>)
    36d2:	4798      	blx	r3
    36d4:	0004      	movs	r4, r0
    36d6:	4a0a      	ldr	r2, [pc, #40]	; (3700 <MQTT_HandleImuMessages+0x74>)
    36d8:	490c      	ldr	r1, [pc, #48]	; (370c <MQTT_HandleImuMessages+0x80>)
    36da:	480d      	ldr	r0, [pc, #52]	; (3710 <MQTT_HandleImuMessages+0x84>)
    36dc:	2300      	movs	r3, #0
    36de:	9301      	str	r3, [sp, #4]
    36e0:	2301      	movs	r3, #1
    36e2:	9300      	str	r3, [sp, #0]
    36e4:	0023      	movs	r3, r4
    36e6:	4c0b      	ldr	r4, [pc, #44]	; (3714 <MQTT_HandleImuMessages+0x88>)
    36e8:	47a0      	blx	r4
    }
}
    36ea:	46c0      	nop			; (mov r8, r8)
    36ec:	46bd      	mov	sp, r7
    36ee:	b003      	add	sp, #12
    36f0:	bd90      	pop	{r4, r7, pc}
    36f2:	46c0      	nop			; (mov r8, r8)
    36f4:	200004a4 	.word	0x200004a4
    36f8:	000075a9 	.word	0x000075a9
    36fc:	00022e9c 	.word	0x00022e9c
    3700:	2000002c 	.word	0x2000002c
    3704:	00021179 	.word	0x00021179
    3708:	000212d7 	.word	0x000212d7
    370c:	00022d64 	.word	0x00022d64
    3710:	2000070c 	.word	0x2000070c
    3714:	0001bf99 	.word	0x0001bf99

00003718 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
    3718:	b590      	push	{r4, r7, lr}
    371a:	b08b      	sub	sp, #44	; 0x2c
    371c:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
    371e:	4b39      	ldr	r3, [pc, #228]	; (3804 <MQTT_HandleGameMessages+0xec>)
    3720:	681b      	ldr	r3, [r3, #0]
    3722:	2208      	movs	r2, #8
    3724:	18b9      	adds	r1, r7, r2
    3726:	2200      	movs	r2, #0
    3728:	0018      	movs	r0, r3
    372a:	4b37      	ldr	r3, [pc, #220]	; (3808 <MQTT_HandleGameMessages+0xf0>)
    372c:	4798      	blx	r3
    372e:	0003      	movs	r3, r0
    3730:	2b01      	cmp	r3, #1
    3732:	d163      	bne.n	37fc <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
    3734:	4b35      	ldr	r3, [pc, #212]	; (380c <MQTT_HandleGameMessages+0xf4>)
    3736:	4a36      	ldr	r2, [pc, #216]	; (3810 <MQTT_HandleGameMessages+0xf8>)
    3738:	ca03      	ldmia	r2!, {r0, r1}
    373a:	c303      	stmia	r3!, {r0, r1}
    373c:	8812      	ldrh	r2, [r2, #0]
    373e:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
    3740:	2300      	movs	r3, #0
    3742:	61fb      	str	r3, [r7, #28]
    3744:	e02d      	b.n	37a2 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
    3746:	2308      	movs	r3, #8
    3748:	18fa      	adds	r2, r7, r3
    374a:	69fb      	ldr	r3, [r7, #28]
    374c:	18d3      	adds	r3, r2, r3
    374e:	781b      	ldrb	r3, [r3, #0]
    3750:	2bff      	cmp	r3, #255	; 0xff
    3752:	d02a      	beq.n	37aa <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
    3754:	2308      	movs	r3, #8
    3756:	18fa      	adds	r2, r7, r3
    3758:	69fb      	ldr	r3, [r7, #28]
    375a:	18d3      	adds	r3, r2, r3
    375c:	781b      	ldrb	r3, [r3, #0]
    375e:	4a2d      	ldr	r2, [pc, #180]	; (3814 <MQTT_HandleGameMessages+0xfc>)
    3760:	0038      	movs	r0, r7
    3762:	2103      	movs	r1, #3
    3764:	4c2c      	ldr	r4, [pc, #176]	; (3818 <MQTT_HandleGameMessages+0x100>)
    3766:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
    3768:	003a      	movs	r2, r7
    376a:	4b28      	ldr	r3, [pc, #160]	; (380c <MQTT_HandleGameMessages+0xf4>)
    376c:	0011      	movs	r1, r2
    376e:	0018      	movs	r0, r3
    3770:	4b2a      	ldr	r3, [pc, #168]	; (381c <MQTT_HandleGameMessages+0x104>)
    3772:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
    3774:	69fb      	ldr	r3, [r7, #28]
    3776:	3301      	adds	r3, #1
    3778:	2208      	movs	r2, #8
    377a:	18ba      	adds	r2, r7, r2
    377c:	5cd3      	ldrb	r3, [r2, r3]
    377e:	2bff      	cmp	r3, #255	; 0xff
    3780:	d00c      	beq.n	379c <MQTT_HandleGameMessages+0x84>
    3782:	69fb      	ldr	r3, [r7, #28]
    3784:	3301      	adds	r3, #1
    3786:	2b13      	cmp	r3, #19
    3788:	dc08      	bgt.n	379c <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
    378a:	003b      	movs	r3, r7
    378c:	222c      	movs	r2, #44	; 0x2c
    378e:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
    3790:	003a      	movs	r2, r7
    3792:	4b1e      	ldr	r3, [pc, #120]	; (380c <MQTT_HandleGameMessages+0xf4>)
    3794:	0011      	movs	r1, r2
    3796:	0018      	movs	r0, r3
    3798:	4b20      	ldr	r3, [pc, #128]	; (381c <MQTT_HandleGameMessages+0x104>)
    379a:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
    379c:	69fb      	ldr	r3, [r7, #28]
    379e:	3301      	adds	r3, #1
    37a0:	61fb      	str	r3, [r7, #28]
    37a2:	69fb      	ldr	r3, [r7, #28]
    37a4:	2b13      	cmp	r3, #19
    37a6:	ddce      	ble.n	3746 <MQTT_HandleGameMessages+0x2e>
    37a8:	e000      	b.n	37ac <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
    37aa:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
    37ac:	4b17      	ldr	r3, [pc, #92]	; (380c <MQTT_HandleGameMessages+0xf4>)
    37ae:	0018      	movs	r0, r3
    37b0:	4b1b      	ldr	r3, [pc, #108]	; (3820 <MQTT_HandleGameMessages+0x108>)
    37b2:	4798      	blx	r3
    37b4:	0003      	movs	r3, r0
    37b6:	001a      	movs	r2, r3
    37b8:	4b14      	ldr	r3, [pc, #80]	; (380c <MQTT_HandleGameMessages+0xf4>)
    37ba:	18d2      	adds	r2, r2, r3
    37bc:	4b19      	ldr	r3, [pc, #100]	; (3824 <MQTT_HandleGameMessages+0x10c>)
    37be:	0010      	movs	r0, r2
    37c0:	0019      	movs	r1, r3
    37c2:	2303      	movs	r3, #3
    37c4:	001a      	movs	r2, r3
    37c6:	4b18      	ldr	r3, [pc, #96]	; (3828 <MQTT_HandleGameMessages+0x110>)
    37c8:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
    37ca:	4b10      	ldr	r3, [pc, #64]	; (380c <MQTT_HandleGameMessages+0xf4>)
    37cc:	0019      	movs	r1, r3
    37ce:	2001      	movs	r0, #1
    37d0:	4b16      	ldr	r3, [pc, #88]	; (382c <MQTT_HandleGameMessages+0x114>)
    37d2:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
    37d4:	4b16      	ldr	r3, [pc, #88]	; (3830 <MQTT_HandleGameMessages+0x118>)
    37d6:	0019      	movs	r1, r3
    37d8:	2001      	movs	r0, #1
    37da:	4b14      	ldr	r3, [pc, #80]	; (382c <MQTT_HandleGameMessages+0x114>)
    37dc:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
    37de:	4b0b      	ldr	r3, [pc, #44]	; (380c <MQTT_HandleGameMessages+0xf4>)
    37e0:	0018      	movs	r0, r3
    37e2:	4b0f      	ldr	r3, [pc, #60]	; (3820 <MQTT_HandleGameMessages+0x108>)
    37e4:	4798      	blx	r3
    37e6:	0004      	movs	r4, r0
    37e8:	4a08      	ldr	r2, [pc, #32]	; (380c <MQTT_HandleGameMessages+0xf4>)
    37ea:	4912      	ldr	r1, [pc, #72]	; (3834 <MQTT_HandleGameMessages+0x11c>)
    37ec:	4812      	ldr	r0, [pc, #72]	; (3838 <MQTT_HandleGameMessages+0x120>)
    37ee:	2300      	movs	r3, #0
    37f0:	9301      	str	r3, [sp, #4]
    37f2:	2301      	movs	r3, #1
    37f4:	9300      	str	r3, [sp, #0]
    37f6:	0023      	movs	r3, r4
    37f8:	4c10      	ldr	r4, [pc, #64]	; (383c <MQTT_HandleGameMessages+0x124>)
    37fa:	47a0      	blx	r4
    }
}
    37fc:	46c0      	nop			; (mov r8, r8)
    37fe:	46bd      	mov	sp, r7
    3800:	b009      	add	sp, #36	; 0x24
    3802:	bd90      	pop	{r4, r7, pc}
    3804:	200004a0 	.word	0x200004a0
    3808:	000075a9 	.word	0x000075a9
    380c:	2000002c 	.word	0x2000002c
    3810:	00022bc0 	.word	0x00022bc0
    3814:	00022ec0 	.word	0x00022ec0
    3818:	00021179 	.word	0x00021179
    381c:	0002125d 	.word	0x0002125d
    3820:	000212d7 	.word	0x000212d7
    3824:	00022ec4 	.word	0x00022ec4
    3828:	00020ee9 	.word	0x00020ee9
    382c:	0000a495 	.word	0x0000a495
    3830:	00022ec8 	.word	0x00022ec8
    3834:	00022ecc 	.word	0x00022ecc
    3838:	2000070c 	.word	0x2000070c
    383c:	0001bf99 	.word	0x0001bf99

00003840 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
    3840:	b590      	push	{r4, r7, lr}
    3842:	b08d      	sub	sp, #52	; 0x34
    3844:	af02      	add	r7, sp, #8
    3846:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
    3848:	2064      	movs	r0, #100	; 0x64
    384a:	4b79      	ldr	r3, [pc, #484]	; (3a30 <vWifiTask+0x1f0>)
    384c:	4798      	blx	r3
    init_state();
    384e:	4b79      	ldr	r3, [pc, #484]	; (3a34 <vWifiTask+0x1f4>)
    3850:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
    3852:	2200      	movs	r2, #0
    3854:	2104      	movs	r1, #4
    3856:	2005      	movs	r0, #5
    3858:	4b77      	ldr	r3, [pc, #476]	; (3a38 <vWifiTask+0x1f8>)
    385a:	4798      	blx	r3
    385c:	0002      	movs	r2, r0
    385e:	4b77      	ldr	r3, [pc, #476]	; (3a3c <vWifiTask+0x1fc>)
    3860:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
    3862:	2200      	movs	r2, #0
    3864:	2106      	movs	r1, #6
    3866:	2005      	movs	r0, #5
    3868:	4b73      	ldr	r3, [pc, #460]	; (3a38 <vWifiTask+0x1f8>)
    386a:	4798      	blx	r3
    386c:	0002      	movs	r2, r0
    386e:	4b74      	ldr	r3, [pc, #464]	; (3a40 <vWifiTask+0x200>)
    3870:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
    3872:	2200      	movs	r2, #0
    3874:	2114      	movs	r1, #20
    3876:	2002      	movs	r0, #2
    3878:	4b6f      	ldr	r3, [pc, #444]	; (3a38 <vWifiTask+0x1f8>)
    387a:	4798      	blx	r3
    387c:	0002      	movs	r2, r0
    387e:	4b71      	ldr	r3, [pc, #452]	; (3a44 <vWifiTask+0x204>)
    3880:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
    3882:	2200      	movs	r2, #0
    3884:	2102      	movs	r1, #2
    3886:	2005      	movs	r0, #5
    3888:	4b6b      	ldr	r3, [pc, #428]	; (3a38 <vWifiTask+0x1f8>)
    388a:	4798      	blx	r3
    388c:	0002      	movs	r2, r0
    388e:	4b6e      	ldr	r3, [pc, #440]	; (3a48 <vWifiTask+0x208>)
    3890:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
    3892:	4b6a      	ldr	r3, [pc, #424]	; (3a3c <vWifiTask+0x1fc>)
    3894:	681b      	ldr	r3, [r3, #0]
    3896:	2b00      	cmp	r3, #0
    3898:	d00b      	beq.n	38b2 <vWifiTask+0x72>
    389a:	4b69      	ldr	r3, [pc, #420]	; (3a40 <vWifiTask+0x200>)
    389c:	681b      	ldr	r3, [r3, #0]
    389e:	2b00      	cmp	r3, #0
    38a0:	d007      	beq.n	38b2 <vWifiTask+0x72>
    38a2:	4b68      	ldr	r3, [pc, #416]	; (3a44 <vWifiTask+0x204>)
    38a4:	681b      	ldr	r3, [r3, #0]
    38a6:	2b00      	cmp	r3, #0
    38a8:	d003      	beq.n	38b2 <vWifiTask+0x72>
    38aa:	4b67      	ldr	r3, [pc, #412]	; (3a48 <vWifiTask+0x208>)
    38ac:	681b      	ldr	r3, [r3, #0]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d103      	bne.n	38ba <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
    38b2:	4b66      	ldr	r3, [pc, #408]	; (3a4c <vWifiTask+0x20c>)
    38b4:	0018      	movs	r0, r3
    38b6:	4b66      	ldr	r3, [pc, #408]	; (3a50 <vWifiTask+0x210>)
    38b8:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
    38ba:	4b66      	ldr	r3, [pc, #408]	; (3a54 <vWifiTask+0x214>)
    38bc:	0018      	movs	r0, r3
    38be:	4b64      	ldr	r3, [pc, #400]	; (3a50 <vWifiTask+0x210>)
    38c0:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
    38c2:	4b65      	ldr	r3, [pc, #404]	; (3a58 <vWifiTask+0x218>)
    38c4:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
    38c6:	4b65      	ldr	r3, [pc, #404]	; (3a5c <vWifiTask+0x21c>)
    38c8:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
    38ca:	4b65      	ldr	r3, [pc, #404]	; (3a60 <vWifiTask+0x220>)
    38cc:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
    38ce:	4b65      	ldr	r3, [pc, #404]	; (3a64 <vWifiTask+0x224>)
    38d0:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
    38d2:	4b65      	ldr	r3, [pc, #404]	; (3a68 <vWifiTask+0x228>)
    38d4:	4798      	blx	r3
    configure_extint_callbacks();
    38d6:	4b65      	ldr	r3, [pc, #404]	; (3a6c <vWifiTask+0x22c>)
    38d8:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    38da:	230c      	movs	r3, #12
    38dc:	18fb      	adds	r3, r7, r3
    38de:	2218      	movs	r2, #24
    38e0:	2100      	movs	r1, #0
    38e2:	0018      	movs	r0, r3
    38e4:	4b62      	ldr	r3, [pc, #392]	; (3a70 <vWifiTask+0x230>)
    38e6:	4798      	blx	r3

    nm_bsp_init();
    38e8:	4b62      	ldr	r3, [pc, #392]	; (3a74 <vWifiTask+0x234>)
    38ea:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
    38ec:	230c      	movs	r3, #12
    38ee:	18fb      	adds	r3, r7, r3
    38f0:	4a61      	ldr	r2, [pc, #388]	; (3a78 <vWifiTask+0x238>)
    38f2:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
    38f4:	2327      	movs	r3, #39	; 0x27
    38f6:	18fc      	adds	r4, r7, r3
    38f8:	230c      	movs	r3, #12
    38fa:	18fb      	adds	r3, r7, r3
    38fc:	0018      	movs	r0, r3
    38fe:	4b5f      	ldr	r3, [pc, #380]	; (3a7c <vWifiTask+0x23c>)
    3900:	4798      	blx	r3
    3902:	0003      	movs	r3, r0
    3904:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
    3906:	2327      	movs	r3, #39	; 0x27
    3908:	18fb      	adds	r3, r7, r3
    390a:	781b      	ldrb	r3, [r3, #0]
    390c:	b25b      	sxtb	r3, r3
    390e:	2b00      	cmp	r3, #0
    3910:	d009      	beq.n	3926 <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
    3912:	2327      	movs	r3, #39	; 0x27
    3914:	18fb      	adds	r3, r7, r3
    3916:	2200      	movs	r2, #0
    3918:	569a      	ldrsb	r2, [r3, r2]
    391a:	4b59      	ldr	r3, [pc, #356]	; (3a80 <vWifiTask+0x240>)
    391c:	0019      	movs	r1, r3
    391e:	2001      	movs	r0, #1
    3920:	4b58      	ldr	r3, [pc, #352]	; (3a84 <vWifiTask+0x244>)
    3922:	4798      	blx	r3
        while (1) {
    3924:	e7fe      	b.n	3924 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    3926:	4a58      	ldr	r2, [pc, #352]	; (3a88 <vWifiTask+0x248>)
    3928:	4b58      	ldr	r3, [pc, #352]	; (3a8c <vWifiTask+0x24c>)
    392a:	0019      	movs	r1, r3
    392c:	2001      	movs	r0, #1
    392e:	4b55      	ldr	r3, [pc, #340]	; (3a84 <vWifiTask+0x244>)
    3930:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
    3932:	4b57      	ldr	r3, [pc, #348]	; (3a90 <vWifiTask+0x250>)
    3934:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    3936:	4a57      	ldr	r2, [pc, #348]	; (3a94 <vWifiTask+0x254>)
    3938:	4b57      	ldr	r3, [pc, #348]	; (3a98 <vWifiTask+0x258>)
    393a:	0011      	movs	r1, r2
    393c:	0018      	movs	r0, r3
    393e:	4b57      	ldr	r3, [pc, #348]	; (3a9c <vWifiTask+0x25c>)
    3940:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    3942:	4a57      	ldr	r2, [pc, #348]	; (3aa0 <vWifiTask+0x260>)
    3944:	4850      	ldr	r0, [pc, #320]	; (3a88 <vWifiTask+0x248>)
    3946:	23ff      	movs	r3, #255	; 0xff
    3948:	9300      	str	r3, [sp, #0]
    394a:	0013      	movs	r3, r2
    394c:	2202      	movs	r2, #2
    394e:	2111      	movs	r1, #17
    3950:	4c54      	ldr	r4, [pc, #336]	; (3aa4 <vWifiTask+0x264>)
    3952:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
    3954:	e006      	b.n	3964 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    3956:	2000      	movs	r0, #0
    3958:	4b53      	ldr	r3, [pc, #332]	; (3aa8 <vWifiTask+0x268>)
    395a:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    395c:	4b53      	ldr	r3, [pc, #332]	; (3aac <vWifiTask+0x26c>)
    395e:	0018      	movs	r0, r3
    3960:	4b53      	ldr	r3, [pc, #332]	; (3ab0 <vWifiTask+0x270>)
    3962:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
    3964:	2002      	movs	r0, #2
    3966:	4b53      	ldr	r3, [pc, #332]	; (3ab4 <vWifiTask+0x274>)
    3968:	4798      	blx	r3
    396a:	0003      	movs	r3, r0
    396c:	001a      	movs	r2, r3
    396e:	2301      	movs	r3, #1
    3970:	4053      	eors	r3, r2
    3972:	b2db      	uxtb	r3, r3
    3974:	2b00      	cmp	r3, #0
    3976:	d1ee      	bne.n	3956 <vWifiTask+0x116>
    }

    vTaskDelay(1000);
    3978:	23fa      	movs	r3, #250	; 0xfa
    397a:	009b      	lsls	r3, r3, #2
    397c:	0018      	movs	r0, r3
    397e:	4b2c      	ldr	r3, [pc, #176]	; (3a30 <vWifiTask+0x1f0>)
    3980:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
    3982:	4b4d      	ldr	r3, [pc, #308]	; (3ab8 <vWifiTask+0x278>)
    3984:	2201      	movs	r2, #1
    3986:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
    3988:	4b4b      	ldr	r3, [pc, #300]	; (3ab8 <vWifiTask+0x278>)
    398a:	781b      	ldrb	r3, [r3, #0]
    398c:	b25b      	sxtb	r3, r3
    398e:	2b01      	cmp	r3, #1
    3990:	d00b      	beq.n	39aa <vWifiTask+0x16a>
    3992:	dc02      	bgt.n	399a <vWifiTask+0x15a>
    3994:	2b00      	cmp	r3, #0
    3996:	d005      	beq.n	39a4 <vWifiTask+0x164>
    3998:	e010      	b.n	39bc <vWifiTask+0x17c>
    399a:	2b02      	cmp	r3, #2
    399c:	d008      	beq.n	39b0 <vWifiTask+0x170>
    399e:	2b03      	cmp	r3, #3
    39a0:	d009      	beq.n	39b6 <vWifiTask+0x176>
    39a2:	e00b      	b.n	39bc <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
    39a4:	4b45      	ldr	r3, [pc, #276]	; (3abc <vWifiTask+0x27c>)
    39a6:	4798      	blx	r3

                break;
    39a8:	e00c      	b.n	39c4 <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
    39aa:	4b45      	ldr	r3, [pc, #276]	; (3ac0 <vWifiTask+0x280>)
    39ac:	4798      	blx	r3
                break;
    39ae:	e009      	b.n	39c4 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
    39b0:	4b44      	ldr	r3, [pc, #272]	; (3ac4 <vWifiTask+0x284>)
    39b2:	4798      	blx	r3
                break;
    39b4:	e006      	b.n	39c4 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
    39b6:	4b44      	ldr	r3, [pc, #272]	; (3ac8 <vWifiTask+0x288>)
    39b8:	4798      	blx	r3
                break;
    39ba:	e003      	b.n	39c4 <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
    39bc:	4b3e      	ldr	r3, [pc, #248]	; (3ab8 <vWifiTask+0x278>)
    39be:	2200      	movs	r2, #0
    39c0:	701a      	strb	r2, [r3, #0]
                break;
    39c2:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
    39c4:	230b      	movs	r3, #11
    39c6:	18fb      	adds	r3, r7, r3
    39c8:	2200      	movs	r2, #0
    39ca:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
    39cc:	4b1b      	ldr	r3, [pc, #108]	; (3a3c <vWifiTask+0x1fc>)
    39ce:	681b      	ldr	r3, [r3, #0]
    39d0:	220b      	movs	r2, #11
    39d2:	18b9      	adds	r1, r7, r2
    39d4:	2200      	movs	r2, #0
    39d6:	0018      	movs	r0, r3
    39d8:	4b3c      	ldr	r3, [pc, #240]	; (3acc <vWifiTask+0x28c>)
    39da:	4798      	blx	r3
    39dc:	0003      	movs	r3, r0
    39de:	2b01      	cmp	r3, #1
    39e0:	d105      	bne.n	39ee <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
    39e2:	230b      	movs	r3, #11
    39e4:	18fb      	adds	r3, r7, r3
    39e6:	781b      	ldrb	r3, [r3, #0]
    39e8:	b25a      	sxtb	r2, r3
    39ea:	4b33      	ldr	r3, [pc, #204]	; (3ab8 <vWifiTask+0x278>)
    39ec:	701a      	strb	r2, [r3, #0]
        }

        // Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if (isPressed) {
    39ee:	4b38      	ldr	r3, [pc, #224]	; (3ad0 <vWifiTask+0x290>)
    39f0:	781b      	ldrb	r3, [r3, #0]
    39f2:	b2db      	uxtb	r3, r3
    39f4:	2b00      	cmp	r3, #0
    39f6:	d017      	beq.n	3a28 <vWifiTask+0x1e8>
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
    39f8:	4b36      	ldr	r3, [pc, #216]	; (3ad4 <vWifiTask+0x294>)
    39fa:	0018      	movs	r0, r3
    39fc:	4b36      	ldr	r3, [pc, #216]	; (3ad8 <vWifiTask+0x298>)
    39fe:	4798      	blx	r3
    3a00:	0004      	movs	r4, r0
    3a02:	4a34      	ldr	r2, [pc, #208]	; (3ad4 <vWifiTask+0x294>)
    3a04:	4935      	ldr	r1, [pc, #212]	; (3adc <vWifiTask+0x29c>)
    3a06:	4836      	ldr	r0, [pc, #216]	; (3ae0 <vWifiTask+0x2a0>)
    3a08:	2300      	movs	r3, #0
    3a0a:	9301      	str	r3, [sp, #4]
    3a0c:	2301      	movs	r3, #1
    3a0e:	9300      	str	r3, [sp, #0]
    3a10:	0023      	movs	r3, r4
    3a12:	4c34      	ldr	r4, [pc, #208]	; (3ae4 <vWifiTask+0x2a4>)
    3a14:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
    3a16:	4a2f      	ldr	r2, [pc, #188]	; (3ad4 <vWifiTask+0x294>)
    3a18:	4b33      	ldr	r3, [pc, #204]	; (3ae8 <vWifiTask+0x2a8>)
    3a1a:	0019      	movs	r1, r3
    3a1c:	2001      	movs	r0, #1
    3a1e:	4b19      	ldr	r3, [pc, #100]	; (3a84 <vWifiTask+0x244>)
    3a20:	4798      	blx	r3
            isPressed = false;
    3a22:	4b2b      	ldr	r3, [pc, #172]	; (3ad0 <vWifiTask+0x290>)
    3a24:	2200      	movs	r2, #0
    3a26:	701a      	strb	r2, [r3, #0]
        }

        vTaskDelay(100);
    3a28:	2064      	movs	r0, #100	; 0x64
    3a2a:	4b01      	ldr	r3, [pc, #4]	; (3a30 <vWifiTask+0x1f0>)
    3a2c:	4798      	blx	r3
    while (1) {
    3a2e:	e7ab      	b.n	3988 <vWifiTask+0x148>
    3a30:	00008755 	.word	0x00008755
    3a34:	000023c1 	.word	0x000023c1
    3a38:	00006a49 	.word	0x00006a49
    3a3c:	2000049c 	.word	0x2000049c
    3a40:	200004a4 	.word	0x200004a4
    3a44:	200004a0 	.word	0x200004a0
    3a48:	200004a8 	.word	0x200004a8
    3a4c:	00022ee0 	.word	0x00022ee0
    3a50:	0000a3a9 	.word	0x0000a3a9
    3a54:	00022f08 	.word	0x00022f08
    3a58:	00002e01 	.word	0x00002e01
    3a5c:	00002e3d 	.word	0x00002e3d
    3a60:	000032a9 	.word	0x000032a9
    3a64:	00002d1d 	.word	0x00002d1d
    3a68:	00003361 	.word	0x00003361
    3a6c:	000033a1 	.word	0x000033a1
    3a70:	00020f1f 	.word	0x00020f1f
    3a74:	0000c8b9 	.word	0x0000c8b9
    3a78:	00002bc9 	.word	0x00002bc9
    3a7c:	0000e391 	.word	0x0000e391
    3a80:	00022f24 	.word	0x00022f24
    3a84:	0000a495 	.word	0x0000a495
    3a88:	000229e8 	.word	0x000229e8
    3a8c:	00022f50 	.word	0x00022f50
    3a90:	00011af1 	.word	0x00011af1
    3a94:	00002ef5 	.word	0x00002ef5
    3a98:	00002ec1 	.word	0x00002ec1
    3a9c:	00011b89 	.word	0x00011b89
    3aa0:	000229d8 	.word	0x000229d8
    3aa4:	0000e5a1 	.word	0x0000e5a1
    3aa8:	0000e585 	.word	0x0000e585
    3aac:	200042f0 	.word	0x200042f0
    3ab0:	0001ec79 	.word	0x0001ec79
    3ab4:	00002431 	.word	0x00002431
    3ab8:	20000498 	.word	0x20000498
    3abc:	000035a1 	.word	0x000035a1
    3ac0:	0000363d 	.word	0x0000363d
    3ac4:	00003419 	.word	0x00003419
    3ac8:	000034ad 	.word	0x000034ad
    3acc:	000075a9 	.word	0x000075a9
    3ad0:	20000b44 	.word	0x20000b44
    3ad4:	2000006c 	.word	0x2000006c
    3ad8:	000212d7 	.word	0x000212d7
    3adc:	00022f74 	.word	0x00022f74
    3ae0:	2000070c 	.word	0x2000070c
    3ae4:	0001bf99 	.word	0x0001bf99
    3ae8:	00022f90 	.word	0x00022f90

00003aec <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
    3aec:	b590      	push	{r4, r7, lr}
    3aee:	b083      	sub	sp, #12
    3af0:	af00      	add	r7, sp, #0
    3af2:	0002      	movs	r2, r0
    3af4:	1dfb      	adds	r3, r7, #7
    3af6:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
    3af8:	1dfb      	adds	r3, r7, #7
    3afa:	781b      	ldrb	r3, [r3, #0]
    3afc:	2b03      	cmp	r3, #3
    3afe:	d806      	bhi.n	3b0e <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
    3b00:	4b05      	ldr	r3, [pc, #20]	; (3b18 <WifiHandlerSetState+0x2c>)
    3b02:	6818      	ldr	r0, [r3, #0]
    3b04:	1df9      	adds	r1, r7, #7
    3b06:	2300      	movs	r3, #0
    3b08:	220a      	movs	r2, #10
    3b0a:	4c04      	ldr	r4, [pc, #16]	; (3b1c <WifiHandlerSetState+0x30>)
    3b0c:	47a0      	blx	r4
    }
}
    3b0e:	46c0      	nop			; (mov r8, r8)
    3b10:	46bd      	mov	sp, r7
    3b12:	b003      	add	sp, #12
    3b14:	bd90      	pop	{r4, r7, pc}
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	2000049c 	.word	0x2000049c
    3b1c:	00006cf1 	.word	0x00006cf1

00003b20 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3b20:	b580      	push	{r7, lr}
    3b22:	b082      	sub	sp, #8
    3b24:	af00      	add	r7, sp, #0
    3b26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3b28:	687b      	ldr	r3, [r7, #4]
    3b2a:	2200      	movs	r2, #0
    3b2c:	701a      	strb	r2, [r3, #0]
}
    3b2e:	46c0      	nop			; (mov r8, r8)
    3b30:	46bd      	mov	sp, r7
    3b32:	b002      	add	sp, #8
    3b34:	bd80      	pop	{r7, pc}
	...

00003b38 <system_apb_clock_set_mask>:
{
    3b38:	b580      	push	{r7, lr}
    3b3a:	b082      	sub	sp, #8
    3b3c:	af00      	add	r7, sp, #0
    3b3e:	0002      	movs	r2, r0
    3b40:	6039      	str	r1, [r7, #0]
    3b42:	1dfb      	adds	r3, r7, #7
    3b44:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3b46:	1dfb      	adds	r3, r7, #7
    3b48:	781b      	ldrb	r3, [r3, #0]
    3b4a:	2b01      	cmp	r3, #1
    3b4c:	d00a      	beq.n	3b64 <system_apb_clock_set_mask+0x2c>
    3b4e:	2b02      	cmp	r3, #2
    3b50:	d00f      	beq.n	3b72 <system_apb_clock_set_mask+0x3a>
    3b52:	2b00      	cmp	r3, #0
    3b54:	d114      	bne.n	3b80 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3b56:	4b0e      	ldr	r3, [pc, #56]	; (3b90 <system_apb_clock_set_mask+0x58>)
    3b58:	4a0d      	ldr	r2, [pc, #52]	; (3b90 <system_apb_clock_set_mask+0x58>)
    3b5a:	6991      	ldr	r1, [r2, #24]
    3b5c:	683a      	ldr	r2, [r7, #0]
    3b5e:	430a      	orrs	r2, r1
    3b60:	619a      	str	r2, [r3, #24]
			break;
    3b62:	e00f      	b.n	3b84 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3b64:	4b0a      	ldr	r3, [pc, #40]	; (3b90 <system_apb_clock_set_mask+0x58>)
    3b66:	4a0a      	ldr	r2, [pc, #40]	; (3b90 <system_apb_clock_set_mask+0x58>)
    3b68:	69d1      	ldr	r1, [r2, #28]
    3b6a:	683a      	ldr	r2, [r7, #0]
    3b6c:	430a      	orrs	r2, r1
    3b6e:	61da      	str	r2, [r3, #28]
			break;
    3b70:	e008      	b.n	3b84 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3b72:	4b07      	ldr	r3, [pc, #28]	; (3b90 <system_apb_clock_set_mask+0x58>)
    3b74:	4a06      	ldr	r2, [pc, #24]	; (3b90 <system_apb_clock_set_mask+0x58>)
    3b76:	6a11      	ldr	r1, [r2, #32]
    3b78:	683a      	ldr	r2, [r7, #0]
    3b7a:	430a      	orrs	r2, r1
    3b7c:	621a      	str	r2, [r3, #32]
			break;
    3b7e:	e001      	b.n	3b84 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3b80:	2317      	movs	r3, #23
    3b82:	e000      	b.n	3b86 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3b84:	2300      	movs	r3, #0
}
    3b86:	0018      	movs	r0, r3
    3b88:	46bd      	mov	sp, r7
    3b8a:	b002      	add	sp, #8
    3b8c:	bd80      	pop	{r7, pc}
    3b8e:	46c0      	nop			; (mov r8, r8)
    3b90:	40000400 	.word	0x40000400

00003b94 <system_pinmux_get_config_defaults>:
{
    3b94:	b580      	push	{r7, lr}
    3b96:	b082      	sub	sp, #8
    3b98:	af00      	add	r7, sp, #0
    3b9a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3b9c:	687b      	ldr	r3, [r7, #4]
    3b9e:	2280      	movs	r2, #128	; 0x80
    3ba0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3ba2:	687b      	ldr	r3, [r7, #4]
    3ba4:	2200      	movs	r2, #0
    3ba6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3ba8:	687b      	ldr	r3, [r7, #4]
    3baa:	2201      	movs	r2, #1
    3bac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3bae:	687b      	ldr	r3, [r7, #4]
    3bb0:	2200      	movs	r2, #0
    3bb2:	70da      	strb	r2, [r3, #3]
}
    3bb4:	46c0      	nop			; (mov r8, r8)
    3bb6:	46bd      	mov	sp, r7
    3bb8:	b002      	add	sp, #8
    3bba:	bd80      	pop	{r7, pc}

00003bbc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3bbc:	b580      	push	{r7, lr}
    3bbe:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3bc0:	4b05      	ldr	r3, [pc, #20]	; (3bd8 <system_is_debugger_present+0x1c>)
    3bc2:	789b      	ldrb	r3, [r3, #2]
    3bc4:	b2db      	uxtb	r3, r3
    3bc6:	001a      	movs	r2, r3
    3bc8:	2302      	movs	r3, #2
    3bca:	4013      	ands	r3, r2
    3bcc:	1e5a      	subs	r2, r3, #1
    3bce:	4193      	sbcs	r3, r2
    3bd0:	b2db      	uxtb	r3, r3
}
    3bd2:	0018      	movs	r0, r3
    3bd4:	46bd      	mov	sp, r7
    3bd6:	bd80      	pop	{r7, pc}
    3bd8:	41002000 	.word	0x41002000

00003bdc <system_interrupt_enter_critical_section>:
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3be0:	4b02      	ldr	r3, [pc, #8]	; (3bec <system_interrupt_enter_critical_section+0x10>)
    3be2:	4798      	blx	r3
}
    3be4:	46c0      	nop			; (mov r8, r8)
    3be6:	46bd      	mov	sp, r7
    3be8:	bd80      	pop	{r7, pc}
    3bea:	46c0      	nop			; (mov r8, r8)
    3bec:	000127e9 	.word	0x000127e9

00003bf0 <system_interrupt_leave_critical_section>:
{
    3bf0:	b580      	push	{r7, lr}
    3bf2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    3bf4:	4b02      	ldr	r3, [pc, #8]	; (3c00 <system_interrupt_leave_critical_section+0x10>)
    3bf6:	4798      	blx	r3
}
    3bf8:	46c0      	nop			; (mov r8, r8)
    3bfa:	46bd      	mov	sp, r7
    3bfc:	bd80      	pop	{r7, pc}
    3bfe:	46c0      	nop			; (mov r8, r8)
    3c00:	0001283d 	.word	0x0001283d

00003c04 <system_interrupt_disable>:
{
    3c04:	b580      	push	{r7, lr}
    3c06:	b082      	sub	sp, #8
    3c08:	af00      	add	r7, sp, #0
    3c0a:	0002      	movs	r2, r0
    3c0c:	1dfb      	adds	r3, r7, #7
    3c0e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3c10:	4a07      	ldr	r2, [pc, #28]	; (3c30 <system_interrupt_disable+0x2c>)
    3c12:	1dfb      	adds	r3, r7, #7
    3c14:	781b      	ldrb	r3, [r3, #0]
    3c16:	0019      	movs	r1, r3
    3c18:	231f      	movs	r3, #31
    3c1a:	400b      	ands	r3, r1
    3c1c:	2101      	movs	r1, #1
    3c1e:	4099      	lsls	r1, r3
    3c20:	000b      	movs	r3, r1
    3c22:	0019      	movs	r1, r3
    3c24:	2380      	movs	r3, #128	; 0x80
    3c26:	50d1      	str	r1, [r2, r3]
}
    3c28:	46c0      	nop			; (mov r8, r8)
    3c2a:	46bd      	mov	sp, r7
    3c2c:	b002      	add	sp, #8
    3c2e:	bd80      	pop	{r7, pc}
    3c30:	e000e100 	.word	0xe000e100

00003c34 <i2c_master_is_syncing>:
{
    3c34:	b580      	push	{r7, lr}
    3c36:	b084      	sub	sp, #16
    3c38:	af00      	add	r7, sp, #0
    3c3a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3c3c:	687b      	ldr	r3, [r7, #4]
    3c3e:	681b      	ldr	r3, [r3, #0]
    3c40:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3c42:	68fb      	ldr	r3, [r7, #12]
    3c44:	69db      	ldr	r3, [r3, #28]
    3c46:	2207      	movs	r2, #7
    3c48:	4013      	ands	r3, r2
    3c4a:	1e5a      	subs	r2, r3, #1
    3c4c:	4193      	sbcs	r3, r2
    3c4e:	b2db      	uxtb	r3, r3
}
    3c50:	0018      	movs	r0, r3
    3c52:	46bd      	mov	sp, r7
    3c54:	b004      	add	sp, #16
    3c56:	bd80      	pop	{r7, pc}

00003c58 <_i2c_master_wait_for_sync>:
{
    3c58:	b580      	push	{r7, lr}
    3c5a:	b082      	sub	sp, #8
    3c5c:	af00      	add	r7, sp, #0
    3c5e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    3c60:	46c0      	nop			; (mov r8, r8)
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	0018      	movs	r0, r3
    3c66:	4b04      	ldr	r3, [pc, #16]	; (3c78 <_i2c_master_wait_for_sync+0x20>)
    3c68:	4798      	blx	r3
    3c6a:	1e03      	subs	r3, r0, #0
    3c6c:	d1f9      	bne.n	3c62 <_i2c_master_wait_for_sync+0xa>
}
    3c6e:	46c0      	nop			; (mov r8, r8)
    3c70:	46bd      	mov	sp, r7
    3c72:	b002      	add	sp, #8
    3c74:	bd80      	pop	{r7, pc}
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	00003c35 	.word	0x00003c35

00003c7c <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    3c7c:	b580      	push	{r7, lr}
    3c7e:	b084      	sub	sp, #16
    3c80:	af00      	add	r7, sp, #0
    3c82:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	681b      	ldr	r3, [r3, #0]
    3c88:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	681b      	ldr	r3, [r3, #0]
    3c8e:	0018      	movs	r0, r3
    3c90:	4b0d      	ldr	r3, [pc, #52]	; (3cc8 <i2c_master_disable+0x4c>)
    3c92:	4798      	blx	r3
    3c94:	0003      	movs	r3, r0
    3c96:	0018      	movs	r0, r3
    3c98:	4b0c      	ldr	r3, [pc, #48]	; (3ccc <i2c_master_disable+0x50>)
    3c9a:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    3c9c:	687b      	ldr	r3, [r7, #4]
    3c9e:	0018      	movs	r0, r3
    3ca0:	4b0b      	ldr	r3, [pc, #44]	; (3cd0 <i2c_master_disable+0x54>)
    3ca2:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    3ca4:	68fb      	ldr	r3, [r7, #12]
    3ca6:	2283      	movs	r2, #131	; 0x83
    3ca8:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    3caa:	68fb      	ldr	r3, [r7, #12]
    3cac:	2283      	movs	r2, #131	; 0x83
    3cae:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    3cb0:	68fb      	ldr	r3, [r7, #12]
    3cb2:	681b      	ldr	r3, [r3, #0]
    3cb4:	2202      	movs	r2, #2
    3cb6:	4393      	bics	r3, r2
    3cb8:	001a      	movs	r2, r3
    3cba:	68fb      	ldr	r3, [r7, #12]
    3cbc:	601a      	str	r2, [r3, #0]

}
    3cbe:	46c0      	nop			; (mov r8, r8)
    3cc0:	46bd      	mov	sp, r7
    3cc2:	b004      	add	sp, #16
    3cc4:	bd80      	pop	{r7, pc}
    3cc6:	46c0      	nop			; (mov r8, r8)
    3cc8:	00013cbd 	.word	0x00013cbd
    3ccc:	00003c05 	.word	0x00003c05
    3cd0:	00003c59 	.word	0x00003c59

00003cd4 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    3cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cd6:	b097      	sub	sp, #92	; 0x5c
    3cd8:	af00      	add	r7, sp, #0
    3cda:	6178      	str	r0, [r7, #20]
    3cdc:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    3cde:	2300      	movs	r3, #0
    3ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    3ce2:	2300      	movs	r3, #0
    3ce4:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    3ce6:	2300      	movs	r3, #0
    3ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    3cea:	233b      	movs	r3, #59	; 0x3b
    3cec:	2210      	movs	r2, #16
    3cee:	4694      	mov	ip, r2
    3cf0:	44bc      	add	ip, r7
    3cf2:	4463      	add	r3, ip
    3cf4:	2200      	movs	r2, #0
    3cf6:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3cf8:	697b      	ldr	r3, [r7, #20]
    3cfa:	681b      	ldr	r3, [r3, #0]
    3cfc:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    3cfe:	697b      	ldr	r3, [r7, #20]
    3d00:	681b      	ldr	r3, [r3, #0]
    3d02:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    3d04:	2323      	movs	r3, #35	; 0x23
    3d06:	2210      	movs	r2, #16
    3d08:	18ba      	adds	r2, r7, r2
    3d0a:	18d4      	adds	r4, r2, r3
    3d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d0e:	0018      	movs	r0, r3
    3d10:	4bc0      	ldr	r3, [pc, #768]	; (4014 <_i2c_master_set_config+0x340>)
    3d12:	4798      	blx	r3
    3d14:	0003      	movs	r3, r0
    3d16:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3d18:	230c      	movs	r3, #12
    3d1a:	2210      	movs	r2, #16
    3d1c:	4694      	mov	ip, r2
    3d1e:	44bc      	add	ip, r7
    3d20:	4463      	add	r3, ip
    3d22:	0018      	movs	r0, r3
    3d24:	4bbc      	ldr	r3, [pc, #752]	; (4018 <_i2c_master_set_config+0x344>)
    3d26:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    3d28:	693b      	ldr	r3, [r7, #16]
    3d2a:	69db      	ldr	r3, [r3, #28]
    3d2c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    3d2e:	693b      	ldr	r3, [r7, #16]
    3d30:	6a1b      	ldr	r3, [r3, #32]
    3d32:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    3d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3d36:	2b00      	cmp	r3, #0
    3d38:	d106      	bne.n	3d48 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d3c:	2100      	movs	r1, #0
    3d3e:	0018      	movs	r0, r3
    3d40:	4bb6      	ldr	r3, [pc, #728]	; (401c <_i2c_master_set_config+0x348>)
    3d42:	4798      	blx	r3
    3d44:	0003      	movs	r3, r0
    3d46:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    3d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3d4a:	b2da      	uxtb	r2, r3
    3d4c:	230c      	movs	r3, #12
    3d4e:	2110      	movs	r1, #16
    3d50:	468c      	mov	ip, r1
    3d52:	44bc      	add	ip, r7
    3d54:	4463      	add	r3, ip
    3d56:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3d58:	230c      	movs	r3, #12
    3d5a:	2210      	movs	r2, #16
    3d5c:	4694      	mov	ip, r2
    3d5e:	44bc      	add	ip, r7
    3d60:	4463      	add	r3, ip
    3d62:	2202      	movs	r2, #2
    3d64:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    3d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3d68:	0c1b      	lsrs	r3, r3, #16
    3d6a:	b2db      	uxtb	r3, r3
    3d6c:	220c      	movs	r2, #12
    3d6e:	2110      	movs	r1, #16
    3d70:	468c      	mov	ip, r1
    3d72:	44bc      	add	ip, r7
    3d74:	4462      	add	r2, ip
    3d76:	0011      	movs	r1, r2
    3d78:	0018      	movs	r0, r3
    3d7a:	4ba9      	ldr	r3, [pc, #676]	; (4020 <_i2c_master_set_config+0x34c>)
    3d7c:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    3d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3d80:	2b00      	cmp	r3, #0
    3d82:	d106      	bne.n	3d92 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    3d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d86:	2101      	movs	r1, #1
    3d88:	0018      	movs	r0, r3
    3d8a:	4ba4      	ldr	r3, [pc, #656]	; (401c <_i2c_master_set_config+0x348>)
    3d8c:	4798      	blx	r3
    3d8e:	0003      	movs	r3, r0
    3d90:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    3d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3d94:	b2da      	uxtb	r2, r3
    3d96:	230c      	movs	r3, #12
    3d98:	2110      	movs	r1, #16
    3d9a:	468c      	mov	ip, r1
    3d9c:	44bc      	add	ip, r7
    3d9e:	4463      	add	r3, ip
    3da0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3da2:	230c      	movs	r3, #12
    3da4:	2210      	movs	r2, #16
    3da6:	4694      	mov	ip, r2
    3da8:	44bc      	add	ip, r7
    3daa:	4463      	add	r3, ip
    3dac:	2202      	movs	r2, #2
    3dae:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    3db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3db2:	0c1b      	lsrs	r3, r3, #16
    3db4:	b2db      	uxtb	r3, r3
    3db6:	220c      	movs	r2, #12
    3db8:	2110      	movs	r1, #16
    3dba:	468c      	mov	ip, r1
    3dbc:	44bc      	add	ip, r7
    3dbe:	4462      	add	r2, ip
    3dc0:	0011      	movs	r1, r2
    3dc2:	0018      	movs	r0, r3
    3dc4:	4b96      	ldr	r3, [pc, #600]	; (4020 <_i2c_master_set_config+0x34c>)
    3dc6:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3dc8:	693b      	ldr	r3, [r7, #16]
    3dca:	8a9a      	ldrh	r2, [r3, #20]
    3dcc:	697b      	ldr	r3, [r7, #20]
    3dce:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    3dd0:	693b      	ldr	r3, [r7, #16]
    3dd2:	8ada      	ldrh	r2, [r3, #22]
    3dd4:	697b      	ldr	r3, [r7, #20]
    3dd6:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3dd8:	693b      	ldr	r3, [r7, #16]
    3dda:	7e1b      	ldrb	r3, [r3, #24]
    3ddc:	2b00      	cmp	r3, #0
    3dde:	d103      	bne.n	3de8 <_i2c_master_set_config+0x114>
    3de0:	4b90      	ldr	r3, [pc, #576]	; (4024 <_i2c_master_set_config+0x350>)
    3de2:	4798      	blx	r3
    3de4:	1e03      	subs	r3, r0, #0
    3de6:	d002      	beq.n	3dee <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3de8:	2380      	movs	r3, #128	; 0x80
    3dea:	657b      	str	r3, [r7, #84]	; 0x54
    3dec:	e001      	b.n	3df2 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    3dee:	2300      	movs	r3, #0
    3df0:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    3df2:	693b      	ldr	r3, [r7, #16]
    3df4:	691b      	ldr	r3, [r3, #16]
    3df6:	2b00      	cmp	r3, #0
    3df8:	d004      	beq.n	3e04 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    3dfa:	693b      	ldr	r3, [r7, #16]
    3dfc:	691b      	ldr	r3, [r3, #16]
    3dfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3e00:	4313      	orrs	r3, r2
    3e02:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    3e04:	693b      	ldr	r3, [r7, #16]
    3e06:	689b      	ldr	r3, [r3, #8]
    3e08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3e0a:	4313      	orrs	r3, r2
    3e0c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    3e0e:	693b      	ldr	r3, [r7, #16]
    3e10:	2224      	movs	r2, #36	; 0x24
    3e12:	5c9b      	ldrb	r3, [r3, r2]
    3e14:	2b00      	cmp	r3, #0
    3e16:	d004      	beq.n	3e22 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e1a:	2280      	movs	r2, #128	; 0x80
    3e1c:	05d2      	lsls	r2, r2, #23
    3e1e:	4313      	orrs	r3, r2
    3e20:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    3e22:	693b      	ldr	r3, [r7, #16]
    3e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e26:	2b00      	cmp	r3, #0
    3e28:	d004      	beq.n	3e34 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    3e2a:	693b      	ldr	r3, [r7, #16]
    3e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3e30:	4313      	orrs	r3, r2
    3e32:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    3e34:	693b      	ldr	r3, [r7, #16]
    3e36:	222c      	movs	r2, #44	; 0x2c
    3e38:	5c9b      	ldrb	r3, [r3, r2]
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	d105      	bne.n	3e4a <_i2c_master_set_config+0x176>
    3e3e:	693b      	ldr	r3, [r7, #16]
    3e40:	689a      	ldr	r2, [r3, #8]
    3e42:	2380      	movs	r3, #128	; 0x80
    3e44:	049b      	lsls	r3, r3, #18
    3e46:	429a      	cmp	r2, r3
    3e48:	d104      	bne.n	3e54 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    3e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e4c:	2280      	movs	r2, #128	; 0x80
    3e4e:	0512      	lsls	r2, r2, #20
    3e50:	4313      	orrs	r3, r2
    3e52:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    3e54:	693b      	ldr	r3, [r7, #16]
    3e56:	222d      	movs	r2, #45	; 0x2d
    3e58:	5c9b      	ldrb	r3, [r3, r2]
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d004      	beq.n	3e68 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e60:	2280      	movs	r2, #128	; 0x80
    3e62:	0412      	lsls	r2, r2, #16
    3e64:	4313      	orrs	r3, r2
    3e66:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    3e68:	693b      	ldr	r3, [r7, #16]
    3e6a:	222e      	movs	r2, #46	; 0x2e
    3e6c:	5c9b      	ldrb	r3, [r3, r2]
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d004      	beq.n	3e7c <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    3e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e74:	2280      	movs	r2, #128	; 0x80
    3e76:	03d2      	lsls	r2, r2, #15
    3e78:	4313      	orrs	r3, r2
    3e7a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    3e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e7e:	681a      	ldr	r2, [r3, #0]
    3e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e82:	431a      	orrs	r2, r3
    3e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e86:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    3e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e8a:	2280      	movs	r2, #128	; 0x80
    3e8c:	0052      	lsls	r2, r2, #1
    3e8e:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    3e90:	2323      	movs	r3, #35	; 0x23
    3e92:	2210      	movs	r2, #16
    3e94:	4694      	mov	ip, r2
    3e96:	44bc      	add	ip, r7
    3e98:	4463      	add	r3, ip
    3e9a:	781b      	ldrb	r3, [r3, #0]
    3e9c:	3314      	adds	r3, #20
    3e9e:	b2db      	uxtb	r3, r3
    3ea0:	0018      	movs	r0, r3
    3ea2:	4b61      	ldr	r3, [pc, #388]	; (4028 <_i2c_master_set_config+0x354>)
    3ea4:	4798      	blx	r3
    3ea6:	0003      	movs	r3, r0
    3ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    3eaa:	693b      	ldr	r3, [r7, #16]
    3eac:	681b      	ldr	r3, [r3, #0]
    3eae:	22fa      	movs	r2, #250	; 0xfa
    3eb0:	0092      	lsls	r2, r2, #2
    3eb2:	4353      	muls	r3, r2
    3eb4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    3eb6:	693b      	ldr	r3, [r7, #16]
    3eb8:	685b      	ldr	r3, [r3, #4]
    3eba:	22fa      	movs	r2, #250	; 0xfa
    3ebc:	0092      	lsls	r2, r2, #2
    3ebe:	4353      	muls	r3, r2
    3ec0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    3ec2:	693b      	ldr	r3, [r7, #16]
    3ec4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3ec6:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    3ec8:	4b58      	ldr	r3, [pc, #352]	; (402c <_i2c_master_set_config+0x358>)
    3eca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3ecc:	4798      	blx	r3
    3ece:	0005      	movs	r5, r0
    3ed0:	000e      	movs	r6, r1
    3ed2:	4b56      	ldr	r3, [pc, #344]	; (402c <_i2c_master_set_config+0x358>)
    3ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3ed6:	4798      	blx	r3
    3ed8:	60b8      	str	r0, [r7, #8]
    3eda:	60f9      	str	r1, [r7, #12]
    3edc:	4b53      	ldr	r3, [pc, #332]	; (402c <_i2c_master_set_config+0x358>)
    3ede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3ee0:	4798      	blx	r3
    3ee2:	4c53      	ldr	r4, [pc, #332]	; (4030 <_i2c_master_set_config+0x35c>)
    3ee4:	4a53      	ldr	r2, [pc, #332]	; (4034 <_i2c_master_set_config+0x360>)
    3ee6:	4b54      	ldr	r3, [pc, #336]	; (4038 <_i2c_master_set_config+0x364>)
    3ee8:	47a0      	blx	r4
    3eea:	0003      	movs	r3, r0
    3eec:	000c      	movs	r4, r1
    3eee:	603b      	str	r3, [r7, #0]
    3ef0:	607c      	str	r4, [r7, #4]
    3ef2:	4b4e      	ldr	r3, [pc, #312]	; (402c <_i2c_master_set_config+0x358>)
    3ef4:	6a38      	ldr	r0, [r7, #32]
    3ef6:	4798      	blx	r3
    3ef8:	0002      	movs	r2, r0
    3efa:	000b      	movs	r3, r1
    3efc:	4c4c      	ldr	r4, [pc, #304]	; (4030 <_i2c_master_set_config+0x35c>)
    3efe:	6838      	ldr	r0, [r7, #0]
    3f00:	6879      	ldr	r1, [r7, #4]
    3f02:	47a0      	blx	r4
    3f04:	0003      	movs	r3, r0
    3f06:	000c      	movs	r4, r1
    3f08:	0018      	movs	r0, r3
    3f0a:	0021      	movs	r1, r4
    3f0c:	4c4b      	ldr	r4, [pc, #300]	; (403c <_i2c_master_set_config+0x368>)
    3f0e:	2200      	movs	r2, #0
    3f10:	4b4b      	ldr	r3, [pc, #300]	; (4040 <_i2c_master_set_config+0x36c>)
    3f12:	47a0      	blx	r4
    3f14:	0003      	movs	r3, r0
    3f16:	000c      	movs	r4, r1
    3f18:	001a      	movs	r2, r3
    3f1a:	0023      	movs	r3, r4
    3f1c:	4c44      	ldr	r4, [pc, #272]	; (4030 <_i2c_master_set_config+0x35c>)
    3f1e:	68b8      	ldr	r0, [r7, #8]
    3f20:	68f9      	ldr	r1, [r7, #12]
    3f22:	47a0      	blx	r4
    3f24:	0003      	movs	r3, r0
    3f26:	000c      	movs	r4, r1
    3f28:	001a      	movs	r2, r3
    3f2a:	0023      	movs	r3, r4
    3f2c:	4c45      	ldr	r4, [pc, #276]	; (4044 <_i2c_master_set_config+0x370>)
    3f2e:	0028      	movs	r0, r5
    3f30:	0031      	movs	r1, r6
    3f32:	47a0      	blx	r4
    3f34:	0003      	movs	r3, r0
    3f36:	000c      	movs	r4, r1
    3f38:	001d      	movs	r5, r3
    3f3a:	0026      	movs	r6, r4
    3f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f3e:	005a      	lsls	r2, r3, #1
    3f40:	4b3a      	ldr	r3, [pc, #232]	; (402c <_i2c_master_set_config+0x358>)
    3f42:	0010      	movs	r0, r2
    3f44:	4798      	blx	r3
    3f46:	0002      	movs	r2, r0
    3f48:	000b      	movs	r3, r1
    3f4a:	4c3c      	ldr	r4, [pc, #240]	; (403c <_i2c_master_set_config+0x368>)
    3f4c:	0028      	movs	r0, r5
    3f4e:	0031      	movs	r1, r6
    3f50:	47a0      	blx	r4
    3f52:	0003      	movs	r3, r0
    3f54:	000c      	movs	r4, r1
    3f56:	0018      	movs	r0, r3
    3f58:	0021      	movs	r1, r4
    3f5a:	4c3a      	ldr	r4, [pc, #232]	; (4044 <_i2c_master_set_config+0x370>)
    3f5c:	2200      	movs	r2, #0
    3f5e:	4b3a      	ldr	r3, [pc, #232]	; (4048 <_i2c_master_set_config+0x374>)
    3f60:	47a0      	blx	r4
    3f62:	0003      	movs	r3, r0
    3f64:	000c      	movs	r4, r1
    3f66:	001d      	movs	r5, r3
    3f68:	0026      	movs	r6, r4
    3f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f6c:	005a      	lsls	r2, r3, #1
    3f6e:	4b2f      	ldr	r3, [pc, #188]	; (402c <_i2c_master_set_config+0x358>)
    3f70:	0010      	movs	r0, r2
    3f72:	4798      	blx	r3
    3f74:	0002      	movs	r2, r0
    3f76:	000b      	movs	r3, r1
    3f78:	4c34      	ldr	r4, [pc, #208]	; (404c <_i2c_master_set_config+0x378>)
    3f7a:	0028      	movs	r0, r5
    3f7c:	0031      	movs	r1, r6
    3f7e:	47a0      	blx	r4
    3f80:	0003      	movs	r3, r0
    3f82:	000c      	movs	r4, r1
    3f84:	0019      	movs	r1, r3
    3f86:	0022      	movs	r2, r4
    3f88:	4b31      	ldr	r3, [pc, #196]	; (4050 <_i2c_master_set_config+0x37c>)
    3f8a:	0008      	movs	r0, r1
    3f8c:	0011      	movs	r1, r2
    3f8e:	4798      	blx	r3
    3f90:	0003      	movs	r3, r0
    3f92:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    3f94:	693b      	ldr	r3, [r7, #16]
    3f96:	689a      	ldr	r2, [r3, #8]
    3f98:	2380      	movs	r3, #128	; 0x80
    3f9a:	049b      	lsls	r3, r3, #18
    3f9c:	429a      	cmp	r2, r3
    3f9e:	d16a      	bne.n	4076 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    3fa0:	4b22      	ldr	r3, [pc, #136]	; (402c <_i2c_master_set_config+0x358>)
    3fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3fa4:	4798      	blx	r3
    3fa6:	4c25      	ldr	r4, [pc, #148]	; (403c <_i2c_master_set_config+0x368>)
    3fa8:	0002      	movs	r2, r0
    3faa:	000b      	movs	r3, r1
    3fac:	47a0      	blx	r4
    3fae:	0003      	movs	r3, r0
    3fb0:	000c      	movs	r4, r1
    3fb2:	001d      	movs	r5, r3
    3fb4:	0026      	movs	r6, r4
    3fb6:	4b1d      	ldr	r3, [pc, #116]	; (402c <_i2c_master_set_config+0x358>)
    3fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3fba:	4798      	blx	r3
    3fbc:	4c1c      	ldr	r4, [pc, #112]	; (4030 <_i2c_master_set_config+0x35c>)
    3fbe:	2200      	movs	r2, #0
    3fc0:	4b24      	ldr	r3, [pc, #144]	; (4054 <_i2c_master_set_config+0x380>)
    3fc2:	47a0      	blx	r4
    3fc4:	0003      	movs	r3, r0
    3fc6:	000c      	movs	r4, r1
    3fc8:	001a      	movs	r2, r3
    3fca:	0023      	movs	r3, r4
    3fcc:	4c1f      	ldr	r4, [pc, #124]	; (404c <_i2c_master_set_config+0x378>)
    3fce:	0028      	movs	r0, r5
    3fd0:	0031      	movs	r1, r6
    3fd2:	47a0      	blx	r4
    3fd4:	0003      	movs	r3, r0
    3fd6:	000c      	movs	r4, r1
    3fd8:	0018      	movs	r0, r3
    3fda:	0021      	movs	r1, r4
    3fdc:	4c19      	ldr	r4, [pc, #100]	; (4044 <_i2c_master_set_config+0x370>)
    3fde:	2200      	movs	r2, #0
    3fe0:	4b19      	ldr	r3, [pc, #100]	; (4048 <_i2c_master_set_config+0x374>)
    3fe2:	47a0      	blx	r4
    3fe4:	0003      	movs	r3, r0
    3fe6:	000c      	movs	r4, r1
    3fe8:	0019      	movs	r1, r3
    3fea:	0022      	movs	r2, r4
    3fec:	4b18      	ldr	r3, [pc, #96]	; (4050 <_i2c_master_set_config+0x37c>)
    3fee:	0008      	movs	r0, r1
    3ff0:	0011      	movs	r1, r2
    3ff2:	4798      	blx	r3
    3ff4:	0003      	movs	r3, r0
    3ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    3ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3ffa:	2b00      	cmp	r3, #0
    3ffc:	d02e      	beq.n	405c <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    3ffe:	4b16      	ldr	r3, [pc, #88]	; (4058 <_i2c_master_set_config+0x384>)
    4000:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    4004:	4798      	blx	r3
    4006:	0003      	movs	r3, r0
    4008:	1e9a      	subs	r2, r3, #2
    400a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    400c:	1ad3      	subs	r3, r2, r3
    400e:	653b      	str	r3, [r7, #80]	; 0x50
    4010:	e031      	b.n	4076 <_i2c_master_set_config+0x3a2>
    4012:	46c0      	nop			; (mov r8, r8)
    4014:	00013bed 	.word	0x00013bed
    4018:	00003b95 	.word	0x00003b95
    401c:	00013a31 	.word	0x00013a31
    4020:	000167dd 	.word	0x000167dd
    4024:	00003bbd 	.word	0x00003bbd
    4028:	000165a1 	.word	0x000165a1
    402c:	00020dc1 	.word	0x00020dc1
    4030:	0002022d 	.word	0x0002022d
    4034:	e826d695 	.word	0xe826d695
    4038:	3e112e0b 	.word	0x3e112e0b
    403c:	0001f5a5 	.word	0x0001f5a5
    4040:	40240000 	.word	0x40240000
    4044:	0002072d 	.word	0x0002072d
    4048:	3ff00000 	.word	0x3ff00000
    404c:	0001fbc5 	.word	0x0001fbc5
    4050:	00020d59 	.word	0x00020d59
    4054:	40080000 	.word	0x40080000
    4058:	0001ef45 	.word	0x0001ef45
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    405e:	005a      	lsls	r2, r3, #1
    4060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4062:	18d3      	adds	r3, r2, r3
    4064:	1e5a      	subs	r2, r3, #1
    4066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4068:	0059      	lsls	r1, r3, #1
    406a:	4b1d      	ldr	r3, [pc, #116]	; (40e0 <_i2c_master_set_config+0x40c>)
    406c:	0010      	movs	r0, r2
    406e:	4798      	blx	r3
    4070:	0003      	movs	r3, r0
    4072:	3b01      	subs	r3, #1
    4074:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4078:	2bff      	cmp	r3, #255	; 0xff
    407a:	dc08      	bgt.n	408e <_i2c_master_set_config+0x3ba>
    407c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    407e:	2b00      	cmp	r3, #0
    4080:	db05      	blt.n	408e <_i2c_master_set_config+0x3ba>
    4082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4084:	2bff      	cmp	r3, #255	; 0xff
    4086:	dc02      	bgt.n	408e <_i2c_master_set_config+0x3ba>
    4088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    408a:	2b00      	cmp	r3, #0
    408c:	da06      	bge.n	409c <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    408e:	233b      	movs	r3, #59	; 0x3b
    4090:	2210      	movs	r2, #16
    4092:	4694      	mov	ip, r2
    4094:	44bc      	add	ip, r7
    4096:	4463      	add	r3, ip
    4098:	2240      	movs	r2, #64	; 0x40
    409a:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    409c:	233b      	movs	r3, #59	; 0x3b
    409e:	2210      	movs	r2, #16
    40a0:	4694      	mov	ip, r2
    40a2:	44bc      	add	ip, r7
    40a4:	4463      	add	r3, ip
    40a6:	781b      	ldrb	r3, [r3, #0]
    40a8:	2b40      	cmp	r3, #64	; 0x40
    40aa:	d00e      	beq.n	40ca <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    40ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    40ae:	22ff      	movs	r2, #255	; 0xff
    40b0:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    40b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    40b4:	041b      	lsls	r3, r3, #16
    40b6:	0019      	movs	r1, r3
    40b8:	23ff      	movs	r3, #255	; 0xff
    40ba:	041b      	lsls	r3, r3, #16
    40bc:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    40be:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    40c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    40c2:	0612      	lsls	r2, r2, #24
    40c4:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    40c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    40c8:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    40ca:	233b      	movs	r3, #59	; 0x3b
    40cc:	2210      	movs	r2, #16
    40ce:	4694      	mov	ip, r2
    40d0:	44bc      	add	ip, r7
    40d2:	4463      	add	r3, ip
    40d4:	781b      	ldrb	r3, [r3, #0]
}
    40d6:	0018      	movs	r0, r3
    40d8:	46bd      	mov	sp, r7
    40da:	b017      	add	sp, #92	; 0x5c
    40dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	0001ef45 	.word	0x0001ef45

000040e4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    40e4:	b590      	push	{r4, r7, lr}
    40e6:	b08b      	sub	sp, #44	; 0x2c
    40e8:	af00      	add	r7, sp, #0
    40ea:	60f8      	str	r0, [r7, #12]
    40ec:	60b9      	str	r1, [r7, #8]
    40ee:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    40f0:	68fb      	ldr	r3, [r7, #12]
    40f2:	68ba      	ldr	r2, [r7, #8]
    40f4:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    40f6:	68fb      	ldr	r3, [r7, #12]
    40f8:	681b      	ldr	r3, [r3, #0]
    40fa:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    40fc:	68fb      	ldr	r3, [r7, #12]
    40fe:	681b      	ldr	r3, [r3, #0]
    4100:	0018      	movs	r0, r3
    4102:	4b3b      	ldr	r3, [pc, #236]	; (41f0 <i2c_master_init+0x10c>)
    4104:	4798      	blx	r3
    4106:	0003      	movs	r3, r0
    4108:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    410a:	6a3b      	ldr	r3, [r7, #32]
    410c:	3302      	adds	r3, #2
    410e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4110:	6a3b      	ldr	r3, [r7, #32]
    4112:	3314      	adds	r3, #20
    4114:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4116:	2201      	movs	r2, #1
    4118:	69fb      	ldr	r3, [r7, #28]
    411a:	409a      	lsls	r2, r3
    411c:	0013      	movs	r3, r2
    411e:	0019      	movs	r1, r3
    4120:	2002      	movs	r0, #2
    4122:	4b34      	ldr	r3, [pc, #208]	; (41f4 <i2c_master_init+0x110>)
    4124:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4126:	2314      	movs	r3, #20
    4128:	18fb      	adds	r3, r7, r3
    412a:	0018      	movs	r0, r3
    412c:	4b32      	ldr	r3, [pc, #200]	; (41f8 <i2c_master_init+0x114>)
    412e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	7b1a      	ldrb	r2, [r3, #12]
    4134:	2314      	movs	r3, #20
    4136:	18fb      	adds	r3, r7, r3
    4138:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    413a:	69bb      	ldr	r3, [r7, #24]
    413c:	b2db      	uxtb	r3, r3
    413e:	2214      	movs	r2, #20
    4140:	18ba      	adds	r2, r7, r2
    4142:	0011      	movs	r1, r2
    4144:	0018      	movs	r0, r3
    4146:	4b2d      	ldr	r3, [pc, #180]	; (41fc <i2c_master_init+0x118>)
    4148:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    414a:	69bb      	ldr	r3, [r7, #24]
    414c:	b2db      	uxtb	r3, r3
    414e:	0018      	movs	r0, r3
    4150:	4b2b      	ldr	r3, [pc, #172]	; (4200 <i2c_master_init+0x11c>)
    4152:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4154:	687b      	ldr	r3, [r7, #4]
    4156:	7b1b      	ldrb	r3, [r3, #12]
    4158:	2100      	movs	r1, #0
    415a:	0018      	movs	r0, r3
    415c:	4b29      	ldr	r3, [pc, #164]	; (4204 <i2c_master_init+0x120>)
    415e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4162:	681b      	ldr	r3, [r3, #0]
    4164:	2202      	movs	r2, #2
    4166:	4013      	ands	r3, r2
    4168:	d001      	beq.n	416e <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    416a:	231c      	movs	r3, #28
    416c:	e03b      	b.n	41e6 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4170:	681b      	ldr	r3, [r3, #0]
    4172:	2201      	movs	r2, #1
    4174:	4013      	ands	r3, r2
    4176:	d001      	beq.n	417c <i2c_master_init+0x98>
		return STATUS_BUSY;
    4178:	2305      	movs	r3, #5
    417a:	e034      	b.n	41e6 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    417c:	68fb      	ldr	r3, [r7, #12]
    417e:	681b      	ldr	r3, [r3, #0]
    4180:	2217      	movs	r2, #23
    4182:	18bc      	adds	r4, r7, r2
    4184:	0018      	movs	r0, r3
    4186:	4b1a      	ldr	r3, [pc, #104]	; (41f0 <i2c_master_init+0x10c>)
    4188:	4798      	blx	r3
    418a:	0003      	movs	r3, r0
    418c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    418e:	4a1e      	ldr	r2, [pc, #120]	; (4208 <i2c_master_init+0x124>)
    4190:	2317      	movs	r3, #23
    4192:	18fb      	adds	r3, r7, r3
    4194:	781b      	ldrb	r3, [r3, #0]
    4196:	0011      	movs	r1, r2
    4198:	0018      	movs	r0, r3
    419a:	4b1c      	ldr	r3, [pc, #112]	; (420c <i2c_master_init+0x128>)
    419c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    419e:	2317      	movs	r3, #23
    41a0:	18fb      	adds	r3, r7, r3
    41a2:	781a      	ldrb	r2, [r3, #0]
    41a4:	4b1a      	ldr	r3, [pc, #104]	; (4210 <i2c_master_init+0x12c>)
    41a6:	0092      	lsls	r2, r2, #2
    41a8:	68f9      	ldr	r1, [r7, #12]
    41aa:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    41ac:	68fb      	ldr	r3, [r7, #12]
    41ae:	2200      	movs	r2, #0
    41b0:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    41b2:	68fb      	ldr	r3, [r7, #12]
    41b4:	2200      	movs	r2, #0
    41b6:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    41b8:	68fb      	ldr	r3, [r7, #12]
    41ba:	2200      	movs	r2, #0
    41bc:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    41be:	68fb      	ldr	r3, [r7, #12]
    41c0:	2200      	movs	r2, #0
    41c2:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    41c4:	68fb      	ldr	r3, [r7, #12]
    41c6:	2225      	movs	r2, #37	; 0x25
    41c8:	2100      	movs	r1, #0
    41ca:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    41cc:	68fb      	ldr	r3, [r7, #12]
    41ce:	2200      	movs	r2, #0
    41d0:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    41d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41d4:	2214      	movs	r2, #20
    41d6:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    41d8:	687a      	ldr	r2, [r7, #4]
    41da:	68fb      	ldr	r3, [r7, #12]
    41dc:	0011      	movs	r1, r2
    41de:	0018      	movs	r0, r3
    41e0:	4b0c      	ldr	r3, [pc, #48]	; (4214 <i2c_master_init+0x130>)
    41e2:	4798      	blx	r3
    41e4:	0003      	movs	r3, r0
}
    41e6:	0018      	movs	r0, r3
    41e8:	46bd      	mov	sp, r7
    41ea:	b00b      	add	sp, #44	; 0x2c
    41ec:	bd90      	pop	{r4, r7, pc}
    41ee:	46c0      	nop			; (mov r8, r8)
    41f0:	00013bed 	.word	0x00013bed
    41f4:	00003b39 	.word	0x00003b39
    41f8:	00003b21 	.word	0x00003b21
    41fc:	0001647d 	.word	0x0001647d
    4200:	000164c1 	.word	0x000164c1
    4204:	000139a5 	.word	0x000139a5
    4208:	00000bcd 	.word	0x00000bcd
    420c:	00013c51 	.word	0x00013c51
    4210:	20005648 	.word	0x20005648
    4214:	00003cd5 	.word	0x00003cd5

00004218 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    4218:	b580      	push	{r7, lr}
    421a:	b084      	sub	sp, #16
    421c:	af00      	add	r7, sp, #0
    421e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	681b      	ldr	r3, [r3, #0]
    4224:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    4226:	687b      	ldr	r3, [r7, #4]
    4228:	0018      	movs	r0, r3
    422a:	4b0f      	ldr	r3, [pc, #60]	; (4268 <i2c_master_reset+0x50>)
    422c:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
    422e:	687b      	ldr	r3, [r7, #4]
    4230:	0018      	movs	r0, r3
    4232:	4b0e      	ldr	r3, [pc, #56]	; (426c <i2c_master_reset+0x54>)
    4234:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
    4236:	4b0e      	ldr	r3, [pc, #56]	; (4270 <i2c_master_reset+0x58>)
    4238:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	681b      	ldr	r3, [r3, #0]
    423e:	0018      	movs	r0, r3
    4240:	4b0c      	ldr	r3, [pc, #48]	; (4274 <i2c_master_reset+0x5c>)
    4242:	4798      	blx	r3
    4244:	0003      	movs	r3, r0
    4246:	0018      	movs	r0, r3
    4248:	4b0b      	ldr	r3, [pc, #44]	; (4278 <i2c_master_reset+0x60>)
    424a:	4798      	blx	r3
	system_interrupt_leave_critical_section();
    424c:	4b0b      	ldr	r3, [pc, #44]	; (427c <i2c_master_reset+0x64>)
    424e:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    4250:	687b      	ldr	r3, [r7, #4]
    4252:	0018      	movs	r0, r3
    4254:	4b04      	ldr	r3, [pc, #16]	; (4268 <i2c_master_reset+0x50>)
    4256:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    4258:	68fb      	ldr	r3, [r7, #12]
    425a:	2201      	movs	r2, #1
    425c:	601a      	str	r2, [r3, #0]
}
    425e:	46c0      	nop			; (mov r8, r8)
    4260:	46bd      	mov	sp, r7
    4262:	b004      	add	sp, #16
    4264:	bd80      	pop	{r7, pc}
    4266:	46c0      	nop			; (mov r8, r8)
    4268:	00003c59 	.word	0x00003c59
    426c:	00003c7d 	.word	0x00003c7d
    4270:	00003bdd 	.word	0x00003bdd
    4274:	00013cbd 	.word	0x00013cbd
    4278:	000165f9 	.word	0x000165f9
    427c:	00003bf1 	.word	0x00003bf1

00004280 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    4280:	b580      	push	{r7, lr}
    4282:	b084      	sub	sp, #16
    4284:	af00      	add	r7, sp, #0
    4286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4288:	687b      	ldr	r3, [r7, #4]
    428a:	681b      	ldr	r3, [r3, #0]
    428c:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    428e:	68fb      	ldr	r3, [r7, #12]
    4290:	7e1b      	ldrb	r3, [r3, #24]
    4292:	b2db      	uxtb	r3, r3
    4294:	001a      	movs	r2, r3
    4296:	2302      	movs	r3, #2
    4298:	4013      	ands	r3, r2
    429a:	d00b      	beq.n	42b4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    429c:	68fb      	ldr	r3, [r7, #12]
    429e:	2202      	movs	r2, #2
    42a0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    42a2:	68fb      	ldr	r3, [r7, #12]
    42a4:	8b5b      	ldrh	r3, [r3, #26]
    42a6:	b29b      	uxth	r3, r3
    42a8:	001a      	movs	r2, r3
    42aa:	2302      	movs	r3, #2
    42ac:	4013      	ands	r3, r2
    42ae:	d011      	beq.n	42d4 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    42b0:	2341      	movs	r3, #65	; 0x41
    42b2:	e010      	b.n	42d6 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    42b4:	68fb      	ldr	r3, [r7, #12]
    42b6:	8b5b      	ldrh	r3, [r3, #26]
    42b8:	b29b      	uxth	r3, r3
    42ba:	001a      	movs	r2, r3
    42bc:	2304      	movs	r3, #4
    42be:	4013      	ands	r3, r2
    42c0:	d008      	beq.n	42d4 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    42c2:	68fb      	ldr	r3, [r7, #12]
    42c4:	685b      	ldr	r3, [r3, #4]
    42c6:	22c0      	movs	r2, #192	; 0xc0
    42c8:	0292      	lsls	r2, r2, #10
    42ca:	431a      	orrs	r2, r3
    42cc:	68fb      	ldr	r3, [r7, #12]
    42ce:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    42d0:	2318      	movs	r3, #24
    42d2:	e000      	b.n	42d6 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    42d4:	2300      	movs	r3, #0
}
    42d6:	0018      	movs	r0, r3
    42d8:	46bd      	mov	sp, r7
    42da:	b004      	add	sp, #16
    42dc:	bd80      	pop	{r7, pc}

000042de <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    42de:	b580      	push	{r7, lr}
    42e0:	b084      	sub	sp, #16
    42e2:	af00      	add	r7, sp, #0
    42e4:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    42e6:	687b      	ldr	r3, [r7, #4]
    42e8:	681b      	ldr	r3, [r3, #0]
    42ea:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    42ec:	230e      	movs	r3, #14
    42ee:	18fb      	adds	r3, r7, r3
    42f0:	2200      	movs	r2, #0
    42f2:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    42f4:	e00f      	b.n	4316 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    42f6:	230e      	movs	r3, #14
    42f8:	18fb      	adds	r3, r7, r3
    42fa:	220e      	movs	r2, #14
    42fc:	18ba      	adds	r2, r7, r2
    42fe:	8812      	ldrh	r2, [r2, #0]
    4300:	3201      	adds	r2, #1
    4302:	801a      	strh	r2, [r3, #0]
    4304:	687b      	ldr	r3, [r7, #4]
    4306:	891b      	ldrh	r3, [r3, #8]
    4308:	220e      	movs	r2, #14
    430a:	18ba      	adds	r2, r7, r2
    430c:	8812      	ldrh	r2, [r2, #0]
    430e:	429a      	cmp	r2, r3
    4310:	d301      	bcc.n	4316 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    4312:	2312      	movs	r3, #18
    4314:	e00e      	b.n	4334 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4316:	68bb      	ldr	r3, [r7, #8]
    4318:	7e1b      	ldrb	r3, [r3, #24]
    431a:	b2db      	uxtb	r3, r3
    431c:	001a      	movs	r2, r3
    431e:	2301      	movs	r3, #1
    4320:	4013      	ands	r3, r2
    4322:	d106      	bne.n	4332 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    4324:	68bb      	ldr	r3, [r7, #8]
    4326:	7e1b      	ldrb	r3, [r3, #24]
    4328:	b2db      	uxtb	r3, r3
    432a:	001a      	movs	r2, r3
    432c:	2302      	movs	r3, #2
    432e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4330:	d0e1      	beq.n	42f6 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    4332:	2300      	movs	r3, #0
}
    4334:	0018      	movs	r0, r3
    4336:	46bd      	mov	sp, r7
    4338:	b004      	add	sp, #16
    433a:	bd80      	pop	{r7, pc}

0000433c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    433c:	b590      	push	{r4, r7, lr}
    433e:	b085      	sub	sp, #20
    4340:	af00      	add	r7, sp, #0
    4342:	6078      	str	r0, [r7, #4]
    4344:	000a      	movs	r2, r1
    4346:	1cfb      	adds	r3, r7, #3
    4348:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    434a:	687b      	ldr	r3, [r7, #4]
    434c:	681b      	ldr	r3, [r3, #0]
    434e:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4350:	68fb      	ldr	r3, [r7, #12]
    4352:	685b      	ldr	r3, [r3, #4]
    4354:	2280      	movs	r2, #128	; 0x80
    4356:	02d2      	lsls	r2, r2, #11
    4358:	431a      	orrs	r2, r3
    435a:	68fb      	ldr	r3, [r7, #12]
    435c:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    435e:	1cfb      	adds	r3, r7, #3
    4360:	781a      	ldrb	r2, [r3, #0]
    4362:	68fb      	ldr	r3, [r7, #12]
    4364:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    4366:	230b      	movs	r3, #11
    4368:	18fc      	adds	r4, r7, r3
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	0018      	movs	r0, r3
    436e:	4b07      	ldr	r3, [pc, #28]	; (438c <_i2c_master_send_hs_master_code+0x50>)
    4370:	4798      	blx	r3
    4372:	0003      	movs	r3, r0
    4374:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    4376:	68fb      	ldr	r3, [r7, #12]
    4378:	2201      	movs	r2, #1
    437a:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    437c:	230b      	movs	r3, #11
    437e:	18fb      	adds	r3, r7, r3
    4380:	781b      	ldrb	r3, [r3, #0]
}
    4382:	0018      	movs	r0, r3
    4384:	46bd      	mov	sp, r7
    4386:	b005      	add	sp, #20
    4388:	bd90      	pop	{r4, r7, pc}
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	000042df 	.word	0x000042df

00004390 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    4390:	b580      	push	{r7, lr}
    4392:	af00      	add	r7, sp, #0
    4394:	2000      	movs	r0, #0
    4396:	4b02      	ldr	r3, [pc, #8]	; (43a0 <TC3_Handler+0x10>)
    4398:	4798      	blx	r3
    439a:	46c0      	nop			; (mov r8, r8)
    439c:	46bd      	mov	sp, r7
    439e:	bd80      	pop	{r7, pc}
    43a0:	000043cd 	.word	0x000043cd

000043a4 <TC4_Handler>:
    43a4:	b580      	push	{r7, lr}
    43a6:	af00      	add	r7, sp, #0
    43a8:	2001      	movs	r0, #1
    43aa:	4b02      	ldr	r3, [pc, #8]	; (43b4 <TC4_Handler+0x10>)
    43ac:	4798      	blx	r3
    43ae:	46c0      	nop			; (mov r8, r8)
    43b0:	46bd      	mov	sp, r7
    43b2:	bd80      	pop	{r7, pc}
    43b4:	000043cd 	.word	0x000043cd

000043b8 <TC5_Handler>:
    43b8:	b580      	push	{r7, lr}
    43ba:	af00      	add	r7, sp, #0
    43bc:	2002      	movs	r0, #2
    43be:	4b02      	ldr	r3, [pc, #8]	; (43c8 <TC5_Handler+0x10>)
    43c0:	4798      	blx	r3
    43c2:	46c0      	nop			; (mov r8, r8)
    43c4:	46bd      	mov	sp, r7
    43c6:	bd80      	pop	{r7, pc}
    43c8:	000043cd 	.word	0x000043cd

000043cc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b084      	sub	sp, #16
    43d0:	af00      	add	r7, sp, #0
    43d2:	0002      	movs	r2, r0
    43d4:	1dfb      	adds	r3, r7, #7
    43d6:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    43d8:	1dfb      	adds	r3, r7, #7
    43da:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    43dc:	4b28      	ldr	r3, [pc, #160]	; (4480 <_tc_interrupt_handler+0xb4>)
    43de:	0092      	lsls	r2, r2, #2
    43e0:	58d3      	ldr	r3, [r2, r3]
    43e2:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	681b      	ldr	r3, [r3, #0]
    43e8:	7b9b      	ldrb	r3, [r3, #14]
    43ea:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    43ec:	68fa      	ldr	r2, [r7, #12]
    43ee:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    43f0:	4013      	ands	r3, r2
    43f2:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    43f4:	68fb      	ldr	r3, [r7, #12]
    43f6:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    43f8:	230b      	movs	r3, #11
    43fa:	18fb      	adds	r3, r7, r3
    43fc:	400a      	ands	r2, r1
    43fe:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    4400:	230b      	movs	r3, #11
    4402:	18fb      	adds	r3, r7, r3
    4404:	781b      	ldrb	r3, [r3, #0]
    4406:	2201      	movs	r2, #1
    4408:	4013      	ands	r3, r2
    440a:	d008      	beq.n	441e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    440c:	68fb      	ldr	r3, [r7, #12]
    440e:	689b      	ldr	r3, [r3, #8]
    4410:	68fa      	ldr	r2, [r7, #12]
    4412:	0010      	movs	r0, r2
    4414:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	681b      	ldr	r3, [r3, #0]
    441a:	2201      	movs	r2, #1
    441c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    441e:	230b      	movs	r3, #11
    4420:	18fb      	adds	r3, r7, r3
    4422:	781b      	ldrb	r3, [r3, #0]
    4424:	2202      	movs	r2, #2
    4426:	4013      	ands	r3, r2
    4428:	d008      	beq.n	443c <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    442a:	68fb      	ldr	r3, [r7, #12]
    442c:	68db      	ldr	r3, [r3, #12]
    442e:	68fa      	ldr	r2, [r7, #12]
    4430:	0010      	movs	r0, r2
    4432:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4434:	68fb      	ldr	r3, [r7, #12]
    4436:	681b      	ldr	r3, [r3, #0]
    4438:	2202      	movs	r2, #2
    443a:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    443c:	230b      	movs	r3, #11
    443e:	18fb      	adds	r3, r7, r3
    4440:	781b      	ldrb	r3, [r3, #0]
    4442:	2210      	movs	r2, #16
    4444:	4013      	ands	r3, r2
    4446:	d008      	beq.n	445a <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    4448:	68fb      	ldr	r3, [r7, #12]
    444a:	691b      	ldr	r3, [r3, #16]
    444c:	68fa      	ldr	r2, [r7, #12]
    444e:	0010      	movs	r0, r2
    4450:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    4452:	68fb      	ldr	r3, [r7, #12]
    4454:	681b      	ldr	r3, [r3, #0]
    4456:	2210      	movs	r2, #16
    4458:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    445a:	230b      	movs	r3, #11
    445c:	18fb      	adds	r3, r7, r3
    445e:	781b      	ldrb	r3, [r3, #0]
    4460:	2220      	movs	r2, #32
    4462:	4013      	ands	r3, r2
    4464:	d008      	beq.n	4478 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    4466:	68fb      	ldr	r3, [r7, #12]
    4468:	695b      	ldr	r3, [r3, #20]
    446a:	68fa      	ldr	r2, [r7, #12]
    446c:	0010      	movs	r0, r2
    446e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    4470:	68fb      	ldr	r3, [r7, #12]
    4472:	681b      	ldr	r3, [r3, #0]
    4474:	2220      	movs	r2, #32
    4476:	739a      	strb	r2, [r3, #14]
	}
}
    4478:	46c0      	nop			; (mov r8, r8)
    447a:	46bd      	mov	sp, r7
    447c:	b004      	add	sp, #16
    447e:	bd80      	pop	{r7, pc}
    4480:	20004430 	.word	0x20004430

00004484 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
    4484:	b580      	push	{r7, lr}
    4486:	b084      	sub	sp, #16
    4488:	af00      	add	r7, sp, #0
    448a:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
    448c:	2300      	movs	r3, #0
    448e:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	2b00      	cmp	r3, #0
    4494:	d101      	bne.n	449a <FreeRTOS_CLIRegisterCommand+0x16>
    4496:	b672      	cpsid	i
    4498:	e7fe      	b.n	4498 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    449a:	2008      	movs	r0, #8
    449c:	4b11      	ldr	r3, [pc, #68]	; (44e4 <FreeRTOS_CLIRegisterCommand+0x60>)
    449e:	4798      	blx	r3
    44a0:	0003      	movs	r3, r0
    44a2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
    44a4:	68bb      	ldr	r3, [r7, #8]
    44a6:	2b00      	cmp	r3, #0
    44a8:	d101      	bne.n	44ae <FreeRTOS_CLIRegisterCommand+0x2a>
    44aa:	b672      	cpsid	i
    44ac:	e7fe      	b.n	44ac <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
    44ae:	68bb      	ldr	r3, [r7, #8]
    44b0:	2b00      	cmp	r3, #0
    44b2:	d012      	beq.n	44da <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
    44b4:	4b0c      	ldr	r3, [pc, #48]	; (44e8 <FreeRTOS_CLIRegisterCommand+0x64>)
    44b6:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    44b8:	68bb      	ldr	r3, [r7, #8]
    44ba:	687a      	ldr	r2, [r7, #4]
    44bc:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
    44be:	68bb      	ldr	r3, [r7, #8]
    44c0:	2200      	movs	r2, #0
    44c2:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
    44c4:	4b09      	ldr	r3, [pc, #36]	; (44ec <FreeRTOS_CLIRegisterCommand+0x68>)
    44c6:	681b      	ldr	r3, [r3, #0]
    44c8:	68ba      	ldr	r2, [r7, #8]
    44ca:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
    44cc:	4b07      	ldr	r3, [pc, #28]	; (44ec <FreeRTOS_CLIRegisterCommand+0x68>)
    44ce:	68ba      	ldr	r2, [r7, #8]
    44d0:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
    44d2:	4b07      	ldr	r3, [pc, #28]	; (44f0 <FreeRTOS_CLIRegisterCommand+0x6c>)
    44d4:	4798      	blx	r3

		xReturn = pdPASS;
    44d6:	2301      	movs	r3, #1
    44d8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    44da:	68fb      	ldr	r3, [r7, #12]
}
    44dc:	0018      	movs	r0, r3
    44de:	46bd      	mov	sp, r7
    44e0:	b004      	add	sp, #16
    44e2:	bd80      	pop	{r7, pc}
    44e4:	00006891 	.word	0x00006891
    44e8:	00006759 	.word	0x00006759
    44ec:	200000fc 	.word	0x200000fc
    44f0:	0000677d 	.word	0x0000677d

000044f4 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
    44f4:	b580      	push	{r7, lr}
    44f6:	b088      	sub	sp, #32
    44f8:	af00      	add	r7, sp, #0
    44fa:	60f8      	str	r0, [r7, #12]
    44fc:	60b9      	str	r1, [r7, #8]
    44fe:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
    4500:	2301      	movs	r3, #1
    4502:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
    4504:	4b3d      	ldr	r3, [pc, #244]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    4506:	681b      	ldr	r3, [r3, #0]
    4508:	2b00      	cmp	r3, #0
    450a:	d144      	bne.n	4596 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    450c:	4b3b      	ldr	r3, [pc, #236]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    450e:	4a3c      	ldr	r2, [pc, #240]	; (4600 <FreeRTOS_CLIProcessCommand+0x10c>)
    4510:	601a      	str	r2, [r3, #0]
    4512:	e03a      	b.n	458a <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    4514:	4b39      	ldr	r3, [pc, #228]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    4516:	681b      	ldr	r3, [r3, #0]
    4518:	681b      	ldr	r3, [r3, #0]
    451a:	681b      	ldr	r3, [r3, #0]
    451c:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    451e:	69bb      	ldr	r3, [r7, #24]
    4520:	0018      	movs	r0, r3
    4522:	4b38      	ldr	r3, [pc, #224]	; (4604 <FreeRTOS_CLIProcessCommand+0x110>)
    4524:	4798      	blx	r3
    4526:	0003      	movs	r3, r0
    4528:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    452a:	68fa      	ldr	r2, [r7, #12]
    452c:	697b      	ldr	r3, [r7, #20]
    452e:	18d3      	adds	r3, r2, r3
    4530:	781b      	ldrb	r3, [r3, #0]
    4532:	2b20      	cmp	r3, #32
    4534:	d005      	beq.n	4542 <FreeRTOS_CLIProcessCommand+0x4e>
    4536:	68fa      	ldr	r2, [r7, #12]
    4538:	697b      	ldr	r3, [r7, #20]
    453a:	18d3      	adds	r3, r2, r3
    453c:	781b      	ldrb	r3, [r3, #0]
    453e:	2b00      	cmp	r3, #0
    4540:	d11e      	bne.n	4580 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    4542:	697a      	ldr	r2, [r7, #20]
    4544:	69b9      	ldr	r1, [r7, #24]
    4546:	68fb      	ldr	r3, [r7, #12]
    4548:	0018      	movs	r0, r3
    454a:	4b2f      	ldr	r3, [pc, #188]	; (4608 <FreeRTOS_CLIProcessCommand+0x114>)
    454c:	4798      	blx	r3
    454e:	1e03      	subs	r3, r0, #0
    4550:	d116      	bne.n	4580 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    4552:	4b2a      	ldr	r3, [pc, #168]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    4554:	681b      	ldr	r3, [r3, #0]
    4556:	681b      	ldr	r3, [r3, #0]
    4558:	7b1b      	ldrb	r3, [r3, #12]
    455a:	b25b      	sxtb	r3, r3
    455c:	2b00      	cmp	r3, #0
    455e:	db19      	blt.n	4594 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
    4560:	68fb      	ldr	r3, [r7, #12]
    4562:	0018      	movs	r0, r3
    4564:	4b29      	ldr	r3, [pc, #164]	; (460c <FreeRTOS_CLIProcessCommand+0x118>)
    4566:	4798      	blx	r3
    4568:	0003      	movs	r3, r0
    456a:	001a      	movs	r2, r3
    456c:	4b23      	ldr	r3, [pc, #140]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    456e:	681b      	ldr	r3, [r3, #0]
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	7b1b      	ldrb	r3, [r3, #12]
    4574:	b25b      	sxtb	r3, r3
    4576:	429a      	cmp	r2, r3
    4578:	d00c      	beq.n	4594 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
    457a:	2300      	movs	r3, #0
    457c:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
    457e:	e009      	b.n	4594 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    4580:	4b1e      	ldr	r3, [pc, #120]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    4582:	681b      	ldr	r3, [r3, #0]
    4584:	685a      	ldr	r2, [r3, #4]
    4586:	4b1d      	ldr	r3, [pc, #116]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    4588:	601a      	str	r2, [r3, #0]
    458a:	4b1c      	ldr	r3, [pc, #112]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    458c:	681b      	ldr	r3, [r3, #0]
    458e:	2b00      	cmp	r3, #0
    4590:	d1c0      	bne.n	4514 <FreeRTOS_CLIProcessCommand+0x20>
    4592:	e000      	b.n	4596 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
    4594:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    4596:	4b19      	ldr	r3, [pc, #100]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    4598:	681b      	ldr	r3, [r3, #0]
    459a:	2b00      	cmp	r3, #0
    459c:	d00c      	beq.n	45b8 <FreeRTOS_CLIProcessCommand+0xc4>
    459e:	69fb      	ldr	r3, [r7, #28]
    45a0:	2b00      	cmp	r3, #0
    45a2:	d109      	bne.n	45b8 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    45a4:	687a      	ldr	r2, [r7, #4]
    45a6:	491a      	ldr	r1, [pc, #104]	; (4610 <FreeRTOS_CLIProcessCommand+0x11c>)
    45a8:	68bb      	ldr	r3, [r7, #8]
    45aa:	0018      	movs	r0, r3
    45ac:	4b19      	ldr	r3, [pc, #100]	; (4614 <FreeRTOS_CLIProcessCommand+0x120>)
    45ae:	4798      	blx	r3
		pxCommand = NULL;
    45b0:	4b12      	ldr	r3, [pc, #72]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    45b2:	2200      	movs	r2, #0
    45b4:	601a      	str	r2, [r3, #0]
    45b6:	e01c      	b.n	45f2 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
    45b8:	4b10      	ldr	r3, [pc, #64]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    45ba:	681b      	ldr	r3, [r3, #0]
    45bc:	2b00      	cmp	r3, #0
    45be:	d010      	beq.n	45e2 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    45c0:	4b0e      	ldr	r3, [pc, #56]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    45c2:	681b      	ldr	r3, [r3, #0]
    45c4:	681b      	ldr	r3, [r3, #0]
    45c6:	689b      	ldr	r3, [r3, #8]
    45c8:	68fa      	ldr	r2, [r7, #12]
    45ca:	6879      	ldr	r1, [r7, #4]
    45cc:	68b8      	ldr	r0, [r7, #8]
    45ce:	4798      	blx	r3
    45d0:	0003      	movs	r3, r0
    45d2:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
    45d4:	69fb      	ldr	r3, [r7, #28]
    45d6:	2b00      	cmp	r3, #0
    45d8:	d10b      	bne.n	45f2 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
    45da:	4b08      	ldr	r3, [pc, #32]	; (45fc <FreeRTOS_CLIProcessCommand+0x108>)
    45dc:	2200      	movs	r2, #0
    45de:	601a      	str	r2, [r3, #0]
    45e0:	e007      	b.n	45f2 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    45e2:	687a      	ldr	r2, [r7, #4]
    45e4:	490c      	ldr	r1, [pc, #48]	; (4618 <FreeRTOS_CLIProcessCommand+0x124>)
    45e6:	68bb      	ldr	r3, [r7, #8]
    45e8:	0018      	movs	r0, r3
    45ea:	4b0a      	ldr	r3, [pc, #40]	; (4614 <FreeRTOS_CLIProcessCommand+0x120>)
    45ec:	4798      	blx	r3
		xReturn = pdFALSE;
    45ee:	2300      	movs	r3, #0
    45f0:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
    45f2:	69fb      	ldr	r3, [r7, #28]
}
    45f4:	0018      	movs	r0, r3
    45f6:	46bd      	mov	sp, r7
    45f8:	b008      	add	sp, #32
    45fa:	bd80      	pop	{r7, pc}
    45fc:	20000b48 	.word	0x20000b48
    4600:	200000f4 	.word	0x200000f4
    4604:	000212d7 	.word	0x000212d7
    4608:	000212e5 	.word	0x000212e5
    460c:	0000467d 	.word	0x0000467d
    4610:	00022fec 	.word	0x00022fec
    4614:	00021307 	.word	0x00021307
    4618:	00023044 	.word	0x00023044

0000461c <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    461c:	b580      	push	{r7, lr}
    461e:	b086      	sub	sp, #24
    4620:	af00      	add	r7, sp, #0
    4622:	60f8      	str	r0, [r7, #12]
    4624:	60b9      	str	r1, [r7, #8]
    4626:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    4628:	4b11      	ldr	r3, [pc, #68]	; (4670 <prvHelpCommand+0x54>)
    462a:	681b      	ldr	r3, [r3, #0]
    462c:	2b00      	cmp	r3, #0
    462e:	d102      	bne.n	4636 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
    4630:	4b0f      	ldr	r3, [pc, #60]	; (4670 <prvHelpCommand+0x54>)
    4632:	4a10      	ldr	r2, [pc, #64]	; (4674 <prvHelpCommand+0x58>)
    4634:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    4636:	4b0e      	ldr	r3, [pc, #56]	; (4670 <prvHelpCommand+0x54>)
    4638:	681b      	ldr	r3, [r3, #0]
    463a:	681b      	ldr	r3, [r3, #0]
    463c:	6859      	ldr	r1, [r3, #4]
    463e:	68ba      	ldr	r2, [r7, #8]
    4640:	68fb      	ldr	r3, [r7, #12]
    4642:	0018      	movs	r0, r3
    4644:	4b0c      	ldr	r3, [pc, #48]	; (4678 <prvHelpCommand+0x5c>)
    4646:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    4648:	4b09      	ldr	r3, [pc, #36]	; (4670 <prvHelpCommand+0x54>)
    464a:	681b      	ldr	r3, [r3, #0]
    464c:	685a      	ldr	r2, [r3, #4]
    464e:	4b08      	ldr	r3, [pc, #32]	; (4670 <prvHelpCommand+0x54>)
    4650:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
    4652:	4b07      	ldr	r3, [pc, #28]	; (4670 <prvHelpCommand+0x54>)
    4654:	681b      	ldr	r3, [r3, #0]
    4656:	2b00      	cmp	r3, #0
    4658:	d102      	bne.n	4660 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
    465a:	2300      	movs	r3, #0
    465c:	617b      	str	r3, [r7, #20]
    465e:	e001      	b.n	4664 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
    4660:	2301      	movs	r3, #1
    4662:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    4664:	697b      	ldr	r3, [r7, #20]
}
    4666:	0018      	movs	r0, r3
    4668:	46bd      	mov	sp, r7
    466a:	b006      	add	sp, #24
    466c:	bd80      	pop	{r7, pc}
    466e:	46c0      	nop			; (mov r8, r8)
    4670:	20000b4c 	.word	0x20000b4c
    4674:	200000f4 	.word	0x200000f4
    4678:	00021307 	.word	0x00021307

0000467c <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
    467c:	b580      	push	{r7, lr}
    467e:	b084      	sub	sp, #16
    4680:	af00      	add	r7, sp, #0
    4682:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
    4684:	230f      	movs	r3, #15
    4686:	18fb      	adds	r3, r7, r3
    4688:	2200      	movs	r2, #0
    468a:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
    468c:	2300      	movs	r3, #0
    468e:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    4690:	e018      	b.n	46c4 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	781b      	ldrb	r3, [r3, #0]
    4696:	2b20      	cmp	r3, #32
    4698:	d10f      	bne.n	46ba <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
    469a:	68bb      	ldr	r3, [r7, #8]
    469c:	2b01      	cmp	r3, #1
    469e:	d00e      	beq.n	46be <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
    46a0:	230f      	movs	r3, #15
    46a2:	18fb      	adds	r3, r7, r3
    46a4:	781b      	ldrb	r3, [r3, #0]
    46a6:	b25b      	sxtb	r3, r3
    46a8:	b2db      	uxtb	r3, r3
    46aa:	3301      	adds	r3, #1
    46ac:	b2da      	uxtb	r2, r3
    46ae:	230f      	movs	r3, #15
    46b0:	18fb      	adds	r3, r7, r3
    46b2:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
    46b4:	2301      	movs	r3, #1
    46b6:	60bb      	str	r3, [r7, #8]
    46b8:	e001      	b.n	46be <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
    46ba:	2300      	movs	r3, #0
    46bc:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
    46be:	687b      	ldr	r3, [r7, #4]
    46c0:	3301      	adds	r3, #1
    46c2:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
    46c4:	687b      	ldr	r3, [r7, #4]
    46c6:	781b      	ldrb	r3, [r3, #0]
    46c8:	2b00      	cmp	r3, #0
    46ca:	d1e2      	bne.n	4692 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    46cc:	68bb      	ldr	r3, [r7, #8]
    46ce:	2b01      	cmp	r3, #1
    46d0:	d109      	bne.n	46e6 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
    46d2:	230f      	movs	r3, #15
    46d4:	18fb      	adds	r3, r7, r3
    46d6:	781b      	ldrb	r3, [r3, #0]
    46d8:	b25b      	sxtb	r3, r3
    46da:	b2db      	uxtb	r3, r3
    46dc:	3b01      	subs	r3, #1
    46de:	b2da      	uxtb	r2, r3
    46e0:	230f      	movs	r3, #15
    46e2:	18fb      	adds	r3, r7, r3
    46e4:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
    46e6:	230f      	movs	r3, #15
    46e8:	18fb      	adds	r3, r7, r3
    46ea:	781b      	ldrb	r3, [r3, #0]
    46ec:	b25b      	sxtb	r3, r3
}
    46ee:	0018      	movs	r0, r3
    46f0:	46bd      	mov	sp, r7
    46f2:	b004      	add	sp, #16
    46f4:	bd80      	pop	{r7, pc}
	...

000046f8 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
    46f8:	b580      	push	{r7, lr}
    46fa:	b082      	sub	sp, #8
    46fc:	af00      	add	r7, sp, #0
    46fe:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
    4700:	687b      	ldr	r3, [r7, #4]
    4702:	0018      	movs	r0, r3
    4704:	4b03      	ldr	r3, [pc, #12]	; (4714 <prvTraceGetQueueNumber+0x1c>)
    4706:	4798      	blx	r3
    4708:	0003      	movs	r3, r0
}
    470a:	0018      	movs	r0, r3
    470c:	46bd      	mov	sp, r7
    470e:	b002      	add	sp, #8
    4710:	bd80      	pop	{r7, pc}
    4712:	46c0      	nop			; (mov r8, r8)
    4714:	00007eb9 	.word	0x00007eb9

00004718 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    4718:	b580      	push	{r7, lr}
    471a:	b082      	sub	sp, #8
    471c:	af00      	add	r7, sp, #0
    471e:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    4720:	687b      	ldr	r3, [r7, #4]
    4722:	0018      	movs	r0, r3
    4724:	4b03      	ldr	r3, [pc, #12]	; (4734 <prvTraceGetQueueType+0x1c>)
    4726:	4798      	blx	r3
    4728:	0003      	movs	r3, r0
}
    472a:	0018      	movs	r0, r3
    472c:	46bd      	mov	sp, r7
    472e:	b002      	add	sp, #8
    4730:	bd80      	pop	{r7, pc}
    4732:	46c0      	nop			; (mov r8, r8)
    4734:	00007ee5 	.word	0x00007ee5

00004738 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    4738:	b580      	push	{r7, lr}
    473a:	b082      	sub	sp, #8
    473c:	af00      	add	r7, sp, #0
    473e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    4740:	687b      	ldr	r3, [r7, #4]
    4742:	0018      	movs	r0, r3
    4744:	4b03      	ldr	r3, [pc, #12]	; (4754 <prvTraceGetTaskNumberLow16+0x1c>)
    4746:	4798      	blx	r3
    4748:	0003      	movs	r3, r0
    474a:	b29b      	uxth	r3, r3
}
    474c:	0018      	movs	r0, r3
    474e:	46bd      	mov	sp, r7
    4750:	b002      	add	sp, #8
    4752:	bd80      	pop	{r7, pc}
    4754:	00009215 	.word	0x00009215

00004758 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    4758:	b580      	push	{r7, lr}
    475a:	b082      	sub	sp, #8
    475c:	af00      	add	r7, sp, #0
    475e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    4760:	687b      	ldr	r3, [r7, #4]
    4762:	0018      	movs	r0, r3
    4764:	4b04      	ldr	r3, [pc, #16]	; (4778 <prvTraceGetTaskNumberHigh16+0x20>)
    4766:	4798      	blx	r3
    4768:	0003      	movs	r3, r0
    476a:	0c1b      	lsrs	r3, r3, #16
    476c:	b29b      	uxth	r3, r3
}
    476e:	0018      	movs	r0, r3
    4770:	46bd      	mov	sp, r7
    4772:	b002      	add	sp, #8
    4774:	bd80      	pop	{r7, pc}
    4776:	46c0      	nop			; (mov r8, r8)
    4778:	00009215 	.word	0x00009215

0000477c <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    477c:	b580      	push	{r7, lr}
    477e:	b082      	sub	sp, #8
    4780:	af00      	add	r7, sp, #0
    4782:	6078      	str	r0, [r7, #4]
    4784:	000a      	movs	r2, r1
    4786:	1cbb      	adds	r3, r7, #2
    4788:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    478a:	687b      	ldr	r3, [r7, #4]
    478c:	0018      	movs	r0, r3
    478e:	4b08      	ldr	r3, [pc, #32]	; (47b0 <prvTraceSetTaskNumberLow16+0x34>)
    4790:	4798      	blx	r3
    4792:	0003      	movs	r3, r0
    4794:	0c1b      	lsrs	r3, r3, #16
    4796:	041a      	lsls	r2, r3, #16
    4798:	1cbb      	adds	r3, r7, #2
    479a:	881b      	ldrh	r3, [r3, #0]
    479c:	431a      	orrs	r2, r3
    479e:	687b      	ldr	r3, [r7, #4]
    47a0:	0011      	movs	r1, r2
    47a2:	0018      	movs	r0, r3
    47a4:	4b03      	ldr	r3, [pc, #12]	; (47b4 <prvTraceSetTaskNumberLow16+0x38>)
    47a6:	4798      	blx	r3
}
    47a8:	46c0      	nop			; (mov r8, r8)
    47aa:	46bd      	mov	sp, r7
    47ac:	b002      	add	sp, #8
    47ae:	bd80      	pop	{r7, pc}
    47b0:	00009215 	.word	0x00009215
    47b4:	0000923d 	.word	0x0000923d

000047b8 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    47b8:	b580      	push	{r7, lr}
    47ba:	b082      	sub	sp, #8
    47bc:	af00      	add	r7, sp, #0
    47be:	6078      	str	r0, [r7, #4]
    47c0:	000a      	movs	r2, r1
    47c2:	1cbb      	adds	r3, r7, #2
    47c4:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    47c6:	687b      	ldr	r3, [r7, #4]
    47c8:	0018      	movs	r0, r3
    47ca:	4b09      	ldr	r3, [pc, #36]	; (47f0 <prvTraceSetTaskNumberHigh16+0x38>)
    47cc:	4798      	blx	r3
    47ce:	0003      	movs	r3, r0
    47d0:	041b      	lsls	r3, r3, #16
    47d2:	0c1a      	lsrs	r2, r3, #16
    47d4:	1cbb      	adds	r3, r7, #2
    47d6:	881b      	ldrh	r3, [r3, #0]
    47d8:	041b      	lsls	r3, r3, #16
    47da:	431a      	orrs	r2, r3
    47dc:	687b      	ldr	r3, [r7, #4]
    47de:	0011      	movs	r1, r2
    47e0:	0018      	movs	r0, r3
    47e2:	4b04      	ldr	r3, [pc, #16]	; (47f4 <prvTraceSetTaskNumberHigh16+0x3c>)
    47e4:	4798      	blx	r3
}
    47e6:	46c0      	nop			; (mov r8, r8)
    47e8:	46bd      	mov	sp, r7
    47ea:	b002      	add	sp, #8
    47ec:	bd80      	pop	{r7, pc}
    47ee:	46c0      	nop			; (mov r8, r8)
    47f0:	00009215 	.word	0x00009215
    47f4:	0000923d 	.word	0x0000923d

000047f8 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    47f8:	b580      	push	{r7, lr}
    47fa:	b082      	sub	sp, #8
    47fc:	af00      	add	r7, sp, #0
    47fe:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    4800:	687b      	ldr	r3, [r7, #4]
    4802:	0018      	movs	r0, r3
    4804:	4b03      	ldr	r3, [pc, #12]	; (4814 <prvTraceGetQueueNumberLow16+0x1c>)
    4806:	4798      	blx	r3
    4808:	0003      	movs	r3, r0
    480a:	b29b      	uxth	r3, r3
}
    480c:	0018      	movs	r0, r3
    480e:	46bd      	mov	sp, r7
    4810:	b002      	add	sp, #8
    4812:	bd80      	pop	{r7, pc}
    4814:	000046f9 	.word	0x000046f9

00004818 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    4818:	b580      	push	{r7, lr}
    481a:	b082      	sub	sp, #8
    481c:	af00      	add	r7, sp, #0
    481e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    4820:	687b      	ldr	r3, [r7, #4]
    4822:	0018      	movs	r0, r3
    4824:	4b04      	ldr	r3, [pc, #16]	; (4838 <prvTraceGetQueueNumberHigh16+0x20>)
    4826:	4798      	blx	r3
    4828:	0003      	movs	r3, r0
    482a:	0c1b      	lsrs	r3, r3, #16
    482c:	b29b      	uxth	r3, r3
}
    482e:	0018      	movs	r0, r3
    4830:	46bd      	mov	sp, r7
    4832:	b002      	add	sp, #8
    4834:	bd80      	pop	{r7, pc}
    4836:	46c0      	nop			; (mov r8, r8)
    4838:	000046f9 	.word	0x000046f9

0000483c <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    483c:	b580      	push	{r7, lr}
    483e:	b082      	sub	sp, #8
    4840:	af00      	add	r7, sp, #0
    4842:	6078      	str	r0, [r7, #4]
    4844:	000a      	movs	r2, r1
    4846:	1cbb      	adds	r3, r7, #2
    4848:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    484a:	687b      	ldr	r3, [r7, #4]
    484c:	0018      	movs	r0, r3
    484e:	4b08      	ldr	r3, [pc, #32]	; (4870 <prvTraceSetQueueNumberLow16+0x34>)
    4850:	4798      	blx	r3
    4852:	0003      	movs	r3, r0
    4854:	0c1b      	lsrs	r3, r3, #16
    4856:	041a      	lsls	r2, r3, #16
    4858:	1cbb      	adds	r3, r7, #2
    485a:	881b      	ldrh	r3, [r3, #0]
    485c:	431a      	orrs	r2, r3
    485e:	687b      	ldr	r3, [r7, #4]
    4860:	0011      	movs	r1, r2
    4862:	0018      	movs	r0, r3
    4864:	4b03      	ldr	r3, [pc, #12]	; (4874 <prvTraceSetQueueNumberLow16+0x38>)
    4866:	4798      	blx	r3
}
    4868:	46c0      	nop			; (mov r8, r8)
    486a:	46bd      	mov	sp, r7
    486c:	b002      	add	sp, #8
    486e:	bd80      	pop	{r7, pc}
    4870:	000046f9 	.word	0x000046f9
    4874:	00007ecd 	.word	0x00007ecd

00004878 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    4878:	b580      	push	{r7, lr}
    487a:	b082      	sub	sp, #8
    487c:	af00      	add	r7, sp, #0
    487e:	6078      	str	r0, [r7, #4]
    4880:	000a      	movs	r2, r1
    4882:	1cbb      	adds	r3, r7, #2
    4884:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    4886:	687b      	ldr	r3, [r7, #4]
    4888:	0018      	movs	r0, r3
    488a:	4b09      	ldr	r3, [pc, #36]	; (48b0 <prvTraceSetQueueNumberHigh16+0x38>)
    488c:	4798      	blx	r3
    488e:	0003      	movs	r3, r0
    4890:	041b      	lsls	r3, r3, #16
    4892:	0c1a      	lsrs	r2, r3, #16
    4894:	1cbb      	adds	r3, r7, #2
    4896:	881b      	ldrh	r3, [r3, #0]
    4898:	041b      	lsls	r3, r3, #16
    489a:	431a      	orrs	r2, r3
    489c:	687b      	ldr	r3, [r7, #4]
    489e:	0011      	movs	r1, r2
    48a0:	0018      	movs	r0, r3
    48a2:	4b04      	ldr	r3, [pc, #16]	; (48b4 <prvTraceSetQueueNumberHigh16+0x3c>)
    48a4:	4798      	blx	r3
}
    48a6:	46c0      	nop			; (mov r8, r8)
    48a8:	46bd      	mov	sp, r7
    48aa:	b002      	add	sp, #8
    48ac:	bd80      	pop	{r7, pc}
    48ae:	46c0      	nop			; (mov r8, r8)
    48b0:	000046f9 	.word	0x000046f9
    48b4:	00007ecd 	.word	0x00007ecd

000048b8 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
    48b8:	b580      	push	{r7, lr}
    48ba:	b084      	sub	sp, #16
    48bc:	af00      	add	r7, sp, #0
    48be:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
    48c0:	2300      	movs	r3, #0
    48c2:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
    48c4:	2300      	movs	r3, #0
    48c6:	60bb      	str	r3, [r7, #8]
    48c8:	e018      	b.n	48fc <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
    48ca:	4b14      	ldr	r3, [pc, #80]	; (491c <prvAddTaskToStackMonitor+0x64>)
    48cc:	68ba      	ldr	r2, [r7, #8]
    48ce:	00d2      	lsls	r2, r2, #3
    48d0:	58d3      	ldr	r3, [r2, r3]
    48d2:	2b00      	cmp	r3, #0
    48d4:	d10f      	bne.n	48f6 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
    48d6:	4b11      	ldr	r3, [pc, #68]	; (491c <prvAddTaskToStackMonitor+0x64>)
    48d8:	68ba      	ldr	r2, [r7, #8]
    48da:	00d2      	lsls	r2, r2, #3
    48dc:	6879      	ldr	r1, [r7, #4]
    48de:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
    48e0:	4a0e      	ldr	r2, [pc, #56]	; (491c <prvAddTaskToStackMonitor+0x64>)
    48e2:	68bb      	ldr	r3, [r7, #8]
    48e4:	00db      	lsls	r3, r3, #3
    48e6:	18d3      	adds	r3, r2, r3
    48e8:	3304      	adds	r3, #4
    48ea:	2201      	movs	r2, #1
    48ec:	4252      	negs	r2, r2
    48ee:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
    48f0:	2301      	movs	r3, #1
    48f2:	60fb      	str	r3, [r7, #12]
			break;
    48f4:	e005      	b.n	4902 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
    48f6:	68bb      	ldr	r3, [r7, #8]
    48f8:	3301      	adds	r3, #1
    48fa:	60bb      	str	r3, [r7, #8]
    48fc:	68bb      	ldr	r3, [r7, #8]
    48fe:	2b09      	cmp	r3, #9
    4900:	dde3      	ble.n	48ca <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
    4902:	68fb      	ldr	r3, [r7, #12]
    4904:	2b00      	cmp	r3, #0
    4906:	d104      	bne.n	4912 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
    4908:	4b05      	ldr	r3, [pc, #20]	; (4920 <prvAddTaskToStackMonitor+0x68>)
    490a:	681b      	ldr	r3, [r3, #0]
    490c:	1c5a      	adds	r2, r3, #1
    490e:	4b04      	ldr	r3, [pc, #16]	; (4920 <prvAddTaskToStackMonitor+0x68>)
    4910:	601a      	str	r2, [r3, #0]
	}
}
    4912:	46c0      	nop			; (mov r8, r8)
    4914:	46bd      	mov	sp, r7
    4916:	b004      	add	sp, #16
    4918:	bd80      	pop	{r7, pc}
    491a:	46c0      	nop			; (mov r8, r8)
    491c:	20000b54 	.word	0x20000b54
    4920:	20000ba4 	.word	0x20000ba4

00004924 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
    4924:	b590      	push	{r4, r7, lr}
    4926:	b085      	sub	sp, #20
    4928:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
    492a:	2300      	movs	r3, #0
    492c:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
    492e:	4b2b      	ldr	r3, [pc, #172]	; (49dc <prvReportStackUsage+0xb8>)
    4930:	681b      	ldr	r3, [r3, #0]
    4932:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
    4934:	4b29      	ldr	r3, [pc, #164]	; (49dc <prvReportStackUsage+0xb8>)
    4936:	681a      	ldr	r2, [r3, #0]
    4938:	4b29      	ldr	r3, [pc, #164]	; (49e0 <prvReportStackUsage+0xbc>)
    493a:	00d2      	lsls	r2, r2, #3
    493c:	58d3      	ldr	r3, [r2, r3]
    493e:	2b00      	cmp	r3, #0
    4940:	d035      	beq.n	49ae <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
    4942:	4b26      	ldr	r3, [pc, #152]	; (49dc <prvReportStackUsage+0xb8>)
    4944:	681a      	ldr	r2, [r3, #0]
    4946:	4b26      	ldr	r3, [pc, #152]	; (49e0 <prvReportStackUsage+0xbc>)
    4948:	00d2      	lsls	r2, r2, #3
    494a:	58d3      	ldr	r3, [r2, r3]
    494c:	0018      	movs	r0, r3
    494e:	4b25      	ldr	r3, [pc, #148]	; (49e4 <prvReportStackUsage+0xc0>)
    4950:	4798      	blx	r3
    4952:	0003      	movs	r3, r0
    4954:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
    4956:	4b21      	ldr	r3, [pc, #132]	; (49dc <prvReportStackUsage+0xb8>)
    4958:	681b      	ldr	r3, [r3, #0]
    495a:	4a21      	ldr	r2, [pc, #132]	; (49e0 <prvReportStackUsage+0xbc>)
    495c:	00db      	lsls	r3, r3, #3
    495e:	18d3      	adds	r3, r2, r3
    4960:	3304      	adds	r3, #4
    4962:	681a      	ldr	r2, [r3, #0]
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	429a      	cmp	r2, r3
    4968:	d907      	bls.n	497a <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
    496a:	4b1c      	ldr	r3, [pc, #112]	; (49dc <prvReportStackUsage+0xb8>)
    496c:	681b      	ldr	r3, [r3, #0]
    496e:	4a1c      	ldr	r2, [pc, #112]	; (49e0 <prvReportStackUsage+0xbc>)
    4970:	00db      	lsls	r3, r3, #3
    4972:	18d3      	adds	r3, r2, r3
    4974:	3304      	adds	r3, #4
    4976:	687a      	ldr	r2, [r7, #4]
    4978:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
    497a:	4b18      	ldr	r3, [pc, #96]	; (49dc <prvReportStackUsage+0xb8>)
    497c:	681a      	ldr	r2, [r3, #0]
    497e:	4b18      	ldr	r3, [pc, #96]	; (49e0 <prvReportStackUsage+0xbc>)
    4980:	00d2      	lsls	r2, r2, #3
    4982:	58d3      	ldr	r3, [r2, r3]
    4984:	0018      	movs	r0, r3
    4986:	4b18      	ldr	r3, [pc, #96]	; (49e8 <prvReportStackUsage+0xc4>)
    4988:	4798      	blx	r3
    498a:	0003      	movs	r3, r0
    498c:	b2db      	uxtb	r3, r3
    498e:	0019      	movs	r1, r3
    4990:	4b12      	ldr	r3, [pc, #72]	; (49dc <prvReportStackUsage+0xb8>)
    4992:	681b      	ldr	r3, [r3, #0]
    4994:	4a12      	ldr	r2, [pc, #72]	; (49e0 <prvReportStackUsage+0xbc>)
    4996:	00db      	lsls	r3, r3, #3
    4998:	18d3      	adds	r3, r2, r3
    499a:	3304      	adds	r3, #4
    499c:	681b      	ldr	r3, [r3, #0]
    499e:	000a      	movs	r2, r1
    49a0:	2103      	movs	r1, #3
    49a2:	20ea      	movs	r0, #234	; 0xea
    49a4:	4c11      	ldr	r4, [pc, #68]	; (49ec <prvReportStackUsage+0xc8>)
    49a6:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
    49a8:	68fb      	ldr	r3, [r7, #12]
    49aa:	3301      	adds	r3, #1
    49ac:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
    49ae:	4b0b      	ldr	r3, [pc, #44]	; (49dc <prvReportStackUsage+0xb8>)
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	1c5a      	adds	r2, r3, #1
    49b4:	4b0e      	ldr	r3, [pc, #56]	; (49f0 <prvReportStackUsage+0xcc>)
    49b6:	210a      	movs	r1, #10
    49b8:	0010      	movs	r0, r2
    49ba:	4798      	blx	r3
    49bc:	000b      	movs	r3, r1
    49be:	001a      	movs	r2, r3
    49c0:	4b06      	ldr	r3, [pc, #24]	; (49dc <prvReportStackUsage+0xb8>)
    49c2:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
    49c4:	68fb      	ldr	r3, [r7, #12]
    49c6:	2b00      	cmp	r3, #0
    49c8:	dc04      	bgt.n	49d4 <prvReportStackUsage+0xb0>
    49ca:	4b04      	ldr	r3, [pc, #16]	; (49dc <prvReportStackUsage+0xb8>)
    49cc:	681a      	ldr	r2, [r3, #0]
    49ce:	68bb      	ldr	r3, [r7, #8]
    49d0:	429a      	cmp	r2, r3
    49d2:	d1af      	bne.n	4934 <prvReportStackUsage+0x10>
}
    49d4:	46c0      	nop			; (mov r8, r8)
    49d6:	46bd      	mov	sp, r7
    49d8:	b005      	add	sp, #20
    49da:	bd90      	pop	{r4, r7, pc}
    49dc:	20000ba8 	.word	0x20000ba8
    49e0:	20000b54 	.word	0x20000b54
    49e4:	000093b5 	.word	0x000093b5
    49e8:	00004739 	.word	0x00004739
    49ec:	00005281 	.word	0x00005281
    49f0:	0001f225 	.word	0x0001f225

000049f4 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    49f4:	b580      	push	{r7, lr}
    49f6:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
    49f8:	4b02      	ldr	r3, [pc, #8]	; (4a04 <prvTraceGetCurrentTaskHandle+0x10>)
    49fa:	4798      	blx	r3
    49fc:	0003      	movs	r3, r0
}
    49fe:	0018      	movs	r0, r3
    4a00:	46bd      	mov	sp, r7
    4a02:	bd80      	pop	{r7, pc}
    4a04:	00009461 	.word	0x00009461

00004a08 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    4a08:	b590      	push	{r4, r7, lr}
    4a0a:	b085      	sub	sp, #20
    4a0c:	af02      	add	r7, sp, #8
    4a0e:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
    4a10:	4b14      	ldr	r3, [pc, #80]	; (4a64 <vTraceEnable+0x5c>)
    4a12:	4798      	blx	r3

	if (startOption == TRC_START)
    4a14:	687b      	ldr	r3, [r7, #4]
    4a16:	2b01      	cmp	r3, #1
    4a18:	d102      	bne.n	4a20 <vTraceEnable+0x18>
	{
		vTraceStart();
    4a1a:	4b13      	ldr	r3, [pc, #76]	; (4a68 <vTraceEnable+0x60>)
    4a1c:	4798      	blx	r3
    4a1e:	e00e      	b.n	4a3e <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
    4a20:	687b      	ldr	r3, [r7, #4]
    4a22:	2b02      	cmp	r3, #2
    4a24:	d104      	bne.n	4a30 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    4a26:	4b11      	ldr	r3, [pc, #68]	; (4a6c <vTraceEnable+0x64>)
    4a28:	0018      	movs	r0, r3
    4a2a:	4b11      	ldr	r3, [pc, #68]	; (4a70 <vTraceEnable+0x68>)
    4a2c:	4798      	blx	r3
    4a2e:	e006      	b.n	4a3e <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	2b00      	cmp	r3, #0
    4a34:	d003      	beq.n	4a3e <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    4a36:	4b0f      	ldr	r3, [pc, #60]	; (4a74 <vTraceEnable+0x6c>)
    4a38:	0018      	movs	r0, r3
    4a3a:	4b0d      	ldr	r3, [pc, #52]	; (4a70 <vTraceEnable+0x68>)
    4a3c:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
    4a3e:	4b0e      	ldr	r3, [pc, #56]	; (4a78 <vTraceEnable+0x70>)
    4a40:	681b      	ldr	r3, [r3, #0]
    4a42:	2b00      	cmp	r3, #0
    4a44:	d109      	bne.n	4a5a <vTraceEnable+0x52>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
    4a46:	490d      	ldr	r1, [pc, #52]	; (4a7c <vTraceEnable+0x74>)
    4a48:	480d      	ldr	r0, [pc, #52]	; (4a80 <vTraceEnable+0x78>)
    4a4a:	4b0b      	ldr	r3, [pc, #44]	; (4a78 <vTraceEnable+0x70>)
    4a4c:	9301      	str	r3, [sp, #4]
    4a4e:	2304      	movs	r3, #4
    4a50:	9300      	str	r3, [sp, #0]
    4a52:	2300      	movs	r3, #0
    4a54:	22c8      	movs	r2, #200	; 0xc8
    4a56:	4c0b      	ldr	r4, [pc, #44]	; (4a84 <vTraceEnable+0x7c>)
    4a58:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    4a5a:	46c0      	nop			; (mov r8, r8)
    4a5c:	46bd      	mov	sp, r7
    4a5e:	b003      	add	sp, #12
    4a60:	bd90      	pop	{r4, r7, pc}
    4a62:	46c0      	nop			; (mov r8, r8)
    4a64:	0000594d 	.word	0x0000594d
    4a68:	00004ea5 	.word	0x00004ea5
    4a6c:	000230a4 	.word	0x000230a4
    4a70:	00005ff5 	.word	0x00005ff5
    4a74:	000230e4 	.word	0x000230e4
    4a78:	20000b50 	.word	0x20000b50
    4a7c:	00023118 	.word	0x00023118
    4a80:	00004a89 	.word	0x00004a89
    4a84:	000083b9 	.word	0x000083b9

00004a88 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
    4a88:	b580      	push	{r7, lr}
    4a8a:	b082      	sub	sp, #8
    4a8c:	af00      	add	r7, sp, #0
    4a8e:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
    4a90:	4b04      	ldr	r3, [pc, #16]	; (4aa4 <TzCtrl+0x1c>)
    4a92:	4798      	blx	r3
    4a94:	1e03      	subs	r3, r0, #0
    4a96:	d001      	beq.n	4a9c <TzCtrl+0x14>
		{
			prvReportStackUsage();
    4a98:	4b03      	ldr	r3, [pc, #12]	; (4aa8 <TzCtrl+0x20>)
    4a9a:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
    4a9c:	2004      	movs	r0, #4
    4a9e:	4b03      	ldr	r3, [pc, #12]	; (4aac <TzCtrl+0x24>)
    4aa0:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
    4aa2:	e7f5      	b.n	4a90 <TzCtrl+0x8>
    4aa4:	00004ee9 	.word	0x00004ee9
    4aa8:	00004925 	.word	0x00004925
    4aac:	00008755 	.word	0x00008755

00004ab0 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    4ab0:	b580      	push	{r7, lr}
    4ab2:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    4ab4:	4b60      	ldr	r3, [pc, #384]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4ab6:	681b      	ldr	r3, [r3, #0]
    4ab8:	2209      	movs	r2, #9
    4aba:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    4abc:	4b5e      	ldr	r3, [pc, #376]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	2264      	movs	r2, #100	; 0x64
    4ac2:	210a      	movs	r1, #10
    4ac4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    4ac6:	4b5c      	ldr	r3, [pc, #368]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4ac8:	681b      	ldr	r3, [r3, #0]
    4aca:	2265      	movs	r2, #101	; 0x65
    4acc:	210a      	movs	r1, #10
    4ace:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    4ad0:	4b59      	ldr	r3, [pc, #356]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4ad2:	681b      	ldr	r3, [r3, #0]
    4ad4:	2266      	movs	r2, #102	; 0x66
    4ad6:	210a      	movs	r1, #10
    4ad8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    4ada:	4b57      	ldr	r3, [pc, #348]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4adc:	681b      	ldr	r3, [r3, #0]
    4ade:	2267      	movs	r2, #103	; 0x67
    4ae0:	210f      	movs	r1, #15
    4ae2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    4ae4:	4b54      	ldr	r3, [pc, #336]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4ae6:	681b      	ldr	r3, [r3, #0]
    4ae8:	2268      	movs	r2, #104	; 0x68
    4aea:	2105      	movs	r1, #5
    4aec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    4aee:	4b52      	ldr	r3, [pc, #328]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4af0:	681b      	ldr	r3, [r3, #0]
    4af2:	2269      	movs	r2, #105	; 0x69
    4af4:	2105      	movs	r1, #5
    4af6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    4af8:	4b4f      	ldr	r3, [pc, #316]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4afa:	681b      	ldr	r3, [r3, #0]
    4afc:	226a      	movs	r2, #106	; 0x6a
    4afe:	2105      	movs	r1, #5
    4b00:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    4b02:	4b4d      	ldr	r3, [pc, #308]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b04:	681b      	ldr	r3, [r3, #0]
    4b06:	226b      	movs	r2, #107	; 0x6b
    4b08:	2105      	movs	r1, #5
    4b0a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    4b0c:	4b4a      	ldr	r3, [pc, #296]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b0e:	681b      	ldr	r3, [r3, #0]
    4b10:	226c      	movs	r2, #108	; 0x6c
    4b12:	2105      	movs	r1, #5
    4b14:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    4b16:	4b48      	ldr	r3, [pc, #288]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b18:	681b      	ldr	r3, [r3, #0]
    4b1a:	2270      	movs	r2, #112	; 0x70
    4b1c:	210f      	movs	r1, #15
    4b1e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    4b20:	4b45      	ldr	r3, [pc, #276]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b22:	681b      	ldr	r3, [r3, #0]
    4b24:	2271      	movs	r2, #113	; 0x71
    4b26:	210f      	movs	r1, #15
    4b28:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    4b2a:	4b43      	ldr	r3, [pc, #268]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b2c:	681b      	ldr	r3, [r3, #0]
    4b2e:	2272      	movs	r2, #114	; 0x72
    4b30:	210f      	movs	r1, #15
    4b32:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    4b34:	4b40      	ldr	r3, [pc, #256]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	2273      	movs	r2, #115	; 0x73
    4b3a:	210f      	movs	r1, #15
    4b3c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    4b3e:	4b3e      	ldr	r3, [pc, #248]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b40:	681b      	ldr	r3, [r3, #0]
    4b42:	2274      	movs	r2, #116	; 0x74
    4b44:	210f      	movs	r1, #15
    4b46:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    4b48:	4b3b      	ldr	r3, [pc, #236]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b4a:	681b      	ldr	r3, [r3, #0]
    4b4c:	2275      	movs	r2, #117	; 0x75
    4b4e:	210f      	movs	r1, #15
    4b50:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    4b52:	4b39      	ldr	r3, [pc, #228]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b54:	681b      	ldr	r3, [r3, #0]
    4b56:	2276      	movs	r2, #118	; 0x76
    4b58:	210f      	movs	r1, #15
    4b5a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    4b5c:	4b36      	ldr	r3, [pc, #216]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b5e:	681b      	ldr	r3, [r3, #0]
    4b60:	2277      	movs	r2, #119	; 0x77
    4b62:	210f      	movs	r1, #15
    4b64:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    4b66:	4b34      	ldr	r3, [pc, #208]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b68:	681b      	ldr	r3, [r3, #0]
    4b6a:	2278      	movs	r2, #120	; 0x78
    4b6c:	210f      	movs	r1, #15
    4b6e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    4b70:	4b31      	ldr	r3, [pc, #196]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	227c      	movs	r2, #124	; 0x7c
    4b76:	2110      	movs	r1, #16
    4b78:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    4b7a:	4b2f      	ldr	r3, [pc, #188]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b7c:	681b      	ldr	r3, [r3, #0]
    4b7e:	227d      	movs	r2, #125	; 0x7d
    4b80:	2110      	movs	r1, #16
    4b82:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    4b84:	4b2c      	ldr	r3, [pc, #176]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b86:	681b      	ldr	r3, [r3, #0]
    4b88:	227e      	movs	r2, #126	; 0x7e
    4b8a:	2110      	movs	r1, #16
    4b8c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    4b8e:	4b2a      	ldr	r3, [pc, #168]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	227f      	movs	r2, #127	; 0x7f
    4b94:	2113      	movs	r1, #19
    4b96:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    4b98:	4b27      	ldr	r3, [pc, #156]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4b9a:	681b      	ldr	r3, [r3, #0]
    4b9c:	2280      	movs	r2, #128	; 0x80
    4b9e:	2111      	movs	r1, #17
    4ba0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    4ba2:	4b25      	ldr	r3, [pc, #148]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4ba4:	681b      	ldr	r3, [r3, #0]
    4ba6:	2281      	movs	r2, #129	; 0x81
    4ba8:	2110      	movs	r1, #16
    4baa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    4bac:	4b22      	ldr	r3, [pc, #136]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4bae:	681b      	ldr	r3, [r3, #0]
    4bb0:	2282      	movs	r2, #130	; 0x82
    4bb2:	2113      	movs	r1, #19
    4bb4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    4bb6:	4b20      	ldr	r3, [pc, #128]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4bb8:	681b      	ldr	r3, [r3, #0]
    4bba:	2283      	movs	r2, #131	; 0x83
    4bbc:	2113      	movs	r1, #19
    4bbe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    4bc0:	4b1d      	ldr	r3, [pc, #116]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	2284      	movs	r2, #132	; 0x84
    4bc6:	2113      	movs	r1, #19
    4bc8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    4bca:	4b1b      	ldr	r3, [pc, #108]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4bcc:	681b      	ldr	r3, [r3, #0]
    4bce:	2288      	movs	r2, #136	; 0x88
    4bd0:	2100      	movs	r1, #0
    4bd2:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    4bd4:	4b18      	ldr	r3, [pc, #96]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4bd6:	681b      	ldr	r3, [r3, #0]
    4bd8:	228a      	movs	r2, #138	; 0x8a
    4bda:	21a0      	movs	r1, #160	; 0xa0
    4bdc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    4bde:	4b16      	ldr	r3, [pc, #88]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4be0:	681b      	ldr	r3, [r3, #0]
    4be2:	228c      	movs	r2, #140	; 0x8c
    4be4:	21a0      	movs	r1, #160	; 0xa0
    4be6:	0049      	lsls	r1, r1, #1
    4be8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    4bea:	4b13      	ldr	r3, [pc, #76]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4bec:	681b      	ldr	r3, [r3, #0]
    4bee:	228e      	movs	r2, #142	; 0x8e
    4bf0:	21f0      	movs	r1, #240	; 0xf0
    4bf2:	0049      	lsls	r1, r1, #1
    4bf4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    4bf6:	4b10      	ldr	r3, [pc, #64]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4bf8:	681b      	ldr	r3, [r3, #0]
    4bfa:	2290      	movs	r2, #144	; 0x90
    4bfc:	490f      	ldr	r1, [pc, #60]	; (4c3c <vTraceInitObjectPropertyTable+0x18c>)
    4bfe:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    4c00:	4b0d      	ldr	r3, [pc, #52]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4c02:	681b      	ldr	r3, [r3, #0]
    4c04:	2292      	movs	r2, #146	; 0x92
    4c06:	490e      	ldr	r1, [pc, #56]	; (4c40 <vTraceInitObjectPropertyTable+0x190>)
    4c08:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    4c0a:	4b0b      	ldr	r3, [pc, #44]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4c0c:	681b      	ldr	r3, [r3, #0]
    4c0e:	2294      	movs	r2, #148	; 0x94
    4c10:	490c      	ldr	r1, [pc, #48]	; (4c44 <vTraceInitObjectPropertyTable+0x194>)
    4c12:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    4c14:	4b08      	ldr	r3, [pc, #32]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4c16:	681b      	ldr	r3, [r3, #0]
    4c18:	2296      	movs	r2, #150	; 0x96
    4c1a:	490b      	ldr	r1, [pc, #44]	; (4c48 <vTraceInitObjectPropertyTable+0x198>)
    4c1c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    4c1e:	4b06      	ldr	r3, [pc, #24]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4c20:	681b      	ldr	r3, [r3, #0]
    4c22:	2298      	movs	r2, #152	; 0x98
    4c24:	218c      	movs	r1, #140	; 0x8c
    4c26:	00c9      	lsls	r1, r1, #3
    4c28:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    4c2a:	4b03      	ldr	r3, [pc, #12]	; (4c38 <vTraceInitObjectPropertyTable+0x188>)
    4c2c:	681b      	ldr	r3, [r3, #0]
    4c2e:	4a07      	ldr	r2, [pc, #28]	; (4c4c <vTraceInitObjectPropertyTable+0x19c>)
    4c30:	661a      	str	r2, [r3, #96]	; 0x60
}
    4c32:	46c0      	nop			; (mov r8, r8)
    4c34:	46bd      	mov	sp, r7
    4c36:	bd80      	pop	{r7, pc}
    4c38:	20000c68 	.word	0x20000c68
    4c3c:	000002fd 	.word	0x000002fd
    4c40:	00000352 	.word	0x00000352
    4c44:	000003a2 	.word	0x000003a2
    4c48:	00000401 	.word	0x00000401
    4c4c:	000004bf 	.word	0x000004bf

00004c50 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
    4c50:	b580      	push	{r7, lr}
    4c52:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    4c54:	4b2e      	ldr	r3, [pc, #184]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c56:	2200      	movs	r2, #0
    4c58:	825a      	strh	r2, [r3, #18]
    4c5a:	4b2d      	ldr	r3, [pc, #180]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c5c:	8a5a      	ldrh	r2, [r3, #18]
    4c5e:	4b2c      	ldr	r3, [pc, #176]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c60:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    4c62:	4b2b      	ldr	r3, [pc, #172]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c64:	220a      	movs	r2, #10
    4c66:	829a      	strh	r2, [r3, #20]
    4c68:	4b29      	ldr	r3, [pc, #164]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c6a:	8a9a      	ldrh	r2, [r3, #20]
    4c6c:	4b28      	ldr	r3, [pc, #160]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c6e:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    4c70:	4b27      	ldr	r3, [pc, #156]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c72:	2214      	movs	r2, #20
    4c74:	82da      	strh	r2, [r3, #22]
    4c76:	4b26      	ldr	r3, [pc, #152]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c78:	8ada      	ldrh	r2, [r3, #22]
    4c7a:	4b25      	ldr	r3, [pc, #148]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c7c:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    4c7e:	4b24      	ldr	r3, [pc, #144]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c80:	221e      	movs	r2, #30
    4c82:	831a      	strh	r2, [r3, #24]
    4c84:	4b22      	ldr	r3, [pc, #136]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c86:	8b1a      	ldrh	r2, [r3, #24]
    4c88:	4b21      	ldr	r3, [pc, #132]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c8a:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    4c8c:	4b20      	ldr	r3, [pc, #128]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c8e:	222d      	movs	r2, #45	; 0x2d
    4c90:	835a      	strh	r2, [r3, #26]
    4c92:	4b1f      	ldr	r3, [pc, #124]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c94:	8b5a      	ldrh	r2, [r3, #26]
    4c96:	4b1e      	ldr	r3, [pc, #120]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c98:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    4c9a:	4b1d      	ldr	r3, [pc, #116]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4c9c:	2232      	movs	r2, #50	; 0x32
    4c9e:	839a      	strh	r2, [r3, #28]
    4ca0:	4b1b      	ldr	r3, [pc, #108]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4ca2:	8b9a      	ldrh	r2, [r3, #28]
    4ca4:	4b1a      	ldr	r3, [pc, #104]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4ca6:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    4ca8:	4b19      	ldr	r3, [pc, #100]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4caa:	2237      	movs	r2, #55	; 0x37
    4cac:	83da      	strh	r2, [r3, #30]
    4cae:	4b18      	ldr	r3, [pc, #96]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cb0:	8bda      	ldrh	r2, [r3, #30]
    4cb2:	4b17      	ldr	r3, [pc, #92]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cb4:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    4cb6:	4b16      	ldr	r3, [pc, #88]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cb8:	223c      	movs	r2, #60	; 0x3c
    4cba:	841a      	strh	r2, [r3, #32]
    4cbc:	4b14      	ldr	r3, [pc, #80]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cbe:	8c1a      	ldrh	r2, [r3, #32]
    4cc0:	4b13      	ldr	r3, [pc, #76]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cc2:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    4cc4:	4b12      	ldr	r3, [pc, #72]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cc6:	2241      	movs	r2, #65	; 0x41
    4cc8:	845a      	strh	r2, [r3, #34]	; 0x22
    4cca:	4b11      	ldr	r3, [pc, #68]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4ccc:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    4cce:	4b10      	ldr	r3, [pc, #64]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cd0:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    4cd2:	4b0f      	ldr	r3, [pc, #60]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cd4:	2209      	movs	r2, #9
    4cd6:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    4cd8:	4b0d      	ldr	r3, [pc, #52]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cda:	2213      	movs	r2, #19
    4cdc:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    4cde:	4b0c      	ldr	r3, [pc, #48]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4ce0:	221d      	movs	r2, #29
    4ce2:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    4ce4:	4b0a      	ldr	r3, [pc, #40]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4ce6:	222c      	movs	r2, #44	; 0x2c
    4ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    4cea:	4b09      	ldr	r3, [pc, #36]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cec:	2231      	movs	r2, #49	; 0x31
    4cee:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    4cf0:	4b07      	ldr	r3, [pc, #28]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cf2:	2236      	movs	r2, #54	; 0x36
    4cf4:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    4cf6:	4b06      	ldr	r3, [pc, #24]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cf8:	223b      	movs	r2, #59	; 0x3b
    4cfa:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    4cfc:	4b04      	ldr	r3, [pc, #16]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4cfe:	2240      	movs	r2, #64	; 0x40
    4d00:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    4d02:	4b03      	ldr	r3, [pc, #12]	; (4d10 <vTraceInitObjectHandleStack+0xc0>)
    4d04:	2245      	movs	r2, #69	; 0x45
    4d06:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4d08:	46c0      	nop			; (mov r8, r8)
    4d0a:	46bd      	mov	sp, r7
    4d0c:	bd80      	pop	{r7, pc}
    4d0e:	46c0      	nop			; (mov r8, r8)
    4d10:	20000bd8 	.word	0x20000bd8

00004d14 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
    4d14:	b580      	push	{r7, lr}
    4d16:	b082      	sub	sp, #8
    4d18:	af00      	add	r7, sp, #0
    4d1a:	0002      	movs	r2, r0
    4d1c:	1dfb      	adds	r3, r7, #7
    4d1e:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
    4d20:	1dfb      	adds	r3, r7, #7
    4d22:	781b      	ldrb	r3, [r3, #0]
    4d24:	2b08      	cmp	r3, #8
    4d26:	d816      	bhi.n	4d56 <pszTraceGetErrorNotEnoughHandles+0x42>
    4d28:	009a      	lsls	r2, r3, #2
    4d2a:	4b0d      	ldr	r3, [pc, #52]	; (4d60 <pszTraceGetErrorNotEnoughHandles+0x4c>)
    4d2c:	18d3      	adds	r3, r2, r3
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    4d32:	4b0c      	ldr	r3, [pc, #48]	; (4d64 <pszTraceGetErrorNotEnoughHandles+0x50>)
    4d34:	e010      	b.n	4d58 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    4d36:	4b0c      	ldr	r3, [pc, #48]	; (4d68 <pszTraceGetErrorNotEnoughHandles+0x54>)
    4d38:	e00e      	b.n	4d58 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    4d3a:	4b0c      	ldr	r3, [pc, #48]	; (4d6c <pszTraceGetErrorNotEnoughHandles+0x58>)
    4d3c:	e00c      	b.n	4d58 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    4d3e:	4b0c      	ldr	r3, [pc, #48]	; (4d70 <pszTraceGetErrorNotEnoughHandles+0x5c>)
    4d40:	e00a      	b.n	4d58 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    4d42:	4b0c      	ldr	r3, [pc, #48]	; (4d74 <pszTraceGetErrorNotEnoughHandles+0x60>)
    4d44:	e008      	b.n	4d58 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    4d46:	4b0c      	ldr	r3, [pc, #48]	; (4d78 <pszTraceGetErrorNotEnoughHandles+0x64>)
    4d48:	e006      	b.n	4d58 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    4d4a:	4b0c      	ldr	r3, [pc, #48]	; (4d7c <pszTraceGetErrorNotEnoughHandles+0x68>)
    4d4c:	e004      	b.n	4d58 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    4d4e:	4b0c      	ldr	r3, [pc, #48]	; (4d80 <pszTraceGetErrorNotEnoughHandles+0x6c>)
    4d50:	e002      	b.n	4d58 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    4d52:	4b0c      	ldr	r3, [pc, #48]	; (4d84 <pszTraceGetErrorNotEnoughHandles+0x70>)
    4d54:	e000      	b.n	4d58 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    4d56:	4b0c      	ldr	r3, [pc, #48]	; (4d88 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
    4d58:	0018      	movs	r0, r3
    4d5a:	46bd      	mov	sp, r7
    4d5c:	b002      	add	sp, #8
    4d5e:	bd80      	pop	{r7, pc}
    4d60:	00023420 	.word	0x00023420
    4d64:	00023120 	.word	0x00023120
    4d68:	00023168 	.word	0x00023168
    4d6c:	000231b0 	.word	0x000231b0
    4d70:	00023204 	.word	0x00023204
    4d74:	00023250 	.word	0x00023250
    4d78:	0002329c 	.word	0x0002329c
    4d7c:	000232e8 	.word	0x000232e8
    4d80:	0002333c 	.word	0x0002333c
    4d84:	00023394 	.word	0x00023394
    4d88:	000233f0 	.word	0x000233f0

00004d8c <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
    4d8c:	b590      	push	{r4, r7, lr}
    4d8e:	b087      	sub	sp, #28
    4d90:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
    4d92:	2317      	movs	r3, #23
    4d94:	18fb      	adds	r3, r7, r3
    4d96:	2200      	movs	r2, #0
    4d98:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
    4d9a:	4b36      	ldr	r3, [pc, #216]	; (4e74 <uiTraceStart+0xe8>)
    4d9c:	681b      	ldr	r3, [r3, #0]
    4d9e:	2b00      	cmp	r3, #0
    4da0:	d10b      	bne.n	4dba <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    4da2:	4b34      	ldr	r3, [pc, #208]	; (4e74 <uiTraceStart+0xe8>)
    4da4:	681b      	ldr	r3, [r3, #0]
    4da6:	2b00      	cmp	r3, #0
    4da8:	d105      	bne.n	4db6 <uiTraceStart+0x2a>
    4daa:	4b33      	ldr	r3, [pc, #204]	; (4e78 <uiTraceStart+0xec>)
    4dac:	0018      	movs	r0, r3
    4dae:	4b33      	ldr	r3, [pc, #204]	; (4e7c <uiTraceStart+0xf0>)
    4db0:	4798      	blx	r3
    4db2:	2300      	movs	r3, #0
    4db4:	e059      	b.n	4e6a <uiTraceStart+0xde>
		return 0;
    4db6:	2300      	movs	r3, #0
    4db8:	e057      	b.n	4e6a <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
    4dba:	4b2e      	ldr	r3, [pc, #184]	; (4e74 <uiTraceStart+0xe8>)
    4dbc:	681b      	ldr	r3, [r3, #0]
    4dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4dc0:	2b01      	cmp	r3, #1
    4dc2:	d101      	bne.n	4dc8 <uiTraceStart+0x3c>
		return 1; /* Already running */
    4dc4:	2301      	movs	r3, #1
    4dc6:	e050      	b.n	4e6a <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
    4dc8:	4b2d      	ldr	r3, [pc, #180]	; (4e80 <uiTraceStart+0xf4>)
    4dca:	681b      	ldr	r3, [r3, #0]
    4dcc:	2b00      	cmp	r3, #0
    4dce:	d149      	bne.n	4e64 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4dd0:	f3ef 8310 	mrs	r3, PRIMASK
    4dd4:	60bb      	str	r3, [r7, #8]
  return(result);
    4dd6:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
    4dd8:	613b      	str	r3, [r7, #16]
    4dda:	2301      	movs	r3, #1
    4ddc:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4dde:	68fb      	ldr	r3, [r7, #12]
    4de0:	f383 8810 	msr	PRIMASK, r3
    4de4:	4b27      	ldr	r3, [pc, #156]	; (4e84 <uiTraceStart+0xf8>)
    4de6:	681b      	ldr	r3, [r3, #0]
    4de8:	1c5a      	adds	r2, r3, #1
    4dea:	4b26      	ldr	r3, [pc, #152]	; (4e84 <uiTraceStart+0xf8>)
    4dec:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
    4dee:	4b21      	ldr	r3, [pc, #132]	; (4e74 <uiTraceStart+0xe8>)
    4df0:	681b      	ldr	r3, [r3, #0]
    4df2:	2201      	movs	r2, #1
    4df4:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    4df6:	4b24      	ldr	r3, [pc, #144]	; (4e88 <uiTraceStart+0xfc>)
    4df8:	4798      	blx	r3
    4dfa:	0003      	movs	r3, r0
    4dfc:	0018      	movs	r0, r3
    4dfe:	4b23      	ldr	r3, [pc, #140]	; (4e8c <uiTraceStart+0x100>)
    4e00:	4798      	blx	r3
    4e02:	0003      	movs	r3, r0
    4e04:	001a      	movs	r2, r3
    4e06:	2317      	movs	r3, #23
    4e08:	18fb      	adds	r3, r7, r3
    4e0a:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
    4e0c:	2317      	movs	r3, #23
    4e0e:	18fb      	adds	r3, r7, r3
    4e10:	781b      	ldrb	r3, [r3, #0]
    4e12:	2b00      	cmp	r3, #0
    4e14:	d116      	bne.n	4e44 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    4e16:	2317      	movs	r3, #23
    4e18:	18fc      	adds	r4, r7, r3
    4e1a:	2003      	movs	r0, #3
    4e1c:	4b1c      	ldr	r3, [pc, #112]	; (4e90 <uiTraceStart+0x104>)
    4e1e:	4798      	blx	r3
    4e20:	0003      	movs	r3, r0
    4e22:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    4e24:	4a1b      	ldr	r2, [pc, #108]	; (4e94 <uiTraceStart+0x108>)
    4e26:	2317      	movs	r3, #23
    4e28:	18fb      	adds	r3, r7, r3
    4e2a:	781b      	ldrb	r3, [r3, #0]
    4e2c:	0019      	movs	r1, r3
    4e2e:	2003      	movs	r0, #3
    4e30:	4b19      	ldr	r3, [pc, #100]	; (4e98 <uiTraceStart+0x10c>)
    4e32:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    4e34:	2317      	movs	r3, #23
    4e36:	18fb      	adds	r3, r7, r3
    4e38:	781b      	ldrb	r3, [r3, #0]
    4e3a:	2200      	movs	r2, #0
    4e3c:	0019      	movs	r1, r3
    4e3e:	2003      	movs	r0, #3
    4e40:	4b16      	ldr	r3, [pc, #88]	; (4e9c <uiTraceStart+0x110>)
    4e42:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    4e44:	2317      	movs	r3, #23
    4e46:	18fb      	adds	r3, r7, r3
    4e48:	781b      	ldrb	r3, [r3, #0]
    4e4a:	0018      	movs	r0, r3
    4e4c:	4b14      	ldr	r3, [pc, #80]	; (4ea0 <uiTraceStart+0x114>)
    4e4e:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    4e50:	4b0c      	ldr	r3, [pc, #48]	; (4e84 <uiTraceStart+0xf8>)
    4e52:	681b      	ldr	r3, [r3, #0]
    4e54:	1e5a      	subs	r2, r3, #1
    4e56:	4b0b      	ldr	r3, [pc, #44]	; (4e84 <uiTraceStart+0xf8>)
    4e58:	601a      	str	r2, [r3, #0]
    4e5a:	693b      	ldr	r3, [r7, #16]
    4e5c:	607b      	str	r3, [r7, #4]
    4e5e:	687b      	ldr	r3, [r7, #4]
    4e60:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
    4e64:	4b03      	ldr	r3, [pc, #12]	; (4e74 <uiTraceStart+0xe8>)
    4e66:	681b      	ldr	r3, [r3, #0]
    4e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    4e6a:	0018      	movs	r0, r3
    4e6c:	46bd      	mov	sp, r7
    4e6e:	b007      	add	sp, #28
    4e70:	bd90      	pop	{r4, r7, pc}
    4e72:	46c0      	nop			; (mov r8, r8)
    4e74:	20000c68 	.word	0x20000c68
    4e78:	00023444 	.word	0x00023444
    4e7c:	00005ff5 	.word	0x00005ff5
    4e80:	20000bc8 	.word	0x20000bc8
    4e84:	20000bc0 	.word	0x20000bc0
    4e88:	000049f5 	.word	0x000049f5
    4e8c:	00004739 	.word	0x00004739
    4e90:	00005cd9 	.word	0x00005cd9
    4e94:	00023488 	.word	0x00023488
    4e98:	00005f09 	.word	0x00005f09
    4e9c:	0000566d 	.word	0x0000566d
    4ea0:	00005555 	.word	0x00005555

00004ea4 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
    4ea4:	b580      	push	{r7, lr}
    4ea6:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
    4ea8:	4b02      	ldr	r3, [pc, #8]	; (4eb4 <vTraceStart+0x10>)
    4eaa:	4798      	blx	r3
}
    4eac:	46c0      	nop			; (mov r8, r8)
    4eae:	46bd      	mov	sp, r7
    4eb0:	bd80      	pop	{r7, pc}
    4eb2:	46c0      	nop			; (mov r8, r8)
    4eb4:	00004d8d 	.word	0x00004d8d

00004eb8 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
    4eb8:	b580      	push	{r7, lr}
    4eba:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    4ebc:	4b08      	ldr	r3, [pc, #32]	; (4ee0 <vTraceStop+0x28>)
    4ebe:	681b      	ldr	r3, [r3, #0]
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	d003      	beq.n	4ecc <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
    4ec4:	4b06      	ldr	r3, [pc, #24]	; (4ee0 <vTraceStop+0x28>)
    4ec6:	681b      	ldr	r3, [r3, #0]
    4ec8:	2200      	movs	r2, #0
    4eca:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    4ecc:	4b05      	ldr	r3, [pc, #20]	; (4ee4 <vTraceStop+0x2c>)
    4ece:	681b      	ldr	r3, [r3, #0]
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	d002      	beq.n	4eda <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    4ed4:	4b03      	ldr	r3, [pc, #12]	; (4ee4 <vTraceStop+0x2c>)
    4ed6:	681b      	ldr	r3, [r3, #0]
    4ed8:	4798      	blx	r3
	}
}
    4eda:	46c0      	nop			; (mov r8, r8)
    4edc:	46bd      	mov	sp, r7
    4ede:	bd80      	pop	{r7, pc}
    4ee0:	20000c68 	.word	0x20000c68
    4ee4:	20000bd0 	.word	0x20000bd0

00004ee8 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
    4ee8:	b580      	push	{r7, lr}
    4eea:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    4eec:	4b05      	ldr	r3, [pc, #20]	; (4f04 <xTraceIsRecordingEnabled+0x1c>)
    4eee:	681b      	ldr	r3, [r3, #0]
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d003      	beq.n	4efc <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
    4ef4:	4b03      	ldr	r3, [pc, #12]	; (4f04 <xTraceIsRecordingEnabled+0x1c>)
    4ef6:	681b      	ldr	r3, [r3, #0]
    4ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4efa:	e000      	b.n	4efe <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
    4efc:	2300      	movs	r3, #0
	}
}
    4efe:	0018      	movs	r0, r3
    4f00:	46bd      	mov	sp, r7
    4f02:	bd80      	pop	{r7, pc}
    4f04:	20000c68 	.word	0x20000c68

00004f08 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
    4f08:	b590      	push	{r4, r7, lr}
    4f0a:	b089      	sub	sp, #36	; 0x24
    4f0c:	af00      	add	r7, sp, #0
    4f0e:	0002      	movs	r2, r0
    4f10:	1dfb      	adds	r3, r7, #7
    4f12:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
    4f14:	1dfb      	adds	r3, r7, #7
    4f16:	781b      	ldrb	r3, [r3, #0]
    4f18:	2b00      	cmp	r3, #0
    4f1a:	d057      	beq.n	4fcc <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
    4f1c:	4b2e      	ldr	r3, [pc, #184]	; (4fd8 <prvTraceStoreTaskReady+0xd0>)
    4f1e:	681b      	ldr	r3, [r3, #0]
    4f20:	2b00      	cmp	r3, #0
    4f22:	d055      	beq.n	4fd0 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    4f24:	1dfb      	adds	r3, r7, #7
    4f26:	781b      	ldrb	r3, [r3, #0]
    4f28:	2b0f      	cmp	r3, #15
    4f2a:	d904      	bls.n	4f36 <prvTraceStoreTaskReady+0x2e>
    4f2c:	4b2b      	ldr	r3, [pc, #172]	; (4fdc <prvTraceStoreTaskReady+0xd4>)
    4f2e:	0018      	movs	r0, r3
    4f30:	4b2b      	ldr	r3, [pc, #172]	; (4fe0 <prvTraceStoreTaskReady+0xd8>)
    4f32:	4798      	blx	r3
    4f34:	e04d      	b.n	4fd2 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
    4f36:	4b2b      	ldr	r3, [pc, #172]	; (4fe4 <prvTraceStoreTaskReady+0xdc>)
    4f38:	681b      	ldr	r3, [r3, #0]
    4f3a:	2b00      	cmp	r3, #0
    4f3c:	d004      	beq.n	4f48 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    4f3e:	4b2a      	ldr	r3, [pc, #168]	; (4fe8 <prvTraceStoreTaskReady+0xe0>)
    4f40:	0018      	movs	r0, r3
    4f42:	4b27      	ldr	r3, [pc, #156]	; (4fe0 <prvTraceStoreTaskReady+0xd8>)
    4f44:	4798      	blx	r3
		return;
    4f46:	e044      	b.n	4fd2 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4f48:	f3ef 8310 	mrs	r3, PRIMASK
    4f4c:	60fb      	str	r3, [r7, #12]
  return(result);
    4f4e:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
    4f50:	61fb      	str	r3, [r7, #28]
    4f52:	2301      	movs	r3, #1
    4f54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4f56:	693b      	ldr	r3, [r7, #16]
    4f58:	f383 8810 	msr	PRIMASK, r3
    4f5c:	4b21      	ldr	r3, [pc, #132]	; (4fe4 <prvTraceStoreTaskReady+0xdc>)
    4f5e:	681b      	ldr	r3, [r3, #0]
    4f60:	1c5a      	adds	r2, r3, #1
    4f62:	4b20      	ldr	r3, [pc, #128]	; (4fe4 <prvTraceStoreTaskReady+0xdc>)
    4f64:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    4f66:	4b21      	ldr	r3, [pc, #132]	; (4fec <prvTraceStoreTaskReady+0xe4>)
    4f68:	681b      	ldr	r3, [r3, #0]
    4f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4f6c:	2b00      	cmp	r3, #0
    4f6e:	d022      	beq.n	4fb6 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    4f70:	231a      	movs	r3, #26
    4f72:	18fc      	adds	r4, r7, r3
    4f74:	4b1e      	ldr	r3, [pc, #120]	; (4ff0 <prvTraceStoreTaskReady+0xe8>)
    4f76:	0018      	movs	r0, r3
    4f78:	4b1e      	ldr	r3, [pc, #120]	; (4ff4 <prvTraceStoreTaskReady+0xec>)
    4f7a:	4798      	blx	r3
    4f7c:	0003      	movs	r3, r0
    4f7e:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
    4f80:	2319      	movs	r3, #25
    4f82:	18fb      	adds	r3, r7, r3
    4f84:	1dfa      	adds	r2, r7, #7
    4f86:	7812      	ldrb	r2, [r2, #0]
    4f88:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    4f8a:	4b1b      	ldr	r3, [pc, #108]	; (4ff8 <prvTraceStoreTaskReady+0xf0>)
    4f8c:	4798      	blx	r3
    4f8e:	0003      	movs	r3, r0
    4f90:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
    4f92:	697b      	ldr	r3, [r7, #20]
    4f94:	2b00      	cmp	r3, #0
    4f96:	d00e      	beq.n	4fb6 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
    4f98:	697b      	ldr	r3, [r7, #20]
    4f9a:	2202      	movs	r2, #2
    4f9c:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
    4f9e:	697b      	ldr	r3, [r7, #20]
    4fa0:	221a      	movs	r2, #26
    4fa2:	18ba      	adds	r2, r7, r2
    4fa4:	8812      	ldrh	r2, [r2, #0]
    4fa6:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
    4fa8:	697b      	ldr	r3, [r7, #20]
    4faa:	2219      	movs	r2, #25
    4fac:	18ba      	adds	r2, r7, r2
    4fae:	7812      	ldrb	r2, [r2, #0]
    4fb0:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    4fb2:	4b12      	ldr	r3, [pc, #72]	; (4ffc <prvTraceStoreTaskReady+0xf4>)
    4fb4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    4fb6:	4b0b      	ldr	r3, [pc, #44]	; (4fe4 <prvTraceStoreTaskReady+0xdc>)
    4fb8:	681b      	ldr	r3, [r3, #0]
    4fba:	1e5a      	subs	r2, r3, #1
    4fbc:	4b09      	ldr	r3, [pc, #36]	; (4fe4 <prvTraceStoreTaskReady+0xdc>)
    4fbe:	601a      	str	r2, [r3, #0]
    4fc0:	69fb      	ldr	r3, [r7, #28]
    4fc2:	60bb      	str	r3, [r7, #8]
    4fc4:	68bb      	ldr	r3, [r7, #8]
    4fc6:	f383 8810 	msr	PRIMASK, r3
    4fca:	e002      	b.n	4fd2 <prvTraceStoreTaskReady+0xca>
		return;
    4fcc:	46c0      	nop			; (mov r8, r8)
    4fce:	e000      	b.n	4fd2 <prvTraceStoreTaskReady+0xca>
		return;
    4fd0:	46c0      	nop			; (mov r8, r8)
}
    4fd2:	46bd      	mov	sp, r7
    4fd4:	b009      	add	sp, #36	; 0x24
    4fd6:	bd90      	pop	{r4, r7, pc}
    4fd8:	20000108 	.word	0x20000108
    4fdc:	000237f0 	.word	0x000237f0
    4fe0:	00005ff5 	.word	0x00005ff5
    4fe4:	20000bc0 	.word	0x20000bc0
    4fe8:	00023830 	.word	0x00023830
    4fec:	20000c68 	.word	0x20000c68
    4ff0:	0000ffff 	.word	0x0000ffff
    4ff4:	00006209 	.word	0x00006209
    4ff8:	00005bad 	.word	0x00005bad
    4ffc:	000061b1 	.word	0x000061b1

00005000 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
    5000:	b580      	push	{r7, lr}
    5002:	b08e      	sub	sp, #56	; 0x38
    5004:	af00      	add	r7, sp, #0
    5006:	60f8      	str	r0, [r7, #12]
    5008:	60b9      	str	r1, [r7, #8]
    500a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
    500c:	4b48      	ldr	r3, [pc, #288]	; (5130 <vTraceStoreMemMangEvent+0x130>)
    500e:	681b      	ldr	r3, [r3, #0]
    5010:	2b00      	cmp	r3, #0
    5012:	d100      	bne.n	5016 <vTraceStoreMemMangEvent+0x16>
    5014:	e088      	b.n	5128 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
    5016:	687b      	ldr	r3, [r7, #4]
    5018:	2b00      	cmp	r3, #0
    501a:	da03      	bge.n	5024 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
    501c:	687b      	ldr	r3, [r7, #4]
    501e:	425b      	negs	r3, r3
    5020:	637b      	str	r3, [r7, #52]	; 0x34
    5022:	e001      	b.n	5028 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
    5024:	687b      	ldr	r3, [r7, #4]
    5026:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5028:	f3ef 8310 	mrs	r3, PRIMASK
    502c:	61bb      	str	r3, [r7, #24]
  return(result);
    502e:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
    5030:	633b      	str	r3, [r7, #48]	; 0x30
    5032:	2301      	movs	r3, #1
    5034:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5036:	69fb      	ldr	r3, [r7, #28]
    5038:	f383 8810 	msr	PRIMASK, r3
    503c:	4b3d      	ldr	r3, [pc, #244]	; (5134 <vTraceStoreMemMangEvent+0x134>)
    503e:	681b      	ldr	r3, [r3, #0]
    5040:	1c5a      	adds	r2, r3, #1
    5042:	4b3c      	ldr	r3, [pc, #240]	; (5134 <vTraceStoreMemMangEvent+0x134>)
    5044:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
    5046:	68bb      	ldr	r3, [r7, #8]
    5048:	2b00      	cmp	r3, #0
    504a:	d005      	beq.n	5058 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
    504c:	4b3a      	ldr	r3, [pc, #232]	; (5138 <vTraceStoreMemMangEvent+0x138>)
    504e:	681a      	ldr	r2, [r3, #0]
    5050:	687b      	ldr	r3, [r7, #4]
    5052:	18d2      	adds	r2, r2, r3
    5054:	4b38      	ldr	r3, [pc, #224]	; (5138 <vTraceStoreMemMangEvent+0x138>)
    5056:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
    5058:	4b35      	ldr	r3, [pc, #212]	; (5130 <vTraceStoreMemMangEvent+0x130>)
    505a:	681b      	ldr	r3, [r3, #0]
    505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    505e:	2b00      	cmp	r3, #0
    5060:	d057      	beq.n	5112 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    5062:	20ff      	movs	r0, #255	; 0xff
    5064:	4b35      	ldr	r3, [pc, #212]	; (513c <vTraceStoreMemMangEvent+0x13c>)
    5066:	4798      	blx	r3
    5068:	0003      	movs	r3, r0
    506a:	001a      	movs	r2, r3
    506c:	232f      	movs	r3, #47	; 0x2f
    506e:	18fb      	adds	r3, r7, r3
    5070:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    5072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5074:	4a32      	ldr	r2, [pc, #200]	; (5140 <vTraceStoreMemMangEvent+0x140>)
    5076:	0019      	movs	r1, r3
    5078:	0010      	movs	r0, r2
    507a:	4b32      	ldr	r3, [pc, #200]	; (5144 <vTraceStoreMemMangEvent+0x144>)
    507c:	4798      	blx	r3
    507e:	0002      	movs	r2, r0
    5080:	232c      	movs	r3, #44	; 0x2c
    5082:	18fb      	adds	r3, r7, r3
    5084:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    5086:	4b30      	ldr	r3, [pc, #192]	; (5148 <vTraceStoreMemMangEvent+0x148>)
    5088:	4798      	blx	r3
    508a:	0003      	movs	r3, r0
    508c:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
    508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5090:	2b00      	cmp	r3, #0
    5092:	d03e      	beq.n	5112 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
    5094:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5096:	222f      	movs	r2, #47	; 0x2f
    5098:	18ba      	adds	r2, r7, r2
    509a:	7812      	ldrb	r2, [r2, #0]
    509c:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    50a0:	2200      	movs	r2, #0
    50a2:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
    50a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    50a6:	222c      	movs	r2, #44	; 0x2c
    50a8:	18ba      	adds	r2, r7, r2
    50aa:	8812      	ldrh	r2, [r2, #0]
    50ac:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    50ae:	4b27      	ldr	r3, [pc, #156]	; (514c <vTraceStoreMemMangEvent+0x14c>)
    50b0:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    50b2:	68bb      	ldr	r3, [r7, #8]
    50b4:	4a22      	ldr	r2, [pc, #136]	; (5140 <vTraceStoreMemMangEvent+0x140>)
    50b6:	0019      	movs	r1, r3
    50b8:	0010      	movs	r0, r2
    50ba:	4b22      	ldr	r3, [pc, #136]	; (5144 <vTraceStoreMemMangEvent+0x144>)
    50bc:	4798      	blx	r3
    50be:	0002      	movs	r2, r0
    50c0:	2326      	movs	r3, #38	; 0x26
    50c2:	18fb      	adds	r3, r7, r3
    50c4:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
    50c6:	2325      	movs	r3, #37	; 0x25
    50c8:	18fb      	adds	r3, r7, r3
    50ca:	2200      	movs	r2, #0
    50cc:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    50ce:	4b1e      	ldr	r3, [pc, #120]	; (5148 <vTraceStoreMemMangEvent+0x148>)
    50d0:	4798      	blx	r3
    50d2:	0003      	movs	r3, r0
    50d4:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
    50d6:	6a3b      	ldr	r3, [r7, #32]
    50d8:	2b00      	cmp	r3, #0
    50da:	d01a      	beq.n	5112 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
    50dc:	6a3b      	ldr	r3, [r7, #32]
    50de:	2226      	movs	r2, #38	; 0x26
    50e0:	18ba      	adds	r2, r7, r2
    50e2:	8812      	ldrh	r2, [r2, #0]
    50e4:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
    50e6:	6a3b      	ldr	r3, [r7, #32]
    50e8:	2225      	movs	r2, #37	; 0x25
    50ea:	18ba      	adds	r2, r7, r2
    50ec:	7812      	ldrb	r2, [r2, #0]
    50ee:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    50f0:	68fb      	ldr	r3, [r7, #12]
    50f2:	b2db      	uxtb	r3, r3
    50f4:	3301      	adds	r3, #1
    50f6:	b2da      	uxtb	r2, r3
    50f8:	6a3b      	ldr	r3, [r7, #32]
    50fa:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
    50fc:	68fb      	ldr	r3, [r7, #12]
    50fe:	b2da      	uxtb	r2, r3
    5100:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5102:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
    5104:	4b11      	ldr	r3, [pc, #68]	; (514c <vTraceStoreMemMangEvent+0x14c>)
    5106:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    5108:	4b09      	ldr	r3, [pc, #36]	; (5130 <vTraceStoreMemMangEvent+0x130>)
    510a:	681b      	ldr	r3, [r3, #0]
    510c:	4a0a      	ldr	r2, [pc, #40]	; (5138 <vTraceStoreMemMangEvent+0x138>)
    510e:	6812      	ldr	r2, [r2, #0]
    5110:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
    5112:	4b08      	ldr	r3, [pc, #32]	; (5134 <vTraceStoreMemMangEvent+0x134>)
    5114:	681b      	ldr	r3, [r3, #0]
    5116:	1e5a      	subs	r2, r3, #1
    5118:	4b06      	ldr	r3, [pc, #24]	; (5134 <vTraceStoreMemMangEvent+0x134>)
    511a:	601a      	str	r2, [r3, #0]
    511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    511e:	617b      	str	r3, [r7, #20]
    5120:	697b      	ldr	r3, [r7, #20]
    5122:	f383 8810 	msr	PRIMASK, r3
    5126:	e000      	b.n	512a <vTraceStoreMemMangEvent+0x12a>
		return;
    5128:	46c0      	nop			; (mov r8, r8)
}
    512a:	46bd      	mov	sp, r7
    512c:	b00e      	add	sp, #56	; 0x38
    512e:	bd80      	pop	{r7, pc}
    5130:	20000c68 	.word	0x20000c68
    5134:	20000bc0 	.word	0x20000bc0
    5138:	20000bd4 	.word	0x20000bd4
    513c:	00006209 	.word	0x00006209
    5140:	0000ffff 	.word	0x0000ffff
    5144:	000053cd 	.word	0x000053cd
    5148:	00005bad 	.word	0x00005bad
    514c:	000061b1 	.word	0x000061b1

00005150 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
    5150:	b590      	push	{r4, r7, lr}
    5152:	b08b      	sub	sp, #44	; 0x2c
    5154:	af00      	add	r7, sp, #0
    5156:	60f8      	str	r0, [r7, #12]
    5158:	607a      	str	r2, [r7, #4]
    515a:	230b      	movs	r3, #11
    515c:	18fb      	adds	r3, r7, r3
    515e:	1c0a      	adds	r2, r1, #0
    5160:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    5162:	68fb      	ldr	r3, [r7, #12]
    5164:	2bfe      	cmp	r3, #254	; 0xfe
    5166:	d904      	bls.n	5172 <prvTraceStoreKernelCall+0x22>
    5168:	4b39      	ldr	r3, [pc, #228]	; (5250 <prvTraceStoreKernelCall+0x100>)
    516a:	0018      	movs	r0, r3
    516c:	4b39      	ldr	r3, [pc, #228]	; (5254 <prvTraceStoreKernelCall+0x104>)
    516e:	4798      	blx	r3
    5170:	e06b      	b.n	524a <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    5172:	230b      	movs	r3, #11
    5174:	18fb      	adds	r3, r7, r3
    5176:	781b      	ldrb	r3, [r3, #0]
    5178:	2b08      	cmp	r3, #8
    517a:	d904      	bls.n	5186 <prvTraceStoreKernelCall+0x36>
    517c:	4b36      	ldr	r3, [pc, #216]	; (5258 <prvTraceStoreKernelCall+0x108>)
    517e:	0018      	movs	r0, r3
    5180:	4b34      	ldr	r3, [pc, #208]	; (5254 <prvTraceStoreKernelCall+0x104>)
    5182:	4798      	blx	r3
    5184:	e061      	b.n	524a <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    5186:	4b35      	ldr	r3, [pc, #212]	; (525c <prvTraceStoreKernelCall+0x10c>)
    5188:	681a      	ldr	r2, [r3, #0]
    518a:	230b      	movs	r3, #11
    518c:	18fb      	adds	r3, r7, r3
    518e:	781b      	ldrb	r3, [r3, #0]
    5190:	2164      	movs	r1, #100	; 0x64
    5192:	18d3      	adds	r3, r2, r3
    5194:	185b      	adds	r3, r3, r1
    5196:	781b      	ldrb	r3, [r3, #0]
    5198:	001a      	movs	r2, r3
    519a:	687b      	ldr	r3, [r7, #4]
    519c:	429a      	cmp	r2, r3
    519e:	d204      	bcs.n	51aa <prvTraceStoreKernelCall+0x5a>
    51a0:	4b2f      	ldr	r3, [pc, #188]	; (5260 <prvTraceStoreKernelCall+0x110>)
    51a2:	0018      	movs	r0, r3
    51a4:	4b2b      	ldr	r3, [pc, #172]	; (5254 <prvTraceStoreKernelCall+0x104>)
    51a6:	4798      	blx	r3
    51a8:	e04f      	b.n	524a <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
    51aa:	4b2e      	ldr	r3, [pc, #184]	; (5264 <prvTraceStoreKernelCall+0x114>)
    51ac:	681b      	ldr	r3, [r3, #0]
    51ae:	2b00      	cmp	r3, #0
    51b0:	d004      	beq.n	51bc <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    51b2:	4b2d      	ldr	r3, [pc, #180]	; (5268 <prvTraceStoreKernelCall+0x118>)
    51b4:	0018      	movs	r0, r3
    51b6:	4b27      	ldr	r3, [pc, #156]	; (5254 <prvTraceStoreKernelCall+0x104>)
    51b8:	4798      	blx	r3
		return;
    51ba:	e046      	b.n	524a <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
    51bc:	4b2b      	ldr	r3, [pc, #172]	; (526c <prvTraceStoreKernelCall+0x11c>)
    51be:	781b      	ldrb	r3, [r3, #0]
    51c0:	2b00      	cmp	r3, #0
    51c2:	d041      	beq.n	5248 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    51c4:	f3ef 8310 	mrs	r3, PRIMASK
    51c8:	617b      	str	r3, [r7, #20]
  return(result);
    51ca:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
    51cc:	627b      	str	r3, [r7, #36]	; 0x24
    51ce:	2301      	movs	r3, #1
    51d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    51d2:	69bb      	ldr	r3, [r7, #24]
    51d4:	f383 8810 	msr	PRIMASK, r3
    51d8:	4b22      	ldr	r3, [pc, #136]	; (5264 <prvTraceStoreKernelCall+0x114>)
    51da:	681b      	ldr	r3, [r3, #0]
    51dc:	1c5a      	adds	r2, r3, #1
    51de:	4b21      	ldr	r3, [pc, #132]	; (5264 <prvTraceStoreKernelCall+0x114>)
    51e0:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    51e2:	4b1e      	ldr	r3, [pc, #120]	; (525c <prvTraceStoreKernelCall+0x10c>)
    51e4:	681b      	ldr	r3, [r3, #0]
    51e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    51e8:	2b00      	cmp	r3, #0
    51ea:	d022      	beq.n	5232 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    51ec:	2322      	movs	r3, #34	; 0x22
    51ee:	18fc      	adds	r4, r7, r3
    51f0:	4b1f      	ldr	r3, [pc, #124]	; (5270 <prvTraceStoreKernelCall+0x120>)
    51f2:	0018      	movs	r0, r3
    51f4:	4b1f      	ldr	r3, [pc, #124]	; (5274 <prvTraceStoreKernelCall+0x124>)
    51f6:	4798      	blx	r3
    51f8:	0003      	movs	r3, r0
    51fa:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    51fc:	2321      	movs	r3, #33	; 0x21
    51fe:	18fb      	adds	r3, r7, r3
    5200:	687a      	ldr	r2, [r7, #4]
    5202:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    5204:	4b1c      	ldr	r3, [pc, #112]	; (5278 <prvTraceStoreKernelCall+0x128>)
    5206:	4798      	blx	r3
    5208:	0003      	movs	r3, r0
    520a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    520c:	69fb      	ldr	r3, [r7, #28]
    520e:	2b00      	cmp	r3, #0
    5210:	d00f      	beq.n	5232 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
    5212:	69fb      	ldr	r3, [r7, #28]
    5214:	2222      	movs	r2, #34	; 0x22
    5216:	18ba      	adds	r2, r7, r2
    5218:	8812      	ldrh	r2, [r2, #0]
    521a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
    521c:	68fb      	ldr	r3, [r7, #12]
    521e:	b2da      	uxtb	r2, r3
    5220:	69fb      	ldr	r3, [r7, #28]
    5222:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    5224:	69fb      	ldr	r3, [r7, #28]
    5226:	2221      	movs	r2, #33	; 0x21
    5228:	18ba      	adds	r2, r7, r2
    522a:	7812      	ldrb	r2, [r2, #0]
    522c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    522e:	4b13      	ldr	r3, [pc, #76]	; (527c <prvTraceStoreKernelCall+0x12c>)
    5230:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    5232:	4b0c      	ldr	r3, [pc, #48]	; (5264 <prvTraceStoreKernelCall+0x114>)
    5234:	681b      	ldr	r3, [r3, #0]
    5236:	1e5a      	subs	r2, r3, #1
    5238:	4b0a      	ldr	r3, [pc, #40]	; (5264 <prvTraceStoreKernelCall+0x114>)
    523a:	601a      	str	r2, [r3, #0]
    523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    523e:	613b      	str	r3, [r7, #16]
    5240:	693b      	ldr	r3, [r7, #16]
    5242:	f383 8810 	msr	PRIMASK, r3
    5246:	e000      	b.n	524a <prvTraceStoreKernelCall+0xfa>
		return;
    5248:	46c0      	nop			; (mov r8, r8)
}
    524a:	46bd      	mov	sp, r7
    524c:	b00b      	add	sp, #44	; 0x2c
    524e:	bd90      	pop	{r4, r7, pc}
    5250:	000238a0 	.word	0x000238a0
    5254:	00005ff5 	.word	0x00005ff5
    5258:	000238d8 	.word	0x000238d8
    525c:	20000c68 	.word	0x20000c68
    5260:	00023920 	.word	0x00023920
    5264:	20000bc0 	.word	0x20000bc0
    5268:	00023968 	.word	0x00023968
    526c:	20000bcc 	.word	0x20000bcc
    5270:	0000ffff 	.word	0x0000ffff
    5274:	00006209 	.word	0x00006209
    5278:	00005bad 	.word	0x00005bad
    527c:	000061b1 	.word	0x000061b1

00005280 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
    5280:	b580      	push	{r7, lr}
    5282:	b08a      	sub	sp, #40	; 0x28
    5284:	af00      	add	r7, sp, #0
    5286:	60f8      	str	r0, [r7, #12]
    5288:	607a      	str	r2, [r7, #4]
    528a:	603b      	str	r3, [r7, #0]
    528c:	230b      	movs	r3, #11
    528e:	18fb      	adds	r3, r7, r3
    5290:	1c0a      	adds	r2, r1, #0
    5292:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    5294:	68fb      	ldr	r3, [r7, #12]
    5296:	2bfe      	cmp	r3, #254	; 0xfe
    5298:	d904      	bls.n	52a4 <prvTraceStoreKernelCallWithParam+0x24>
    529a:	4b40      	ldr	r3, [pc, #256]	; (539c <prvTraceStoreKernelCallWithParam+0x11c>)
    529c:	0018      	movs	r0, r3
    529e:	4b40      	ldr	r3, [pc, #256]	; (53a0 <prvTraceStoreKernelCallWithParam+0x120>)
    52a0:	4798      	blx	r3
    52a2:	e077      	b.n	5394 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    52a4:	230b      	movs	r3, #11
    52a6:	18fb      	adds	r3, r7, r3
    52a8:	781b      	ldrb	r3, [r3, #0]
    52aa:	2b08      	cmp	r3, #8
    52ac:	d904      	bls.n	52b8 <prvTraceStoreKernelCallWithParam+0x38>
    52ae:	4b3d      	ldr	r3, [pc, #244]	; (53a4 <prvTraceStoreKernelCallWithParam+0x124>)
    52b0:	0018      	movs	r0, r3
    52b2:	4b3b      	ldr	r3, [pc, #236]	; (53a0 <prvTraceStoreKernelCallWithParam+0x120>)
    52b4:	4798      	blx	r3
    52b6:	e06d      	b.n	5394 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    52b8:	4b3b      	ldr	r3, [pc, #236]	; (53a8 <prvTraceStoreKernelCallWithParam+0x128>)
    52ba:	681a      	ldr	r2, [r3, #0]
    52bc:	230b      	movs	r3, #11
    52be:	18fb      	adds	r3, r7, r3
    52c0:	781b      	ldrb	r3, [r3, #0]
    52c2:	2164      	movs	r1, #100	; 0x64
    52c4:	18d3      	adds	r3, r2, r3
    52c6:	185b      	adds	r3, r3, r1
    52c8:	781b      	ldrb	r3, [r3, #0]
    52ca:	001a      	movs	r2, r3
    52cc:	687b      	ldr	r3, [r7, #4]
    52ce:	429a      	cmp	r2, r3
    52d0:	d204      	bcs.n	52dc <prvTraceStoreKernelCallWithParam+0x5c>
    52d2:	4b36      	ldr	r3, [pc, #216]	; (53ac <prvTraceStoreKernelCallWithParam+0x12c>)
    52d4:	0018      	movs	r0, r3
    52d6:	4b32      	ldr	r3, [pc, #200]	; (53a0 <prvTraceStoreKernelCallWithParam+0x120>)
    52d8:	4798      	blx	r3
    52da:	e05b      	b.n	5394 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
    52dc:	4b34      	ldr	r3, [pc, #208]	; (53b0 <prvTraceStoreKernelCallWithParam+0x130>)
    52de:	681b      	ldr	r3, [r3, #0]
    52e0:	2b00      	cmp	r3, #0
    52e2:	d004      	beq.n	52ee <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    52e4:	4b33      	ldr	r3, [pc, #204]	; (53b4 <prvTraceStoreKernelCallWithParam+0x134>)
    52e6:	0018      	movs	r0, r3
    52e8:	4b2d      	ldr	r3, [pc, #180]	; (53a0 <prvTraceStoreKernelCallWithParam+0x120>)
    52ea:	4798      	blx	r3
		return;
    52ec:	e052      	b.n	5394 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    52ee:	f3ef 8310 	mrs	r3, PRIMASK
    52f2:	617b      	str	r3, [r7, #20]
  return(result);
    52f4:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
    52f6:	627b      	str	r3, [r7, #36]	; 0x24
    52f8:	2301      	movs	r3, #1
    52fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    52fc:	69bb      	ldr	r3, [r7, #24]
    52fe:	f383 8810 	msr	PRIMASK, r3
    5302:	4b2b      	ldr	r3, [pc, #172]	; (53b0 <prvTraceStoreKernelCallWithParam+0x130>)
    5304:	681b      	ldr	r3, [r3, #0]
    5306:	1c5a      	adds	r2, r3, #1
    5308:	4b29      	ldr	r3, [pc, #164]	; (53b0 <prvTraceStoreKernelCallWithParam+0x130>)
    530a:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    530c:	4b26      	ldr	r3, [pc, #152]	; (53a8 <prvTraceStoreKernelCallWithParam+0x128>)
    530e:	681b      	ldr	r3, [r3, #0]
    5310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5312:	2b00      	cmp	r3, #0
    5314:	d034      	beq.n	5380 <prvTraceStoreKernelCallWithParam+0x100>
    5316:	4b28      	ldr	r3, [pc, #160]	; (53b8 <prvTraceStoreKernelCallWithParam+0x138>)
    5318:	781b      	ldrb	r3, [r3, #0]
    531a:	2b00      	cmp	r3, #0
    531c:	d030      	beq.n	5380 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    531e:	20ff      	movs	r0, #255	; 0xff
    5320:	4b26      	ldr	r3, [pc, #152]	; (53bc <prvTraceStoreKernelCallWithParam+0x13c>)
    5322:	4798      	blx	r3
    5324:	0003      	movs	r3, r0
    5326:	001a      	movs	r2, r3
    5328:	2323      	movs	r3, #35	; 0x23
    532a:	18fb      	adds	r3, r7, r3
    532c:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    532e:	683b      	ldr	r3, [r7, #0]
    5330:	0019      	movs	r1, r3
    5332:	20ff      	movs	r0, #255	; 0xff
    5334:	4b22      	ldr	r3, [pc, #136]	; (53c0 <prvTraceStoreKernelCallWithParam+0x140>)
    5336:	4798      	blx	r3
    5338:	0002      	movs	r2, r0
    533a:	2322      	movs	r3, #34	; 0x22
    533c:	18fb      	adds	r3, r7, r3
    533e:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    5340:	2321      	movs	r3, #33	; 0x21
    5342:	18fb      	adds	r3, r7, r3
    5344:	687a      	ldr	r2, [r7, #4]
    5346:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    5348:	4b1e      	ldr	r3, [pc, #120]	; (53c4 <prvTraceStoreKernelCallWithParam+0x144>)
    534a:	4798      	blx	r3
    534c:	0003      	movs	r3, r0
    534e:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    5350:	69fb      	ldr	r3, [r7, #28]
    5352:	2b00      	cmp	r3, #0
    5354:	d014      	beq.n	5380 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
    5356:	69fb      	ldr	r3, [r7, #28]
    5358:	2223      	movs	r2, #35	; 0x23
    535a:	18ba      	adds	r2, r7, r2
    535c:	7812      	ldrb	r2, [r2, #0]
    535e:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
    5360:	68fb      	ldr	r3, [r7, #12]
    5362:	b2da      	uxtb	r2, r3
    5364:	69fb      	ldr	r3, [r7, #28]
    5366:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    5368:	69fb      	ldr	r3, [r7, #28]
    536a:	2221      	movs	r2, #33	; 0x21
    536c:	18ba      	adds	r2, r7, r2
    536e:	7812      	ldrb	r2, [r2, #0]
    5370:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
    5372:	69fb      	ldr	r3, [r7, #28]
    5374:	2222      	movs	r2, #34	; 0x22
    5376:	18ba      	adds	r2, r7, r2
    5378:	7812      	ldrb	r2, [r2, #0]
    537a:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
    537c:	4b12      	ldr	r3, [pc, #72]	; (53c8 <prvTraceStoreKernelCallWithParam+0x148>)
    537e:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    5380:	4b0b      	ldr	r3, [pc, #44]	; (53b0 <prvTraceStoreKernelCallWithParam+0x130>)
    5382:	681b      	ldr	r3, [r3, #0]
    5384:	1e5a      	subs	r2, r3, #1
    5386:	4b0a      	ldr	r3, [pc, #40]	; (53b0 <prvTraceStoreKernelCallWithParam+0x130>)
    5388:	601a      	str	r2, [r3, #0]
    538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    538c:	613b      	str	r3, [r7, #16]
    538e:	693b      	ldr	r3, [r7, #16]
    5390:	f383 8810 	msr	PRIMASK, r3
}
    5394:	46bd      	mov	sp, r7
    5396:	b00a      	add	sp, #40	; 0x28
    5398:	bd80      	pop	{r7, pc}
    539a:	46c0      	nop			; (mov r8, r8)
    539c:	000239a0 	.word	0x000239a0
    53a0:	00005ff5 	.word	0x00005ff5
    53a4:	000239e0 	.word	0x000239e0
    53a8:	20000c68 	.word	0x20000c68
    53ac:	00023a30 	.word	0x00023a30
    53b0:	20000bc0 	.word	0x20000bc0
    53b4:	00023a80 	.word	0x00023a80
    53b8:	20000bcc 	.word	0x20000bcc
    53bc:	00006209 	.word	0x00006209
    53c0:	000053cd 	.word	0x000053cd
    53c4:	00005bad 	.word	0x00005bad
    53c8:	000061b1 	.word	0x000061b1

000053cc <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
    53cc:	b580      	push	{r7, lr}
    53ce:	b084      	sub	sp, #16
    53d0:	af00      	add	r7, sp, #0
    53d2:	6078      	str	r0, [r7, #4]
    53d4:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    53d6:	687b      	ldr	r3, [r7, #4]
    53d8:	2bff      	cmp	r3, #255	; 0xff
    53da:	d009      	beq.n	53f0 <prvTraceGetParam+0x24>
    53dc:	687b      	ldr	r3, [r7, #4]
    53de:	4a19      	ldr	r2, [pc, #100]	; (5444 <prvTraceGetParam+0x78>)
    53e0:	4293      	cmp	r3, r2
    53e2:	d005      	beq.n	53f0 <prvTraceGetParam+0x24>
    53e4:	4b18      	ldr	r3, [pc, #96]	; (5448 <prvTraceGetParam+0x7c>)
    53e6:	0018      	movs	r0, r3
    53e8:	4b18      	ldr	r3, [pc, #96]	; (544c <prvTraceGetParam+0x80>)
    53ea:	4798      	blx	r3
    53ec:	683b      	ldr	r3, [r7, #0]
    53ee:	e024      	b.n	543a <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    53f0:	683a      	ldr	r2, [r7, #0]
    53f2:	687b      	ldr	r3, [r7, #4]
    53f4:	429a      	cmp	r2, r3
    53f6:	d801      	bhi.n	53fc <prvTraceGetParam+0x30>
	{
		return param;
    53f8:	683b      	ldr	r3, [r7, #0]
    53fa:	e01e      	b.n	543a <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    53fc:	4b14      	ldr	r3, [pc, #80]	; (5450 <prvTraceGetParam+0x84>)
    53fe:	4798      	blx	r3
    5400:	0003      	movs	r3, r0
    5402:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
    5404:	68fb      	ldr	r3, [r7, #12]
    5406:	2b00      	cmp	r3, #0
    5408:	d014      	beq.n	5434 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
    540a:	68fb      	ldr	r3, [r7, #12]
    540c:	2201      	movs	r2, #1
    540e:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	43db      	mvns	r3, r3
    5414:	683a      	ldr	r2, [r7, #0]
    5416:	4013      	ands	r3, r2
    5418:	0a1b      	lsrs	r3, r3, #8
    541a:	b2da      	uxtb	r2, r3
    541c:	68fb      	ldr	r3, [r7, #12]
    541e:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    5420:	687b      	ldr	r3, [r7, #4]
    5422:	43db      	mvns	r3, r3
    5424:	683a      	ldr	r2, [r7, #0]
    5426:	4013      	ands	r3, r2
    5428:	0c1b      	lsrs	r3, r3, #16
    542a:	b29a      	uxth	r2, r3
    542c:	68fb      	ldr	r3, [r7, #12]
    542e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    5430:	4b08      	ldr	r3, [pc, #32]	; (5454 <prvTraceGetParam+0x88>)
    5432:	4798      	blx	r3
		}

		return param & param_max;
    5434:	683b      	ldr	r3, [r7, #0]
    5436:	687a      	ldr	r2, [r7, #4]
    5438:	4013      	ands	r3, r2
	}
}
    543a:	0018      	movs	r0, r3
    543c:	46bd      	mov	sp, r7
    543e:	b004      	add	sp, #16
    5440:	bd80      	pop	{r7, pc}
    5442:	46c0      	nop			; (mov r8, r8)
    5444:	0000ffff 	.word	0x0000ffff
    5448:	00023ab8 	.word	0x00023ab8
    544c:	00005ff5 	.word	0x00005ff5
    5450:	00005bad 	.word	0x00005bad
    5454:	000061b1 	.word	0x000061b1

00005458 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
    5458:	b580      	push	{r7, lr}
    545a:	b08a      	sub	sp, #40	; 0x28
    545c:	af00      	add	r7, sp, #0
    545e:	6078      	str	r0, [r7, #4]
    5460:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
    5462:	2326      	movs	r3, #38	; 0x26
    5464:	18fb      	adds	r3, r7, r3
    5466:	2200      	movs	r2, #0
    5468:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	2bfe      	cmp	r3, #254	; 0xfe
    546e:	d904      	bls.n	547a <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
    5470:	4b2d      	ldr	r3, [pc, #180]	; (5528 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
    5472:	0018      	movs	r0, r3
    5474:	4b2d      	ldr	r3, [pc, #180]	; (552c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    5476:	4798      	blx	r3
    5478:	e053      	b.n	5522 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
    547a:	4b2d      	ldr	r3, [pc, #180]	; (5530 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    547c:	681b      	ldr	r3, [r3, #0]
    547e:	2b00      	cmp	r3, #0
    5480:	d004      	beq.n	548c <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    5482:	4b2c      	ldr	r3, [pc, #176]	; (5534 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
    5484:	0018      	movs	r0, r3
    5486:	4b29      	ldr	r3, [pc, #164]	; (552c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    5488:	4798      	blx	r3
		return;
    548a:	e04a      	b.n	5522 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    548c:	f3ef 8310 	mrs	r3, PRIMASK
    5490:	613b      	str	r3, [r7, #16]
  return(result);
    5492:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
    5494:	623b      	str	r3, [r7, #32]
    5496:	2301      	movs	r3, #1
    5498:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    549a:	697b      	ldr	r3, [r7, #20]
    549c:	f383 8810 	msr	PRIMASK, r3
    54a0:	4b23      	ldr	r3, [pc, #140]	; (5530 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    54a2:	681b      	ldr	r3, [r3, #0]
    54a4:	1c5a      	adds	r2, r3, #1
    54a6:	4b22      	ldr	r3, [pc, #136]	; (5530 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    54a8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    54aa:	4b23      	ldr	r3, [pc, #140]	; (5538 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
    54ac:	681b      	ldr	r3, [r3, #0]
    54ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    54b0:	2b00      	cmp	r3, #0
    54b2:	d02c      	beq.n	550e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
    54b4:	4b21      	ldr	r3, [pc, #132]	; (553c <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
    54b6:	781b      	ldrb	r3, [r3, #0]
    54b8:	2b00      	cmp	r3, #0
    54ba:	d028      	beq.n	550e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    54bc:	20ff      	movs	r0, #255	; 0xff
    54be:	4b20      	ldr	r3, [pc, #128]	; (5540 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
    54c0:	4798      	blx	r3
    54c2:	0003      	movs	r3, r0
    54c4:	001a      	movs	r2, r3
    54c6:	231f      	movs	r3, #31
    54c8:	18fb      	adds	r3, r7, r3
    54ca:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    54cc:	683b      	ldr	r3, [r7, #0]
    54ce:	4a1d      	ldr	r2, [pc, #116]	; (5544 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
    54d0:	0019      	movs	r1, r3
    54d2:	0010      	movs	r0, r2
    54d4:	4b1c      	ldr	r3, [pc, #112]	; (5548 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
    54d6:	4798      	blx	r3
    54d8:	0002      	movs	r2, r0
    54da:	2326      	movs	r3, #38	; 0x26
    54dc:	18fb      	adds	r3, r7, r3
    54de:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    54e0:	4b1a      	ldr	r3, [pc, #104]	; (554c <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
    54e2:	4798      	blx	r3
    54e4:	0003      	movs	r3, r0
    54e6:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
    54e8:	69bb      	ldr	r3, [r7, #24]
    54ea:	2b00      	cmp	r3, #0
    54ec:	d00f      	beq.n	550e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
    54ee:	69bb      	ldr	r3, [r7, #24]
    54f0:	221f      	movs	r2, #31
    54f2:	18ba      	adds	r2, r7, r2
    54f4:	7812      	ldrb	r2, [r2, #0]
    54f6:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
    54f8:	687b      	ldr	r3, [r7, #4]
    54fa:	b2da      	uxtb	r2, r3
    54fc:	69bb      	ldr	r3, [r7, #24]
    54fe:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
    5500:	69bb      	ldr	r3, [r7, #24]
    5502:	2226      	movs	r2, #38	; 0x26
    5504:	18ba      	adds	r2, r7, r2
    5506:	8812      	ldrh	r2, [r2, #0]
    5508:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    550a:	4b11      	ldr	r3, [pc, #68]	; (5550 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
    550c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    550e:	4b08      	ldr	r3, [pc, #32]	; (5530 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    5510:	681b      	ldr	r3, [r3, #0]
    5512:	1e5a      	subs	r2, r3, #1
    5514:	4b06      	ldr	r3, [pc, #24]	; (5530 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    5516:	601a      	str	r2, [r3, #0]
    5518:	6a3b      	ldr	r3, [r7, #32]
    551a:	60fb      	str	r3, [r7, #12]
    551c:	68fb      	ldr	r3, [r7, #12]
    551e:	f383 8810 	msr	PRIMASK, r3
}
    5522:	46bd      	mov	sp, r7
    5524:	b00a      	add	sp, #40	; 0x28
    5526:	bd80      	pop	{r7, pc}
    5528:	00023af4 	.word	0x00023af4
    552c:	00005ff5 	.word	0x00005ff5
    5530:	20000bc0 	.word	0x20000bc0
    5534:	00023b4c 	.word	0x00023b4c
    5538:	20000c68 	.word	0x20000c68
    553c:	20000bcc 	.word	0x20000bcc
    5540:	00006209 	.word	0x00006209
    5544:	0000ffff 	.word	0x0000ffff
    5548:	000053cd 	.word	0x000053cd
    554c:	00005bad 	.word	0x00005bad
    5550:	000061b1 	.word	0x000061b1

00005554 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
    5554:	b590      	push	{r4, r7, lr}
    5556:	b089      	sub	sp, #36	; 0x24
    5558:	af00      	add	r7, sp, #0
    555a:	0002      	movs	r2, r0
    555c:	1dfb      	adds	r3, r7, #7
    555e:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    5560:	1dfb      	adds	r3, r7, #7
    5562:	781b      	ldrb	r3, [r3, #0]
    5564:	2b0f      	cmp	r3, #15
    5566:	d904      	bls.n	5572 <prvTraceStoreTaskswitch+0x1e>
    5568:	4b34      	ldr	r3, [pc, #208]	; (563c <prvTraceStoreTaskswitch+0xe8>)
    556a:	0018      	movs	r0, r3
    556c:	4b34      	ldr	r3, [pc, #208]	; (5640 <prvTraceStoreTaskswitch+0xec>)
    556e:	4798      	blx	r3
    5570:	e061      	b.n	5636 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5572:	f3ef 8310 	mrs	r3, PRIMASK
    5576:	60fb      	str	r3, [r7, #12]
  return(result);
    5578:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    557a:	61fb      	str	r3, [r7, #28]
    557c:	2301      	movs	r3, #1
    557e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5580:	693b      	ldr	r3, [r7, #16]
    5582:	f383 8810 	msr	PRIMASK, r3
    5586:	4b2f      	ldr	r3, [pc, #188]	; (5644 <prvTraceStoreTaskswitch+0xf0>)
    5588:	681b      	ldr	r3, [r3, #0]
    558a:	1c5a      	adds	r2, r3, #1
    558c:	4b2d      	ldr	r3, [pc, #180]	; (5644 <prvTraceStoreTaskswitch+0xf0>)
    558e:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    5590:	4b2d      	ldr	r3, [pc, #180]	; (5648 <prvTraceStoreTaskswitch+0xf4>)
    5592:	781b      	ldrb	r3, [r3, #0]
    5594:	1dfa      	adds	r2, r7, #7
    5596:	7812      	ldrb	r2, [r2, #0]
    5598:	429a      	cmp	r2, r3
    559a:	d042      	beq.n	5622 <prvTraceStoreTaskswitch+0xce>
    559c:	4b2b      	ldr	r3, [pc, #172]	; (564c <prvTraceStoreTaskswitch+0xf8>)
    559e:	681b      	ldr	r3, [r3, #0]
    55a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    55a2:	2b00      	cmp	r3, #0
    55a4:	d03d      	beq.n	5622 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
    55a6:	4b2a      	ldr	r3, [pc, #168]	; (5650 <prvTraceStoreTaskswitch+0xfc>)
    55a8:	2200      	movs	r2, #0
    55aa:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    55ac:	231a      	movs	r3, #26
    55ae:	18fc      	adds	r4, r7, r3
    55b0:	4b28      	ldr	r3, [pc, #160]	; (5654 <prvTraceStoreTaskswitch+0x100>)
    55b2:	0018      	movs	r0, r3
    55b4:	4b28      	ldr	r3, [pc, #160]	; (5658 <prvTraceStoreTaskswitch+0x104>)
    55b6:	4798      	blx	r3
    55b8:	0003      	movs	r3, r0
    55ba:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
    55bc:	4b22      	ldr	r3, [pc, #136]	; (5648 <prvTraceStoreTaskswitch+0xf4>)
    55be:	1dfa      	adds	r2, r7, #7
    55c0:	7812      	ldrb	r2, [r2, #0]
    55c2:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
    55c4:	2319      	movs	r3, #25
    55c6:	18fb      	adds	r3, r7, r3
    55c8:	4a1f      	ldr	r2, [pc, #124]	; (5648 <prvTraceStoreTaskswitch+0xf4>)
    55ca:	7812      	ldrb	r2, [r2, #0]
    55cc:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    55ce:	4b23      	ldr	r3, [pc, #140]	; (565c <prvTraceStoreTaskswitch+0x108>)
    55d0:	4798      	blx	r3
    55d2:	0003      	movs	r3, r0
    55d4:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
    55d6:	697b      	ldr	r3, [r7, #20]
    55d8:	2b00      	cmp	r3, #0
    55da:	d022      	beq.n	5622 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    55dc:	4b1a      	ldr	r3, [pc, #104]	; (5648 <prvTraceStoreTaskswitch+0xf4>)
    55de:	781b      	ldrb	r3, [r3, #0]
    55e0:	0019      	movs	r1, r3
    55e2:	2003      	movs	r0, #3
    55e4:	4b1e      	ldr	r3, [pc, #120]	; (5660 <prvTraceStoreTaskswitch+0x10c>)
    55e6:	4798      	blx	r3
    55e8:	0003      	movs	r3, r0
    55ea:	2b01      	cmp	r3, #1
    55ec:	d103      	bne.n	55f6 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
    55ee:	697b      	ldr	r3, [r7, #20]
    55f0:	2207      	movs	r2, #7
    55f2:	701a      	strb	r2, [r3, #0]
    55f4:	e002      	b.n	55fc <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
    55f6:	697b      	ldr	r3, [r7, #20]
    55f8:	2206      	movs	r2, #6
    55fa:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
    55fc:	697b      	ldr	r3, [r7, #20]
    55fe:	221a      	movs	r2, #26
    5600:	18ba      	adds	r2, r7, r2
    5602:	8812      	ldrh	r2, [r2, #0]
    5604:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
    5606:	697b      	ldr	r3, [r7, #20]
    5608:	2219      	movs	r2, #25
    560a:	18ba      	adds	r2, r7, r2
    560c:	7812      	ldrb	r2, [r2, #0]
    560e:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
    5610:	4b0d      	ldr	r3, [pc, #52]	; (5648 <prvTraceStoreTaskswitch+0xf4>)
    5612:	781b      	ldrb	r3, [r3, #0]
    5614:	2201      	movs	r2, #1
    5616:	0019      	movs	r1, r3
    5618:	2003      	movs	r0, #3
    561a:	4b12      	ldr	r3, [pc, #72]	; (5664 <prvTraceStoreTaskswitch+0x110>)
    561c:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
    561e:	4b12      	ldr	r3, [pc, #72]	; (5668 <prvTraceStoreTaskswitch+0x114>)
    5620:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    5622:	4b08      	ldr	r3, [pc, #32]	; (5644 <prvTraceStoreTaskswitch+0xf0>)
    5624:	681b      	ldr	r3, [r3, #0]
    5626:	1e5a      	subs	r2, r3, #1
    5628:	4b06      	ldr	r3, [pc, #24]	; (5644 <prvTraceStoreTaskswitch+0xf0>)
    562a:	601a      	str	r2, [r3, #0]
    562c:	69fb      	ldr	r3, [r7, #28]
    562e:	60bb      	str	r3, [r7, #8]
    5630:	68bb      	ldr	r3, [r7, #8]
    5632:	f383 8810 	msr	PRIMASK, r3
}
    5636:	46bd      	mov	sp, r7
    5638:	b009      	add	sp, #36	; 0x24
    563a:	bd90      	pop	{r4, r7, pc}
    563c:	00023b84 	.word	0x00023b84
    5640:	00005ff5 	.word	0x00005ff5
    5644:	20000bc0 	.word	0x20000bc0
    5648:	20000bcc 	.word	0x20000bcc
    564c:	20000c68 	.word	0x20000c68
    5650:	20000bac 	.word	0x20000bac
    5654:	0000ffff 	.word	0x0000ffff
    5658:	00006209 	.word	0x00006209
    565c:	00005bad 	.word	0x00005bad
    5660:	00005851 	.word	0x00005851
    5664:	000057ad 	.word	0x000057ad
    5668:	000061b1 	.word	0x000061b1

0000566c <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
    566c:	b590      	push	{r4, r7, lr}
    566e:	b083      	sub	sp, #12
    5670:	af00      	add	r7, sp, #0
    5672:	0004      	movs	r4, r0
    5674:	0008      	movs	r0, r1
    5676:	0011      	movs	r1, r2
    5678:	1dfb      	adds	r3, r7, #7
    567a:	1c22      	adds	r2, r4, #0
    567c:	701a      	strb	r2, [r3, #0]
    567e:	1dbb      	adds	r3, r7, #6
    5680:	1c02      	adds	r2, r0, #0
    5682:	701a      	strb	r2, [r3, #0]
    5684:	1d7b      	adds	r3, r7, #5
    5686:	1c0a      	adds	r2, r1, #0
    5688:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    568a:	1dfb      	adds	r3, r7, #7
    568c:	781b      	ldrb	r3, [r3, #0]
    568e:	2b08      	cmp	r3, #8
    5690:	d904      	bls.n	569c <prvTraceSetPriorityProperty+0x30>
    5692:	4b1a      	ldr	r3, [pc, #104]	; (56fc <prvTraceSetPriorityProperty+0x90>)
    5694:	0018      	movs	r0, r3
    5696:	4b1a      	ldr	r3, [pc, #104]	; (5700 <prvTraceSetPriorityProperty+0x94>)
    5698:	4798      	blx	r3
    569a:	e02c      	b.n	56f6 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    569c:	4b19      	ldr	r3, [pc, #100]	; (5704 <prvTraceSetPriorityProperty+0x98>)
    569e:	681a      	ldr	r2, [r3, #0]
    56a0:	1dfb      	adds	r3, r7, #7
    56a2:	781b      	ldrb	r3, [r3, #0]
    56a4:	2164      	movs	r1, #100	; 0x64
    56a6:	18d3      	adds	r3, r2, r3
    56a8:	185b      	adds	r3, r3, r1
    56aa:	781b      	ldrb	r3, [r3, #0]
    56ac:	1dba      	adds	r2, r7, #6
    56ae:	7812      	ldrb	r2, [r2, #0]
    56b0:	429a      	cmp	r2, r3
    56b2:	d904      	bls.n	56be <prvTraceSetPriorityProperty+0x52>
    56b4:	4b14      	ldr	r3, [pc, #80]	; (5708 <prvTraceSetPriorityProperty+0x9c>)
    56b6:	0018      	movs	r0, r3
    56b8:	4b11      	ldr	r3, [pc, #68]	; (5700 <prvTraceSetPriorityProperty+0x94>)
    56ba:	4798      	blx	r3
    56bc:	e01b      	b.n	56f6 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    56be:	4b11      	ldr	r3, [pc, #68]	; (5704 <prvTraceSetPriorityProperty+0x98>)
    56c0:	681c      	ldr	r4, [r3, #0]
    56c2:	1dfb      	adds	r3, r7, #7
    56c4:	781a      	ldrb	r2, [r3, #0]
    56c6:	1dbb      	adds	r3, r7, #6
    56c8:	781b      	ldrb	r3, [r3, #0]
    56ca:	0011      	movs	r1, r2
    56cc:	0018      	movs	r0, r3
    56ce:	4b0f      	ldr	r3, [pc, #60]	; (570c <prvTraceSetPriorityProperty+0xa0>)
    56d0:	4798      	blx	r3
    56d2:	0003      	movs	r3, r0
    56d4:	0018      	movs	r0, r3
    56d6:	4b0b      	ldr	r3, [pc, #44]	; (5704 <prvTraceSetPriorityProperty+0x98>)
    56d8:	681a      	ldr	r2, [r3, #0]
    56da:	1dfb      	adds	r3, r7, #7
    56dc:	781b      	ldrb	r3, [r3, #0]
    56de:	2170      	movs	r1, #112	; 0x70
    56e0:	18d3      	adds	r3, r2, r3
    56e2:	185b      	adds	r3, r3, r1
    56e4:	781b      	ldrb	r3, [r3, #0]
    56e6:	18c3      	adds	r3, r0, r3
    56e8:	3301      	adds	r3, #1
    56ea:	229c      	movs	r2, #156	; 0x9c
    56ec:	18e3      	adds	r3, r4, r3
    56ee:	189b      	adds	r3, r3, r2
    56f0:	1d7a      	adds	r2, r7, #5
    56f2:	7812      	ldrb	r2, [r2, #0]
    56f4:	701a      	strb	r2, [r3, #0]
}
    56f6:	46bd      	mov	sp, r7
    56f8:	b003      	add	sp, #12
    56fa:	bd90      	pop	{r4, r7, pc}
    56fc:	00023d18 	.word	0x00023d18
    5700:	00005ff5 	.word	0x00005ff5
    5704:	20000c68 	.word	0x20000c68
    5708:	00023d64 	.word	0x00023d64
    570c:	00005c01 	.word	0x00005c01

00005710 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
    5710:	b590      	push	{r4, r7, lr}
    5712:	b083      	sub	sp, #12
    5714:	af00      	add	r7, sp, #0
    5716:	0002      	movs	r2, r0
    5718:	1dfb      	adds	r3, r7, #7
    571a:	701a      	strb	r2, [r3, #0]
    571c:	1dbb      	adds	r3, r7, #6
    571e:	1c0a      	adds	r2, r1, #0
    5720:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    5722:	1dfb      	adds	r3, r7, #7
    5724:	781b      	ldrb	r3, [r3, #0]
    5726:	2b08      	cmp	r3, #8
    5728:	d905      	bls.n	5736 <prvTraceGetPriorityProperty+0x26>
    572a:	4b1b      	ldr	r3, [pc, #108]	; (5798 <prvTraceGetPriorityProperty+0x88>)
    572c:	0018      	movs	r0, r3
    572e:	4b1b      	ldr	r3, [pc, #108]	; (579c <prvTraceGetPriorityProperty+0x8c>)
    5730:	4798      	blx	r3
    5732:	2300      	movs	r3, #0
    5734:	e02b      	b.n	578e <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    5736:	4b1a      	ldr	r3, [pc, #104]	; (57a0 <prvTraceGetPriorityProperty+0x90>)
    5738:	681a      	ldr	r2, [r3, #0]
    573a:	1dfb      	adds	r3, r7, #7
    573c:	781b      	ldrb	r3, [r3, #0]
    573e:	2164      	movs	r1, #100	; 0x64
    5740:	18d3      	adds	r3, r2, r3
    5742:	185b      	adds	r3, r3, r1
    5744:	781b      	ldrb	r3, [r3, #0]
    5746:	1dba      	adds	r2, r7, #6
    5748:	7812      	ldrb	r2, [r2, #0]
    574a:	429a      	cmp	r2, r3
    574c:	d905      	bls.n	575a <prvTraceGetPriorityProperty+0x4a>
    574e:	4b15      	ldr	r3, [pc, #84]	; (57a4 <prvTraceGetPriorityProperty+0x94>)
    5750:	0018      	movs	r0, r3
    5752:	4b12      	ldr	r3, [pc, #72]	; (579c <prvTraceGetPriorityProperty+0x8c>)
    5754:	4798      	blx	r3
    5756:	2300      	movs	r3, #0
    5758:	e019      	b.n	578e <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    575a:	4b11      	ldr	r3, [pc, #68]	; (57a0 <prvTraceGetPriorityProperty+0x90>)
    575c:	681c      	ldr	r4, [r3, #0]
    575e:	1dfb      	adds	r3, r7, #7
    5760:	781a      	ldrb	r2, [r3, #0]
    5762:	1dbb      	adds	r3, r7, #6
    5764:	781b      	ldrb	r3, [r3, #0]
    5766:	0011      	movs	r1, r2
    5768:	0018      	movs	r0, r3
    576a:	4b0f      	ldr	r3, [pc, #60]	; (57a8 <prvTraceGetPriorityProperty+0x98>)
    576c:	4798      	blx	r3
    576e:	0003      	movs	r3, r0
    5770:	0018      	movs	r0, r3
    5772:	4b0b      	ldr	r3, [pc, #44]	; (57a0 <prvTraceGetPriorityProperty+0x90>)
    5774:	681a      	ldr	r2, [r3, #0]
    5776:	1dfb      	adds	r3, r7, #7
    5778:	781b      	ldrb	r3, [r3, #0]
    577a:	2170      	movs	r1, #112	; 0x70
    577c:	18d3      	adds	r3, r2, r3
    577e:	185b      	adds	r3, r3, r1
    5780:	781b      	ldrb	r3, [r3, #0]
    5782:	18c3      	adds	r3, r0, r3
    5784:	3301      	adds	r3, #1
    5786:	229c      	movs	r2, #156	; 0x9c
    5788:	18e3      	adds	r3, r4, r3
    578a:	189b      	adds	r3, r3, r2
    578c:	781b      	ldrb	r3, [r3, #0]
}
    578e:	0018      	movs	r0, r3
    5790:	46bd      	mov	sp, r7
    5792:	b003      	add	sp, #12
    5794:	bd90      	pop	{r4, r7, pc}
    5796:	46c0      	nop			; (mov r8, r8)
    5798:	00023da4 	.word	0x00023da4
    579c:	00005ff5 	.word	0x00005ff5
    57a0:	20000c68 	.word	0x20000c68
    57a4:	00023df0 	.word	0x00023df0
    57a8:	00005c01 	.word	0x00005c01

000057ac <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
    57ac:	b590      	push	{r4, r7, lr}
    57ae:	b083      	sub	sp, #12
    57b0:	af00      	add	r7, sp, #0
    57b2:	0004      	movs	r4, r0
    57b4:	0008      	movs	r0, r1
    57b6:	0011      	movs	r1, r2
    57b8:	1dfb      	adds	r3, r7, #7
    57ba:	1c22      	adds	r2, r4, #0
    57bc:	701a      	strb	r2, [r3, #0]
    57be:	1dbb      	adds	r3, r7, #6
    57c0:	1c02      	adds	r2, r0, #0
    57c2:	701a      	strb	r2, [r3, #0]
    57c4:	1d7b      	adds	r3, r7, #5
    57c6:	1c0a      	adds	r2, r1, #0
    57c8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    57ca:	1dfb      	adds	r3, r7, #7
    57cc:	781b      	ldrb	r3, [r3, #0]
    57ce:	2b08      	cmp	r3, #8
    57d0:	d904      	bls.n	57dc <prvTraceSetObjectState+0x30>
    57d2:	4b1a      	ldr	r3, [pc, #104]	; (583c <prvTraceSetObjectState+0x90>)
    57d4:	0018      	movs	r0, r3
    57d6:	4b1a      	ldr	r3, [pc, #104]	; (5840 <prvTraceSetObjectState+0x94>)
    57d8:	4798      	blx	r3
    57da:	e02b      	b.n	5834 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    57dc:	4b19      	ldr	r3, [pc, #100]	; (5844 <prvTraceSetObjectState+0x98>)
    57de:	681a      	ldr	r2, [r3, #0]
    57e0:	1dfb      	adds	r3, r7, #7
    57e2:	781b      	ldrb	r3, [r3, #0]
    57e4:	2164      	movs	r1, #100	; 0x64
    57e6:	18d3      	adds	r3, r2, r3
    57e8:	185b      	adds	r3, r3, r1
    57ea:	781b      	ldrb	r3, [r3, #0]
    57ec:	1dba      	adds	r2, r7, #6
    57ee:	7812      	ldrb	r2, [r2, #0]
    57f0:	429a      	cmp	r2, r3
    57f2:	d904      	bls.n	57fe <prvTraceSetObjectState+0x52>
    57f4:	4b14      	ldr	r3, [pc, #80]	; (5848 <prvTraceSetObjectState+0x9c>)
    57f6:	0018      	movs	r0, r3
    57f8:	4b11      	ldr	r3, [pc, #68]	; (5840 <prvTraceSetObjectState+0x94>)
    57fa:	4798      	blx	r3
    57fc:	e01a      	b.n	5834 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    57fe:	4b11      	ldr	r3, [pc, #68]	; (5844 <prvTraceSetObjectState+0x98>)
    5800:	681c      	ldr	r4, [r3, #0]
    5802:	1dfb      	adds	r3, r7, #7
    5804:	781a      	ldrb	r2, [r3, #0]
    5806:	1dbb      	adds	r3, r7, #6
    5808:	781b      	ldrb	r3, [r3, #0]
    580a:	0011      	movs	r1, r2
    580c:	0018      	movs	r0, r3
    580e:	4b0f      	ldr	r3, [pc, #60]	; (584c <prvTraceSetObjectState+0xa0>)
    5810:	4798      	blx	r3
    5812:	0003      	movs	r3, r0
    5814:	0018      	movs	r0, r3
    5816:	4b0b      	ldr	r3, [pc, #44]	; (5844 <prvTraceSetObjectState+0x98>)
    5818:	681a      	ldr	r2, [r3, #0]
    581a:	1dfb      	adds	r3, r7, #7
    581c:	781b      	ldrb	r3, [r3, #0]
    581e:	2170      	movs	r1, #112	; 0x70
    5820:	18d3      	adds	r3, r2, r3
    5822:	185b      	adds	r3, r3, r1
    5824:	781b      	ldrb	r3, [r3, #0]
    5826:	18c3      	adds	r3, r0, r3
    5828:	229c      	movs	r2, #156	; 0x9c
    582a:	18e3      	adds	r3, r4, r3
    582c:	189b      	adds	r3, r3, r2
    582e:	1d7a      	adds	r2, r7, #5
    5830:	7812      	ldrb	r2, [r2, #0]
    5832:	701a      	strb	r2, [r3, #0]
}
    5834:	46bd      	mov	sp, r7
    5836:	b003      	add	sp, #12
    5838:	bd90      	pop	{r4, r7, pc}
    583a:	46c0      	nop			; (mov r8, r8)
    583c:	00023e30 	.word	0x00023e30
    5840:	00005ff5 	.word	0x00005ff5
    5844:	20000c68 	.word	0x20000c68
    5848:	00023e74 	.word	0x00023e74
    584c:	00005c01 	.word	0x00005c01

00005850 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
    5850:	b590      	push	{r4, r7, lr}
    5852:	b083      	sub	sp, #12
    5854:	af00      	add	r7, sp, #0
    5856:	0002      	movs	r2, r0
    5858:	1dfb      	adds	r3, r7, #7
    585a:	701a      	strb	r2, [r3, #0]
    585c:	1dbb      	adds	r3, r7, #6
    585e:	1c0a      	adds	r2, r1, #0
    5860:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    5862:	1dfb      	adds	r3, r7, #7
    5864:	781b      	ldrb	r3, [r3, #0]
    5866:	2b08      	cmp	r3, #8
    5868:	d905      	bls.n	5876 <prvTraceGetObjectState+0x26>
    586a:	4b1a      	ldr	r3, [pc, #104]	; (58d4 <prvTraceGetObjectState+0x84>)
    586c:	0018      	movs	r0, r3
    586e:	4b1a      	ldr	r3, [pc, #104]	; (58d8 <prvTraceGetObjectState+0x88>)
    5870:	4798      	blx	r3
    5872:	2300      	movs	r3, #0
    5874:	e02a      	b.n	58cc <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    5876:	4b19      	ldr	r3, [pc, #100]	; (58dc <prvTraceGetObjectState+0x8c>)
    5878:	681a      	ldr	r2, [r3, #0]
    587a:	1dfb      	adds	r3, r7, #7
    587c:	781b      	ldrb	r3, [r3, #0]
    587e:	2164      	movs	r1, #100	; 0x64
    5880:	18d3      	adds	r3, r2, r3
    5882:	185b      	adds	r3, r3, r1
    5884:	781b      	ldrb	r3, [r3, #0]
    5886:	1dba      	adds	r2, r7, #6
    5888:	7812      	ldrb	r2, [r2, #0]
    588a:	429a      	cmp	r2, r3
    588c:	d905      	bls.n	589a <prvTraceGetObjectState+0x4a>
    588e:	4b14      	ldr	r3, [pc, #80]	; (58e0 <prvTraceGetObjectState+0x90>)
    5890:	0018      	movs	r0, r3
    5892:	4b11      	ldr	r3, [pc, #68]	; (58d8 <prvTraceGetObjectState+0x88>)
    5894:	4798      	blx	r3
    5896:	2300      	movs	r3, #0
    5898:	e018      	b.n	58cc <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    589a:	4b10      	ldr	r3, [pc, #64]	; (58dc <prvTraceGetObjectState+0x8c>)
    589c:	681c      	ldr	r4, [r3, #0]
    589e:	1dfb      	adds	r3, r7, #7
    58a0:	781a      	ldrb	r2, [r3, #0]
    58a2:	1dbb      	adds	r3, r7, #6
    58a4:	781b      	ldrb	r3, [r3, #0]
    58a6:	0011      	movs	r1, r2
    58a8:	0018      	movs	r0, r3
    58aa:	4b0e      	ldr	r3, [pc, #56]	; (58e4 <prvTraceGetObjectState+0x94>)
    58ac:	4798      	blx	r3
    58ae:	0003      	movs	r3, r0
    58b0:	0018      	movs	r0, r3
    58b2:	4b0a      	ldr	r3, [pc, #40]	; (58dc <prvTraceGetObjectState+0x8c>)
    58b4:	681a      	ldr	r2, [r3, #0]
    58b6:	1dfb      	adds	r3, r7, #7
    58b8:	781b      	ldrb	r3, [r3, #0]
    58ba:	2170      	movs	r1, #112	; 0x70
    58bc:	18d3      	adds	r3, r2, r3
    58be:	185b      	adds	r3, r3, r1
    58c0:	781b      	ldrb	r3, [r3, #0]
    58c2:	18c3      	adds	r3, r0, r3
    58c4:	229c      	movs	r2, #156	; 0x9c
    58c6:	18e3      	adds	r3, r4, r3
    58c8:	189b      	adds	r3, r3, r2
    58ca:	781b      	ldrb	r3, [r3, #0]
}
    58cc:	0018      	movs	r0, r3
    58ce:	46bd      	mov	sp, r7
    58d0:	b003      	add	sp, #12
    58d2:	bd90      	pop	{r4, r7, pc}
    58d4:	00023eb0 	.word	0x00023eb0
    58d8:	00005ff5 	.word	0x00005ff5
    58dc:	20000c68 	.word	0x20000c68
    58e0:	00023ef4 	.word	0x00023ef4
    58e4:	00005c01 	.word	0x00005c01

000058e8 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
    58e8:	b590      	push	{r4, r7, lr}
    58ea:	b083      	sub	sp, #12
    58ec:	af00      	add	r7, sp, #0
    58ee:	0002      	movs	r2, r0
    58f0:	1dfb      	adds	r3, r7, #7
    58f2:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    58f4:	4b11      	ldr	r3, [pc, #68]	; (593c <prvTraceSetTaskInstanceFinished+0x54>)
    58f6:	681b      	ldr	r3, [r3, #0]
    58f8:	2267      	movs	r2, #103	; 0x67
    58fa:	5c9b      	ldrb	r3, [r3, r2]
    58fc:	1dfa      	adds	r2, r7, #7
    58fe:	7812      	ldrb	r2, [r2, #0]
    5900:	429a      	cmp	r2, r3
    5902:	d904      	bls.n	590e <prvTraceSetTaskInstanceFinished+0x26>
    5904:	4b0e      	ldr	r3, [pc, #56]	; (5940 <prvTraceSetTaskInstanceFinished+0x58>)
    5906:	0018      	movs	r0, r3
    5908:	4b0e      	ldr	r3, [pc, #56]	; (5944 <prvTraceSetTaskInstanceFinished+0x5c>)
    590a:	4798      	blx	r3
    590c:	e013      	b.n	5936 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    590e:	4b0b      	ldr	r3, [pc, #44]	; (593c <prvTraceSetTaskInstanceFinished+0x54>)
    5910:	681c      	ldr	r4, [r3, #0]
    5912:	1dfb      	adds	r3, r7, #7
    5914:	781b      	ldrb	r3, [r3, #0]
    5916:	2103      	movs	r1, #3
    5918:	0018      	movs	r0, r3
    591a:	4b0b      	ldr	r3, [pc, #44]	; (5948 <prvTraceSetTaskInstanceFinished+0x60>)
    591c:	4798      	blx	r3
    591e:	0003      	movs	r3, r0
    5920:	0019      	movs	r1, r3
    5922:	4b06      	ldr	r3, [pc, #24]	; (593c <prvTraceSetTaskInstanceFinished+0x54>)
    5924:	681b      	ldr	r3, [r3, #0]
    5926:	2273      	movs	r2, #115	; 0x73
    5928:	5c9b      	ldrb	r3, [r3, r2]
    592a:	18cb      	adds	r3, r1, r3
    592c:	229c      	movs	r2, #156	; 0x9c
    592e:	18e3      	adds	r3, r4, r3
    5930:	189b      	adds	r3, r3, r2
    5932:	2200      	movs	r2, #0
    5934:	701a      	strb	r2, [r3, #0]
#endif
}
    5936:	46bd      	mov	sp, r7
    5938:	b003      	add	sp, #12
    593a:	bd90      	pop	{r4, r7, pc}
    593c:	20000c68 	.word	0x20000c68
    5940:	00023f30 	.word	0x00023f30
    5944:	00005ff5 	.word	0x00005ff5
    5948:	00005c01 	.word	0x00005c01

0000594c <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
    594c:	b580      	push	{r7, lr}
    594e:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
    5950:	4b75      	ldr	r3, [pc, #468]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5952:	681b      	ldr	r3, [r3, #0]
    5954:	2b00      	cmp	r3, #0
    5956:	d103      	bne.n	5960 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
    5958:	4b73      	ldr	r3, [pc, #460]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    595a:	4a74      	ldr	r2, [pc, #464]	; (5b2c <prvTraceInitTraceData+0x1e0>)
    595c:	601a      	str	r2, [r3, #0]
    595e:	e006      	b.n	596e <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
    5960:	4b71      	ldr	r3, [pc, #452]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5962:	681b      	ldr	r3, [r3, #0]
    5964:	781b      	ldrb	r3, [r3, #0]
    5966:	b2db      	uxtb	r3, r3
    5968:	2b01      	cmp	r3, #1
    596a:	d100      	bne.n	596e <prvTraceInitTraceData+0x22>
    596c:	e0d8      	b.n	5b20 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
    596e:	4b70      	ldr	r3, [pc, #448]	; (5b30 <prvTraceInitTraceData+0x1e4>)
    5970:	681a      	ldr	r2, [r3, #0]
    5972:	4b70      	ldr	r3, [pc, #448]	; (5b34 <prvTraceInitTraceData+0x1e8>)
    5974:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    5976:	4b6c      	ldr	r3, [pc, #432]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5978:	6818      	ldr	r0, [r3, #0]
    597a:	23bd      	movs	r3, #189	; 0xbd
    597c:	011b      	lsls	r3, r3, #4
    597e:	001a      	movs	r2, r3
    5980:	2100      	movs	r1, #0
    5982:	4b6d      	ldr	r3, [pc, #436]	; (5b38 <prvTraceInitTraceData+0x1ec>)
    5984:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    5986:	4b68      	ldr	r3, [pc, #416]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5988:	681b      	ldr	r3, [r3, #0]
    598a:	4a6c      	ldr	r2, [pc, #432]	; (5b3c <prvTraceInitTraceData+0x1f0>)
    598c:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    598e:	4b66      	ldr	r3, [pc, #408]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5990:	681b      	ldr	r3, [r3, #0]
    5992:	2205      	movs	r2, #5
    5994:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    5996:	4b64      	ldr	r3, [pc, #400]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	2200      	movs	r2, #0
    599c:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    599e:	4b62      	ldr	r3, [pc, #392]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    59a0:	681b      	ldr	r3, [r3, #0]
    59a2:	22bd      	movs	r2, #189	; 0xbd
    59a4:	0112      	lsls	r2, r2, #4
    59a6:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    59a8:	4b5f      	ldr	r3, [pc, #380]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    59aa:	681b      	ldr	r3, [r3, #0]
    59ac:	2296      	movs	r2, #150	; 0x96
    59ae:	0052      	lsls	r2, r2, #1
    59b0:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    59b2:	4b5d      	ldr	r3, [pc, #372]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    59b4:	681b      	ldr	r3, [r3, #0]
    59b6:	4a62      	ldr	r2, [pc, #392]	; (5b40 <prvTraceInitTraceData+0x1f4>)
    59b8:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    59ba:	4b5b      	ldr	r3, [pc, #364]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    59bc:	681b      	ldr	r3, [r3, #0]
    59be:	2200      	movs	r2, #0
    59c0:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    59c2:	4b59      	ldr	r3, [pc, #356]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    59c4:	681b      	ldr	r3, [r3, #0]
    59c6:	2200      	movs	r2, #0
    59c8:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
    59ca:	4b5e      	ldr	r3, [pc, #376]	; (5b44 <prvTraceInitTraceData+0x1f8>)
    59cc:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    59ce:	4b56      	ldr	r3, [pc, #344]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    59d0:	681b      	ldr	r3, [r3, #0]
    59d2:	4a5d      	ldr	r2, [pc, #372]	; (5b48 <prvTraceInitTraceData+0x1fc>)
    59d4:	495d      	ldr	r1, [pc, #372]	; (5b4c <prvTraceInitTraceData+0x200>)
    59d6:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    59d8:	4b53      	ldr	r3, [pc, #332]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    59da:	681a      	ldr	r2, [r3, #0]
    59dc:	23ac      	movs	r3, #172	; 0xac
    59de:	00db      	lsls	r3, r3, #3
    59e0:	21c8      	movs	r1, #200	; 0xc8
    59e2:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    59e4:	4b50      	ldr	r3, [pc, #320]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    59e6:	681b      	ldr	r3, [r3, #0]
    59e8:	4a59      	ldr	r2, [pc, #356]	; (5b50 <prvTraceInitTraceData+0x204>)
    59ea:	2101      	movs	r1, #1
    59ec:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    59ee:	4b4e      	ldr	r3, [pc, #312]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    59f0:	681a      	ldr	r2, [r3, #0]
    59f2:	23d7      	movs	r3, #215	; 0xd7
    59f4:	00db      	lsls	r3, r3, #3
    59f6:	4957      	ldr	r1, [pc, #348]	; (5b54 <prvTraceInitTraceData+0x208>)
    59f8:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    59fa:	4b4b      	ldr	r3, [pc, #300]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    59fc:	681b      	ldr	r3, [r3, #0]
    59fe:	4a56      	ldr	r2, [pc, #344]	; (5b58 <prvTraceInitTraceData+0x20c>)
    5a00:	4694      	mov	ip, r2
    5a02:	4463      	add	r3, ip
    5a04:	4955      	ldr	r1, [pc, #340]	; (5b5c <prvTraceInitTraceData+0x210>)
    5a06:	2250      	movs	r2, #80	; 0x50
    5a08:	0018      	movs	r0, r3
    5a0a:	4b55      	ldr	r3, [pc, #340]	; (5b60 <prvTraceInitTraceData+0x214>)
    5a0c:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    5a0e:	4b46      	ldr	r3, [pc, #280]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a10:	681b      	ldr	r3, [r3, #0]
    5a12:	4a54      	ldr	r2, [pc, #336]	; (5b64 <prvTraceInitTraceData+0x218>)
    5a14:	4954      	ldr	r1, [pc, #336]	; (5b68 <prvTraceInitTraceData+0x21c>)
    5a16:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    5a18:	4b43      	ldr	r3, [pc, #268]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a1a:	681b      	ldr	r3, [r3, #0]
    5a1c:	4a53      	ldr	r2, [pc, #332]	; (5b6c <prvTraceInitTraceData+0x220>)
    5a1e:	210a      	movs	r1, #10
    5a20:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    5a22:	4b41      	ldr	r3, [pc, #260]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a24:	681b      	ldr	r3, [r3, #0]
    5a26:	4a52      	ldr	r2, [pc, #328]	; (5b70 <prvTraceInitTraceData+0x224>)
    5a28:	210b      	movs	r1, #11
    5a2a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    5a2c:	4b3e      	ldr	r3, [pc, #248]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a2e:	681b      	ldr	r3, [r3, #0]
    5a30:	4a50      	ldr	r2, [pc, #320]	; (5b74 <prvTraceInitTraceData+0x228>)
    5a32:	210c      	movs	r1, #12
    5a34:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    5a36:	4b3c      	ldr	r3, [pc, #240]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a38:	681b      	ldr	r3, [r3, #0]
    5a3a:	4a4f      	ldr	r2, [pc, #316]	; (5b78 <prvTraceInitTraceData+0x22c>)
    5a3c:	210d      	movs	r1, #13
    5a3e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    5a40:	4b39      	ldr	r3, [pc, #228]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a42:	681b      	ldr	r3, [r3, #0]
    5a44:	4a4d      	ldr	r2, [pc, #308]	; (5b7c <prvTraceInitTraceData+0x230>)
    5a46:	2171      	movs	r1, #113	; 0x71
    5a48:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    5a4a:	4b37      	ldr	r3, [pc, #220]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a4c:	681b      	ldr	r3, [r3, #0]
    5a4e:	4a4c      	ldr	r2, [pc, #304]	; (5b80 <prvTraceInitTraceData+0x234>)
    5a50:	2172      	movs	r1, #114	; 0x72
    5a52:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    5a54:	4b34      	ldr	r3, [pc, #208]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a56:	681b      	ldr	r3, [r3, #0]
    5a58:	4a4a      	ldr	r2, [pc, #296]	; (5b84 <prvTraceInitTraceData+0x238>)
    5a5a:	2173      	movs	r1, #115	; 0x73
    5a5c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    5a5e:	4b32      	ldr	r3, [pc, #200]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a60:	681b      	ldr	r3, [r3, #0]
    5a62:	4a49      	ldr	r2, [pc, #292]	; (5b88 <prvTraceInitTraceData+0x23c>)
    5a64:	2174      	movs	r1, #116	; 0x74
    5a66:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    5a68:	4b2f      	ldr	r3, [pc, #188]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a6a:	681b      	ldr	r3, [r3, #0]
    5a6c:	4a47      	ldr	r2, [pc, #284]	; (5b8c <prvTraceInitTraceData+0x240>)
    5a6e:	21f1      	movs	r1, #241	; 0xf1
    5a70:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    5a72:	4b2d      	ldr	r3, [pc, #180]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a74:	681b      	ldr	r3, [r3, #0]
    5a76:	4a46      	ldr	r2, [pc, #280]	; (5b90 <prvTraceInitTraceData+0x244>)
    5a78:	21f2      	movs	r1, #242	; 0xf2
    5a7a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    5a7c:	4b2a      	ldr	r3, [pc, #168]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a7e:	681b      	ldr	r3, [r3, #0]
    5a80:	4a44      	ldr	r2, [pc, #272]	; (5b94 <prvTraceInitTraceData+0x248>)
    5a82:	21f3      	movs	r1, #243	; 0xf3
    5a84:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    5a86:	4b28      	ldr	r3, [pc, #160]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a88:	681b      	ldr	r3, [r3, #0]
    5a8a:	4a43      	ldr	r2, [pc, #268]	; (5b98 <prvTraceInitTraceData+0x24c>)
    5a8c:	21f4      	movs	r1, #244	; 0xf4
    5a8e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
    5a90:	4b42      	ldr	r3, [pc, #264]	; (5b9c <prvTraceInitTraceData+0x250>)
    5a92:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
    5a94:	4b24      	ldr	r3, [pc, #144]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a96:	681b      	ldr	r3, [r3, #0]
    5a98:	22f4      	movs	r2, #244	; 0xf4
    5a9a:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    5a9c:	4b22      	ldr	r3, [pc, #136]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5a9e:	681b      	ldr	r3, [r3, #0]
    5aa0:	22f3      	movs	r2, #243	; 0xf3
    5aa2:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    5aa4:	4b20      	ldr	r3, [pc, #128]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5aa6:	681b      	ldr	r3, [r3, #0]
    5aa8:	22f2      	movs	r2, #242	; 0xf2
    5aaa:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    5aac:	4b1e      	ldr	r3, [pc, #120]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5aae:	681b      	ldr	r3, [r3, #0]
    5ab0:	22f1      	movs	r2, #241	; 0xf1
    5ab2:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    5ab4:	4b1c      	ldr	r3, [pc, #112]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5ab6:	681b      	ldr	r3, [r3, #0]
    5ab8:	2274      	movs	r2, #116	; 0x74
    5aba:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    5abc:	4b1a      	ldr	r3, [pc, #104]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5abe:	681b      	ldr	r3, [r3, #0]
    5ac0:	2273      	movs	r2, #115	; 0x73
    5ac2:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    5ac4:	4b18      	ldr	r3, [pc, #96]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5ac6:	681b      	ldr	r3, [r3, #0]
    5ac8:	2272      	movs	r2, #114	; 0x72
    5aca:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    5acc:	4b16      	ldr	r3, [pc, #88]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5ace:	681b      	ldr	r3, [r3, #0]
    5ad0:	2271      	movs	r2, #113	; 0x71
    5ad2:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    5ad4:	4b14      	ldr	r3, [pc, #80]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5ad6:	681b      	ldr	r3, [r3, #0]
    5ad8:	2204      	movs	r2, #4
    5ada:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    5adc:	4b12      	ldr	r3, [pc, #72]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5ade:	681b      	ldr	r3, [r3, #0]
    5ae0:	2203      	movs	r2, #3
    5ae2:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    5ae4:	4b10      	ldr	r3, [pc, #64]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5ae6:	681b      	ldr	r3, [r3, #0]
    5ae8:	2202      	movs	r2, #2
    5aea:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    5aec:	4b0e      	ldr	r3, [pc, #56]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5aee:	681b      	ldr	r3, [r3, #0]
    5af0:	2201      	movs	r2, #1
    5af2:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
    5af4:	4b2a      	ldr	r3, [pc, #168]	; (5ba0 <prvTraceInitTraceData+0x254>)
    5af6:	681b      	ldr	r3, [r3, #0]
    5af8:	2b00      	cmp	r3, #0
    5afa:	d012      	beq.n	5b22 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    5afc:	4b0a      	ldr	r3, [pc, #40]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5afe:	681b      	ldr	r3, [r3, #0]
    5b00:	4a15      	ldr	r2, [pc, #84]	; (5b58 <prvTraceInitTraceData+0x20c>)
    5b02:	1898      	adds	r0, r3, r2
    5b04:	4b26      	ldr	r3, [pc, #152]	; (5ba0 <prvTraceInitTraceData+0x254>)
    5b06:	681b      	ldr	r3, [r3, #0]
    5b08:	2250      	movs	r2, #80	; 0x50
    5b0a:	0019      	movs	r1, r3
    5b0c:	4b14      	ldr	r3, [pc, #80]	; (5b60 <prvTraceInitTraceData+0x214>)
    5b0e:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    5b10:	4b05      	ldr	r3, [pc, #20]	; (5b28 <prvTraceInitTraceData+0x1dc>)
    5b12:	681b      	ldr	r3, [r3, #0]
    5b14:	4a23      	ldr	r2, [pc, #140]	; (5ba4 <prvTraceInitTraceData+0x258>)
    5b16:	2101      	movs	r1, #1
    5b18:	5099      	str	r1, [r3, r2]
		vTraceStop();
    5b1a:	4b23      	ldr	r3, [pc, #140]	; (5ba8 <prvTraceInitTraceData+0x25c>)
    5b1c:	4798      	blx	r3
    5b1e:	e000      	b.n	5b22 <prvTraceInitTraceData+0x1d6>
			return;
    5b20:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
    5b22:	46bd      	mov	sp, r7
    5b24:	bd80      	pop	{r7, pc}
    5b26:	46c0      	nop			; (mov r8, r8)
    5b28:	20000c68 	.word	0x20000c68
    5b2c:	2000443c 	.word	0x2000443c
    5b30:	e000e018 	.word	0xe000e018
    5b34:	2000500c 	.word	0x2000500c
    5b38:	00020f1f 	.word	0x00020f1f
    5b3c:	00001aa1 	.word	0x00001aa1
    5b40:	f0f0f0f0 	.word	0xf0f0f0f0
    5b44:	00004ab1 	.word	0x00004ab1
    5b48:	0000055c 	.word	0x0000055c
    5b4c:	f1f1f1f1 	.word	0xf1f1f1f1
    5b50:	00000564 	.word	0x00000564
    5b54:	f2f2f2f2 	.word	0xf2f2f2f2
    5b58:	000006bc 	.word	0x000006bc
    5b5c:	00023f78 	.word	0x00023f78
    5b60:	00005ec1 	.word	0x00005ec1
    5b64:	0000070c 	.word	0x0000070c
    5b68:	f3f3f3f3 	.word	0xf3f3f3f3
    5b6c:	00000bc4 	.word	0x00000bc4
    5b70:	00000bc5 	.word	0x00000bc5
    5b74:	00000bc6 	.word	0x00000bc6
    5b78:	00000bc7 	.word	0x00000bc7
    5b7c:	00000bc8 	.word	0x00000bc8
    5b80:	00000bc9 	.word	0x00000bc9
    5b84:	00000bca 	.word	0x00000bca
    5b88:	00000bcb 	.word	0x00000bcb
    5b8c:	00000bcc 	.word	0x00000bcc
    5b90:	00000bcd 	.word	0x00000bcd
    5b94:	00000bce 	.word	0x00000bce
    5b98:	00000bcf 	.word	0x00000bcf
    5b9c:	00004c51 	.word	0x00004c51
    5ba0:	20000bc8 	.word	0x20000bc8
    5ba4:	000006b4 	.word	0x000006b4
    5ba8:	00004eb9 	.word	0x00004eb9

00005bac <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
    5bac:	b580      	push	{r7, lr}
    5bae:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
    5bb0:	4b10      	ldr	r3, [pc, #64]	; (5bf4 <prvTraceNextFreeEventBufferSlot+0x48>)
    5bb2:	681b      	ldr	r3, [r3, #0]
    5bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5bb6:	2b00      	cmp	r3, #0
    5bb8:	d101      	bne.n	5bbe <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
    5bba:	2300      	movs	r3, #0
    5bbc:	e017      	b.n	5bee <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    5bbe:	4b0d      	ldr	r3, [pc, #52]	; (5bf4 <prvTraceNextFreeEventBufferSlot+0x48>)
    5bc0:	681b      	ldr	r3, [r3, #0]
    5bc2:	69da      	ldr	r2, [r3, #28]
    5bc4:	232c      	movs	r3, #44	; 0x2c
    5bc6:	33ff      	adds	r3, #255	; 0xff
    5bc8:	429a      	cmp	r2, r3
    5bca:	d905      	bls.n	5bd8 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
    5bcc:	4b0a      	ldr	r3, [pc, #40]	; (5bf8 <prvTraceNextFreeEventBufferSlot+0x4c>)
    5bce:	0018      	movs	r0, r3
    5bd0:	4b0a      	ldr	r3, [pc, #40]	; (5bfc <prvTraceNextFreeEventBufferSlot+0x50>)
    5bd2:	4798      	blx	r3
		return NULL;
    5bd4:	2300      	movs	r3, #0
    5bd6:	e00a      	b.n	5bee <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    5bd8:	4b06      	ldr	r3, [pc, #24]	; (5bf4 <prvTraceNextFreeEventBufferSlot+0x48>)
    5bda:	681a      	ldr	r2, [r3, #0]
    5bdc:	4b05      	ldr	r3, [pc, #20]	; (5bf4 <prvTraceNextFreeEventBufferSlot+0x48>)
    5bde:	681b      	ldr	r3, [r3, #0]
    5be0:	69db      	ldr	r3, [r3, #28]
    5be2:	009b      	lsls	r3, r3, #2
    5be4:	21e2      	movs	r1, #226	; 0xe2
    5be6:	00c9      	lsls	r1, r1, #3
    5be8:	468c      	mov	ip, r1
    5bea:	4463      	add	r3, ip
    5bec:	18d3      	adds	r3, r2, r3
}
    5bee:	0018      	movs	r0, r3
    5bf0:	46bd      	mov	sp, r7
    5bf2:	bd80      	pop	{r7, pc}
    5bf4:	20000c68 	.word	0x20000c68
    5bf8:	00023f8c 	.word	0x00023f8c
    5bfc:	00005ff5 	.word	0x00005ff5

00005c00 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
    5c00:	b580      	push	{r7, lr}
    5c02:	b082      	sub	sp, #8
    5c04:	af00      	add	r7, sp, #0
    5c06:	0002      	movs	r2, r0
    5c08:	1dfb      	adds	r3, r7, #7
    5c0a:	701a      	strb	r2, [r3, #0]
    5c0c:	1dbb      	adds	r3, r7, #6
    5c0e:	1c0a      	adds	r2, r1, #0
    5c10:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    5c12:	1dbb      	adds	r3, r7, #6
    5c14:	781b      	ldrb	r3, [r3, #0]
    5c16:	2b08      	cmp	r3, #8
    5c18:	d905      	bls.n	5c26 <uiIndexOfObject+0x26>
    5c1a:	4b2a      	ldr	r3, [pc, #168]	; (5cc4 <uiIndexOfObject+0xc4>)
    5c1c:	0018      	movs	r0, r3
    5c1e:	4b2a      	ldr	r3, [pc, #168]	; (5cc8 <uiIndexOfObject+0xc8>)
    5c20:	4798      	blx	r3
    5c22:	2300      	movs	r3, #0
    5c24:	e049      	b.n	5cba <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    5c26:	1dfb      	adds	r3, r7, #7
    5c28:	781b      	ldrb	r3, [r3, #0]
    5c2a:	2b00      	cmp	r3, #0
    5c2c:	d00b      	beq.n	5c46 <uiIndexOfObject+0x46>
    5c2e:	4b27      	ldr	r3, [pc, #156]	; (5ccc <uiIndexOfObject+0xcc>)
    5c30:	681a      	ldr	r2, [r3, #0]
    5c32:	1dbb      	adds	r3, r7, #6
    5c34:	781b      	ldrb	r3, [r3, #0]
    5c36:	2164      	movs	r1, #100	; 0x64
    5c38:	18d3      	adds	r3, r2, r3
    5c3a:	185b      	adds	r3, r3, r1
    5c3c:	781b      	ldrb	r3, [r3, #0]
    5c3e:	1dfa      	adds	r2, r7, #7
    5c40:	7812      	ldrb	r2, [r2, #0]
    5c42:	429a      	cmp	r2, r3
    5c44:	d905      	bls.n	5c52 <uiIndexOfObject+0x52>
    5c46:	4b22      	ldr	r3, [pc, #136]	; (5cd0 <uiIndexOfObject+0xd0>)
    5c48:	0018      	movs	r0, r3
    5c4a:	4b1f      	ldr	r3, [pc, #124]	; (5cc8 <uiIndexOfObject+0xc8>)
    5c4c:	4798      	blx	r3
    5c4e:	2300      	movs	r3, #0
    5c50:	e033      	b.n	5cba <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    5c52:	1dbb      	adds	r3, r7, #6
    5c54:	781b      	ldrb	r3, [r3, #0]
    5c56:	2b08      	cmp	r3, #8
    5c58:	d82a      	bhi.n	5cb0 <uiIndexOfObject+0xb0>
    5c5a:	1dfb      	adds	r3, r7, #7
    5c5c:	781b      	ldrb	r3, [r3, #0]
    5c5e:	2b00      	cmp	r3, #0
    5c60:	d026      	beq.n	5cb0 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
    5c62:	4b1a      	ldr	r3, [pc, #104]	; (5ccc <uiIndexOfObject+0xcc>)
    5c64:	681a      	ldr	r2, [r3, #0]
    5c66:	1dbb      	adds	r3, r7, #6
    5c68:	781b      	ldrb	r3, [r3, #0]
    5c6a:	2164      	movs	r1, #100	; 0x64
    5c6c:	18d3      	adds	r3, r2, r3
    5c6e:	185b      	adds	r3, r3, r1
    5c70:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    5c72:	1dfa      	adds	r2, r7, #7
    5c74:	7812      	ldrb	r2, [r2, #0]
    5c76:	429a      	cmp	r2, r3
    5c78:	d81a      	bhi.n	5cb0 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    5c7a:	4b14      	ldr	r3, [pc, #80]	; (5ccc <uiIndexOfObject+0xcc>)
    5c7c:	681a      	ldr	r2, [r3, #0]
    5c7e:	1dbb      	adds	r3, r7, #6
    5c80:	781b      	ldrb	r3, [r3, #0]
    5c82:	3340      	adds	r3, #64	; 0x40
    5c84:	005b      	lsls	r3, r3, #1
    5c86:	18d3      	adds	r3, r2, r3
    5c88:	3308      	adds	r3, #8
    5c8a:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    5c8c:	4b0f      	ldr	r3, [pc, #60]	; (5ccc <uiIndexOfObject+0xcc>)
    5c8e:	6819      	ldr	r1, [r3, #0]
    5c90:	1dbb      	adds	r3, r7, #6
    5c92:	781b      	ldrb	r3, [r3, #0]
    5c94:	207c      	movs	r0, #124	; 0x7c
    5c96:	18cb      	adds	r3, r1, r3
    5c98:	181b      	adds	r3, r3, r0
    5c9a:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    5c9c:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    5c9e:	1df9      	adds	r1, r7, #7
    5ca0:	7809      	ldrb	r1, [r1, #0]
    5ca2:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    5ca4:	b289      	uxth	r1, r1
    5ca6:	434b      	muls	r3, r1
    5ca8:	b29b      	uxth	r3, r3
    5caa:	18d3      	adds	r3, r2, r3
    5cac:	b29b      	uxth	r3, r3
    5cae:	e004      	b.n	5cba <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
    5cb0:	4b08      	ldr	r3, [pc, #32]	; (5cd4 <uiIndexOfObject+0xd4>)
    5cb2:	0018      	movs	r0, r3
    5cb4:	4b04      	ldr	r3, [pc, #16]	; (5cc8 <uiIndexOfObject+0xc8>)
    5cb6:	4798      	blx	r3
	return 0;
    5cb8:	2300      	movs	r3, #0
}
    5cba:	0018      	movs	r0, r3
    5cbc:	46bd      	mov	sp, r7
    5cbe:	b002      	add	sp, #8
    5cc0:	bd80      	pop	{r7, pc}
    5cc2:	46c0      	nop			; (mov r8, r8)
    5cc4:	00023fb4 	.word	0x00023fb4
    5cc8:	00005ff5 	.word	0x00005ff5
    5ccc:	20000c68 	.word	0x20000c68
    5cd0:	00023ff4 	.word	0x00023ff4
    5cd4:	00024034 	.word	0x00024034

00005cd8 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
    5cd8:	b580      	push	{r7, lr}
    5cda:	b088      	sub	sp, #32
    5cdc:	af00      	add	r7, sp, #0
    5cde:	0002      	movs	r2, r0
    5ce0:	1dfb      	adds	r3, r7, #7
    5ce2:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    5ce4:	4b5a      	ldr	r3, [pc, #360]	; (5e50 <prvTraceGetObjectHandle+0x178>)
    5ce6:	681b      	ldr	r3, [r3, #0]
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d105      	bne.n	5cf8 <prvTraceGetObjectHandle+0x20>
    5cec:	4b59      	ldr	r3, [pc, #356]	; (5e54 <prvTraceGetObjectHandle+0x17c>)
    5cee:	0018      	movs	r0, r3
    5cf0:	4b59      	ldr	r3, [pc, #356]	; (5e58 <prvTraceGetObjectHandle+0x180>)
    5cf2:	4798      	blx	r3
    5cf4:	2300      	movs	r3, #0
    5cf6:	e0a7      	b.n	5e48 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    5cf8:	1dfb      	adds	r3, r7, #7
    5cfa:	781b      	ldrb	r3, [r3, #0]
    5cfc:	2b08      	cmp	r3, #8
    5cfe:	d905      	bls.n	5d0c <prvTraceGetObjectHandle+0x34>
    5d00:	4b56      	ldr	r3, [pc, #344]	; (5e5c <prvTraceGetObjectHandle+0x184>)
    5d02:	0018      	movs	r0, r3
    5d04:	4b54      	ldr	r3, [pc, #336]	; (5e58 <prvTraceGetObjectHandle+0x180>)
    5d06:	4798      	blx	r3
    5d08:	2300      	movs	r3, #0
    5d0a:	e09d      	b.n	5e48 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5d0c:	f3ef 8310 	mrs	r3, PRIMASK
    5d10:	60fb      	str	r3, [r7, #12]
  return(result);
    5d12:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
    5d14:	61bb      	str	r3, [r7, #24]
    5d16:	2301      	movs	r3, #1
    5d18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5d1a:	693b      	ldr	r3, [r7, #16]
    5d1c:	f383 8810 	msr	PRIMASK, r3
    5d20:	4b4f      	ldr	r3, [pc, #316]	; (5e60 <prvTraceGetObjectHandle+0x188>)
    5d22:	681b      	ldr	r3, [r3, #0]
    5d24:	1c5a      	adds	r2, r3, #1
    5d26:	4b4e      	ldr	r3, [pc, #312]	; (5e60 <prvTraceGetObjectHandle+0x188>)
    5d28:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    5d2a:	1dfb      	adds	r3, r7, #7
    5d2c:	781a      	ldrb	r2, [r3, #0]
    5d2e:	4b4d      	ldr	r3, [pc, #308]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5d30:	0052      	lsls	r2, r2, #1
    5d32:	5ad3      	ldrh	r3, [r2, r3]
    5d34:	001a      	movs	r2, r3
    5d36:	4b4c      	ldr	r3, [pc, #304]	; (5e68 <prvTraceGetObjectHandle+0x190>)
    5d38:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    5d3a:	4b4b      	ldr	r3, [pc, #300]	; (5e68 <prvTraceGetObjectHandle+0x190>)
    5d3c:	681b      	ldr	r3, [r3, #0]
    5d3e:	4a49      	ldr	r2, [pc, #292]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5d40:	2148      	movs	r1, #72	; 0x48
    5d42:	18d3      	adds	r3, r2, r3
    5d44:	185b      	adds	r3, r3, r1
    5d46:	781b      	ldrb	r3, [r3, #0]
    5d48:	2b00      	cmp	r3, #0
    5d4a:	d117      	bne.n	5d7c <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    5d4c:	4b46      	ldr	r3, [pc, #280]	; (5e68 <prvTraceGetObjectHandle+0x190>)
    5d4e:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    5d50:	4b45      	ldr	r3, [pc, #276]	; (5e68 <prvTraceGetObjectHandle+0x190>)
    5d52:	681b      	ldr	r3, [r3, #0]
    5d54:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    5d56:	1dfb      	adds	r3, r7, #7
    5d58:	781b      	ldrb	r3, [r3, #0]
    5d5a:	4842      	ldr	r0, [pc, #264]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5d5c:	3308      	adds	r3, #8
    5d5e:	005b      	lsls	r3, r3, #1
    5d60:	18c3      	adds	r3, r0, r3
    5d62:	3302      	adds	r3, #2
    5d64:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    5d66:	b2db      	uxtb	r3, r3
    5d68:	1acb      	subs	r3, r1, r3
    5d6a:	b2db      	uxtb	r3, r3
    5d6c:	3301      	adds	r3, #1
    5d6e:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
    5d70:	4b3c      	ldr	r3, [pc, #240]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5d72:	2148      	movs	r1, #72	; 0x48
    5d74:	189b      	adds	r3, r3, r2
    5d76:	185b      	adds	r3, r3, r1
    5d78:	1c02      	adds	r2, r0, #0
    5d7a:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    5d7c:	4b3a      	ldr	r3, [pc, #232]	; (5e68 <prvTraceGetObjectHandle+0x190>)
    5d7e:	681a      	ldr	r2, [r3, #0]
    5d80:	231f      	movs	r3, #31
    5d82:	18fb      	adds	r3, r7, r3
    5d84:	4937      	ldr	r1, [pc, #220]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5d86:	2048      	movs	r0, #72	; 0x48
    5d88:	188a      	adds	r2, r1, r2
    5d8a:	1812      	adds	r2, r2, r0
    5d8c:	7812      	ldrb	r2, [r2, #0]
    5d8e:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    5d90:	1dfb      	adds	r3, r7, #7
    5d92:	781a      	ldrb	r2, [r3, #0]
    5d94:	4b33      	ldr	r3, [pc, #204]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5d96:	0052      	lsls	r2, r2, #1
    5d98:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    5d9a:	1dfb      	adds	r3, r7, #7
    5d9c:	781b      	ldrb	r3, [r3, #0]
    5d9e:	4931      	ldr	r1, [pc, #196]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5da0:	3310      	adds	r3, #16
    5da2:	005b      	lsls	r3, r3, #1
    5da4:	18cb      	adds	r3, r1, r3
    5da6:	3304      	adds	r3, #4
    5da8:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    5daa:	429a      	cmp	r2, r3
    5dac:	d90d      	bls.n	5dca <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    5dae:	1dfb      	adds	r3, r7, #7
    5db0:	781b      	ldrb	r3, [r3, #0]
    5db2:	0018      	movs	r0, r3
    5db4:	4b2d      	ldr	r3, [pc, #180]	; (5e6c <prvTraceGetObjectHandle+0x194>)
    5db6:	4798      	blx	r3
    5db8:	0003      	movs	r3, r0
    5dba:	0018      	movs	r0, r3
    5dbc:	4b26      	ldr	r3, [pc, #152]	; (5e58 <prvTraceGetObjectHandle+0x180>)
    5dbe:	4798      	blx	r3
		handle = 0;
    5dc0:	231f      	movs	r3, #31
    5dc2:	18fb      	adds	r3, r7, r3
    5dc4:	2200      	movs	r2, #0
    5dc6:	701a      	strb	r2, [r3, #0]
    5dc8:	e031      	b.n	5e2e <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    5dca:	1dfb      	adds	r3, r7, #7
    5dcc:	781b      	ldrb	r3, [r3, #0]
    5dce:	4a25      	ldr	r2, [pc, #148]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5dd0:	0059      	lsls	r1, r3, #1
    5dd2:	5a8a      	ldrh	r2, [r1, r2]
    5dd4:	3201      	adds	r2, #1
    5dd6:	b291      	uxth	r1, r2
    5dd8:	4a22      	ldr	r2, [pc, #136]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5dda:	005b      	lsls	r3, r3, #1
    5ddc:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    5dde:	1dfb      	adds	r3, r7, #7
    5de0:	781a      	ldrb	r2, [r3, #0]
    5de2:	4b20      	ldr	r3, [pc, #128]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5de4:	0052      	lsls	r2, r2, #1
    5de6:	5ad3      	ldrh	r3, [r2, r3]
    5de8:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
    5dea:	1dfb      	adds	r3, r7, #7
    5dec:	781b      	ldrb	r3, [r3, #0]
    5dee:	4a1d      	ldr	r2, [pc, #116]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5df0:	3308      	adds	r3, #8
    5df2:	005b      	lsls	r3, r3, #1
    5df4:	18d3      	adds	r3, r2, r3
    5df6:	3302      	adds	r3, #2
    5df8:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    5dfa:	1acb      	subs	r3, r1, r3
    5dfc:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    5dfe:	1dfb      	adds	r3, r7, #7
    5e00:	781b      	ldrb	r3, [r3, #0]
    5e02:	4a18      	ldr	r2, [pc, #96]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5e04:	3318      	adds	r3, #24
    5e06:	005b      	lsls	r3, r3, #1
    5e08:	18d3      	adds	r3, r2, r3
    5e0a:	3306      	adds	r3, #6
    5e0c:	881b      	ldrh	r3, [r3, #0]
    5e0e:	001a      	movs	r2, r3
		if (hndCount >
    5e10:	697b      	ldr	r3, [r7, #20]
    5e12:	429a      	cmp	r2, r3
    5e14:	da0b      	bge.n	5e2e <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    5e16:	1dfb      	adds	r3, r7, #7
    5e18:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
    5e1a:	697a      	ldr	r2, [r7, #20]
    5e1c:	b2d2      	uxtb	r2, r2
    5e1e:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    5e20:	4a10      	ldr	r2, [pc, #64]	; (5e64 <prvTraceGetObjectHandle+0x18c>)
    5e22:	3318      	adds	r3, #24
    5e24:	005b      	lsls	r3, r3, #1
    5e26:	18d3      	adds	r3, r2, r3
    5e28:	3306      	adds	r3, #6
    5e2a:	1c0a      	adds	r2, r1, #0
    5e2c:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
    5e2e:	4b0c      	ldr	r3, [pc, #48]	; (5e60 <prvTraceGetObjectHandle+0x188>)
    5e30:	681b      	ldr	r3, [r3, #0]
    5e32:	1e5a      	subs	r2, r3, #1
    5e34:	4b0a      	ldr	r3, [pc, #40]	; (5e60 <prvTraceGetObjectHandle+0x188>)
    5e36:	601a      	str	r2, [r3, #0]
    5e38:	69bb      	ldr	r3, [r7, #24]
    5e3a:	60bb      	str	r3, [r7, #8]
    5e3c:	68bb      	ldr	r3, [r7, #8]
    5e3e:	f383 8810 	msr	PRIMASK, r3

	return handle;
    5e42:	231f      	movs	r3, #31
    5e44:	18fb      	adds	r3, r7, r3
    5e46:	781b      	ldrb	r3, [r3, #0]
}
    5e48:	0018      	movs	r0, r3
    5e4a:	46bd      	mov	sp, r7
    5e4c:	b008      	add	sp, #32
    5e4e:	bd80      	pop	{r7, pc}
    5e50:	20000c68 	.word	0x20000c68
    5e54:	00023494 	.word	0x00023494
    5e58:	00005ff5 	.word	0x00005ff5
    5e5c:	00024074 	.word	0x00024074
    5e60:	20000bc0 	.word	0x20000bc0
    5e64:	20000bd8 	.word	0x20000bd8
    5e68:	20000c6c 	.word	0x20000c6c
    5e6c:	00004d15 	.word	0x00004d15

00005e70 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
    5e70:	b590      	push	{r4, r7, lr}
    5e72:	b085      	sub	sp, #20
    5e74:	af00      	add	r7, sp, #0
    5e76:	0002      	movs	r2, r0
    5e78:	1dfb      	adds	r3, r7, #7
    5e7a:	701a      	strb	r2, [r3, #0]
    5e7c:	1dbb      	adds	r3, r7, #6
    5e7e:	1c0a      	adds	r2, r1, #0
    5e80:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    5e82:	230e      	movs	r3, #14
    5e84:	18fc      	adds	r4, r7, r3
    5e86:	1dfb      	adds	r3, r7, #7
    5e88:	781a      	ldrb	r2, [r3, #0]
    5e8a:	1dbb      	adds	r3, r7, #6
    5e8c:	781b      	ldrb	r3, [r3, #0]
    5e8e:	0011      	movs	r1, r2
    5e90:	0018      	movs	r0, r3
    5e92:	4b09      	ldr	r3, [pc, #36]	; (5eb8 <prvMarkObjectAsUsed+0x48>)
    5e94:	4798      	blx	r3
    5e96:	0003      	movs	r3, r0
    5e98:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    5e9a:	4b08      	ldr	r3, [pc, #32]	; (5ebc <prvMarkObjectAsUsed+0x4c>)
    5e9c:	681a      	ldr	r2, [r3, #0]
    5e9e:	230e      	movs	r3, #14
    5ea0:	18fb      	adds	r3, r7, r3
    5ea2:	881b      	ldrh	r3, [r3, #0]
    5ea4:	219c      	movs	r1, #156	; 0x9c
    5ea6:	18d3      	adds	r3, r2, r3
    5ea8:	185b      	adds	r3, r3, r1
    5eaa:	2201      	movs	r2, #1
    5eac:	701a      	strb	r2, [r3, #0]
}
    5eae:	46c0      	nop			; (mov r8, r8)
    5eb0:	46bd      	mov	sp, r7
    5eb2:	b005      	add	sp, #20
    5eb4:	bd90      	pop	{r4, r7, pc}
    5eb6:	46c0      	nop			; (mov r8, r8)
    5eb8:	00005c01 	.word	0x00005c01
    5ebc:	20000c68 	.word	0x20000c68

00005ec0 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    5ec0:	b580      	push	{r7, lr}
    5ec2:	b086      	sub	sp, #24
    5ec4:	af00      	add	r7, sp, #0
    5ec6:	60f8      	str	r0, [r7, #12]
    5ec8:	60b9      	str	r1, [r7, #8]
    5eca:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    5ecc:	2300      	movs	r3, #0
    5ece:	617b      	str	r3, [r7, #20]
    5ed0:	e010      	b.n	5ef4 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
    5ed2:	68fa      	ldr	r2, [r7, #12]
    5ed4:	697b      	ldr	r3, [r7, #20]
    5ed6:	18d3      	adds	r3, r2, r3
    5ed8:	68b9      	ldr	r1, [r7, #8]
    5eda:	697a      	ldr	r2, [r7, #20]
    5edc:	188a      	adds	r2, r1, r2
    5ede:	7812      	ldrb	r2, [r2, #0]
    5ee0:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
    5ee2:	68ba      	ldr	r2, [r7, #8]
    5ee4:	697b      	ldr	r3, [r7, #20]
    5ee6:	18d3      	adds	r3, r2, r3
    5ee8:	781b      	ldrb	r3, [r3, #0]
    5eea:	2b00      	cmp	r3, #0
    5eec:	d007      	beq.n	5efe <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
    5eee:	697b      	ldr	r3, [r7, #20]
    5ef0:	3301      	adds	r3, #1
    5ef2:	617b      	str	r3, [r7, #20]
    5ef4:	697a      	ldr	r2, [r7, #20]
    5ef6:	687b      	ldr	r3, [r7, #4]
    5ef8:	429a      	cmp	r2, r3
    5efa:	d3ea      	bcc.n	5ed2 <prvStrncpy+0x12>
			break;
	}
}
    5efc:	e000      	b.n	5f00 <prvStrncpy+0x40>
			break;
    5efe:	46c0      	nop			; (mov r8, r8)
}
    5f00:	46c0      	nop			; (mov r8, r8)
    5f02:	46bd      	mov	sp, r7
    5f04:	b006      	add	sp, #24
    5f06:	bd80      	pop	{r7, pc}

00005f08 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
    5f08:	b580      	push	{r7, lr}
    5f0a:	b082      	sub	sp, #8
    5f0c:	af00      	add	r7, sp, #0
    5f0e:	603a      	str	r2, [r7, #0]
    5f10:	1dfb      	adds	r3, r7, #7
    5f12:	1c02      	adds	r2, r0, #0
    5f14:	701a      	strb	r2, [r3, #0]
    5f16:	1dbb      	adds	r3, r7, #6
    5f18:	1c0a      	adds	r2, r1, #0
    5f1a:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    5f1c:	683b      	ldr	r3, [r7, #0]
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d104      	bne.n	5f2c <prvTraceSetObjectName+0x24>
    5f22:	4b2a      	ldr	r3, [pc, #168]	; (5fcc <prvTraceSetObjectName+0xc4>)
    5f24:	0018      	movs	r0, r3
    5f26:	4b2a      	ldr	r3, [pc, #168]	; (5fd0 <prvTraceSetObjectName+0xc8>)
    5f28:	4798      	blx	r3
    5f2a:	e04b      	b.n	5fc4 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
    5f2c:	1dfb      	adds	r3, r7, #7
    5f2e:	781b      	ldrb	r3, [r3, #0]
    5f30:	2b08      	cmp	r3, #8
    5f32:	d904      	bls.n	5f3e <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    5f34:	4b27      	ldr	r3, [pc, #156]	; (5fd4 <prvTraceSetObjectName+0xcc>)
    5f36:	0018      	movs	r0, r3
    5f38:	4b25      	ldr	r3, [pc, #148]	; (5fd0 <prvTraceSetObjectName+0xc8>)
    5f3a:	4798      	blx	r3
		return;
    5f3c:	e042      	b.n	5fc4 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
    5f3e:	1dbb      	adds	r3, r7, #6
    5f40:	781b      	ldrb	r3, [r3, #0]
    5f42:	2b00      	cmp	r3, #0
    5f44:	d104      	bne.n	5f50 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    5f46:	4b24      	ldr	r3, [pc, #144]	; (5fd8 <prvTraceSetObjectName+0xd0>)
    5f48:	0018      	movs	r0, r3
    5f4a:	4b21      	ldr	r3, [pc, #132]	; (5fd0 <prvTraceSetObjectName+0xc8>)
    5f4c:	4798      	blx	r3
		return;
    5f4e:	e039      	b.n	5fc4 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    5f50:	4b22      	ldr	r3, [pc, #136]	; (5fdc <prvTraceSetObjectName+0xd4>)
    5f52:	681a      	ldr	r2, [r3, #0]
    5f54:	1dfb      	adds	r3, r7, #7
    5f56:	781b      	ldrb	r3, [r3, #0]
    5f58:	2164      	movs	r1, #100	; 0x64
    5f5a:	18d3      	adds	r3, r2, r3
    5f5c:	185b      	adds	r3, r3, r1
    5f5e:	781b      	ldrb	r3, [r3, #0]
    5f60:	1dba      	adds	r2, r7, #6
    5f62:	7812      	ldrb	r2, [r2, #0]
    5f64:	429a      	cmp	r2, r3
    5f66:	d909      	bls.n	5f7c <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    5f68:	1dfb      	adds	r3, r7, #7
    5f6a:	781b      	ldrb	r3, [r3, #0]
    5f6c:	0018      	movs	r0, r3
    5f6e:	4b1c      	ldr	r3, [pc, #112]	; (5fe0 <prvTraceSetObjectName+0xd8>)
    5f70:	4798      	blx	r3
    5f72:	0003      	movs	r3, r0
    5f74:	0018      	movs	r0, r3
    5f76:	4b16      	ldr	r3, [pc, #88]	; (5fd0 <prvTraceSetObjectName+0xc8>)
    5f78:	4798      	blx	r3
    5f7a:	e023      	b.n	5fc4 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
    5f7c:	1dfb      	adds	r3, r7, #7
    5f7e:	781a      	ldrb	r2, [r3, #0]
    5f80:	1dbb      	adds	r3, r7, #6
    5f82:	781b      	ldrb	r3, [r3, #0]
    5f84:	0011      	movs	r1, r2
    5f86:	0018      	movs	r0, r3
    5f88:	4b16      	ldr	r3, [pc, #88]	; (5fe4 <prvTraceSetObjectName+0xdc>)
    5f8a:	4798      	blx	r3
    5f8c:	0003      	movs	r3, r0
    5f8e:	001a      	movs	r2, r3
    5f90:	4b15      	ldr	r3, [pc, #84]	; (5fe8 <prvTraceSetObjectName+0xe0>)
    5f92:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
    5f94:	4b15      	ldr	r3, [pc, #84]	; (5fec <prvTraceSetObjectName+0xe4>)
    5f96:	681b      	ldr	r3, [r3, #0]
    5f98:	2b00      	cmp	r3, #0
    5f9a:	d113      	bne.n	5fc4 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    5f9c:	4b0f      	ldr	r3, [pc, #60]	; (5fdc <prvTraceSetObjectName+0xd4>)
    5f9e:	681a      	ldr	r2, [r3, #0]
    5fa0:	4b11      	ldr	r3, [pc, #68]	; (5fe8 <prvTraceSetObjectName+0xe0>)
    5fa2:	881b      	ldrh	r3, [r3, #0]
    5fa4:	3398      	adds	r3, #152	; 0x98
    5fa6:	18d3      	adds	r3, r2, r3
    5fa8:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    5faa:	4b0c      	ldr	r3, [pc, #48]	; (5fdc <prvTraceSetObjectName+0xd4>)
    5fac:	681a      	ldr	r2, [r3, #0]
    5fae:	1dfb      	adds	r3, r7, #7
    5fb0:	781b      	ldrb	r3, [r3, #0]
    5fb2:	2170      	movs	r1, #112	; 0x70
    5fb4:	18d3      	adds	r3, r2, r3
    5fb6:	185b      	adds	r3, r3, r1
    5fb8:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    5fba:	001a      	movs	r2, r3
    5fbc:	683b      	ldr	r3, [r7, #0]
    5fbe:	0019      	movs	r1, r3
    5fc0:	4b0b      	ldr	r3, [pc, #44]	; (5ff0 <prvTraceSetObjectName+0xe8>)
    5fc2:	4798      	blx	r3
		}
	}
}
    5fc4:	46bd      	mov	sp, r7
    5fc6:	b002      	add	sp, #8
    5fc8:	bd80      	pop	{r7, pc}
    5fca:	46c0      	nop			; (mov r8, r8)
    5fcc:	00024178 	.word	0x00024178
    5fd0:	00005ff5 	.word	0x00005ff5
    5fd4:	000241ac 	.word	0x000241ac
    5fd8:	000241dc 	.word	0x000241dc
    5fdc:	20000c68 	.word	0x20000c68
    5fe0:	00004d15 	.word	0x00004d15
    5fe4:	00005c01 	.word	0x00005c01
    5fe8:	20000c70 	.word	0x20000c70
    5fec:	20000bc8 	.word	0x20000bc8
    5ff0:	00005ec1 	.word	0x00005ec1

00005ff4 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    5ff4:	b580      	push	{r7, lr}
    5ff6:	b082      	sub	sp, #8
    5ff8:	af00      	add	r7, sp, #0
    5ffa:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    5ffc:	4b11      	ldr	r3, [pc, #68]	; (6044 <prvTraceError+0x50>)
    5ffe:	681b      	ldr	r3, [r3, #0]
    6000:	2b00      	cmp	r3, #0
    6002:	d001      	beq.n	6008 <prvTraceError+0x14>
	{
		vTraceStop();
    6004:	4b10      	ldr	r3, [pc, #64]	; (6048 <prvTraceError+0x54>)
    6006:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    6008:	4b10      	ldr	r3, [pc, #64]	; (604c <prvTraceError+0x58>)
    600a:	681b      	ldr	r3, [r3, #0]
    600c:	2b00      	cmp	r3, #0
    600e:	d115      	bne.n	603c <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
    6010:	4b0e      	ldr	r3, [pc, #56]	; (604c <prvTraceError+0x58>)
    6012:	687a      	ldr	r2, [r7, #4]
    6014:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
    6016:	4b0b      	ldr	r3, [pc, #44]	; (6044 <prvTraceError+0x50>)
    6018:	681b      	ldr	r3, [r3, #0]
    601a:	2b00      	cmp	r3, #0
    601c:	d00e      	beq.n	603c <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    601e:	4b09      	ldr	r3, [pc, #36]	; (6044 <prvTraceError+0x50>)
    6020:	681b      	ldr	r3, [r3, #0]
    6022:	4a0b      	ldr	r2, [pc, #44]	; (6050 <prvTraceError+0x5c>)
    6024:	1898      	adds	r0, r3, r2
    6026:	4b09      	ldr	r3, [pc, #36]	; (604c <prvTraceError+0x58>)
    6028:	681b      	ldr	r3, [r3, #0]
    602a:	2250      	movs	r2, #80	; 0x50
    602c:	0019      	movs	r1, r3
    602e:	4b09      	ldr	r3, [pc, #36]	; (6054 <prvTraceError+0x60>)
    6030:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    6032:	4b04      	ldr	r3, [pc, #16]	; (6044 <prvTraceError+0x50>)
    6034:	681b      	ldr	r3, [r3, #0]
    6036:	4a08      	ldr	r2, [pc, #32]	; (6058 <prvTraceError+0x64>)
    6038:	2101      	movs	r1, #1
    603a:	5099      	str	r1, [r3, r2]
		}
	}
}
    603c:	46c0      	nop			; (mov r8, r8)
    603e:	46bd      	mov	sp, r7
    6040:	b002      	add	sp, #8
    6042:	bd80      	pop	{r7, pc}
    6044:	20000c68 	.word	0x20000c68
    6048:	00004eb9 	.word	0x00004eb9
    604c:	20000bc8 	.word	0x20000bc8
    6050:	000006bc 	.word	0x000006bc
    6054:	00005ec1 	.word	0x00005ec1
    6058:	000006b4 	.word	0x000006b4

0000605c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    605c:	b580      	push	{r7, lr}
    605e:	b086      	sub	sp, #24
    6060:	af00      	add	r7, sp, #0
    6062:	0002      	movs	r2, r0
    6064:	1dfb      	adds	r3, r7, #7
    6066:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
    6068:	2300      	movs	r3, #0
    606a:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
    606c:	2300      	movs	r3, #0
    606e:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    6070:	1dfb      	adds	r3, r7, #7
    6072:	781b      	ldrb	r3, [r3, #0]
    6074:	2b00      	cmp	r3, #0
    6076:	d000      	beq.n	607a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
    6078:	e089      	b.n	618e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
    607a:	4b49      	ldr	r3, [pc, #292]	; (61a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
    607c:	0018      	movs	r0, r3
    607e:	4b49      	ldr	r3, [pc, #292]	; (61a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
    6080:	4798      	blx	r3
    6082:	e08a      	b.n	619a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    6084:	4b48      	ldr	r3, [pc, #288]	; (61a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6086:	681b      	ldr	r3, [r3, #0]
    6088:	69da      	ldr	r2, [r3, #28]
    608a:	697b      	ldr	r3, [r7, #20]
    608c:	18d3      	adds	r3, r2, r3
    608e:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    6090:	4b45      	ldr	r3, [pc, #276]	; (61a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6092:	6819      	ldr	r1, [r3, #0]
    6094:	693b      	ldr	r3, [r7, #16]
    6096:	009a      	lsls	r2, r3, #2
    6098:	23e2      	movs	r3, #226	; 0xe2
    609a:	00db      	lsls	r3, r3, #3
    609c:	188a      	adds	r2, r1, r2
    609e:	18d3      	adds	r3, r2, r3
    60a0:	781b      	ldrb	r3, [r3, #0]
    60a2:	2b98      	cmp	r3, #152	; 0x98
    60a4:	d934      	bls.n	6110 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
    60a6:	4b40      	ldr	r3, [pc, #256]	; (61a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    60a8:	6819      	ldr	r1, [r3, #0]
    60aa:	693b      	ldr	r3, [r7, #16]
    60ac:	009a      	lsls	r2, r3, #2
    60ae:	23e2      	movs	r3, #226	; 0xe2
    60b0:	00db      	lsls	r3, r3, #3
    60b2:	188a      	adds	r2, r1, r2
    60b4:	18d3      	adds	r3, r2, r3
    60b6:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    60b8:	2ba7      	cmp	r3, #167	; 0xa7
    60ba:	d829      	bhi.n	6110 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    60bc:	4b3a      	ldr	r3, [pc, #232]	; (61a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    60be:	6819      	ldr	r1, [r3, #0]
    60c0:	693b      	ldr	r3, [r7, #16]
    60c2:	009a      	lsls	r2, r3, #2
    60c4:	23e2      	movs	r3, #226	; 0xe2
    60c6:	00db      	lsls	r3, r3, #3
    60c8:	188a      	adds	r2, r1, r2
    60ca:	18d3      	adds	r3, r2, r3
    60cc:	781a      	ldrb	r2, [r3, #0]
    60ce:	230f      	movs	r3, #15
    60d0:	18fb      	adds	r3, r7, r3
    60d2:	3268      	adds	r2, #104	; 0x68
    60d4:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    60d6:	230f      	movs	r3, #15
    60d8:	18fb      	adds	r3, r7, r3
    60da:	781a      	ldrb	r2, [r3, #0]
    60dc:	693b      	ldr	r3, [r7, #16]
    60de:	18d2      	adds	r2, r2, r3
    60e0:	4b31      	ldr	r3, [pc, #196]	; (61a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    60e2:	681b      	ldr	r3, [r3, #0]
    60e4:	699b      	ldr	r3, [r3, #24]
    60e6:	429a      	cmp	r2, r3
    60e8:	d24d      	bcs.n	6186 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    60ea:	4b2f      	ldr	r3, [pc, #188]	; (61a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    60ec:	681a      	ldr	r2, [r3, #0]
    60ee:	693b      	ldr	r3, [r7, #16]
    60f0:	009b      	lsls	r3, r3, #2
    60f2:	21e2      	movs	r1, #226	; 0xe2
    60f4:	00c9      	lsls	r1, r1, #3
    60f6:	468c      	mov	ip, r1
    60f8:	4463      	add	r3, ip
    60fa:	18d0      	adds	r0, r2, r3
    60fc:	230f      	movs	r3, #15
    60fe:	18fb      	adds	r3, r7, r3
    6100:	781b      	ldrb	r3, [r3, #0]
    6102:	3301      	adds	r3, #1
    6104:	009b      	lsls	r3, r3, #2
    6106:	001a      	movs	r2, r3
    6108:	2100      	movs	r1, #0
    610a:	4b28      	ldr	r3, [pc, #160]	; (61ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    610c:	4798      	blx	r3
		{
    610e:	e03a      	b.n	6186 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    6110:	4b25      	ldr	r3, [pc, #148]	; (61a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6112:	6819      	ldr	r1, [r3, #0]
    6114:	693b      	ldr	r3, [r7, #16]
    6116:	009a      	lsls	r2, r3, #2
    6118:	23e2      	movs	r3, #226	; 0xe2
    611a:	00db      	lsls	r3, r3, #3
    611c:	188a      	adds	r2, r1, r2
    611e:	18d3      	adds	r3, r2, r3
    6120:	781b      	ldrb	r3, [r3, #0]
    6122:	2b01      	cmp	r3, #1
    6124:	d130      	bne.n	6188 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
    6126:	693b      	ldr	r3, [r7, #16]
    6128:	1c5a      	adds	r2, r3, #1
    612a:	4b1f      	ldr	r3, [pc, #124]	; (61a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    612c:	681b      	ldr	r3, [r3, #0]
    612e:	699b      	ldr	r3, [r3, #24]
    6130:	429a      	cmp	r2, r3
    6132:	d20e      	bcs.n	6152 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    6134:	4b1c      	ldr	r3, [pc, #112]	; (61a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6136:	681a      	ldr	r2, [r3, #0]
    6138:	693b      	ldr	r3, [r7, #16]
    613a:	009b      	lsls	r3, r3, #2
    613c:	21e2      	movs	r1, #226	; 0xe2
    613e:	00c9      	lsls	r1, r1, #3
    6140:	468c      	mov	ip, r1
    6142:	4463      	add	r3, ip
    6144:	18d3      	adds	r3, r2, r3
    6146:	2208      	movs	r2, #8
    6148:	2100      	movs	r1, #0
    614a:	0018      	movs	r0, r3
    614c:	4b17      	ldr	r3, [pc, #92]	; (61ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    614e:	4798      	blx	r3
    6150:	e01a      	b.n	6188 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    6152:	4b15      	ldr	r3, [pc, #84]	; (61a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6154:	681b      	ldr	r3, [r3, #0]
    6156:	22e2      	movs	r2, #226	; 0xe2
    6158:	00d2      	lsls	r2, r2, #3
    615a:	4694      	mov	ip, r2
    615c:	4463      	add	r3, ip
    615e:	2204      	movs	r2, #4
    6160:	2100      	movs	r1, #0
    6162:	0018      	movs	r0, r3
    6164:	4b11      	ldr	r3, [pc, #68]	; (61ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    6166:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    6168:	4b0f      	ldr	r3, [pc, #60]	; (61a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    616a:	681a      	ldr	r2, [r3, #0]
    616c:	693b      	ldr	r3, [r7, #16]
    616e:	009b      	lsls	r3, r3, #2
    6170:	21e2      	movs	r1, #226	; 0xe2
    6172:	00c9      	lsls	r1, r1, #3
    6174:	468c      	mov	ip, r1
    6176:	4463      	add	r3, ip
    6178:	18d3      	adds	r3, r2, r3
    617a:	2204      	movs	r2, #4
    617c:	2100      	movs	r1, #0
    617e:	0018      	movs	r0, r3
    6180:	4b0a      	ldr	r3, [pc, #40]	; (61ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    6182:	4798      	blx	r3
    6184:	e000      	b.n	6188 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
    6186:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
    6188:	697b      	ldr	r3, [r7, #20]
    618a:	3301      	adds	r3, #1
    618c:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
    618e:	1dfb      	adds	r3, r7, #7
    6190:	781a      	ldrb	r2, [r3, #0]
    6192:	697b      	ldr	r3, [r7, #20]
    6194:	429a      	cmp	r2, r3
    6196:	d900      	bls.n	619a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
    6198:	e774      	b.n	6084 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
    619a:	46bd      	mov	sp, r7
    619c:	b006      	add	sp, #24
    619e:	bd80      	pop	{r7, pc}
    61a0:	0002423c 	.word	0x0002423c
    61a4:	00005ff5 	.word	0x00005ff5
    61a8:	20000c68 	.word	0x20000c68
    61ac:	00020f1f 	.word	0x00020f1f

000061b0 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    61b0:	b580      	push	{r7, lr}
    61b2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
    61b4:	4b12      	ldr	r3, [pc, #72]	; (6200 <prvTraceUpdateCounters+0x50>)
    61b6:	681b      	ldr	r3, [r3, #0]
    61b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    61ba:	2b00      	cmp	r3, #0
    61bc:	d01c      	beq.n	61f8 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    61be:	4b10      	ldr	r3, [pc, #64]	; (6200 <prvTraceUpdateCounters+0x50>)
    61c0:	681b      	ldr	r3, [r3, #0]
    61c2:	695a      	ldr	r2, [r3, #20]
    61c4:	3201      	adds	r2, #1
    61c6:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    61c8:	4b0d      	ldr	r3, [pc, #52]	; (6200 <prvTraceUpdateCounters+0x50>)
    61ca:	681b      	ldr	r3, [r3, #0]
    61cc:	69da      	ldr	r2, [r3, #28]
    61ce:	3201      	adds	r2, #1
    61d0:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    61d2:	4b0b      	ldr	r3, [pc, #44]	; (6200 <prvTraceUpdateCounters+0x50>)
    61d4:	681b      	ldr	r3, [r3, #0]
    61d6:	69da      	ldr	r2, [r3, #28]
    61d8:	232c      	movs	r3, #44	; 0x2c
    61da:	33ff      	adds	r3, #255	; 0xff
    61dc:	429a      	cmp	r2, r3
    61de:	d907      	bls.n	61f0 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    61e0:	4b07      	ldr	r3, [pc, #28]	; (6200 <prvTraceUpdateCounters+0x50>)
    61e2:	681b      	ldr	r3, [r3, #0]
    61e4:	2201      	movs	r2, #1
    61e6:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    61e8:	4b05      	ldr	r3, [pc, #20]	; (6200 <prvTraceUpdateCounters+0x50>)
    61ea:	681b      	ldr	r3, [r3, #0]
    61ec:	2200      	movs	r2, #0
    61ee:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    61f0:	2001      	movs	r0, #1
    61f2:	4b04      	ldr	r3, [pc, #16]	; (6204 <prvTraceUpdateCounters+0x54>)
    61f4:	4798      	blx	r3
    61f6:	e000      	b.n	61fa <prvTraceUpdateCounters+0x4a>
		return;
    61f8:	46c0      	nop			; (mov r8, r8)
#endif
}
    61fa:	46bd      	mov	sp, r7
    61fc:	bd80      	pop	{r7, pc}
    61fe:	46c0      	nop			; (mov r8, r8)
    6200:	20000c68 	.word	0x20000c68
    6204:	0000605d 	.word	0x0000605d

00006208 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
    6208:	b5b0      	push	{r4, r5, r7, lr}
    620a:	b086      	sub	sp, #24
    620c:	af00      	add	r7, sp, #0
    620e:	0002      	movs	r2, r0
    6210:	1dbb      	adds	r3, r7, #6
    6212:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
    6214:	2300      	movs	r3, #0
    6216:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
    6218:	2300      	movs	r3, #0
    621a:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
    621c:	2300      	movs	r3, #0
    621e:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    6220:	1dbb      	adds	r3, r7, #6
    6222:	881b      	ldrh	r3, [r3, #0]
    6224:	2bff      	cmp	r3, #255	; 0xff
    6226:	d00a      	beq.n	623e <prvTraceGetDTS+0x36>
    6228:	1dbb      	adds	r3, r7, #6
    622a:	881b      	ldrh	r3, [r3, #0]
    622c:	4a60      	ldr	r2, [pc, #384]	; (63b0 <prvTraceGetDTS+0x1a8>)
    622e:	4293      	cmp	r3, r2
    6230:	d005      	beq.n	623e <prvTraceGetDTS+0x36>
    6232:	4b60      	ldr	r3, [pc, #384]	; (63b4 <prvTraceGetDTS+0x1ac>)
    6234:	0018      	movs	r0, r3
    6236:	4b60      	ldr	r3, [pc, #384]	; (63b8 <prvTraceGetDTS+0x1b0>)
    6238:	4798      	blx	r3
    623a:	2300      	movs	r3, #0
    623c:	e0b3      	b.n	63a6 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
    623e:	4b5f      	ldr	r3, [pc, #380]	; (63bc <prvTraceGetDTS+0x1b4>)
    6240:	681b      	ldr	r3, [r3, #0]
    6242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6244:	2b00      	cmp	r3, #0
    6246:	d118      	bne.n	627a <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
    6248:	4b5d      	ldr	r3, [pc, #372]	; (63c0 <prvTraceGetDTS+0x1b8>)
    624a:	681b      	ldr	r3, [r3, #0]
    624c:	2b00      	cmp	r3, #0
    624e:	d006      	beq.n	625e <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    6250:	4b5a      	ldr	r3, [pc, #360]	; (63bc <prvTraceGetDTS+0x1b4>)
    6252:	681b      	ldr	r3, [r3, #0]
    6254:	4a5a      	ldr	r2, [pc, #360]	; (63c0 <prvTraceGetDTS+0x1b8>)
    6256:	6812      	ldr	r2, [r2, #0]
    6258:	0892      	lsrs	r2, r2, #2
    625a:	625a      	str	r2, [r3, #36]	; 0x24
    625c:	e00d      	b.n	627a <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    625e:	4b59      	ldr	r3, [pc, #356]	; (63c4 <prvTraceGetDTS+0x1bc>)
    6260:	681a      	ldr	r2, [r3, #0]
    6262:	4b59      	ldr	r3, [pc, #356]	; (63c8 <prvTraceGetDTS+0x1c0>)
    6264:	681b      	ldr	r3, [r3, #0]
    6266:	429a      	cmp	r2, r3
    6268:	d007      	beq.n	627a <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    626a:	4b54      	ldr	r3, [pc, #336]	; (63bc <prvTraceGetDTS+0x1b4>)
    626c:	681c      	ldr	r4, [r3, #0]
    626e:	2000      	movs	r0, #0
    6270:	4b56      	ldr	r3, [pc, #344]	; (63cc <prvTraceGetDTS+0x1c4>)
    6272:	4798      	blx	r3
    6274:	0003      	movs	r3, r0
    6276:	089b      	lsrs	r3, r3, #2
    6278:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
    627a:	230c      	movs	r3, #12
    627c:	18fb      	adds	r3, r7, r3
    627e:	0018      	movs	r0, r3
    6280:	4b53      	ldr	r3, [pc, #332]	; (63d0 <prvTraceGetDTS+0x1c8>)
    6282:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
    6284:	68fa      	ldr	r2, [r7, #12]
    6286:	4b53      	ldr	r3, [pc, #332]	; (63d4 <prvTraceGetDTS+0x1cc>)
    6288:	681b      	ldr	r3, [r3, #0]
    628a:	1ad3      	subs	r3, r2, r3
    628c:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
    628e:	68fa      	ldr	r2, [r7, #12]
    6290:	4b50      	ldr	r3, [pc, #320]	; (63d4 <prvTraceGetDTS+0x1cc>)
    6292:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
    6294:	4b49      	ldr	r3, [pc, #292]	; (63bc <prvTraceGetDTS+0x1b4>)
    6296:	681b      	ldr	r3, [r3, #0]
    6298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    629a:	2b00      	cmp	r3, #0
    629c:	d044      	beq.n	6328 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
    629e:	4b47      	ldr	r3, [pc, #284]	; (63bc <prvTraceGetDTS+0x1b4>)
    62a0:	681b      	ldr	r3, [r3, #0]
    62a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    62a4:	693b      	ldr	r3, [r7, #16]
    62a6:	429a      	cmp	r2, r3
    62a8:	d21e      	bcs.n	62e8 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    62aa:	4b44      	ldr	r3, [pc, #272]	; (63bc <prvTraceGetDTS+0x1b4>)
    62ac:	681c      	ldr	r4, [r3, #0]
    62ae:	4b43      	ldr	r3, [pc, #268]	; (63bc <prvTraceGetDTS+0x1b4>)
    62b0:	681b      	ldr	r3, [r3, #0]
    62b2:	6add      	ldr	r5, [r3, #44]	; 0x2c
    62b4:	4b41      	ldr	r3, [pc, #260]	; (63bc <prvTraceGetDTS+0x1b4>)
    62b6:	681b      	ldr	r3, [r3, #0]
    62b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    62ba:	4b47      	ldr	r3, [pc, #284]	; (63d8 <prvTraceGetDTS+0x1d0>)
    62bc:	0011      	movs	r1, r2
    62be:	6938      	ldr	r0, [r7, #16]
    62c0:	4798      	blx	r3
    62c2:	0003      	movs	r3, r0
    62c4:	18eb      	adds	r3, r5, r3
    62c6:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    62c8:	4b3c      	ldr	r3, [pc, #240]	; (63bc <prvTraceGetDTS+0x1b4>)
    62ca:	681c      	ldr	r4, [r3, #0]
    62cc:	4b3b      	ldr	r3, [pc, #236]	; (63bc <prvTraceGetDTS+0x1b4>)
    62ce:	681b      	ldr	r3, [r3, #0]
    62d0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    62d2:	4b3a      	ldr	r3, [pc, #232]	; (63bc <prvTraceGetDTS+0x1b4>)
    62d4:	681b      	ldr	r3, [r3, #0]
    62d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
    62d8:	693a      	ldr	r2, [r7, #16]
    62da:	4b40      	ldr	r3, [pc, #256]	; (63dc <prvTraceGetDTS+0x1d4>)
    62dc:	0010      	movs	r0, r2
    62de:	4798      	blx	r3
    62e0:	000b      	movs	r3, r1
    62e2:	18eb      	adds	r3, r5, r3
    62e4:	62a3      	str	r3, [r4, #40]	; 0x28
    62e6:	e007      	b.n	62f8 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
    62e8:	4b34      	ldr	r3, [pc, #208]	; (63bc <prvTraceGetDTS+0x1b4>)
    62ea:	681b      	ldr	r3, [r3, #0]
    62ec:	4a33      	ldr	r2, [pc, #204]	; (63bc <prvTraceGetDTS+0x1b4>)
    62ee:	6812      	ldr	r2, [r2, #0]
    62f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
    62f2:	693a      	ldr	r2, [r7, #16]
    62f4:	188a      	adds	r2, r1, r2
    62f6:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    62f8:	4b30      	ldr	r3, [pc, #192]	; (63bc <prvTraceGetDTS+0x1b4>)
    62fa:	681b      	ldr	r3, [r3, #0]
    62fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    62fe:	4b2f      	ldr	r3, [pc, #188]	; (63bc <prvTraceGetDTS+0x1b4>)
    6300:	681b      	ldr	r3, [r3, #0]
    6302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6304:	429a      	cmp	r2, r3
    6306:	d313      	bcc.n	6330 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
    6308:	4b2c      	ldr	r3, [pc, #176]	; (63bc <prvTraceGetDTS+0x1b4>)
    630a:	681b      	ldr	r3, [r3, #0]
    630c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    630e:	3201      	adds	r2, #1
    6310:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    6312:	4b2a      	ldr	r3, [pc, #168]	; (63bc <prvTraceGetDTS+0x1b4>)
    6314:	681b      	ldr	r3, [r3, #0]
    6316:	4a29      	ldr	r2, [pc, #164]	; (63bc <prvTraceGetDTS+0x1b4>)
    6318:	6812      	ldr	r2, [r2, #0]
    631a:	6a91      	ldr	r1, [r2, #40]	; 0x28
    631c:	4a27      	ldr	r2, [pc, #156]	; (63bc <prvTraceGetDTS+0x1b4>)
    631e:	6812      	ldr	r2, [r2, #0]
    6320:	6a52      	ldr	r2, [r2, #36]	; 0x24
    6322:	1a8a      	subs	r2, r1, r2
    6324:	629a      	str	r2, [r3, #40]	; 0x28
    6326:	e003      	b.n	6330 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
    6328:	4b24      	ldr	r3, [pc, #144]	; (63bc <prvTraceGetDTS+0x1b4>)
    632a:	681b      	ldr	r3, [r3, #0]
    632c:	68fa      	ldr	r2, [r7, #12]
    632e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
    6330:	1dbb      	adds	r3, r7, #6
    6332:	881a      	ldrh	r2, [r3, #0]
    6334:	693b      	ldr	r3, [r7, #16]
    6336:	429a      	cmp	r2, r3
    6338:	d22f      	bcs.n	639a <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    633a:	4b29      	ldr	r3, [pc, #164]	; (63e0 <prvTraceGetDTS+0x1d8>)
    633c:	4798      	blx	r3
    633e:	0003      	movs	r3, r0
    6340:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
    6342:	697b      	ldr	r3, [r7, #20]
    6344:	2b00      	cmp	r3, #0
    6346:	d028      	beq.n	639a <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
    6348:	1dbb      	adds	r3, r7, #6
    634a:	881b      	ldrh	r3, [r3, #0]
    634c:	4a18      	ldr	r2, [pc, #96]	; (63b0 <prvTraceGetDTS+0x1a8>)
    634e:	4293      	cmp	r3, r2
    6350:	d10b      	bne.n	636a <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
    6352:	697b      	ldr	r3, [r7, #20]
    6354:	22a9      	movs	r2, #169	; 0xa9
    6356:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    6358:	693b      	ldr	r3, [r7, #16]
    635a:	0c1b      	lsrs	r3, r3, #16
    635c:	b29a      	uxth	r2, r3
    635e:	697b      	ldr	r3, [r7, #20]
    6360:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
    6362:	697b      	ldr	r3, [r7, #20]
    6364:	2200      	movs	r2, #0
    6366:	705a      	strb	r2, [r3, #1]
    6368:	e015      	b.n	6396 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
    636a:	1dbb      	adds	r3, r7, #6
    636c:	881b      	ldrh	r3, [r3, #0]
    636e:	2bff      	cmp	r3, #255	; 0xff
    6370:	d10d      	bne.n	638e <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
    6372:	697b      	ldr	r3, [r7, #20]
    6374:	22a8      	movs	r2, #168	; 0xa8
    6376:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    6378:	693b      	ldr	r3, [r7, #16]
    637a:	0a1b      	lsrs	r3, r3, #8
    637c:	b29a      	uxth	r2, r3
    637e:	697b      	ldr	r3, [r7, #20]
    6380:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    6382:	693b      	ldr	r3, [r7, #16]
    6384:	0e1b      	lsrs	r3, r3, #24
    6386:	b2da      	uxtb	r2, r3
    6388:	697b      	ldr	r3, [r7, #20]
    638a:	705a      	strb	r2, [r3, #1]
    638c:	e003      	b.n	6396 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    638e:	4b15      	ldr	r3, [pc, #84]	; (63e4 <prvTraceGetDTS+0x1dc>)
    6390:	0018      	movs	r0, r3
    6392:	4b09      	ldr	r3, [pc, #36]	; (63b8 <prvTraceGetDTS+0x1b0>)
    6394:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
    6396:	4b14      	ldr	r3, [pc, #80]	; (63e8 <prvTraceGetDTS+0x1e0>)
    6398:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
    639a:	693b      	ldr	r3, [r7, #16]
    639c:	b29b      	uxth	r3, r3
    639e:	1dba      	adds	r2, r7, #6
    63a0:	8812      	ldrh	r2, [r2, #0]
    63a2:	4013      	ands	r3, r2
    63a4:	b29b      	uxth	r3, r3
}
    63a6:	0018      	movs	r0, r3
    63a8:	46bd      	mov	sp, r7
    63aa:	b006      	add	sp, #24
    63ac:	bdb0      	pop	{r4, r5, r7, pc}
    63ae:	46c0      	nop			; (mov r8, r8)
    63b0:	0000ffff 	.word	0x0000ffff
    63b4:	00024294 	.word	0x00024294
    63b8:	00005ff5 	.word	0x00005ff5
    63bc:	20000c68 	.word	0x20000c68
    63c0:	20000bc4 	.word	0x20000bc4
    63c4:	e000e018 	.word	0xe000e018
    63c8:	2000500c 	.word	0x2000500c
    63cc:	000163a5 	.word	0x000163a5
    63d0:	000063ed 	.word	0x000063ed
    63d4:	20000c74 	.word	0x20000c74
    63d8:	0001ef45 	.word	0x0001ef45
    63dc:	0001f051 	.word	0x0001f051
    63e0:	00005bad 	.word	0x00005bad
    63e4:	000242d4 	.word	0x000242d4
    63e8:	000061b1 	.word	0x000061b1

000063ec <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    63ec:	b580      	push	{r7, lr}
    63ee:	b084      	sub	sp, #16
    63f0:	af00      	add	r7, sp, #0
    63f2:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
    63f4:	2300      	movs	r3, #0
    63f6:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
    63f8:	2300      	movs	r3, #0
    63fa:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    63fc:	4b2d      	ldr	r3, [pc, #180]	; (64b4 <prvTracePortGetTimeStamp+0xc8>)
    63fe:	681b      	ldr	r3, [r3, #0]
    6400:	2b01      	cmp	r3, #1
    6402:	d107      	bne.n	6414 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
    6404:	687b      	ldr	r3, [r7, #4]
    6406:	2b00      	cmp	r3, #0
    6408:	d04f      	beq.n	64aa <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
    640a:	4b2b      	ldr	r3, [pc, #172]	; (64b8 <prvTracePortGetTimeStamp+0xcc>)
    640c:	681a      	ldr	r2, [r3, #0]
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	601a      	str	r2, [r3, #0]
		return;
    6412:	e04a      	b.n	64aa <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    6414:	4b29      	ldr	r3, [pc, #164]	; (64bc <prvTracePortGetTimeStamp+0xd0>)
    6416:	681a      	ldr	r2, [r3, #0]
    6418:	4b29      	ldr	r3, [pc, #164]	; (64c0 <prvTracePortGetTimeStamp+0xd4>)
    641a:	681b      	ldr	r3, [r3, #0]
    641c:	1ad3      	subs	r3, r2, r3
    641e:	3301      	adds	r3, #1
    6420:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    6422:	4b28      	ldr	r3, [pc, #160]	; (64c4 <prvTracePortGetTimeStamp+0xd8>)
    6424:	681a      	ldr	r2, [r3, #0]
    6426:	4b28      	ldr	r3, [pc, #160]	; (64c8 <prvTracePortGetTimeStamp+0xdc>)
    6428:	681b      	ldr	r3, [r3, #0]
    642a:	1ad3      	subs	r3, r2, r3
    642c:	3b01      	subs	r3, #1
    642e:	2b00      	cmp	r3, #0
    6430:	db03      	blt.n	643a <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
    6432:	4b24      	ldr	r3, [pc, #144]	; (64c4 <prvTracePortGetTimeStamp+0xd8>)
    6434:	681b      	ldr	r3, [r3, #0]
    6436:	60fb      	str	r3, [r7, #12]
    6438:	e002      	b.n	6440 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
    643a:	4b23      	ldr	r3, [pc, #140]	; (64c8 <prvTracePortGetTimeStamp+0xdc>)
    643c:	681b      	ldr	r3, [r3, #0]
    643e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    6440:	4b20      	ldr	r3, [pc, #128]	; (64c4 <prvTracePortGetTimeStamp+0xd8>)
    6442:	681b      	ldr	r3, [r3, #0]
    6444:	68fa      	ldr	r2, [r7, #12]
    6446:	429a      	cmp	r2, r3
    6448:	d107      	bne.n	645a <prvTracePortGetTimeStamp+0x6e>
    644a:	4b20      	ldr	r3, [pc, #128]	; (64cc <prvTracePortGetTimeStamp+0xe0>)
    644c:	681b      	ldr	r3, [r3, #0]
    644e:	68ba      	ldr	r2, [r7, #8]
    6450:	429a      	cmp	r2, r3
    6452:	d202      	bcs.n	645a <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    6454:	68fb      	ldr	r3, [r7, #12]
    6456:	3301      	adds	r3, #1
    6458:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    645a:	687b      	ldr	r3, [r7, #4]
    645c:	2b00      	cmp	r3, #0
    645e:	d016      	beq.n	648e <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    6460:	4b16      	ldr	r3, [pc, #88]	; (64bc <prvTracePortGetTimeStamp+0xd0>)
    6462:	681b      	ldr	r3, [r3, #0]
    6464:	3301      	adds	r3, #1
    6466:	089b      	lsrs	r3, r3, #2
    6468:	68fa      	ldr	r2, [r7, #12]
    646a:	435a      	muls	r2, r3
    646c:	4b12      	ldr	r3, [pc, #72]	; (64b8 <prvTracePortGetTimeStamp+0xcc>)
    646e:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    6470:	4b12      	ldr	r3, [pc, #72]	; (64bc <prvTracePortGetTimeStamp+0xd0>)
    6472:	681b      	ldr	r3, [r3, #0]
    6474:	3301      	adds	r3, #1
    6476:	2203      	movs	r2, #3
    6478:	4013      	ands	r3, r2
    647a:	68fa      	ldr	r2, [r7, #12]
    647c:	435a      	muls	r2, r3
    647e:	68bb      	ldr	r3, [r7, #8]
    6480:	18d3      	adds	r3, r2, r3
    6482:	089a      	lsrs	r2, r3, #2
    6484:	4b0c      	ldr	r3, [pc, #48]	; (64b8 <prvTracePortGetTimeStamp+0xcc>)
    6486:	681b      	ldr	r3, [r3, #0]
    6488:	18d2      	adds	r2, r2, r3
    648a:	4b0b      	ldr	r3, [pc, #44]	; (64b8 <prvTracePortGetTimeStamp+0xcc>)
    648c:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    648e:	4b0d      	ldr	r3, [pc, #52]	; (64c4 <prvTracePortGetTimeStamp+0xd8>)
    6490:	68fa      	ldr	r2, [r7, #12]
    6492:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
    6494:	687b      	ldr	r3, [r7, #4]
    6496:	2b00      	cmp	r3, #0
    6498:	d003      	beq.n	64a2 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
    649a:	4b07      	ldr	r3, [pc, #28]	; (64b8 <prvTracePortGetTimeStamp+0xcc>)
    649c:	681a      	ldr	r2, [r3, #0]
    649e:	687b      	ldr	r3, [r7, #4]
    64a0:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    64a2:	4b0a      	ldr	r3, [pc, #40]	; (64cc <prvTracePortGetTimeStamp+0xe0>)
    64a4:	68ba      	ldr	r2, [r7, #8]
    64a6:	601a      	str	r2, [r3, #0]
    64a8:	e000      	b.n	64ac <prvTracePortGetTimeStamp+0xc0>
		return;
    64aa:	46c0      	nop			; (mov r8, r8)
}
    64ac:	46bd      	mov	sp, r7
    64ae:	b004      	add	sp, #16
    64b0:	bd80      	pop	{r7, pc}
    64b2:	46c0      	nop			; (mov r8, r8)
    64b4:	20000bb4 	.word	0x20000bb4
    64b8:	20000bb8 	.word	0x20000bb8
    64bc:	e000e014 	.word	0xe000e014
    64c0:	e000e018 	.word	0xe000e018
    64c4:	20000c78 	.word	0x20000c78
    64c8:	20000bb0 	.word	0x20000bb0
    64cc:	20000c7c 	.word	0x20000c7c

000064d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    64d0:	b580      	push	{r7, lr}
    64d2:	b082      	sub	sp, #8
    64d4:	af00      	add	r7, sp, #0
    64d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    64d8:	687b      	ldr	r3, [r7, #4]
    64da:	3308      	adds	r3, #8
    64dc:	001a      	movs	r2, r3
    64de:	687b      	ldr	r3, [r7, #4]
    64e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    64e2:	687b      	ldr	r3, [r7, #4]
    64e4:	2201      	movs	r2, #1
    64e6:	4252      	negs	r2, r2
    64e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    64ea:	687b      	ldr	r3, [r7, #4]
    64ec:	3308      	adds	r3, #8
    64ee:	001a      	movs	r2, r3
    64f0:	687b      	ldr	r3, [r7, #4]
    64f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    64f4:	687b      	ldr	r3, [r7, #4]
    64f6:	3308      	adds	r3, #8
    64f8:	001a      	movs	r2, r3
    64fa:	687b      	ldr	r3, [r7, #4]
    64fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    64fe:	687b      	ldr	r3, [r7, #4]
    6500:	2200      	movs	r2, #0
    6502:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    6504:	46c0      	nop			; (mov r8, r8)
    6506:	46bd      	mov	sp, r7
    6508:	b002      	add	sp, #8
    650a:	bd80      	pop	{r7, pc}

0000650c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    650c:	b580      	push	{r7, lr}
    650e:	b082      	sub	sp, #8
    6510:	af00      	add	r7, sp, #0
    6512:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    6514:	687b      	ldr	r3, [r7, #4]
    6516:	2200      	movs	r2, #0
    6518:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    651a:	46c0      	nop			; (mov r8, r8)
    651c:	46bd      	mov	sp, r7
    651e:	b002      	add	sp, #8
    6520:	bd80      	pop	{r7, pc}

00006522 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    6522:	b580      	push	{r7, lr}
    6524:	b084      	sub	sp, #16
    6526:	af00      	add	r7, sp, #0
    6528:	6078      	str	r0, [r7, #4]
    652a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    652c:	687b      	ldr	r3, [r7, #4]
    652e:	685b      	ldr	r3, [r3, #4]
    6530:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    6532:	683b      	ldr	r3, [r7, #0]
    6534:	68fa      	ldr	r2, [r7, #12]
    6536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    6538:	68fb      	ldr	r3, [r7, #12]
    653a:	689a      	ldr	r2, [r3, #8]
    653c:	683b      	ldr	r3, [r7, #0]
    653e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    6540:	68fb      	ldr	r3, [r7, #12]
    6542:	689b      	ldr	r3, [r3, #8]
    6544:	683a      	ldr	r2, [r7, #0]
    6546:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    6548:	68fb      	ldr	r3, [r7, #12]
    654a:	683a      	ldr	r2, [r7, #0]
    654c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    654e:	683b      	ldr	r3, [r7, #0]
    6550:	687a      	ldr	r2, [r7, #4]
    6552:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    6554:	687b      	ldr	r3, [r7, #4]
    6556:	681b      	ldr	r3, [r3, #0]
    6558:	1c5a      	adds	r2, r3, #1
    655a:	687b      	ldr	r3, [r7, #4]
    655c:	601a      	str	r2, [r3, #0]
}
    655e:	46c0      	nop			; (mov r8, r8)
    6560:	46bd      	mov	sp, r7
    6562:	b004      	add	sp, #16
    6564:	bd80      	pop	{r7, pc}

00006566 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    6566:	b580      	push	{r7, lr}
    6568:	b084      	sub	sp, #16
    656a:	af00      	add	r7, sp, #0
    656c:	6078      	str	r0, [r7, #4]
    656e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    6570:	683b      	ldr	r3, [r7, #0]
    6572:	681b      	ldr	r3, [r3, #0]
    6574:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    6576:	68bb      	ldr	r3, [r7, #8]
    6578:	3301      	adds	r3, #1
    657a:	d103      	bne.n	6584 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    657c:	687b      	ldr	r3, [r7, #4]
    657e:	691b      	ldr	r3, [r3, #16]
    6580:	60fb      	str	r3, [r7, #12]
    6582:	e00c      	b.n	659e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6584:	687b      	ldr	r3, [r7, #4]
    6586:	3308      	adds	r3, #8
    6588:	60fb      	str	r3, [r7, #12]
    658a:	e002      	b.n	6592 <vListInsert+0x2c>
    658c:	68fb      	ldr	r3, [r7, #12]
    658e:	685b      	ldr	r3, [r3, #4]
    6590:	60fb      	str	r3, [r7, #12]
    6592:	68fb      	ldr	r3, [r7, #12]
    6594:	685b      	ldr	r3, [r3, #4]
    6596:	681a      	ldr	r2, [r3, #0]
    6598:	68bb      	ldr	r3, [r7, #8]
    659a:	429a      	cmp	r2, r3
    659c:	d9f6      	bls.n	658c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    659e:	68fb      	ldr	r3, [r7, #12]
    65a0:	685a      	ldr	r2, [r3, #4]
    65a2:	683b      	ldr	r3, [r7, #0]
    65a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    65a6:	683b      	ldr	r3, [r7, #0]
    65a8:	685b      	ldr	r3, [r3, #4]
    65aa:	683a      	ldr	r2, [r7, #0]
    65ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    65ae:	683b      	ldr	r3, [r7, #0]
    65b0:	68fa      	ldr	r2, [r7, #12]
    65b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    65b4:	68fb      	ldr	r3, [r7, #12]
    65b6:	683a      	ldr	r2, [r7, #0]
    65b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    65ba:	683b      	ldr	r3, [r7, #0]
    65bc:	687a      	ldr	r2, [r7, #4]
    65be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    65c0:	687b      	ldr	r3, [r7, #4]
    65c2:	681b      	ldr	r3, [r3, #0]
    65c4:	1c5a      	adds	r2, r3, #1
    65c6:	687b      	ldr	r3, [r7, #4]
    65c8:	601a      	str	r2, [r3, #0]
}
    65ca:	46c0      	nop			; (mov r8, r8)
    65cc:	46bd      	mov	sp, r7
    65ce:	b004      	add	sp, #16
    65d0:	bd80      	pop	{r7, pc}

000065d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    65d2:	b580      	push	{r7, lr}
    65d4:	b084      	sub	sp, #16
    65d6:	af00      	add	r7, sp, #0
    65d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    65da:	687b      	ldr	r3, [r7, #4]
    65dc:	691b      	ldr	r3, [r3, #16]
    65de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    65e0:	687b      	ldr	r3, [r7, #4]
    65e2:	685b      	ldr	r3, [r3, #4]
    65e4:	687a      	ldr	r2, [r7, #4]
    65e6:	6892      	ldr	r2, [r2, #8]
    65e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    65ea:	687b      	ldr	r3, [r7, #4]
    65ec:	689b      	ldr	r3, [r3, #8]
    65ee:	687a      	ldr	r2, [r7, #4]
    65f0:	6852      	ldr	r2, [r2, #4]
    65f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    65f4:	68fb      	ldr	r3, [r7, #12]
    65f6:	685a      	ldr	r2, [r3, #4]
    65f8:	687b      	ldr	r3, [r7, #4]
    65fa:	429a      	cmp	r2, r3
    65fc:	d103      	bne.n	6606 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    65fe:	687b      	ldr	r3, [r7, #4]
    6600:	689a      	ldr	r2, [r3, #8]
    6602:	68fb      	ldr	r3, [r7, #12]
    6604:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    6606:	687b      	ldr	r3, [r7, #4]
    6608:	2200      	movs	r2, #0
    660a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    660c:	68fb      	ldr	r3, [r7, #12]
    660e:	681b      	ldr	r3, [r3, #0]
    6610:	1e5a      	subs	r2, r3, #1
    6612:	68fb      	ldr	r3, [r7, #12]
    6614:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    6616:	68fb      	ldr	r3, [r7, #12]
    6618:	681b      	ldr	r3, [r3, #0]
}
    661a:	0018      	movs	r0, r3
    661c:	46bd      	mov	sp, r7
    661e:	b004      	add	sp, #16
    6620:	bd80      	pop	{r7, pc}
	...

00006624 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    6624:	b580      	push	{r7, lr}
    6626:	b084      	sub	sp, #16
    6628:	af00      	add	r7, sp, #0
    662a:	60f8      	str	r0, [r7, #12]
    662c:	60b9      	str	r1, [r7, #8]
    662e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    6630:	68fb      	ldr	r3, [r7, #12]
    6632:	3b04      	subs	r3, #4
    6634:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    6636:	68fb      	ldr	r3, [r7, #12]
    6638:	2280      	movs	r2, #128	; 0x80
    663a:	0452      	lsls	r2, r2, #17
    663c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    663e:	68fb      	ldr	r3, [r7, #12]
    6640:	3b04      	subs	r3, #4
    6642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    6644:	68ba      	ldr	r2, [r7, #8]
    6646:	68fb      	ldr	r3, [r7, #12]
    6648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    664a:	68fb      	ldr	r3, [r7, #12]
    664c:	3b04      	subs	r3, #4
    664e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    6650:	4a08      	ldr	r2, [pc, #32]	; (6674 <pxPortInitialiseStack+0x50>)
    6652:	68fb      	ldr	r3, [r7, #12]
    6654:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    6656:	68fb      	ldr	r3, [r7, #12]
    6658:	3b14      	subs	r3, #20
    665a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    665c:	687a      	ldr	r2, [r7, #4]
    665e:	68fb      	ldr	r3, [r7, #12]
    6660:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    6662:	68fb      	ldr	r3, [r7, #12]
    6664:	3b20      	subs	r3, #32
    6666:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    6668:	68fb      	ldr	r3, [r7, #12]
}
    666a:	0018      	movs	r0, r3
    666c:	46bd      	mov	sp, r7
    666e:	b004      	add	sp, #16
    6670:	bd80      	pop	{r7, pc}
    6672:	46c0      	nop			; (mov r8, r8)
    6674:	00006679 	.word	0x00006679

00006678 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    6678:	b580      	push	{r7, lr}
    667a:	b082      	sub	sp, #8
    667c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    667e:	2300      	movs	r3, #0
    6680:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    6682:	4b07      	ldr	r3, [pc, #28]	; (66a0 <prvTaskExitError+0x28>)
    6684:	681b      	ldr	r3, [r3, #0]
    6686:	3301      	adds	r3, #1
    6688:	d001      	beq.n	668e <prvTaskExitError+0x16>
    668a:	b672      	cpsid	i
    668c:	e7fe      	b.n	668c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    668e:	b672      	cpsid	i
	while( ulDummy == 0 )
    6690:	46c0      	nop			; (mov r8, r8)
    6692:	687b      	ldr	r3, [r7, #4]
    6694:	2b00      	cmp	r3, #0
    6696:	d0fc      	beq.n	6692 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    6698:	46c0      	nop			; (mov r8, r8)
    669a:	46bd      	mov	sp, r7
    669c:	b002      	add	sp, #8
    669e:	bd80      	pop	{r7, pc}
    66a0:	20000110 	.word	0x20000110

000066a4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    66a4:	b580      	push	{r7, lr}
    66a6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    66a8:	46c0      	nop			; (mov r8, r8)
    66aa:	46bd      	mov	sp, r7
    66ac:	bd80      	pop	{r7, pc}
	...

000066b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    66b0:	4a0b      	ldr	r2, [pc, #44]	; (66e0 <pxCurrentTCBConst2>)
    66b2:	6813      	ldr	r3, [r2, #0]
    66b4:	6818      	ldr	r0, [r3, #0]
    66b6:	3020      	adds	r0, #32
    66b8:	f380 8809 	msr	PSP, r0
    66bc:	2002      	movs	r0, #2
    66be:	f380 8814 	msr	CONTROL, r0
    66c2:	f3bf 8f6f 	isb	sy
    66c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    66c8:	46ae      	mov	lr, r5
    66ca:	bc08      	pop	{r3}
    66cc:	bc04      	pop	{r2}
    66ce:	b662      	cpsie	i
    66d0:	4718      	bx	r3
    66d2:	46c0      	nop			; (mov r8, r8)
    66d4:	46c0      	nop			; (mov r8, r8)
    66d6:	46c0      	nop			; (mov r8, r8)
    66d8:	46c0      	nop			; (mov r8, r8)
    66da:	46c0      	nop			; (mov r8, r8)
    66dc:	46c0      	nop			; (mov r8, r8)
    66de:	46c0      	nop			; (mov r8, r8)

000066e0 <pxCurrentTCBConst2>:
    66e0:	20003b68 	.word	0x20003b68
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    66e4:	46c0      	nop			; (mov r8, r8)
    66e6:	46c0      	nop			; (mov r8, r8)

000066e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    66e8:	b580      	push	{r7, lr}
    66ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    66ec:	4b0e      	ldr	r3, [pc, #56]	; (6728 <xPortStartScheduler+0x40>)
    66ee:	4a0e      	ldr	r2, [pc, #56]	; (6728 <xPortStartScheduler+0x40>)
    66f0:	6812      	ldr	r2, [r2, #0]
    66f2:	21ff      	movs	r1, #255	; 0xff
    66f4:	0409      	lsls	r1, r1, #16
    66f6:	430a      	orrs	r2, r1
    66f8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    66fa:	4b0b      	ldr	r3, [pc, #44]	; (6728 <xPortStartScheduler+0x40>)
    66fc:	4a0a      	ldr	r2, [pc, #40]	; (6728 <xPortStartScheduler+0x40>)
    66fe:	6812      	ldr	r2, [r2, #0]
    6700:	21ff      	movs	r1, #255	; 0xff
    6702:	0609      	lsls	r1, r1, #24
    6704:	430a      	orrs	r2, r1
    6706:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    6708:	4b08      	ldr	r3, [pc, #32]	; (672c <xPortStartScheduler+0x44>)
    670a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    670c:	4b08      	ldr	r3, [pc, #32]	; (6730 <xPortStartScheduler+0x48>)
    670e:	2200      	movs	r2, #0
    6710:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    6712:	4b08      	ldr	r3, [pc, #32]	; (6734 <xPortStartScheduler+0x4c>)
    6714:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    6716:	4b08      	ldr	r3, [pc, #32]	; (6738 <xPortStartScheduler+0x50>)
    6718:	4798      	blx	r3
	prvTaskExitError();
    671a:	4b08      	ldr	r3, [pc, #32]	; (673c <xPortStartScheduler+0x54>)
    671c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    671e:	2300      	movs	r3, #0
}
    6720:	0018      	movs	r0, r3
    6722:	46bd      	mov	sp, r7
    6724:	bd80      	pop	{r7, pc}
    6726:	46c0      	nop			; (mov r8, r8)
    6728:	e000ed20 	.word	0xe000ed20
    672c:	00006849 	.word	0x00006849
    6730:	20000110 	.word	0x20000110
    6734:	000066b1 	.word	0x000066b1
    6738:	00008da9 	.word	0x00008da9
    673c:	00006679 	.word	0x00006679

00006740 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    6740:	b580      	push	{r7, lr}
    6742:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    6744:	4b03      	ldr	r3, [pc, #12]	; (6754 <vPortYield+0x14>)
    6746:	2280      	movs	r2, #128	; 0x80
    6748:	0552      	lsls	r2, r2, #21
    674a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
    674c:	46c0      	nop			; (mov r8, r8)
    674e:	46bd      	mov	sp, r7
    6750:	bd80      	pop	{r7, pc}
    6752:	46c0      	nop			; (mov r8, r8)
    6754:	e000ed04 	.word	0xe000ed04

00006758 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    6758:	b580      	push	{r7, lr}
    675a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    675c:	b672      	cpsid	i
    uxCriticalNesting++;
    675e:	4b06      	ldr	r3, [pc, #24]	; (6778 <vPortEnterCritical+0x20>)
    6760:	681b      	ldr	r3, [r3, #0]
    6762:	1c5a      	adds	r2, r3, #1
    6764:	4b04      	ldr	r3, [pc, #16]	; (6778 <vPortEnterCritical+0x20>)
    6766:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    6768:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    676c:	f3bf 8f6f 	isb	sy
}
    6770:	46c0      	nop			; (mov r8, r8)
    6772:	46bd      	mov	sp, r7
    6774:	bd80      	pop	{r7, pc}
    6776:	46c0      	nop			; (mov r8, r8)
    6778:	20000110 	.word	0x20000110

0000677c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    677c:	b580      	push	{r7, lr}
    677e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    6780:	4b09      	ldr	r3, [pc, #36]	; (67a8 <vPortExitCritical+0x2c>)
    6782:	681b      	ldr	r3, [r3, #0]
    6784:	2b00      	cmp	r3, #0
    6786:	d101      	bne.n	678c <vPortExitCritical+0x10>
    6788:	b672      	cpsid	i
    678a:	e7fe      	b.n	678a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    678c:	4b06      	ldr	r3, [pc, #24]	; (67a8 <vPortExitCritical+0x2c>)
    678e:	681b      	ldr	r3, [r3, #0]
    6790:	1e5a      	subs	r2, r3, #1
    6792:	4b05      	ldr	r3, [pc, #20]	; (67a8 <vPortExitCritical+0x2c>)
    6794:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    6796:	4b04      	ldr	r3, [pc, #16]	; (67a8 <vPortExitCritical+0x2c>)
    6798:	681b      	ldr	r3, [r3, #0]
    679a:	2b00      	cmp	r3, #0
    679c:	d100      	bne.n	67a0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    679e:	b662      	cpsie	i
    }
}
    67a0:	46c0      	nop			; (mov r8, r8)
    67a2:	46bd      	mov	sp, r7
    67a4:	bd80      	pop	{r7, pc}
    67a6:	46c0      	nop			; (mov r8, r8)
    67a8:	20000110 	.word	0x20000110

000067ac <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    67ac:	f3ef 8010 	mrs	r0, PRIMASK
    67b0:	b672      	cpsid	i
    67b2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    67b4:	46c0      	nop			; (mov r8, r8)
    67b6:	0018      	movs	r0, r3

000067b8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    67b8:	f380 8810 	msr	PRIMASK, r0
    67bc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    67be:	46c0      	nop			; (mov r8, r8)

000067c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    67c0:	f3ef 8009 	mrs	r0, PSP
    67c4:	4b0e      	ldr	r3, [pc, #56]	; (6800 <pxCurrentTCBConst>)
    67c6:	681a      	ldr	r2, [r3, #0]
    67c8:	3820      	subs	r0, #32
    67ca:	6010      	str	r0, [r2, #0]
    67cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    67ce:	4644      	mov	r4, r8
    67d0:	464d      	mov	r5, r9
    67d2:	4656      	mov	r6, sl
    67d4:	465f      	mov	r7, fp
    67d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    67d8:	b508      	push	{r3, lr}
    67da:	b672      	cpsid	i
    67dc:	f002 fae4 	bl	8da8 <vTaskSwitchContext>
    67e0:	b662      	cpsie	i
    67e2:	bc0c      	pop	{r2, r3}
    67e4:	6811      	ldr	r1, [r2, #0]
    67e6:	6808      	ldr	r0, [r1, #0]
    67e8:	3010      	adds	r0, #16
    67ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    67ec:	46a0      	mov	r8, r4
    67ee:	46a9      	mov	r9, r5
    67f0:	46b2      	mov	sl, r6
    67f2:	46bb      	mov	fp, r7
    67f4:	f380 8809 	msr	PSP, r0
    67f8:	3820      	subs	r0, #32
    67fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    67fc:	4718      	bx	r3
    67fe:	46c0      	nop			; (mov r8, r8)

00006800 <pxCurrentTCBConst>:
    6800:	20003b68 	.word	0x20003b68
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    6804:	46c0      	nop			; (mov r8, r8)
    6806:	46c0      	nop			; (mov r8, r8)

00006808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    6808:	b580      	push	{r7, lr}
    680a:	b082      	sub	sp, #8
    680c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    680e:	4b0a      	ldr	r3, [pc, #40]	; (6838 <SysTick_Handler+0x30>)
    6810:	4798      	blx	r3
    6812:	0003      	movs	r3, r0
    6814:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    6816:	4b09      	ldr	r3, [pc, #36]	; (683c <SysTick_Handler+0x34>)
    6818:	4798      	blx	r3
    681a:	1e03      	subs	r3, r0, #0
    681c:	d003      	beq.n	6826 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    681e:	4b08      	ldr	r3, [pc, #32]	; (6840 <SysTick_Handler+0x38>)
    6820:	2280      	movs	r2, #128	; 0x80
    6822:	0552      	lsls	r2, r2, #21
    6824:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    6826:	687b      	ldr	r3, [r7, #4]
    6828:	0018      	movs	r0, r3
    682a:	4b06      	ldr	r3, [pc, #24]	; (6844 <SysTick_Handler+0x3c>)
    682c:	4798      	blx	r3
}
    682e:	46c0      	nop			; (mov r8, r8)
    6830:	46bd      	mov	sp, r7
    6832:	b002      	add	sp, #8
    6834:	bd80      	pop	{r7, pc}
    6836:	46c0      	nop			; (mov r8, r8)
    6838:	000067ad 	.word	0x000067ad
    683c:	00008bb9 	.word	0x00008bb9
    6840:	e000ed04 	.word	0xe000ed04
    6844:	000067b9 	.word	0x000067b9

00006848 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    6848:	b5b0      	push	{r4, r5, r7, lr}
    684a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    684c:	4b0b      	ldr	r3, [pc, #44]	; (687c <prvSetupTimerInterrupt+0x34>)
    684e:	2200      	movs	r2, #0
    6850:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    6852:	4b0b      	ldr	r3, [pc, #44]	; (6880 <prvSetupTimerInterrupt+0x38>)
    6854:	2200      	movs	r2, #0
    6856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    6858:	4c0a      	ldr	r4, [pc, #40]	; (6884 <prvSetupTimerInterrupt+0x3c>)
    685a:	2000      	movs	r0, #0
    685c:	4b0a      	ldr	r3, [pc, #40]	; (6888 <prvSetupTimerInterrupt+0x40>)
    685e:	4798      	blx	r3
    6860:	4b0a      	ldr	r3, [pc, #40]	; (688c <prvSetupTimerInterrupt+0x44>)
    6862:	22fa      	movs	r2, #250	; 0xfa
    6864:	0091      	lsls	r1, r2, #2
    6866:	4798      	blx	r3
    6868:	0003      	movs	r3, r0
    686a:	3b01      	subs	r3, #1
    686c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    686e:	4b03      	ldr	r3, [pc, #12]	; (687c <prvSetupTimerInterrupt+0x34>)
    6870:	2207      	movs	r2, #7
    6872:	601a      	str	r2, [r3, #0]
}
    6874:	46c0      	nop			; (mov r8, r8)
    6876:	46bd      	mov	sp, r7
    6878:	bdb0      	pop	{r4, r5, r7, pc}
    687a:	46c0      	nop			; (mov r8, r8)
    687c:	e000e010 	.word	0xe000e010
    6880:	e000e018 	.word	0xe000e018
    6884:	e000e014 	.word	0xe000e014
    6888:	000163a5 	.word	0x000163a5
    688c:	0001ef45 	.word	0x0001ef45

00006890 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    6890:	b580      	push	{r7, lr}
    6892:	b084      	sub	sp, #16
    6894:	af00      	add	r7, sp, #0
    6896:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    6898:	2300      	movs	r3, #0
    689a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    689c:	687b      	ldr	r3, [r7, #4]
    689e:	2207      	movs	r2, #7
    68a0:	4013      	ands	r3, r2
    68a2:	d004      	beq.n	68ae <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    68a4:	687b      	ldr	r3, [r7, #4]
    68a6:	2207      	movs	r2, #7
    68a8:	4393      	bics	r3, r2
    68aa:	3308      	adds	r3, #8
    68ac:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    68ae:	4b21      	ldr	r3, [pc, #132]	; (6934 <pvPortMalloc+0xa4>)
    68b0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    68b2:	4b21      	ldr	r3, [pc, #132]	; (6938 <pvPortMalloc+0xa8>)
    68b4:	681b      	ldr	r3, [r3, #0]
    68b6:	2b00      	cmp	r3, #0
    68b8:	d105      	bne.n	68c6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    68ba:	4b20      	ldr	r3, [pc, #128]	; (693c <pvPortMalloc+0xac>)
    68bc:	2207      	movs	r2, #7
    68be:	4393      	bics	r3, r2
    68c0:	001a      	movs	r2, r3
    68c2:	4b1d      	ldr	r3, [pc, #116]	; (6938 <pvPortMalloc+0xa8>)
    68c4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    68c6:	4b1e      	ldr	r3, [pc, #120]	; (6940 <pvPortMalloc+0xb0>)
    68c8:	681a      	ldr	r2, [r3, #0]
    68ca:	687b      	ldr	r3, [r7, #4]
    68cc:	18d3      	adds	r3, r2, r3
    68ce:	4a1d      	ldr	r2, [pc, #116]	; (6944 <pvPortMalloc+0xb4>)
    68d0:	4293      	cmp	r3, r2
    68d2:	d813      	bhi.n	68fc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    68d4:	4b1a      	ldr	r3, [pc, #104]	; (6940 <pvPortMalloc+0xb0>)
    68d6:	681a      	ldr	r2, [r3, #0]
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	18d2      	adds	r2, r2, r3
    68dc:	4b18      	ldr	r3, [pc, #96]	; (6940 <pvPortMalloc+0xb0>)
    68de:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    68e0:	429a      	cmp	r2, r3
    68e2:	d90b      	bls.n	68fc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    68e4:	4b14      	ldr	r3, [pc, #80]	; (6938 <pvPortMalloc+0xa8>)
    68e6:	681a      	ldr	r2, [r3, #0]
    68e8:	4b15      	ldr	r3, [pc, #84]	; (6940 <pvPortMalloc+0xb0>)
    68ea:	681b      	ldr	r3, [r3, #0]
    68ec:	18d3      	adds	r3, r2, r3
    68ee:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    68f0:	4b13      	ldr	r3, [pc, #76]	; (6940 <pvPortMalloc+0xb0>)
    68f2:	681a      	ldr	r2, [r3, #0]
    68f4:	687b      	ldr	r3, [r7, #4]
    68f6:	18d2      	adds	r2, r2, r3
    68f8:	4b11      	ldr	r3, [pc, #68]	; (6940 <pvPortMalloc+0xb0>)
    68fa:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    68fc:	68fb      	ldr	r3, [r7, #12]
    68fe:	2b00      	cmp	r3, #0
    6900:	d006      	beq.n	6910 <pvPortMalloc+0x80>
    6902:	68fb      	ldr	r3, [r7, #12]
    6904:	687a      	ldr	r2, [r7, #4]
    6906:	0019      	movs	r1, r3
    6908:	2094      	movs	r0, #148	; 0x94
    690a:	4b0f      	ldr	r3, [pc, #60]	; (6948 <pvPortMalloc+0xb8>)
    690c:	4798      	blx	r3
    690e:	e005      	b.n	691c <pvPortMalloc+0x8c>
    6910:	68fb      	ldr	r3, [r7, #12]
    6912:	687a      	ldr	r2, [r7, #4]
    6914:	0019      	movs	r1, r3
    6916:	20e8      	movs	r0, #232	; 0xe8
    6918:	4b0b      	ldr	r3, [pc, #44]	; (6948 <pvPortMalloc+0xb8>)
    691a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    691c:	4b0b      	ldr	r3, [pc, #44]	; (694c <pvPortMalloc+0xbc>)
    691e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    6920:	68fb      	ldr	r3, [r7, #12]
    6922:	2b00      	cmp	r3, #0
    6924:	d101      	bne.n	692a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    6926:	4b0a      	ldr	r3, [pc, #40]	; (6950 <pvPortMalloc+0xc0>)
    6928:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    692a:	68fb      	ldr	r3, [r7, #12]
}
    692c:	0018      	movs	r0, r3
    692e:	46bd      	mov	sp, r7
    6930:	b004      	add	sp, #16
    6932:	bd80      	pop	{r7, pc}
    6934:	00008a15 	.word	0x00008a15
    6938:	20003b64 	.word	0x20003b64
    693c:	20000c88 	.word	0x20000c88
    6940:	20003b60 	.word	0x20003b60
    6944:	00002ed7 	.word	0x00002ed7
    6948:	00005001 	.word	0x00005001
    694c:	00008a2d 	.word	0x00008a2d
    6950:	0001ef15 	.word	0x0001ef15

00006954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    6954:	b580      	push	{r7, lr}
    6956:	b082      	sub	sp, #8
    6958:	af00      	add	r7, sp, #0
    695a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    695c:	687b      	ldr	r3, [r7, #4]
    695e:	2b00      	cmp	r3, #0
    6960:	d001      	beq.n	6966 <vPortFree+0x12>
    6962:	b672      	cpsid	i
    6964:	e7fe      	b.n	6964 <vPortFree+0x10>
}
    6966:	46c0      	nop			; (mov r8, r8)
    6968:	46bd      	mov	sp, r7
    696a:	b002      	add	sp, #8
    696c:	bd80      	pop	{r7, pc}
	...

00006970 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    6970:	b580      	push	{r7, lr}
    6972:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    6974:	4b03      	ldr	r3, [pc, #12]	; (6984 <xPortGetFreeHeapSize+0x14>)
    6976:	681b      	ldr	r3, [r3, #0]
    6978:	4a03      	ldr	r2, [pc, #12]	; (6988 <xPortGetFreeHeapSize+0x18>)
    697a:	1ad3      	subs	r3, r2, r3
}
    697c:	0018      	movs	r0, r3
    697e:	46bd      	mov	sp, r7
    6980:	bd80      	pop	{r7, pc}
    6982:	46c0      	nop			; (mov r8, r8)
    6984:	20003b60 	.word	0x20003b60
    6988:	00002ed8 	.word	0x00002ed8

0000698c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    698c:	b580      	push	{r7, lr}
    698e:	b084      	sub	sp, #16
    6990:	af00      	add	r7, sp, #0
    6992:	6078      	str	r0, [r7, #4]
    6994:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6996:	687b      	ldr	r3, [r7, #4]
    6998:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    699a:	68fb      	ldr	r3, [r7, #12]
    699c:	2b00      	cmp	r3, #0
    699e:	d101      	bne.n	69a4 <xQueueGenericReset+0x18>
    69a0:	b672      	cpsid	i
    69a2:	e7fe      	b.n	69a2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    69a4:	4b23      	ldr	r3, [pc, #140]	; (6a34 <xQueueGenericReset+0xa8>)
    69a6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    69a8:	68fb      	ldr	r3, [r7, #12]
    69aa:	681a      	ldr	r2, [r3, #0]
    69ac:	68fb      	ldr	r3, [r7, #12]
    69ae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    69b0:	68fb      	ldr	r3, [r7, #12]
    69b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    69b4:	434b      	muls	r3, r1
    69b6:	18d2      	adds	r2, r2, r3
    69b8:	68fb      	ldr	r3, [r7, #12]
    69ba:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    69bc:	68fb      	ldr	r3, [r7, #12]
    69be:	2200      	movs	r2, #0
    69c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    69c2:	68fb      	ldr	r3, [r7, #12]
    69c4:	681a      	ldr	r2, [r3, #0]
    69c6:	68fb      	ldr	r3, [r7, #12]
    69c8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    69ca:	68fb      	ldr	r3, [r7, #12]
    69cc:	681a      	ldr	r2, [r3, #0]
    69ce:	68fb      	ldr	r3, [r7, #12]
    69d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    69d2:	1e59      	subs	r1, r3, #1
    69d4:	68fb      	ldr	r3, [r7, #12]
    69d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    69d8:	434b      	muls	r3, r1
    69da:	18d2      	adds	r2, r2, r3
    69dc:	68fb      	ldr	r3, [r7, #12]
    69de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    69e0:	68fb      	ldr	r3, [r7, #12]
    69e2:	2244      	movs	r2, #68	; 0x44
    69e4:	21ff      	movs	r1, #255	; 0xff
    69e6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    69e8:	68fb      	ldr	r3, [r7, #12]
    69ea:	2245      	movs	r2, #69	; 0x45
    69ec:	21ff      	movs	r1, #255	; 0xff
    69ee:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    69f0:	683b      	ldr	r3, [r7, #0]
    69f2:	2b00      	cmp	r3, #0
    69f4:	d10d      	bne.n	6a12 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    69f6:	68fb      	ldr	r3, [r7, #12]
    69f8:	691b      	ldr	r3, [r3, #16]
    69fa:	2b00      	cmp	r3, #0
    69fc:	d013      	beq.n	6a26 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    69fe:	68fb      	ldr	r3, [r7, #12]
    6a00:	3310      	adds	r3, #16
    6a02:	0018      	movs	r0, r3
    6a04:	4b0c      	ldr	r3, [pc, #48]	; (6a38 <xQueueGenericReset+0xac>)
    6a06:	4798      	blx	r3
    6a08:	1e03      	subs	r3, r0, #0
    6a0a:	d00c      	beq.n	6a26 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    6a0c:	4b0b      	ldr	r3, [pc, #44]	; (6a3c <xQueueGenericReset+0xb0>)
    6a0e:	4798      	blx	r3
    6a10:	e009      	b.n	6a26 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    6a12:	68fb      	ldr	r3, [r7, #12]
    6a14:	3310      	adds	r3, #16
    6a16:	0018      	movs	r0, r3
    6a18:	4b09      	ldr	r3, [pc, #36]	; (6a40 <xQueueGenericReset+0xb4>)
    6a1a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    6a1c:	68fb      	ldr	r3, [r7, #12]
    6a1e:	3324      	adds	r3, #36	; 0x24
    6a20:	0018      	movs	r0, r3
    6a22:	4b07      	ldr	r3, [pc, #28]	; (6a40 <xQueueGenericReset+0xb4>)
    6a24:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    6a26:	4b07      	ldr	r3, [pc, #28]	; (6a44 <xQueueGenericReset+0xb8>)
    6a28:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    6a2a:	2301      	movs	r3, #1
}
    6a2c:	0018      	movs	r0, r3
    6a2e:	46bd      	mov	sp, r7
    6a30:	b004      	add	sp, #16
    6a32:	bd80      	pop	{r7, pc}
    6a34:	00006759 	.word	0x00006759
    6a38:	00008fed 	.word	0x00008fed
    6a3c:	00006741 	.word	0x00006741
    6a40:	000064d1 	.word	0x000064d1
    6a44:	0000677d 	.word	0x0000677d

00006a48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    6a48:	b590      	push	{r4, r7, lr}
    6a4a:	b08b      	sub	sp, #44	; 0x2c
    6a4c:	af02      	add	r7, sp, #8
    6a4e:	60f8      	str	r0, [r7, #12]
    6a50:	60b9      	str	r1, [r7, #8]
    6a52:	1dfb      	adds	r3, r7, #7
    6a54:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    6a56:	68fb      	ldr	r3, [r7, #12]
    6a58:	2b00      	cmp	r3, #0
    6a5a:	d101      	bne.n	6a60 <xQueueGenericCreate+0x18>
    6a5c:	b672      	cpsid	i
    6a5e:	e7fe      	b.n	6a5e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    6a60:	68bb      	ldr	r3, [r7, #8]
    6a62:	2b00      	cmp	r3, #0
    6a64:	d102      	bne.n	6a6c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    6a66:	2300      	movs	r3, #0
    6a68:	61fb      	str	r3, [r7, #28]
    6a6a:	e003      	b.n	6a74 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6a6c:	68fb      	ldr	r3, [r7, #12]
    6a6e:	68ba      	ldr	r2, [r7, #8]
    6a70:	4353      	muls	r3, r2
    6a72:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    6a74:	69fb      	ldr	r3, [r7, #28]
    6a76:	3354      	adds	r3, #84	; 0x54
    6a78:	0018      	movs	r0, r3
    6a7a:	4b19      	ldr	r3, [pc, #100]	; (6ae0 <xQueueGenericCreate+0x98>)
    6a7c:	4798      	blx	r3
    6a7e:	0003      	movs	r3, r0
    6a80:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    6a82:	69bb      	ldr	r3, [r7, #24]
    6a84:	2b00      	cmp	r3, #0
    6a86:	d00d      	beq.n	6aa4 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    6a88:	69bb      	ldr	r3, [r7, #24]
    6a8a:	3354      	adds	r3, #84	; 0x54
    6a8c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    6a8e:	1dfb      	adds	r3, r7, #7
    6a90:	781c      	ldrb	r4, [r3, #0]
    6a92:	697a      	ldr	r2, [r7, #20]
    6a94:	68b9      	ldr	r1, [r7, #8]
    6a96:	68f8      	ldr	r0, [r7, #12]
    6a98:	69bb      	ldr	r3, [r7, #24]
    6a9a:	9300      	str	r3, [sp, #0]
    6a9c:	0023      	movs	r3, r4
    6a9e:	4c11      	ldr	r4, [pc, #68]	; (6ae4 <xQueueGenericCreate+0x9c>)
    6aa0:	47a0      	blx	r4
    6aa2:	e017      	b.n	6ad4 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
    6aa4:	4b10      	ldr	r3, [pc, #64]	; (6ae8 <xQueueGenericCreate+0xa0>)
    6aa6:	4798      	blx	r3
    6aa8:	0003      	movs	r3, r0
    6aaa:	0018      	movs	r0, r3
    6aac:	4b0f      	ldr	r3, [pc, #60]	; (6aec <xQueueGenericCreate+0xa4>)
    6aae:	4798      	blx	r3
    6ab0:	0003      	movs	r3, r0
    6ab2:	001a      	movs	r2, r3
    6ab4:	4b0e      	ldr	r3, [pc, #56]	; (6af0 <xQueueGenericCreate+0xa8>)
    6ab6:	881b      	ldrh	r3, [r3, #0]
    6ab8:	4013      	ands	r3, r2
    6aba:	b29b      	uxth	r3, r3
    6abc:	2b00      	cmp	r3, #0
    6abe:	d009      	beq.n	6ad4 <xQueueGenericCreate+0x8c>
    6ac0:	1dfb      	adds	r3, r7, #7
    6ac2:	781b      	ldrb	r3, [r3, #0]
    6ac4:	4a0b      	ldr	r2, [pc, #44]	; (6af4 <xQueueGenericCreate+0xac>)
    6ac6:	5cd3      	ldrb	r3, [r2, r3]
    6ac8:	3340      	adds	r3, #64	; 0x40
    6aca:	b2db      	uxtb	r3, r3
    6acc:	2100      	movs	r1, #0
    6ace:	0018      	movs	r0, r3
    6ad0:	4b09      	ldr	r3, [pc, #36]	; (6af8 <xQueueGenericCreate+0xb0>)
    6ad2:	4798      	blx	r3
		}

		return pxNewQueue;
    6ad4:	69bb      	ldr	r3, [r7, #24]
	}
    6ad6:	0018      	movs	r0, r3
    6ad8:	46bd      	mov	sp, r7
    6ada:	b009      	add	sp, #36	; 0x24
    6adc:	bd90      	pop	{r4, r7, pc}
    6ade:	46c0      	nop			; (mov r8, r8)
    6ae0:	00006891 	.word	0x00006891
    6ae4:	00006afd 	.word	0x00006afd
    6ae8:	000049f5 	.word	0x000049f5
    6aec:	00004759 	.word	0x00004759
    6af0:	2000010c 	.word	0x2000010c
    6af4:	20000100 	.word	0x20000100
    6af8:	00005459 	.word	0x00005459

00006afc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    6afc:	b5b0      	push	{r4, r5, r7, lr}
    6afe:	b084      	sub	sp, #16
    6b00:	af00      	add	r7, sp, #0
    6b02:	60f8      	str	r0, [r7, #12]
    6b04:	60b9      	str	r1, [r7, #8]
    6b06:	607a      	str	r2, [r7, #4]
    6b08:	001a      	movs	r2, r3
    6b0a:	1cfb      	adds	r3, r7, #3
    6b0c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    6b0e:	68bb      	ldr	r3, [r7, #8]
    6b10:	2b00      	cmp	r3, #0
    6b12:	d103      	bne.n	6b1c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    6b14:	6a3b      	ldr	r3, [r7, #32]
    6b16:	6a3a      	ldr	r2, [r7, #32]
    6b18:	601a      	str	r2, [r3, #0]
    6b1a:	e002      	b.n	6b22 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    6b1c:	6a3b      	ldr	r3, [r7, #32]
    6b1e:	687a      	ldr	r2, [r7, #4]
    6b20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    6b22:	6a3b      	ldr	r3, [r7, #32]
    6b24:	68fa      	ldr	r2, [r7, #12]
    6b26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    6b28:	6a3b      	ldr	r3, [r7, #32]
    6b2a:	68ba      	ldr	r2, [r7, #8]
    6b2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    6b2e:	6a3b      	ldr	r3, [r7, #32]
    6b30:	2101      	movs	r1, #1
    6b32:	0018      	movs	r0, r3
    6b34:	4b41      	ldr	r3, [pc, #260]	; (6c3c <prvInitialiseNewQueue+0x140>)
    6b36:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    6b38:	6a3b      	ldr	r3, [r7, #32]
    6b3a:	1cfa      	adds	r2, r7, #3
    6b3c:	2150      	movs	r1, #80	; 0x50
    6b3e:	7812      	ldrb	r2, [r2, #0]
    6b40:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    6b42:	6a3b      	ldr	r3, [r7, #32]
    6b44:	2200      	movs	r2, #0
    6b46:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
    6b48:	6a3b      	ldr	r3, [r7, #32]
    6b4a:	0018      	movs	r0, r3
    6b4c:	4b3c      	ldr	r3, [pc, #240]	; (6c40 <prvInitialiseNewQueue+0x144>)
    6b4e:	4798      	blx	r3
    6b50:	0003      	movs	r3, r0
    6b52:	001a      	movs	r2, r3
    6b54:	4b3b      	ldr	r3, [pc, #236]	; (6c44 <prvInitialiseNewQueue+0x148>)
    6b56:	5c9b      	ldrb	r3, [r3, r2]
    6b58:	0018      	movs	r0, r3
    6b5a:	4b3b      	ldr	r3, [pc, #236]	; (6c48 <prvInitialiseNewQueue+0x14c>)
    6b5c:	4798      	blx	r3
    6b5e:	0003      	movs	r3, r0
    6b60:	b29a      	uxth	r2, r3
    6b62:	6a3b      	ldr	r3, [r7, #32]
    6b64:	0011      	movs	r1, r2
    6b66:	0018      	movs	r0, r3
    6b68:	4b38      	ldr	r3, [pc, #224]	; (6c4c <prvInitialiseNewQueue+0x150>)
    6b6a:	4798      	blx	r3
    6b6c:	4b38      	ldr	r3, [pc, #224]	; (6c50 <prvInitialiseNewQueue+0x154>)
    6b6e:	881a      	ldrh	r2, [r3, #0]
    6b70:	6a3b      	ldr	r3, [r7, #32]
    6b72:	0011      	movs	r1, r2
    6b74:	0018      	movs	r0, r3
    6b76:	4b37      	ldr	r3, [pc, #220]	; (6c54 <prvInitialiseNewQueue+0x158>)
    6b78:	4798      	blx	r3
    6b7a:	6a3b      	ldr	r3, [r7, #32]
    6b7c:	0018      	movs	r0, r3
    6b7e:	4b30      	ldr	r3, [pc, #192]	; (6c40 <prvInitialiseNewQueue+0x144>)
    6b80:	4798      	blx	r3
    6b82:	0003      	movs	r3, r0
    6b84:	001a      	movs	r2, r3
    6b86:	4b2f      	ldr	r3, [pc, #188]	; (6c44 <prvInitialiseNewQueue+0x148>)
    6b88:	5c9c      	ldrb	r4, [r3, r2]
    6b8a:	6a3b      	ldr	r3, [r7, #32]
    6b8c:	0018      	movs	r0, r3
    6b8e:	4b32      	ldr	r3, [pc, #200]	; (6c58 <prvInitialiseNewQueue+0x15c>)
    6b90:	4798      	blx	r3
    6b92:	0003      	movs	r3, r0
    6b94:	b2db      	uxtb	r3, r3
    6b96:	0019      	movs	r1, r3
    6b98:	0020      	movs	r0, r4
    6b9a:	4b30      	ldr	r3, [pc, #192]	; (6c5c <prvInitialiseNewQueue+0x160>)
    6b9c:	4798      	blx	r3
    6b9e:	4b30      	ldr	r3, [pc, #192]	; (6c60 <prvInitialiseNewQueue+0x164>)
    6ba0:	4798      	blx	r3
    6ba2:	0003      	movs	r3, r0
    6ba4:	0018      	movs	r0, r3
    6ba6:	4b2f      	ldr	r3, [pc, #188]	; (6c64 <prvInitialiseNewQueue+0x168>)
    6ba8:	4798      	blx	r3
    6baa:	0003      	movs	r3, r0
    6bac:	001a      	movs	r2, r3
    6bae:	4b2e      	ldr	r3, [pc, #184]	; (6c68 <prvInitialiseNewQueue+0x16c>)
    6bb0:	881b      	ldrh	r3, [r3, #0]
    6bb2:	4013      	ands	r3, r2
    6bb4:	b29b      	uxth	r3, r3
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	d029      	beq.n	6c0e <prvInitialiseNewQueue+0x112>
    6bba:	6a3b      	ldr	r3, [r7, #32]
    6bbc:	0018      	movs	r0, r3
    6bbe:	4b2b      	ldr	r3, [pc, #172]	; (6c6c <prvInitialiseNewQueue+0x170>)
    6bc0:	4798      	blx	r3
    6bc2:	0003      	movs	r3, r0
    6bc4:	001a      	movs	r2, r3
    6bc6:	4b28      	ldr	r3, [pc, #160]	; (6c68 <prvInitialiseNewQueue+0x16c>)
    6bc8:	881b      	ldrh	r3, [r3, #0]
    6bca:	4013      	ands	r3, r2
    6bcc:	b29b      	uxth	r3, r3
    6bce:	2b00      	cmp	r3, #0
    6bd0:	d01d      	beq.n	6c0e <prvInitialiseNewQueue+0x112>
    6bd2:	6a3b      	ldr	r3, [r7, #32]
    6bd4:	0018      	movs	r0, r3
    6bd6:	4b1a      	ldr	r3, [pc, #104]	; (6c40 <prvInitialiseNewQueue+0x144>)
    6bd8:	4798      	blx	r3
    6bda:	0003      	movs	r3, r0
    6bdc:	001a      	movs	r2, r3
    6bde:	4b19      	ldr	r3, [pc, #100]	; (6c44 <prvInitialiseNewQueue+0x148>)
    6be0:	5c9b      	ldrb	r3, [r3, r2]
    6be2:	3318      	adds	r3, #24
    6be4:	b2db      	uxtb	r3, r3
    6be6:	001d      	movs	r5, r3
    6be8:	6a3b      	ldr	r3, [r7, #32]
    6bea:	0018      	movs	r0, r3
    6bec:	4b14      	ldr	r3, [pc, #80]	; (6c40 <prvInitialiseNewQueue+0x144>)
    6bee:	4798      	blx	r3
    6bf0:	0003      	movs	r3, r0
    6bf2:	001a      	movs	r2, r3
    6bf4:	4b13      	ldr	r3, [pc, #76]	; (6c44 <prvInitialiseNewQueue+0x148>)
    6bf6:	5c9c      	ldrb	r4, [r3, r2]
    6bf8:	6a3b      	ldr	r3, [r7, #32]
    6bfa:	0018      	movs	r0, r3
    6bfc:	4b16      	ldr	r3, [pc, #88]	; (6c58 <prvInitialiseNewQueue+0x15c>)
    6bfe:	4798      	blx	r3
    6c00:	0003      	movs	r3, r0
    6c02:	b2db      	uxtb	r3, r3
    6c04:	001a      	movs	r2, r3
    6c06:	0021      	movs	r1, r4
    6c08:	0028      	movs	r0, r5
    6c0a:	4b19      	ldr	r3, [pc, #100]	; (6c70 <prvInitialiseNewQueue+0x174>)
    6c0c:	4798      	blx	r3
    6c0e:	6a3b      	ldr	r3, [r7, #32]
    6c10:	0018      	movs	r0, r3
    6c12:	4b0b      	ldr	r3, [pc, #44]	; (6c40 <prvInitialiseNewQueue+0x144>)
    6c14:	4798      	blx	r3
    6c16:	0003      	movs	r3, r0
    6c18:	001a      	movs	r2, r3
    6c1a:	4b0a      	ldr	r3, [pc, #40]	; (6c44 <prvInitialiseNewQueue+0x148>)
    6c1c:	5c9c      	ldrb	r4, [r3, r2]
    6c1e:	6a3b      	ldr	r3, [r7, #32]
    6c20:	0018      	movs	r0, r3
    6c22:	4b0d      	ldr	r3, [pc, #52]	; (6c58 <prvInitialiseNewQueue+0x15c>)
    6c24:	4798      	blx	r3
    6c26:	0003      	movs	r3, r0
    6c28:	b2db      	uxtb	r3, r3
    6c2a:	2200      	movs	r2, #0
    6c2c:	0019      	movs	r1, r3
    6c2e:	0020      	movs	r0, r4
    6c30:	4b10      	ldr	r3, [pc, #64]	; (6c74 <prvInitialiseNewQueue+0x178>)
    6c32:	4798      	blx	r3
}
    6c34:	46c0      	nop			; (mov r8, r8)
    6c36:	46bd      	mov	sp, r7
    6c38:	b004      	add	sp, #16
    6c3a:	bdb0      	pop	{r4, r5, r7, pc}
    6c3c:	0000698d 	.word	0x0000698d
    6c40:	00004719 	.word	0x00004719
    6c44:	20000100 	.word	0x20000100
    6c48:	00005cd9 	.word	0x00005cd9
    6c4c:	0000483d 	.word	0x0000483d
    6c50:	2000010e 	.word	0x2000010e
    6c54:	00004879 	.word	0x00004879
    6c58:	000047f9 	.word	0x000047f9
    6c5c:	00005e71 	.word	0x00005e71
    6c60:	000049f5 	.word	0x000049f5
    6c64:	00004759 	.word	0x00004759
    6c68:	2000010c 	.word	0x2000010c
    6c6c:	00004819 	.word	0x00004819
    6c70:	00005151 	.word	0x00005151
    6c74:	000057ad 	.word	0x000057ad

00006c78 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    6c78:	b590      	push	{r4, r7, lr}
    6c7a:	b083      	sub	sp, #12
    6c7c:	af00      	add	r7, sp, #0
    6c7e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    6c80:	687b      	ldr	r3, [r7, #4]
    6c82:	2b00      	cmp	r3, #0
    6c84:	d00e      	beq.n	6ca4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    6c86:	687b      	ldr	r3, [r7, #4]
    6c88:	2200      	movs	r2, #0
    6c8a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    6c8c:	687b      	ldr	r3, [r7, #4]
    6c8e:	2200      	movs	r2, #0
    6c90:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    6c92:	687b      	ldr	r3, [r7, #4]
    6c94:	2200      	movs	r2, #0
    6c96:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    6c98:	6878      	ldr	r0, [r7, #4]
    6c9a:	2300      	movs	r3, #0
    6c9c:	2200      	movs	r2, #0
    6c9e:	2100      	movs	r1, #0
    6ca0:	4c02      	ldr	r4, [pc, #8]	; (6cac <prvInitialiseMutex+0x34>)
    6ca2:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    6ca4:	46c0      	nop			; (mov r8, r8)
    6ca6:	46bd      	mov	sp, r7
    6ca8:	b003      	add	sp, #12
    6caa:	bd90      	pop	{r4, r7, pc}
    6cac:	00006cf1 	.word	0x00006cf1

00006cb0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    6cb0:	b580      	push	{r7, lr}
    6cb2:	b086      	sub	sp, #24
    6cb4:	af00      	add	r7, sp, #0
    6cb6:	0002      	movs	r2, r0
    6cb8:	1dfb      	adds	r3, r7, #7
    6cba:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    6cbc:	2301      	movs	r3, #1
    6cbe:	617b      	str	r3, [r7, #20]
    6cc0:	2300      	movs	r3, #0
    6cc2:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    6cc4:	1dfb      	adds	r3, r7, #7
    6cc6:	781a      	ldrb	r2, [r3, #0]
    6cc8:	6939      	ldr	r1, [r7, #16]
    6cca:	697b      	ldr	r3, [r7, #20]
    6ccc:	0018      	movs	r0, r3
    6cce:	4b06      	ldr	r3, [pc, #24]	; (6ce8 <xQueueCreateMutex+0x38>)
    6cd0:	4798      	blx	r3
    6cd2:	0003      	movs	r3, r0
    6cd4:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    6cd6:	68fb      	ldr	r3, [r7, #12]
    6cd8:	0018      	movs	r0, r3
    6cda:	4b04      	ldr	r3, [pc, #16]	; (6cec <xQueueCreateMutex+0x3c>)
    6cdc:	4798      	blx	r3

		return pxNewQueue;
    6cde:	68fb      	ldr	r3, [r7, #12]
	}
    6ce0:	0018      	movs	r0, r3
    6ce2:	46bd      	mov	sp, r7
    6ce4:	b006      	add	sp, #24
    6ce6:	bd80      	pop	{r7, pc}
    6ce8:	00006a49 	.word	0x00006a49
    6cec:	00006c79 	.word	0x00006c79

00006cf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    6cf0:	b5b0      	push	{r4, r5, r7, lr}
    6cf2:	b08a      	sub	sp, #40	; 0x28
    6cf4:	af00      	add	r7, sp, #0
    6cf6:	60f8      	str	r0, [r7, #12]
    6cf8:	60b9      	str	r1, [r7, #8]
    6cfa:	607a      	str	r2, [r7, #4]
    6cfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    6cfe:	2300      	movs	r3, #0
    6d00:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6d02:	68fb      	ldr	r3, [r7, #12]
    6d04:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    6d06:	6a3b      	ldr	r3, [r7, #32]
    6d08:	2b00      	cmp	r3, #0
    6d0a:	d101      	bne.n	6d10 <xQueueGenericSend+0x20>
    6d0c:	b672      	cpsid	i
    6d0e:	e7fe      	b.n	6d0e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    6d10:	68bb      	ldr	r3, [r7, #8]
    6d12:	2b00      	cmp	r3, #0
    6d14:	d103      	bne.n	6d1e <xQueueGenericSend+0x2e>
    6d16:	6a3b      	ldr	r3, [r7, #32]
    6d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6d1a:	2b00      	cmp	r3, #0
    6d1c:	d101      	bne.n	6d22 <xQueueGenericSend+0x32>
    6d1e:	2301      	movs	r3, #1
    6d20:	e000      	b.n	6d24 <xQueueGenericSend+0x34>
    6d22:	2300      	movs	r3, #0
    6d24:	2b00      	cmp	r3, #0
    6d26:	d101      	bne.n	6d2c <xQueueGenericSend+0x3c>
    6d28:	b672      	cpsid	i
    6d2a:	e7fe      	b.n	6d2a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    6d2c:	683b      	ldr	r3, [r7, #0]
    6d2e:	2b02      	cmp	r3, #2
    6d30:	d103      	bne.n	6d3a <xQueueGenericSend+0x4a>
    6d32:	6a3b      	ldr	r3, [r7, #32]
    6d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6d36:	2b01      	cmp	r3, #1
    6d38:	d101      	bne.n	6d3e <xQueueGenericSend+0x4e>
    6d3a:	2301      	movs	r3, #1
    6d3c:	e000      	b.n	6d40 <xQueueGenericSend+0x50>
    6d3e:	2300      	movs	r3, #0
    6d40:	2b00      	cmp	r3, #0
    6d42:	d101      	bne.n	6d48 <xQueueGenericSend+0x58>
    6d44:	b672      	cpsid	i
    6d46:	e7fe      	b.n	6d46 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    6d48:	4bbc      	ldr	r3, [pc, #752]	; (703c <xQueueGenericSend+0x34c>)
    6d4a:	4798      	blx	r3
    6d4c:	1e03      	subs	r3, r0, #0
    6d4e:	d102      	bne.n	6d56 <xQueueGenericSend+0x66>
    6d50:	687b      	ldr	r3, [r7, #4]
    6d52:	2b00      	cmp	r3, #0
    6d54:	d101      	bne.n	6d5a <xQueueGenericSend+0x6a>
    6d56:	2301      	movs	r3, #1
    6d58:	e000      	b.n	6d5c <xQueueGenericSend+0x6c>
    6d5a:	2300      	movs	r3, #0
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	d101      	bne.n	6d64 <xQueueGenericSend+0x74>
    6d60:	b672      	cpsid	i
    6d62:	e7fe      	b.n	6d62 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    6d64:	4bb6      	ldr	r3, [pc, #728]	; (7040 <xQueueGenericSend+0x350>)
    6d66:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    6d68:	6a3b      	ldr	r3, [r7, #32]
    6d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6d6c:	6a3b      	ldr	r3, [r7, #32]
    6d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6d70:	429a      	cmp	r2, r3
    6d72:	d303      	bcc.n	6d7c <xQueueGenericSend+0x8c>
    6d74:	683b      	ldr	r3, [r7, #0]
    6d76:	2b02      	cmp	r3, #2
    6d78:	d000      	beq.n	6d7c <xQueueGenericSend+0x8c>
    6d7a:	e08e      	b.n	6e9a <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
    6d7c:	4bb1      	ldr	r3, [pc, #708]	; (7044 <xQueueGenericSend+0x354>)
    6d7e:	4798      	blx	r3
    6d80:	0003      	movs	r3, r0
    6d82:	0018      	movs	r0, r3
    6d84:	4bb0      	ldr	r3, [pc, #704]	; (7048 <xQueueGenericSend+0x358>)
    6d86:	4798      	blx	r3
    6d88:	0003      	movs	r3, r0
    6d8a:	001a      	movs	r2, r3
    6d8c:	4baf      	ldr	r3, [pc, #700]	; (704c <xQueueGenericSend+0x35c>)
    6d8e:	881b      	ldrh	r3, [r3, #0]
    6d90:	4013      	ands	r3, r2
    6d92:	b29b      	uxth	r3, r3
    6d94:	2b00      	cmp	r3, #0
    6d96:	d02e      	beq.n	6df6 <xQueueGenericSend+0x106>
    6d98:	6a3b      	ldr	r3, [r7, #32]
    6d9a:	0018      	movs	r0, r3
    6d9c:	4bac      	ldr	r3, [pc, #688]	; (7050 <xQueueGenericSend+0x360>)
    6d9e:	4798      	blx	r3
    6da0:	0003      	movs	r3, r0
    6da2:	001a      	movs	r2, r3
    6da4:	4ba9      	ldr	r3, [pc, #676]	; (704c <xQueueGenericSend+0x35c>)
    6da6:	881b      	ldrh	r3, [r3, #0]
    6da8:	4013      	ands	r3, r2
    6daa:	b29b      	uxth	r3, r3
    6dac:	2b00      	cmp	r3, #0
    6dae:	d022      	beq.n	6df6 <xQueueGenericSend+0x106>
    6db0:	683b      	ldr	r3, [r7, #0]
    6db2:	2b00      	cmp	r3, #0
    6db4:	d10b      	bne.n	6dce <xQueueGenericSend+0xde>
    6db6:	6a3b      	ldr	r3, [r7, #32]
    6db8:	0018      	movs	r0, r3
    6dba:	4ba6      	ldr	r3, [pc, #664]	; (7054 <xQueueGenericSend+0x364>)
    6dbc:	4798      	blx	r3
    6dbe:	0003      	movs	r3, r0
    6dc0:	001a      	movs	r2, r3
    6dc2:	4ba5      	ldr	r3, [pc, #660]	; (7058 <xQueueGenericSend+0x368>)
    6dc4:	5c9b      	ldrb	r3, [r3, r2]
    6dc6:	3320      	adds	r3, #32
    6dc8:	b2db      	uxtb	r3, r3
    6dca:	001d      	movs	r5, r3
    6dcc:	e000      	b.n	6dd0 <xQueueGenericSend+0xe0>
    6dce:	2525      	movs	r5, #37	; 0x25
    6dd0:	6a3b      	ldr	r3, [r7, #32]
    6dd2:	0018      	movs	r0, r3
    6dd4:	4b9f      	ldr	r3, [pc, #636]	; (7054 <xQueueGenericSend+0x364>)
    6dd6:	4798      	blx	r3
    6dd8:	0003      	movs	r3, r0
    6dda:	001a      	movs	r2, r3
    6ddc:	4b9e      	ldr	r3, [pc, #632]	; (7058 <xQueueGenericSend+0x368>)
    6dde:	5c9c      	ldrb	r4, [r3, r2]
    6de0:	6a3b      	ldr	r3, [r7, #32]
    6de2:	0018      	movs	r0, r3
    6de4:	4b9d      	ldr	r3, [pc, #628]	; (705c <xQueueGenericSend+0x36c>)
    6de6:	4798      	blx	r3
    6de8:	0003      	movs	r3, r0
    6dea:	b2db      	uxtb	r3, r3
    6dec:	001a      	movs	r2, r3
    6dee:	0021      	movs	r1, r4
    6df0:	0028      	movs	r0, r5
    6df2:	4b9b      	ldr	r3, [pc, #620]	; (7060 <xQueueGenericSend+0x370>)
    6df4:	4798      	blx	r3
    6df6:	6a3b      	ldr	r3, [r7, #32]
    6df8:	0018      	movs	r0, r3
    6dfa:	4b96      	ldr	r3, [pc, #600]	; (7054 <xQueueGenericSend+0x364>)
    6dfc:	4798      	blx	r3
    6dfe:	0003      	movs	r3, r0
    6e00:	001a      	movs	r2, r3
    6e02:	4b95      	ldr	r3, [pc, #596]	; (7058 <xQueueGenericSend+0x368>)
    6e04:	5c9c      	ldrb	r4, [r3, r2]
    6e06:	6a3b      	ldr	r3, [r7, #32]
    6e08:	0018      	movs	r0, r3
    6e0a:	4b94      	ldr	r3, [pc, #592]	; (705c <xQueueGenericSend+0x36c>)
    6e0c:	4798      	blx	r3
    6e0e:	0003      	movs	r3, r0
    6e10:	b2dd      	uxtb	r5, r3
    6e12:	6a3b      	ldr	r3, [r7, #32]
    6e14:	0018      	movs	r0, r3
    6e16:	4b8f      	ldr	r3, [pc, #572]	; (7054 <xQueueGenericSend+0x364>)
    6e18:	4798      	blx	r3
    6e1a:	0003      	movs	r3, r0
    6e1c:	001a      	movs	r2, r3
    6e1e:	4b8e      	ldr	r3, [pc, #568]	; (7058 <xQueueGenericSend+0x368>)
    6e20:	5c9b      	ldrb	r3, [r3, r2]
    6e22:	2b02      	cmp	r3, #2
    6e24:	d005      	beq.n	6e32 <xQueueGenericSend+0x142>
    6e26:	6a3b      	ldr	r3, [r7, #32]
    6e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6e2a:	b2db      	uxtb	r3, r3
    6e2c:	3301      	adds	r3, #1
    6e2e:	b2db      	uxtb	r3, r3
    6e30:	e000      	b.n	6e34 <xQueueGenericSend+0x144>
    6e32:	2300      	movs	r3, #0
    6e34:	001a      	movs	r2, r3
    6e36:	0029      	movs	r1, r5
    6e38:	0020      	movs	r0, r4
    6e3a:	4b8a      	ldr	r3, [pc, #552]	; (7064 <xQueueGenericSend+0x374>)
    6e3c:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    6e3e:	683a      	ldr	r2, [r7, #0]
    6e40:	68b9      	ldr	r1, [r7, #8]
    6e42:	6a3b      	ldr	r3, [r7, #32]
    6e44:	0018      	movs	r0, r3
    6e46:	4b88      	ldr	r3, [pc, #544]	; (7068 <xQueueGenericSend+0x378>)
    6e48:	4798      	blx	r3
    6e4a:	0003      	movs	r3, r0
    6e4c:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    6e4e:	6a3b      	ldr	r3, [r7, #32]
    6e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6e52:	2b00      	cmp	r3, #0
    6e54:	d00a      	beq.n	6e6c <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    6e56:	683a      	ldr	r2, [r7, #0]
    6e58:	6a3b      	ldr	r3, [r7, #32]
    6e5a:	0011      	movs	r1, r2
    6e5c:	0018      	movs	r0, r3
    6e5e:	4b83      	ldr	r3, [pc, #524]	; (706c <xQueueGenericSend+0x37c>)
    6e60:	4798      	blx	r3
    6e62:	1e03      	subs	r3, r0, #0
    6e64:	d015      	beq.n	6e92 <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    6e66:	4b82      	ldr	r3, [pc, #520]	; (7070 <xQueueGenericSend+0x380>)
    6e68:	4798      	blx	r3
    6e6a:	e012      	b.n	6e92 <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6e6c:	6a3b      	ldr	r3, [r7, #32]
    6e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6e70:	2b00      	cmp	r3, #0
    6e72:	d009      	beq.n	6e88 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6e74:	6a3b      	ldr	r3, [r7, #32]
    6e76:	3324      	adds	r3, #36	; 0x24
    6e78:	0018      	movs	r0, r3
    6e7a:	4b7e      	ldr	r3, [pc, #504]	; (7074 <xQueueGenericSend+0x384>)
    6e7c:	4798      	blx	r3
    6e7e:	1e03      	subs	r3, r0, #0
    6e80:	d007      	beq.n	6e92 <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    6e82:	4b7b      	ldr	r3, [pc, #492]	; (7070 <xQueueGenericSend+0x380>)
    6e84:	4798      	blx	r3
    6e86:	e004      	b.n	6e92 <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    6e88:	69fb      	ldr	r3, [r7, #28]
    6e8a:	2b00      	cmp	r3, #0
    6e8c:	d001      	beq.n	6e92 <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    6e8e:	4b78      	ldr	r3, [pc, #480]	; (7070 <xQueueGenericSend+0x380>)
    6e90:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    6e92:	4b79      	ldr	r3, [pc, #484]	; (7078 <xQueueGenericSend+0x388>)
    6e94:	4798      	blx	r3
				return pdPASS;
    6e96:	2301      	movs	r3, #1
    6e98:	e142      	b.n	7120 <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    6e9a:	687b      	ldr	r3, [r7, #4]
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	d140      	bne.n	6f22 <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    6ea0:	4b75      	ldr	r3, [pc, #468]	; (7078 <xQueueGenericSend+0x388>)
    6ea2:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
    6ea4:	4b67      	ldr	r3, [pc, #412]	; (7044 <xQueueGenericSend+0x354>)
    6ea6:	4798      	blx	r3
    6ea8:	0003      	movs	r3, r0
    6eaa:	0018      	movs	r0, r3
    6eac:	4b66      	ldr	r3, [pc, #408]	; (7048 <xQueueGenericSend+0x358>)
    6eae:	4798      	blx	r3
    6eb0:	0003      	movs	r3, r0
    6eb2:	001a      	movs	r2, r3
    6eb4:	4b65      	ldr	r3, [pc, #404]	; (704c <xQueueGenericSend+0x35c>)
    6eb6:	881b      	ldrh	r3, [r3, #0]
    6eb8:	4013      	ands	r3, r2
    6eba:	b29b      	uxth	r3, r3
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d02e      	beq.n	6f1e <xQueueGenericSend+0x22e>
    6ec0:	6a3b      	ldr	r3, [r7, #32]
    6ec2:	0018      	movs	r0, r3
    6ec4:	4b62      	ldr	r3, [pc, #392]	; (7050 <xQueueGenericSend+0x360>)
    6ec6:	4798      	blx	r3
    6ec8:	0003      	movs	r3, r0
    6eca:	001a      	movs	r2, r3
    6ecc:	4b5f      	ldr	r3, [pc, #380]	; (704c <xQueueGenericSend+0x35c>)
    6ece:	881b      	ldrh	r3, [r3, #0]
    6ed0:	4013      	ands	r3, r2
    6ed2:	b29b      	uxth	r3, r3
    6ed4:	2b00      	cmp	r3, #0
    6ed6:	d022      	beq.n	6f1e <xQueueGenericSend+0x22e>
    6ed8:	683b      	ldr	r3, [r7, #0]
    6eda:	2b00      	cmp	r3, #0
    6edc:	d10b      	bne.n	6ef6 <xQueueGenericSend+0x206>
    6ede:	6a3b      	ldr	r3, [r7, #32]
    6ee0:	0018      	movs	r0, r3
    6ee2:	4b5c      	ldr	r3, [pc, #368]	; (7054 <xQueueGenericSend+0x364>)
    6ee4:	4798      	blx	r3
    6ee6:	0003      	movs	r3, r0
    6ee8:	001a      	movs	r2, r3
    6eea:	4b5b      	ldr	r3, [pc, #364]	; (7058 <xQueueGenericSend+0x368>)
    6eec:	5c9b      	ldrb	r3, [r3, r2]
    6eee:	3348      	adds	r3, #72	; 0x48
    6ef0:	b2db      	uxtb	r3, r3
    6ef2:	001d      	movs	r5, r3
    6ef4:	e000      	b.n	6ef8 <xQueueGenericSend+0x208>
    6ef6:	254d      	movs	r5, #77	; 0x4d
    6ef8:	6a3b      	ldr	r3, [r7, #32]
    6efa:	0018      	movs	r0, r3
    6efc:	4b55      	ldr	r3, [pc, #340]	; (7054 <xQueueGenericSend+0x364>)
    6efe:	4798      	blx	r3
    6f00:	0003      	movs	r3, r0
    6f02:	001a      	movs	r2, r3
    6f04:	4b54      	ldr	r3, [pc, #336]	; (7058 <xQueueGenericSend+0x368>)
    6f06:	5c9c      	ldrb	r4, [r3, r2]
    6f08:	6a3b      	ldr	r3, [r7, #32]
    6f0a:	0018      	movs	r0, r3
    6f0c:	4b53      	ldr	r3, [pc, #332]	; (705c <xQueueGenericSend+0x36c>)
    6f0e:	4798      	blx	r3
    6f10:	0003      	movs	r3, r0
    6f12:	b2db      	uxtb	r3, r3
    6f14:	001a      	movs	r2, r3
    6f16:	0021      	movs	r1, r4
    6f18:	0028      	movs	r0, r5
    6f1a:	4b51      	ldr	r3, [pc, #324]	; (7060 <xQueueGenericSend+0x370>)
    6f1c:	4798      	blx	r3
					return errQUEUE_FULL;
    6f1e:	2300      	movs	r3, #0
    6f20:	e0fe      	b.n	7120 <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
    6f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f24:	2b00      	cmp	r3, #0
    6f26:	d106      	bne.n	6f36 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    6f28:	2314      	movs	r3, #20
    6f2a:	18fb      	adds	r3, r7, r3
    6f2c:	0018      	movs	r0, r3
    6f2e:	4b53      	ldr	r3, [pc, #332]	; (707c <xQueueGenericSend+0x38c>)
    6f30:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    6f32:	2301      	movs	r3, #1
    6f34:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    6f36:	4b50      	ldr	r3, [pc, #320]	; (7078 <xQueueGenericSend+0x388>)
    6f38:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6f3a:	4b51      	ldr	r3, [pc, #324]	; (7080 <xQueueGenericSend+0x390>)
    6f3c:	4798      	blx	r3
		prvLockQueue( pxQueue );
    6f3e:	4b40      	ldr	r3, [pc, #256]	; (7040 <xQueueGenericSend+0x350>)
    6f40:	4798      	blx	r3
    6f42:	6a3b      	ldr	r3, [r7, #32]
    6f44:	2244      	movs	r2, #68	; 0x44
    6f46:	5c9b      	ldrb	r3, [r3, r2]
    6f48:	b25b      	sxtb	r3, r3
    6f4a:	3301      	adds	r3, #1
    6f4c:	d103      	bne.n	6f56 <xQueueGenericSend+0x266>
    6f4e:	6a3b      	ldr	r3, [r7, #32]
    6f50:	2244      	movs	r2, #68	; 0x44
    6f52:	2100      	movs	r1, #0
    6f54:	5499      	strb	r1, [r3, r2]
    6f56:	6a3b      	ldr	r3, [r7, #32]
    6f58:	2245      	movs	r2, #69	; 0x45
    6f5a:	5c9b      	ldrb	r3, [r3, r2]
    6f5c:	b25b      	sxtb	r3, r3
    6f5e:	3301      	adds	r3, #1
    6f60:	d103      	bne.n	6f6a <xQueueGenericSend+0x27a>
    6f62:	6a3b      	ldr	r3, [r7, #32]
    6f64:	2245      	movs	r2, #69	; 0x45
    6f66:	2100      	movs	r1, #0
    6f68:	5499      	strb	r1, [r3, r2]
    6f6a:	4b43      	ldr	r3, [pc, #268]	; (7078 <xQueueGenericSend+0x388>)
    6f6c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6f6e:	1d3a      	adds	r2, r7, #4
    6f70:	2314      	movs	r3, #20
    6f72:	18fb      	adds	r3, r7, r3
    6f74:	0011      	movs	r1, r2
    6f76:	0018      	movs	r0, r3
    6f78:	4b42      	ldr	r3, [pc, #264]	; (7084 <xQueueGenericSend+0x394>)
    6f7a:	4798      	blx	r3
    6f7c:	1e03      	subs	r3, r0, #0
    6f7e:	d000      	beq.n	6f82 <xQueueGenericSend+0x292>
    6f80:	e08a      	b.n	7098 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    6f82:	6a3b      	ldr	r3, [r7, #32]
    6f84:	0018      	movs	r0, r3
    6f86:	4b40      	ldr	r3, [pc, #256]	; (7088 <xQueueGenericSend+0x398>)
    6f88:	4798      	blx	r3
    6f8a:	1e03      	subs	r3, r0, #0
    6f8c:	d04f      	beq.n	702e <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    6f8e:	4b2d      	ldr	r3, [pc, #180]	; (7044 <xQueueGenericSend+0x354>)
    6f90:	4798      	blx	r3
    6f92:	0003      	movs	r3, r0
    6f94:	0018      	movs	r0, r3
    6f96:	4b2c      	ldr	r3, [pc, #176]	; (7048 <xQueueGenericSend+0x358>)
    6f98:	4798      	blx	r3
    6f9a:	0003      	movs	r3, r0
    6f9c:	001a      	movs	r2, r3
    6f9e:	4b2b      	ldr	r3, [pc, #172]	; (704c <xQueueGenericSend+0x35c>)
    6fa0:	881b      	ldrh	r3, [r3, #0]
    6fa2:	4013      	ands	r3, r2
    6fa4:	b29b      	uxth	r3, r3
    6fa6:	2b00      	cmp	r3, #0
    6fa8:	d02e      	beq.n	7008 <xQueueGenericSend+0x318>
    6faa:	6a3b      	ldr	r3, [r7, #32]
    6fac:	0018      	movs	r0, r3
    6fae:	4b28      	ldr	r3, [pc, #160]	; (7050 <xQueueGenericSend+0x360>)
    6fb0:	4798      	blx	r3
    6fb2:	0003      	movs	r3, r0
    6fb4:	001a      	movs	r2, r3
    6fb6:	4b25      	ldr	r3, [pc, #148]	; (704c <xQueueGenericSend+0x35c>)
    6fb8:	881b      	ldrh	r3, [r3, #0]
    6fba:	4013      	ands	r3, r2
    6fbc:	b29b      	uxth	r3, r3
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d022      	beq.n	7008 <xQueueGenericSend+0x318>
    6fc2:	683b      	ldr	r3, [r7, #0]
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	d10b      	bne.n	6fe0 <xQueueGenericSend+0x2f0>
    6fc8:	6a3b      	ldr	r3, [r7, #32]
    6fca:	0018      	movs	r0, r3
    6fcc:	4b21      	ldr	r3, [pc, #132]	; (7054 <xQueueGenericSend+0x364>)
    6fce:	4798      	blx	r3
    6fd0:	0003      	movs	r3, r0
    6fd2:	001a      	movs	r2, r3
    6fd4:	4b20      	ldr	r3, [pc, #128]	; (7058 <xQueueGenericSend+0x368>)
    6fd6:	5c9b      	ldrb	r3, [r3, r2]
    6fd8:	3370      	adds	r3, #112	; 0x70
    6fda:	b2db      	uxtb	r3, r3
    6fdc:	001d      	movs	r5, r3
    6fde:	e000      	b.n	6fe2 <xQueueGenericSend+0x2f2>
    6fe0:	2575      	movs	r5, #117	; 0x75
    6fe2:	6a3b      	ldr	r3, [r7, #32]
    6fe4:	0018      	movs	r0, r3
    6fe6:	4b1b      	ldr	r3, [pc, #108]	; (7054 <xQueueGenericSend+0x364>)
    6fe8:	4798      	blx	r3
    6fea:	0003      	movs	r3, r0
    6fec:	001a      	movs	r2, r3
    6fee:	4b1a      	ldr	r3, [pc, #104]	; (7058 <xQueueGenericSend+0x368>)
    6ff0:	5c9c      	ldrb	r4, [r3, r2]
    6ff2:	6a3b      	ldr	r3, [r7, #32]
    6ff4:	0018      	movs	r0, r3
    6ff6:	4b19      	ldr	r3, [pc, #100]	; (705c <xQueueGenericSend+0x36c>)
    6ff8:	4798      	blx	r3
    6ffa:	0003      	movs	r3, r0
    6ffc:	b2db      	uxtb	r3, r3
    6ffe:	001a      	movs	r2, r3
    7000:	0021      	movs	r1, r4
    7002:	0028      	movs	r0, r5
    7004:	4b16      	ldr	r3, [pc, #88]	; (7060 <xQueueGenericSend+0x370>)
    7006:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    7008:	6a3b      	ldr	r3, [r7, #32]
    700a:	3310      	adds	r3, #16
    700c:	687a      	ldr	r2, [r7, #4]
    700e:	0011      	movs	r1, r2
    7010:	0018      	movs	r0, r3
    7012:	4b1e      	ldr	r3, [pc, #120]	; (708c <xQueueGenericSend+0x39c>)
    7014:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    7016:	6a3b      	ldr	r3, [r7, #32]
    7018:	0018      	movs	r0, r3
    701a:	4b1d      	ldr	r3, [pc, #116]	; (7090 <xQueueGenericSend+0x3a0>)
    701c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    701e:	4b1d      	ldr	r3, [pc, #116]	; (7094 <xQueueGenericSend+0x3a4>)
    7020:	4798      	blx	r3
    7022:	1e03      	subs	r3, r0, #0
    7024:	d000      	beq.n	7028 <xQueueGenericSend+0x338>
    7026:	e69d      	b.n	6d64 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    7028:	4b11      	ldr	r3, [pc, #68]	; (7070 <xQueueGenericSend+0x380>)
    702a:	4798      	blx	r3
    702c:	e69a      	b.n	6d64 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    702e:	6a3b      	ldr	r3, [r7, #32]
    7030:	0018      	movs	r0, r3
    7032:	4b17      	ldr	r3, [pc, #92]	; (7090 <xQueueGenericSend+0x3a0>)
    7034:	4798      	blx	r3
				( void ) xTaskResumeAll();
    7036:	4b17      	ldr	r3, [pc, #92]	; (7094 <xQueueGenericSend+0x3a4>)
    7038:	4798      	blx	r3
    703a:	e693      	b.n	6d64 <xQueueGenericSend+0x74>
    703c:	0000947d 	.word	0x0000947d
    7040:	00006759 	.word	0x00006759
    7044:	000049f5 	.word	0x000049f5
    7048:	00004759 	.word	0x00004759
    704c:	2000010c 	.word	0x2000010c
    7050:	00004819 	.word	0x00004819
    7054:	00004719 	.word	0x00004719
    7058:	20000100 	.word	0x20000100
    705c:	000047f9 	.word	0x000047f9
    7060:	00005151 	.word	0x00005151
    7064:	000057ad 	.word	0x000057ad
    7068:	00007f29 	.word	0x00007f29
    706c:	0000822d 	.word	0x0000822d
    7070:	00006741 	.word	0x00006741
    7074:	00008fed 	.word	0x00008fed
    7078:	0000677d 	.word	0x0000677d
    707c:	0000912d 	.word	0x0000912d
    7080:	00008a15 	.word	0x00008a15
    7084:	00009155 	.word	0x00009155
    7088:	0000817d 	.word	0x0000817d
    708c:	00008ec9 	.word	0x00008ec9
    7090:	00008059 	.word	0x00008059
    7094:	00008a2d 	.word	0x00008a2d
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    7098:	6a3b      	ldr	r3, [r7, #32]
    709a:	0018      	movs	r0, r3
    709c:	4b22      	ldr	r3, [pc, #136]	; (7128 <xQueueGenericSend+0x438>)
    709e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    70a0:	4b22      	ldr	r3, [pc, #136]	; (712c <xQueueGenericSend+0x43c>)
    70a2:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
    70a4:	4b22      	ldr	r3, [pc, #136]	; (7130 <xQueueGenericSend+0x440>)
    70a6:	4798      	blx	r3
    70a8:	0003      	movs	r3, r0
    70aa:	0018      	movs	r0, r3
    70ac:	4b21      	ldr	r3, [pc, #132]	; (7134 <xQueueGenericSend+0x444>)
    70ae:	4798      	blx	r3
    70b0:	0003      	movs	r3, r0
    70b2:	001a      	movs	r2, r3
    70b4:	4b20      	ldr	r3, [pc, #128]	; (7138 <xQueueGenericSend+0x448>)
    70b6:	881b      	ldrh	r3, [r3, #0]
    70b8:	4013      	ands	r3, r2
    70ba:	b29b      	uxth	r3, r3
    70bc:	2b00      	cmp	r3, #0
    70be:	d02e      	beq.n	711e <xQueueGenericSend+0x42e>
    70c0:	6a3b      	ldr	r3, [r7, #32]
    70c2:	0018      	movs	r0, r3
    70c4:	4b1d      	ldr	r3, [pc, #116]	; (713c <xQueueGenericSend+0x44c>)
    70c6:	4798      	blx	r3
    70c8:	0003      	movs	r3, r0
    70ca:	001a      	movs	r2, r3
    70cc:	4b1a      	ldr	r3, [pc, #104]	; (7138 <xQueueGenericSend+0x448>)
    70ce:	881b      	ldrh	r3, [r3, #0]
    70d0:	4013      	ands	r3, r2
    70d2:	b29b      	uxth	r3, r3
    70d4:	2b00      	cmp	r3, #0
    70d6:	d022      	beq.n	711e <xQueueGenericSend+0x42e>
    70d8:	683b      	ldr	r3, [r7, #0]
    70da:	2b00      	cmp	r3, #0
    70dc:	d10b      	bne.n	70f6 <xQueueGenericSend+0x406>
    70de:	6a3b      	ldr	r3, [r7, #32]
    70e0:	0018      	movs	r0, r3
    70e2:	4b17      	ldr	r3, [pc, #92]	; (7140 <xQueueGenericSend+0x450>)
    70e4:	4798      	blx	r3
    70e6:	0003      	movs	r3, r0
    70e8:	001a      	movs	r2, r3
    70ea:	4b16      	ldr	r3, [pc, #88]	; (7144 <xQueueGenericSend+0x454>)
    70ec:	5c9b      	ldrb	r3, [r3, r2]
    70ee:	3348      	adds	r3, #72	; 0x48
    70f0:	b2db      	uxtb	r3, r3
    70f2:	001d      	movs	r5, r3
    70f4:	e000      	b.n	70f8 <xQueueGenericSend+0x408>
    70f6:	254d      	movs	r5, #77	; 0x4d
    70f8:	6a3b      	ldr	r3, [r7, #32]
    70fa:	0018      	movs	r0, r3
    70fc:	4b10      	ldr	r3, [pc, #64]	; (7140 <xQueueGenericSend+0x450>)
    70fe:	4798      	blx	r3
    7100:	0003      	movs	r3, r0
    7102:	001a      	movs	r2, r3
    7104:	4b0f      	ldr	r3, [pc, #60]	; (7144 <xQueueGenericSend+0x454>)
    7106:	5c9c      	ldrb	r4, [r3, r2]
    7108:	6a3b      	ldr	r3, [r7, #32]
    710a:	0018      	movs	r0, r3
    710c:	4b0e      	ldr	r3, [pc, #56]	; (7148 <xQueueGenericSend+0x458>)
    710e:	4798      	blx	r3
    7110:	0003      	movs	r3, r0
    7112:	b2db      	uxtb	r3, r3
    7114:	001a      	movs	r2, r3
    7116:	0021      	movs	r1, r4
    7118:	0028      	movs	r0, r5
    711a:	4b0c      	ldr	r3, [pc, #48]	; (714c <xQueueGenericSend+0x45c>)
    711c:	4798      	blx	r3
			return errQUEUE_FULL;
    711e:	2300      	movs	r3, #0
		}
	}
}
    7120:	0018      	movs	r0, r3
    7122:	46bd      	mov	sp, r7
    7124:	b00a      	add	sp, #40	; 0x28
    7126:	bdb0      	pop	{r4, r5, r7, pc}
    7128:	00008059 	.word	0x00008059
    712c:	00008a2d 	.word	0x00008a2d
    7130:	000049f5 	.word	0x000049f5
    7134:	00004759 	.word	0x00004759
    7138:	2000010c 	.word	0x2000010c
    713c:	00004819 	.word	0x00004819
    7140:	00004719 	.word	0x00004719
    7144:	20000100 	.word	0x20000100
    7148:	000047f9 	.word	0x000047f9
    714c:	00005151 	.word	0x00005151

00007150 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    7150:	b5b0      	push	{r4, r5, r7, lr}
    7152:	b088      	sub	sp, #32
    7154:	af00      	add	r7, sp, #0
    7156:	60f8      	str	r0, [r7, #12]
    7158:	60b9      	str	r1, [r7, #8]
    715a:	607a      	str	r2, [r7, #4]
    715c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    715e:	68fb      	ldr	r3, [r7, #12]
    7160:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    7162:	69bb      	ldr	r3, [r7, #24]
    7164:	2b00      	cmp	r3, #0
    7166:	d101      	bne.n	716c <xQueueGenericSendFromISR+0x1c>
    7168:	b672      	cpsid	i
    716a:	e7fe      	b.n	716a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    716c:	68bb      	ldr	r3, [r7, #8]
    716e:	2b00      	cmp	r3, #0
    7170:	d103      	bne.n	717a <xQueueGenericSendFromISR+0x2a>
    7172:	69bb      	ldr	r3, [r7, #24]
    7174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7176:	2b00      	cmp	r3, #0
    7178:	d101      	bne.n	717e <xQueueGenericSendFromISR+0x2e>
    717a:	2301      	movs	r3, #1
    717c:	e000      	b.n	7180 <xQueueGenericSendFromISR+0x30>
    717e:	2300      	movs	r3, #0
    7180:	2b00      	cmp	r3, #0
    7182:	d101      	bne.n	7188 <xQueueGenericSendFromISR+0x38>
    7184:	b672      	cpsid	i
    7186:	e7fe      	b.n	7186 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    7188:	683b      	ldr	r3, [r7, #0]
    718a:	2b02      	cmp	r3, #2
    718c:	d103      	bne.n	7196 <xQueueGenericSendFromISR+0x46>
    718e:	69bb      	ldr	r3, [r7, #24]
    7190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7192:	2b01      	cmp	r3, #1
    7194:	d101      	bne.n	719a <xQueueGenericSendFromISR+0x4a>
    7196:	2301      	movs	r3, #1
    7198:	e000      	b.n	719c <xQueueGenericSendFromISR+0x4c>
    719a:	2300      	movs	r3, #0
    719c:	2b00      	cmp	r3, #0
    719e:	d101      	bne.n	71a4 <xQueueGenericSendFromISR+0x54>
    71a0:	b672      	cpsid	i
    71a2:	e7fe      	b.n	71a2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    71a4:	4b68      	ldr	r3, [pc, #416]	; (7348 <xQueueGenericSendFromISR+0x1f8>)
    71a6:	4798      	blx	r3
    71a8:	0003      	movs	r3, r0
    71aa:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    71ac:	69bb      	ldr	r3, [r7, #24]
    71ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    71b0:	69bb      	ldr	r3, [r7, #24]
    71b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    71b4:	429a      	cmp	r2, r3
    71b6:	d303      	bcc.n	71c0 <xQueueGenericSendFromISR+0x70>
    71b8:	683b      	ldr	r3, [r7, #0]
    71ba:	2b02      	cmp	r3, #2
    71bc:	d000      	beq.n	71c0 <xQueueGenericSendFromISR+0x70>
    71be:	e088      	b.n	72d2 <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    71c0:	2313      	movs	r3, #19
    71c2:	18fb      	adds	r3, r7, r3
    71c4:	69ba      	ldr	r2, [r7, #24]
    71c6:	2145      	movs	r1, #69	; 0x45
    71c8:	5c52      	ldrb	r2, [r2, r1]
    71ca:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    71cc:	69bb      	ldr	r3, [r7, #24]
    71ce:	0018      	movs	r0, r3
    71d0:	4b5e      	ldr	r3, [pc, #376]	; (734c <xQueueGenericSendFromISR+0x1fc>)
    71d2:	4798      	blx	r3
    71d4:	0003      	movs	r3, r0
    71d6:	001a      	movs	r2, r3
    71d8:	4b5d      	ldr	r3, [pc, #372]	; (7350 <xQueueGenericSendFromISR+0x200>)
    71da:	881b      	ldrh	r3, [r3, #0]
    71dc:	4013      	ands	r3, r2
    71de:	b29b      	uxth	r3, r3
    71e0:	2b00      	cmp	r3, #0
    71e2:	d022      	beq.n	722a <xQueueGenericSendFromISR+0xda>
    71e4:	683b      	ldr	r3, [r7, #0]
    71e6:	2b00      	cmp	r3, #0
    71e8:	d10b      	bne.n	7202 <xQueueGenericSendFromISR+0xb2>
    71ea:	69bb      	ldr	r3, [r7, #24]
    71ec:	0018      	movs	r0, r3
    71ee:	4b59      	ldr	r3, [pc, #356]	; (7354 <xQueueGenericSendFromISR+0x204>)
    71f0:	4798      	blx	r3
    71f2:	0003      	movs	r3, r0
    71f4:	001a      	movs	r2, r3
    71f6:	4b58      	ldr	r3, [pc, #352]	; (7358 <xQueueGenericSendFromISR+0x208>)
    71f8:	5c9b      	ldrb	r3, [r3, r2]
    71fa:	3330      	adds	r3, #48	; 0x30
    71fc:	b2db      	uxtb	r3, r3
    71fe:	001d      	movs	r5, r3
    7200:	e000      	b.n	7204 <xQueueGenericSendFromISR+0xb4>
    7202:	2535      	movs	r5, #53	; 0x35
    7204:	69bb      	ldr	r3, [r7, #24]
    7206:	0018      	movs	r0, r3
    7208:	4b52      	ldr	r3, [pc, #328]	; (7354 <xQueueGenericSendFromISR+0x204>)
    720a:	4798      	blx	r3
    720c:	0003      	movs	r3, r0
    720e:	001a      	movs	r2, r3
    7210:	4b51      	ldr	r3, [pc, #324]	; (7358 <xQueueGenericSendFromISR+0x208>)
    7212:	5c9c      	ldrb	r4, [r3, r2]
    7214:	69bb      	ldr	r3, [r7, #24]
    7216:	0018      	movs	r0, r3
    7218:	4b50      	ldr	r3, [pc, #320]	; (735c <xQueueGenericSendFromISR+0x20c>)
    721a:	4798      	blx	r3
    721c:	0003      	movs	r3, r0
    721e:	b2db      	uxtb	r3, r3
    7220:	001a      	movs	r2, r3
    7222:	0021      	movs	r1, r4
    7224:	0028      	movs	r0, r5
    7226:	4b4e      	ldr	r3, [pc, #312]	; (7360 <xQueueGenericSendFromISR+0x210>)
    7228:	4798      	blx	r3
    722a:	69bb      	ldr	r3, [r7, #24]
    722c:	0018      	movs	r0, r3
    722e:	4b49      	ldr	r3, [pc, #292]	; (7354 <xQueueGenericSendFromISR+0x204>)
    7230:	4798      	blx	r3
    7232:	0003      	movs	r3, r0
    7234:	001a      	movs	r2, r3
    7236:	4b48      	ldr	r3, [pc, #288]	; (7358 <xQueueGenericSendFromISR+0x208>)
    7238:	5c9c      	ldrb	r4, [r3, r2]
    723a:	69bb      	ldr	r3, [r7, #24]
    723c:	0018      	movs	r0, r3
    723e:	4b47      	ldr	r3, [pc, #284]	; (735c <xQueueGenericSendFromISR+0x20c>)
    7240:	4798      	blx	r3
    7242:	0003      	movs	r3, r0
    7244:	b2d9      	uxtb	r1, r3
    7246:	69bb      	ldr	r3, [r7, #24]
    7248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    724a:	b2db      	uxtb	r3, r3
    724c:	3301      	adds	r3, #1
    724e:	b2db      	uxtb	r3, r3
    7250:	001a      	movs	r2, r3
    7252:	0020      	movs	r0, r4
    7254:	4b43      	ldr	r3, [pc, #268]	; (7364 <xQueueGenericSendFromISR+0x214>)
    7256:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    7258:	683a      	ldr	r2, [r7, #0]
    725a:	68b9      	ldr	r1, [r7, #8]
    725c:	69bb      	ldr	r3, [r7, #24]
    725e:	0018      	movs	r0, r3
    7260:	4b41      	ldr	r3, [pc, #260]	; (7368 <xQueueGenericSendFromISR+0x218>)
    7262:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    7264:	2313      	movs	r3, #19
    7266:	18fb      	adds	r3, r7, r3
    7268:	781b      	ldrb	r3, [r3, #0]
    726a:	b25b      	sxtb	r3, r3
    726c:	3301      	adds	r3, #1
    726e:	d124      	bne.n	72ba <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    7270:	69bb      	ldr	r3, [r7, #24]
    7272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7274:	2b00      	cmp	r3, #0
    7276:	d00e      	beq.n	7296 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    7278:	683a      	ldr	r2, [r7, #0]
    727a:	69bb      	ldr	r3, [r7, #24]
    727c:	0011      	movs	r1, r2
    727e:	0018      	movs	r0, r3
    7280:	4b3a      	ldr	r3, [pc, #232]	; (736c <xQueueGenericSendFromISR+0x21c>)
    7282:	4798      	blx	r3
    7284:	1e03      	subs	r3, r0, #0
    7286:	d021      	beq.n	72cc <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    7288:	687b      	ldr	r3, [r7, #4]
    728a:	2b00      	cmp	r3, #0
    728c:	d01e      	beq.n	72cc <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    728e:	687b      	ldr	r3, [r7, #4]
    7290:	2201      	movs	r2, #1
    7292:	601a      	str	r2, [r3, #0]
    7294:	e01a      	b.n	72cc <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7296:	69bb      	ldr	r3, [r7, #24]
    7298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    729a:	2b00      	cmp	r3, #0
    729c:	d016      	beq.n	72cc <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    729e:	69bb      	ldr	r3, [r7, #24]
    72a0:	3324      	adds	r3, #36	; 0x24
    72a2:	0018      	movs	r0, r3
    72a4:	4b32      	ldr	r3, [pc, #200]	; (7370 <xQueueGenericSendFromISR+0x220>)
    72a6:	4798      	blx	r3
    72a8:	1e03      	subs	r3, r0, #0
    72aa:	d00f      	beq.n	72cc <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    72ac:	687b      	ldr	r3, [r7, #4]
    72ae:	2b00      	cmp	r3, #0
    72b0:	d00c      	beq.n	72cc <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    72b2:	687b      	ldr	r3, [r7, #4]
    72b4:	2201      	movs	r2, #1
    72b6:	601a      	str	r2, [r3, #0]
    72b8:	e008      	b.n	72cc <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    72ba:	2313      	movs	r3, #19
    72bc:	18fb      	adds	r3, r7, r3
    72be:	781b      	ldrb	r3, [r3, #0]
    72c0:	3301      	adds	r3, #1
    72c2:	b2db      	uxtb	r3, r3
    72c4:	b259      	sxtb	r1, r3
    72c6:	69bb      	ldr	r3, [r7, #24]
    72c8:	2245      	movs	r2, #69	; 0x45
    72ca:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    72cc:	2301      	movs	r3, #1
    72ce:	61fb      	str	r3, [r7, #28]
		{
    72d0:	e030      	b.n	7334 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    72d2:	69bb      	ldr	r3, [r7, #24]
    72d4:	0018      	movs	r0, r3
    72d6:	4b1d      	ldr	r3, [pc, #116]	; (734c <xQueueGenericSendFromISR+0x1fc>)
    72d8:	4798      	blx	r3
    72da:	0003      	movs	r3, r0
    72dc:	001a      	movs	r2, r3
    72de:	4b1c      	ldr	r3, [pc, #112]	; (7350 <xQueueGenericSendFromISR+0x200>)
    72e0:	881b      	ldrh	r3, [r3, #0]
    72e2:	4013      	ands	r3, r2
    72e4:	b29b      	uxth	r3, r3
    72e6:	2b00      	cmp	r3, #0
    72e8:	d022      	beq.n	7330 <xQueueGenericSendFromISR+0x1e0>
    72ea:	683b      	ldr	r3, [r7, #0]
    72ec:	2b00      	cmp	r3, #0
    72ee:	d10b      	bne.n	7308 <xQueueGenericSendFromISR+0x1b8>
    72f0:	69bb      	ldr	r3, [r7, #24]
    72f2:	0018      	movs	r0, r3
    72f4:	4b17      	ldr	r3, [pc, #92]	; (7354 <xQueueGenericSendFromISR+0x204>)
    72f6:	4798      	blx	r3
    72f8:	0003      	movs	r3, r0
    72fa:	001a      	movs	r2, r3
    72fc:	4b16      	ldr	r3, [pc, #88]	; (7358 <xQueueGenericSendFromISR+0x208>)
    72fe:	5c9b      	ldrb	r3, [r3, r2]
    7300:	3358      	adds	r3, #88	; 0x58
    7302:	b2db      	uxtb	r3, r3
    7304:	001d      	movs	r5, r3
    7306:	e000      	b.n	730a <xQueueGenericSendFromISR+0x1ba>
    7308:	255d      	movs	r5, #93	; 0x5d
    730a:	69bb      	ldr	r3, [r7, #24]
    730c:	0018      	movs	r0, r3
    730e:	4b11      	ldr	r3, [pc, #68]	; (7354 <xQueueGenericSendFromISR+0x204>)
    7310:	4798      	blx	r3
    7312:	0003      	movs	r3, r0
    7314:	001a      	movs	r2, r3
    7316:	4b10      	ldr	r3, [pc, #64]	; (7358 <xQueueGenericSendFromISR+0x208>)
    7318:	5c9c      	ldrb	r4, [r3, r2]
    731a:	69bb      	ldr	r3, [r7, #24]
    731c:	0018      	movs	r0, r3
    731e:	4b0f      	ldr	r3, [pc, #60]	; (735c <xQueueGenericSendFromISR+0x20c>)
    7320:	4798      	blx	r3
    7322:	0003      	movs	r3, r0
    7324:	b2db      	uxtb	r3, r3
    7326:	001a      	movs	r2, r3
    7328:	0021      	movs	r1, r4
    732a:	0028      	movs	r0, r5
    732c:	4b0c      	ldr	r3, [pc, #48]	; (7360 <xQueueGenericSendFromISR+0x210>)
    732e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    7330:	2300      	movs	r3, #0
    7332:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    7334:	697b      	ldr	r3, [r7, #20]
    7336:	0018      	movs	r0, r3
    7338:	4b0e      	ldr	r3, [pc, #56]	; (7374 <xQueueGenericSendFromISR+0x224>)
    733a:	4798      	blx	r3

	return xReturn;
    733c:	69fb      	ldr	r3, [r7, #28]
}
    733e:	0018      	movs	r0, r3
    7340:	46bd      	mov	sp, r7
    7342:	b008      	add	sp, #32
    7344:	bdb0      	pop	{r4, r5, r7, pc}
    7346:	46c0      	nop			; (mov r8, r8)
    7348:	000067ad 	.word	0x000067ad
    734c:	00004819 	.word	0x00004819
    7350:	2000010c 	.word	0x2000010c
    7354:	00004719 	.word	0x00004719
    7358:	20000100 	.word	0x20000100
    735c:	000047f9 	.word	0x000047f9
    7360:	00005151 	.word	0x00005151
    7364:	000057ad 	.word	0x000057ad
    7368:	00007f29 	.word	0x00007f29
    736c:	0000822d 	.word	0x0000822d
    7370:	00008fed 	.word	0x00008fed
    7374:	000067b9 	.word	0x000067b9

00007378 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    7378:	b580      	push	{r7, lr}
    737a:	b082      	sub	sp, #8
    737c:	af00      	add	r7, sp, #0
    737e:	6078      	str	r0, [r7, #4]
    7380:	6039      	str	r1, [r7, #0]
    7382:	6839      	ldr	r1, [r7, #0]
    7384:	687b      	ldr	r3, [r7, #4]
    7386:	2200      	movs	r2, #0
    7388:	0018      	movs	r0, r3
    738a:	4b03      	ldr	r3, [pc, #12]	; (7398 <xQueueGiveFromISR+0x20>)
    738c:	4798      	blx	r3
    738e:	0003      	movs	r3, r0
    7390:	0018      	movs	r0, r3
    7392:	46bd      	mov	sp, r7
    7394:	b002      	add	sp, #8
    7396:	bd80      	pop	{r7, pc}
    7398:	0000739d 	.word	0x0000739d

0000739c <MyWrapper>:
{
    739c:	b5b0      	push	{r4, r5, r7, lr}
    739e:	b08a      	sub	sp, #40	; 0x28
    73a0:	af00      	add	r7, sp, #0
    73a2:	60f8      	str	r0, [r7, #12]
    73a4:	60b9      	str	r1, [r7, #8]
    73a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    73a8:	68fb      	ldr	r3, [r7, #12]
    73aa:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
    73ac:	6a3b      	ldr	r3, [r7, #32]
    73ae:	2b00      	cmp	r3, #0
    73b0:	d101      	bne.n	73b6 <MyWrapper+0x1a>
    73b2:	b672      	cpsid	i
    73b4:	e7fe      	b.n	73b4 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    73b6:	6a3b      	ldr	r3, [r7, #32]
    73b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    73ba:	2b00      	cmp	r3, #0
    73bc:	d001      	beq.n	73c2 <MyWrapper+0x26>
    73be:	b672      	cpsid	i
    73c0:	e7fe      	b.n	73c0 <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    73c2:	6a3b      	ldr	r3, [r7, #32]
    73c4:	681b      	ldr	r3, [r3, #0]
    73c6:	2b00      	cmp	r3, #0
    73c8:	d103      	bne.n	73d2 <MyWrapper+0x36>
    73ca:	6a3b      	ldr	r3, [r7, #32]
    73cc:	685b      	ldr	r3, [r3, #4]
    73ce:	2b00      	cmp	r3, #0
    73d0:	d101      	bne.n	73d6 <MyWrapper+0x3a>
    73d2:	2301      	movs	r3, #1
    73d4:	e000      	b.n	73d8 <MyWrapper+0x3c>
    73d6:	2300      	movs	r3, #0
    73d8:	2b00      	cmp	r3, #0
    73da:	d101      	bne.n	73e0 <MyWrapper+0x44>
    73dc:	b672      	cpsid	i
    73de:	e7fe      	b.n	73de <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    73e0:	4b66      	ldr	r3, [pc, #408]	; (757c <MyWrapper+0x1e0>)
    73e2:	4798      	blx	r3
    73e4:	0003      	movs	r3, r0
    73e6:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    73e8:	6a3b      	ldr	r3, [r7, #32]
    73ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    73ec:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    73ee:	6a3b      	ldr	r3, [r7, #32]
    73f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    73f2:	69bb      	ldr	r3, [r7, #24]
    73f4:	429a      	cmp	r2, r3
    73f6:	d800      	bhi.n	73fa <MyWrapper+0x5e>
    73f8:	e085      	b.n	7506 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    73fa:	2317      	movs	r3, #23
    73fc:	18fb      	adds	r3, r7, r3
    73fe:	6a3a      	ldr	r2, [r7, #32]
    7400:	2145      	movs	r1, #69	; 0x45
    7402:	5c52      	ldrb	r2, [r2, r1]
    7404:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    7406:	6a3b      	ldr	r3, [r7, #32]
    7408:	0018      	movs	r0, r3
    740a:	4b5d      	ldr	r3, [pc, #372]	; (7580 <MyWrapper+0x1e4>)
    740c:	4798      	blx	r3
    740e:	0003      	movs	r3, r0
    7410:	001a      	movs	r2, r3
    7412:	4b5c      	ldr	r3, [pc, #368]	; (7584 <MyWrapper+0x1e8>)
    7414:	881b      	ldrh	r3, [r3, #0]
    7416:	4013      	ands	r3, r2
    7418:	b29b      	uxth	r3, r3
    741a:	2b00      	cmp	r3, #0
    741c:	d022      	beq.n	7464 <MyWrapper+0xc8>
    741e:	687b      	ldr	r3, [r7, #4]
    7420:	2b00      	cmp	r3, #0
    7422:	d10b      	bne.n	743c <MyWrapper+0xa0>
    7424:	6a3b      	ldr	r3, [r7, #32]
    7426:	0018      	movs	r0, r3
    7428:	4b57      	ldr	r3, [pc, #348]	; (7588 <MyWrapper+0x1ec>)
    742a:	4798      	blx	r3
    742c:	0003      	movs	r3, r0
    742e:	001a      	movs	r2, r3
    7430:	4b56      	ldr	r3, [pc, #344]	; (758c <MyWrapper+0x1f0>)
    7432:	5c9b      	ldrb	r3, [r3, r2]
    7434:	3330      	adds	r3, #48	; 0x30
    7436:	b2db      	uxtb	r3, r3
    7438:	001d      	movs	r5, r3
    743a:	e000      	b.n	743e <MyWrapper+0xa2>
    743c:	2535      	movs	r5, #53	; 0x35
    743e:	6a3b      	ldr	r3, [r7, #32]
    7440:	0018      	movs	r0, r3
    7442:	4b51      	ldr	r3, [pc, #324]	; (7588 <MyWrapper+0x1ec>)
    7444:	4798      	blx	r3
    7446:	0003      	movs	r3, r0
    7448:	001a      	movs	r2, r3
    744a:	4b50      	ldr	r3, [pc, #320]	; (758c <MyWrapper+0x1f0>)
    744c:	5c9c      	ldrb	r4, [r3, r2]
    744e:	6a3b      	ldr	r3, [r7, #32]
    7450:	0018      	movs	r0, r3
    7452:	4b4f      	ldr	r3, [pc, #316]	; (7590 <MyWrapper+0x1f4>)
    7454:	4798      	blx	r3
    7456:	0003      	movs	r3, r0
    7458:	b2db      	uxtb	r3, r3
    745a:	001a      	movs	r2, r3
    745c:	0021      	movs	r1, r4
    745e:	0028      	movs	r0, r5
    7460:	4b4c      	ldr	r3, [pc, #304]	; (7594 <MyWrapper+0x1f8>)
    7462:	4798      	blx	r3
    7464:	6a3b      	ldr	r3, [r7, #32]
    7466:	0018      	movs	r0, r3
    7468:	4b47      	ldr	r3, [pc, #284]	; (7588 <MyWrapper+0x1ec>)
    746a:	4798      	blx	r3
    746c:	0003      	movs	r3, r0
    746e:	001a      	movs	r2, r3
    7470:	4b46      	ldr	r3, [pc, #280]	; (758c <MyWrapper+0x1f0>)
    7472:	5c9c      	ldrb	r4, [r3, r2]
    7474:	6a3b      	ldr	r3, [r7, #32]
    7476:	0018      	movs	r0, r3
    7478:	4b45      	ldr	r3, [pc, #276]	; (7590 <MyWrapper+0x1f4>)
    747a:	4798      	blx	r3
    747c:	0003      	movs	r3, r0
    747e:	b2d9      	uxtb	r1, r3
    7480:	6a3b      	ldr	r3, [r7, #32]
    7482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7484:	b2db      	uxtb	r3, r3
    7486:	3301      	adds	r3, #1
    7488:	b2db      	uxtb	r3, r3
    748a:	001a      	movs	r2, r3
    748c:	0020      	movs	r0, r4
    748e:	4b42      	ldr	r3, [pc, #264]	; (7598 <MyWrapper+0x1fc>)
    7490:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    7492:	69bb      	ldr	r3, [r7, #24]
    7494:	1c5a      	adds	r2, r3, #1
    7496:	6a3b      	ldr	r3, [r7, #32]
    7498:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    749a:	2317      	movs	r3, #23
    749c:	18fb      	adds	r3, r7, r3
    749e:	781b      	ldrb	r3, [r3, #0]
    74a0:	b25b      	sxtb	r3, r3
    74a2:	3301      	adds	r3, #1
    74a4:	d123      	bne.n	74ee <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    74a6:	6a3b      	ldr	r3, [r7, #32]
    74a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    74aa:	2b00      	cmp	r3, #0
    74ac:	d00d      	beq.n	74ca <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    74ae:	6a3b      	ldr	r3, [r7, #32]
    74b0:	2100      	movs	r1, #0
    74b2:	0018      	movs	r0, r3
    74b4:	4b39      	ldr	r3, [pc, #228]	; (759c <MyWrapper+0x200>)
    74b6:	4798      	blx	r3
    74b8:	1e03      	subs	r3, r0, #0
    74ba:	d021      	beq.n	7500 <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    74bc:	68bb      	ldr	r3, [r7, #8]
    74be:	2b00      	cmp	r3, #0
    74c0:	d01e      	beq.n	7500 <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    74c2:	68bb      	ldr	r3, [r7, #8]
    74c4:	2201      	movs	r2, #1
    74c6:	601a      	str	r2, [r3, #0]
    74c8:	e01a      	b.n	7500 <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    74ca:	6a3b      	ldr	r3, [r7, #32]
    74cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    74ce:	2b00      	cmp	r3, #0
    74d0:	d016      	beq.n	7500 <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    74d2:	6a3b      	ldr	r3, [r7, #32]
    74d4:	3324      	adds	r3, #36	; 0x24
    74d6:	0018      	movs	r0, r3
    74d8:	4b31      	ldr	r3, [pc, #196]	; (75a0 <MyWrapper+0x204>)
    74da:	4798      	blx	r3
    74dc:	1e03      	subs	r3, r0, #0
    74de:	d00f      	beq.n	7500 <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    74e0:	68bb      	ldr	r3, [r7, #8]
    74e2:	2b00      	cmp	r3, #0
    74e4:	d00c      	beq.n	7500 <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    74e6:	68bb      	ldr	r3, [r7, #8]
    74e8:	2201      	movs	r2, #1
    74ea:	601a      	str	r2, [r3, #0]
    74ec:	e008      	b.n	7500 <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    74ee:	2317      	movs	r3, #23
    74f0:	18fb      	adds	r3, r7, r3
    74f2:	781b      	ldrb	r3, [r3, #0]
    74f4:	3301      	adds	r3, #1
    74f6:	b2db      	uxtb	r3, r3
    74f8:	b259      	sxtb	r1, r3
    74fa:	6a3b      	ldr	r3, [r7, #32]
    74fc:	2245      	movs	r2, #69	; 0x45
    74fe:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    7500:	2301      	movs	r3, #1
    7502:	627b      	str	r3, [r7, #36]	; 0x24
    7504:	e030      	b.n	7568 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    7506:	6a3b      	ldr	r3, [r7, #32]
    7508:	0018      	movs	r0, r3
    750a:	4b1d      	ldr	r3, [pc, #116]	; (7580 <MyWrapper+0x1e4>)
    750c:	4798      	blx	r3
    750e:	0003      	movs	r3, r0
    7510:	001a      	movs	r2, r3
    7512:	4b1c      	ldr	r3, [pc, #112]	; (7584 <MyWrapper+0x1e8>)
    7514:	881b      	ldrh	r3, [r3, #0]
    7516:	4013      	ands	r3, r2
    7518:	b29b      	uxth	r3, r3
    751a:	2b00      	cmp	r3, #0
    751c:	d022      	beq.n	7564 <MyWrapper+0x1c8>
    751e:	687b      	ldr	r3, [r7, #4]
    7520:	2b00      	cmp	r3, #0
    7522:	d10b      	bne.n	753c <MyWrapper+0x1a0>
    7524:	6a3b      	ldr	r3, [r7, #32]
    7526:	0018      	movs	r0, r3
    7528:	4b17      	ldr	r3, [pc, #92]	; (7588 <MyWrapper+0x1ec>)
    752a:	4798      	blx	r3
    752c:	0003      	movs	r3, r0
    752e:	001a      	movs	r2, r3
    7530:	4b16      	ldr	r3, [pc, #88]	; (758c <MyWrapper+0x1f0>)
    7532:	5c9b      	ldrb	r3, [r3, r2]
    7534:	3358      	adds	r3, #88	; 0x58
    7536:	b2db      	uxtb	r3, r3
    7538:	001d      	movs	r5, r3
    753a:	e000      	b.n	753e <MyWrapper+0x1a2>
    753c:	255d      	movs	r5, #93	; 0x5d
    753e:	6a3b      	ldr	r3, [r7, #32]
    7540:	0018      	movs	r0, r3
    7542:	4b11      	ldr	r3, [pc, #68]	; (7588 <MyWrapper+0x1ec>)
    7544:	4798      	blx	r3
    7546:	0003      	movs	r3, r0
    7548:	001a      	movs	r2, r3
    754a:	4b10      	ldr	r3, [pc, #64]	; (758c <MyWrapper+0x1f0>)
    754c:	5c9c      	ldrb	r4, [r3, r2]
    754e:	6a3b      	ldr	r3, [r7, #32]
    7550:	0018      	movs	r0, r3
    7552:	4b0f      	ldr	r3, [pc, #60]	; (7590 <MyWrapper+0x1f4>)
    7554:	4798      	blx	r3
    7556:	0003      	movs	r3, r0
    7558:	b2db      	uxtb	r3, r3
    755a:	001a      	movs	r2, r3
    755c:	0021      	movs	r1, r4
    755e:	0028      	movs	r0, r5
    7560:	4b0c      	ldr	r3, [pc, #48]	; (7594 <MyWrapper+0x1f8>)
    7562:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    7564:	2300      	movs	r3, #0
    7566:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    7568:	69fb      	ldr	r3, [r7, #28]
    756a:	0018      	movs	r0, r3
    756c:	4b0d      	ldr	r3, [pc, #52]	; (75a4 <MyWrapper+0x208>)
    756e:	4798      	blx	r3

	return xReturn;
    7570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7572:	0018      	movs	r0, r3
    7574:	46bd      	mov	sp, r7
    7576:	b00a      	add	sp, #40	; 0x28
    7578:	bdb0      	pop	{r4, r5, r7, pc}
    757a:	46c0      	nop			; (mov r8, r8)
    757c:	000067ad 	.word	0x000067ad
    7580:	00004819 	.word	0x00004819
    7584:	2000010c 	.word	0x2000010c
    7588:	00004719 	.word	0x00004719
    758c:	20000100 	.word	0x20000100
    7590:	000047f9 	.word	0x000047f9
    7594:	00005151 	.word	0x00005151
    7598:	000057ad 	.word	0x000057ad
    759c:	0000822d 	.word	0x0000822d
    75a0:	00008fed 	.word	0x00008fed
    75a4:	000067b9 	.word	0x000067b9

000075a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    75a8:	b5b0      	push	{r4, r5, r7, lr}
    75aa:	b08a      	sub	sp, #40	; 0x28
    75ac:	af00      	add	r7, sp, #0
    75ae:	60f8      	str	r0, [r7, #12]
    75b0:	60b9      	str	r1, [r7, #8]
    75b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    75b4:	2300      	movs	r3, #0
    75b6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    75b8:	68fb      	ldr	r3, [r7, #12]
    75ba:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    75bc:	6a3b      	ldr	r3, [r7, #32]
    75be:	2b00      	cmp	r3, #0
    75c0:	d101      	bne.n	75c6 <xQueueReceive+0x1e>
    75c2:	b672      	cpsid	i
    75c4:	e7fe      	b.n	75c4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    75c6:	68bb      	ldr	r3, [r7, #8]
    75c8:	2b00      	cmp	r3, #0
    75ca:	d103      	bne.n	75d4 <xQueueReceive+0x2c>
    75cc:	6a3b      	ldr	r3, [r7, #32]
    75ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    75d0:	2b00      	cmp	r3, #0
    75d2:	d101      	bne.n	75d8 <xQueueReceive+0x30>
    75d4:	2301      	movs	r3, #1
    75d6:	e000      	b.n	75da <xQueueReceive+0x32>
    75d8:	2300      	movs	r3, #0
    75da:	2b00      	cmp	r3, #0
    75dc:	d101      	bne.n	75e2 <xQueueReceive+0x3a>
    75de:	b672      	cpsid	i
    75e0:	e7fe      	b.n	75e0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    75e2:	4bbf      	ldr	r3, [pc, #764]	; (78e0 <xQueueReceive+0x338>)
    75e4:	4798      	blx	r3
    75e6:	1e03      	subs	r3, r0, #0
    75e8:	d102      	bne.n	75f0 <xQueueReceive+0x48>
    75ea:	687b      	ldr	r3, [r7, #4]
    75ec:	2b00      	cmp	r3, #0
    75ee:	d101      	bne.n	75f4 <xQueueReceive+0x4c>
    75f0:	2301      	movs	r3, #1
    75f2:	e000      	b.n	75f6 <xQueueReceive+0x4e>
    75f4:	2300      	movs	r3, #0
    75f6:	2b00      	cmp	r3, #0
    75f8:	d101      	bne.n	75fe <xQueueReceive+0x56>
    75fa:	b672      	cpsid	i
    75fc:	e7fe      	b.n	75fc <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    75fe:	4bb9      	ldr	r3, [pc, #740]	; (78e4 <xQueueReceive+0x33c>)
    7600:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7602:	6a3b      	ldr	r3, [r7, #32]
    7604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7606:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    7608:	69fb      	ldr	r3, [r7, #28]
    760a:	2b00      	cmp	r3, #0
    760c:	d100      	bne.n	7610 <xQueueReceive+0x68>
    760e:	e07d      	b.n	770c <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    7610:	68ba      	ldr	r2, [r7, #8]
    7612:	6a3b      	ldr	r3, [r7, #32]
    7614:	0011      	movs	r1, r2
    7616:	0018      	movs	r0, r3
    7618:	4bb3      	ldr	r3, [pc, #716]	; (78e8 <xQueueReceive+0x340>)
    761a:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    761c:	4bb3      	ldr	r3, [pc, #716]	; (78ec <xQueueReceive+0x344>)
    761e:	4798      	blx	r3
    7620:	0003      	movs	r3, r0
    7622:	0018      	movs	r0, r3
    7624:	4bb2      	ldr	r3, [pc, #712]	; (78f0 <xQueueReceive+0x348>)
    7626:	4798      	blx	r3
    7628:	0003      	movs	r3, r0
    762a:	001a      	movs	r2, r3
    762c:	4bb1      	ldr	r3, [pc, #708]	; (78f4 <xQueueReceive+0x34c>)
    762e:	881b      	ldrh	r3, [r3, #0]
    7630:	4013      	ands	r3, r2
    7632:	b29b      	uxth	r3, r3
    7634:	2b00      	cmp	r3, #0
    7636:	d029      	beq.n	768c <xQueueReceive+0xe4>
    7638:	6a3b      	ldr	r3, [r7, #32]
    763a:	0018      	movs	r0, r3
    763c:	4bae      	ldr	r3, [pc, #696]	; (78f8 <xQueueReceive+0x350>)
    763e:	4798      	blx	r3
    7640:	0003      	movs	r3, r0
    7642:	001a      	movs	r2, r3
    7644:	4bab      	ldr	r3, [pc, #684]	; (78f4 <xQueueReceive+0x34c>)
    7646:	881b      	ldrh	r3, [r3, #0]
    7648:	4013      	ands	r3, r2
    764a:	b29b      	uxth	r3, r3
    764c:	2b00      	cmp	r3, #0
    764e:	d01d      	beq.n	768c <xQueueReceive+0xe4>
    7650:	6a3b      	ldr	r3, [r7, #32]
    7652:	0018      	movs	r0, r3
    7654:	4ba9      	ldr	r3, [pc, #676]	; (78fc <xQueueReceive+0x354>)
    7656:	4798      	blx	r3
    7658:	0003      	movs	r3, r0
    765a:	001a      	movs	r2, r3
    765c:	4ba8      	ldr	r3, [pc, #672]	; (7900 <xQueueReceive+0x358>)
    765e:	5c9b      	ldrb	r3, [r3, r2]
    7660:	3328      	adds	r3, #40	; 0x28
    7662:	b2db      	uxtb	r3, r3
    7664:	001d      	movs	r5, r3
    7666:	6a3b      	ldr	r3, [r7, #32]
    7668:	0018      	movs	r0, r3
    766a:	4ba4      	ldr	r3, [pc, #656]	; (78fc <xQueueReceive+0x354>)
    766c:	4798      	blx	r3
    766e:	0003      	movs	r3, r0
    7670:	001a      	movs	r2, r3
    7672:	4ba3      	ldr	r3, [pc, #652]	; (7900 <xQueueReceive+0x358>)
    7674:	5c9c      	ldrb	r4, [r3, r2]
    7676:	6a3b      	ldr	r3, [r7, #32]
    7678:	0018      	movs	r0, r3
    767a:	4ba2      	ldr	r3, [pc, #648]	; (7904 <xQueueReceive+0x35c>)
    767c:	4798      	blx	r3
    767e:	0003      	movs	r3, r0
    7680:	b2db      	uxtb	r3, r3
    7682:	001a      	movs	r2, r3
    7684:	0021      	movs	r1, r4
    7686:	0028      	movs	r0, r5
    7688:	4b9f      	ldr	r3, [pc, #636]	; (7908 <xQueueReceive+0x360>)
    768a:	4798      	blx	r3
    768c:	6a3b      	ldr	r3, [r7, #32]
    768e:	0018      	movs	r0, r3
    7690:	4b9a      	ldr	r3, [pc, #616]	; (78fc <xQueueReceive+0x354>)
    7692:	4798      	blx	r3
    7694:	0003      	movs	r3, r0
    7696:	001a      	movs	r2, r3
    7698:	4b99      	ldr	r3, [pc, #612]	; (7900 <xQueueReceive+0x358>)
    769a:	5c9c      	ldrb	r4, [r3, r2]
    769c:	6a3b      	ldr	r3, [r7, #32]
    769e:	0018      	movs	r0, r3
    76a0:	4b98      	ldr	r3, [pc, #608]	; (7904 <xQueueReceive+0x35c>)
    76a2:	4798      	blx	r3
    76a4:	0003      	movs	r3, r0
    76a6:	b2dd      	uxtb	r5, r3
    76a8:	6a3b      	ldr	r3, [r7, #32]
    76aa:	0018      	movs	r0, r3
    76ac:	4b93      	ldr	r3, [pc, #588]	; (78fc <xQueueReceive+0x354>)
    76ae:	4798      	blx	r3
    76b0:	0003      	movs	r3, r0
    76b2:	001a      	movs	r2, r3
    76b4:	4b92      	ldr	r3, [pc, #584]	; (7900 <xQueueReceive+0x358>)
    76b6:	5c9b      	ldrb	r3, [r3, r2]
    76b8:	2b02      	cmp	r3, #2
    76ba:	d108      	bne.n	76ce <xQueueReceive+0x126>
    76bc:	4b8b      	ldr	r3, [pc, #556]	; (78ec <xQueueReceive+0x344>)
    76be:	4798      	blx	r3
    76c0:	0003      	movs	r3, r0
    76c2:	0018      	movs	r0, r3
    76c4:	4b91      	ldr	r3, [pc, #580]	; (790c <xQueueReceive+0x364>)
    76c6:	4798      	blx	r3
    76c8:	0003      	movs	r3, r0
    76ca:	b2db      	uxtb	r3, r3
    76cc:	e004      	b.n	76d8 <xQueueReceive+0x130>
    76ce:	6a3b      	ldr	r3, [r7, #32]
    76d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    76d2:	b2db      	uxtb	r3, r3
    76d4:	3b01      	subs	r3, #1
    76d6:	b2db      	uxtb	r3, r3
    76d8:	001a      	movs	r2, r3
    76da:	0029      	movs	r1, r5
    76dc:	0020      	movs	r0, r4
    76de:	4b8c      	ldr	r3, [pc, #560]	; (7910 <xQueueReceive+0x368>)
    76e0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    76e2:	69fb      	ldr	r3, [r7, #28]
    76e4:	1e5a      	subs	r2, r3, #1
    76e6:	6a3b      	ldr	r3, [r7, #32]
    76e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    76ea:	6a3b      	ldr	r3, [r7, #32]
    76ec:	691b      	ldr	r3, [r3, #16]
    76ee:	2b00      	cmp	r3, #0
    76f0:	d008      	beq.n	7704 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    76f2:	6a3b      	ldr	r3, [r7, #32]
    76f4:	3310      	adds	r3, #16
    76f6:	0018      	movs	r0, r3
    76f8:	4b86      	ldr	r3, [pc, #536]	; (7914 <xQueueReceive+0x36c>)
    76fa:	4798      	blx	r3
    76fc:	1e03      	subs	r3, r0, #0
    76fe:	d001      	beq.n	7704 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    7700:	4b85      	ldr	r3, [pc, #532]	; (7918 <xQueueReceive+0x370>)
    7702:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    7704:	4b85      	ldr	r3, [pc, #532]	; (791c <xQueueReceive+0x374>)
    7706:	4798      	blx	r3
				return pdPASS;
    7708:	2301      	movs	r3, #1
    770a:	e15f      	b.n	79cc <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    770c:	687b      	ldr	r3, [r7, #4]
    770e:	2b00      	cmp	r3, #0
    7710:	d13b      	bne.n	778a <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    7712:	4b82      	ldr	r3, [pc, #520]	; (791c <xQueueReceive+0x374>)
    7714:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    7716:	4b75      	ldr	r3, [pc, #468]	; (78ec <xQueueReceive+0x344>)
    7718:	4798      	blx	r3
    771a:	0003      	movs	r3, r0
    771c:	0018      	movs	r0, r3
    771e:	4b74      	ldr	r3, [pc, #464]	; (78f0 <xQueueReceive+0x348>)
    7720:	4798      	blx	r3
    7722:	0003      	movs	r3, r0
    7724:	001a      	movs	r2, r3
    7726:	4b73      	ldr	r3, [pc, #460]	; (78f4 <xQueueReceive+0x34c>)
    7728:	881b      	ldrh	r3, [r3, #0]
    772a:	4013      	ands	r3, r2
    772c:	b29b      	uxth	r3, r3
    772e:	2b00      	cmp	r3, #0
    7730:	d029      	beq.n	7786 <xQueueReceive+0x1de>
    7732:	6a3b      	ldr	r3, [r7, #32]
    7734:	0018      	movs	r0, r3
    7736:	4b70      	ldr	r3, [pc, #448]	; (78f8 <xQueueReceive+0x350>)
    7738:	4798      	blx	r3
    773a:	0003      	movs	r3, r0
    773c:	001a      	movs	r2, r3
    773e:	4b6d      	ldr	r3, [pc, #436]	; (78f4 <xQueueReceive+0x34c>)
    7740:	881b      	ldrh	r3, [r3, #0]
    7742:	4013      	ands	r3, r2
    7744:	b29b      	uxth	r3, r3
    7746:	2b00      	cmp	r3, #0
    7748:	d01d      	beq.n	7786 <xQueueReceive+0x1de>
    774a:	6a3b      	ldr	r3, [r7, #32]
    774c:	0018      	movs	r0, r3
    774e:	4b6b      	ldr	r3, [pc, #428]	; (78fc <xQueueReceive+0x354>)
    7750:	4798      	blx	r3
    7752:	0003      	movs	r3, r0
    7754:	001a      	movs	r2, r3
    7756:	4b6a      	ldr	r3, [pc, #424]	; (7900 <xQueueReceive+0x358>)
    7758:	5c9b      	ldrb	r3, [r3, r2]
    775a:	3350      	adds	r3, #80	; 0x50
    775c:	b2db      	uxtb	r3, r3
    775e:	001d      	movs	r5, r3
    7760:	6a3b      	ldr	r3, [r7, #32]
    7762:	0018      	movs	r0, r3
    7764:	4b65      	ldr	r3, [pc, #404]	; (78fc <xQueueReceive+0x354>)
    7766:	4798      	blx	r3
    7768:	0003      	movs	r3, r0
    776a:	001a      	movs	r2, r3
    776c:	4b64      	ldr	r3, [pc, #400]	; (7900 <xQueueReceive+0x358>)
    776e:	5c9c      	ldrb	r4, [r3, r2]
    7770:	6a3b      	ldr	r3, [r7, #32]
    7772:	0018      	movs	r0, r3
    7774:	4b63      	ldr	r3, [pc, #396]	; (7904 <xQueueReceive+0x35c>)
    7776:	4798      	blx	r3
    7778:	0003      	movs	r3, r0
    777a:	b2db      	uxtb	r3, r3
    777c:	001a      	movs	r2, r3
    777e:	0021      	movs	r1, r4
    7780:	0028      	movs	r0, r5
    7782:	4b61      	ldr	r3, [pc, #388]	; (7908 <xQueueReceive+0x360>)
    7784:	4798      	blx	r3
					return errQUEUE_EMPTY;
    7786:	2300      	movs	r3, #0
    7788:	e120      	b.n	79cc <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
    778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    778c:	2b00      	cmp	r3, #0
    778e:	d106      	bne.n	779e <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    7790:	2314      	movs	r3, #20
    7792:	18fb      	adds	r3, r7, r3
    7794:	0018      	movs	r0, r3
    7796:	4b62      	ldr	r3, [pc, #392]	; (7920 <xQueueReceive+0x378>)
    7798:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    779a:	2301      	movs	r3, #1
    779c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    779e:	4b5f      	ldr	r3, [pc, #380]	; (791c <xQueueReceive+0x374>)
    77a0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    77a2:	4b60      	ldr	r3, [pc, #384]	; (7924 <xQueueReceive+0x37c>)
    77a4:	4798      	blx	r3
		prvLockQueue( pxQueue );
    77a6:	4b4f      	ldr	r3, [pc, #316]	; (78e4 <xQueueReceive+0x33c>)
    77a8:	4798      	blx	r3
    77aa:	6a3b      	ldr	r3, [r7, #32]
    77ac:	2244      	movs	r2, #68	; 0x44
    77ae:	5c9b      	ldrb	r3, [r3, r2]
    77b0:	b25b      	sxtb	r3, r3
    77b2:	3301      	adds	r3, #1
    77b4:	d103      	bne.n	77be <xQueueReceive+0x216>
    77b6:	6a3b      	ldr	r3, [r7, #32]
    77b8:	2244      	movs	r2, #68	; 0x44
    77ba:	2100      	movs	r1, #0
    77bc:	5499      	strb	r1, [r3, r2]
    77be:	6a3b      	ldr	r3, [r7, #32]
    77c0:	2245      	movs	r2, #69	; 0x45
    77c2:	5c9b      	ldrb	r3, [r3, r2]
    77c4:	b25b      	sxtb	r3, r3
    77c6:	3301      	adds	r3, #1
    77c8:	d103      	bne.n	77d2 <xQueueReceive+0x22a>
    77ca:	6a3b      	ldr	r3, [r7, #32]
    77cc:	2245      	movs	r2, #69	; 0x45
    77ce:	2100      	movs	r1, #0
    77d0:	5499      	strb	r1, [r3, r2]
    77d2:	4b52      	ldr	r3, [pc, #328]	; (791c <xQueueReceive+0x374>)
    77d4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    77d6:	1d3a      	adds	r2, r7, #4
    77d8:	2314      	movs	r3, #20
    77da:	18fb      	adds	r3, r7, r3
    77dc:	0011      	movs	r1, r2
    77de:	0018      	movs	r0, r3
    77e0:	4b51      	ldr	r3, [pc, #324]	; (7928 <xQueueReceive+0x380>)
    77e2:	4798      	blx	r3
    77e4:	1e03      	subs	r3, r0, #0
    77e6:	d000      	beq.n	77ea <xQueueReceive+0x242>
    77e8:	e0aa      	b.n	7940 <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    77ea:	6a3b      	ldr	r3, [r7, #32]
    77ec:	0018      	movs	r0, r3
    77ee:	4b4f      	ldr	r3, [pc, #316]	; (792c <xQueueReceive+0x384>)
    77f0:	4798      	blx	r3
    77f2:	1e03      	subs	r3, r0, #0
    77f4:	d06d      	beq.n	78d2 <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    77f6:	4b3d      	ldr	r3, [pc, #244]	; (78ec <xQueueReceive+0x344>)
    77f8:	4798      	blx	r3
    77fa:	0003      	movs	r3, r0
    77fc:	0018      	movs	r0, r3
    77fe:	4b3c      	ldr	r3, [pc, #240]	; (78f0 <xQueueReceive+0x348>)
    7800:	4798      	blx	r3
    7802:	0003      	movs	r3, r0
    7804:	001a      	movs	r2, r3
    7806:	4b3b      	ldr	r3, [pc, #236]	; (78f4 <xQueueReceive+0x34c>)
    7808:	881b      	ldrh	r3, [r3, #0]
    780a:	4013      	ands	r3, r2
    780c:	b29b      	uxth	r3, r3
    780e:	2b00      	cmp	r3, #0
    7810:	d029      	beq.n	7866 <xQueueReceive+0x2be>
    7812:	6a3b      	ldr	r3, [r7, #32]
    7814:	0018      	movs	r0, r3
    7816:	4b38      	ldr	r3, [pc, #224]	; (78f8 <xQueueReceive+0x350>)
    7818:	4798      	blx	r3
    781a:	0003      	movs	r3, r0
    781c:	001a      	movs	r2, r3
    781e:	4b35      	ldr	r3, [pc, #212]	; (78f4 <xQueueReceive+0x34c>)
    7820:	881b      	ldrh	r3, [r3, #0]
    7822:	4013      	ands	r3, r2
    7824:	b29b      	uxth	r3, r3
    7826:	2b00      	cmp	r3, #0
    7828:	d01d      	beq.n	7866 <xQueueReceive+0x2be>
    782a:	6a3b      	ldr	r3, [r7, #32]
    782c:	0018      	movs	r0, r3
    782e:	4b33      	ldr	r3, [pc, #204]	; (78fc <xQueueReceive+0x354>)
    7830:	4798      	blx	r3
    7832:	0003      	movs	r3, r0
    7834:	001a      	movs	r2, r3
    7836:	4b32      	ldr	r3, [pc, #200]	; (7900 <xQueueReceive+0x358>)
    7838:	5c9b      	ldrb	r3, [r3, r2]
    783a:	3368      	adds	r3, #104	; 0x68
    783c:	b2db      	uxtb	r3, r3
    783e:	001d      	movs	r5, r3
    7840:	6a3b      	ldr	r3, [r7, #32]
    7842:	0018      	movs	r0, r3
    7844:	4b2d      	ldr	r3, [pc, #180]	; (78fc <xQueueReceive+0x354>)
    7846:	4798      	blx	r3
    7848:	0003      	movs	r3, r0
    784a:	001a      	movs	r2, r3
    784c:	4b2c      	ldr	r3, [pc, #176]	; (7900 <xQueueReceive+0x358>)
    784e:	5c9c      	ldrb	r4, [r3, r2]
    7850:	6a3b      	ldr	r3, [r7, #32]
    7852:	0018      	movs	r0, r3
    7854:	4b2b      	ldr	r3, [pc, #172]	; (7904 <xQueueReceive+0x35c>)
    7856:	4798      	blx	r3
    7858:	0003      	movs	r3, r0
    785a:	b2db      	uxtb	r3, r3
    785c:	001a      	movs	r2, r3
    785e:	0021      	movs	r1, r4
    7860:	0028      	movs	r0, r5
    7862:	4b29      	ldr	r3, [pc, #164]	; (7908 <xQueueReceive+0x360>)
    7864:	4798      	blx	r3
    7866:	6a3b      	ldr	r3, [r7, #32]
    7868:	0018      	movs	r0, r3
    786a:	4b24      	ldr	r3, [pc, #144]	; (78fc <xQueueReceive+0x354>)
    786c:	4798      	blx	r3
    786e:	0003      	movs	r3, r0
    7870:	001a      	movs	r2, r3
    7872:	4b23      	ldr	r3, [pc, #140]	; (7900 <xQueueReceive+0x358>)
    7874:	5c9b      	ldrb	r3, [r3, r2]
    7876:	2b02      	cmp	r3, #2
    7878:	d018      	beq.n	78ac <xQueueReceive+0x304>
    787a:	4b1c      	ldr	r3, [pc, #112]	; (78ec <xQueueReceive+0x344>)
    787c:	4798      	blx	r3
    787e:	0003      	movs	r3, r0
    7880:	0018      	movs	r0, r3
    7882:	4b1b      	ldr	r3, [pc, #108]	; (78f0 <xQueueReceive+0x348>)
    7884:	4798      	blx	r3
    7886:	0003      	movs	r3, r0
    7888:	001a      	movs	r2, r3
    788a:	4b1a      	ldr	r3, [pc, #104]	; (78f4 <xQueueReceive+0x34c>)
    788c:	881b      	ldrh	r3, [r3, #0]
    788e:	4013      	ands	r3, r2
    7890:	b29b      	uxth	r3, r3
    7892:	2b00      	cmp	r3, #0
    7894:	d00a      	beq.n	78ac <xQueueReceive+0x304>
    7896:	4b15      	ldr	r3, [pc, #84]	; (78ec <xQueueReceive+0x344>)
    7898:	4798      	blx	r3
    789a:	0003      	movs	r3, r0
    789c:	0018      	movs	r0, r3
    789e:	4b1b      	ldr	r3, [pc, #108]	; (790c <xQueueReceive+0x364>)
    78a0:	4798      	blx	r3
    78a2:	0003      	movs	r3, r0
    78a4:	b2db      	uxtb	r3, r3
    78a6:	0018      	movs	r0, r3
    78a8:	4b21      	ldr	r3, [pc, #132]	; (7930 <xQueueReceive+0x388>)
    78aa:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    78ac:	6a3b      	ldr	r3, [r7, #32]
    78ae:	3324      	adds	r3, #36	; 0x24
    78b0:	687a      	ldr	r2, [r7, #4]
    78b2:	0011      	movs	r1, r2
    78b4:	0018      	movs	r0, r3
    78b6:	4b1f      	ldr	r3, [pc, #124]	; (7934 <xQueueReceive+0x38c>)
    78b8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    78ba:	6a3b      	ldr	r3, [r7, #32]
    78bc:	0018      	movs	r0, r3
    78be:	4b1e      	ldr	r3, [pc, #120]	; (7938 <xQueueReceive+0x390>)
    78c0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    78c2:	4b1e      	ldr	r3, [pc, #120]	; (793c <xQueueReceive+0x394>)
    78c4:	4798      	blx	r3
    78c6:	1e03      	subs	r3, r0, #0
    78c8:	d000      	beq.n	78cc <xQueueReceive+0x324>
    78ca:	e698      	b.n	75fe <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    78cc:	4b12      	ldr	r3, [pc, #72]	; (7918 <xQueueReceive+0x370>)
    78ce:	4798      	blx	r3
    78d0:	e695      	b.n	75fe <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    78d2:	6a3b      	ldr	r3, [r7, #32]
    78d4:	0018      	movs	r0, r3
    78d6:	4b18      	ldr	r3, [pc, #96]	; (7938 <xQueueReceive+0x390>)
    78d8:	4798      	blx	r3
				( void ) xTaskResumeAll();
    78da:	4b18      	ldr	r3, [pc, #96]	; (793c <xQueueReceive+0x394>)
    78dc:	4798      	blx	r3
    78de:	e68e      	b.n	75fe <xQueueReceive+0x56>
    78e0:	0000947d 	.word	0x0000947d
    78e4:	00006759 	.word	0x00006759
    78e8:	00008009 	.word	0x00008009
    78ec:	000049f5 	.word	0x000049f5
    78f0:	00004759 	.word	0x00004759
    78f4:	2000010c 	.word	0x2000010c
    78f8:	00004819 	.word	0x00004819
    78fc:	00004719 	.word	0x00004719
    7900:	20000100 	.word	0x20000100
    7904:	000047f9 	.word	0x000047f9
    7908:	00005151 	.word	0x00005151
    790c:	00004739 	.word	0x00004739
    7910:	000057ad 	.word	0x000057ad
    7914:	00008fed 	.word	0x00008fed
    7918:	00006741 	.word	0x00006741
    791c:	0000677d 	.word	0x0000677d
    7920:	0000912d 	.word	0x0000912d
    7924:	00008a15 	.word	0x00008a15
    7928:	00009155 	.word	0x00009155
    792c:	00008149 	.word	0x00008149
    7930:	000058e9 	.word	0x000058e9
    7934:	00008ec9 	.word	0x00008ec9
    7938:	00008059 	.word	0x00008059
    793c:	00008a2d 	.word	0x00008a2d
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    7940:	6a3b      	ldr	r3, [r7, #32]
    7942:	0018      	movs	r0, r3
    7944:	4b23      	ldr	r3, [pc, #140]	; (79d4 <xQueueReceive+0x42c>)
    7946:	4798      	blx	r3
			( void ) xTaskResumeAll();
    7948:	4b23      	ldr	r3, [pc, #140]	; (79d8 <xQueueReceive+0x430>)
    794a:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    794c:	6a3b      	ldr	r3, [r7, #32]
    794e:	0018      	movs	r0, r3
    7950:	4b22      	ldr	r3, [pc, #136]	; (79dc <xQueueReceive+0x434>)
    7952:	4798      	blx	r3
    7954:	1e03      	subs	r3, r0, #0
    7956:	d100      	bne.n	795a <xQueueReceive+0x3b2>
    7958:	e651      	b.n	75fe <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    795a:	4b21      	ldr	r3, [pc, #132]	; (79e0 <xQueueReceive+0x438>)
    795c:	4798      	blx	r3
    795e:	0003      	movs	r3, r0
    7960:	0018      	movs	r0, r3
    7962:	4b20      	ldr	r3, [pc, #128]	; (79e4 <xQueueReceive+0x43c>)
    7964:	4798      	blx	r3
    7966:	0003      	movs	r3, r0
    7968:	001a      	movs	r2, r3
    796a:	4b1f      	ldr	r3, [pc, #124]	; (79e8 <xQueueReceive+0x440>)
    796c:	881b      	ldrh	r3, [r3, #0]
    796e:	4013      	ands	r3, r2
    7970:	b29b      	uxth	r3, r3
    7972:	2b00      	cmp	r3, #0
    7974:	d029      	beq.n	79ca <xQueueReceive+0x422>
    7976:	6a3b      	ldr	r3, [r7, #32]
    7978:	0018      	movs	r0, r3
    797a:	4b1c      	ldr	r3, [pc, #112]	; (79ec <xQueueReceive+0x444>)
    797c:	4798      	blx	r3
    797e:	0003      	movs	r3, r0
    7980:	001a      	movs	r2, r3
    7982:	4b19      	ldr	r3, [pc, #100]	; (79e8 <xQueueReceive+0x440>)
    7984:	881b      	ldrh	r3, [r3, #0]
    7986:	4013      	ands	r3, r2
    7988:	b29b      	uxth	r3, r3
    798a:	2b00      	cmp	r3, #0
    798c:	d01d      	beq.n	79ca <xQueueReceive+0x422>
    798e:	6a3b      	ldr	r3, [r7, #32]
    7990:	0018      	movs	r0, r3
    7992:	4b17      	ldr	r3, [pc, #92]	; (79f0 <xQueueReceive+0x448>)
    7994:	4798      	blx	r3
    7996:	0003      	movs	r3, r0
    7998:	001a      	movs	r2, r3
    799a:	4b16      	ldr	r3, [pc, #88]	; (79f4 <xQueueReceive+0x44c>)
    799c:	5c9b      	ldrb	r3, [r3, r2]
    799e:	3350      	adds	r3, #80	; 0x50
    79a0:	b2db      	uxtb	r3, r3
    79a2:	001d      	movs	r5, r3
    79a4:	6a3b      	ldr	r3, [r7, #32]
    79a6:	0018      	movs	r0, r3
    79a8:	4b11      	ldr	r3, [pc, #68]	; (79f0 <xQueueReceive+0x448>)
    79aa:	4798      	blx	r3
    79ac:	0003      	movs	r3, r0
    79ae:	001a      	movs	r2, r3
    79b0:	4b10      	ldr	r3, [pc, #64]	; (79f4 <xQueueReceive+0x44c>)
    79b2:	5c9c      	ldrb	r4, [r3, r2]
    79b4:	6a3b      	ldr	r3, [r7, #32]
    79b6:	0018      	movs	r0, r3
    79b8:	4b0f      	ldr	r3, [pc, #60]	; (79f8 <xQueueReceive+0x450>)
    79ba:	4798      	blx	r3
    79bc:	0003      	movs	r3, r0
    79be:	b2db      	uxtb	r3, r3
    79c0:	001a      	movs	r2, r3
    79c2:	0021      	movs	r1, r4
    79c4:	0028      	movs	r0, r5
    79c6:	4b0d      	ldr	r3, [pc, #52]	; (79fc <xQueueReceive+0x454>)
    79c8:	4798      	blx	r3
				return errQUEUE_EMPTY;
    79ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    79cc:	0018      	movs	r0, r3
    79ce:	46bd      	mov	sp, r7
    79d0:	b00a      	add	sp, #40	; 0x28
    79d2:	bdb0      	pop	{r4, r5, r7, pc}
    79d4:	00008059 	.word	0x00008059
    79d8:	00008a2d 	.word	0x00008a2d
    79dc:	00008149 	.word	0x00008149
    79e0:	000049f5 	.word	0x000049f5
    79e4:	00004759 	.word	0x00004759
    79e8:	2000010c 	.word	0x2000010c
    79ec:	00004819 	.word	0x00004819
    79f0:	00004719 	.word	0x00004719
    79f4:	20000100 	.word	0x20000100
    79f8:	000047f9 	.word	0x000047f9
    79fc:	00005151 	.word	0x00005151

00007a00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    7a00:	b5b0      	push	{r4, r5, r7, lr}
    7a02:	b08a      	sub	sp, #40	; 0x28
    7a04:	af00      	add	r7, sp, #0
    7a06:	6078      	str	r0, [r7, #4]
    7a08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    7a0a:	2300      	movs	r3, #0
    7a0c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7a0e:	687b      	ldr	r3, [r7, #4]
    7a10:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    7a12:	2300      	movs	r3, #0
    7a14:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    7a16:	69fb      	ldr	r3, [r7, #28]
    7a18:	2b00      	cmp	r3, #0
    7a1a:	d101      	bne.n	7a20 <xQueueSemaphoreTake+0x20>
    7a1c:	b672      	cpsid	i
    7a1e:	e7fe      	b.n	7a1e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    7a20:	69fb      	ldr	r3, [r7, #28]
    7a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7a24:	2b00      	cmp	r3, #0
    7a26:	d001      	beq.n	7a2c <xQueueSemaphoreTake+0x2c>
    7a28:	b672      	cpsid	i
    7a2a:	e7fe      	b.n	7a2a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    7a2c:	4bcb      	ldr	r3, [pc, #812]	; (7d5c <xQueueSemaphoreTake+0x35c>)
    7a2e:	4798      	blx	r3
    7a30:	1e03      	subs	r3, r0, #0
    7a32:	d102      	bne.n	7a3a <xQueueSemaphoreTake+0x3a>
    7a34:	683b      	ldr	r3, [r7, #0]
    7a36:	2b00      	cmp	r3, #0
    7a38:	d101      	bne.n	7a3e <xQueueSemaphoreTake+0x3e>
    7a3a:	2301      	movs	r3, #1
    7a3c:	e000      	b.n	7a40 <xQueueSemaphoreTake+0x40>
    7a3e:	2300      	movs	r3, #0
    7a40:	2b00      	cmp	r3, #0
    7a42:	d101      	bne.n	7a48 <xQueueSemaphoreTake+0x48>
    7a44:	b672      	cpsid	i
    7a46:	e7fe      	b.n	7a46 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    7a48:	4bc5      	ldr	r3, [pc, #788]	; (7d60 <xQueueSemaphoreTake+0x360>)
    7a4a:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    7a4c:	69fb      	ldr	r3, [r7, #28]
    7a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7a50:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    7a52:	69bb      	ldr	r3, [r7, #24]
    7a54:	2b00      	cmp	r3, #0
    7a56:	d100      	bne.n	7a5a <xQueueSemaphoreTake+0x5a>
    7a58:	e080      	b.n	7b5c <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
    7a5a:	4bc2      	ldr	r3, [pc, #776]	; (7d64 <xQueueSemaphoreTake+0x364>)
    7a5c:	4798      	blx	r3
    7a5e:	0003      	movs	r3, r0
    7a60:	0018      	movs	r0, r3
    7a62:	4bc1      	ldr	r3, [pc, #772]	; (7d68 <xQueueSemaphoreTake+0x368>)
    7a64:	4798      	blx	r3
    7a66:	0003      	movs	r3, r0
    7a68:	001a      	movs	r2, r3
    7a6a:	4bc0      	ldr	r3, [pc, #768]	; (7d6c <xQueueSemaphoreTake+0x36c>)
    7a6c:	881b      	ldrh	r3, [r3, #0]
    7a6e:	4013      	ands	r3, r2
    7a70:	b29b      	uxth	r3, r3
    7a72:	2b00      	cmp	r3, #0
    7a74:	d029      	beq.n	7aca <xQueueSemaphoreTake+0xca>
    7a76:	69fb      	ldr	r3, [r7, #28]
    7a78:	0018      	movs	r0, r3
    7a7a:	4bbd      	ldr	r3, [pc, #756]	; (7d70 <xQueueSemaphoreTake+0x370>)
    7a7c:	4798      	blx	r3
    7a7e:	0003      	movs	r3, r0
    7a80:	001a      	movs	r2, r3
    7a82:	4bba      	ldr	r3, [pc, #744]	; (7d6c <xQueueSemaphoreTake+0x36c>)
    7a84:	881b      	ldrh	r3, [r3, #0]
    7a86:	4013      	ands	r3, r2
    7a88:	b29b      	uxth	r3, r3
    7a8a:	2b00      	cmp	r3, #0
    7a8c:	d01d      	beq.n	7aca <xQueueSemaphoreTake+0xca>
    7a8e:	69fb      	ldr	r3, [r7, #28]
    7a90:	0018      	movs	r0, r3
    7a92:	4bb8      	ldr	r3, [pc, #736]	; (7d74 <xQueueSemaphoreTake+0x374>)
    7a94:	4798      	blx	r3
    7a96:	0003      	movs	r3, r0
    7a98:	001a      	movs	r2, r3
    7a9a:	4bb7      	ldr	r3, [pc, #732]	; (7d78 <xQueueSemaphoreTake+0x378>)
    7a9c:	5c9b      	ldrb	r3, [r3, r2]
    7a9e:	3328      	adds	r3, #40	; 0x28
    7aa0:	b2db      	uxtb	r3, r3
    7aa2:	001d      	movs	r5, r3
    7aa4:	69fb      	ldr	r3, [r7, #28]
    7aa6:	0018      	movs	r0, r3
    7aa8:	4bb2      	ldr	r3, [pc, #712]	; (7d74 <xQueueSemaphoreTake+0x374>)
    7aaa:	4798      	blx	r3
    7aac:	0003      	movs	r3, r0
    7aae:	001a      	movs	r2, r3
    7ab0:	4bb1      	ldr	r3, [pc, #708]	; (7d78 <xQueueSemaphoreTake+0x378>)
    7ab2:	5c9c      	ldrb	r4, [r3, r2]
    7ab4:	69fb      	ldr	r3, [r7, #28]
    7ab6:	0018      	movs	r0, r3
    7ab8:	4bb0      	ldr	r3, [pc, #704]	; (7d7c <xQueueSemaphoreTake+0x37c>)
    7aba:	4798      	blx	r3
    7abc:	0003      	movs	r3, r0
    7abe:	b2db      	uxtb	r3, r3
    7ac0:	001a      	movs	r2, r3
    7ac2:	0021      	movs	r1, r4
    7ac4:	0028      	movs	r0, r5
    7ac6:	4bae      	ldr	r3, [pc, #696]	; (7d80 <xQueueSemaphoreTake+0x380>)
    7ac8:	4798      	blx	r3
    7aca:	69fb      	ldr	r3, [r7, #28]
    7acc:	0018      	movs	r0, r3
    7ace:	4ba9      	ldr	r3, [pc, #676]	; (7d74 <xQueueSemaphoreTake+0x374>)
    7ad0:	4798      	blx	r3
    7ad2:	0003      	movs	r3, r0
    7ad4:	001a      	movs	r2, r3
    7ad6:	4ba8      	ldr	r3, [pc, #672]	; (7d78 <xQueueSemaphoreTake+0x378>)
    7ad8:	5c9c      	ldrb	r4, [r3, r2]
    7ada:	69fb      	ldr	r3, [r7, #28]
    7adc:	0018      	movs	r0, r3
    7ade:	4ba7      	ldr	r3, [pc, #668]	; (7d7c <xQueueSemaphoreTake+0x37c>)
    7ae0:	4798      	blx	r3
    7ae2:	0003      	movs	r3, r0
    7ae4:	b2dd      	uxtb	r5, r3
    7ae6:	69fb      	ldr	r3, [r7, #28]
    7ae8:	0018      	movs	r0, r3
    7aea:	4ba2      	ldr	r3, [pc, #648]	; (7d74 <xQueueSemaphoreTake+0x374>)
    7aec:	4798      	blx	r3
    7aee:	0003      	movs	r3, r0
    7af0:	001a      	movs	r2, r3
    7af2:	4ba1      	ldr	r3, [pc, #644]	; (7d78 <xQueueSemaphoreTake+0x378>)
    7af4:	5c9b      	ldrb	r3, [r3, r2]
    7af6:	2b02      	cmp	r3, #2
    7af8:	d108      	bne.n	7b0c <xQueueSemaphoreTake+0x10c>
    7afa:	4b9a      	ldr	r3, [pc, #616]	; (7d64 <xQueueSemaphoreTake+0x364>)
    7afc:	4798      	blx	r3
    7afe:	0003      	movs	r3, r0
    7b00:	0018      	movs	r0, r3
    7b02:	4ba0      	ldr	r3, [pc, #640]	; (7d84 <xQueueSemaphoreTake+0x384>)
    7b04:	4798      	blx	r3
    7b06:	0003      	movs	r3, r0
    7b08:	b2db      	uxtb	r3, r3
    7b0a:	e004      	b.n	7b16 <xQueueSemaphoreTake+0x116>
    7b0c:	69fb      	ldr	r3, [r7, #28]
    7b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7b10:	b2db      	uxtb	r3, r3
    7b12:	3b01      	subs	r3, #1
    7b14:	b2db      	uxtb	r3, r3
    7b16:	001a      	movs	r2, r3
    7b18:	0029      	movs	r1, r5
    7b1a:	0020      	movs	r0, r4
    7b1c:	4b9a      	ldr	r3, [pc, #616]	; (7d88 <xQueueSemaphoreTake+0x388>)
    7b1e:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    7b20:	69bb      	ldr	r3, [r7, #24]
    7b22:	1e5a      	subs	r2, r3, #1
    7b24:	69fb      	ldr	r3, [r7, #28]
    7b26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    7b28:	69fb      	ldr	r3, [r7, #28]
    7b2a:	681b      	ldr	r3, [r3, #0]
    7b2c:	2b00      	cmp	r3, #0
    7b2e:	d104      	bne.n	7b3a <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    7b30:	4b96      	ldr	r3, [pc, #600]	; (7d8c <xQueueSemaphoreTake+0x38c>)
    7b32:	4798      	blx	r3
    7b34:	0002      	movs	r2, r0
    7b36:	69fb      	ldr	r3, [r7, #28]
    7b38:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7b3a:	69fb      	ldr	r3, [r7, #28]
    7b3c:	691b      	ldr	r3, [r3, #16]
    7b3e:	2b00      	cmp	r3, #0
    7b40:	d008      	beq.n	7b54 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    7b42:	69fb      	ldr	r3, [r7, #28]
    7b44:	3310      	adds	r3, #16
    7b46:	0018      	movs	r0, r3
    7b48:	4b91      	ldr	r3, [pc, #580]	; (7d90 <xQueueSemaphoreTake+0x390>)
    7b4a:	4798      	blx	r3
    7b4c:	1e03      	subs	r3, r0, #0
    7b4e:	d001      	beq.n	7b54 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
    7b50:	4b90      	ldr	r3, [pc, #576]	; (7d94 <xQueueSemaphoreTake+0x394>)
    7b52:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    7b54:	4b90      	ldr	r3, [pc, #576]	; (7d98 <xQueueSemaphoreTake+0x398>)
    7b56:	4798      	blx	r3
				return pdPASS;
    7b58:	2301      	movs	r3, #1
    7b5a:	e18b      	b.n	7e74 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    7b5c:	683b      	ldr	r3, [r7, #0]
    7b5e:	2b00      	cmp	r3, #0
    7b60:	d140      	bne.n	7be4 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    7b62:	6a3b      	ldr	r3, [r7, #32]
    7b64:	2b00      	cmp	r3, #0
    7b66:	d001      	beq.n	7b6c <xQueueSemaphoreTake+0x16c>
    7b68:	b672      	cpsid	i
    7b6a:	e7fe      	b.n	7b6a <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    7b6c:	4b8a      	ldr	r3, [pc, #552]	; (7d98 <xQueueSemaphoreTake+0x398>)
    7b6e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    7b70:	4b7c      	ldr	r3, [pc, #496]	; (7d64 <xQueueSemaphoreTake+0x364>)
    7b72:	4798      	blx	r3
    7b74:	0003      	movs	r3, r0
    7b76:	0018      	movs	r0, r3
    7b78:	4b7b      	ldr	r3, [pc, #492]	; (7d68 <xQueueSemaphoreTake+0x368>)
    7b7a:	4798      	blx	r3
    7b7c:	0003      	movs	r3, r0
    7b7e:	001a      	movs	r2, r3
    7b80:	4b7a      	ldr	r3, [pc, #488]	; (7d6c <xQueueSemaphoreTake+0x36c>)
    7b82:	881b      	ldrh	r3, [r3, #0]
    7b84:	4013      	ands	r3, r2
    7b86:	b29b      	uxth	r3, r3
    7b88:	2b00      	cmp	r3, #0
    7b8a:	d029      	beq.n	7be0 <xQueueSemaphoreTake+0x1e0>
    7b8c:	69fb      	ldr	r3, [r7, #28]
    7b8e:	0018      	movs	r0, r3
    7b90:	4b77      	ldr	r3, [pc, #476]	; (7d70 <xQueueSemaphoreTake+0x370>)
    7b92:	4798      	blx	r3
    7b94:	0003      	movs	r3, r0
    7b96:	001a      	movs	r2, r3
    7b98:	4b74      	ldr	r3, [pc, #464]	; (7d6c <xQueueSemaphoreTake+0x36c>)
    7b9a:	881b      	ldrh	r3, [r3, #0]
    7b9c:	4013      	ands	r3, r2
    7b9e:	b29b      	uxth	r3, r3
    7ba0:	2b00      	cmp	r3, #0
    7ba2:	d01d      	beq.n	7be0 <xQueueSemaphoreTake+0x1e0>
    7ba4:	69fb      	ldr	r3, [r7, #28]
    7ba6:	0018      	movs	r0, r3
    7ba8:	4b72      	ldr	r3, [pc, #456]	; (7d74 <xQueueSemaphoreTake+0x374>)
    7baa:	4798      	blx	r3
    7bac:	0003      	movs	r3, r0
    7bae:	001a      	movs	r2, r3
    7bb0:	4b71      	ldr	r3, [pc, #452]	; (7d78 <xQueueSemaphoreTake+0x378>)
    7bb2:	5c9b      	ldrb	r3, [r3, r2]
    7bb4:	3350      	adds	r3, #80	; 0x50
    7bb6:	b2db      	uxtb	r3, r3
    7bb8:	001d      	movs	r5, r3
    7bba:	69fb      	ldr	r3, [r7, #28]
    7bbc:	0018      	movs	r0, r3
    7bbe:	4b6d      	ldr	r3, [pc, #436]	; (7d74 <xQueueSemaphoreTake+0x374>)
    7bc0:	4798      	blx	r3
    7bc2:	0003      	movs	r3, r0
    7bc4:	001a      	movs	r2, r3
    7bc6:	4b6c      	ldr	r3, [pc, #432]	; (7d78 <xQueueSemaphoreTake+0x378>)
    7bc8:	5c9c      	ldrb	r4, [r3, r2]
    7bca:	69fb      	ldr	r3, [r7, #28]
    7bcc:	0018      	movs	r0, r3
    7bce:	4b6b      	ldr	r3, [pc, #428]	; (7d7c <xQueueSemaphoreTake+0x37c>)
    7bd0:	4798      	blx	r3
    7bd2:	0003      	movs	r3, r0
    7bd4:	b2db      	uxtb	r3, r3
    7bd6:	001a      	movs	r2, r3
    7bd8:	0021      	movs	r1, r4
    7bda:	0028      	movs	r0, r5
    7bdc:	4b68      	ldr	r3, [pc, #416]	; (7d80 <xQueueSemaphoreTake+0x380>)
    7bde:	4798      	blx	r3
					return errQUEUE_EMPTY;
    7be0:	2300      	movs	r3, #0
    7be2:	e147      	b.n	7e74 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
    7be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7be6:	2b00      	cmp	r3, #0
    7be8:	d106      	bne.n	7bf8 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    7bea:	230c      	movs	r3, #12
    7bec:	18fb      	adds	r3, r7, r3
    7bee:	0018      	movs	r0, r3
    7bf0:	4b6a      	ldr	r3, [pc, #424]	; (7d9c <xQueueSemaphoreTake+0x39c>)
    7bf2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    7bf4:	2301      	movs	r3, #1
    7bf6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    7bf8:	4b67      	ldr	r3, [pc, #412]	; (7d98 <xQueueSemaphoreTake+0x398>)
    7bfa:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    7bfc:	4b68      	ldr	r3, [pc, #416]	; (7da0 <xQueueSemaphoreTake+0x3a0>)
    7bfe:	4798      	blx	r3
		prvLockQueue( pxQueue );
    7c00:	4b57      	ldr	r3, [pc, #348]	; (7d60 <xQueueSemaphoreTake+0x360>)
    7c02:	4798      	blx	r3
    7c04:	69fb      	ldr	r3, [r7, #28]
    7c06:	2244      	movs	r2, #68	; 0x44
    7c08:	5c9b      	ldrb	r3, [r3, r2]
    7c0a:	b25b      	sxtb	r3, r3
    7c0c:	3301      	adds	r3, #1
    7c0e:	d103      	bne.n	7c18 <xQueueSemaphoreTake+0x218>
    7c10:	69fb      	ldr	r3, [r7, #28]
    7c12:	2244      	movs	r2, #68	; 0x44
    7c14:	2100      	movs	r1, #0
    7c16:	5499      	strb	r1, [r3, r2]
    7c18:	69fb      	ldr	r3, [r7, #28]
    7c1a:	2245      	movs	r2, #69	; 0x45
    7c1c:	5c9b      	ldrb	r3, [r3, r2]
    7c1e:	b25b      	sxtb	r3, r3
    7c20:	3301      	adds	r3, #1
    7c22:	d103      	bne.n	7c2c <xQueueSemaphoreTake+0x22c>
    7c24:	69fb      	ldr	r3, [r7, #28]
    7c26:	2245      	movs	r2, #69	; 0x45
    7c28:	2100      	movs	r1, #0
    7c2a:	5499      	strb	r1, [r3, r2]
    7c2c:	4b5a      	ldr	r3, [pc, #360]	; (7d98 <xQueueSemaphoreTake+0x398>)
    7c2e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    7c30:	003a      	movs	r2, r7
    7c32:	230c      	movs	r3, #12
    7c34:	18fb      	adds	r3, r7, r3
    7c36:	0011      	movs	r1, r2
    7c38:	0018      	movs	r0, r3
    7c3a:	4b5a      	ldr	r3, [pc, #360]	; (7da4 <xQueueSemaphoreTake+0x3a4>)
    7c3c:	4798      	blx	r3
    7c3e:	1e03      	subs	r3, r0, #0
    7c40:	d000      	beq.n	7c44 <xQueueSemaphoreTake+0x244>
    7c42:	e0bd      	b.n	7dc0 <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    7c44:	69fb      	ldr	r3, [r7, #28]
    7c46:	0018      	movs	r0, r3
    7c48:	4b57      	ldr	r3, [pc, #348]	; (7da8 <xQueueSemaphoreTake+0x3a8>)
    7c4a:	4798      	blx	r3
    7c4c:	1e03      	subs	r3, r0, #0
    7c4e:	d100      	bne.n	7c52 <xQueueSemaphoreTake+0x252>
    7c50:	e07c      	b.n	7d4c <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    7c52:	4b44      	ldr	r3, [pc, #272]	; (7d64 <xQueueSemaphoreTake+0x364>)
    7c54:	4798      	blx	r3
    7c56:	0003      	movs	r3, r0
    7c58:	0018      	movs	r0, r3
    7c5a:	4b43      	ldr	r3, [pc, #268]	; (7d68 <xQueueSemaphoreTake+0x368>)
    7c5c:	4798      	blx	r3
    7c5e:	0003      	movs	r3, r0
    7c60:	001a      	movs	r2, r3
    7c62:	4b42      	ldr	r3, [pc, #264]	; (7d6c <xQueueSemaphoreTake+0x36c>)
    7c64:	881b      	ldrh	r3, [r3, #0]
    7c66:	4013      	ands	r3, r2
    7c68:	b29b      	uxth	r3, r3
    7c6a:	2b00      	cmp	r3, #0
    7c6c:	d029      	beq.n	7cc2 <xQueueSemaphoreTake+0x2c2>
    7c6e:	69fb      	ldr	r3, [r7, #28]
    7c70:	0018      	movs	r0, r3
    7c72:	4b3f      	ldr	r3, [pc, #252]	; (7d70 <xQueueSemaphoreTake+0x370>)
    7c74:	4798      	blx	r3
    7c76:	0003      	movs	r3, r0
    7c78:	001a      	movs	r2, r3
    7c7a:	4b3c      	ldr	r3, [pc, #240]	; (7d6c <xQueueSemaphoreTake+0x36c>)
    7c7c:	881b      	ldrh	r3, [r3, #0]
    7c7e:	4013      	ands	r3, r2
    7c80:	b29b      	uxth	r3, r3
    7c82:	2b00      	cmp	r3, #0
    7c84:	d01d      	beq.n	7cc2 <xQueueSemaphoreTake+0x2c2>
    7c86:	69fb      	ldr	r3, [r7, #28]
    7c88:	0018      	movs	r0, r3
    7c8a:	4b3a      	ldr	r3, [pc, #232]	; (7d74 <xQueueSemaphoreTake+0x374>)
    7c8c:	4798      	blx	r3
    7c8e:	0003      	movs	r3, r0
    7c90:	001a      	movs	r2, r3
    7c92:	4b39      	ldr	r3, [pc, #228]	; (7d78 <xQueueSemaphoreTake+0x378>)
    7c94:	5c9b      	ldrb	r3, [r3, r2]
    7c96:	3368      	adds	r3, #104	; 0x68
    7c98:	b2db      	uxtb	r3, r3
    7c9a:	001d      	movs	r5, r3
    7c9c:	69fb      	ldr	r3, [r7, #28]
    7c9e:	0018      	movs	r0, r3
    7ca0:	4b34      	ldr	r3, [pc, #208]	; (7d74 <xQueueSemaphoreTake+0x374>)
    7ca2:	4798      	blx	r3
    7ca4:	0003      	movs	r3, r0
    7ca6:	001a      	movs	r2, r3
    7ca8:	4b33      	ldr	r3, [pc, #204]	; (7d78 <xQueueSemaphoreTake+0x378>)
    7caa:	5c9c      	ldrb	r4, [r3, r2]
    7cac:	69fb      	ldr	r3, [r7, #28]
    7cae:	0018      	movs	r0, r3
    7cb0:	4b32      	ldr	r3, [pc, #200]	; (7d7c <xQueueSemaphoreTake+0x37c>)
    7cb2:	4798      	blx	r3
    7cb4:	0003      	movs	r3, r0
    7cb6:	b2db      	uxtb	r3, r3
    7cb8:	001a      	movs	r2, r3
    7cba:	0021      	movs	r1, r4
    7cbc:	0028      	movs	r0, r5
    7cbe:	4b30      	ldr	r3, [pc, #192]	; (7d80 <xQueueSemaphoreTake+0x380>)
    7cc0:	4798      	blx	r3
    7cc2:	69fb      	ldr	r3, [r7, #28]
    7cc4:	0018      	movs	r0, r3
    7cc6:	4b2b      	ldr	r3, [pc, #172]	; (7d74 <xQueueSemaphoreTake+0x374>)
    7cc8:	4798      	blx	r3
    7cca:	0003      	movs	r3, r0
    7ccc:	001a      	movs	r2, r3
    7cce:	4b2a      	ldr	r3, [pc, #168]	; (7d78 <xQueueSemaphoreTake+0x378>)
    7cd0:	5c9b      	ldrb	r3, [r3, r2]
    7cd2:	2b02      	cmp	r3, #2
    7cd4:	d018      	beq.n	7d08 <xQueueSemaphoreTake+0x308>
    7cd6:	4b23      	ldr	r3, [pc, #140]	; (7d64 <xQueueSemaphoreTake+0x364>)
    7cd8:	4798      	blx	r3
    7cda:	0003      	movs	r3, r0
    7cdc:	0018      	movs	r0, r3
    7cde:	4b22      	ldr	r3, [pc, #136]	; (7d68 <xQueueSemaphoreTake+0x368>)
    7ce0:	4798      	blx	r3
    7ce2:	0003      	movs	r3, r0
    7ce4:	001a      	movs	r2, r3
    7ce6:	4b21      	ldr	r3, [pc, #132]	; (7d6c <xQueueSemaphoreTake+0x36c>)
    7ce8:	881b      	ldrh	r3, [r3, #0]
    7cea:	4013      	ands	r3, r2
    7cec:	b29b      	uxth	r3, r3
    7cee:	2b00      	cmp	r3, #0
    7cf0:	d00a      	beq.n	7d08 <xQueueSemaphoreTake+0x308>
    7cf2:	4b1c      	ldr	r3, [pc, #112]	; (7d64 <xQueueSemaphoreTake+0x364>)
    7cf4:	4798      	blx	r3
    7cf6:	0003      	movs	r3, r0
    7cf8:	0018      	movs	r0, r3
    7cfa:	4b22      	ldr	r3, [pc, #136]	; (7d84 <xQueueSemaphoreTake+0x384>)
    7cfc:	4798      	blx	r3
    7cfe:	0003      	movs	r3, r0
    7d00:	b2db      	uxtb	r3, r3
    7d02:	0018      	movs	r0, r3
    7d04:	4b29      	ldr	r3, [pc, #164]	; (7dac <xQueueSemaphoreTake+0x3ac>)
    7d06:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    7d08:	69fb      	ldr	r3, [r7, #28]
    7d0a:	681b      	ldr	r3, [r3, #0]
    7d0c:	2b00      	cmp	r3, #0
    7d0e:	d10a      	bne.n	7d26 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
    7d10:	4b13      	ldr	r3, [pc, #76]	; (7d60 <xQueueSemaphoreTake+0x360>)
    7d12:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    7d14:	69fb      	ldr	r3, [r7, #28]
    7d16:	685b      	ldr	r3, [r3, #4]
    7d18:	0018      	movs	r0, r3
    7d1a:	4b25      	ldr	r3, [pc, #148]	; (7db0 <xQueueSemaphoreTake+0x3b0>)
    7d1c:	4798      	blx	r3
    7d1e:	0003      	movs	r3, r0
    7d20:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
    7d22:	4b1d      	ldr	r3, [pc, #116]	; (7d98 <xQueueSemaphoreTake+0x398>)
    7d24:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    7d26:	69fb      	ldr	r3, [r7, #28]
    7d28:	3324      	adds	r3, #36	; 0x24
    7d2a:	683a      	ldr	r2, [r7, #0]
    7d2c:	0011      	movs	r1, r2
    7d2e:	0018      	movs	r0, r3
    7d30:	4b20      	ldr	r3, [pc, #128]	; (7db4 <xQueueSemaphoreTake+0x3b4>)
    7d32:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    7d34:	69fb      	ldr	r3, [r7, #28]
    7d36:	0018      	movs	r0, r3
    7d38:	4b1f      	ldr	r3, [pc, #124]	; (7db8 <xQueueSemaphoreTake+0x3b8>)
    7d3a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    7d3c:	4b1f      	ldr	r3, [pc, #124]	; (7dbc <xQueueSemaphoreTake+0x3bc>)
    7d3e:	4798      	blx	r3
    7d40:	1e03      	subs	r3, r0, #0
    7d42:	d000      	beq.n	7d46 <xQueueSemaphoreTake+0x346>
    7d44:	e680      	b.n	7a48 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
    7d46:	4b13      	ldr	r3, [pc, #76]	; (7d94 <xQueueSemaphoreTake+0x394>)
    7d48:	4798      	blx	r3
    7d4a:	e67d      	b.n	7a48 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    7d4c:	69fb      	ldr	r3, [r7, #28]
    7d4e:	0018      	movs	r0, r3
    7d50:	4b19      	ldr	r3, [pc, #100]	; (7db8 <xQueueSemaphoreTake+0x3b8>)
    7d52:	4798      	blx	r3
				( void ) xTaskResumeAll();
    7d54:	4b19      	ldr	r3, [pc, #100]	; (7dbc <xQueueSemaphoreTake+0x3bc>)
    7d56:	4798      	blx	r3
    7d58:	e676      	b.n	7a48 <xQueueSemaphoreTake+0x48>
    7d5a:	46c0      	nop			; (mov r8, r8)
    7d5c:	0000947d 	.word	0x0000947d
    7d60:	00006759 	.word	0x00006759
    7d64:	000049f5 	.word	0x000049f5
    7d68:	00004759 	.word	0x00004759
    7d6c:	2000010c 	.word	0x2000010c
    7d70:	00004819 	.word	0x00004819
    7d74:	00004719 	.word	0x00004719
    7d78:	20000100 	.word	0x20000100
    7d7c:	000047f9 	.word	0x000047f9
    7d80:	00005151 	.word	0x00005151
    7d84:	00004739 	.word	0x00004739
    7d88:	000057ad 	.word	0x000057ad
    7d8c:	00009949 	.word	0x00009949
    7d90:	00008fed 	.word	0x00008fed
    7d94:	00006741 	.word	0x00006741
    7d98:	0000677d 	.word	0x0000677d
    7d9c:	0000912d 	.word	0x0000912d
    7da0:	00008a15 	.word	0x00008a15
    7da4:	00009155 	.word	0x00009155
    7da8:	00008149 	.word	0x00008149
    7dac:	000058e9 	.word	0x000058e9
    7db0:	000094b5 	.word	0x000094b5
    7db4:	00008ec9 	.word	0x00008ec9
    7db8:	00008059 	.word	0x00008059
    7dbc:	00008a2d 	.word	0x00008a2d
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    7dc0:	69fb      	ldr	r3, [r7, #28]
    7dc2:	0018      	movs	r0, r3
    7dc4:	4b2d      	ldr	r3, [pc, #180]	; (7e7c <xQueueSemaphoreTake+0x47c>)
    7dc6:	4798      	blx	r3
			( void ) xTaskResumeAll();
    7dc8:	4b2d      	ldr	r3, [pc, #180]	; (7e80 <xQueueSemaphoreTake+0x480>)
    7dca:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    7dcc:	69fb      	ldr	r3, [r7, #28]
    7dce:	0018      	movs	r0, r3
    7dd0:	4b2c      	ldr	r3, [pc, #176]	; (7e84 <xQueueSemaphoreTake+0x484>)
    7dd2:	4798      	blx	r3
    7dd4:	1e03      	subs	r3, r0, #0
    7dd6:	d100      	bne.n	7dda <xQueueSemaphoreTake+0x3da>
    7dd8:	e636      	b.n	7a48 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    7dda:	6a3b      	ldr	r3, [r7, #32]
    7ddc:	2b00      	cmp	r3, #0
    7dde:	d010      	beq.n	7e02 <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
    7de0:	4b29      	ldr	r3, [pc, #164]	; (7e88 <xQueueSemaphoreTake+0x488>)
    7de2:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    7de4:	69fb      	ldr	r3, [r7, #28]
    7de6:	0018      	movs	r0, r3
    7de8:	4b28      	ldr	r3, [pc, #160]	; (7e8c <xQueueSemaphoreTake+0x48c>)
    7dea:	4798      	blx	r3
    7dec:	0003      	movs	r3, r0
    7dee:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    7df0:	69fb      	ldr	r3, [r7, #28]
    7df2:	685b      	ldr	r3, [r3, #4]
    7df4:	697a      	ldr	r2, [r7, #20]
    7df6:	0011      	movs	r1, r2
    7df8:	0018      	movs	r0, r3
    7dfa:	4b25      	ldr	r3, [pc, #148]	; (7e90 <xQueueSemaphoreTake+0x490>)
    7dfc:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    7dfe:	4b25      	ldr	r3, [pc, #148]	; (7e94 <xQueueSemaphoreTake+0x494>)
    7e00:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
    7e02:	4b25      	ldr	r3, [pc, #148]	; (7e98 <xQueueSemaphoreTake+0x498>)
    7e04:	4798      	blx	r3
    7e06:	0003      	movs	r3, r0
    7e08:	0018      	movs	r0, r3
    7e0a:	4b24      	ldr	r3, [pc, #144]	; (7e9c <xQueueSemaphoreTake+0x49c>)
    7e0c:	4798      	blx	r3
    7e0e:	0003      	movs	r3, r0
    7e10:	001a      	movs	r2, r3
    7e12:	4b23      	ldr	r3, [pc, #140]	; (7ea0 <xQueueSemaphoreTake+0x4a0>)
    7e14:	881b      	ldrh	r3, [r3, #0]
    7e16:	4013      	ands	r3, r2
    7e18:	b29b      	uxth	r3, r3
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	d029      	beq.n	7e72 <xQueueSemaphoreTake+0x472>
    7e1e:	69fb      	ldr	r3, [r7, #28]
    7e20:	0018      	movs	r0, r3
    7e22:	4b20      	ldr	r3, [pc, #128]	; (7ea4 <xQueueSemaphoreTake+0x4a4>)
    7e24:	4798      	blx	r3
    7e26:	0003      	movs	r3, r0
    7e28:	001a      	movs	r2, r3
    7e2a:	4b1d      	ldr	r3, [pc, #116]	; (7ea0 <xQueueSemaphoreTake+0x4a0>)
    7e2c:	881b      	ldrh	r3, [r3, #0]
    7e2e:	4013      	ands	r3, r2
    7e30:	b29b      	uxth	r3, r3
    7e32:	2b00      	cmp	r3, #0
    7e34:	d01d      	beq.n	7e72 <xQueueSemaphoreTake+0x472>
    7e36:	69fb      	ldr	r3, [r7, #28]
    7e38:	0018      	movs	r0, r3
    7e3a:	4b1b      	ldr	r3, [pc, #108]	; (7ea8 <xQueueSemaphoreTake+0x4a8>)
    7e3c:	4798      	blx	r3
    7e3e:	0003      	movs	r3, r0
    7e40:	001a      	movs	r2, r3
    7e42:	4b1a      	ldr	r3, [pc, #104]	; (7eac <xQueueSemaphoreTake+0x4ac>)
    7e44:	5c9b      	ldrb	r3, [r3, r2]
    7e46:	3350      	adds	r3, #80	; 0x50
    7e48:	b2db      	uxtb	r3, r3
    7e4a:	001d      	movs	r5, r3
    7e4c:	69fb      	ldr	r3, [r7, #28]
    7e4e:	0018      	movs	r0, r3
    7e50:	4b15      	ldr	r3, [pc, #84]	; (7ea8 <xQueueSemaphoreTake+0x4a8>)
    7e52:	4798      	blx	r3
    7e54:	0003      	movs	r3, r0
    7e56:	001a      	movs	r2, r3
    7e58:	4b14      	ldr	r3, [pc, #80]	; (7eac <xQueueSemaphoreTake+0x4ac>)
    7e5a:	5c9c      	ldrb	r4, [r3, r2]
    7e5c:	69fb      	ldr	r3, [r7, #28]
    7e5e:	0018      	movs	r0, r3
    7e60:	4b13      	ldr	r3, [pc, #76]	; (7eb0 <xQueueSemaphoreTake+0x4b0>)
    7e62:	4798      	blx	r3
    7e64:	0003      	movs	r3, r0
    7e66:	b2db      	uxtb	r3, r3
    7e68:	001a      	movs	r2, r3
    7e6a:	0021      	movs	r1, r4
    7e6c:	0028      	movs	r0, r5
    7e6e:	4b11      	ldr	r3, [pc, #68]	; (7eb4 <xQueueSemaphoreTake+0x4b4>)
    7e70:	4798      	blx	r3
				return errQUEUE_EMPTY;
    7e72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    7e74:	0018      	movs	r0, r3
    7e76:	46bd      	mov	sp, r7
    7e78:	b00a      	add	sp, #40	; 0x28
    7e7a:	bdb0      	pop	{r4, r5, r7, pc}
    7e7c:	00008059 	.word	0x00008059
    7e80:	00008a2d 	.word	0x00008a2d
    7e84:	00008149 	.word	0x00008149
    7e88:	00006759 	.word	0x00006759
    7e8c:	00007efb 	.word	0x00007efb
    7e90:	000097ad 	.word	0x000097ad
    7e94:	0000677d 	.word	0x0000677d
    7e98:	000049f5 	.word	0x000049f5
    7e9c:	00004759 	.word	0x00004759
    7ea0:	2000010c 	.word	0x2000010c
    7ea4:	00004819 	.word	0x00004819
    7ea8:	00004719 	.word	0x00004719
    7eac:	20000100 	.word	0x20000100
    7eb0:	000047f9 	.word	0x000047f9
    7eb4:	00005151 	.word	0x00005151

00007eb8 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
    7eb8:	b580      	push	{r7, lr}
    7eba:	b082      	sub	sp, #8
    7ebc:	af00      	add	r7, sp, #0
    7ebe:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    7ec0:	687b      	ldr	r3, [r7, #4]
    7ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
    7ec4:	0018      	movs	r0, r3
    7ec6:	46bd      	mov	sp, r7
    7ec8:	b002      	add	sp, #8
    7eca:	bd80      	pop	{r7, pc}

00007ecc <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
    7ecc:	b580      	push	{r7, lr}
    7ece:	b082      	sub	sp, #8
    7ed0:	af00      	add	r7, sp, #0
    7ed2:	6078      	str	r0, [r7, #4]
    7ed4:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    7ed6:	687b      	ldr	r3, [r7, #4]
    7ed8:	683a      	ldr	r2, [r7, #0]
    7eda:	64da      	str	r2, [r3, #76]	; 0x4c
	}
    7edc:	46c0      	nop			; (mov r8, r8)
    7ede:	46bd      	mov	sp, r7
    7ee0:	b002      	add	sp, #8
    7ee2:	bd80      	pop	{r7, pc}

00007ee4 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
    7ee4:	b580      	push	{r7, lr}
    7ee6:	b082      	sub	sp, #8
    7ee8:	af00      	add	r7, sp, #0
    7eea:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    7eec:	687b      	ldr	r3, [r7, #4]
    7eee:	2250      	movs	r2, #80	; 0x50
    7ef0:	5c9b      	ldrb	r3, [r3, r2]
	}
    7ef2:	0018      	movs	r0, r3
    7ef4:	46bd      	mov	sp, r7
    7ef6:	b002      	add	sp, #8
    7ef8:	bd80      	pop	{r7, pc}

00007efa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    7efa:	b580      	push	{r7, lr}
    7efc:	b084      	sub	sp, #16
    7efe:	af00      	add	r7, sp, #0
    7f00:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    7f02:	687b      	ldr	r3, [r7, #4]
    7f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f06:	2b00      	cmp	r3, #0
    7f08:	d006      	beq.n	7f18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    7f0a:	687b      	ldr	r3, [r7, #4]
    7f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7f0e:	681b      	ldr	r3, [r3, #0]
    7f10:	2205      	movs	r2, #5
    7f12:	1ad3      	subs	r3, r2, r3
    7f14:	60fb      	str	r3, [r7, #12]
    7f16:	e001      	b.n	7f1c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    7f18:	2300      	movs	r3, #0
    7f1a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    7f1c:	68fb      	ldr	r3, [r7, #12]
	}
    7f1e:	0018      	movs	r0, r3
    7f20:	46bd      	mov	sp, r7
    7f22:	b004      	add	sp, #16
    7f24:	bd80      	pop	{r7, pc}
	...

00007f28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    7f28:	b580      	push	{r7, lr}
    7f2a:	b086      	sub	sp, #24
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	60f8      	str	r0, [r7, #12]
    7f30:	60b9      	str	r1, [r7, #8]
    7f32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    7f34:	2300      	movs	r3, #0
    7f36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7f38:	68fb      	ldr	r3, [r7, #12]
    7f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7f3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    7f3e:	68fb      	ldr	r3, [r7, #12]
    7f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7f42:	2b00      	cmp	r3, #0
    7f44:	d10e      	bne.n	7f64 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    7f46:	68fb      	ldr	r3, [r7, #12]
    7f48:	681b      	ldr	r3, [r3, #0]
    7f4a:	2b00      	cmp	r3, #0
    7f4c:	d14e      	bne.n	7fec <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    7f4e:	68fb      	ldr	r3, [r7, #12]
    7f50:	685b      	ldr	r3, [r3, #4]
    7f52:	0018      	movs	r0, r3
    7f54:	4b2a      	ldr	r3, [pc, #168]	; (8000 <prvCopyDataToQueue+0xd8>)
    7f56:	4798      	blx	r3
    7f58:	0003      	movs	r3, r0
    7f5a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    7f5c:	68fb      	ldr	r3, [r7, #12]
    7f5e:	2200      	movs	r2, #0
    7f60:	605a      	str	r2, [r3, #4]
    7f62:	e043      	b.n	7fec <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    7f64:	687b      	ldr	r3, [r7, #4]
    7f66:	2b00      	cmp	r3, #0
    7f68:	d119      	bne.n	7f9e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    7f6a:	68fb      	ldr	r3, [r7, #12]
    7f6c:	6898      	ldr	r0, [r3, #8]
    7f6e:	68fb      	ldr	r3, [r7, #12]
    7f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7f72:	68bb      	ldr	r3, [r7, #8]
    7f74:	0019      	movs	r1, r3
    7f76:	4b23      	ldr	r3, [pc, #140]	; (8004 <prvCopyDataToQueue+0xdc>)
    7f78:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    7f7a:	68fb      	ldr	r3, [r7, #12]
    7f7c:	689a      	ldr	r2, [r3, #8]
    7f7e:	68fb      	ldr	r3, [r7, #12]
    7f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7f82:	18d2      	adds	r2, r2, r3
    7f84:	68fb      	ldr	r3, [r7, #12]
    7f86:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    7f88:	68fb      	ldr	r3, [r7, #12]
    7f8a:	689a      	ldr	r2, [r3, #8]
    7f8c:	68fb      	ldr	r3, [r7, #12]
    7f8e:	685b      	ldr	r3, [r3, #4]
    7f90:	429a      	cmp	r2, r3
    7f92:	d32b      	bcc.n	7fec <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    7f94:	68fb      	ldr	r3, [r7, #12]
    7f96:	681a      	ldr	r2, [r3, #0]
    7f98:	68fb      	ldr	r3, [r7, #12]
    7f9a:	609a      	str	r2, [r3, #8]
    7f9c:	e026      	b.n	7fec <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7f9e:	68fb      	ldr	r3, [r7, #12]
    7fa0:	68d8      	ldr	r0, [r3, #12]
    7fa2:	68fb      	ldr	r3, [r7, #12]
    7fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7fa6:	68bb      	ldr	r3, [r7, #8]
    7fa8:	0019      	movs	r1, r3
    7faa:	4b16      	ldr	r3, [pc, #88]	; (8004 <prvCopyDataToQueue+0xdc>)
    7fac:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    7fae:	68fb      	ldr	r3, [r7, #12]
    7fb0:	68da      	ldr	r2, [r3, #12]
    7fb2:	68fb      	ldr	r3, [r7, #12]
    7fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7fb6:	425b      	negs	r3, r3
    7fb8:	18d2      	adds	r2, r2, r3
    7fba:	68fb      	ldr	r3, [r7, #12]
    7fbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    7fbe:	68fb      	ldr	r3, [r7, #12]
    7fc0:	68da      	ldr	r2, [r3, #12]
    7fc2:	68fb      	ldr	r3, [r7, #12]
    7fc4:	681b      	ldr	r3, [r3, #0]
    7fc6:	429a      	cmp	r2, r3
    7fc8:	d207      	bcs.n	7fda <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    7fca:	68fb      	ldr	r3, [r7, #12]
    7fcc:	685a      	ldr	r2, [r3, #4]
    7fce:	68fb      	ldr	r3, [r7, #12]
    7fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7fd2:	425b      	negs	r3, r3
    7fd4:	18d2      	adds	r2, r2, r3
    7fd6:	68fb      	ldr	r3, [r7, #12]
    7fd8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    7fda:	687b      	ldr	r3, [r7, #4]
    7fdc:	2b02      	cmp	r3, #2
    7fde:	d105      	bne.n	7fec <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    7fe0:	693b      	ldr	r3, [r7, #16]
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d002      	beq.n	7fec <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    7fe6:	693b      	ldr	r3, [r7, #16]
    7fe8:	3b01      	subs	r3, #1
    7fea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    7fec:	693b      	ldr	r3, [r7, #16]
    7fee:	1c5a      	adds	r2, r3, #1
    7ff0:	68fb      	ldr	r3, [r7, #12]
    7ff2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    7ff4:	697b      	ldr	r3, [r7, #20]
}
    7ff6:	0018      	movs	r0, r3
    7ff8:	46bd      	mov	sp, r7
    7ffa:	b006      	add	sp, #24
    7ffc:	bd80      	pop	{r7, pc}
    7ffe:	46c0      	nop			; (mov r8, r8)
    8000:	00009645 	.word	0x00009645
    8004:	00020ee9 	.word	0x00020ee9

00008008 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    8008:	b580      	push	{r7, lr}
    800a:	b082      	sub	sp, #8
    800c:	af00      	add	r7, sp, #0
    800e:	6078      	str	r0, [r7, #4]
    8010:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    8012:	687b      	ldr	r3, [r7, #4]
    8014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8016:	2b00      	cmp	r3, #0
    8018:	d018      	beq.n	804c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    801a:	687b      	ldr	r3, [r7, #4]
    801c:	68da      	ldr	r2, [r3, #12]
    801e:	687b      	ldr	r3, [r7, #4]
    8020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8022:	18d2      	adds	r2, r2, r3
    8024:	687b      	ldr	r3, [r7, #4]
    8026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    8028:	687b      	ldr	r3, [r7, #4]
    802a:	68da      	ldr	r2, [r3, #12]
    802c:	687b      	ldr	r3, [r7, #4]
    802e:	685b      	ldr	r3, [r3, #4]
    8030:	429a      	cmp	r2, r3
    8032:	d303      	bcc.n	803c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	681a      	ldr	r2, [r3, #0]
    8038:	687b      	ldr	r3, [r7, #4]
    803a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    803c:	687b      	ldr	r3, [r7, #4]
    803e:	68d9      	ldr	r1, [r3, #12]
    8040:	687b      	ldr	r3, [r7, #4]
    8042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    8044:	683b      	ldr	r3, [r7, #0]
    8046:	0018      	movs	r0, r3
    8048:	4b02      	ldr	r3, [pc, #8]	; (8054 <prvCopyDataFromQueue+0x4c>)
    804a:	4798      	blx	r3
	}
}
    804c:	46c0      	nop			; (mov r8, r8)
    804e:	46bd      	mov	sp, r7
    8050:	b002      	add	sp, #8
    8052:	bd80      	pop	{r7, pc}
    8054:	00020ee9 	.word	0x00020ee9

00008058 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    8058:	b580      	push	{r7, lr}
    805a:	b084      	sub	sp, #16
    805c:	af00      	add	r7, sp, #0
    805e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    8060:	4b34      	ldr	r3, [pc, #208]	; (8134 <prvUnlockQueue+0xdc>)
    8062:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    8064:	230f      	movs	r3, #15
    8066:	18fb      	adds	r3, r7, r3
    8068:	687a      	ldr	r2, [r7, #4]
    806a:	2145      	movs	r1, #69	; 0x45
    806c:	5c52      	ldrb	r2, [r2, r1]
    806e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    8070:	e022      	b.n	80b8 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    8072:	687b      	ldr	r3, [r7, #4]
    8074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8076:	2b00      	cmp	r3, #0
    8078:	d009      	beq.n	808e <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    807a:	687b      	ldr	r3, [r7, #4]
    807c:	2100      	movs	r1, #0
    807e:	0018      	movs	r0, r3
    8080:	4b2d      	ldr	r3, [pc, #180]	; (8138 <prvUnlockQueue+0xe0>)
    8082:	4798      	blx	r3
    8084:	1e03      	subs	r3, r0, #0
    8086:	d00f      	beq.n	80a8 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    8088:	4b2c      	ldr	r3, [pc, #176]	; (813c <prvUnlockQueue+0xe4>)
    808a:	4798      	blx	r3
    808c:	e00c      	b.n	80a8 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    808e:	687b      	ldr	r3, [r7, #4]
    8090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8092:	2b00      	cmp	r3, #0
    8094:	d017      	beq.n	80c6 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    8096:	687b      	ldr	r3, [r7, #4]
    8098:	3324      	adds	r3, #36	; 0x24
    809a:	0018      	movs	r0, r3
    809c:	4b28      	ldr	r3, [pc, #160]	; (8140 <prvUnlockQueue+0xe8>)
    809e:	4798      	blx	r3
    80a0:	1e03      	subs	r3, r0, #0
    80a2:	d001      	beq.n	80a8 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    80a4:	4b25      	ldr	r3, [pc, #148]	; (813c <prvUnlockQueue+0xe4>)
    80a6:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    80a8:	230f      	movs	r3, #15
    80aa:	18fb      	adds	r3, r7, r3
    80ac:	781b      	ldrb	r3, [r3, #0]
    80ae:	3b01      	subs	r3, #1
    80b0:	b2da      	uxtb	r2, r3
    80b2:	230f      	movs	r3, #15
    80b4:	18fb      	adds	r3, r7, r3
    80b6:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    80b8:	230f      	movs	r3, #15
    80ba:	18fb      	adds	r3, r7, r3
    80bc:	781b      	ldrb	r3, [r3, #0]
    80be:	b25b      	sxtb	r3, r3
    80c0:	2b00      	cmp	r3, #0
    80c2:	dcd6      	bgt.n	8072 <prvUnlockQueue+0x1a>
    80c4:	e000      	b.n	80c8 <prvUnlockQueue+0x70>
						break;
    80c6:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    80c8:	687b      	ldr	r3, [r7, #4]
    80ca:	2245      	movs	r2, #69	; 0x45
    80cc:	21ff      	movs	r1, #255	; 0xff
    80ce:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    80d0:	4b1c      	ldr	r3, [pc, #112]	; (8144 <prvUnlockQueue+0xec>)
    80d2:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    80d4:	4b17      	ldr	r3, [pc, #92]	; (8134 <prvUnlockQueue+0xdc>)
    80d6:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    80d8:	230e      	movs	r3, #14
    80da:	18fb      	adds	r3, r7, r3
    80dc:	687a      	ldr	r2, [r7, #4]
    80de:	2144      	movs	r1, #68	; 0x44
    80e0:	5c52      	ldrb	r2, [r2, r1]
    80e2:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    80e4:	e014      	b.n	8110 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    80e6:	687b      	ldr	r3, [r7, #4]
    80e8:	691b      	ldr	r3, [r3, #16]
    80ea:	2b00      	cmp	r3, #0
    80ec:	d017      	beq.n	811e <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    80ee:	687b      	ldr	r3, [r7, #4]
    80f0:	3310      	adds	r3, #16
    80f2:	0018      	movs	r0, r3
    80f4:	4b12      	ldr	r3, [pc, #72]	; (8140 <prvUnlockQueue+0xe8>)
    80f6:	4798      	blx	r3
    80f8:	1e03      	subs	r3, r0, #0
    80fa:	d001      	beq.n	8100 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    80fc:	4b0f      	ldr	r3, [pc, #60]	; (813c <prvUnlockQueue+0xe4>)
    80fe:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    8100:	230e      	movs	r3, #14
    8102:	18fb      	adds	r3, r7, r3
    8104:	781b      	ldrb	r3, [r3, #0]
    8106:	3b01      	subs	r3, #1
    8108:	b2da      	uxtb	r2, r3
    810a:	230e      	movs	r3, #14
    810c:	18fb      	adds	r3, r7, r3
    810e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    8110:	230e      	movs	r3, #14
    8112:	18fb      	adds	r3, r7, r3
    8114:	781b      	ldrb	r3, [r3, #0]
    8116:	b25b      	sxtb	r3, r3
    8118:	2b00      	cmp	r3, #0
    811a:	dce4      	bgt.n	80e6 <prvUnlockQueue+0x8e>
    811c:	e000      	b.n	8120 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    811e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    8120:	687b      	ldr	r3, [r7, #4]
    8122:	2244      	movs	r2, #68	; 0x44
    8124:	21ff      	movs	r1, #255	; 0xff
    8126:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    8128:	4b06      	ldr	r3, [pc, #24]	; (8144 <prvUnlockQueue+0xec>)
    812a:	4798      	blx	r3
}
    812c:	46c0      	nop			; (mov r8, r8)
    812e:	46bd      	mov	sp, r7
    8130:	b004      	add	sp, #16
    8132:	bd80      	pop	{r7, pc}
    8134:	00006759 	.word	0x00006759
    8138:	0000822d 	.word	0x0000822d
    813c:	00009201 	.word	0x00009201
    8140:	00008fed 	.word	0x00008fed
    8144:	0000677d 	.word	0x0000677d

00008148 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    8148:	b580      	push	{r7, lr}
    814a:	b084      	sub	sp, #16
    814c:	af00      	add	r7, sp, #0
    814e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    8150:	4b08      	ldr	r3, [pc, #32]	; (8174 <prvIsQueueEmpty+0x2c>)
    8152:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    8154:	687b      	ldr	r3, [r7, #4]
    8156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8158:	2b00      	cmp	r3, #0
    815a:	d102      	bne.n	8162 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    815c:	2301      	movs	r3, #1
    815e:	60fb      	str	r3, [r7, #12]
    8160:	e001      	b.n	8166 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    8162:	2300      	movs	r3, #0
    8164:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    8166:	4b04      	ldr	r3, [pc, #16]	; (8178 <prvIsQueueEmpty+0x30>)
    8168:	4798      	blx	r3

	return xReturn;
    816a:	68fb      	ldr	r3, [r7, #12]
}
    816c:	0018      	movs	r0, r3
    816e:	46bd      	mov	sp, r7
    8170:	b004      	add	sp, #16
    8172:	bd80      	pop	{r7, pc}
    8174:	00006759 	.word	0x00006759
    8178:	0000677d 	.word	0x0000677d

0000817c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    817c:	b580      	push	{r7, lr}
    817e:	b084      	sub	sp, #16
    8180:	af00      	add	r7, sp, #0
    8182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    8184:	4b09      	ldr	r3, [pc, #36]	; (81ac <prvIsQueueFull+0x30>)
    8186:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    8188:	687b      	ldr	r3, [r7, #4]
    818a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    818c:	687b      	ldr	r3, [r7, #4]
    818e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8190:	429a      	cmp	r2, r3
    8192:	d102      	bne.n	819a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    8194:	2301      	movs	r3, #1
    8196:	60fb      	str	r3, [r7, #12]
    8198:	e001      	b.n	819e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    819a:	2300      	movs	r3, #0
    819c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    819e:	4b04      	ldr	r3, [pc, #16]	; (81b0 <prvIsQueueFull+0x34>)
    81a0:	4798      	blx	r3

	return xReturn;
    81a2:	68fb      	ldr	r3, [r7, #12]
}
    81a4:	0018      	movs	r0, r3
    81a6:	46bd      	mov	sp, r7
    81a8:	b004      	add	sp, #16
    81aa:	bd80      	pop	{r7, pc}
    81ac:	00006759 	.word	0x00006759
    81b0:	0000677d 	.word	0x0000677d

000081b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    81b4:	b580      	push	{r7, lr}
    81b6:	b086      	sub	sp, #24
    81b8:	af00      	add	r7, sp, #0
    81ba:	60f8      	str	r0, [r7, #12]
    81bc:	60b9      	str	r1, [r7, #8]
    81be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    81c0:	68fb      	ldr	r3, [r7, #12]
    81c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    81c4:	4b15      	ldr	r3, [pc, #84]	; (821c <vQueueWaitForMessageRestricted+0x68>)
    81c6:	4798      	blx	r3
    81c8:	697b      	ldr	r3, [r7, #20]
    81ca:	2244      	movs	r2, #68	; 0x44
    81cc:	5c9b      	ldrb	r3, [r3, r2]
    81ce:	b25b      	sxtb	r3, r3
    81d0:	3301      	adds	r3, #1
    81d2:	d103      	bne.n	81dc <vQueueWaitForMessageRestricted+0x28>
    81d4:	697b      	ldr	r3, [r7, #20]
    81d6:	2244      	movs	r2, #68	; 0x44
    81d8:	2100      	movs	r1, #0
    81da:	5499      	strb	r1, [r3, r2]
    81dc:	697b      	ldr	r3, [r7, #20]
    81de:	2245      	movs	r2, #69	; 0x45
    81e0:	5c9b      	ldrb	r3, [r3, r2]
    81e2:	b25b      	sxtb	r3, r3
    81e4:	3301      	adds	r3, #1
    81e6:	d103      	bne.n	81f0 <vQueueWaitForMessageRestricted+0x3c>
    81e8:	697b      	ldr	r3, [r7, #20]
    81ea:	2245      	movs	r2, #69	; 0x45
    81ec:	2100      	movs	r1, #0
    81ee:	5499      	strb	r1, [r3, r2]
    81f0:	4b0b      	ldr	r3, [pc, #44]	; (8220 <vQueueWaitForMessageRestricted+0x6c>)
    81f2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    81f4:	697b      	ldr	r3, [r7, #20]
    81f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    81f8:	2b00      	cmp	r3, #0
    81fa:	d106      	bne.n	820a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    81fc:	697b      	ldr	r3, [r7, #20]
    81fe:	3324      	adds	r3, #36	; 0x24
    8200:	687a      	ldr	r2, [r7, #4]
    8202:	68b9      	ldr	r1, [r7, #8]
    8204:	0018      	movs	r0, r3
    8206:	4b07      	ldr	r3, [pc, #28]	; (8224 <vQueueWaitForMessageRestricted+0x70>)
    8208:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    820a:	697b      	ldr	r3, [r7, #20]
    820c:	0018      	movs	r0, r3
    820e:	4b06      	ldr	r3, [pc, #24]	; (8228 <vQueueWaitForMessageRestricted+0x74>)
    8210:	4798      	blx	r3
	}
    8212:	46c0      	nop			; (mov r8, r8)
    8214:	46bd      	mov	sp, r7
    8216:	b006      	add	sp, #24
    8218:	bd80      	pop	{r7, pc}
    821a:	46c0      	nop			; (mov r8, r8)
    821c:	00006759 	.word	0x00006759
    8220:	0000677d 	.word	0x0000677d
    8224:	00008f0d 	.word	0x00008f0d
    8228:	00008059 	.word	0x00008059

0000822c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    822c:	b5b0      	push	{r4, r5, r7, lr}
    822e:	b086      	sub	sp, #24
    8230:	af00      	add	r7, sp, #0
    8232:	6078      	str	r0, [r7, #4]
    8234:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    8236:	687b      	ldr	r3, [r7, #4]
    8238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    823a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    823c:	2300      	movs	r3, #0
    823e:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    8240:	693b      	ldr	r3, [r7, #16]
    8242:	2b00      	cmp	r3, #0
    8244:	d101      	bne.n	824a <prvNotifyQueueSetContainer+0x1e>
    8246:	b672      	cpsid	i
    8248:	e7fe      	b.n	8248 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    824a:	693b      	ldr	r3, [r7, #16]
    824c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    824e:	693b      	ldr	r3, [r7, #16]
    8250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8252:	429a      	cmp	r2, r3
    8254:	d301      	bcc.n	825a <prvNotifyQueueSetContainer+0x2e>
    8256:	b672      	cpsid	i
    8258:	e7fe      	b.n	8258 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    825a:	693b      	ldr	r3, [r7, #16]
    825c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    825e:	693b      	ldr	r3, [r7, #16]
    8260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8262:	429a      	cmp	r2, r3
    8264:	d300      	bcc.n	8268 <prvNotifyQueueSetContainer+0x3c>
    8266:	e08b      	b.n	8380 <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    8268:	230f      	movs	r3, #15
    826a:	18fb      	adds	r3, r7, r3
    826c:	693a      	ldr	r2, [r7, #16]
    826e:	2145      	movs	r1, #69	; 0x45
    8270:	5c52      	ldrb	r2, [r2, r1]
    8272:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
    8274:	4b45      	ldr	r3, [pc, #276]	; (838c <prvNotifyQueueSetContainer+0x160>)
    8276:	4798      	blx	r3
    8278:	0003      	movs	r3, r0
    827a:	0018      	movs	r0, r3
    827c:	4b44      	ldr	r3, [pc, #272]	; (8390 <prvNotifyQueueSetContainer+0x164>)
    827e:	4798      	blx	r3
    8280:	0003      	movs	r3, r0
    8282:	001a      	movs	r2, r3
    8284:	4b43      	ldr	r3, [pc, #268]	; (8394 <prvNotifyQueueSetContainer+0x168>)
    8286:	881b      	ldrh	r3, [r3, #0]
    8288:	4013      	ands	r3, r2
    828a:	b29b      	uxth	r3, r3
    828c:	2b00      	cmp	r3, #0
    828e:	d02e      	beq.n	82ee <prvNotifyQueueSetContainer+0xc2>
    8290:	693b      	ldr	r3, [r7, #16]
    8292:	0018      	movs	r0, r3
    8294:	4b40      	ldr	r3, [pc, #256]	; (8398 <prvNotifyQueueSetContainer+0x16c>)
    8296:	4798      	blx	r3
    8298:	0003      	movs	r3, r0
    829a:	001a      	movs	r2, r3
    829c:	4b3d      	ldr	r3, [pc, #244]	; (8394 <prvNotifyQueueSetContainer+0x168>)
    829e:	881b      	ldrh	r3, [r3, #0]
    82a0:	4013      	ands	r3, r2
    82a2:	b29b      	uxth	r3, r3
    82a4:	2b00      	cmp	r3, #0
    82a6:	d022      	beq.n	82ee <prvNotifyQueueSetContainer+0xc2>
    82a8:	683b      	ldr	r3, [r7, #0]
    82aa:	2b00      	cmp	r3, #0
    82ac:	d10b      	bne.n	82c6 <prvNotifyQueueSetContainer+0x9a>
    82ae:	693b      	ldr	r3, [r7, #16]
    82b0:	0018      	movs	r0, r3
    82b2:	4b3a      	ldr	r3, [pc, #232]	; (839c <prvNotifyQueueSetContainer+0x170>)
    82b4:	4798      	blx	r3
    82b6:	0003      	movs	r3, r0
    82b8:	001a      	movs	r2, r3
    82ba:	4b39      	ldr	r3, [pc, #228]	; (83a0 <prvNotifyQueueSetContainer+0x174>)
    82bc:	5c9b      	ldrb	r3, [r3, r2]
    82be:	3320      	adds	r3, #32
    82c0:	b2db      	uxtb	r3, r3
    82c2:	001d      	movs	r5, r3
    82c4:	e000      	b.n	82c8 <prvNotifyQueueSetContainer+0x9c>
    82c6:	2525      	movs	r5, #37	; 0x25
    82c8:	693b      	ldr	r3, [r7, #16]
    82ca:	0018      	movs	r0, r3
    82cc:	4b33      	ldr	r3, [pc, #204]	; (839c <prvNotifyQueueSetContainer+0x170>)
    82ce:	4798      	blx	r3
    82d0:	0003      	movs	r3, r0
    82d2:	001a      	movs	r2, r3
    82d4:	4b32      	ldr	r3, [pc, #200]	; (83a0 <prvNotifyQueueSetContainer+0x174>)
    82d6:	5c9c      	ldrb	r4, [r3, r2]
    82d8:	693b      	ldr	r3, [r7, #16]
    82da:	0018      	movs	r0, r3
    82dc:	4b31      	ldr	r3, [pc, #196]	; (83a4 <prvNotifyQueueSetContainer+0x178>)
    82de:	4798      	blx	r3
    82e0:	0003      	movs	r3, r0
    82e2:	b2db      	uxtb	r3, r3
    82e4:	001a      	movs	r2, r3
    82e6:	0021      	movs	r1, r4
    82e8:	0028      	movs	r0, r5
    82ea:	4b2f      	ldr	r3, [pc, #188]	; (83a8 <prvNotifyQueueSetContainer+0x17c>)
    82ec:	4798      	blx	r3
    82ee:	693b      	ldr	r3, [r7, #16]
    82f0:	0018      	movs	r0, r3
    82f2:	4b2a      	ldr	r3, [pc, #168]	; (839c <prvNotifyQueueSetContainer+0x170>)
    82f4:	4798      	blx	r3
    82f6:	0003      	movs	r3, r0
    82f8:	001a      	movs	r2, r3
    82fa:	4b29      	ldr	r3, [pc, #164]	; (83a0 <prvNotifyQueueSetContainer+0x174>)
    82fc:	5c9c      	ldrb	r4, [r3, r2]
    82fe:	693b      	ldr	r3, [r7, #16]
    8300:	0018      	movs	r0, r3
    8302:	4b28      	ldr	r3, [pc, #160]	; (83a4 <prvNotifyQueueSetContainer+0x178>)
    8304:	4798      	blx	r3
    8306:	0003      	movs	r3, r0
    8308:	b2dd      	uxtb	r5, r3
    830a:	693b      	ldr	r3, [r7, #16]
    830c:	0018      	movs	r0, r3
    830e:	4b23      	ldr	r3, [pc, #140]	; (839c <prvNotifyQueueSetContainer+0x170>)
    8310:	4798      	blx	r3
    8312:	0003      	movs	r3, r0
    8314:	001a      	movs	r2, r3
    8316:	4b22      	ldr	r3, [pc, #136]	; (83a0 <prvNotifyQueueSetContainer+0x174>)
    8318:	5c9b      	ldrb	r3, [r3, r2]
    831a:	2b02      	cmp	r3, #2
    831c:	d005      	beq.n	832a <prvNotifyQueueSetContainer+0xfe>
    831e:	693b      	ldr	r3, [r7, #16]
    8320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8322:	b2db      	uxtb	r3, r3
    8324:	3301      	adds	r3, #1
    8326:	b2db      	uxtb	r3, r3
    8328:	e000      	b.n	832c <prvNotifyQueueSetContainer+0x100>
    832a:	2300      	movs	r3, #0
    832c:	001a      	movs	r2, r3
    832e:	0029      	movs	r1, r5
    8330:	0020      	movs	r0, r4
    8332:	4b1e      	ldr	r3, [pc, #120]	; (83ac <prvNotifyQueueSetContainer+0x180>)
    8334:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    8336:	683a      	ldr	r2, [r7, #0]
    8338:	1d39      	adds	r1, r7, #4
    833a:	693b      	ldr	r3, [r7, #16]
    833c:	0018      	movs	r0, r3
    833e:	4b1c      	ldr	r3, [pc, #112]	; (83b0 <prvNotifyQueueSetContainer+0x184>)
    8340:	4798      	blx	r3
    8342:	0003      	movs	r3, r0
    8344:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    8346:	230f      	movs	r3, #15
    8348:	18fb      	adds	r3, r7, r3
    834a:	781b      	ldrb	r3, [r3, #0]
    834c:	b25b      	sxtb	r3, r3
    834e:	3301      	adds	r3, #1
    8350:	d10d      	bne.n	836e <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    8352:	693b      	ldr	r3, [r7, #16]
    8354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8356:	2b00      	cmp	r3, #0
    8358:	d012      	beq.n	8380 <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    835a:	693b      	ldr	r3, [r7, #16]
    835c:	3324      	adds	r3, #36	; 0x24
    835e:	0018      	movs	r0, r3
    8360:	4b14      	ldr	r3, [pc, #80]	; (83b4 <prvNotifyQueueSetContainer+0x188>)
    8362:	4798      	blx	r3
    8364:	1e03      	subs	r3, r0, #0
    8366:	d00b      	beq.n	8380 <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    8368:	2301      	movs	r3, #1
    836a:	617b      	str	r3, [r7, #20]
    836c:	e008      	b.n	8380 <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    836e:	230f      	movs	r3, #15
    8370:	18fb      	adds	r3, r7, r3
    8372:	781b      	ldrb	r3, [r3, #0]
    8374:	3301      	adds	r3, #1
    8376:	b2db      	uxtb	r3, r3
    8378:	b259      	sxtb	r1, r3
    837a:	693b      	ldr	r3, [r7, #16]
    837c:	2245      	movs	r2, #69	; 0x45
    837e:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    8380:	697b      	ldr	r3, [r7, #20]
	}
    8382:	0018      	movs	r0, r3
    8384:	46bd      	mov	sp, r7
    8386:	b006      	add	sp, #24
    8388:	bdb0      	pop	{r4, r5, r7, pc}
    838a:	46c0      	nop			; (mov r8, r8)
    838c:	000049f5 	.word	0x000049f5
    8390:	00004759 	.word	0x00004759
    8394:	2000010c 	.word	0x2000010c
    8398:	00004819 	.word	0x00004819
    839c:	00004719 	.word	0x00004719
    83a0:	20000100 	.word	0x20000100
    83a4:	000047f9 	.word	0x000047f9
    83a8:	00005151 	.word	0x00005151
    83ac:	000057ad 	.word	0x000057ad
    83b0:	00007f29 	.word	0x00007f29
    83b4:	00008fed 	.word	0x00008fed

000083b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    83b8:	b590      	push	{r4, r7, lr}
    83ba:	b08d      	sub	sp, #52	; 0x34
    83bc:	af04      	add	r7, sp, #16
    83be:	60f8      	str	r0, [r7, #12]
    83c0:	60b9      	str	r1, [r7, #8]
    83c2:	603b      	str	r3, [r7, #0]
    83c4:	1dbb      	adds	r3, r7, #6
    83c6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    83c8:	1dbb      	adds	r3, r7, #6
    83ca:	881b      	ldrh	r3, [r3, #0]
    83cc:	009b      	lsls	r3, r3, #2
    83ce:	0018      	movs	r0, r3
    83d0:	4b1d      	ldr	r3, [pc, #116]	; (8448 <xTaskCreate+0x90>)
    83d2:	4798      	blx	r3
    83d4:	0003      	movs	r3, r0
    83d6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    83d8:	697b      	ldr	r3, [r7, #20]
    83da:	2b00      	cmp	r3, #0
    83dc:	d010      	beq.n	8400 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    83de:	2054      	movs	r0, #84	; 0x54
    83e0:	4b19      	ldr	r3, [pc, #100]	; (8448 <xTaskCreate+0x90>)
    83e2:	4798      	blx	r3
    83e4:	0003      	movs	r3, r0
    83e6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    83e8:	69fb      	ldr	r3, [r7, #28]
    83ea:	2b00      	cmp	r3, #0
    83ec:	d003      	beq.n	83f6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    83ee:	69fb      	ldr	r3, [r7, #28]
    83f0:	697a      	ldr	r2, [r7, #20]
    83f2:	631a      	str	r2, [r3, #48]	; 0x30
    83f4:	e006      	b.n	8404 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    83f6:	697b      	ldr	r3, [r7, #20]
    83f8:	0018      	movs	r0, r3
    83fa:	4b14      	ldr	r3, [pc, #80]	; (844c <xTaskCreate+0x94>)
    83fc:	4798      	blx	r3
    83fe:	e001      	b.n	8404 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    8400:	2300      	movs	r3, #0
    8402:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    8404:	69fb      	ldr	r3, [r7, #28]
    8406:	2b00      	cmp	r3, #0
    8408:	d016      	beq.n	8438 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    840a:	1dbb      	adds	r3, r7, #6
    840c:	881a      	ldrh	r2, [r3, #0]
    840e:	683c      	ldr	r4, [r7, #0]
    8410:	68b9      	ldr	r1, [r7, #8]
    8412:	68f8      	ldr	r0, [r7, #12]
    8414:	2300      	movs	r3, #0
    8416:	9303      	str	r3, [sp, #12]
    8418:	69fb      	ldr	r3, [r7, #28]
    841a:	9302      	str	r3, [sp, #8]
    841c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    841e:	9301      	str	r3, [sp, #4]
    8420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8422:	9300      	str	r3, [sp, #0]
    8424:	0023      	movs	r3, r4
    8426:	4c0a      	ldr	r4, [pc, #40]	; (8450 <xTaskCreate+0x98>)
    8428:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    842a:	69fb      	ldr	r3, [r7, #28]
    842c:	0018      	movs	r0, r3
    842e:	4b09      	ldr	r3, [pc, #36]	; (8454 <xTaskCreate+0x9c>)
    8430:	4798      	blx	r3
			xReturn = pdPASS;
    8432:	2301      	movs	r3, #1
    8434:	61bb      	str	r3, [r7, #24]
    8436:	e002      	b.n	843e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    8438:	2301      	movs	r3, #1
    843a:	425b      	negs	r3, r3
    843c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    843e:	69bb      	ldr	r3, [r7, #24]
	}
    8440:	0018      	movs	r0, r3
    8442:	46bd      	mov	sp, r7
    8444:	b009      	add	sp, #36	; 0x24
    8446:	bd90      	pop	{r4, r7, pc}
    8448:	00006891 	.word	0x00006891
    844c:	00006955 	.word	0x00006955
    8450:	00008459 	.word	0x00008459
    8454:	00008569 	.word	0x00008569

00008458 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    8458:	b580      	push	{r7, lr}
    845a:	b086      	sub	sp, #24
    845c:	af00      	add	r7, sp, #0
    845e:	60f8      	str	r0, [r7, #12]
    8460:	60b9      	str	r1, [r7, #8]
    8462:	607a      	str	r2, [r7, #4]
    8464:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    8466:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8468:	6b18      	ldr	r0, [r3, #48]	; 0x30
    846a:	687b      	ldr	r3, [r7, #4]
    846c:	009b      	lsls	r3, r3, #2
    846e:	001a      	movs	r2, r3
    8470:	21a5      	movs	r1, #165	; 0xa5
    8472:	4b39      	ldr	r3, [pc, #228]	; (8558 <prvInitialiseNewTask+0x100>)
    8474:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    8476:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    847a:	687b      	ldr	r3, [r7, #4]
    847c:	4937      	ldr	r1, [pc, #220]	; (855c <prvInitialiseNewTask+0x104>)
    847e:	468c      	mov	ip, r1
    8480:	4463      	add	r3, ip
    8482:	009b      	lsls	r3, r3, #2
    8484:	18d3      	adds	r3, r2, r3
    8486:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    8488:	693b      	ldr	r3, [r7, #16]
    848a:	2207      	movs	r2, #7
    848c:	4393      	bics	r3, r2
    848e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    8490:	693b      	ldr	r3, [r7, #16]
    8492:	2207      	movs	r2, #7
    8494:	4013      	ands	r3, r2
    8496:	d001      	beq.n	849c <prvInitialiseNewTask+0x44>
    8498:	b672      	cpsid	i
    849a:	e7fe      	b.n	849a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    849c:	2300      	movs	r3, #0
    849e:	617b      	str	r3, [r7, #20]
    84a0:	e013      	b.n	84ca <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    84a2:	68ba      	ldr	r2, [r7, #8]
    84a4:	697b      	ldr	r3, [r7, #20]
    84a6:	18d3      	adds	r3, r2, r3
    84a8:	7818      	ldrb	r0, [r3, #0]
    84aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    84ac:	2134      	movs	r1, #52	; 0x34
    84ae:	697b      	ldr	r3, [r7, #20]
    84b0:	18d3      	adds	r3, r2, r3
    84b2:	185b      	adds	r3, r3, r1
    84b4:	1c02      	adds	r2, r0, #0
    84b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    84b8:	68ba      	ldr	r2, [r7, #8]
    84ba:	697b      	ldr	r3, [r7, #20]
    84bc:	18d3      	adds	r3, r2, r3
    84be:	781b      	ldrb	r3, [r3, #0]
    84c0:	2b00      	cmp	r3, #0
    84c2:	d006      	beq.n	84d2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    84c4:	697b      	ldr	r3, [r7, #20]
    84c6:	3301      	adds	r3, #1
    84c8:	617b      	str	r3, [r7, #20]
    84ca:	697b      	ldr	r3, [r7, #20]
    84cc:	2b07      	cmp	r3, #7
    84ce:	d9e8      	bls.n	84a2 <prvInitialiseNewTask+0x4a>
    84d0:	e000      	b.n	84d4 <prvInitialiseNewTask+0x7c>
		{
			break;
    84d2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    84d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    84d6:	223b      	movs	r2, #59	; 0x3b
    84d8:	2100      	movs	r1, #0
    84da:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    84dc:	6a3b      	ldr	r3, [r7, #32]
    84de:	2b04      	cmp	r3, #4
    84e0:	d901      	bls.n	84e6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    84e2:	2304      	movs	r3, #4
    84e4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    84e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    84e8:	6a3a      	ldr	r2, [r7, #32]
    84ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    84ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    84ee:	6a3a      	ldr	r2, [r7, #32]
    84f0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    84f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    84f4:	2200      	movs	r2, #0
    84f6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    84f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    84fa:	3304      	adds	r3, #4
    84fc:	0018      	movs	r0, r3
    84fe:	4b18      	ldr	r3, [pc, #96]	; (8560 <prvInitialiseNewTask+0x108>)
    8500:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    8502:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8504:	3318      	adds	r3, #24
    8506:	0018      	movs	r0, r3
    8508:	4b15      	ldr	r3, [pc, #84]	; (8560 <prvInitialiseNewTask+0x108>)
    850a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    850e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8510:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8512:	6a3b      	ldr	r3, [r7, #32]
    8514:	2205      	movs	r2, #5
    8516:	1ad2      	subs	r2, r2, r3
    8518:	6abb      	ldr	r3, [r7, #40]	; 0x28
    851a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    851e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8520:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    8522:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8524:	2200      	movs	r2, #0
    8526:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    8528:	6abb      	ldr	r3, [r7, #40]	; 0x28
    852a:	2250      	movs	r2, #80	; 0x50
    852c:	2100      	movs	r1, #0
    852e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    8530:	683a      	ldr	r2, [r7, #0]
    8532:	68f9      	ldr	r1, [r7, #12]
    8534:	693b      	ldr	r3, [r7, #16]
    8536:	0018      	movs	r0, r3
    8538:	4b0a      	ldr	r3, [pc, #40]	; (8564 <prvInitialiseNewTask+0x10c>)
    853a:	4798      	blx	r3
    853c:	0002      	movs	r2, r0
    853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8540:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    8542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8544:	2b00      	cmp	r3, #0
    8546:	d002      	beq.n	854e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    8548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    854a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    854c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    854e:	46c0      	nop			; (mov r8, r8)
    8550:	46bd      	mov	sp, r7
    8552:	b006      	add	sp, #24
    8554:	bd80      	pop	{r7, pc}
    8556:	46c0      	nop			; (mov r8, r8)
    8558:	00020f1f 	.word	0x00020f1f
    855c:	3fffffff 	.word	0x3fffffff
    8560:	0000650d 	.word	0x0000650d
    8564:	00006625 	.word	0x00006625

00008568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    8568:	b580      	push	{r7, lr}
    856a:	b082      	sub	sp, #8
    856c:	af00      	add	r7, sp, #0
    856e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    8570:	4b60      	ldr	r3, [pc, #384]	; (86f4 <prvAddNewTaskToReadyList+0x18c>)
    8572:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    8574:	4b60      	ldr	r3, [pc, #384]	; (86f8 <prvAddNewTaskToReadyList+0x190>)
    8576:	681b      	ldr	r3, [r3, #0]
    8578:	1c5a      	adds	r2, r3, #1
    857a:	4b5f      	ldr	r3, [pc, #380]	; (86f8 <prvAddNewTaskToReadyList+0x190>)
    857c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    857e:	4b5f      	ldr	r3, [pc, #380]	; (86fc <prvAddNewTaskToReadyList+0x194>)
    8580:	681b      	ldr	r3, [r3, #0]
    8582:	2b00      	cmp	r3, #0
    8584:	d109      	bne.n	859a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    8586:	4b5d      	ldr	r3, [pc, #372]	; (86fc <prvAddNewTaskToReadyList+0x194>)
    8588:	687a      	ldr	r2, [r7, #4]
    858a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    858c:	4b5a      	ldr	r3, [pc, #360]	; (86f8 <prvAddNewTaskToReadyList+0x190>)
    858e:	681b      	ldr	r3, [r3, #0]
    8590:	2b01      	cmp	r3, #1
    8592:	d110      	bne.n	85b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    8594:	4b5a      	ldr	r3, [pc, #360]	; (8700 <prvAddNewTaskToReadyList+0x198>)
    8596:	4798      	blx	r3
    8598:	e00d      	b.n	85b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    859a:	4b5a      	ldr	r3, [pc, #360]	; (8704 <prvAddNewTaskToReadyList+0x19c>)
    859c:	681b      	ldr	r3, [r3, #0]
    859e:	2b00      	cmp	r3, #0
    85a0:	d109      	bne.n	85b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    85a2:	4b56      	ldr	r3, [pc, #344]	; (86fc <prvAddNewTaskToReadyList+0x194>)
    85a4:	681b      	ldr	r3, [r3, #0]
    85a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    85a8:	687b      	ldr	r3, [r7, #4]
    85aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    85ac:	429a      	cmp	r2, r3
    85ae:	d802      	bhi.n	85b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    85b0:	4b52      	ldr	r3, [pc, #328]	; (86fc <prvAddNewTaskToReadyList+0x194>)
    85b2:	687a      	ldr	r2, [r7, #4]
    85b4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    85b6:	4b54      	ldr	r3, [pc, #336]	; (8708 <prvAddNewTaskToReadyList+0x1a0>)
    85b8:	681b      	ldr	r3, [r3, #0]
    85ba:	1c5a      	adds	r2, r3, #1
    85bc:	4b52      	ldr	r3, [pc, #328]	; (8708 <prvAddNewTaskToReadyList+0x1a0>)
    85be:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    85c0:	4b51      	ldr	r3, [pc, #324]	; (8708 <prvAddNewTaskToReadyList+0x1a0>)
    85c2:	681a      	ldr	r2, [r3, #0]
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
    85c8:	687b      	ldr	r3, [r7, #4]
    85ca:	2b00      	cmp	r3, #0
    85cc:	d052      	beq.n	8674 <prvAddNewTaskToReadyList+0x10c>
    85ce:	2003      	movs	r0, #3
    85d0:	4b4e      	ldr	r3, [pc, #312]	; (870c <prvAddNewTaskToReadyList+0x1a4>)
    85d2:	4798      	blx	r3
    85d4:	0003      	movs	r3, r0
    85d6:	b29a      	uxth	r2, r3
    85d8:	687b      	ldr	r3, [r7, #4]
    85da:	0011      	movs	r1, r2
    85dc:	0018      	movs	r0, r3
    85de:	4b4c      	ldr	r3, [pc, #304]	; (8710 <prvAddNewTaskToReadyList+0x1a8>)
    85e0:	4798      	blx	r3
    85e2:	4b4c      	ldr	r3, [pc, #304]	; (8714 <prvAddNewTaskToReadyList+0x1ac>)
    85e4:	881a      	ldrh	r2, [r3, #0]
    85e6:	687b      	ldr	r3, [r7, #4]
    85e8:	0011      	movs	r1, r2
    85ea:	0018      	movs	r0, r3
    85ec:	4b4a      	ldr	r3, [pc, #296]	; (8718 <prvAddNewTaskToReadyList+0x1b0>)
    85ee:	4798      	blx	r3
    85f0:	687b      	ldr	r3, [r7, #4]
    85f2:	0018      	movs	r0, r3
    85f4:	4b49      	ldr	r3, [pc, #292]	; (871c <prvAddNewTaskToReadyList+0x1b4>)
    85f6:	4798      	blx	r3
    85f8:	0003      	movs	r3, r0
    85fa:	b2d9      	uxtb	r1, r3
    85fc:	687b      	ldr	r3, [r7, #4]
    85fe:	3334      	adds	r3, #52	; 0x34
    8600:	001a      	movs	r2, r3
    8602:	2003      	movs	r0, #3
    8604:	4b46      	ldr	r3, [pc, #280]	; (8720 <prvAddNewTaskToReadyList+0x1b8>)
    8606:	4798      	blx	r3
    8608:	687b      	ldr	r3, [r7, #4]
    860a:	0018      	movs	r0, r3
    860c:	4b43      	ldr	r3, [pc, #268]	; (871c <prvAddNewTaskToReadyList+0x1b4>)
    860e:	4798      	blx	r3
    8610:	0003      	movs	r3, r0
    8612:	b2d9      	uxtb	r1, r3
    8614:	687b      	ldr	r3, [r7, #4]
    8616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8618:	b2db      	uxtb	r3, r3
    861a:	001a      	movs	r2, r3
    861c:	2003      	movs	r0, #3
    861e:	4b41      	ldr	r3, [pc, #260]	; (8724 <prvAddNewTaskToReadyList+0x1bc>)
    8620:	4798      	blx	r3
    8622:	4b41      	ldr	r3, [pc, #260]	; (8728 <prvAddNewTaskToReadyList+0x1c0>)
    8624:	4798      	blx	r3
    8626:	0003      	movs	r3, r0
    8628:	0018      	movs	r0, r3
    862a:	4b40      	ldr	r3, [pc, #256]	; (872c <prvAddNewTaskToReadyList+0x1c4>)
    862c:	4798      	blx	r3
    862e:	0003      	movs	r3, r0
    8630:	001a      	movs	r2, r3
    8632:	4b3f      	ldr	r3, [pc, #252]	; (8730 <prvAddNewTaskToReadyList+0x1c8>)
    8634:	881b      	ldrh	r3, [r3, #0]
    8636:	4013      	ands	r3, r2
    8638:	b29b      	uxth	r3, r3
    863a:	2b00      	cmp	r3, #0
    863c:	d016      	beq.n	866c <prvAddNewTaskToReadyList+0x104>
    863e:	687b      	ldr	r3, [r7, #4]
    8640:	0018      	movs	r0, r3
    8642:	4b3a      	ldr	r3, [pc, #232]	; (872c <prvAddNewTaskToReadyList+0x1c4>)
    8644:	4798      	blx	r3
    8646:	0003      	movs	r3, r0
    8648:	001a      	movs	r2, r3
    864a:	4b39      	ldr	r3, [pc, #228]	; (8730 <prvAddNewTaskToReadyList+0x1c8>)
    864c:	881b      	ldrh	r3, [r3, #0]
    864e:	4013      	ands	r3, r2
    8650:	b29b      	uxth	r3, r3
    8652:	2b00      	cmp	r3, #0
    8654:	d00a      	beq.n	866c <prvAddNewTaskToReadyList+0x104>
    8656:	687b      	ldr	r3, [r7, #4]
    8658:	0018      	movs	r0, r3
    865a:	4b30      	ldr	r3, [pc, #192]	; (871c <prvAddNewTaskToReadyList+0x1b4>)
    865c:	4798      	blx	r3
    865e:	0003      	movs	r3, r0
    8660:	b2db      	uxtb	r3, r3
    8662:	001a      	movs	r2, r3
    8664:	2103      	movs	r1, #3
    8666:	201b      	movs	r0, #27
    8668:	4b32      	ldr	r3, [pc, #200]	; (8734 <prvAddNewTaskToReadyList+0x1cc>)
    866a:	4798      	blx	r3
    866c:	687b      	ldr	r3, [r7, #4]
    866e:	0018      	movs	r0, r3
    8670:	4b31      	ldr	r3, [pc, #196]	; (8738 <prvAddNewTaskToReadyList+0x1d0>)
    8672:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
    8674:	687b      	ldr	r3, [r7, #4]
    8676:	0018      	movs	r0, r3
    8678:	4b2c      	ldr	r3, [pc, #176]	; (872c <prvAddNewTaskToReadyList+0x1c4>)
    867a:	4798      	blx	r3
    867c:	0003      	movs	r3, r0
    867e:	001a      	movs	r2, r3
    8680:	4b2b      	ldr	r3, [pc, #172]	; (8730 <prvAddNewTaskToReadyList+0x1c8>)
    8682:	881b      	ldrh	r3, [r3, #0]
    8684:	4013      	ands	r3, r2
    8686:	b29b      	uxth	r3, r3
    8688:	2b00      	cmp	r3, #0
    868a:	d008      	beq.n	869e <prvAddNewTaskToReadyList+0x136>
    868c:	687b      	ldr	r3, [r7, #4]
    868e:	0018      	movs	r0, r3
    8690:	4b22      	ldr	r3, [pc, #136]	; (871c <prvAddNewTaskToReadyList+0x1b4>)
    8692:	4798      	blx	r3
    8694:	0003      	movs	r3, r0
    8696:	b2db      	uxtb	r3, r3
    8698:	0018      	movs	r0, r3
    869a:	4b28      	ldr	r3, [pc, #160]	; (873c <prvAddNewTaskToReadyList+0x1d4>)
    869c:	4798      	blx	r3
    869e:	687b      	ldr	r3, [r7, #4]
    86a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    86a2:	4b27      	ldr	r3, [pc, #156]	; (8740 <prvAddNewTaskToReadyList+0x1d8>)
    86a4:	681b      	ldr	r3, [r3, #0]
    86a6:	429a      	cmp	r2, r3
    86a8:	d903      	bls.n	86b2 <prvAddNewTaskToReadyList+0x14a>
    86aa:	687b      	ldr	r3, [r7, #4]
    86ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    86ae:	4b24      	ldr	r3, [pc, #144]	; (8740 <prvAddNewTaskToReadyList+0x1d8>)
    86b0:	601a      	str	r2, [r3, #0]
    86b2:	687b      	ldr	r3, [r7, #4]
    86b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    86b6:	0013      	movs	r3, r2
    86b8:	009b      	lsls	r3, r3, #2
    86ba:	189b      	adds	r3, r3, r2
    86bc:	009b      	lsls	r3, r3, #2
    86be:	4a21      	ldr	r2, [pc, #132]	; (8744 <prvAddNewTaskToReadyList+0x1dc>)
    86c0:	189a      	adds	r2, r3, r2
    86c2:	687b      	ldr	r3, [r7, #4]
    86c4:	3304      	adds	r3, #4
    86c6:	0019      	movs	r1, r3
    86c8:	0010      	movs	r0, r2
    86ca:	4b1f      	ldr	r3, [pc, #124]	; (8748 <prvAddNewTaskToReadyList+0x1e0>)
    86cc:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    86ce:	4b1f      	ldr	r3, [pc, #124]	; (874c <prvAddNewTaskToReadyList+0x1e4>)
    86d0:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    86d2:	4b0c      	ldr	r3, [pc, #48]	; (8704 <prvAddNewTaskToReadyList+0x19c>)
    86d4:	681b      	ldr	r3, [r3, #0]
    86d6:	2b00      	cmp	r3, #0
    86d8:	d008      	beq.n	86ec <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    86da:	4b08      	ldr	r3, [pc, #32]	; (86fc <prvAddNewTaskToReadyList+0x194>)
    86dc:	681b      	ldr	r3, [r3, #0]
    86de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    86e0:	687b      	ldr	r3, [r7, #4]
    86e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    86e4:	429a      	cmp	r2, r3
    86e6:	d201      	bcs.n	86ec <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
    86e8:	4b19      	ldr	r3, [pc, #100]	; (8750 <prvAddNewTaskToReadyList+0x1e8>)
    86ea:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    86ec:	46c0      	nop			; (mov r8, r8)
    86ee:	46bd      	mov	sp, r7
    86f0:	b002      	add	sp, #8
    86f2:	bd80      	pop	{r7, pc}
    86f4:	00006759 	.word	0x00006759
    86f8:	20003c40 	.word	0x20003c40
    86fc:	20003b68 	.word	0x20003b68
    8700:	00009289 	.word	0x00009289
    8704:	20003c4c 	.word	0x20003c4c
    8708:	20003c5c 	.word	0x20003c5c
    870c:	00005cd9 	.word	0x00005cd9
    8710:	0000477d 	.word	0x0000477d
    8714:	2000010e 	.word	0x2000010e
    8718:	000047b9 	.word	0x000047b9
    871c:	00004739 	.word	0x00004739
    8720:	00005f09 	.word	0x00005f09
    8724:	0000566d 	.word	0x0000566d
    8728:	000049f5 	.word	0x000049f5
    872c:	00004759 	.word	0x00004759
    8730:	2000010c 	.word	0x2000010c
    8734:	00005151 	.word	0x00005151
    8738:	000048b9 	.word	0x000048b9
    873c:	00004f09 	.word	0x00004f09
    8740:	20003c48 	.word	0x20003c48
    8744:	20003b6c 	.word	0x20003b6c
    8748:	00006523 	.word	0x00006523
    874c:	0000677d 	.word	0x0000677d
    8750:	00006741 	.word	0x00006741

00008754 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    8754:	b580      	push	{r7, lr}
    8756:	b084      	sub	sp, #16
    8758:	af00      	add	r7, sp, #0
    875a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    875c:	2300      	movs	r3, #0
    875e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    8760:	687b      	ldr	r3, [r7, #4]
    8762:	2b00      	cmp	r3, #0
    8764:	d045      	beq.n	87f2 <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    8766:	4b27      	ldr	r3, [pc, #156]	; (8804 <vTaskDelay+0xb0>)
    8768:	681b      	ldr	r3, [r3, #0]
    876a:	2b00      	cmp	r3, #0
    876c:	d001      	beq.n	8772 <vTaskDelay+0x1e>
    876e:	b672      	cpsid	i
    8770:	e7fe      	b.n	8770 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    8772:	4b25      	ldr	r3, [pc, #148]	; (8808 <vTaskDelay+0xb4>)
    8774:	4798      	blx	r3
			{
				traceTASK_DELAY();
    8776:	4b25      	ldr	r3, [pc, #148]	; (880c <vTaskDelay+0xb8>)
    8778:	681b      	ldr	r3, [r3, #0]
    877a:	0018      	movs	r0, r3
    877c:	4b24      	ldr	r3, [pc, #144]	; (8810 <vTaskDelay+0xbc>)
    877e:	4798      	blx	r3
    8780:	0003      	movs	r3, r0
    8782:	001a      	movs	r2, r3
    8784:	4b23      	ldr	r3, [pc, #140]	; (8814 <vTaskDelay+0xc0>)
    8786:	881b      	ldrh	r3, [r3, #0]
    8788:	4013      	ands	r3, r2
    878a:	b29b      	uxth	r3, r3
    878c:	2b00      	cmp	r3, #0
    878e:	d00e      	beq.n	87ae <vTaskDelay+0x5a>
    8790:	687b      	ldr	r3, [r7, #4]
    8792:	0019      	movs	r1, r3
    8794:	2089      	movs	r0, #137	; 0x89
    8796:	4b20      	ldr	r3, [pc, #128]	; (8818 <vTaskDelay+0xc4>)
    8798:	4798      	blx	r3
    879a:	4b1c      	ldr	r3, [pc, #112]	; (880c <vTaskDelay+0xb8>)
    879c:	681b      	ldr	r3, [r3, #0]
    879e:	0018      	movs	r0, r3
    87a0:	4b1e      	ldr	r3, [pc, #120]	; (881c <vTaskDelay+0xc8>)
    87a2:	4798      	blx	r3
    87a4:	0003      	movs	r3, r0
    87a6:	b2db      	uxtb	r3, r3
    87a8:	0018      	movs	r0, r3
    87aa:	4b1d      	ldr	r3, [pc, #116]	; (8820 <vTaskDelay+0xcc>)
    87ac:	4798      	blx	r3
    87ae:	4b1d      	ldr	r3, [pc, #116]	; (8824 <vTaskDelay+0xd0>)
    87b0:	4798      	blx	r3
    87b2:	0003      	movs	r3, r0
    87b4:	0018      	movs	r0, r3
    87b6:	4b16      	ldr	r3, [pc, #88]	; (8810 <vTaskDelay+0xbc>)
    87b8:	4798      	blx	r3
    87ba:	0003      	movs	r3, r0
    87bc:	001a      	movs	r2, r3
    87be:	4b15      	ldr	r3, [pc, #84]	; (8814 <vTaskDelay+0xc0>)
    87c0:	881b      	ldrh	r3, [r3, #0]
    87c2:	4013      	ands	r3, r2
    87c4:	b29b      	uxth	r3, r3
    87c6:	2b00      	cmp	r3, #0
    87c8:	d00a      	beq.n	87e0 <vTaskDelay+0x8c>
    87ca:	4b16      	ldr	r3, [pc, #88]	; (8824 <vTaskDelay+0xd0>)
    87cc:	4798      	blx	r3
    87ce:	0003      	movs	r3, r0
    87d0:	0018      	movs	r0, r3
    87d2:	4b12      	ldr	r3, [pc, #72]	; (881c <vTaskDelay+0xc8>)
    87d4:	4798      	blx	r3
    87d6:	0003      	movs	r3, r0
    87d8:	b2db      	uxtb	r3, r3
    87da:	0018      	movs	r0, r3
    87dc:	4b10      	ldr	r3, [pc, #64]	; (8820 <vTaskDelay+0xcc>)
    87de:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    87e0:	687b      	ldr	r3, [r7, #4]
    87e2:	2100      	movs	r1, #0
    87e4:	0018      	movs	r0, r3
    87e6:	4b10      	ldr	r3, [pc, #64]	; (8828 <vTaskDelay+0xd4>)
    87e8:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    87ea:	4b10      	ldr	r3, [pc, #64]	; (882c <vTaskDelay+0xd8>)
    87ec:	4798      	blx	r3
    87ee:	0003      	movs	r3, r0
    87f0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    87f2:	68fb      	ldr	r3, [r7, #12]
    87f4:	2b00      	cmp	r3, #0
    87f6:	d101      	bne.n	87fc <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
    87f8:	4b0d      	ldr	r3, [pc, #52]	; (8830 <vTaskDelay+0xdc>)
    87fa:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    87fc:	46c0      	nop			; (mov r8, r8)
    87fe:	46bd      	mov	sp, r7
    8800:	b004      	add	sp, #16
    8802:	bd80      	pop	{r7, pc}
    8804:	20003c68 	.word	0x20003c68
    8808:	00008a15 	.word	0x00008a15
    880c:	20003b68 	.word	0x20003b68
    8810:	00004759 	.word	0x00004759
    8814:	2000010c 	.word	0x2000010c
    8818:	00005459 	.word	0x00005459
    881c:	00004739 	.word	0x00004739
    8820:	000058e9 	.word	0x000058e9
    8824:	000049f5 	.word	0x000049f5
    8828:	0000996d 	.word	0x0000996d
    882c:	00008a2d 	.word	0x00008a2d
    8830:	00006741 	.word	0x00006741

00008834 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    8834:	b580      	push	{r7, lr}
    8836:	b084      	sub	sp, #16
    8838:	af00      	add	r7, sp, #0
    883a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    883c:	4b42      	ldr	r3, [pc, #264]	; (8948 <vTaskSuspend+0x114>)
    883e:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    8840:	687b      	ldr	r3, [r7, #4]
    8842:	2b00      	cmp	r3, #0
    8844:	d102      	bne.n	884c <vTaskSuspend+0x18>
    8846:	4b41      	ldr	r3, [pc, #260]	; (894c <vTaskSuspend+0x118>)
    8848:	681b      	ldr	r3, [r3, #0]
    884a:	e000      	b.n	884e <vTaskSuspend+0x1a>
    884c:	687b      	ldr	r3, [r7, #4]
    884e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
    8850:	4b3f      	ldr	r3, [pc, #252]	; (8950 <vTaskSuspend+0x11c>)
    8852:	4798      	blx	r3
    8854:	0003      	movs	r3, r0
    8856:	0018      	movs	r0, r3
    8858:	4b3e      	ldr	r3, [pc, #248]	; (8954 <vTaskSuspend+0x120>)
    885a:	4798      	blx	r3
    885c:	0003      	movs	r3, r0
    885e:	001a      	movs	r2, r3
    8860:	4b3d      	ldr	r3, [pc, #244]	; (8958 <vTaskSuspend+0x124>)
    8862:	881b      	ldrh	r3, [r3, #0]
    8864:	4013      	ands	r3, r2
    8866:	b29b      	uxth	r3, r3
    8868:	2b00      	cmp	r3, #0
    886a:	d016      	beq.n	889a <vTaskSuspend+0x66>
    886c:	68fb      	ldr	r3, [r7, #12]
    886e:	0018      	movs	r0, r3
    8870:	4b38      	ldr	r3, [pc, #224]	; (8954 <vTaskSuspend+0x120>)
    8872:	4798      	blx	r3
    8874:	0003      	movs	r3, r0
    8876:	001a      	movs	r2, r3
    8878:	4b37      	ldr	r3, [pc, #220]	; (8958 <vTaskSuspend+0x124>)
    887a:	881b      	ldrh	r3, [r3, #0]
    887c:	4013      	ands	r3, r2
    887e:	b29b      	uxth	r3, r3
    8880:	2b00      	cmp	r3, #0
    8882:	d00a      	beq.n	889a <vTaskSuspend+0x66>
    8884:	68fb      	ldr	r3, [r7, #12]
    8886:	0018      	movs	r0, r3
    8888:	4b34      	ldr	r3, [pc, #208]	; (895c <vTaskSuspend+0x128>)
    888a:	4798      	blx	r3
    888c:	0003      	movs	r3, r0
    888e:	b2db      	uxtb	r3, r3
    8890:	001a      	movs	r2, r3
    8892:	2103      	movs	r1, #3
    8894:	208a      	movs	r0, #138	; 0x8a
    8896:	4b32      	ldr	r3, [pc, #200]	; (8960 <vTaskSuspend+0x12c>)
    8898:	4798      	blx	r3
    889a:	68fb      	ldr	r3, [r7, #12]
    889c:	0018      	movs	r0, r3
    889e:	4b2f      	ldr	r3, [pc, #188]	; (895c <vTaskSuspend+0x128>)
    88a0:	4798      	blx	r3
    88a2:	0003      	movs	r3, r0
    88a4:	b2db      	uxtb	r3, r3
    88a6:	0018      	movs	r0, r3
    88a8:	4b2e      	ldr	r3, [pc, #184]	; (8964 <vTaskSuspend+0x130>)
    88aa:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    88ac:	68fb      	ldr	r3, [r7, #12]
    88ae:	3304      	adds	r3, #4
    88b0:	0018      	movs	r0, r3
    88b2:	4b2d      	ldr	r3, [pc, #180]	; (8968 <vTaskSuspend+0x134>)
    88b4:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    88b6:	68fb      	ldr	r3, [r7, #12]
    88b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88ba:	2b00      	cmp	r3, #0
    88bc:	d004      	beq.n	88c8 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    88be:	68fb      	ldr	r3, [r7, #12]
    88c0:	3318      	adds	r3, #24
    88c2:	0018      	movs	r0, r3
    88c4:	4b28      	ldr	r3, [pc, #160]	; (8968 <vTaskSuspend+0x134>)
    88c6:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    88c8:	68fb      	ldr	r3, [r7, #12]
    88ca:	1d1a      	adds	r2, r3, #4
    88cc:	4b27      	ldr	r3, [pc, #156]	; (896c <vTaskSuspend+0x138>)
    88ce:	0011      	movs	r1, r2
    88d0:	0018      	movs	r0, r3
    88d2:	4b27      	ldr	r3, [pc, #156]	; (8970 <vTaskSuspend+0x13c>)
    88d4:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    88d6:	68fb      	ldr	r3, [r7, #12]
    88d8:	2250      	movs	r2, #80	; 0x50
    88da:	5c9b      	ldrb	r3, [r3, r2]
    88dc:	b2db      	uxtb	r3, r3
    88de:	2b01      	cmp	r3, #1
    88e0:	d103      	bne.n	88ea <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    88e2:	68fb      	ldr	r3, [r7, #12]
    88e4:	2250      	movs	r2, #80	; 0x50
    88e6:	2100      	movs	r1, #0
    88e8:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    88ea:	4b22      	ldr	r3, [pc, #136]	; (8974 <vTaskSuspend+0x140>)
    88ec:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
    88ee:	4b22      	ldr	r3, [pc, #136]	; (8978 <vTaskSuspend+0x144>)
    88f0:	681b      	ldr	r3, [r3, #0]
    88f2:	2b00      	cmp	r3, #0
    88f4:	d005      	beq.n	8902 <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    88f6:	4b14      	ldr	r3, [pc, #80]	; (8948 <vTaskSuspend+0x114>)
    88f8:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
    88fa:	4b20      	ldr	r3, [pc, #128]	; (897c <vTaskSuspend+0x148>)
    88fc:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
    88fe:	4b1d      	ldr	r3, [pc, #116]	; (8974 <vTaskSuspend+0x140>)
    8900:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    8902:	4b12      	ldr	r3, [pc, #72]	; (894c <vTaskSuspend+0x118>)
    8904:	681b      	ldr	r3, [r3, #0]
    8906:	68fa      	ldr	r2, [r7, #12]
    8908:	429a      	cmp	r2, r3
    890a:	d118      	bne.n	893e <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
    890c:	4b1a      	ldr	r3, [pc, #104]	; (8978 <vTaskSuspend+0x144>)
    890e:	681b      	ldr	r3, [r3, #0]
    8910:	2b00      	cmp	r3, #0
    8912:	d008      	beq.n	8926 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    8914:	4b1a      	ldr	r3, [pc, #104]	; (8980 <vTaskSuspend+0x14c>)
    8916:	681b      	ldr	r3, [r3, #0]
    8918:	2b00      	cmp	r3, #0
    891a:	d001      	beq.n	8920 <vTaskSuspend+0xec>
    891c:	b672      	cpsid	i
    891e:	e7fe      	b.n	891e <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
    8920:	4b18      	ldr	r3, [pc, #96]	; (8984 <vTaskSuspend+0x150>)
    8922:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    8924:	e00b      	b.n	893e <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    8926:	4b11      	ldr	r3, [pc, #68]	; (896c <vTaskSuspend+0x138>)
    8928:	681a      	ldr	r2, [r3, #0]
    892a:	4b17      	ldr	r3, [pc, #92]	; (8988 <vTaskSuspend+0x154>)
    892c:	681b      	ldr	r3, [r3, #0]
    892e:	429a      	cmp	r2, r3
    8930:	d103      	bne.n	893a <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
    8932:	4b06      	ldr	r3, [pc, #24]	; (894c <vTaskSuspend+0x118>)
    8934:	2200      	movs	r2, #0
    8936:	601a      	str	r2, [r3, #0]
	}
    8938:	e001      	b.n	893e <vTaskSuspend+0x10a>
					vTaskSwitchContext();
    893a:	4b14      	ldr	r3, [pc, #80]	; (898c <vTaskSuspend+0x158>)
    893c:	4798      	blx	r3
	}
    893e:	46c0      	nop			; (mov r8, r8)
    8940:	46bd      	mov	sp, r7
    8942:	b004      	add	sp, #16
    8944:	bd80      	pop	{r7, pc}
    8946:	46c0      	nop			; (mov r8, r8)
    8948:	00006759 	.word	0x00006759
    894c:	20003b68 	.word	0x20003b68
    8950:	000049f5 	.word	0x000049f5
    8954:	00004759 	.word	0x00004759
    8958:	2000010c 	.word	0x2000010c
    895c:	00004739 	.word	0x00004739
    8960:	00005151 	.word	0x00005151
    8964:	000058e9 	.word	0x000058e9
    8968:	000065d3 	.word	0x000065d3
    896c:	20003c2c 	.word	0x20003c2c
    8970:	00006523 	.word	0x00006523
    8974:	0000677d 	.word	0x0000677d
    8978:	20003c4c 	.word	0x20003c4c
    897c:	00009419 	.word	0x00009419
    8980:	20003c68 	.word	0x20003c68
    8984:	00006741 	.word	0x00006741
    8988:	20003c40 	.word	0x20003c40
    898c:	00008da9 	.word	0x00008da9

00008990 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    8990:	b590      	push	{r4, r7, lr}
    8992:	b085      	sub	sp, #20
    8994:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    8996:	4916      	ldr	r1, [pc, #88]	; (89f0 <vTaskStartScheduler+0x60>)
    8998:	4816      	ldr	r0, [pc, #88]	; (89f4 <vTaskStartScheduler+0x64>)
    899a:	4b17      	ldr	r3, [pc, #92]	; (89f8 <vTaskStartScheduler+0x68>)
    899c:	9301      	str	r3, [sp, #4]
    899e:	2300      	movs	r3, #0
    89a0:	9300      	str	r3, [sp, #0]
    89a2:	2300      	movs	r3, #0
    89a4:	2264      	movs	r2, #100	; 0x64
    89a6:	4c15      	ldr	r4, [pc, #84]	; (89fc <vTaskStartScheduler+0x6c>)
    89a8:	47a0      	blx	r4
    89aa:	0003      	movs	r3, r0
    89ac:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    89ae:	687b      	ldr	r3, [r7, #4]
    89b0:	2b01      	cmp	r3, #1
    89b2:	d103      	bne.n	89bc <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    89b4:	4b12      	ldr	r3, [pc, #72]	; (8a00 <vTaskStartScheduler+0x70>)
    89b6:	4798      	blx	r3
    89b8:	0003      	movs	r3, r0
    89ba:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    89bc:	687b      	ldr	r3, [r7, #4]
    89be:	2b01      	cmp	r3, #1
    89c0:	d10d      	bne.n	89de <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    89c2:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    89c4:	4b0f      	ldr	r3, [pc, #60]	; (8a04 <vTaskStartScheduler+0x74>)
    89c6:	2201      	movs	r2, #1
    89c8:	4252      	negs	r2, r2
    89ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    89cc:	4b0e      	ldr	r3, [pc, #56]	; (8a08 <vTaskStartScheduler+0x78>)
    89ce:	2201      	movs	r2, #1
    89d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    89d2:	4b0e      	ldr	r3, [pc, #56]	; (8a0c <vTaskStartScheduler+0x7c>)
    89d4:	2200      	movs	r2, #0
    89d6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    89d8:	4b0d      	ldr	r3, [pc, #52]	; (8a10 <vTaskStartScheduler+0x80>)
    89da:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    89dc:	e004      	b.n	89e8 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    89de:	687b      	ldr	r3, [r7, #4]
    89e0:	3301      	adds	r3, #1
    89e2:	d101      	bne.n	89e8 <vTaskStartScheduler+0x58>
    89e4:	b672      	cpsid	i
    89e6:	e7fe      	b.n	89e6 <vTaskStartScheduler+0x56>
}
    89e8:	46c0      	nop			; (mov r8, r8)
    89ea:	46bd      	mov	sp, r7
    89ec:	b003      	add	sp, #12
    89ee:	bd90      	pop	{r4, r7, pc}
    89f0:	000244c0 	.word	0x000244c0
    89f4:	00009261 	.word	0x00009261
    89f8:	20003c64 	.word	0x20003c64
    89fc:	000083b9 	.word	0x000083b9
    8a00:	00009a21 	.word	0x00009a21
    8a04:	20003c60 	.word	0x20003c60
    8a08:	20003c4c 	.word	0x20003c4c
    8a0c:	20003c44 	.word	0x20003c44
    8a10:	000066e9 	.word	0x000066e9

00008a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    8a14:	b580      	push	{r7, lr}
    8a16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    8a18:	4b03      	ldr	r3, [pc, #12]	; (8a28 <vTaskSuspendAll+0x14>)
    8a1a:	681b      	ldr	r3, [r3, #0]
    8a1c:	1c5a      	adds	r2, r3, #1
    8a1e:	4b02      	ldr	r3, [pc, #8]	; (8a28 <vTaskSuspendAll+0x14>)
    8a20:	601a      	str	r2, [r3, #0]
}
    8a22:	46c0      	nop			; (mov r8, r8)
    8a24:	46bd      	mov	sp, r7
    8a26:	bd80      	pop	{r7, pc}
    8a28:	20003c68 	.word	0x20003c68

00008a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    8a2c:	b580      	push	{r7, lr}
    8a2e:	b084      	sub	sp, #16
    8a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    8a32:	2300      	movs	r3, #0
    8a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    8a36:	2300      	movs	r3, #0
    8a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    8a3a:	4b45      	ldr	r3, [pc, #276]	; (8b50 <xTaskResumeAll+0x124>)
    8a3c:	681b      	ldr	r3, [r3, #0]
    8a3e:	2b00      	cmp	r3, #0
    8a40:	d101      	bne.n	8a46 <xTaskResumeAll+0x1a>
    8a42:	b672      	cpsid	i
    8a44:	e7fe      	b.n	8a44 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    8a46:	4b43      	ldr	r3, [pc, #268]	; (8b54 <xTaskResumeAll+0x128>)
    8a48:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    8a4a:	4b41      	ldr	r3, [pc, #260]	; (8b50 <xTaskResumeAll+0x124>)
    8a4c:	681b      	ldr	r3, [r3, #0]
    8a4e:	1e5a      	subs	r2, r3, #1
    8a50:	4b3f      	ldr	r3, [pc, #252]	; (8b50 <xTaskResumeAll+0x124>)
    8a52:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8a54:	4b3e      	ldr	r3, [pc, #248]	; (8b50 <xTaskResumeAll+0x124>)
    8a56:	681b      	ldr	r3, [r3, #0]
    8a58:	2b00      	cmp	r3, #0
    8a5a:	d000      	beq.n	8a5e <xTaskResumeAll+0x32>
    8a5c:	e071      	b.n	8b42 <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    8a5e:	4b3e      	ldr	r3, [pc, #248]	; (8b58 <xTaskResumeAll+0x12c>)
    8a60:	681b      	ldr	r3, [r3, #0]
    8a62:	2b00      	cmp	r3, #0
    8a64:	d100      	bne.n	8a68 <xTaskResumeAll+0x3c>
    8a66:	e06c      	b.n	8b42 <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    8a68:	e044      	b.n	8af4 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    8a6a:	4b3c      	ldr	r3, [pc, #240]	; (8b5c <xTaskResumeAll+0x130>)
    8a6c:	68db      	ldr	r3, [r3, #12]
    8a6e:	68db      	ldr	r3, [r3, #12]
    8a70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    8a72:	68fb      	ldr	r3, [r7, #12]
    8a74:	3318      	adds	r3, #24
    8a76:	0018      	movs	r0, r3
    8a78:	4b39      	ldr	r3, [pc, #228]	; (8b60 <xTaskResumeAll+0x134>)
    8a7a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    8a7c:	68fb      	ldr	r3, [r7, #12]
    8a7e:	3304      	adds	r3, #4
    8a80:	0018      	movs	r0, r3
    8a82:	4b37      	ldr	r3, [pc, #220]	; (8b60 <xTaskResumeAll+0x134>)
    8a84:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    8a86:	68fb      	ldr	r3, [r7, #12]
    8a88:	0018      	movs	r0, r3
    8a8a:	4b36      	ldr	r3, [pc, #216]	; (8b64 <xTaskResumeAll+0x138>)
    8a8c:	4798      	blx	r3
    8a8e:	0003      	movs	r3, r0
    8a90:	001a      	movs	r2, r3
    8a92:	4b35      	ldr	r3, [pc, #212]	; (8b68 <xTaskResumeAll+0x13c>)
    8a94:	881b      	ldrh	r3, [r3, #0]
    8a96:	4013      	ands	r3, r2
    8a98:	b29b      	uxth	r3, r3
    8a9a:	2b00      	cmp	r3, #0
    8a9c:	d008      	beq.n	8ab0 <xTaskResumeAll+0x84>
    8a9e:	68fb      	ldr	r3, [r7, #12]
    8aa0:	0018      	movs	r0, r3
    8aa2:	4b32      	ldr	r3, [pc, #200]	; (8b6c <xTaskResumeAll+0x140>)
    8aa4:	4798      	blx	r3
    8aa6:	0003      	movs	r3, r0
    8aa8:	b2db      	uxtb	r3, r3
    8aaa:	0018      	movs	r0, r3
    8aac:	4b30      	ldr	r3, [pc, #192]	; (8b70 <xTaskResumeAll+0x144>)
    8aae:	4798      	blx	r3
    8ab0:	68fb      	ldr	r3, [r7, #12]
    8ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8ab4:	4b2f      	ldr	r3, [pc, #188]	; (8b74 <xTaskResumeAll+0x148>)
    8ab6:	681b      	ldr	r3, [r3, #0]
    8ab8:	429a      	cmp	r2, r3
    8aba:	d903      	bls.n	8ac4 <xTaskResumeAll+0x98>
    8abc:	68fb      	ldr	r3, [r7, #12]
    8abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8ac0:	4b2c      	ldr	r3, [pc, #176]	; (8b74 <xTaskResumeAll+0x148>)
    8ac2:	601a      	str	r2, [r3, #0]
    8ac4:	68fb      	ldr	r3, [r7, #12]
    8ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8ac8:	0013      	movs	r3, r2
    8aca:	009b      	lsls	r3, r3, #2
    8acc:	189b      	adds	r3, r3, r2
    8ace:	009b      	lsls	r3, r3, #2
    8ad0:	4a29      	ldr	r2, [pc, #164]	; (8b78 <xTaskResumeAll+0x14c>)
    8ad2:	189a      	adds	r2, r3, r2
    8ad4:	68fb      	ldr	r3, [r7, #12]
    8ad6:	3304      	adds	r3, #4
    8ad8:	0019      	movs	r1, r3
    8ada:	0010      	movs	r0, r2
    8adc:	4b27      	ldr	r3, [pc, #156]	; (8b7c <xTaskResumeAll+0x150>)
    8ade:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    8ae0:	68fb      	ldr	r3, [r7, #12]
    8ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8ae4:	4b26      	ldr	r3, [pc, #152]	; (8b80 <xTaskResumeAll+0x154>)
    8ae6:	681b      	ldr	r3, [r3, #0]
    8ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8aea:	429a      	cmp	r2, r3
    8aec:	d302      	bcc.n	8af4 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
    8aee:	4b25      	ldr	r3, [pc, #148]	; (8b84 <xTaskResumeAll+0x158>)
    8af0:	2201      	movs	r2, #1
    8af2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    8af4:	4b19      	ldr	r3, [pc, #100]	; (8b5c <xTaskResumeAll+0x130>)
    8af6:	681b      	ldr	r3, [r3, #0]
    8af8:	2b00      	cmp	r3, #0
    8afa:	d1b6      	bne.n	8a6a <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    8afc:	68fb      	ldr	r3, [r7, #12]
    8afe:	2b00      	cmp	r3, #0
    8b00:	d001      	beq.n	8b06 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    8b02:	4b21      	ldr	r3, [pc, #132]	; (8b88 <xTaskResumeAll+0x15c>)
    8b04:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    8b06:	4b21      	ldr	r3, [pc, #132]	; (8b8c <xTaskResumeAll+0x160>)
    8b08:	681b      	ldr	r3, [r3, #0]
    8b0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    8b0c:	687b      	ldr	r3, [r7, #4]
    8b0e:	2b00      	cmp	r3, #0
    8b10:	d00f      	beq.n	8b32 <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    8b12:	4b1f      	ldr	r3, [pc, #124]	; (8b90 <xTaskResumeAll+0x164>)
    8b14:	4798      	blx	r3
    8b16:	1e03      	subs	r3, r0, #0
    8b18:	d002      	beq.n	8b20 <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
    8b1a:	4b1a      	ldr	r3, [pc, #104]	; (8b84 <xTaskResumeAll+0x158>)
    8b1c:	2201      	movs	r2, #1
    8b1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    8b20:	687b      	ldr	r3, [r7, #4]
    8b22:	3b01      	subs	r3, #1
    8b24:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    8b26:	687b      	ldr	r3, [r7, #4]
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d1f2      	bne.n	8b12 <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
    8b2c:	4b17      	ldr	r3, [pc, #92]	; (8b8c <xTaskResumeAll+0x160>)
    8b2e:	2200      	movs	r2, #0
    8b30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    8b32:	4b14      	ldr	r3, [pc, #80]	; (8b84 <xTaskResumeAll+0x158>)
    8b34:	681b      	ldr	r3, [r3, #0]
    8b36:	2b00      	cmp	r3, #0
    8b38:	d003      	beq.n	8b42 <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    8b3a:	2301      	movs	r3, #1
    8b3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    8b3e:	4b15      	ldr	r3, [pc, #84]	; (8b94 <xTaskResumeAll+0x168>)
    8b40:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    8b42:	4b15      	ldr	r3, [pc, #84]	; (8b98 <xTaskResumeAll+0x16c>)
    8b44:	4798      	blx	r3

	return xAlreadyYielded;
    8b46:	68bb      	ldr	r3, [r7, #8]
}
    8b48:	0018      	movs	r0, r3
    8b4a:	46bd      	mov	sp, r7
    8b4c:	b004      	add	sp, #16
    8b4e:	bd80      	pop	{r7, pc}
    8b50:	20003c68 	.word	0x20003c68
    8b54:	00006759 	.word	0x00006759
    8b58:	20003c40 	.word	0x20003c40
    8b5c:	20003c00 	.word	0x20003c00
    8b60:	000065d3 	.word	0x000065d3
    8b64:	00004759 	.word	0x00004759
    8b68:	2000010c 	.word	0x2000010c
    8b6c:	00004739 	.word	0x00004739
    8b70:	00004f09 	.word	0x00004f09
    8b74:	20003c48 	.word	0x20003c48
    8b78:	20003b6c 	.word	0x20003b6c
    8b7c:	00006523 	.word	0x00006523
    8b80:	20003b68 	.word	0x20003b68
    8b84:	20003c54 	.word	0x20003c54
    8b88:	00009419 	.word	0x00009419
    8b8c:	20003c50 	.word	0x20003c50
    8b90:	00008bb9 	.word	0x00008bb9
    8b94:	00006741 	.word	0x00006741
    8b98:	0000677d 	.word	0x0000677d

00008b9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    8b9c:	b580      	push	{r7, lr}
    8b9e:	b082      	sub	sp, #8
    8ba0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    8ba2:	4b04      	ldr	r3, [pc, #16]	; (8bb4 <xTaskGetTickCount+0x18>)
    8ba4:	681b      	ldr	r3, [r3, #0]
    8ba6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    8ba8:	687b      	ldr	r3, [r7, #4]
}
    8baa:	0018      	movs	r0, r3
    8bac:	46bd      	mov	sp, r7
    8bae:	b002      	add	sp, #8
    8bb0:	bd80      	pop	{r7, pc}
    8bb2:	46c0      	nop			; (mov r8, r8)
    8bb4:	20003c44 	.word	0x20003c44

00008bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    8bb8:	b580      	push	{r7, lr}
    8bba:	b086      	sub	sp, #24
    8bbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    8bbe:	2300      	movs	r3, #0
    8bc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
    8bc2:	4b64      	ldr	r3, [pc, #400]	; (8d54 <xTaskIncrementTick+0x19c>)
    8bc4:	681b      	ldr	r3, [r3, #0]
    8bc6:	2b01      	cmp	r3, #1
    8bc8:	d003      	beq.n	8bd2 <xTaskIncrementTick+0x1a>
    8bca:	4b63      	ldr	r3, [pc, #396]	; (8d58 <xTaskIncrementTick+0x1a0>)
    8bcc:	681b      	ldr	r3, [r3, #0]
    8bce:	2b00      	cmp	r3, #0
    8bd0:	d107      	bne.n	8be2 <xTaskIncrementTick+0x2a>
    8bd2:	4b62      	ldr	r3, [pc, #392]	; (8d5c <xTaskIncrementTick+0x1a4>)
    8bd4:	681b      	ldr	r3, [r3, #0]
    8bd6:	1c5a      	adds	r2, r3, #1
    8bd8:	4b60      	ldr	r3, [pc, #384]	; (8d5c <xTaskIncrementTick+0x1a4>)
    8bda:	601a      	str	r2, [r3, #0]
    8bdc:	2000      	movs	r0, #0
    8bde:	4b60      	ldr	r3, [pc, #384]	; (8d60 <xTaskIncrementTick+0x1a8>)
    8be0:	4798      	blx	r3
    8be2:	4b5c      	ldr	r3, [pc, #368]	; (8d54 <xTaskIncrementTick+0x19c>)
    8be4:	681b      	ldr	r3, [r3, #0]
    8be6:	2b00      	cmp	r3, #0
    8be8:	d106      	bne.n	8bf8 <xTaskIncrementTick+0x40>
    8bea:	4b5e      	ldr	r3, [pc, #376]	; (8d64 <xTaskIncrementTick+0x1ac>)
    8bec:	681b      	ldr	r3, [r3, #0]
    8bee:	3301      	adds	r3, #1
    8bf0:	0019      	movs	r1, r3
    8bf2:	2003      	movs	r0, #3
    8bf4:	4b5c      	ldr	r3, [pc, #368]	; (8d68 <xTaskIncrementTick+0x1b0>)
    8bf6:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8bf8:	4b56      	ldr	r3, [pc, #344]	; (8d54 <xTaskIncrementTick+0x19c>)
    8bfa:	681b      	ldr	r3, [r3, #0]
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	d000      	beq.n	8c02 <xTaskIncrementTick+0x4a>
    8c00:	e098      	b.n	8d34 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    8c02:	4b58      	ldr	r3, [pc, #352]	; (8d64 <xTaskIncrementTick+0x1ac>)
    8c04:	681b      	ldr	r3, [r3, #0]
    8c06:	3301      	adds	r3, #1
    8c08:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    8c0a:	4b56      	ldr	r3, [pc, #344]	; (8d64 <xTaskIncrementTick+0x1ac>)
    8c0c:	693a      	ldr	r2, [r7, #16]
    8c0e:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    8c10:	693b      	ldr	r3, [r7, #16]
    8c12:	2b00      	cmp	r3, #0
    8c14:	d117      	bne.n	8c46 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
    8c16:	4b55      	ldr	r3, [pc, #340]	; (8d6c <xTaskIncrementTick+0x1b4>)
    8c18:	681b      	ldr	r3, [r3, #0]
    8c1a:	681b      	ldr	r3, [r3, #0]
    8c1c:	2b00      	cmp	r3, #0
    8c1e:	d001      	beq.n	8c24 <xTaskIncrementTick+0x6c>
    8c20:	b672      	cpsid	i
    8c22:	e7fe      	b.n	8c22 <xTaskIncrementTick+0x6a>
    8c24:	4b51      	ldr	r3, [pc, #324]	; (8d6c <xTaskIncrementTick+0x1b4>)
    8c26:	681b      	ldr	r3, [r3, #0]
    8c28:	60fb      	str	r3, [r7, #12]
    8c2a:	4b51      	ldr	r3, [pc, #324]	; (8d70 <xTaskIncrementTick+0x1b8>)
    8c2c:	681a      	ldr	r2, [r3, #0]
    8c2e:	4b4f      	ldr	r3, [pc, #316]	; (8d6c <xTaskIncrementTick+0x1b4>)
    8c30:	601a      	str	r2, [r3, #0]
    8c32:	4b4f      	ldr	r3, [pc, #316]	; (8d70 <xTaskIncrementTick+0x1b8>)
    8c34:	68fa      	ldr	r2, [r7, #12]
    8c36:	601a      	str	r2, [r3, #0]
    8c38:	4b4e      	ldr	r3, [pc, #312]	; (8d74 <xTaskIncrementTick+0x1bc>)
    8c3a:	681b      	ldr	r3, [r3, #0]
    8c3c:	1c5a      	adds	r2, r3, #1
    8c3e:	4b4d      	ldr	r3, [pc, #308]	; (8d74 <xTaskIncrementTick+0x1bc>)
    8c40:	601a      	str	r2, [r3, #0]
    8c42:	4b4d      	ldr	r3, [pc, #308]	; (8d78 <xTaskIncrementTick+0x1c0>)
    8c44:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    8c46:	4b4d      	ldr	r3, [pc, #308]	; (8d7c <xTaskIncrementTick+0x1c4>)
    8c48:	681b      	ldr	r3, [r3, #0]
    8c4a:	693a      	ldr	r2, [r7, #16]
    8c4c:	429a      	cmp	r2, r3
    8c4e:	d363      	bcc.n	8d18 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    8c50:	4b46      	ldr	r3, [pc, #280]	; (8d6c <xTaskIncrementTick+0x1b4>)
    8c52:	681b      	ldr	r3, [r3, #0]
    8c54:	681b      	ldr	r3, [r3, #0]
    8c56:	2b00      	cmp	r3, #0
    8c58:	d101      	bne.n	8c5e <xTaskIncrementTick+0xa6>
    8c5a:	2301      	movs	r3, #1
    8c5c:	e000      	b.n	8c60 <xTaskIncrementTick+0xa8>
    8c5e:	2300      	movs	r3, #0
    8c60:	2b00      	cmp	r3, #0
    8c62:	d004      	beq.n	8c6e <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8c64:	4b45      	ldr	r3, [pc, #276]	; (8d7c <xTaskIncrementTick+0x1c4>)
    8c66:	2201      	movs	r2, #1
    8c68:	4252      	negs	r2, r2
    8c6a:	601a      	str	r2, [r3, #0]
					break;
    8c6c:	e054      	b.n	8d18 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    8c6e:	4b3f      	ldr	r3, [pc, #252]	; (8d6c <xTaskIncrementTick+0x1b4>)
    8c70:	681b      	ldr	r3, [r3, #0]
    8c72:	68db      	ldr	r3, [r3, #12]
    8c74:	68db      	ldr	r3, [r3, #12]
    8c76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    8c78:	68bb      	ldr	r3, [r7, #8]
    8c7a:	685b      	ldr	r3, [r3, #4]
    8c7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    8c7e:	693a      	ldr	r2, [r7, #16]
    8c80:	687b      	ldr	r3, [r7, #4]
    8c82:	429a      	cmp	r2, r3
    8c84:	d203      	bcs.n	8c8e <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    8c86:	4b3d      	ldr	r3, [pc, #244]	; (8d7c <xTaskIncrementTick+0x1c4>)
    8c88:	687a      	ldr	r2, [r7, #4]
    8c8a:	601a      	str	r2, [r3, #0]
						break;
    8c8c:	e044      	b.n	8d18 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    8c8e:	68bb      	ldr	r3, [r7, #8]
    8c90:	3304      	adds	r3, #4
    8c92:	0018      	movs	r0, r3
    8c94:	4b3a      	ldr	r3, [pc, #232]	; (8d80 <xTaskIncrementTick+0x1c8>)
    8c96:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    8c98:	68bb      	ldr	r3, [r7, #8]
    8c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8c9c:	2b00      	cmp	r3, #0
    8c9e:	d004      	beq.n	8caa <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    8ca0:	68bb      	ldr	r3, [r7, #8]
    8ca2:	3318      	adds	r3, #24
    8ca4:	0018      	movs	r0, r3
    8ca6:	4b36      	ldr	r3, [pc, #216]	; (8d80 <xTaskIncrementTick+0x1c8>)
    8ca8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    8caa:	68bb      	ldr	r3, [r7, #8]
    8cac:	0018      	movs	r0, r3
    8cae:	4b35      	ldr	r3, [pc, #212]	; (8d84 <xTaskIncrementTick+0x1cc>)
    8cb0:	4798      	blx	r3
    8cb2:	0003      	movs	r3, r0
    8cb4:	001a      	movs	r2, r3
    8cb6:	4b34      	ldr	r3, [pc, #208]	; (8d88 <xTaskIncrementTick+0x1d0>)
    8cb8:	881b      	ldrh	r3, [r3, #0]
    8cba:	4013      	ands	r3, r2
    8cbc:	b29b      	uxth	r3, r3
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d008      	beq.n	8cd4 <xTaskIncrementTick+0x11c>
    8cc2:	68bb      	ldr	r3, [r7, #8]
    8cc4:	0018      	movs	r0, r3
    8cc6:	4b31      	ldr	r3, [pc, #196]	; (8d8c <xTaskIncrementTick+0x1d4>)
    8cc8:	4798      	blx	r3
    8cca:	0003      	movs	r3, r0
    8ccc:	b2db      	uxtb	r3, r3
    8cce:	0018      	movs	r0, r3
    8cd0:	4b2f      	ldr	r3, [pc, #188]	; (8d90 <xTaskIncrementTick+0x1d8>)
    8cd2:	4798      	blx	r3
    8cd4:	68bb      	ldr	r3, [r7, #8]
    8cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8cd8:	4b2e      	ldr	r3, [pc, #184]	; (8d94 <xTaskIncrementTick+0x1dc>)
    8cda:	681b      	ldr	r3, [r3, #0]
    8cdc:	429a      	cmp	r2, r3
    8cde:	d903      	bls.n	8ce8 <xTaskIncrementTick+0x130>
    8ce0:	68bb      	ldr	r3, [r7, #8]
    8ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8ce4:	4b2b      	ldr	r3, [pc, #172]	; (8d94 <xTaskIncrementTick+0x1dc>)
    8ce6:	601a      	str	r2, [r3, #0]
    8ce8:	68bb      	ldr	r3, [r7, #8]
    8cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8cec:	0013      	movs	r3, r2
    8cee:	009b      	lsls	r3, r3, #2
    8cf0:	189b      	adds	r3, r3, r2
    8cf2:	009b      	lsls	r3, r3, #2
    8cf4:	4a28      	ldr	r2, [pc, #160]	; (8d98 <xTaskIncrementTick+0x1e0>)
    8cf6:	189a      	adds	r2, r3, r2
    8cf8:	68bb      	ldr	r3, [r7, #8]
    8cfa:	3304      	adds	r3, #4
    8cfc:	0019      	movs	r1, r3
    8cfe:	0010      	movs	r0, r2
    8d00:	4b26      	ldr	r3, [pc, #152]	; (8d9c <xTaskIncrementTick+0x1e4>)
    8d02:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    8d04:	68bb      	ldr	r3, [r7, #8]
    8d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8d08:	4b25      	ldr	r3, [pc, #148]	; (8da0 <xTaskIncrementTick+0x1e8>)
    8d0a:	681b      	ldr	r3, [r3, #0]
    8d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8d0e:	429a      	cmp	r2, r3
    8d10:	d39e      	bcc.n	8c50 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
    8d12:	2301      	movs	r3, #1
    8d14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    8d16:	e79b      	b.n	8c50 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    8d18:	4b21      	ldr	r3, [pc, #132]	; (8da0 <xTaskIncrementTick+0x1e8>)
    8d1a:	681b      	ldr	r3, [r3, #0]
    8d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8d1e:	491e      	ldr	r1, [pc, #120]	; (8d98 <xTaskIncrementTick+0x1e0>)
    8d20:	0013      	movs	r3, r2
    8d22:	009b      	lsls	r3, r3, #2
    8d24:	189b      	adds	r3, r3, r2
    8d26:	009b      	lsls	r3, r3, #2
    8d28:	585b      	ldr	r3, [r3, r1]
    8d2a:	2b01      	cmp	r3, #1
    8d2c:	d907      	bls.n	8d3e <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
    8d2e:	2301      	movs	r3, #1
    8d30:	617b      	str	r3, [r7, #20]
    8d32:	e004      	b.n	8d3e <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    8d34:	4b08      	ldr	r3, [pc, #32]	; (8d58 <xTaskIncrementTick+0x1a0>)
    8d36:	681b      	ldr	r3, [r3, #0]
    8d38:	1c5a      	adds	r2, r3, #1
    8d3a:	4b07      	ldr	r3, [pc, #28]	; (8d58 <xTaskIncrementTick+0x1a0>)
    8d3c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    8d3e:	4b19      	ldr	r3, [pc, #100]	; (8da4 <xTaskIncrementTick+0x1ec>)
    8d40:	681b      	ldr	r3, [r3, #0]
    8d42:	2b00      	cmp	r3, #0
    8d44:	d001      	beq.n	8d4a <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
    8d46:	2301      	movs	r3, #1
    8d48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    8d4a:	697b      	ldr	r3, [r7, #20]
}
    8d4c:	0018      	movs	r0, r3
    8d4e:	46bd      	mov	sp, r7
    8d50:	b006      	add	sp, #24
    8d52:	bd80      	pop	{r7, pc}
    8d54:	20003c68 	.word	0x20003c68
    8d58:	20003c50 	.word	0x20003c50
    8d5c:	20000bb0 	.word	0x20000bb0
    8d60:	000063ed 	.word	0x000063ed
    8d64:	20003c44 	.word	0x20003c44
    8d68:	00005459 	.word	0x00005459
    8d6c:	20003bf8 	.word	0x20003bf8
    8d70:	20003bfc 	.word	0x20003bfc
    8d74:	20003c58 	.word	0x20003c58
    8d78:	00009419 	.word	0x00009419
    8d7c:	20003c60 	.word	0x20003c60
    8d80:	000065d3 	.word	0x000065d3
    8d84:	00004759 	.word	0x00004759
    8d88:	2000010c 	.word	0x2000010c
    8d8c:	00004739 	.word	0x00004739
    8d90:	00004f09 	.word	0x00004f09
    8d94:	20003c48 	.word	0x20003c48
    8d98:	20003b6c 	.word	0x20003b6c
    8d9c:	00006523 	.word	0x00006523
    8da0:	20003b68 	.word	0x20003b68
    8da4:	20003c54 	.word	0x20003c54

00008da8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    8da8:	b580      	push	{r7, lr}
    8daa:	b082      	sub	sp, #8
    8dac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    8dae:	4b3a      	ldr	r3, [pc, #232]	; (8e98 <vTaskSwitchContext+0xf0>)
    8db0:	681b      	ldr	r3, [r3, #0]
    8db2:	2b00      	cmp	r3, #0
    8db4:	d003      	beq.n	8dbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    8db6:	4b39      	ldr	r3, [pc, #228]	; (8e9c <vTaskSwitchContext+0xf4>)
    8db8:	2201      	movs	r2, #1
    8dba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    8dbc:	e067      	b.n	8e8e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
    8dbe:	4b37      	ldr	r3, [pc, #220]	; (8e9c <vTaskSwitchContext+0xf4>)
    8dc0:	2200      	movs	r2, #0
    8dc2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    8dc4:	4b36      	ldr	r3, [pc, #216]	; (8ea0 <vTaskSwitchContext+0xf8>)
    8dc6:	681b      	ldr	r3, [r3, #0]
    8dc8:	681a      	ldr	r2, [r3, #0]
    8dca:	4b35      	ldr	r3, [pc, #212]	; (8ea0 <vTaskSwitchContext+0xf8>)
    8dcc:	681b      	ldr	r3, [r3, #0]
    8dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8dd0:	429a      	cmp	r2, r3
    8dd2:	d808      	bhi.n	8de6 <vTaskSwitchContext+0x3e>
    8dd4:	4b32      	ldr	r3, [pc, #200]	; (8ea0 <vTaskSwitchContext+0xf8>)
    8dd6:	681a      	ldr	r2, [r3, #0]
    8dd8:	4b31      	ldr	r3, [pc, #196]	; (8ea0 <vTaskSwitchContext+0xf8>)
    8dda:	681b      	ldr	r3, [r3, #0]
    8ddc:	3334      	adds	r3, #52	; 0x34
    8dde:	0019      	movs	r1, r3
    8de0:	0010      	movs	r0, r2
    8de2:	4b30      	ldr	r3, [pc, #192]	; (8ea4 <vTaskSwitchContext+0xfc>)
    8de4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    8de6:	4b30      	ldr	r3, [pc, #192]	; (8ea8 <vTaskSwitchContext+0x100>)
    8de8:	681b      	ldr	r3, [r3, #0]
    8dea:	607b      	str	r3, [r7, #4]
    8dec:	e007      	b.n	8dfe <vTaskSwitchContext+0x56>
    8dee:	687b      	ldr	r3, [r7, #4]
    8df0:	2b00      	cmp	r3, #0
    8df2:	d101      	bne.n	8df8 <vTaskSwitchContext+0x50>
    8df4:	b672      	cpsid	i
    8df6:	e7fe      	b.n	8df6 <vTaskSwitchContext+0x4e>
    8df8:	687b      	ldr	r3, [r7, #4]
    8dfa:	3b01      	subs	r3, #1
    8dfc:	607b      	str	r3, [r7, #4]
    8dfe:	492b      	ldr	r1, [pc, #172]	; (8eac <vTaskSwitchContext+0x104>)
    8e00:	687a      	ldr	r2, [r7, #4]
    8e02:	0013      	movs	r3, r2
    8e04:	009b      	lsls	r3, r3, #2
    8e06:	189b      	adds	r3, r3, r2
    8e08:	009b      	lsls	r3, r3, #2
    8e0a:	585b      	ldr	r3, [r3, r1]
    8e0c:	2b00      	cmp	r3, #0
    8e0e:	d0ee      	beq.n	8dee <vTaskSwitchContext+0x46>
    8e10:	687a      	ldr	r2, [r7, #4]
    8e12:	0013      	movs	r3, r2
    8e14:	009b      	lsls	r3, r3, #2
    8e16:	189b      	adds	r3, r3, r2
    8e18:	009b      	lsls	r3, r3, #2
    8e1a:	4a24      	ldr	r2, [pc, #144]	; (8eac <vTaskSwitchContext+0x104>)
    8e1c:	189b      	adds	r3, r3, r2
    8e1e:	603b      	str	r3, [r7, #0]
    8e20:	683b      	ldr	r3, [r7, #0]
    8e22:	685b      	ldr	r3, [r3, #4]
    8e24:	685a      	ldr	r2, [r3, #4]
    8e26:	683b      	ldr	r3, [r7, #0]
    8e28:	605a      	str	r2, [r3, #4]
    8e2a:	683b      	ldr	r3, [r7, #0]
    8e2c:	685a      	ldr	r2, [r3, #4]
    8e2e:	683b      	ldr	r3, [r7, #0]
    8e30:	3308      	adds	r3, #8
    8e32:	429a      	cmp	r2, r3
    8e34:	d104      	bne.n	8e40 <vTaskSwitchContext+0x98>
    8e36:	683b      	ldr	r3, [r7, #0]
    8e38:	685b      	ldr	r3, [r3, #4]
    8e3a:	685a      	ldr	r2, [r3, #4]
    8e3c:	683b      	ldr	r3, [r7, #0]
    8e3e:	605a      	str	r2, [r3, #4]
    8e40:	683b      	ldr	r3, [r7, #0]
    8e42:	685b      	ldr	r3, [r3, #4]
    8e44:	68da      	ldr	r2, [r3, #12]
    8e46:	4b16      	ldr	r3, [pc, #88]	; (8ea0 <vTaskSwitchContext+0xf8>)
    8e48:	601a      	str	r2, [r3, #0]
    8e4a:	4b17      	ldr	r3, [pc, #92]	; (8ea8 <vTaskSwitchContext+0x100>)
    8e4c:	687a      	ldr	r2, [r7, #4]
    8e4e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
    8e50:	4b17      	ldr	r3, [pc, #92]	; (8eb0 <vTaskSwitchContext+0x108>)
    8e52:	2201      	movs	r2, #1
    8e54:	601a      	str	r2, [r3, #0]
    8e56:	4b17      	ldr	r3, [pc, #92]	; (8eb4 <vTaskSwitchContext+0x10c>)
    8e58:	4798      	blx	r3
    8e5a:	0003      	movs	r3, r0
    8e5c:	0018      	movs	r0, r3
    8e5e:	4b16      	ldr	r3, [pc, #88]	; (8eb8 <vTaskSwitchContext+0x110>)
    8e60:	4798      	blx	r3
    8e62:	0003      	movs	r3, r0
    8e64:	001a      	movs	r2, r3
    8e66:	4b15      	ldr	r3, [pc, #84]	; (8ebc <vTaskSwitchContext+0x114>)
    8e68:	881b      	ldrh	r3, [r3, #0]
    8e6a:	4013      	ands	r3, r2
    8e6c:	b29b      	uxth	r3, r3
    8e6e:	2b00      	cmp	r3, #0
    8e70:	d00a      	beq.n	8e88 <vTaskSwitchContext+0xe0>
    8e72:	4b10      	ldr	r3, [pc, #64]	; (8eb4 <vTaskSwitchContext+0x10c>)
    8e74:	4798      	blx	r3
    8e76:	0003      	movs	r3, r0
    8e78:	0018      	movs	r0, r3
    8e7a:	4b11      	ldr	r3, [pc, #68]	; (8ec0 <vTaskSwitchContext+0x118>)
    8e7c:	4798      	blx	r3
    8e7e:	0003      	movs	r3, r0
    8e80:	b2db      	uxtb	r3, r3
    8e82:	0018      	movs	r0, r3
    8e84:	4b0f      	ldr	r3, [pc, #60]	; (8ec4 <vTaskSwitchContext+0x11c>)
    8e86:	4798      	blx	r3
    8e88:	4b09      	ldr	r3, [pc, #36]	; (8eb0 <vTaskSwitchContext+0x108>)
    8e8a:	2202      	movs	r2, #2
    8e8c:	601a      	str	r2, [r3, #0]
}
    8e8e:	46c0      	nop			; (mov r8, r8)
    8e90:	46bd      	mov	sp, r7
    8e92:	b002      	add	sp, #8
    8e94:	bd80      	pop	{r7, pc}
    8e96:	46c0      	nop			; (mov r8, r8)
    8e98:	20003c68 	.word	0x20003c68
    8e9c:	20003c54 	.word	0x20003c54
    8ea0:	20003b68 	.word	0x20003b68
    8ea4:	0001ef2d 	.word	0x0001ef2d
    8ea8:	20003c48 	.word	0x20003c48
    8eac:	20003b6c 	.word	0x20003b6c
    8eb0:	20000bbc 	.word	0x20000bbc
    8eb4:	000049f5 	.word	0x000049f5
    8eb8:	00004759 	.word	0x00004759
    8ebc:	2000010c 	.word	0x2000010c
    8ec0:	00004739 	.word	0x00004739
    8ec4:	00005555 	.word	0x00005555

00008ec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    8ec8:	b580      	push	{r7, lr}
    8eca:	b082      	sub	sp, #8
    8ecc:	af00      	add	r7, sp, #0
    8ece:	6078      	str	r0, [r7, #4]
    8ed0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    8ed2:	687b      	ldr	r3, [r7, #4]
    8ed4:	2b00      	cmp	r3, #0
    8ed6:	d101      	bne.n	8edc <vTaskPlaceOnEventList+0x14>
    8ed8:	b672      	cpsid	i
    8eda:	e7fe      	b.n	8eda <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    8edc:	4b08      	ldr	r3, [pc, #32]	; (8f00 <vTaskPlaceOnEventList+0x38>)
    8ede:	681b      	ldr	r3, [r3, #0]
    8ee0:	3318      	adds	r3, #24
    8ee2:	001a      	movs	r2, r3
    8ee4:	687b      	ldr	r3, [r7, #4]
    8ee6:	0011      	movs	r1, r2
    8ee8:	0018      	movs	r0, r3
    8eea:	4b06      	ldr	r3, [pc, #24]	; (8f04 <vTaskPlaceOnEventList+0x3c>)
    8eec:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    8eee:	683b      	ldr	r3, [r7, #0]
    8ef0:	2101      	movs	r1, #1
    8ef2:	0018      	movs	r0, r3
    8ef4:	4b04      	ldr	r3, [pc, #16]	; (8f08 <vTaskPlaceOnEventList+0x40>)
    8ef6:	4798      	blx	r3
}
    8ef8:	46c0      	nop			; (mov r8, r8)
    8efa:	46bd      	mov	sp, r7
    8efc:	b002      	add	sp, #8
    8efe:	bd80      	pop	{r7, pc}
    8f00:	20003b68 	.word	0x20003b68
    8f04:	00006567 	.word	0x00006567
    8f08:	0000996d 	.word	0x0000996d

00008f0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    8f0c:	b580      	push	{r7, lr}
    8f0e:	b084      	sub	sp, #16
    8f10:	af00      	add	r7, sp, #0
    8f12:	60f8      	str	r0, [r7, #12]
    8f14:	60b9      	str	r1, [r7, #8]
    8f16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    8f18:	68fb      	ldr	r3, [r7, #12]
    8f1a:	2b00      	cmp	r3, #0
    8f1c:	d101      	bne.n	8f22 <vTaskPlaceOnEventListRestricted+0x16>
    8f1e:	b672      	cpsid	i
    8f20:	e7fe      	b.n	8f20 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    8f22:	4b28      	ldr	r3, [pc, #160]	; (8fc4 <vTaskPlaceOnEventListRestricted+0xb8>)
    8f24:	681b      	ldr	r3, [r3, #0]
    8f26:	3318      	adds	r3, #24
    8f28:	001a      	movs	r2, r3
    8f2a:	68fb      	ldr	r3, [r7, #12]
    8f2c:	0011      	movs	r1, r2
    8f2e:	0018      	movs	r0, r3
    8f30:	4b25      	ldr	r3, [pc, #148]	; (8fc8 <vTaskPlaceOnEventListRestricted+0xbc>)
    8f32:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    8f34:	687b      	ldr	r3, [r7, #4]
    8f36:	2b00      	cmp	r3, #0
    8f38:	d002      	beq.n	8f40 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    8f3a:	2301      	movs	r3, #1
    8f3c:	425b      	negs	r3, r3
    8f3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    8f40:	4b20      	ldr	r3, [pc, #128]	; (8fc4 <vTaskPlaceOnEventListRestricted+0xb8>)
    8f42:	681b      	ldr	r3, [r3, #0]
    8f44:	0018      	movs	r0, r3
    8f46:	4b21      	ldr	r3, [pc, #132]	; (8fcc <vTaskPlaceOnEventListRestricted+0xc0>)
    8f48:	4798      	blx	r3
    8f4a:	0003      	movs	r3, r0
    8f4c:	001a      	movs	r2, r3
    8f4e:	4b20      	ldr	r3, [pc, #128]	; (8fd0 <vTaskPlaceOnEventListRestricted+0xc4>)
    8f50:	881b      	ldrh	r3, [r3, #0]
    8f52:	4013      	ands	r3, r2
    8f54:	b29b      	uxth	r3, r3
    8f56:	2b00      	cmp	r3, #0
    8f58:	d011      	beq.n	8f7e <vTaskPlaceOnEventListRestricted+0x72>
    8f5a:	4b1e      	ldr	r3, [pc, #120]	; (8fd4 <vTaskPlaceOnEventListRestricted+0xc8>)
    8f5c:	681a      	ldr	r2, [r3, #0]
    8f5e:	68bb      	ldr	r3, [r7, #8]
    8f60:	18d3      	adds	r3, r2, r3
    8f62:	0019      	movs	r1, r3
    8f64:	2088      	movs	r0, #136	; 0x88
    8f66:	4b1c      	ldr	r3, [pc, #112]	; (8fd8 <vTaskPlaceOnEventListRestricted+0xcc>)
    8f68:	4798      	blx	r3
    8f6a:	4b16      	ldr	r3, [pc, #88]	; (8fc4 <vTaskPlaceOnEventListRestricted+0xb8>)
    8f6c:	681b      	ldr	r3, [r3, #0]
    8f6e:	0018      	movs	r0, r3
    8f70:	4b1a      	ldr	r3, [pc, #104]	; (8fdc <vTaskPlaceOnEventListRestricted+0xd0>)
    8f72:	4798      	blx	r3
    8f74:	0003      	movs	r3, r0
    8f76:	b2db      	uxtb	r3, r3
    8f78:	0018      	movs	r0, r3
    8f7a:	4b19      	ldr	r3, [pc, #100]	; (8fe0 <vTaskPlaceOnEventListRestricted+0xd4>)
    8f7c:	4798      	blx	r3
    8f7e:	4b19      	ldr	r3, [pc, #100]	; (8fe4 <vTaskPlaceOnEventListRestricted+0xd8>)
    8f80:	4798      	blx	r3
    8f82:	0003      	movs	r3, r0
    8f84:	0018      	movs	r0, r3
    8f86:	4b11      	ldr	r3, [pc, #68]	; (8fcc <vTaskPlaceOnEventListRestricted+0xc0>)
    8f88:	4798      	blx	r3
    8f8a:	0003      	movs	r3, r0
    8f8c:	001a      	movs	r2, r3
    8f8e:	4b10      	ldr	r3, [pc, #64]	; (8fd0 <vTaskPlaceOnEventListRestricted+0xc4>)
    8f90:	881b      	ldrh	r3, [r3, #0]
    8f92:	4013      	ands	r3, r2
    8f94:	b29b      	uxth	r3, r3
    8f96:	2b00      	cmp	r3, #0
    8f98:	d00a      	beq.n	8fb0 <vTaskPlaceOnEventListRestricted+0xa4>
    8f9a:	4b12      	ldr	r3, [pc, #72]	; (8fe4 <vTaskPlaceOnEventListRestricted+0xd8>)
    8f9c:	4798      	blx	r3
    8f9e:	0003      	movs	r3, r0
    8fa0:	0018      	movs	r0, r3
    8fa2:	4b0e      	ldr	r3, [pc, #56]	; (8fdc <vTaskPlaceOnEventListRestricted+0xd0>)
    8fa4:	4798      	blx	r3
    8fa6:	0003      	movs	r3, r0
    8fa8:	b2db      	uxtb	r3, r3
    8faa:	0018      	movs	r0, r3
    8fac:	4b0c      	ldr	r3, [pc, #48]	; (8fe0 <vTaskPlaceOnEventListRestricted+0xd4>)
    8fae:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    8fb0:	687a      	ldr	r2, [r7, #4]
    8fb2:	68bb      	ldr	r3, [r7, #8]
    8fb4:	0011      	movs	r1, r2
    8fb6:	0018      	movs	r0, r3
    8fb8:	4b0b      	ldr	r3, [pc, #44]	; (8fe8 <vTaskPlaceOnEventListRestricted+0xdc>)
    8fba:	4798      	blx	r3
	}
    8fbc:	46c0      	nop			; (mov r8, r8)
    8fbe:	46bd      	mov	sp, r7
    8fc0:	b004      	add	sp, #16
    8fc2:	bd80      	pop	{r7, pc}
    8fc4:	20003b68 	.word	0x20003b68
    8fc8:	00006523 	.word	0x00006523
    8fcc:	00004759 	.word	0x00004759
    8fd0:	2000010c 	.word	0x2000010c
    8fd4:	20003c44 	.word	0x20003c44
    8fd8:	00005459 	.word	0x00005459
    8fdc:	00004739 	.word	0x00004739
    8fe0:	000058e9 	.word	0x000058e9
    8fe4:	000049f5 	.word	0x000049f5
    8fe8:	0000996d 	.word	0x0000996d

00008fec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    8fec:	b580      	push	{r7, lr}
    8fee:	b084      	sub	sp, #16
    8ff0:	af00      	add	r7, sp, #0
    8ff2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    8ff4:	687b      	ldr	r3, [r7, #4]
    8ff6:	68db      	ldr	r3, [r3, #12]
    8ff8:	68db      	ldr	r3, [r3, #12]
    8ffa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    8ffc:	68bb      	ldr	r3, [r7, #8]
    8ffe:	2b00      	cmp	r3, #0
    9000:	d101      	bne.n	9006 <xTaskRemoveFromEventList+0x1a>
    9002:	b672      	cpsid	i
    9004:	e7fe      	b.n	9004 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    9006:	68bb      	ldr	r3, [r7, #8]
    9008:	3318      	adds	r3, #24
    900a:	0018      	movs	r0, r3
    900c:	4b2a      	ldr	r3, [pc, #168]	; (90b8 <xTaskRemoveFromEventList+0xcc>)
    900e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9010:	4b2a      	ldr	r3, [pc, #168]	; (90bc <xTaskRemoveFromEventList+0xd0>)
    9012:	681b      	ldr	r3, [r3, #0]
    9014:	2b00      	cmp	r3, #0
    9016:	d132      	bne.n	907e <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    9018:	68bb      	ldr	r3, [r7, #8]
    901a:	3304      	adds	r3, #4
    901c:	0018      	movs	r0, r3
    901e:	4b26      	ldr	r3, [pc, #152]	; (90b8 <xTaskRemoveFromEventList+0xcc>)
    9020:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    9022:	68bb      	ldr	r3, [r7, #8]
    9024:	0018      	movs	r0, r3
    9026:	4b26      	ldr	r3, [pc, #152]	; (90c0 <xTaskRemoveFromEventList+0xd4>)
    9028:	4798      	blx	r3
    902a:	0003      	movs	r3, r0
    902c:	001a      	movs	r2, r3
    902e:	4b25      	ldr	r3, [pc, #148]	; (90c4 <xTaskRemoveFromEventList+0xd8>)
    9030:	881b      	ldrh	r3, [r3, #0]
    9032:	4013      	ands	r3, r2
    9034:	b29b      	uxth	r3, r3
    9036:	2b00      	cmp	r3, #0
    9038:	d008      	beq.n	904c <xTaskRemoveFromEventList+0x60>
    903a:	68bb      	ldr	r3, [r7, #8]
    903c:	0018      	movs	r0, r3
    903e:	4b22      	ldr	r3, [pc, #136]	; (90c8 <xTaskRemoveFromEventList+0xdc>)
    9040:	4798      	blx	r3
    9042:	0003      	movs	r3, r0
    9044:	b2db      	uxtb	r3, r3
    9046:	0018      	movs	r0, r3
    9048:	4b20      	ldr	r3, [pc, #128]	; (90cc <xTaskRemoveFromEventList+0xe0>)
    904a:	4798      	blx	r3
    904c:	68bb      	ldr	r3, [r7, #8]
    904e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9050:	4b1f      	ldr	r3, [pc, #124]	; (90d0 <xTaskRemoveFromEventList+0xe4>)
    9052:	681b      	ldr	r3, [r3, #0]
    9054:	429a      	cmp	r2, r3
    9056:	d903      	bls.n	9060 <xTaskRemoveFromEventList+0x74>
    9058:	68bb      	ldr	r3, [r7, #8]
    905a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    905c:	4b1c      	ldr	r3, [pc, #112]	; (90d0 <xTaskRemoveFromEventList+0xe4>)
    905e:	601a      	str	r2, [r3, #0]
    9060:	68bb      	ldr	r3, [r7, #8]
    9062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9064:	0013      	movs	r3, r2
    9066:	009b      	lsls	r3, r3, #2
    9068:	189b      	adds	r3, r3, r2
    906a:	009b      	lsls	r3, r3, #2
    906c:	4a19      	ldr	r2, [pc, #100]	; (90d4 <xTaskRemoveFromEventList+0xe8>)
    906e:	189a      	adds	r2, r3, r2
    9070:	68bb      	ldr	r3, [r7, #8]
    9072:	3304      	adds	r3, #4
    9074:	0019      	movs	r1, r3
    9076:	0010      	movs	r0, r2
    9078:	4b17      	ldr	r3, [pc, #92]	; (90d8 <xTaskRemoveFromEventList+0xec>)
    907a:	4798      	blx	r3
    907c:	e007      	b.n	908e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    907e:	68bb      	ldr	r3, [r7, #8]
    9080:	3318      	adds	r3, #24
    9082:	001a      	movs	r2, r3
    9084:	4b15      	ldr	r3, [pc, #84]	; (90dc <xTaskRemoveFromEventList+0xf0>)
    9086:	0011      	movs	r1, r2
    9088:	0018      	movs	r0, r3
    908a:	4b13      	ldr	r3, [pc, #76]	; (90d8 <xTaskRemoveFromEventList+0xec>)
    908c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    908e:	68bb      	ldr	r3, [r7, #8]
    9090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9092:	4b13      	ldr	r3, [pc, #76]	; (90e0 <xTaskRemoveFromEventList+0xf4>)
    9094:	681b      	ldr	r3, [r3, #0]
    9096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9098:	429a      	cmp	r2, r3
    909a:	d905      	bls.n	90a8 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    909c:	2301      	movs	r3, #1
    909e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    90a0:	4b10      	ldr	r3, [pc, #64]	; (90e4 <xTaskRemoveFromEventList+0xf8>)
    90a2:	2201      	movs	r2, #1
    90a4:	601a      	str	r2, [r3, #0]
    90a6:	e001      	b.n	90ac <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
    90a8:	2300      	movs	r3, #0
    90aa:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    90ac:	68fb      	ldr	r3, [r7, #12]
}
    90ae:	0018      	movs	r0, r3
    90b0:	46bd      	mov	sp, r7
    90b2:	b004      	add	sp, #16
    90b4:	bd80      	pop	{r7, pc}
    90b6:	46c0      	nop			; (mov r8, r8)
    90b8:	000065d3 	.word	0x000065d3
    90bc:	20003c68 	.word	0x20003c68
    90c0:	00004759 	.word	0x00004759
    90c4:	2000010c 	.word	0x2000010c
    90c8:	00004739 	.word	0x00004739
    90cc:	00004f09 	.word	0x00004f09
    90d0:	20003c48 	.word	0x20003c48
    90d4:	20003b6c 	.word	0x20003b6c
    90d8:	00006523 	.word	0x00006523
    90dc:	20003c00 	.word	0x20003c00
    90e0:	20003b68 	.word	0x20003b68
    90e4:	20003c54 	.word	0x20003c54

000090e8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    90e8:	b580      	push	{r7, lr}
    90ea:	b082      	sub	sp, #8
    90ec:	af00      	add	r7, sp, #0
    90ee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    90f0:	687b      	ldr	r3, [r7, #4]
    90f2:	2b00      	cmp	r3, #0
    90f4:	d101      	bne.n	90fa <vTaskSetTimeOutState+0x12>
    90f6:	b672      	cpsid	i
    90f8:	e7fe      	b.n	90f8 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
    90fa:	4b08      	ldr	r3, [pc, #32]	; (911c <vTaskSetTimeOutState+0x34>)
    90fc:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    90fe:	4b08      	ldr	r3, [pc, #32]	; (9120 <vTaskSetTimeOutState+0x38>)
    9100:	681a      	ldr	r2, [r3, #0]
    9102:	687b      	ldr	r3, [r7, #4]
    9104:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
    9106:	4b07      	ldr	r3, [pc, #28]	; (9124 <vTaskSetTimeOutState+0x3c>)
    9108:	681a      	ldr	r2, [r3, #0]
    910a:	687b      	ldr	r3, [r7, #4]
    910c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
    910e:	4b06      	ldr	r3, [pc, #24]	; (9128 <vTaskSetTimeOutState+0x40>)
    9110:	4798      	blx	r3
}
    9112:	46c0      	nop			; (mov r8, r8)
    9114:	46bd      	mov	sp, r7
    9116:	b002      	add	sp, #8
    9118:	bd80      	pop	{r7, pc}
    911a:	46c0      	nop			; (mov r8, r8)
    911c:	00006759 	.word	0x00006759
    9120:	20003c58 	.word	0x20003c58
    9124:	20003c44 	.word	0x20003c44
    9128:	0000677d 	.word	0x0000677d

0000912c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    912c:	b580      	push	{r7, lr}
    912e:	b082      	sub	sp, #8
    9130:	af00      	add	r7, sp, #0
    9132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    9134:	4b05      	ldr	r3, [pc, #20]	; (914c <vTaskInternalSetTimeOutState+0x20>)
    9136:	681a      	ldr	r2, [r3, #0]
    9138:	687b      	ldr	r3, [r7, #4]
    913a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    913c:	4b04      	ldr	r3, [pc, #16]	; (9150 <vTaskInternalSetTimeOutState+0x24>)
    913e:	681a      	ldr	r2, [r3, #0]
    9140:	687b      	ldr	r3, [r7, #4]
    9142:	605a      	str	r2, [r3, #4]
}
    9144:	46c0      	nop			; (mov r8, r8)
    9146:	46bd      	mov	sp, r7
    9148:	b002      	add	sp, #8
    914a:	bd80      	pop	{r7, pc}
    914c:	20003c58 	.word	0x20003c58
    9150:	20003c44 	.word	0x20003c44

00009154 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    9154:	b580      	push	{r7, lr}
    9156:	b086      	sub	sp, #24
    9158:	af00      	add	r7, sp, #0
    915a:	6078      	str	r0, [r7, #4]
    915c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    915e:	687b      	ldr	r3, [r7, #4]
    9160:	2b00      	cmp	r3, #0
    9162:	d101      	bne.n	9168 <xTaskCheckForTimeOut+0x14>
    9164:	b672      	cpsid	i
    9166:	e7fe      	b.n	9166 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    9168:	683b      	ldr	r3, [r7, #0]
    916a:	2b00      	cmp	r3, #0
    916c:	d101      	bne.n	9172 <xTaskCheckForTimeOut+0x1e>
    916e:	b672      	cpsid	i
    9170:	e7fe      	b.n	9170 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    9172:	4b1e      	ldr	r3, [pc, #120]	; (91ec <xTaskCheckForTimeOut+0x98>)
    9174:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    9176:	4b1e      	ldr	r3, [pc, #120]	; (91f0 <xTaskCheckForTimeOut+0x9c>)
    9178:	681b      	ldr	r3, [r3, #0]
    917a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    917c:	687b      	ldr	r3, [r7, #4]
    917e:	685b      	ldr	r3, [r3, #4]
    9180:	693a      	ldr	r2, [r7, #16]
    9182:	1ad3      	subs	r3, r2, r3
    9184:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    9186:	683b      	ldr	r3, [r7, #0]
    9188:	681b      	ldr	r3, [r3, #0]
    918a:	3301      	adds	r3, #1
    918c:	d102      	bne.n	9194 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    918e:	2300      	movs	r3, #0
    9190:	617b      	str	r3, [r7, #20]
    9192:	e024      	b.n	91de <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    9194:	687b      	ldr	r3, [r7, #4]
    9196:	681a      	ldr	r2, [r3, #0]
    9198:	4b16      	ldr	r3, [pc, #88]	; (91f4 <xTaskCheckForTimeOut+0xa0>)
    919a:	681b      	ldr	r3, [r3, #0]
    919c:	429a      	cmp	r2, r3
    919e:	d007      	beq.n	91b0 <xTaskCheckForTimeOut+0x5c>
    91a0:	687b      	ldr	r3, [r7, #4]
    91a2:	685a      	ldr	r2, [r3, #4]
    91a4:	693b      	ldr	r3, [r7, #16]
    91a6:	429a      	cmp	r2, r3
    91a8:	d802      	bhi.n	91b0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    91aa:	2301      	movs	r3, #1
    91ac:	617b      	str	r3, [r7, #20]
    91ae:	e016      	b.n	91de <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    91b0:	683b      	ldr	r3, [r7, #0]
    91b2:	681a      	ldr	r2, [r3, #0]
    91b4:	68fb      	ldr	r3, [r7, #12]
    91b6:	429a      	cmp	r2, r3
    91b8:	d90c      	bls.n	91d4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    91ba:	683b      	ldr	r3, [r7, #0]
    91bc:	681a      	ldr	r2, [r3, #0]
    91be:	68fb      	ldr	r3, [r7, #12]
    91c0:	1ad2      	subs	r2, r2, r3
    91c2:	683b      	ldr	r3, [r7, #0]
    91c4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    91c6:	687b      	ldr	r3, [r7, #4]
    91c8:	0018      	movs	r0, r3
    91ca:	4b0b      	ldr	r3, [pc, #44]	; (91f8 <xTaskCheckForTimeOut+0xa4>)
    91cc:	4798      	blx	r3
			xReturn = pdFALSE;
    91ce:	2300      	movs	r3, #0
    91d0:	617b      	str	r3, [r7, #20]
    91d2:	e004      	b.n	91de <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    91d4:	683b      	ldr	r3, [r7, #0]
    91d6:	2200      	movs	r2, #0
    91d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    91da:	2301      	movs	r3, #1
    91dc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    91de:	4b07      	ldr	r3, [pc, #28]	; (91fc <xTaskCheckForTimeOut+0xa8>)
    91e0:	4798      	blx	r3

	return xReturn;
    91e2:	697b      	ldr	r3, [r7, #20]
}
    91e4:	0018      	movs	r0, r3
    91e6:	46bd      	mov	sp, r7
    91e8:	b006      	add	sp, #24
    91ea:	bd80      	pop	{r7, pc}
    91ec:	00006759 	.word	0x00006759
    91f0:	20003c44 	.word	0x20003c44
    91f4:	20003c58 	.word	0x20003c58
    91f8:	0000912d 	.word	0x0000912d
    91fc:	0000677d 	.word	0x0000677d

00009200 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    9200:	b580      	push	{r7, lr}
    9202:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    9204:	4b02      	ldr	r3, [pc, #8]	; (9210 <vTaskMissedYield+0x10>)
    9206:	2201      	movs	r2, #1
    9208:	601a      	str	r2, [r3, #0]
}
    920a:	46c0      	nop			; (mov r8, r8)
    920c:	46bd      	mov	sp, r7
    920e:	bd80      	pop	{r7, pc}
    9210:	20003c54 	.word	0x20003c54

00009214 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
    9214:	b580      	push	{r7, lr}
    9216:	b084      	sub	sp, #16
    9218:	af00      	add	r7, sp, #0
    921a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
    921c:	687b      	ldr	r3, [r7, #4]
    921e:	2b00      	cmp	r3, #0
    9220:	d005      	beq.n	922e <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    9222:	687b      	ldr	r3, [r7, #4]
    9224:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
    9226:	68bb      	ldr	r3, [r7, #8]
    9228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    922a:	60fb      	str	r3, [r7, #12]
    922c:	e001      	b.n	9232 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
    922e:	2300      	movs	r3, #0
    9230:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
    9232:	68fb      	ldr	r3, [r7, #12]
	}
    9234:	0018      	movs	r0, r3
    9236:	46bd      	mov	sp, r7
    9238:	b004      	add	sp, #16
    923a:	bd80      	pop	{r7, pc}

0000923c <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
    923c:	b580      	push	{r7, lr}
    923e:	b084      	sub	sp, #16
    9240:	af00      	add	r7, sp, #0
    9242:	6078      	str	r0, [r7, #4]
    9244:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
    9246:	687b      	ldr	r3, [r7, #4]
    9248:	2b00      	cmp	r3, #0
    924a:	d004      	beq.n	9256 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    924c:	687b      	ldr	r3, [r7, #4]
    924e:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    9250:	68fb      	ldr	r3, [r7, #12]
    9252:	683a      	ldr	r2, [r7, #0]
    9254:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
    9256:	46c0      	nop			; (mov r8, r8)
    9258:	46bd      	mov	sp, r7
    925a:	b004      	add	sp, #16
    925c:	bd80      	pop	{r7, pc}
	...

00009260 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    9260:	b580      	push	{r7, lr}
    9262:	b082      	sub	sp, #8
    9264:	af00      	add	r7, sp, #0
    9266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    9268:	4b04      	ldr	r3, [pc, #16]	; (927c <prvIdleTask+0x1c>)
    926a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    926c:	4b04      	ldr	r3, [pc, #16]	; (9280 <prvIdleTask+0x20>)
    926e:	681b      	ldr	r3, [r3, #0]
    9270:	2b01      	cmp	r3, #1
    9272:	d9f9      	bls.n	9268 <prvIdleTask+0x8>
			{
				taskYIELD();
    9274:	4b03      	ldr	r3, [pc, #12]	; (9284 <prvIdleTask+0x24>)
    9276:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    9278:	e7f6      	b.n	9268 <prvIdleTask+0x8>
    927a:	46c0      	nop			; (mov r8, r8)
    927c:	00009315 	.word	0x00009315
    9280:	20003b6c 	.word	0x20003b6c
    9284:	00006741 	.word	0x00006741

00009288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    9288:	b580      	push	{r7, lr}
    928a:	b082      	sub	sp, #8
    928c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    928e:	2300      	movs	r3, #0
    9290:	607b      	str	r3, [r7, #4]
    9292:	e00c      	b.n	92ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    9294:	687a      	ldr	r2, [r7, #4]
    9296:	0013      	movs	r3, r2
    9298:	009b      	lsls	r3, r3, #2
    929a:	189b      	adds	r3, r3, r2
    929c:	009b      	lsls	r3, r3, #2
    929e:	4a14      	ldr	r2, [pc, #80]	; (92f0 <prvInitialiseTaskLists+0x68>)
    92a0:	189b      	adds	r3, r3, r2
    92a2:	0018      	movs	r0, r3
    92a4:	4b13      	ldr	r3, [pc, #76]	; (92f4 <prvInitialiseTaskLists+0x6c>)
    92a6:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    92a8:	687b      	ldr	r3, [r7, #4]
    92aa:	3301      	adds	r3, #1
    92ac:	607b      	str	r3, [r7, #4]
    92ae:	687b      	ldr	r3, [r7, #4]
    92b0:	2b04      	cmp	r3, #4
    92b2:	d9ef      	bls.n	9294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    92b4:	4b10      	ldr	r3, [pc, #64]	; (92f8 <prvInitialiseTaskLists+0x70>)
    92b6:	0018      	movs	r0, r3
    92b8:	4b0e      	ldr	r3, [pc, #56]	; (92f4 <prvInitialiseTaskLists+0x6c>)
    92ba:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    92bc:	4b0f      	ldr	r3, [pc, #60]	; (92fc <prvInitialiseTaskLists+0x74>)
    92be:	0018      	movs	r0, r3
    92c0:	4b0c      	ldr	r3, [pc, #48]	; (92f4 <prvInitialiseTaskLists+0x6c>)
    92c2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    92c4:	4b0e      	ldr	r3, [pc, #56]	; (9300 <prvInitialiseTaskLists+0x78>)
    92c6:	0018      	movs	r0, r3
    92c8:	4b0a      	ldr	r3, [pc, #40]	; (92f4 <prvInitialiseTaskLists+0x6c>)
    92ca:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    92cc:	4b0d      	ldr	r3, [pc, #52]	; (9304 <prvInitialiseTaskLists+0x7c>)
    92ce:	0018      	movs	r0, r3
    92d0:	4b08      	ldr	r3, [pc, #32]	; (92f4 <prvInitialiseTaskLists+0x6c>)
    92d2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    92d4:	4b0c      	ldr	r3, [pc, #48]	; (9308 <prvInitialiseTaskLists+0x80>)
    92d6:	0018      	movs	r0, r3
    92d8:	4b06      	ldr	r3, [pc, #24]	; (92f4 <prvInitialiseTaskLists+0x6c>)
    92da:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    92dc:	4b0b      	ldr	r3, [pc, #44]	; (930c <prvInitialiseTaskLists+0x84>)
    92de:	4a06      	ldr	r2, [pc, #24]	; (92f8 <prvInitialiseTaskLists+0x70>)
    92e0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    92e2:	4b0b      	ldr	r3, [pc, #44]	; (9310 <prvInitialiseTaskLists+0x88>)
    92e4:	4a05      	ldr	r2, [pc, #20]	; (92fc <prvInitialiseTaskLists+0x74>)
    92e6:	601a      	str	r2, [r3, #0]
}
    92e8:	46c0      	nop			; (mov r8, r8)
    92ea:	46bd      	mov	sp, r7
    92ec:	b002      	add	sp, #8
    92ee:	bd80      	pop	{r7, pc}
    92f0:	20003b6c 	.word	0x20003b6c
    92f4:	000064d1 	.word	0x000064d1
    92f8:	20003bd0 	.word	0x20003bd0
    92fc:	20003be4 	.word	0x20003be4
    9300:	20003c00 	.word	0x20003c00
    9304:	20003c14 	.word	0x20003c14
    9308:	20003c2c 	.word	0x20003c2c
    930c:	20003bf8 	.word	0x20003bf8
    9310:	20003bfc 	.word	0x20003bfc

00009314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    9314:	b580      	push	{r7, lr}
    9316:	b082      	sub	sp, #8
    9318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    931a:	e01a      	b.n	9352 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    931c:	4b11      	ldr	r3, [pc, #68]	; (9364 <prvCheckTasksWaitingTermination+0x50>)
    931e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    9320:	4b11      	ldr	r3, [pc, #68]	; (9368 <prvCheckTasksWaitingTermination+0x54>)
    9322:	68db      	ldr	r3, [r3, #12]
    9324:	68db      	ldr	r3, [r3, #12]
    9326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    9328:	687b      	ldr	r3, [r7, #4]
    932a:	3304      	adds	r3, #4
    932c:	0018      	movs	r0, r3
    932e:	4b0f      	ldr	r3, [pc, #60]	; (936c <prvCheckTasksWaitingTermination+0x58>)
    9330:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    9332:	4b0f      	ldr	r3, [pc, #60]	; (9370 <prvCheckTasksWaitingTermination+0x5c>)
    9334:	681b      	ldr	r3, [r3, #0]
    9336:	1e5a      	subs	r2, r3, #1
    9338:	4b0d      	ldr	r3, [pc, #52]	; (9370 <prvCheckTasksWaitingTermination+0x5c>)
    933a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    933c:	4b0d      	ldr	r3, [pc, #52]	; (9374 <prvCheckTasksWaitingTermination+0x60>)
    933e:	681b      	ldr	r3, [r3, #0]
    9340:	1e5a      	subs	r2, r3, #1
    9342:	4b0c      	ldr	r3, [pc, #48]	; (9374 <prvCheckTasksWaitingTermination+0x60>)
    9344:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    9346:	4b0c      	ldr	r3, [pc, #48]	; (9378 <prvCheckTasksWaitingTermination+0x64>)
    9348:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    934a:	687b      	ldr	r3, [r7, #4]
    934c:	0018      	movs	r0, r3
    934e:	4b0b      	ldr	r3, [pc, #44]	; (937c <prvCheckTasksWaitingTermination+0x68>)
    9350:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    9352:	4b08      	ldr	r3, [pc, #32]	; (9374 <prvCheckTasksWaitingTermination+0x60>)
    9354:	681b      	ldr	r3, [r3, #0]
    9356:	2b00      	cmp	r3, #0
    9358:	d1e0      	bne.n	931c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    935a:	46c0      	nop			; (mov r8, r8)
    935c:	46bd      	mov	sp, r7
    935e:	b002      	add	sp, #8
    9360:	bd80      	pop	{r7, pc}
    9362:	46c0      	nop			; (mov r8, r8)
    9364:	00006759 	.word	0x00006759
    9368:	20003c14 	.word	0x20003c14
    936c:	000065d3 	.word	0x000065d3
    9370:	20003c40 	.word	0x20003c40
    9374:	20003c28 	.word	0x20003c28
    9378:	0000677d 	.word	0x0000677d
    937c:	000093f1 	.word	0x000093f1

00009380 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    9380:	b580      	push	{r7, lr}
    9382:	b084      	sub	sp, #16
    9384:	af00      	add	r7, sp, #0
    9386:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
    9388:	2300      	movs	r3, #0
    938a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    938c:	e005      	b.n	939a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
    938e:	687b      	ldr	r3, [r7, #4]
    9390:	3301      	adds	r3, #1
    9392:	607b      	str	r3, [r7, #4]
			ulCount++;
    9394:	68fb      	ldr	r3, [r7, #12]
    9396:	3301      	adds	r3, #1
    9398:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    939a:	687b      	ldr	r3, [r7, #4]
    939c:	781b      	ldrb	r3, [r3, #0]
    939e:	2ba5      	cmp	r3, #165	; 0xa5
    93a0:	d0f5      	beq.n	938e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    93a2:	68fb      	ldr	r3, [r7, #12]
    93a4:	089b      	lsrs	r3, r3, #2
    93a6:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
    93a8:	68fb      	ldr	r3, [r7, #12]
    93aa:	b29b      	uxth	r3, r3
	}
    93ac:	0018      	movs	r0, r3
    93ae:	46bd      	mov	sp, r7
    93b0:	b004      	add	sp, #16
    93b2:	bd80      	pop	{r7, pc}

000093b4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    93b4:	b580      	push	{r7, lr}
    93b6:	b086      	sub	sp, #24
    93b8:	af00      	add	r7, sp, #0
    93ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    93bc:	687b      	ldr	r3, [r7, #4]
    93be:	2b00      	cmp	r3, #0
    93c0:	d102      	bne.n	93c8 <uxTaskGetStackHighWaterMark+0x14>
    93c2:	4b09      	ldr	r3, [pc, #36]	; (93e8 <uxTaskGetStackHighWaterMark+0x34>)
    93c4:	681b      	ldr	r3, [r3, #0]
    93c6:	e000      	b.n	93ca <uxTaskGetStackHighWaterMark+0x16>
    93c8:	687b      	ldr	r3, [r7, #4]
    93ca:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    93cc:	697b      	ldr	r3, [r7, #20]
    93ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    93d0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    93d2:	693b      	ldr	r3, [r7, #16]
    93d4:	0018      	movs	r0, r3
    93d6:	4b05      	ldr	r3, [pc, #20]	; (93ec <uxTaskGetStackHighWaterMark+0x38>)
    93d8:	4798      	blx	r3
    93da:	0003      	movs	r3, r0
    93dc:	60fb      	str	r3, [r7, #12]

		return uxReturn;
    93de:	68fb      	ldr	r3, [r7, #12]
	}
    93e0:	0018      	movs	r0, r3
    93e2:	46bd      	mov	sp, r7
    93e4:	b006      	add	sp, #24
    93e6:	bd80      	pop	{r7, pc}
    93e8:	20003b68 	.word	0x20003b68
    93ec:	00009381 	.word	0x00009381

000093f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    93f0:	b580      	push	{r7, lr}
    93f2:	b082      	sub	sp, #8
    93f4:	af00      	add	r7, sp, #0
    93f6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    93f8:	687b      	ldr	r3, [r7, #4]
    93fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    93fc:	0018      	movs	r0, r3
    93fe:	4b05      	ldr	r3, [pc, #20]	; (9414 <prvDeleteTCB+0x24>)
    9400:	4798      	blx	r3
			vPortFree( pxTCB );
    9402:	687b      	ldr	r3, [r7, #4]
    9404:	0018      	movs	r0, r3
    9406:	4b03      	ldr	r3, [pc, #12]	; (9414 <prvDeleteTCB+0x24>)
    9408:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    940a:	46c0      	nop			; (mov r8, r8)
    940c:	46bd      	mov	sp, r7
    940e:	b002      	add	sp, #8
    9410:	bd80      	pop	{r7, pc}
    9412:	46c0      	nop			; (mov r8, r8)
    9414:	00006955 	.word	0x00006955

00009418 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    9418:	b580      	push	{r7, lr}
    941a:	b082      	sub	sp, #8
    941c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    941e:	4b0e      	ldr	r3, [pc, #56]	; (9458 <prvResetNextTaskUnblockTime+0x40>)
    9420:	681b      	ldr	r3, [r3, #0]
    9422:	681b      	ldr	r3, [r3, #0]
    9424:	2b00      	cmp	r3, #0
    9426:	d101      	bne.n	942c <prvResetNextTaskUnblockTime+0x14>
    9428:	2301      	movs	r3, #1
    942a:	e000      	b.n	942e <prvResetNextTaskUnblockTime+0x16>
    942c:	2300      	movs	r3, #0
    942e:	2b00      	cmp	r3, #0
    9430:	d004      	beq.n	943c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    9432:	4b0a      	ldr	r3, [pc, #40]	; (945c <prvResetNextTaskUnblockTime+0x44>)
    9434:	2201      	movs	r2, #1
    9436:	4252      	negs	r2, r2
    9438:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    943a:	e008      	b.n	944e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    943c:	4b06      	ldr	r3, [pc, #24]	; (9458 <prvResetNextTaskUnblockTime+0x40>)
    943e:	681b      	ldr	r3, [r3, #0]
    9440:	68db      	ldr	r3, [r3, #12]
    9442:	68db      	ldr	r3, [r3, #12]
    9444:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    9446:	687b      	ldr	r3, [r7, #4]
    9448:	685a      	ldr	r2, [r3, #4]
    944a:	4b04      	ldr	r3, [pc, #16]	; (945c <prvResetNextTaskUnblockTime+0x44>)
    944c:	601a      	str	r2, [r3, #0]
}
    944e:	46c0      	nop			; (mov r8, r8)
    9450:	46bd      	mov	sp, r7
    9452:	b002      	add	sp, #8
    9454:	bd80      	pop	{r7, pc}
    9456:	46c0      	nop			; (mov r8, r8)
    9458:	20003bf8 	.word	0x20003bf8
    945c:	20003c60 	.word	0x20003c60

00009460 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    9460:	b580      	push	{r7, lr}
    9462:	b082      	sub	sp, #8
    9464:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    9466:	4b04      	ldr	r3, [pc, #16]	; (9478 <xTaskGetCurrentTaskHandle+0x18>)
    9468:	681b      	ldr	r3, [r3, #0]
    946a:	607b      	str	r3, [r7, #4]

		return xReturn;
    946c:	687b      	ldr	r3, [r7, #4]
	}
    946e:	0018      	movs	r0, r3
    9470:	46bd      	mov	sp, r7
    9472:	b002      	add	sp, #8
    9474:	bd80      	pop	{r7, pc}
    9476:	46c0      	nop			; (mov r8, r8)
    9478:	20003b68 	.word	0x20003b68

0000947c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    947c:	b580      	push	{r7, lr}
    947e:	b082      	sub	sp, #8
    9480:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    9482:	4b0a      	ldr	r3, [pc, #40]	; (94ac <xTaskGetSchedulerState+0x30>)
    9484:	681b      	ldr	r3, [r3, #0]
    9486:	2b00      	cmp	r3, #0
    9488:	d102      	bne.n	9490 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    948a:	2301      	movs	r3, #1
    948c:	607b      	str	r3, [r7, #4]
    948e:	e008      	b.n	94a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9490:	4b07      	ldr	r3, [pc, #28]	; (94b0 <xTaskGetSchedulerState+0x34>)
    9492:	681b      	ldr	r3, [r3, #0]
    9494:	2b00      	cmp	r3, #0
    9496:	d102      	bne.n	949e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    9498:	2302      	movs	r3, #2
    949a:	607b      	str	r3, [r7, #4]
    949c:	e001      	b.n	94a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    949e:	2300      	movs	r3, #0
    94a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    94a2:	687b      	ldr	r3, [r7, #4]
	}
    94a4:	0018      	movs	r0, r3
    94a6:	46bd      	mov	sp, r7
    94a8:	b002      	add	sp, #8
    94aa:	bd80      	pop	{r7, pc}
    94ac:	20003c4c 	.word	0x20003c4c
    94b0:	20003c68 	.word	0x20003c68

000094b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    94b4:	b590      	push	{r4, r7, lr}
    94b6:	b085      	sub	sp, #20
    94b8:	af00      	add	r7, sp, #0
    94ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    94bc:	687b      	ldr	r3, [r7, #4]
    94be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    94c0:	2300      	movs	r3, #0
    94c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    94c4:	687b      	ldr	r3, [r7, #4]
    94c6:	2b00      	cmp	r3, #0
    94c8:	d100      	bne.n	94cc <xTaskPriorityInherit+0x18>
    94ca:	e09d      	b.n	9608 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    94cc:	68bb      	ldr	r3, [r7, #8]
    94ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    94d0:	4b50      	ldr	r3, [pc, #320]	; (9614 <xTaskPriorityInherit+0x160>)
    94d2:	681b      	ldr	r3, [r3, #0]
    94d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    94d6:	429a      	cmp	r2, r3
    94d8:	d300      	bcc.n	94dc <xTaskPriorityInherit+0x28>
    94da:	e08c      	b.n	95f6 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    94dc:	68bb      	ldr	r3, [r7, #8]
    94de:	699b      	ldr	r3, [r3, #24]
    94e0:	2b00      	cmp	r3, #0
    94e2:	db06      	blt.n	94f2 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    94e4:	4b4b      	ldr	r3, [pc, #300]	; (9614 <xTaskPriorityInherit+0x160>)
    94e6:	681b      	ldr	r3, [r3, #0]
    94e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    94ea:	2205      	movs	r2, #5
    94ec:	1ad2      	subs	r2, r2, r3
    94ee:	68bb      	ldr	r3, [r7, #8]
    94f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    94f2:	68bb      	ldr	r3, [r7, #8]
    94f4:	6959      	ldr	r1, [r3, #20]
    94f6:	68bb      	ldr	r3, [r7, #8]
    94f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    94fa:	0013      	movs	r3, r2
    94fc:	009b      	lsls	r3, r3, #2
    94fe:	189b      	adds	r3, r3, r2
    9500:	009b      	lsls	r3, r3, #2
    9502:	4a45      	ldr	r2, [pc, #276]	; (9618 <xTaskPriorityInherit+0x164>)
    9504:	189b      	adds	r3, r3, r2
    9506:	4299      	cmp	r1, r3
    9508:	d101      	bne.n	950e <xTaskPriorityInherit+0x5a>
    950a:	2301      	movs	r3, #1
    950c:	e000      	b.n	9510 <xTaskPriorityInherit+0x5c>
    950e:	2300      	movs	r3, #0
    9510:	2b00      	cmp	r3, #0
    9512:	d037      	beq.n	9584 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9514:	68bb      	ldr	r3, [r7, #8]
    9516:	3304      	adds	r3, #4
    9518:	0018      	movs	r0, r3
    951a:	4b40      	ldr	r3, [pc, #256]	; (961c <xTaskPriorityInherit+0x168>)
    951c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    951e:	4b3d      	ldr	r3, [pc, #244]	; (9614 <xTaskPriorityInherit+0x160>)
    9520:	681b      	ldr	r3, [r3, #0]
    9522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9524:	68bb      	ldr	r3, [r7, #8]
    9526:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    9528:	68bb      	ldr	r3, [r7, #8]
    952a:	0018      	movs	r0, r3
    952c:	4b3c      	ldr	r3, [pc, #240]	; (9620 <xTaskPriorityInherit+0x16c>)
    952e:	4798      	blx	r3
    9530:	0003      	movs	r3, r0
    9532:	001a      	movs	r2, r3
    9534:	4b3b      	ldr	r3, [pc, #236]	; (9624 <xTaskPriorityInherit+0x170>)
    9536:	881b      	ldrh	r3, [r3, #0]
    9538:	4013      	ands	r3, r2
    953a:	b29b      	uxth	r3, r3
    953c:	2b00      	cmp	r3, #0
    953e:	d008      	beq.n	9552 <xTaskPriorityInherit+0x9e>
    9540:	68bb      	ldr	r3, [r7, #8]
    9542:	0018      	movs	r0, r3
    9544:	4b38      	ldr	r3, [pc, #224]	; (9628 <xTaskPriorityInherit+0x174>)
    9546:	4798      	blx	r3
    9548:	0003      	movs	r3, r0
    954a:	b2db      	uxtb	r3, r3
    954c:	0018      	movs	r0, r3
    954e:	4b37      	ldr	r3, [pc, #220]	; (962c <xTaskPriorityInherit+0x178>)
    9550:	4798      	blx	r3
    9552:	68bb      	ldr	r3, [r7, #8]
    9554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9556:	4b36      	ldr	r3, [pc, #216]	; (9630 <xTaskPriorityInherit+0x17c>)
    9558:	681b      	ldr	r3, [r3, #0]
    955a:	429a      	cmp	r2, r3
    955c:	d903      	bls.n	9566 <xTaskPriorityInherit+0xb2>
    955e:	68bb      	ldr	r3, [r7, #8]
    9560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9562:	4b33      	ldr	r3, [pc, #204]	; (9630 <xTaskPriorityInherit+0x17c>)
    9564:	601a      	str	r2, [r3, #0]
    9566:	68bb      	ldr	r3, [r7, #8]
    9568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    956a:	0013      	movs	r3, r2
    956c:	009b      	lsls	r3, r3, #2
    956e:	189b      	adds	r3, r3, r2
    9570:	009b      	lsls	r3, r3, #2
    9572:	4a29      	ldr	r2, [pc, #164]	; (9618 <xTaskPriorityInherit+0x164>)
    9574:	189a      	adds	r2, r3, r2
    9576:	68bb      	ldr	r3, [r7, #8]
    9578:	3304      	adds	r3, #4
    957a:	0019      	movs	r1, r3
    957c:	0010      	movs	r0, r2
    957e:	4b2d      	ldr	r3, [pc, #180]	; (9634 <xTaskPriorityInherit+0x180>)
    9580:	4798      	blx	r3
    9582:	e004      	b.n	958e <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    9584:	4b23      	ldr	r3, [pc, #140]	; (9614 <xTaskPriorityInherit+0x160>)
    9586:	681b      	ldr	r3, [r3, #0]
    9588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    958a:	68bb      	ldr	r3, [r7, #8]
    958c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    958e:	68bb      	ldr	r3, [r7, #8]
    9590:	0018      	movs	r0, r3
    9592:	4b23      	ldr	r3, [pc, #140]	; (9620 <xTaskPriorityInherit+0x16c>)
    9594:	4798      	blx	r3
    9596:	0003      	movs	r3, r0
    9598:	001a      	movs	r2, r3
    959a:	4b22      	ldr	r3, [pc, #136]	; (9624 <xTaskPriorityInherit+0x170>)
    959c:	881b      	ldrh	r3, [r3, #0]
    959e:	4013      	ands	r3, r2
    95a0:	b29b      	uxth	r3, r3
    95a2:	2b00      	cmp	r3, #0
    95a4:	d024      	beq.n	95f0 <xTaskPriorityInherit+0x13c>
    95a6:	68bb      	ldr	r3, [r7, #8]
    95a8:	0018      	movs	r0, r3
    95aa:	4b1f      	ldr	r3, [pc, #124]	; (9628 <xTaskPriorityInherit+0x174>)
    95ac:	4798      	blx	r3
    95ae:	0003      	movs	r3, r0
    95b0:	b2db      	uxtb	r3, r3
    95b2:	001c      	movs	r4, r3
    95b4:	68bb      	ldr	r3, [r7, #8]
    95b6:	0018      	movs	r0, r3
    95b8:	4b1b      	ldr	r3, [pc, #108]	; (9628 <xTaskPriorityInherit+0x174>)
    95ba:	4798      	blx	r3
    95bc:	0003      	movs	r3, r0
    95be:	b2db      	uxtb	r3, r3
    95c0:	0019      	movs	r1, r3
    95c2:	2003      	movs	r0, #3
    95c4:	4b1c      	ldr	r3, [pc, #112]	; (9638 <xTaskPriorityInherit+0x184>)
    95c6:	4798      	blx	r3
    95c8:	0003      	movs	r3, r0
    95ca:	0022      	movs	r2, r4
    95cc:	2103      	movs	r1, #3
    95ce:	208e      	movs	r0, #142	; 0x8e
    95d0:	4c1a      	ldr	r4, [pc, #104]	; (963c <xTaskPriorityInherit+0x188>)
    95d2:	47a0      	blx	r4
    95d4:	68bb      	ldr	r3, [r7, #8]
    95d6:	0018      	movs	r0, r3
    95d8:	4b13      	ldr	r3, [pc, #76]	; (9628 <xTaskPriorityInherit+0x174>)
    95da:	4798      	blx	r3
    95dc:	0003      	movs	r3, r0
    95de:	b2d9      	uxtb	r1, r3
    95e0:	4b0c      	ldr	r3, [pc, #48]	; (9614 <xTaskPriorityInherit+0x160>)
    95e2:	681b      	ldr	r3, [r3, #0]
    95e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    95e6:	b2db      	uxtb	r3, r3
    95e8:	001a      	movs	r2, r3
    95ea:	2003      	movs	r0, #3
    95ec:	4b14      	ldr	r3, [pc, #80]	; (9640 <xTaskPriorityInherit+0x18c>)
    95ee:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    95f0:	2301      	movs	r3, #1
    95f2:	60fb      	str	r3, [r7, #12]
    95f4:	e008      	b.n	9608 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    95f6:	68bb      	ldr	r3, [r7, #8]
    95f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    95fa:	4b06      	ldr	r3, [pc, #24]	; (9614 <xTaskPriorityInherit+0x160>)
    95fc:	681b      	ldr	r3, [r3, #0]
    95fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9600:	429a      	cmp	r2, r3
    9602:	d201      	bcs.n	9608 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    9604:	2301      	movs	r3, #1
    9606:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    9608:	68fb      	ldr	r3, [r7, #12]
	}
    960a:	0018      	movs	r0, r3
    960c:	46bd      	mov	sp, r7
    960e:	b005      	add	sp, #20
    9610:	bd90      	pop	{r4, r7, pc}
    9612:	46c0      	nop			; (mov r8, r8)
    9614:	20003b68 	.word	0x20003b68
    9618:	20003b6c 	.word	0x20003b6c
    961c:	000065d3 	.word	0x000065d3
    9620:	00004759 	.word	0x00004759
    9624:	2000010c 	.word	0x2000010c
    9628:	00004739 	.word	0x00004739
    962c:	00004f09 	.word	0x00004f09
    9630:	20003c48 	.word	0x20003c48
    9634:	00006523 	.word	0x00006523
    9638:	00005711 	.word	0x00005711
    963c:	00005281 	.word	0x00005281
    9640:	0000566d 	.word	0x0000566d

00009644 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    9644:	b590      	push	{r4, r7, lr}
    9646:	b085      	sub	sp, #20
    9648:	af00      	add	r7, sp, #0
    964a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    964c:	687b      	ldr	r3, [r7, #4]
    964e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    9650:	2300      	movs	r3, #0
    9652:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	2b00      	cmp	r3, #0
    9658:	d100      	bne.n	965c <xTaskPriorityDisinherit+0x18>
    965a:	e089      	b.n	9770 <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    965c:	4b47      	ldr	r3, [pc, #284]	; (977c <xTaskPriorityDisinherit+0x138>)
    965e:	681b      	ldr	r3, [r3, #0]
    9660:	68ba      	ldr	r2, [r7, #8]
    9662:	429a      	cmp	r2, r3
    9664:	d001      	beq.n	966a <xTaskPriorityDisinherit+0x26>
    9666:	b672      	cpsid	i
    9668:	e7fe      	b.n	9668 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
    966a:	68bb      	ldr	r3, [r7, #8]
    966c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    966e:	2b00      	cmp	r3, #0
    9670:	d101      	bne.n	9676 <xTaskPriorityDisinherit+0x32>
    9672:	b672      	cpsid	i
    9674:	e7fe      	b.n	9674 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
    9676:	68bb      	ldr	r3, [r7, #8]
    9678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    967a:	1e5a      	subs	r2, r3, #1
    967c:	68bb      	ldr	r3, [r7, #8]
    967e:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    9680:	68bb      	ldr	r3, [r7, #8]
    9682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9684:	68bb      	ldr	r3, [r7, #8]
    9686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9688:	429a      	cmp	r2, r3
    968a:	d071      	beq.n	9770 <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    968c:	68bb      	ldr	r3, [r7, #8]
    968e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    9690:	2b00      	cmp	r3, #0
    9692:	d16d      	bne.n	9770 <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9694:	68bb      	ldr	r3, [r7, #8]
    9696:	3304      	adds	r3, #4
    9698:	0018      	movs	r0, r3
    969a:	4b39      	ldr	r3, [pc, #228]	; (9780 <xTaskPriorityDisinherit+0x13c>)
    969c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    969e:	68bb      	ldr	r3, [r7, #8]
    96a0:	0018      	movs	r0, r3
    96a2:	4b38      	ldr	r3, [pc, #224]	; (9784 <xTaskPriorityDisinherit+0x140>)
    96a4:	4798      	blx	r3
    96a6:	0003      	movs	r3, r0
    96a8:	001a      	movs	r2, r3
    96aa:	4b37      	ldr	r3, [pc, #220]	; (9788 <xTaskPriorityDisinherit+0x144>)
    96ac:	881b      	ldrh	r3, [r3, #0]
    96ae:	4013      	ands	r3, r2
    96b0:	b29b      	uxth	r3, r3
    96b2:	2b00      	cmp	r3, #0
    96b4:	d023      	beq.n	96fe <xTaskPriorityDisinherit+0xba>
    96b6:	68bb      	ldr	r3, [r7, #8]
    96b8:	0018      	movs	r0, r3
    96ba:	4b34      	ldr	r3, [pc, #208]	; (978c <xTaskPriorityDisinherit+0x148>)
    96bc:	4798      	blx	r3
    96be:	0003      	movs	r3, r0
    96c0:	b2db      	uxtb	r3, r3
    96c2:	001c      	movs	r4, r3
    96c4:	68bb      	ldr	r3, [r7, #8]
    96c6:	0018      	movs	r0, r3
    96c8:	4b30      	ldr	r3, [pc, #192]	; (978c <xTaskPriorityDisinherit+0x148>)
    96ca:	4798      	blx	r3
    96cc:	0003      	movs	r3, r0
    96ce:	b2db      	uxtb	r3, r3
    96d0:	0019      	movs	r1, r3
    96d2:	2003      	movs	r0, #3
    96d4:	4b2e      	ldr	r3, [pc, #184]	; (9790 <xTaskPriorityDisinherit+0x14c>)
    96d6:	4798      	blx	r3
    96d8:	0003      	movs	r3, r0
    96da:	0022      	movs	r2, r4
    96dc:	2103      	movs	r1, #3
    96de:	208f      	movs	r0, #143	; 0x8f
    96e0:	4c2c      	ldr	r4, [pc, #176]	; (9794 <xTaskPriorityDisinherit+0x150>)
    96e2:	47a0      	blx	r4
    96e4:	68bb      	ldr	r3, [r7, #8]
    96e6:	0018      	movs	r0, r3
    96e8:	4b28      	ldr	r3, [pc, #160]	; (978c <xTaskPriorityDisinherit+0x148>)
    96ea:	4798      	blx	r3
    96ec:	0003      	movs	r3, r0
    96ee:	b2d9      	uxtb	r1, r3
    96f0:	68bb      	ldr	r3, [r7, #8]
    96f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    96f4:	b2db      	uxtb	r3, r3
    96f6:	001a      	movs	r2, r3
    96f8:	2003      	movs	r0, #3
    96fa:	4b27      	ldr	r3, [pc, #156]	; (9798 <xTaskPriorityDisinherit+0x154>)
    96fc:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    96fe:	68bb      	ldr	r3, [r7, #8]
    9700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    9702:	68bb      	ldr	r3, [r7, #8]
    9704:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9706:	68bb      	ldr	r3, [r7, #8]
    9708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    970a:	2205      	movs	r2, #5
    970c:	1ad2      	subs	r2, r2, r3
    970e:	68bb      	ldr	r3, [r7, #8]
    9710:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    9712:	68bb      	ldr	r3, [r7, #8]
    9714:	0018      	movs	r0, r3
    9716:	4b1b      	ldr	r3, [pc, #108]	; (9784 <xTaskPriorityDisinherit+0x140>)
    9718:	4798      	blx	r3
    971a:	0003      	movs	r3, r0
    971c:	001a      	movs	r2, r3
    971e:	4b1a      	ldr	r3, [pc, #104]	; (9788 <xTaskPriorityDisinherit+0x144>)
    9720:	881b      	ldrh	r3, [r3, #0]
    9722:	4013      	ands	r3, r2
    9724:	b29b      	uxth	r3, r3
    9726:	2b00      	cmp	r3, #0
    9728:	d008      	beq.n	973c <xTaskPriorityDisinherit+0xf8>
    972a:	68bb      	ldr	r3, [r7, #8]
    972c:	0018      	movs	r0, r3
    972e:	4b17      	ldr	r3, [pc, #92]	; (978c <xTaskPriorityDisinherit+0x148>)
    9730:	4798      	blx	r3
    9732:	0003      	movs	r3, r0
    9734:	b2db      	uxtb	r3, r3
    9736:	0018      	movs	r0, r3
    9738:	4b18      	ldr	r3, [pc, #96]	; (979c <xTaskPriorityDisinherit+0x158>)
    973a:	4798      	blx	r3
    973c:	68bb      	ldr	r3, [r7, #8]
    973e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9740:	4b17      	ldr	r3, [pc, #92]	; (97a0 <xTaskPriorityDisinherit+0x15c>)
    9742:	681b      	ldr	r3, [r3, #0]
    9744:	429a      	cmp	r2, r3
    9746:	d903      	bls.n	9750 <xTaskPriorityDisinherit+0x10c>
    9748:	68bb      	ldr	r3, [r7, #8]
    974a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    974c:	4b14      	ldr	r3, [pc, #80]	; (97a0 <xTaskPriorityDisinherit+0x15c>)
    974e:	601a      	str	r2, [r3, #0]
    9750:	68bb      	ldr	r3, [r7, #8]
    9752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9754:	0013      	movs	r3, r2
    9756:	009b      	lsls	r3, r3, #2
    9758:	189b      	adds	r3, r3, r2
    975a:	009b      	lsls	r3, r3, #2
    975c:	4a11      	ldr	r2, [pc, #68]	; (97a4 <xTaskPriorityDisinherit+0x160>)
    975e:	189a      	adds	r2, r3, r2
    9760:	68bb      	ldr	r3, [r7, #8]
    9762:	3304      	adds	r3, #4
    9764:	0019      	movs	r1, r3
    9766:	0010      	movs	r0, r2
    9768:	4b0f      	ldr	r3, [pc, #60]	; (97a8 <xTaskPriorityDisinherit+0x164>)
    976a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    976c:	2301      	movs	r3, #1
    976e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    9770:	68fb      	ldr	r3, [r7, #12]
	}
    9772:	0018      	movs	r0, r3
    9774:	46bd      	mov	sp, r7
    9776:	b005      	add	sp, #20
    9778:	bd90      	pop	{r4, r7, pc}
    977a:	46c0      	nop			; (mov r8, r8)
    977c:	20003b68 	.word	0x20003b68
    9780:	000065d3 	.word	0x000065d3
    9784:	00004759 	.word	0x00004759
    9788:	2000010c 	.word	0x2000010c
    978c:	00004739 	.word	0x00004739
    9790:	00005711 	.word	0x00005711
    9794:	00005281 	.word	0x00005281
    9798:	0000566d 	.word	0x0000566d
    979c:	00004f09 	.word	0x00004f09
    97a0:	20003c48 	.word	0x20003c48
    97a4:	20003b6c 	.word	0x20003b6c
    97a8:	00006523 	.word	0x00006523

000097ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    97ac:	b590      	push	{r4, r7, lr}
    97ae:	b087      	sub	sp, #28
    97b0:	af00      	add	r7, sp, #0
    97b2:	6078      	str	r0, [r7, #4]
    97b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    97b6:	687b      	ldr	r3, [r7, #4]
    97b8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    97ba:	2301      	movs	r3, #1
    97bc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    97be:	687b      	ldr	r3, [r7, #4]
    97c0:	2b00      	cmp	r3, #0
    97c2:	d100      	bne.n	97c6 <vTaskPriorityDisinheritAfterTimeout+0x1a>
    97c4:	e0a4      	b.n	9910 <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
    97c6:	693b      	ldr	r3, [r7, #16]
    97c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    97ca:	2b00      	cmp	r3, #0
    97cc:	d101      	bne.n	97d2 <vTaskPriorityDisinheritAfterTimeout+0x26>
    97ce:	b672      	cpsid	i
    97d0:	e7fe      	b.n	97d0 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    97d2:	693b      	ldr	r3, [r7, #16]
    97d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    97d6:	683b      	ldr	r3, [r7, #0]
    97d8:	429a      	cmp	r2, r3
    97da:	d202      	bcs.n	97e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    97dc:	683b      	ldr	r3, [r7, #0]
    97de:	617b      	str	r3, [r7, #20]
    97e0:	e002      	b.n	97e8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    97e2:	693b      	ldr	r3, [r7, #16]
    97e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    97e6:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    97e8:	693b      	ldr	r3, [r7, #16]
    97ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    97ec:	697b      	ldr	r3, [r7, #20]
    97ee:	429a      	cmp	r2, r3
    97f0:	d100      	bne.n	97f4 <vTaskPriorityDisinheritAfterTimeout+0x48>
    97f2:	e08d      	b.n	9910 <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    97f4:	693b      	ldr	r3, [r7, #16]
    97f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    97f8:	68fb      	ldr	r3, [r7, #12]
    97fa:	429a      	cmp	r2, r3
    97fc:	d000      	beq.n	9800 <vTaskPriorityDisinheritAfterTimeout+0x54>
    97fe:	e087      	b.n	9910 <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
    9800:	4b45      	ldr	r3, [pc, #276]	; (9918 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
    9802:	681b      	ldr	r3, [r3, #0]
    9804:	693a      	ldr	r2, [r7, #16]
    9806:	429a      	cmp	r2, r3
    9808:	d101      	bne.n	980e <vTaskPriorityDisinheritAfterTimeout+0x62>
    980a:	b672      	cpsid	i
    980c:	e7fe      	b.n	980c <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    980e:	693b      	ldr	r3, [r7, #16]
    9810:	0018      	movs	r0, r3
    9812:	4b42      	ldr	r3, [pc, #264]	; (991c <vTaskPriorityDisinheritAfterTimeout+0x170>)
    9814:	4798      	blx	r3
    9816:	0003      	movs	r3, r0
    9818:	001a      	movs	r2, r3
    981a:	4b41      	ldr	r3, [pc, #260]	; (9920 <vTaskPriorityDisinheritAfterTimeout+0x174>)
    981c:	881b      	ldrh	r3, [r3, #0]
    981e:	4013      	ands	r3, r2
    9820:	b29b      	uxth	r3, r3
    9822:	2b00      	cmp	r3, #0
    9824:	d023      	beq.n	986e <vTaskPriorityDisinheritAfterTimeout+0xc2>
    9826:	693b      	ldr	r3, [r7, #16]
    9828:	0018      	movs	r0, r3
    982a:	4b3e      	ldr	r3, [pc, #248]	; (9924 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    982c:	4798      	blx	r3
    982e:	0003      	movs	r3, r0
    9830:	b2db      	uxtb	r3, r3
    9832:	001c      	movs	r4, r3
    9834:	693b      	ldr	r3, [r7, #16]
    9836:	0018      	movs	r0, r3
    9838:	4b3a      	ldr	r3, [pc, #232]	; (9924 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    983a:	4798      	blx	r3
    983c:	0003      	movs	r3, r0
    983e:	b2db      	uxtb	r3, r3
    9840:	0019      	movs	r1, r3
    9842:	2003      	movs	r0, #3
    9844:	4b38      	ldr	r3, [pc, #224]	; (9928 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
    9846:	4798      	blx	r3
    9848:	0003      	movs	r3, r0
    984a:	0022      	movs	r2, r4
    984c:	2103      	movs	r1, #3
    984e:	208f      	movs	r0, #143	; 0x8f
    9850:	4c36      	ldr	r4, [pc, #216]	; (992c <vTaskPriorityDisinheritAfterTimeout+0x180>)
    9852:	47a0      	blx	r4
    9854:	693b      	ldr	r3, [r7, #16]
    9856:	0018      	movs	r0, r3
    9858:	4b32      	ldr	r3, [pc, #200]	; (9924 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    985a:	4798      	blx	r3
    985c:	0003      	movs	r3, r0
    985e:	b2d9      	uxtb	r1, r3
    9860:	693b      	ldr	r3, [r7, #16]
    9862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9864:	b2db      	uxtb	r3, r3
    9866:	001a      	movs	r2, r3
    9868:	2003      	movs	r0, #3
    986a:	4b31      	ldr	r3, [pc, #196]	; (9930 <vTaskPriorityDisinheritAfterTimeout+0x184>)
    986c:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    986e:	693b      	ldr	r3, [r7, #16]
    9870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9872:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    9874:	693b      	ldr	r3, [r7, #16]
    9876:	697a      	ldr	r2, [r7, #20]
    9878:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    987a:	693b      	ldr	r3, [r7, #16]
    987c:	699b      	ldr	r3, [r3, #24]
    987e:	2b00      	cmp	r3, #0
    9880:	db04      	blt.n	988c <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9882:	697b      	ldr	r3, [r7, #20]
    9884:	2205      	movs	r2, #5
    9886:	1ad2      	subs	r2, r2, r3
    9888:	693b      	ldr	r3, [r7, #16]
    988a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    988c:	693b      	ldr	r3, [r7, #16]
    988e:	6959      	ldr	r1, [r3, #20]
    9890:	68ba      	ldr	r2, [r7, #8]
    9892:	0013      	movs	r3, r2
    9894:	009b      	lsls	r3, r3, #2
    9896:	189b      	adds	r3, r3, r2
    9898:	009b      	lsls	r3, r3, #2
    989a:	4a26      	ldr	r2, [pc, #152]	; (9934 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    989c:	189b      	adds	r3, r3, r2
    989e:	4299      	cmp	r1, r3
    98a0:	d101      	bne.n	98a6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
    98a2:	2301      	movs	r3, #1
    98a4:	e000      	b.n	98a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
    98a6:	2300      	movs	r3, #0
    98a8:	2b00      	cmp	r3, #0
    98aa:	d031      	beq.n	9910 <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    98ac:	693b      	ldr	r3, [r7, #16]
    98ae:	3304      	adds	r3, #4
    98b0:	0018      	movs	r0, r3
    98b2:	4b21      	ldr	r3, [pc, #132]	; (9938 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
    98b4:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    98b6:	693b      	ldr	r3, [r7, #16]
    98b8:	0018      	movs	r0, r3
    98ba:	4b18      	ldr	r3, [pc, #96]	; (991c <vTaskPriorityDisinheritAfterTimeout+0x170>)
    98bc:	4798      	blx	r3
    98be:	0003      	movs	r3, r0
    98c0:	001a      	movs	r2, r3
    98c2:	4b17      	ldr	r3, [pc, #92]	; (9920 <vTaskPriorityDisinheritAfterTimeout+0x174>)
    98c4:	881b      	ldrh	r3, [r3, #0]
    98c6:	4013      	ands	r3, r2
    98c8:	b29b      	uxth	r3, r3
    98ca:	2b00      	cmp	r3, #0
    98cc:	d008      	beq.n	98e0 <vTaskPriorityDisinheritAfterTimeout+0x134>
    98ce:	693b      	ldr	r3, [r7, #16]
    98d0:	0018      	movs	r0, r3
    98d2:	4b14      	ldr	r3, [pc, #80]	; (9924 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    98d4:	4798      	blx	r3
    98d6:	0003      	movs	r3, r0
    98d8:	b2db      	uxtb	r3, r3
    98da:	0018      	movs	r0, r3
    98dc:	4b17      	ldr	r3, [pc, #92]	; (993c <vTaskPriorityDisinheritAfterTimeout+0x190>)
    98de:	4798      	blx	r3
    98e0:	693b      	ldr	r3, [r7, #16]
    98e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    98e4:	4b16      	ldr	r3, [pc, #88]	; (9940 <vTaskPriorityDisinheritAfterTimeout+0x194>)
    98e6:	681b      	ldr	r3, [r3, #0]
    98e8:	429a      	cmp	r2, r3
    98ea:	d903      	bls.n	98f4 <vTaskPriorityDisinheritAfterTimeout+0x148>
    98ec:	693b      	ldr	r3, [r7, #16]
    98ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    98f0:	4b13      	ldr	r3, [pc, #76]	; (9940 <vTaskPriorityDisinheritAfterTimeout+0x194>)
    98f2:	601a      	str	r2, [r3, #0]
    98f4:	693b      	ldr	r3, [r7, #16]
    98f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    98f8:	0013      	movs	r3, r2
    98fa:	009b      	lsls	r3, r3, #2
    98fc:	189b      	adds	r3, r3, r2
    98fe:	009b      	lsls	r3, r3, #2
    9900:	4a0c      	ldr	r2, [pc, #48]	; (9934 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    9902:	189a      	adds	r2, r3, r2
    9904:	693b      	ldr	r3, [r7, #16]
    9906:	3304      	adds	r3, #4
    9908:	0019      	movs	r1, r3
    990a:	0010      	movs	r0, r2
    990c:	4b0d      	ldr	r3, [pc, #52]	; (9944 <vTaskPriorityDisinheritAfterTimeout+0x198>)
    990e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    9910:	46c0      	nop			; (mov r8, r8)
    9912:	46bd      	mov	sp, r7
    9914:	b007      	add	sp, #28
    9916:	bd90      	pop	{r4, r7, pc}
    9918:	20003b68 	.word	0x20003b68
    991c:	00004759 	.word	0x00004759
    9920:	2000010c 	.word	0x2000010c
    9924:	00004739 	.word	0x00004739
    9928:	00005711 	.word	0x00005711
    992c:	00005281 	.word	0x00005281
    9930:	0000566d 	.word	0x0000566d
    9934:	20003b6c 	.word	0x20003b6c
    9938:	000065d3 	.word	0x000065d3
    993c:	00004f09 	.word	0x00004f09
    9940:	20003c48 	.word	0x20003c48
    9944:	00006523 	.word	0x00006523

00009948 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    9948:	b580      	push	{r7, lr}
    994a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    994c:	4b06      	ldr	r3, [pc, #24]	; (9968 <pvTaskIncrementMutexHeldCount+0x20>)
    994e:	681b      	ldr	r3, [r3, #0]
    9950:	2b00      	cmp	r3, #0
    9952:	d004      	beq.n	995e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    9954:	4b04      	ldr	r3, [pc, #16]	; (9968 <pvTaskIncrementMutexHeldCount+0x20>)
    9956:	681b      	ldr	r3, [r3, #0]
    9958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    995a:	3201      	adds	r2, #1
    995c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
    995e:	4b02      	ldr	r3, [pc, #8]	; (9968 <pvTaskIncrementMutexHeldCount+0x20>)
    9960:	681b      	ldr	r3, [r3, #0]
	}
    9962:	0018      	movs	r0, r3
    9964:	46bd      	mov	sp, r7
    9966:	bd80      	pop	{r7, pc}
    9968:	20003b68 	.word	0x20003b68

0000996c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    996c:	b580      	push	{r7, lr}
    996e:	b084      	sub	sp, #16
    9970:	af00      	add	r7, sp, #0
    9972:	6078      	str	r0, [r7, #4]
    9974:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    9976:	4b21      	ldr	r3, [pc, #132]	; (99fc <prvAddCurrentTaskToDelayedList+0x90>)
    9978:	681b      	ldr	r3, [r3, #0]
    997a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    997c:	4b20      	ldr	r3, [pc, #128]	; (9a00 <prvAddCurrentTaskToDelayedList+0x94>)
    997e:	681b      	ldr	r3, [r3, #0]
    9980:	3304      	adds	r3, #4
    9982:	0018      	movs	r0, r3
    9984:	4b1f      	ldr	r3, [pc, #124]	; (9a04 <prvAddCurrentTaskToDelayedList+0x98>)
    9986:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    9988:	687b      	ldr	r3, [r7, #4]
    998a:	3301      	adds	r3, #1
    998c:	d10b      	bne.n	99a6 <prvAddCurrentTaskToDelayedList+0x3a>
    998e:	683b      	ldr	r3, [r7, #0]
    9990:	2b00      	cmp	r3, #0
    9992:	d008      	beq.n	99a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9994:	4b1a      	ldr	r3, [pc, #104]	; (9a00 <prvAddCurrentTaskToDelayedList+0x94>)
    9996:	681b      	ldr	r3, [r3, #0]
    9998:	1d1a      	adds	r2, r3, #4
    999a:	4b1b      	ldr	r3, [pc, #108]	; (9a08 <prvAddCurrentTaskToDelayedList+0x9c>)
    999c:	0011      	movs	r1, r2
    999e:	0018      	movs	r0, r3
    99a0:	4b1a      	ldr	r3, [pc, #104]	; (9a0c <prvAddCurrentTaskToDelayedList+0xa0>)
    99a2:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    99a4:	e026      	b.n	99f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    99a6:	68fa      	ldr	r2, [r7, #12]
    99a8:	687b      	ldr	r3, [r7, #4]
    99aa:	18d3      	adds	r3, r2, r3
    99ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    99ae:	4b14      	ldr	r3, [pc, #80]	; (9a00 <prvAddCurrentTaskToDelayedList+0x94>)
    99b0:	681b      	ldr	r3, [r3, #0]
    99b2:	68ba      	ldr	r2, [r7, #8]
    99b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    99b6:	68ba      	ldr	r2, [r7, #8]
    99b8:	68fb      	ldr	r3, [r7, #12]
    99ba:	429a      	cmp	r2, r3
    99bc:	d209      	bcs.n	99d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    99be:	4b14      	ldr	r3, [pc, #80]	; (9a10 <prvAddCurrentTaskToDelayedList+0xa4>)
    99c0:	681a      	ldr	r2, [r3, #0]
    99c2:	4b0f      	ldr	r3, [pc, #60]	; (9a00 <prvAddCurrentTaskToDelayedList+0x94>)
    99c4:	681b      	ldr	r3, [r3, #0]
    99c6:	3304      	adds	r3, #4
    99c8:	0019      	movs	r1, r3
    99ca:	0010      	movs	r0, r2
    99cc:	4b11      	ldr	r3, [pc, #68]	; (9a14 <prvAddCurrentTaskToDelayedList+0xa8>)
    99ce:	4798      	blx	r3
}
    99d0:	e010      	b.n	99f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    99d2:	4b11      	ldr	r3, [pc, #68]	; (9a18 <prvAddCurrentTaskToDelayedList+0xac>)
    99d4:	681a      	ldr	r2, [r3, #0]
    99d6:	4b0a      	ldr	r3, [pc, #40]	; (9a00 <prvAddCurrentTaskToDelayedList+0x94>)
    99d8:	681b      	ldr	r3, [r3, #0]
    99da:	3304      	adds	r3, #4
    99dc:	0019      	movs	r1, r3
    99de:	0010      	movs	r0, r2
    99e0:	4b0c      	ldr	r3, [pc, #48]	; (9a14 <prvAddCurrentTaskToDelayedList+0xa8>)
    99e2:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    99e4:	4b0d      	ldr	r3, [pc, #52]	; (9a1c <prvAddCurrentTaskToDelayedList+0xb0>)
    99e6:	681b      	ldr	r3, [r3, #0]
    99e8:	68ba      	ldr	r2, [r7, #8]
    99ea:	429a      	cmp	r2, r3
    99ec:	d202      	bcs.n	99f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    99ee:	4b0b      	ldr	r3, [pc, #44]	; (9a1c <prvAddCurrentTaskToDelayedList+0xb0>)
    99f0:	68ba      	ldr	r2, [r7, #8]
    99f2:	601a      	str	r2, [r3, #0]
}
    99f4:	46c0      	nop			; (mov r8, r8)
    99f6:	46bd      	mov	sp, r7
    99f8:	b004      	add	sp, #16
    99fa:	bd80      	pop	{r7, pc}
    99fc:	20003c44 	.word	0x20003c44
    9a00:	20003b68 	.word	0x20003b68
    9a04:	000065d3 	.word	0x000065d3
    9a08:	20003c2c 	.word	0x20003c2c
    9a0c:	00006523 	.word	0x00006523
    9a10:	20003bfc 	.word	0x20003bfc
    9a14:	00006567 	.word	0x00006567
    9a18:	20003bf8 	.word	0x20003bf8
    9a1c:	20003c60 	.word	0x20003c60

00009a20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    9a20:	b590      	push	{r4, r7, lr}
    9a22:	b085      	sub	sp, #20
    9a24:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    9a26:	2300      	movs	r3, #0
    9a28:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    9a2a:	4b0e      	ldr	r3, [pc, #56]	; (9a64 <xTimerCreateTimerTask+0x44>)
    9a2c:	4798      	blx	r3

	if( xTimerQueue != NULL )
    9a2e:	4b0e      	ldr	r3, [pc, #56]	; (9a68 <xTimerCreateTimerTask+0x48>)
    9a30:	681b      	ldr	r3, [r3, #0]
    9a32:	2b00      	cmp	r3, #0
    9a34:	d00b      	beq.n	9a4e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    9a36:	490d      	ldr	r1, [pc, #52]	; (9a6c <xTimerCreateTimerTask+0x4c>)
    9a38:	480d      	ldr	r0, [pc, #52]	; (9a70 <xTimerCreateTimerTask+0x50>)
    9a3a:	4b0e      	ldr	r3, [pc, #56]	; (9a74 <xTimerCreateTimerTask+0x54>)
    9a3c:	9301      	str	r3, [sp, #4]
    9a3e:	2302      	movs	r3, #2
    9a40:	9300      	str	r3, [sp, #0]
    9a42:	2300      	movs	r3, #0
    9a44:	2280      	movs	r2, #128	; 0x80
    9a46:	4c0c      	ldr	r4, [pc, #48]	; (9a78 <xTimerCreateTimerTask+0x58>)
    9a48:	47a0      	blx	r4
    9a4a:	0003      	movs	r3, r0
    9a4c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    9a4e:	687b      	ldr	r3, [r7, #4]
    9a50:	2b00      	cmp	r3, #0
    9a52:	d101      	bne.n	9a58 <xTimerCreateTimerTask+0x38>
    9a54:	b672      	cpsid	i
    9a56:	e7fe      	b.n	9a56 <xTimerCreateTimerTask+0x36>
	return xReturn;
    9a58:	687b      	ldr	r3, [r7, #4]
}
    9a5a:	0018      	movs	r0, r3
    9a5c:	46bd      	mov	sp, r7
    9a5e:	b003      	add	sp, #12
    9a60:	bd90      	pop	{r4, r7, pc}
    9a62:	46c0      	nop			; (mov r8, r8)
    9a64:	00009f69 	.word	0x00009f69
    9a68:	20003c9c 	.word	0x20003c9c
    9a6c:	000244c8 	.word	0x000244c8
    9a70:	00009ba1 	.word	0x00009ba1
    9a74:	20003ca0 	.word	0x20003ca0
    9a78:	000083b9 	.word	0x000083b9

00009a7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    9a7c:	b590      	push	{r4, r7, lr}
    9a7e:	b089      	sub	sp, #36	; 0x24
    9a80:	af00      	add	r7, sp, #0
    9a82:	60f8      	str	r0, [r7, #12]
    9a84:	60b9      	str	r1, [r7, #8]
    9a86:	607a      	str	r2, [r7, #4]
    9a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    9a8a:	2300      	movs	r3, #0
    9a8c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    9a8e:	68fb      	ldr	r3, [r7, #12]
    9a90:	2b00      	cmp	r3, #0
    9a92:	d101      	bne.n	9a98 <xTimerGenericCommand+0x1c>
    9a94:	b672      	cpsid	i
    9a96:	e7fe      	b.n	9a96 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    9a98:	4b1e      	ldr	r3, [pc, #120]	; (9b14 <xTimerGenericCommand+0x98>)
    9a9a:	681b      	ldr	r3, [r3, #0]
    9a9c:	2b00      	cmp	r3, #0
    9a9e:	d033      	beq.n	9b08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    9aa0:	2310      	movs	r3, #16
    9aa2:	18fb      	adds	r3, r7, r3
    9aa4:	68ba      	ldr	r2, [r7, #8]
    9aa6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    9aa8:	2310      	movs	r3, #16
    9aaa:	18fb      	adds	r3, r7, r3
    9aac:	687a      	ldr	r2, [r7, #4]
    9aae:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    9ab0:	2310      	movs	r3, #16
    9ab2:	18fb      	adds	r3, r7, r3
    9ab4:	68fa      	ldr	r2, [r7, #12]
    9ab6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    9ab8:	68bb      	ldr	r3, [r7, #8]
    9aba:	2b05      	cmp	r3, #5
    9abc:	dc1a      	bgt.n	9af4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    9abe:	4b16      	ldr	r3, [pc, #88]	; (9b18 <xTimerGenericCommand+0x9c>)
    9ac0:	4798      	blx	r3
    9ac2:	0003      	movs	r3, r0
    9ac4:	2b02      	cmp	r3, #2
    9ac6:	d10a      	bne.n	9ade <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    9ac8:	4b12      	ldr	r3, [pc, #72]	; (9b14 <xTimerGenericCommand+0x98>)
    9aca:	6818      	ldr	r0, [r3, #0]
    9acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    9ace:	2310      	movs	r3, #16
    9ad0:	18f9      	adds	r1, r7, r3
    9ad2:	2300      	movs	r3, #0
    9ad4:	4c11      	ldr	r4, [pc, #68]	; (9b1c <xTimerGenericCommand+0xa0>)
    9ad6:	47a0      	blx	r4
    9ad8:	0003      	movs	r3, r0
    9ada:	61fb      	str	r3, [r7, #28]
    9adc:	e014      	b.n	9b08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    9ade:	4b0d      	ldr	r3, [pc, #52]	; (9b14 <xTimerGenericCommand+0x98>)
    9ae0:	6818      	ldr	r0, [r3, #0]
    9ae2:	2310      	movs	r3, #16
    9ae4:	18f9      	adds	r1, r7, r3
    9ae6:	2300      	movs	r3, #0
    9ae8:	2200      	movs	r2, #0
    9aea:	4c0c      	ldr	r4, [pc, #48]	; (9b1c <xTimerGenericCommand+0xa0>)
    9aec:	47a0      	blx	r4
    9aee:	0003      	movs	r3, r0
    9af0:	61fb      	str	r3, [r7, #28]
    9af2:	e009      	b.n	9b08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    9af4:	4b07      	ldr	r3, [pc, #28]	; (9b14 <xTimerGenericCommand+0x98>)
    9af6:	6818      	ldr	r0, [r3, #0]
    9af8:	683a      	ldr	r2, [r7, #0]
    9afa:	2310      	movs	r3, #16
    9afc:	18f9      	adds	r1, r7, r3
    9afe:	2300      	movs	r3, #0
    9b00:	4c07      	ldr	r4, [pc, #28]	; (9b20 <xTimerGenericCommand+0xa4>)
    9b02:	47a0      	blx	r4
    9b04:	0003      	movs	r3, r0
    9b06:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    9b08:	69fb      	ldr	r3, [r7, #28]
}
    9b0a:	0018      	movs	r0, r3
    9b0c:	46bd      	mov	sp, r7
    9b0e:	b009      	add	sp, #36	; 0x24
    9b10:	bd90      	pop	{r4, r7, pc}
    9b12:	46c0      	nop			; (mov r8, r8)
    9b14:	20003c9c 	.word	0x20003c9c
    9b18:	0000947d 	.word	0x0000947d
    9b1c:	00006cf1 	.word	0x00006cf1
    9b20:	00007151 	.word	0x00007151

00009b24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    9b24:	b590      	push	{r4, r7, lr}
    9b26:	b087      	sub	sp, #28
    9b28:	af02      	add	r7, sp, #8
    9b2a:	6078      	str	r0, [r7, #4]
    9b2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    9b2e:	4b18      	ldr	r3, [pc, #96]	; (9b90 <prvProcessExpiredTimer+0x6c>)
    9b30:	681b      	ldr	r3, [r3, #0]
    9b32:	68db      	ldr	r3, [r3, #12]
    9b34:	68db      	ldr	r3, [r3, #12]
    9b36:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9b38:	68fb      	ldr	r3, [r7, #12]
    9b3a:	3304      	adds	r3, #4
    9b3c:	0018      	movs	r0, r3
    9b3e:	4b15      	ldr	r3, [pc, #84]	; (9b94 <prvProcessExpiredTimer+0x70>)
    9b40:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    9b42:	68fb      	ldr	r3, [r7, #12]
    9b44:	69db      	ldr	r3, [r3, #28]
    9b46:	2b01      	cmp	r3, #1
    9b48:	d119      	bne.n	9b7e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    9b4a:	68fb      	ldr	r3, [r7, #12]
    9b4c:	699a      	ldr	r2, [r3, #24]
    9b4e:	687b      	ldr	r3, [r7, #4]
    9b50:	18d1      	adds	r1, r2, r3
    9b52:	687b      	ldr	r3, [r7, #4]
    9b54:	683a      	ldr	r2, [r7, #0]
    9b56:	68f8      	ldr	r0, [r7, #12]
    9b58:	4c0f      	ldr	r4, [pc, #60]	; (9b98 <prvProcessExpiredTimer+0x74>)
    9b5a:	47a0      	blx	r4
    9b5c:	1e03      	subs	r3, r0, #0
    9b5e:	d00e      	beq.n	9b7e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    9b60:	687a      	ldr	r2, [r7, #4]
    9b62:	68f8      	ldr	r0, [r7, #12]
    9b64:	2300      	movs	r3, #0
    9b66:	9300      	str	r3, [sp, #0]
    9b68:	2300      	movs	r3, #0
    9b6a:	2100      	movs	r1, #0
    9b6c:	4c0b      	ldr	r4, [pc, #44]	; (9b9c <prvProcessExpiredTimer+0x78>)
    9b6e:	47a0      	blx	r4
    9b70:	0003      	movs	r3, r0
    9b72:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    9b74:	68bb      	ldr	r3, [r7, #8]
    9b76:	2b00      	cmp	r3, #0
    9b78:	d101      	bne.n	9b7e <prvProcessExpiredTimer+0x5a>
    9b7a:	b672      	cpsid	i
    9b7c:	e7fe      	b.n	9b7c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9b7e:	68fb      	ldr	r3, [r7, #12]
    9b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9b82:	68fa      	ldr	r2, [r7, #12]
    9b84:	0010      	movs	r0, r2
    9b86:	4798      	blx	r3
}
    9b88:	46c0      	nop			; (mov r8, r8)
    9b8a:	46bd      	mov	sp, r7
    9b8c:	b005      	add	sp, #20
    9b8e:	bd90      	pop	{r4, r7, pc}
    9b90:	20003c94 	.word	0x20003c94
    9b94:	000065d3 	.word	0x000065d3
    9b98:	00009d09 	.word	0x00009d09
    9b9c:	00009a7d 	.word	0x00009a7d

00009ba0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    9ba0:	b580      	push	{r7, lr}
    9ba2:	b084      	sub	sp, #16
    9ba4:	af00      	add	r7, sp, #0
    9ba6:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
    9ba8:	4b08      	ldr	r3, [pc, #32]	; (9bcc <prvTimerTask+0x2c>)
    9baa:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    9bac:	2308      	movs	r3, #8
    9bae:	18fb      	adds	r3, r7, r3
    9bb0:	0018      	movs	r0, r3
    9bb2:	4b07      	ldr	r3, [pc, #28]	; (9bd0 <prvTimerTask+0x30>)
    9bb4:	4798      	blx	r3
    9bb6:	0003      	movs	r3, r0
    9bb8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    9bba:	68ba      	ldr	r2, [r7, #8]
    9bbc:	68fb      	ldr	r3, [r7, #12]
    9bbe:	0011      	movs	r1, r2
    9bc0:	0018      	movs	r0, r3
    9bc2:	4b04      	ldr	r3, [pc, #16]	; (9bd4 <prvTimerTask+0x34>)
    9bc4:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    9bc6:	4b04      	ldr	r3, [pc, #16]	; (9bd8 <prvTimerTask+0x38>)
    9bc8:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    9bca:	e7ef      	b.n	9bac <prvTimerTask+0xc>
    9bcc:	0001ed71 	.word	0x0001ed71
    9bd0:	00009c81 	.word	0x00009c81
    9bd4:	00009bdd 	.word	0x00009bdd
    9bd8:	00009d91 	.word	0x00009d91

00009bdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    9bdc:	b580      	push	{r7, lr}
    9bde:	b084      	sub	sp, #16
    9be0:	af00      	add	r7, sp, #0
    9be2:	6078      	str	r0, [r7, #4]
    9be4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    9be6:	4b1e      	ldr	r3, [pc, #120]	; (9c60 <prvProcessTimerOrBlockTask+0x84>)
    9be8:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    9bea:	2308      	movs	r3, #8
    9bec:	18fb      	adds	r3, r7, r3
    9bee:	0018      	movs	r0, r3
    9bf0:	4b1c      	ldr	r3, [pc, #112]	; (9c64 <prvProcessTimerOrBlockTask+0x88>)
    9bf2:	4798      	blx	r3
    9bf4:	0003      	movs	r3, r0
    9bf6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    9bf8:	68bb      	ldr	r3, [r7, #8]
    9bfa:	2b00      	cmp	r3, #0
    9bfc:	d129      	bne.n	9c52 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    9bfe:	683b      	ldr	r3, [r7, #0]
    9c00:	2b00      	cmp	r3, #0
    9c02:	d10c      	bne.n	9c1e <prvProcessTimerOrBlockTask+0x42>
    9c04:	687a      	ldr	r2, [r7, #4]
    9c06:	68fb      	ldr	r3, [r7, #12]
    9c08:	429a      	cmp	r2, r3
    9c0a:	d808      	bhi.n	9c1e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    9c0c:	4b16      	ldr	r3, [pc, #88]	; (9c68 <prvProcessTimerOrBlockTask+0x8c>)
    9c0e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    9c10:	68fa      	ldr	r2, [r7, #12]
    9c12:	687b      	ldr	r3, [r7, #4]
    9c14:	0011      	movs	r1, r2
    9c16:	0018      	movs	r0, r3
    9c18:	4b14      	ldr	r3, [pc, #80]	; (9c6c <prvProcessTimerOrBlockTask+0x90>)
    9c1a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    9c1c:	e01b      	b.n	9c56 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    9c1e:	683b      	ldr	r3, [r7, #0]
    9c20:	2b00      	cmp	r3, #0
    9c22:	d006      	beq.n	9c32 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    9c24:	4b12      	ldr	r3, [pc, #72]	; (9c70 <prvProcessTimerOrBlockTask+0x94>)
    9c26:	681b      	ldr	r3, [r3, #0]
    9c28:	681b      	ldr	r3, [r3, #0]
    9c2a:	425a      	negs	r2, r3
    9c2c:	4153      	adcs	r3, r2
    9c2e:	b2db      	uxtb	r3, r3
    9c30:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    9c32:	4b10      	ldr	r3, [pc, #64]	; (9c74 <prvProcessTimerOrBlockTask+0x98>)
    9c34:	6818      	ldr	r0, [r3, #0]
    9c36:	687a      	ldr	r2, [r7, #4]
    9c38:	68fb      	ldr	r3, [r7, #12]
    9c3a:	1ad3      	subs	r3, r2, r3
    9c3c:	683a      	ldr	r2, [r7, #0]
    9c3e:	0019      	movs	r1, r3
    9c40:	4b0d      	ldr	r3, [pc, #52]	; (9c78 <prvProcessTimerOrBlockTask+0x9c>)
    9c42:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    9c44:	4b08      	ldr	r3, [pc, #32]	; (9c68 <prvProcessTimerOrBlockTask+0x8c>)
    9c46:	4798      	blx	r3
    9c48:	1e03      	subs	r3, r0, #0
    9c4a:	d104      	bne.n	9c56 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    9c4c:	4b0b      	ldr	r3, [pc, #44]	; (9c7c <prvProcessTimerOrBlockTask+0xa0>)
    9c4e:	4798      	blx	r3
}
    9c50:	e001      	b.n	9c56 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    9c52:	4b05      	ldr	r3, [pc, #20]	; (9c68 <prvProcessTimerOrBlockTask+0x8c>)
    9c54:	4798      	blx	r3
}
    9c56:	46c0      	nop			; (mov r8, r8)
    9c58:	46bd      	mov	sp, r7
    9c5a:	b004      	add	sp, #16
    9c5c:	bd80      	pop	{r7, pc}
    9c5e:	46c0      	nop			; (mov r8, r8)
    9c60:	00008a15 	.word	0x00008a15
    9c64:	00009cc1 	.word	0x00009cc1
    9c68:	00008a2d 	.word	0x00008a2d
    9c6c:	00009b25 	.word	0x00009b25
    9c70:	20003c98 	.word	0x20003c98
    9c74:	20003c9c 	.word	0x20003c9c
    9c78:	000081b5 	.word	0x000081b5
    9c7c:	00006741 	.word	0x00006741

00009c80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    9c80:	b580      	push	{r7, lr}
    9c82:	b084      	sub	sp, #16
    9c84:	af00      	add	r7, sp, #0
    9c86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    9c88:	4b0c      	ldr	r3, [pc, #48]	; (9cbc <prvGetNextExpireTime+0x3c>)
    9c8a:	681b      	ldr	r3, [r3, #0]
    9c8c:	681b      	ldr	r3, [r3, #0]
    9c8e:	425a      	negs	r2, r3
    9c90:	4153      	adcs	r3, r2
    9c92:	b2db      	uxtb	r3, r3
    9c94:	001a      	movs	r2, r3
    9c96:	687b      	ldr	r3, [r7, #4]
    9c98:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    9c9a:	687b      	ldr	r3, [r7, #4]
    9c9c:	681b      	ldr	r3, [r3, #0]
    9c9e:	2b00      	cmp	r3, #0
    9ca0:	d105      	bne.n	9cae <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    9ca2:	4b06      	ldr	r3, [pc, #24]	; (9cbc <prvGetNextExpireTime+0x3c>)
    9ca4:	681b      	ldr	r3, [r3, #0]
    9ca6:	68db      	ldr	r3, [r3, #12]
    9ca8:	681b      	ldr	r3, [r3, #0]
    9caa:	60fb      	str	r3, [r7, #12]
    9cac:	e001      	b.n	9cb2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    9cae:	2300      	movs	r3, #0
    9cb0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    9cb2:	68fb      	ldr	r3, [r7, #12]
}
    9cb4:	0018      	movs	r0, r3
    9cb6:	46bd      	mov	sp, r7
    9cb8:	b004      	add	sp, #16
    9cba:	bd80      	pop	{r7, pc}
    9cbc:	20003c94 	.word	0x20003c94

00009cc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    9cc0:	b580      	push	{r7, lr}
    9cc2:	b084      	sub	sp, #16
    9cc4:	af00      	add	r7, sp, #0
    9cc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    9cc8:	4b0c      	ldr	r3, [pc, #48]	; (9cfc <prvSampleTimeNow+0x3c>)
    9cca:	4798      	blx	r3
    9ccc:	0003      	movs	r3, r0
    9cce:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    9cd0:	4b0b      	ldr	r3, [pc, #44]	; (9d00 <prvSampleTimeNow+0x40>)
    9cd2:	681b      	ldr	r3, [r3, #0]
    9cd4:	68fa      	ldr	r2, [r7, #12]
    9cd6:	429a      	cmp	r2, r3
    9cd8:	d205      	bcs.n	9ce6 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    9cda:	4b0a      	ldr	r3, [pc, #40]	; (9d04 <prvSampleTimeNow+0x44>)
    9cdc:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    9cde:	687b      	ldr	r3, [r7, #4]
    9ce0:	2201      	movs	r2, #1
    9ce2:	601a      	str	r2, [r3, #0]
    9ce4:	e002      	b.n	9cec <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    9ce6:	687b      	ldr	r3, [r7, #4]
    9ce8:	2200      	movs	r2, #0
    9cea:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    9cec:	4b04      	ldr	r3, [pc, #16]	; (9d00 <prvSampleTimeNow+0x40>)
    9cee:	68fa      	ldr	r2, [r7, #12]
    9cf0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    9cf2:	68fb      	ldr	r3, [r7, #12]
}
    9cf4:	0018      	movs	r0, r3
    9cf6:	46bd      	mov	sp, r7
    9cf8:	b004      	add	sp, #16
    9cfa:	bd80      	pop	{r7, pc}
    9cfc:	00008b9d 	.word	0x00008b9d
    9d00:	20003ca4 	.word	0x20003ca4
    9d04:	00009ea9 	.word	0x00009ea9

00009d08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    9d08:	b580      	push	{r7, lr}
    9d0a:	b086      	sub	sp, #24
    9d0c:	af00      	add	r7, sp, #0
    9d0e:	60f8      	str	r0, [r7, #12]
    9d10:	60b9      	str	r1, [r7, #8]
    9d12:	607a      	str	r2, [r7, #4]
    9d14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    9d16:	2300      	movs	r3, #0
    9d18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    9d1a:	68fb      	ldr	r3, [r7, #12]
    9d1c:	68ba      	ldr	r2, [r7, #8]
    9d1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    9d20:	68fb      	ldr	r3, [r7, #12]
    9d22:	68fa      	ldr	r2, [r7, #12]
    9d24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    9d26:	68ba      	ldr	r2, [r7, #8]
    9d28:	687b      	ldr	r3, [r7, #4]
    9d2a:	429a      	cmp	r2, r3
    9d2c:	d812      	bhi.n	9d54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9d2e:	687a      	ldr	r2, [r7, #4]
    9d30:	683b      	ldr	r3, [r7, #0]
    9d32:	1ad2      	subs	r2, r2, r3
    9d34:	68fb      	ldr	r3, [r7, #12]
    9d36:	699b      	ldr	r3, [r3, #24]
    9d38:	429a      	cmp	r2, r3
    9d3a:	d302      	bcc.n	9d42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    9d3c:	2301      	movs	r3, #1
    9d3e:	617b      	str	r3, [r7, #20]
    9d40:	e01b      	b.n	9d7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    9d42:	4b10      	ldr	r3, [pc, #64]	; (9d84 <prvInsertTimerInActiveList+0x7c>)
    9d44:	681a      	ldr	r2, [r3, #0]
    9d46:	68fb      	ldr	r3, [r7, #12]
    9d48:	3304      	adds	r3, #4
    9d4a:	0019      	movs	r1, r3
    9d4c:	0010      	movs	r0, r2
    9d4e:	4b0e      	ldr	r3, [pc, #56]	; (9d88 <prvInsertTimerInActiveList+0x80>)
    9d50:	4798      	blx	r3
    9d52:	e012      	b.n	9d7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    9d54:	687a      	ldr	r2, [r7, #4]
    9d56:	683b      	ldr	r3, [r7, #0]
    9d58:	429a      	cmp	r2, r3
    9d5a:	d206      	bcs.n	9d6a <prvInsertTimerInActiveList+0x62>
    9d5c:	68ba      	ldr	r2, [r7, #8]
    9d5e:	683b      	ldr	r3, [r7, #0]
    9d60:	429a      	cmp	r2, r3
    9d62:	d302      	bcc.n	9d6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    9d64:	2301      	movs	r3, #1
    9d66:	617b      	str	r3, [r7, #20]
    9d68:	e007      	b.n	9d7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    9d6a:	4b08      	ldr	r3, [pc, #32]	; (9d8c <prvInsertTimerInActiveList+0x84>)
    9d6c:	681a      	ldr	r2, [r3, #0]
    9d6e:	68fb      	ldr	r3, [r7, #12]
    9d70:	3304      	adds	r3, #4
    9d72:	0019      	movs	r1, r3
    9d74:	0010      	movs	r0, r2
    9d76:	4b04      	ldr	r3, [pc, #16]	; (9d88 <prvInsertTimerInActiveList+0x80>)
    9d78:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    9d7a:	697b      	ldr	r3, [r7, #20]
}
    9d7c:	0018      	movs	r0, r3
    9d7e:	46bd      	mov	sp, r7
    9d80:	b006      	add	sp, #24
    9d82:	bd80      	pop	{r7, pc}
    9d84:	20003c98 	.word	0x20003c98
    9d88:	00006567 	.word	0x00006567
    9d8c:	20003c94 	.word	0x20003c94

00009d90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    9d90:	b590      	push	{r4, r7, lr}
    9d92:	b08b      	sub	sp, #44	; 0x2c
    9d94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    9d96:	e068      	b.n	9e6a <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    9d98:	2308      	movs	r3, #8
    9d9a:	18fb      	adds	r3, r7, r3
    9d9c:	681b      	ldr	r3, [r3, #0]
    9d9e:	2b00      	cmp	r3, #0
    9da0:	db63      	blt.n	9e6a <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    9da2:	2308      	movs	r3, #8
    9da4:	18fb      	adds	r3, r7, r3
    9da6:	689b      	ldr	r3, [r3, #8]
    9da8:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    9daa:	69fb      	ldr	r3, [r7, #28]
    9dac:	695b      	ldr	r3, [r3, #20]
    9dae:	2b00      	cmp	r3, #0
    9db0:	d004      	beq.n	9dbc <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9db2:	69fb      	ldr	r3, [r7, #28]
    9db4:	3304      	adds	r3, #4
    9db6:	0018      	movs	r0, r3
    9db8:	4b33      	ldr	r3, [pc, #204]	; (9e88 <prvProcessReceivedCommands+0xf8>)
    9dba:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    9dbc:	1d3b      	adds	r3, r7, #4
    9dbe:	0018      	movs	r0, r3
    9dc0:	4b32      	ldr	r3, [pc, #200]	; (9e8c <prvProcessReceivedCommands+0xfc>)
    9dc2:	4798      	blx	r3
    9dc4:	0003      	movs	r3, r0
    9dc6:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    9dc8:	2308      	movs	r3, #8
    9dca:	18fb      	adds	r3, r7, r3
    9dcc:	681b      	ldr	r3, [r3, #0]
    9dce:	2b09      	cmp	r3, #9
    9dd0:	d84a      	bhi.n	9e68 <prvProcessReceivedCommands+0xd8>
    9dd2:	009a      	lsls	r2, r3, #2
    9dd4:	4b2e      	ldr	r3, [pc, #184]	; (9e90 <prvProcessReceivedCommands+0x100>)
    9dd6:	18d3      	adds	r3, r2, r3
    9dd8:	681b      	ldr	r3, [r3, #0]
    9dda:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    9ddc:	2308      	movs	r3, #8
    9dde:	18fb      	adds	r3, r7, r3
    9de0:	685a      	ldr	r2, [r3, #4]
    9de2:	69fb      	ldr	r3, [r7, #28]
    9de4:	699b      	ldr	r3, [r3, #24]
    9de6:	18d1      	adds	r1, r2, r3
    9de8:	2308      	movs	r3, #8
    9dea:	18fb      	adds	r3, r7, r3
    9dec:	685b      	ldr	r3, [r3, #4]
    9dee:	69ba      	ldr	r2, [r7, #24]
    9df0:	69f8      	ldr	r0, [r7, #28]
    9df2:	4c28      	ldr	r4, [pc, #160]	; (9e94 <prvProcessReceivedCommands+0x104>)
    9df4:	47a0      	blx	r4
    9df6:	1e03      	subs	r3, r0, #0
    9df8:	d037      	beq.n	9e6a <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9dfa:	69fb      	ldr	r3, [r7, #28]
    9dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9dfe:	69fa      	ldr	r2, [r7, #28]
    9e00:	0010      	movs	r0, r2
    9e02:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    9e04:	69fb      	ldr	r3, [r7, #28]
    9e06:	69db      	ldr	r3, [r3, #28]
    9e08:	2b01      	cmp	r3, #1
    9e0a:	d12e      	bne.n	9e6a <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    9e0c:	2308      	movs	r3, #8
    9e0e:	18fb      	adds	r3, r7, r3
    9e10:	685a      	ldr	r2, [r3, #4]
    9e12:	69fb      	ldr	r3, [r7, #28]
    9e14:	699b      	ldr	r3, [r3, #24]
    9e16:	18d2      	adds	r2, r2, r3
    9e18:	69f8      	ldr	r0, [r7, #28]
    9e1a:	2300      	movs	r3, #0
    9e1c:	9300      	str	r3, [sp, #0]
    9e1e:	2300      	movs	r3, #0
    9e20:	2100      	movs	r1, #0
    9e22:	4c1d      	ldr	r4, [pc, #116]	; (9e98 <prvProcessReceivedCommands+0x108>)
    9e24:	47a0      	blx	r4
    9e26:	0003      	movs	r3, r0
    9e28:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    9e2a:	697b      	ldr	r3, [r7, #20]
    9e2c:	2b00      	cmp	r3, #0
    9e2e:	d11c      	bne.n	9e6a <prvProcessReceivedCommands+0xda>
    9e30:	b672      	cpsid	i
    9e32:	e7fe      	b.n	9e32 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    9e34:	2308      	movs	r3, #8
    9e36:	18fb      	adds	r3, r7, r3
    9e38:	685a      	ldr	r2, [r3, #4]
    9e3a:	69fb      	ldr	r3, [r7, #28]
    9e3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    9e3e:	69fb      	ldr	r3, [r7, #28]
    9e40:	699b      	ldr	r3, [r3, #24]
    9e42:	2b00      	cmp	r3, #0
    9e44:	d101      	bne.n	9e4a <prvProcessReceivedCommands+0xba>
    9e46:	b672      	cpsid	i
    9e48:	e7fe      	b.n	9e48 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    9e4a:	69fb      	ldr	r3, [r7, #28]
    9e4c:	699a      	ldr	r2, [r3, #24]
    9e4e:	69bb      	ldr	r3, [r7, #24]
    9e50:	18d1      	adds	r1, r2, r3
    9e52:	69bb      	ldr	r3, [r7, #24]
    9e54:	69ba      	ldr	r2, [r7, #24]
    9e56:	69f8      	ldr	r0, [r7, #28]
    9e58:	4c0e      	ldr	r4, [pc, #56]	; (9e94 <prvProcessReceivedCommands+0x104>)
    9e5a:	47a0      	blx	r4
					break;
    9e5c:	e005      	b.n	9e6a <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    9e5e:	69fb      	ldr	r3, [r7, #28]
    9e60:	0018      	movs	r0, r3
    9e62:	4b0e      	ldr	r3, [pc, #56]	; (9e9c <prvProcessReceivedCommands+0x10c>)
    9e64:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    9e66:	e000      	b.n	9e6a <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    9e68:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    9e6a:	4b0d      	ldr	r3, [pc, #52]	; (9ea0 <prvProcessReceivedCommands+0x110>)
    9e6c:	681b      	ldr	r3, [r3, #0]
    9e6e:	2208      	movs	r2, #8
    9e70:	18b9      	adds	r1, r7, r2
    9e72:	2200      	movs	r2, #0
    9e74:	0018      	movs	r0, r3
    9e76:	4b0b      	ldr	r3, [pc, #44]	; (9ea4 <prvProcessReceivedCommands+0x114>)
    9e78:	4798      	blx	r3
    9e7a:	1e03      	subs	r3, r0, #0
    9e7c:	d18c      	bne.n	9d98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    9e7e:	46c0      	nop			; (mov r8, r8)
    9e80:	46bd      	mov	sp, r7
    9e82:	b009      	add	sp, #36	; 0x24
    9e84:	bd90      	pop	{r4, r7, pc}
    9e86:	46c0      	nop			; (mov r8, r8)
    9e88:	000065d3 	.word	0x000065d3
    9e8c:	00009cc1 	.word	0x00009cc1
    9e90:	000244d0 	.word	0x000244d0
    9e94:	00009d09 	.word	0x00009d09
    9e98:	00009a7d 	.word	0x00009a7d
    9e9c:	00006955 	.word	0x00006955
    9ea0:	20003c9c 	.word	0x20003c9c
    9ea4:	000075a9 	.word	0x000075a9

00009ea8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    9ea8:	b590      	push	{r4, r7, lr}
    9eaa:	b089      	sub	sp, #36	; 0x24
    9eac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    9eae:	e03e      	b.n	9f2e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    9eb0:	4b28      	ldr	r3, [pc, #160]	; (9f54 <prvSwitchTimerLists+0xac>)
    9eb2:	681b      	ldr	r3, [r3, #0]
    9eb4:	68db      	ldr	r3, [r3, #12]
    9eb6:	681b      	ldr	r3, [r3, #0]
    9eb8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    9eba:	4b26      	ldr	r3, [pc, #152]	; (9f54 <prvSwitchTimerLists+0xac>)
    9ebc:	681b      	ldr	r3, [r3, #0]
    9ebe:	68db      	ldr	r3, [r3, #12]
    9ec0:	68db      	ldr	r3, [r3, #12]
    9ec2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9ec4:	693b      	ldr	r3, [r7, #16]
    9ec6:	3304      	adds	r3, #4
    9ec8:	0018      	movs	r0, r3
    9eca:	4b23      	ldr	r3, [pc, #140]	; (9f58 <prvSwitchTimerLists+0xb0>)
    9ecc:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9ece:	693b      	ldr	r3, [r7, #16]
    9ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9ed2:	693a      	ldr	r2, [r7, #16]
    9ed4:	0010      	movs	r0, r2
    9ed6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    9ed8:	693b      	ldr	r3, [r7, #16]
    9eda:	69db      	ldr	r3, [r3, #28]
    9edc:	2b01      	cmp	r3, #1
    9ede:	d126      	bne.n	9f2e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    9ee0:	693b      	ldr	r3, [r7, #16]
    9ee2:	699a      	ldr	r2, [r3, #24]
    9ee4:	697b      	ldr	r3, [r7, #20]
    9ee6:	18d3      	adds	r3, r2, r3
    9ee8:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    9eea:	68fa      	ldr	r2, [r7, #12]
    9eec:	697b      	ldr	r3, [r7, #20]
    9eee:	429a      	cmp	r2, r3
    9ef0:	d90e      	bls.n	9f10 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    9ef2:	693b      	ldr	r3, [r7, #16]
    9ef4:	68fa      	ldr	r2, [r7, #12]
    9ef6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    9ef8:	693b      	ldr	r3, [r7, #16]
    9efa:	693a      	ldr	r2, [r7, #16]
    9efc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    9efe:	4b15      	ldr	r3, [pc, #84]	; (9f54 <prvSwitchTimerLists+0xac>)
    9f00:	681a      	ldr	r2, [r3, #0]
    9f02:	693b      	ldr	r3, [r7, #16]
    9f04:	3304      	adds	r3, #4
    9f06:	0019      	movs	r1, r3
    9f08:	0010      	movs	r0, r2
    9f0a:	4b14      	ldr	r3, [pc, #80]	; (9f5c <prvSwitchTimerLists+0xb4>)
    9f0c:	4798      	blx	r3
    9f0e:	e00e      	b.n	9f2e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    9f10:	697a      	ldr	r2, [r7, #20]
    9f12:	6938      	ldr	r0, [r7, #16]
    9f14:	2300      	movs	r3, #0
    9f16:	9300      	str	r3, [sp, #0]
    9f18:	2300      	movs	r3, #0
    9f1a:	2100      	movs	r1, #0
    9f1c:	4c10      	ldr	r4, [pc, #64]	; (9f60 <prvSwitchTimerLists+0xb8>)
    9f1e:	47a0      	blx	r4
    9f20:	0003      	movs	r3, r0
    9f22:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    9f24:	68bb      	ldr	r3, [r7, #8]
    9f26:	2b00      	cmp	r3, #0
    9f28:	d101      	bne.n	9f2e <prvSwitchTimerLists+0x86>
    9f2a:	b672      	cpsid	i
    9f2c:	e7fe      	b.n	9f2c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    9f2e:	4b09      	ldr	r3, [pc, #36]	; (9f54 <prvSwitchTimerLists+0xac>)
    9f30:	681b      	ldr	r3, [r3, #0]
    9f32:	681b      	ldr	r3, [r3, #0]
    9f34:	2b00      	cmp	r3, #0
    9f36:	d1bb      	bne.n	9eb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    9f38:	4b06      	ldr	r3, [pc, #24]	; (9f54 <prvSwitchTimerLists+0xac>)
    9f3a:	681b      	ldr	r3, [r3, #0]
    9f3c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    9f3e:	4b09      	ldr	r3, [pc, #36]	; (9f64 <prvSwitchTimerLists+0xbc>)
    9f40:	681a      	ldr	r2, [r3, #0]
    9f42:	4b04      	ldr	r3, [pc, #16]	; (9f54 <prvSwitchTimerLists+0xac>)
    9f44:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    9f46:	4b07      	ldr	r3, [pc, #28]	; (9f64 <prvSwitchTimerLists+0xbc>)
    9f48:	687a      	ldr	r2, [r7, #4]
    9f4a:	601a      	str	r2, [r3, #0]
}
    9f4c:	46c0      	nop			; (mov r8, r8)
    9f4e:	46bd      	mov	sp, r7
    9f50:	b007      	add	sp, #28
    9f52:	bd90      	pop	{r4, r7, pc}
    9f54:	20003c94 	.word	0x20003c94
    9f58:	000065d3 	.word	0x000065d3
    9f5c:	00006567 	.word	0x00006567
    9f60:	00009a7d 	.word	0x00009a7d
    9f64:	20003c98 	.word	0x20003c98

00009f68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    9f68:	b580      	push	{r7, lr}
    9f6a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    9f6c:	4b10      	ldr	r3, [pc, #64]	; (9fb0 <prvCheckForValidListAndQueue+0x48>)
    9f6e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    9f70:	4b10      	ldr	r3, [pc, #64]	; (9fb4 <prvCheckForValidListAndQueue+0x4c>)
    9f72:	681b      	ldr	r3, [r3, #0]
    9f74:	2b00      	cmp	r3, #0
    9f76:	d115      	bne.n	9fa4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    9f78:	4b0f      	ldr	r3, [pc, #60]	; (9fb8 <prvCheckForValidListAndQueue+0x50>)
    9f7a:	0018      	movs	r0, r3
    9f7c:	4b0f      	ldr	r3, [pc, #60]	; (9fbc <prvCheckForValidListAndQueue+0x54>)
    9f7e:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    9f80:	4b0f      	ldr	r3, [pc, #60]	; (9fc0 <prvCheckForValidListAndQueue+0x58>)
    9f82:	0018      	movs	r0, r3
    9f84:	4b0d      	ldr	r3, [pc, #52]	; (9fbc <prvCheckForValidListAndQueue+0x54>)
    9f86:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    9f88:	4b0e      	ldr	r3, [pc, #56]	; (9fc4 <prvCheckForValidListAndQueue+0x5c>)
    9f8a:	4a0b      	ldr	r2, [pc, #44]	; (9fb8 <prvCheckForValidListAndQueue+0x50>)
    9f8c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    9f8e:	4b0e      	ldr	r3, [pc, #56]	; (9fc8 <prvCheckForValidListAndQueue+0x60>)
    9f90:	4a0b      	ldr	r2, [pc, #44]	; (9fc0 <prvCheckForValidListAndQueue+0x58>)
    9f92:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    9f94:	2200      	movs	r2, #0
    9f96:	210c      	movs	r1, #12
    9f98:	2005      	movs	r0, #5
    9f9a:	4b0c      	ldr	r3, [pc, #48]	; (9fcc <prvCheckForValidListAndQueue+0x64>)
    9f9c:	4798      	blx	r3
    9f9e:	0002      	movs	r2, r0
    9fa0:	4b04      	ldr	r3, [pc, #16]	; (9fb4 <prvCheckForValidListAndQueue+0x4c>)
    9fa2:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    9fa4:	4b0a      	ldr	r3, [pc, #40]	; (9fd0 <prvCheckForValidListAndQueue+0x68>)
    9fa6:	4798      	blx	r3
}
    9fa8:	46c0      	nop			; (mov r8, r8)
    9faa:	46bd      	mov	sp, r7
    9fac:	bd80      	pop	{r7, pc}
    9fae:	46c0      	nop			; (mov r8, r8)
    9fb0:	00006759 	.word	0x00006759
    9fb4:	20003c9c 	.word	0x20003c9c
    9fb8:	20003c6c 	.word	0x20003c6c
    9fbc:	000064d1 	.word	0x000064d1
    9fc0:	20003c80 	.word	0x20003c80
    9fc4:	20003c94 	.word	0x20003c94
    9fc8:	20003c98 	.word	0x20003c98
    9fcc:	00006a49 	.word	0x00006a49
    9fd0:	0000677d 	.word	0x0000677d

00009fd4 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    9fd4:	b580      	push	{r7, lr}
    9fd6:	b082      	sub	sp, #8
    9fd8:	af00      	add	r7, sp, #0
    9fda:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
    9fdc:	687b      	ldr	r3, [r7, #4]
    9fde:	7c1b      	ldrb	r3, [r3, #16]
    9fe0:	2b00      	cmp	r3, #0
    9fe2:	d00b      	beq.n	9ffc <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    9fe4:	687b      	ldr	r3, [r7, #4]
    9fe6:	689b      	ldr	r3, [r3, #8]
    9fe8:	1c5a      	adds	r2, r3, #1
    9fea:	687b      	ldr	r3, [r7, #4]
    9fec:	68d9      	ldr	r1, [r3, #12]
    9fee:	4b10      	ldr	r3, [pc, #64]	; (a030 <advance_pointer+0x5c>)
    9ff0:	0010      	movs	r0, r2
    9ff2:	4798      	blx	r3
    9ff4:	000b      	movs	r3, r1
    9ff6:	001a      	movs	r2, r3
    9ff8:	687b      	ldr	r3, [r7, #4]
    9ffa:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    9ffc:	687b      	ldr	r3, [r7, #4]
    9ffe:	685b      	ldr	r3, [r3, #4]
    a000:	1c5a      	adds	r2, r3, #1
    a002:	687b      	ldr	r3, [r7, #4]
    a004:	68d9      	ldr	r1, [r3, #12]
    a006:	4b0a      	ldr	r3, [pc, #40]	; (a030 <advance_pointer+0x5c>)
    a008:	0010      	movs	r0, r2
    a00a:	4798      	blx	r3
    a00c:	000b      	movs	r3, r1
    a00e:	001a      	movs	r2, r3
    a010:	687b      	ldr	r3, [r7, #4]
    a012:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    a014:	687b      	ldr	r3, [r7, #4]
    a016:	685a      	ldr	r2, [r3, #4]
    a018:	687b      	ldr	r3, [r7, #4]
    a01a:	689b      	ldr	r3, [r3, #8]
    a01c:	1ad3      	subs	r3, r2, r3
    a01e:	425a      	negs	r2, r3
    a020:	4153      	adcs	r3, r2
    a022:	b2da      	uxtb	r2, r3
    a024:	687b      	ldr	r3, [r7, #4]
    a026:	741a      	strb	r2, [r3, #16]
 }
    a028:	46c0      	nop			; (mov r8, r8)
    a02a:	46bd      	mov	sp, r7
    a02c:	b002      	add	sp, #8
    a02e:	bd80      	pop	{r7, pc}
    a030:	0001f051 	.word	0x0001f051

0000a034 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
    a034:	b580      	push	{r7, lr}
    a036:	b082      	sub	sp, #8
    a038:	af00      	add	r7, sp, #0
    a03a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
    a03c:	687b      	ldr	r3, [r7, #4]
    a03e:	2200      	movs	r2, #0
    a040:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    a042:	687b      	ldr	r3, [r7, #4]
    a044:	689b      	ldr	r3, [r3, #8]
    a046:	1c5a      	adds	r2, r3, #1
    a048:	687b      	ldr	r3, [r7, #4]
    a04a:	68d9      	ldr	r1, [r3, #12]
    a04c:	4b05      	ldr	r3, [pc, #20]	; (a064 <retreat_pointer+0x30>)
    a04e:	0010      	movs	r0, r2
    a050:	4798      	blx	r3
    a052:	000b      	movs	r3, r1
    a054:	001a      	movs	r2, r3
    a056:	687b      	ldr	r3, [r7, #4]
    a058:	609a      	str	r2, [r3, #8]
 }
    a05a:	46c0      	nop			; (mov r8, r8)
    a05c:	46bd      	mov	sp, r7
    a05e:	b002      	add	sp, #8
    a060:	bd80      	pop	{r7, pc}
    a062:	46c0      	nop			; (mov r8, r8)
    a064:	0001f051 	.word	0x0001f051

0000a068 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    a068:	b580      	push	{r7, lr}
    a06a:	b084      	sub	sp, #16
    a06c:	af00      	add	r7, sp, #0
    a06e:	6078      	str	r0, [r7, #4]
    a070:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    a072:	2014      	movs	r0, #20
    a074:	4b09      	ldr	r3, [pc, #36]	; (a09c <circular_buf_init+0x34>)
    a076:	4798      	blx	r3
    a078:	0003      	movs	r3, r0
    a07a:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    a07c:	68fb      	ldr	r3, [r7, #12]
    a07e:	687a      	ldr	r2, [r7, #4]
    a080:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
    a082:	68fb      	ldr	r3, [r7, #12]
    a084:	683a      	ldr	r2, [r7, #0]
    a086:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
    a088:	68fb      	ldr	r3, [r7, #12]
    a08a:	0018      	movs	r0, r3
    a08c:	4b04      	ldr	r3, [pc, #16]	; (a0a0 <circular_buf_init+0x38>)
    a08e:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
    a090:	68fb      	ldr	r3, [r7, #12]
 }
    a092:	0018      	movs	r0, r3
    a094:	46bd      	mov	sp, r7
    a096:	b004      	add	sp, #16
    a098:	bd80      	pop	{r7, pc}
    a09a:	46c0      	nop			; (mov r8, r8)
    a09c:	00020ec1 	.word	0x00020ec1
    a0a0:	0000a0a5 	.word	0x0000a0a5

0000a0a4 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
    a0a4:	b580      	push	{r7, lr}
    a0a6:	b082      	sub	sp, #8
    a0a8:	af00      	add	r7, sp, #0
    a0aa:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
    a0ac:	687b      	ldr	r3, [r7, #4]
    a0ae:	2200      	movs	r2, #0
    a0b0:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
    a0b2:	687b      	ldr	r3, [r7, #4]
    a0b4:	2200      	movs	r2, #0
    a0b6:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
    a0b8:	687b      	ldr	r3, [r7, #4]
    a0ba:	2200      	movs	r2, #0
    a0bc:	741a      	strb	r2, [r3, #16]
 }
    a0be:	46c0      	nop			; (mov r8, r8)
    a0c0:	46bd      	mov	sp, r7
    a0c2:	b002      	add	sp, #8
    a0c4:	bd80      	pop	{r7, pc}
	...

0000a0c8 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    a0c8:	b580      	push	{r7, lr}
    a0ca:	b082      	sub	sp, #8
    a0cc:	af00      	add	r7, sp, #0
    a0ce:	6078      	str	r0, [r7, #4]
    a0d0:	000a      	movs	r2, r1
    a0d2:	1cfb      	adds	r3, r7, #3
    a0d4:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    a0d6:	687b      	ldr	r3, [r7, #4]
    a0d8:	681a      	ldr	r2, [r3, #0]
    a0da:	687b      	ldr	r3, [r7, #4]
    a0dc:	685b      	ldr	r3, [r3, #4]
    a0de:	18d3      	adds	r3, r2, r3
    a0e0:	1cfa      	adds	r2, r7, #3
    a0e2:	7812      	ldrb	r2, [r2, #0]
    a0e4:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
    a0e6:	687b      	ldr	r3, [r7, #4]
    a0e8:	0018      	movs	r0, r3
    a0ea:	4b03      	ldr	r3, [pc, #12]	; (a0f8 <circular_buf_put+0x30>)
    a0ec:	4798      	blx	r3
 }
    a0ee:	46c0      	nop			; (mov r8, r8)
    a0f0:	46bd      	mov	sp, r7
    a0f2:	b002      	add	sp, #8
    a0f4:	bd80      	pop	{r7, pc}
    a0f6:	46c0      	nop			; (mov r8, r8)
    a0f8:	00009fd5 	.word	0x00009fd5

0000a0fc <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
    a0fc:	b580      	push	{r7, lr}
    a0fe:	b084      	sub	sp, #16
    a100:	af00      	add	r7, sp, #0
    a102:	6078      	str	r0, [r7, #4]
    a104:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
    a106:	2301      	movs	r3, #1
    a108:	425b      	negs	r3, r3
    a10a:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
    a10c:	687b      	ldr	r3, [r7, #4]
    a10e:	0018      	movs	r0, r3
    a110:	4b0d      	ldr	r3, [pc, #52]	; (a148 <circular_buf_get+0x4c>)
    a112:	4798      	blx	r3
    a114:	0003      	movs	r3, r0
    a116:	001a      	movs	r2, r3
    a118:	2301      	movs	r3, #1
    a11a:	4053      	eors	r3, r2
    a11c:	b2db      	uxtb	r3, r3
    a11e:	2b00      	cmp	r3, #0
    a120:	d00d      	beq.n	a13e <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
    a122:	687b      	ldr	r3, [r7, #4]
    a124:	681a      	ldr	r2, [r3, #0]
    a126:	687b      	ldr	r3, [r7, #4]
    a128:	689b      	ldr	r3, [r3, #8]
    a12a:	18d3      	adds	r3, r2, r3
    a12c:	781a      	ldrb	r2, [r3, #0]
    a12e:	683b      	ldr	r3, [r7, #0]
    a130:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
    a132:	687b      	ldr	r3, [r7, #4]
    a134:	0018      	movs	r0, r3
    a136:	4b05      	ldr	r3, [pc, #20]	; (a14c <circular_buf_get+0x50>)
    a138:	4798      	blx	r3

		 r = 0;
    a13a:	2300      	movs	r3, #0
    a13c:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
    a13e:	68fb      	ldr	r3, [r7, #12]
 }
    a140:	0018      	movs	r0, r3
    a142:	46bd      	mov	sp, r7
    a144:	b004      	add	sp, #16
    a146:	bd80      	pop	{r7, pc}
    a148:	0000a151 	.word	0x0000a151
    a14c:	0000a035 	.word	0x0000a035

0000a150 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
    a150:	b580      	push	{r7, lr}
    a152:	b082      	sub	sp, #8
    a154:	af00      	add	r7, sp, #0
    a156:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    a158:	687b      	ldr	r3, [r7, #4]
    a15a:	7c1b      	ldrb	r3, [r3, #16]
    a15c:	2201      	movs	r2, #1
    a15e:	4053      	eors	r3, r2
    a160:	b2db      	uxtb	r3, r3
    a162:	2b00      	cmp	r3, #0
    a164:	d007      	beq.n	a176 <circular_buf_empty+0x26>
    a166:	687b      	ldr	r3, [r7, #4]
    a168:	685a      	ldr	r2, [r3, #4]
    a16a:	687b      	ldr	r3, [r7, #4]
    a16c:	689b      	ldr	r3, [r3, #8]
    a16e:	429a      	cmp	r2, r3
    a170:	d101      	bne.n	a176 <circular_buf_empty+0x26>
    a172:	2301      	movs	r3, #1
    a174:	e000      	b.n	a178 <circular_buf_empty+0x28>
    a176:	2300      	movs	r3, #0
    a178:	1c1a      	adds	r2, r3, #0
    a17a:	2301      	movs	r3, #1
    a17c:	4013      	ands	r3, r2
    a17e:	b2db      	uxtb	r3, r3
 }
    a180:	0018      	movs	r0, r3
    a182:	46bd      	mov	sp, r7
    a184:	b002      	add	sp, #8
    a186:	bd80      	pop	{r7, pc}

0000a188 <system_interrupt_enable>:
{
    a188:	b580      	push	{r7, lr}
    a18a:	b082      	sub	sp, #8
    a18c:	af00      	add	r7, sp, #0
    a18e:	0002      	movs	r2, r0
    a190:	1dfb      	adds	r3, r7, #7
    a192:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a194:	4b06      	ldr	r3, [pc, #24]	; (a1b0 <system_interrupt_enable+0x28>)
    a196:	1dfa      	adds	r2, r7, #7
    a198:	7812      	ldrb	r2, [r2, #0]
    a19a:	0011      	movs	r1, r2
    a19c:	221f      	movs	r2, #31
    a19e:	400a      	ands	r2, r1
    a1a0:	2101      	movs	r1, #1
    a1a2:	4091      	lsls	r1, r2
    a1a4:	000a      	movs	r2, r1
    a1a6:	601a      	str	r2, [r3, #0]
}
    a1a8:	46c0      	nop			; (mov r8, r8)
    a1aa:	46bd      	mov	sp, r7
    a1ac:	b002      	add	sp, #8
    a1ae:	bd80      	pop	{r7, pc}
    a1b0:	e000e100 	.word	0xe000e100

0000a1b4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    a1b4:	b580      	push	{r7, lr}
    a1b6:	b084      	sub	sp, #16
    a1b8:	af00      	add	r7, sp, #0
    a1ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    a1bc:	687b      	ldr	r3, [r7, #4]
    a1be:	681b      	ldr	r3, [r3, #0]
    a1c0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    a1c2:	68fb      	ldr	r3, [r7, #12]
    a1c4:	69db      	ldr	r3, [r3, #28]
    a1c6:	1e5a      	subs	r2, r3, #1
    a1c8:	4193      	sbcs	r3, r2
    a1ca:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    a1cc:	0018      	movs	r0, r3
    a1ce:	46bd      	mov	sp, r7
    a1d0:	b004      	add	sp, #16
    a1d2:	bd80      	pop	{r7, pc}

0000a1d4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    a1d4:	b580      	push	{r7, lr}
    a1d6:	b082      	sub	sp, #8
    a1d8:	af00      	add	r7, sp, #0
    a1da:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    a1dc:	46c0      	nop			; (mov r8, r8)
    a1de:	687b      	ldr	r3, [r7, #4]
    a1e0:	0018      	movs	r0, r3
    a1e2:	4b04      	ldr	r3, [pc, #16]	; (a1f4 <_usart_wait_for_sync+0x20>)
    a1e4:	4798      	blx	r3
    a1e6:	1e03      	subs	r3, r0, #0
    a1e8:	d1f9      	bne.n	a1de <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    a1ea:	46c0      	nop			; (mov r8, r8)
    a1ec:	46bd      	mov	sp, r7
    a1ee:	b002      	add	sp, #8
    a1f0:	bd80      	pop	{r7, pc}
    a1f2:	46c0      	nop			; (mov r8, r8)
    a1f4:	0000a1b5 	.word	0x0000a1b5

0000a1f8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    a1f8:	b580      	push	{r7, lr}
    a1fa:	b082      	sub	sp, #8
    a1fc:	af00      	add	r7, sp, #0
    a1fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    a200:	687b      	ldr	r3, [r7, #4]
    a202:	2280      	movs	r2, #128	; 0x80
    a204:	05d2      	lsls	r2, r2, #23
    a206:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    a208:	687b      	ldr	r3, [r7, #4]
    a20a:	2200      	movs	r2, #0
    a20c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    a20e:	687b      	ldr	r3, [r7, #4]
    a210:	22ff      	movs	r2, #255	; 0xff
    a212:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    a214:	687b      	ldr	r3, [r7, #4]
    a216:	2200      	movs	r2, #0
    a218:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    a21a:	687b      	ldr	r3, [r7, #4]
    a21c:	2200      	movs	r2, #0
    a21e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    a220:	687b      	ldr	r3, [r7, #4]
    a222:	2296      	movs	r2, #150	; 0x96
    a224:	0192      	lsls	r2, r2, #6
    a226:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    a228:	687b      	ldr	r3, [r7, #4]
    a22a:	2224      	movs	r2, #36	; 0x24
    a22c:	2101      	movs	r1, #1
    a22e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    a230:	687b      	ldr	r3, [r7, #4]
    a232:	2225      	movs	r2, #37	; 0x25
    a234:	2101      	movs	r1, #1
    a236:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    a238:	687b      	ldr	r3, [r7, #4]
    a23a:	2226      	movs	r2, #38	; 0x26
    a23c:	2100      	movs	r1, #0
    a23e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    a240:	687b      	ldr	r3, [r7, #4]
    a242:	2227      	movs	r2, #39	; 0x27
    a244:	2100      	movs	r1, #0
    a246:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    a248:	687b      	ldr	r3, [r7, #4]
    a24a:	2200      	movs	r2, #0
    a24c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    a24e:	687b      	ldr	r3, [r7, #4]
    a250:	2288      	movs	r2, #136	; 0x88
    a252:	0352      	lsls	r2, r2, #13
    a254:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    a256:	687b      	ldr	r3, [r7, #4]
    a258:	222c      	movs	r2, #44	; 0x2c
    a25a:	2100      	movs	r1, #0
    a25c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    a25e:	687b      	ldr	r3, [r7, #4]
    a260:	222d      	movs	r2, #45	; 0x2d
    a262:	2100      	movs	r1, #0
    a264:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    a266:	687b      	ldr	r3, [r7, #4]
    a268:	2200      	movs	r2, #0
    a26a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    a26c:	687b      	ldr	r3, [r7, #4]
    a26e:	2200      	movs	r2, #0
    a270:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    a272:	687b      	ldr	r3, [r7, #4]
    a274:	2200      	movs	r2, #0
    a276:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    a278:	687b      	ldr	r3, [r7, #4]
    a27a:	2200      	movs	r2, #0
    a27c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    a27e:	687b      	ldr	r3, [r7, #4]
    a280:	2200      	movs	r2, #0
    a282:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    a284:	687b      	ldr	r3, [r7, #4]
    a286:	2200      	movs	r2, #0
    a288:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    a28a:	687b      	ldr	r3, [r7, #4]
    a28c:	2200      	movs	r2, #0
    a28e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    a290:	687b      	ldr	r3, [r7, #4]
    a292:	2200      	movs	r2, #0
    a294:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    a296:	687b      	ldr	r3, [r7, #4]
    a298:	2200      	movs	r2, #0
    a29a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    a29c:	687b      	ldr	r3, [r7, #4]
    a29e:	2200      	movs	r2, #0
    a2a0:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    a2a2:	687b      	ldr	r3, [r7, #4]
    a2a4:	2213      	movs	r2, #19
    a2a6:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    a2a8:	687b      	ldr	r3, [r7, #4]
    a2aa:	2200      	movs	r2, #0
    a2ac:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    a2ae:	46c0      	nop			; (mov r8, r8)
    a2b0:	46bd      	mov	sp, r7
    a2b2:	b002      	add	sp, #8
    a2b4:	bd80      	pop	{r7, pc}
	...

0000a2b8 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    a2b8:	b580      	push	{r7, lr}
    a2ba:	b084      	sub	sp, #16
    a2bc:	af00      	add	r7, sp, #0
    a2be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a2c0:	687b      	ldr	r3, [r7, #4]
    a2c2:	681b      	ldr	r3, [r3, #0]
    a2c4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a2c6:	687b      	ldr	r3, [r7, #4]
    a2c8:	681b      	ldr	r3, [r3, #0]
    a2ca:	0018      	movs	r0, r3
    a2cc:	4b09      	ldr	r3, [pc, #36]	; (a2f4 <usart_enable+0x3c>)
    a2ce:	4798      	blx	r3
    a2d0:	0003      	movs	r3, r0
    a2d2:	0018      	movs	r0, r3
    a2d4:	4b08      	ldr	r3, [pc, #32]	; (a2f8 <usart_enable+0x40>)
    a2d6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a2d8:	687b      	ldr	r3, [r7, #4]
    a2da:	0018      	movs	r0, r3
    a2dc:	4b07      	ldr	r3, [pc, #28]	; (a2fc <usart_enable+0x44>)
    a2de:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    a2e0:	68fb      	ldr	r3, [r7, #12]
    a2e2:	681b      	ldr	r3, [r3, #0]
    a2e4:	2202      	movs	r2, #2
    a2e6:	431a      	orrs	r2, r3
    a2e8:	68fb      	ldr	r3, [r7, #12]
    a2ea:	601a      	str	r2, [r3, #0]
}
    a2ec:	46c0      	nop			; (mov r8, r8)
    a2ee:	46bd      	mov	sp, r7
    a2f0:	b004      	add	sp, #16
    a2f2:	bd80      	pop	{r7, pc}
    a2f4:	00013cbd 	.word	0x00013cbd
    a2f8:	0000a189 	.word	0x0000a189
    a2fc:	0000a1d5 	.word	0x0000a1d5

0000a300 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    a300:	b580      	push	{r7, lr}
    a302:	b082      	sub	sp, #8
    a304:	af00      	add	r7, sp, #0
    a306:	6078      	str	r0, [r7, #4]
    a308:	000a      	movs	r2, r1
    a30a:	1cfb      	adds	r3, r7, #3
    a30c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    a30e:	687b      	ldr	r3, [r7, #4]
    a310:	2231      	movs	r2, #49	; 0x31
    a312:	5c9b      	ldrb	r3, [r3, r2]
    a314:	b25a      	sxtb	r2, r3
    a316:	1cfb      	adds	r3, r7, #3
    a318:	781b      	ldrb	r3, [r3, #0]
    a31a:	2101      	movs	r1, #1
    a31c:	4099      	lsls	r1, r3
    a31e:	000b      	movs	r3, r1
    a320:	b25b      	sxtb	r3, r3
    a322:	4313      	orrs	r3, r2
    a324:	b25b      	sxtb	r3, r3
    a326:	b2d9      	uxtb	r1, r3
    a328:	687b      	ldr	r3, [r7, #4]
    a32a:	2231      	movs	r2, #49	; 0x31
    a32c:	5499      	strb	r1, [r3, r2]

}
    a32e:	46c0      	nop			; (mov r8, r8)
    a330:	46bd      	mov	sp, r7
    a332:	b002      	add	sp, #8
    a334:	bd80      	pop	{r7, pc}
	...

0000a338 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
    a338:	b580      	push	{r7, lr}
    a33a:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
    a33c:	2380      	movs	r3, #128	; 0x80
    a33e:	009a      	lsls	r2, r3, #2
    a340:	4b0f      	ldr	r3, [pc, #60]	; (a380 <InitializeSerialConsole+0x48>)
    a342:	0011      	movs	r1, r2
    a344:	0018      	movs	r0, r3
    a346:	4b0f      	ldr	r3, [pc, #60]	; (a384 <InitializeSerialConsole+0x4c>)
    a348:	4798      	blx	r3
    a34a:	0002      	movs	r2, r0
    a34c:	4b0e      	ldr	r3, [pc, #56]	; (a388 <InitializeSerialConsole+0x50>)
    a34e:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
    a350:	2380      	movs	r3, #128	; 0x80
    a352:	009a      	lsls	r2, r3, #2
    a354:	4b0d      	ldr	r3, [pc, #52]	; (a38c <InitializeSerialConsole+0x54>)
    a356:	0011      	movs	r1, r2
    a358:	0018      	movs	r0, r3
    a35a:	4b0a      	ldr	r3, [pc, #40]	; (a384 <InitializeSerialConsole+0x4c>)
    a35c:	4798      	blx	r3
    a35e:	0002      	movs	r2, r0
    a360:	4b0b      	ldr	r3, [pc, #44]	; (a390 <InitializeSerialConsole+0x58>)
    a362:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
    a364:	4b0b      	ldr	r3, [pc, #44]	; (a394 <InitializeSerialConsole+0x5c>)
    a366:	4798      	blx	r3
    configure_usart_callbacks();
    a368:	4b0b      	ldr	r3, [pc, #44]	; (a398 <InitializeSerialConsole+0x60>)
    a36a:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
    a36c:	490b      	ldr	r1, [pc, #44]	; (a39c <InitializeSerialConsole+0x64>)
    a36e:	4b0c      	ldr	r3, [pc, #48]	; (a3a0 <InitializeSerialConsole+0x68>)
    a370:	2201      	movs	r2, #1
    a372:	0018      	movs	r0, r3
    a374:	4b0b      	ldr	r3, [pc, #44]	; (a3a4 <InitializeSerialConsole+0x6c>)
    a376:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
    a378:	46c0      	nop			; (mov r8, r8)
    a37a:	46bd      	mov	sp, r7
    a37c:	bd80      	pop	{r7, pc}
    a37e:	46c0      	nop			; (mov r8, r8)
    a380:	200052cc 	.word	0x200052cc
    a384:	0000a069 	.word	0x0000a069
    a388:	200050c4 	.word	0x200050c4
    a38c:	200050cc 	.word	0x200050cc
    a390:	200054d0 	.word	0x200054d0
    a394:	0000a50d 	.word	0x0000a50d
    a398:	0000a585 	.word	0x0000a585
    a39c:	200050c8 	.word	0x200050c8
    a3a0:	20005090 	.word	0x20005090
    a3a4:	00015565 	.word	0x00015565

0000a3a8 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
    a3a8:	b580      	push	{r7, lr}
    a3aa:	b084      	sub	sp, #16
    a3ac:	af00      	add	r7, sp, #0
    a3ae:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
    a3b0:	4b1a      	ldr	r3, [pc, #104]	; (a41c <SerialConsoleWriteString+0x74>)
    a3b2:	4798      	blx	r3
    if (string != NULL) {
    a3b4:	687b      	ldr	r3, [r7, #4]
    a3b6:	2b00      	cmp	r3, #0
    a3b8:	d02a      	beq.n	a410 <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
    a3ba:	2300      	movs	r3, #0
    a3bc:	60fb      	str	r3, [r7, #12]
    a3be:	e00b      	b.n	a3d8 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
    a3c0:	4b17      	ldr	r3, [pc, #92]	; (a420 <SerialConsoleWriteString+0x78>)
    a3c2:	6818      	ldr	r0, [r3, #0]
    a3c4:	687a      	ldr	r2, [r7, #4]
    a3c6:	68fb      	ldr	r3, [r7, #12]
    a3c8:	18d3      	adds	r3, r2, r3
    a3ca:	781b      	ldrb	r3, [r3, #0]
    a3cc:	0019      	movs	r1, r3
    a3ce:	4b15      	ldr	r3, [pc, #84]	; (a424 <SerialConsoleWriteString+0x7c>)
    a3d0:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
    a3d2:	68fb      	ldr	r3, [r7, #12]
    a3d4:	3301      	adds	r3, #1
    a3d6:	60fb      	str	r3, [r7, #12]
    a3d8:	687b      	ldr	r3, [r7, #4]
    a3da:	0018      	movs	r0, r3
    a3dc:	4b12      	ldr	r3, [pc, #72]	; (a428 <SerialConsoleWriteString+0x80>)
    a3de:	4798      	blx	r3
    a3e0:	0002      	movs	r2, r0
    a3e2:	68fb      	ldr	r3, [r7, #12]
    a3e4:	429a      	cmp	r2, r3
    a3e6:	d8eb      	bhi.n	a3c0 <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
    a3e8:	4b10      	ldr	r3, [pc, #64]	; (a42c <SerialConsoleWriteString+0x84>)
    a3ea:	2101      	movs	r1, #1
    a3ec:	0018      	movs	r0, r3
    a3ee:	4b10      	ldr	r3, [pc, #64]	; (a430 <SerialConsoleWriteString+0x88>)
    a3f0:	4798      	blx	r3
    a3f2:	1e03      	subs	r3, r0, #0
    a3f4:	d10c      	bne.n	a410 <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
    a3f6:	4b0a      	ldr	r3, [pc, #40]	; (a420 <SerialConsoleWriteString+0x78>)
    a3f8:	681b      	ldr	r3, [r3, #0]
    a3fa:	4a0e      	ldr	r2, [pc, #56]	; (a434 <SerialConsoleWriteString+0x8c>)
    a3fc:	0011      	movs	r1, r2
    a3fe:	0018      	movs	r0, r3
    a400:	4b0d      	ldr	r3, [pc, #52]	; (a438 <SerialConsoleWriteString+0x90>)
    a402:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
    a404:	490b      	ldr	r1, [pc, #44]	; (a434 <SerialConsoleWriteString+0x8c>)
    a406:	4b09      	ldr	r3, [pc, #36]	; (a42c <SerialConsoleWriteString+0x84>)
    a408:	2201      	movs	r2, #1
    a40a:	0018      	movs	r0, r3
    a40c:	4b0b      	ldr	r3, [pc, #44]	; (a43c <SerialConsoleWriteString+0x94>)
    a40e:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
    a410:	4b0b      	ldr	r3, [pc, #44]	; (a440 <SerialConsoleWriteString+0x98>)
    a412:	4798      	blx	r3
}
    a414:	46c0      	nop			; (mov r8, r8)
    a416:	46bd      	mov	sp, r7
    a418:	b004      	add	sp, #16
    a41a:	bd80      	pop	{r7, pc}
    a41c:	00008a15 	.word	0x00008a15
    a420:	200054d0 	.word	0x200054d0
    a424:	0000a0c9 	.word	0x0000a0c9
    a428:	000212d7 	.word	0x000212d7
    a42c:	20005090 	.word	0x20005090
    a430:	000155ad 	.word	0x000155ad
    a434:	200054cc 	.word	0x200054cc
    a438:	0000a0fd 	.word	0x0000a0fd
    a43c:	0001551d 	.word	0x0001551d
    a440:	00008a2d 	.word	0x00008a2d

0000a444 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
    a444:	b580      	push	{r7, lr}
    a446:	b084      	sub	sp, #16
    a448:	af00      	add	r7, sp, #0
    a44a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
    a44c:	4b08      	ldr	r3, [pc, #32]	; (a470 <SerialConsoleReadCharacter+0x2c>)
    a44e:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
    a450:	4b08      	ldr	r3, [pc, #32]	; (a474 <SerialConsoleReadCharacter+0x30>)
    a452:	681b      	ldr	r3, [r3, #0]
    a454:	687a      	ldr	r2, [r7, #4]
    a456:	0011      	movs	r1, r2
    a458:	0018      	movs	r0, r3
    a45a:	4b07      	ldr	r3, [pc, #28]	; (a478 <SerialConsoleReadCharacter+0x34>)
    a45c:	4798      	blx	r3
    a45e:	0003      	movs	r3, r0
    a460:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
    a462:	4b06      	ldr	r3, [pc, #24]	; (a47c <SerialConsoleReadCharacter+0x38>)
    a464:	4798      	blx	r3
    return a;
    a466:	68fb      	ldr	r3, [r7, #12]
}
    a468:	0018      	movs	r0, r3
    a46a:	46bd      	mov	sp, r7
    a46c:	b004      	add	sp, #16
    a46e:	bd80      	pop	{r7, pc}
    a470:	00008a15 	.word	0x00008a15
    a474:	200050c4 	.word	0x200050c4
    a478:	0000a0fd 	.word	0x0000a0fd
    a47c:	00008a2d 	.word	0x00008a2d

0000a480 <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
    a480:	b580      	push	{r7, lr}
    a482:	af00      	add	r7, sp, #0
    return currentDebugLevel;
    a484:	4b02      	ldr	r3, [pc, #8]	; (a490 <getLogLevel+0x10>)
    a486:	781b      	ldrb	r3, [r3, #0]
}
    a488:	0018      	movs	r0, r3
    a48a:	46bd      	mov	sp, r7
    a48c:	bd80      	pop	{r7, pc}
    a48e:	46c0      	nop			; (mov r8, r8)
    a490:	20003ca8 	.word	0x20003ca8

0000a494 <LogMessage>:
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
    a494:	b40e      	push	{r1, r2, r3}
    a496:	b590      	push	{r4, r7, lr}
    a498:	b084      	sub	sp, #16
    a49a:	af00      	add	r7, sp, #0
    a49c:	0002      	movs	r2, r0
    a49e:	1dfb      	adds	r3, r7, #7
    a4a0:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
    a4a2:	4b0e      	ldr	r3, [pc, #56]	; (a4dc <LogMessage+0x48>)
    a4a4:	4798      	blx	r3
    a4a6:	0003      	movs	r3, r0
    a4a8:	001a      	movs	r2, r3
    a4aa:	1dfb      	adds	r3, r7, #7
    a4ac:	781b      	ldrb	r3, [r3, #0]
    a4ae:	4293      	cmp	r3, r2
    a4b0:	d30c      	bcc.n	a4cc <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
    a4b2:	2320      	movs	r3, #32
    a4b4:	18fb      	adds	r3, r7, r3
    a4b6:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
    a4b8:	68fb      	ldr	r3, [r7, #12]
    a4ba:	69fa      	ldr	r2, [r7, #28]
    a4bc:	4808      	ldr	r0, [pc, #32]	; (a4e0 <LogMessage+0x4c>)
    a4be:	217f      	movs	r1, #127	; 0x7f
    a4c0:	4c08      	ldr	r4, [pc, #32]	; (a4e4 <LogMessage+0x50>)
    a4c2:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
    a4c4:	4b06      	ldr	r3, [pc, #24]	; (a4e0 <LogMessage+0x4c>)
    a4c6:	0018      	movs	r0, r3
    a4c8:	4b07      	ldr	r3, [pc, #28]	; (a4e8 <LogMessage+0x54>)
    a4ca:	4798      	blx	r3
        va_end(ap);
    }
};
    a4cc:	46c0      	nop			; (mov r8, r8)
    a4ce:	46bd      	mov	sp, r7
    a4d0:	b004      	add	sp, #16
    a4d2:	bc90      	pop	{r4, r7}
    a4d4:	bc08      	pop	{r3}
    a4d6:	b003      	add	sp, #12
    a4d8:	4718      	bx	r3
    a4da:	46c0      	nop			; (mov r8, r8)
    a4dc:	0000a481 	.word	0x0000a481
    a4e0:	20005010 	.word	0x20005010
    a4e4:	00021511 	.word	0x00021511
    a4e8:	0000a3a9 	.word	0x0000a3a9

0000a4ec <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
    a4ec:	b40f      	push	{r0, r1, r2, r3}
    a4ee:	b580      	push	{r7, lr}
    a4f0:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
    a4f2:	68bb      	ldr	r3, [r7, #8]
    a4f4:	0019      	movs	r1, r3
    a4f6:	2001      	movs	r0, #1
    a4f8:	4b03      	ldr	r3, [pc, #12]	; (a508 <LogMessageDebug+0x1c>)
    a4fa:	4798      	blx	r3
};
    a4fc:	46c0      	nop			; (mov r8, r8)
    a4fe:	46bd      	mov	sp, r7
    a500:	bc80      	pop	{r7}
    a502:	bc08      	pop	{r3}
    a504:	b004      	add	sp, #16
    a506:	4718      	bx	r3
    a508:	0000a495 	.word	0x0000a495

0000a50c <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
    a50c:	b580      	push	{r7, lr}
    a50e:	b090      	sub	sp, #64	; 0x40
    a510:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    a512:	003b      	movs	r3, r7
    a514:	0018      	movs	r0, r3
    a516:	4b14      	ldr	r3, [pc, #80]	; (a568 <configure_usart+0x5c>)
    a518:	4798      	blx	r3

    config_usart.baudrate = 115200;
    a51a:	003b      	movs	r3, r7
    a51c:	22e1      	movs	r2, #225	; 0xe1
    a51e:	0252      	lsls	r2, r2, #9
    a520:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    a522:	003b      	movs	r3, r7
    a524:	22c4      	movs	r2, #196	; 0xc4
    a526:	0392      	lsls	r2, r2, #14
    a528:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    a52a:	003b      	movs	r3, r7
    a52c:	2201      	movs	r2, #1
    a52e:	4252      	negs	r2, r2
    a530:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    a532:	003b      	movs	r3, r7
    a534:	2201      	movs	r2, #1
    a536:	4252      	negs	r2, r2
    a538:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    a53a:	003b      	movs	r3, r7
    a53c:	4a0b      	ldr	r2, [pc, #44]	; (a56c <configure_usart+0x60>)
    a53e:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    a540:	003b      	movs	r3, r7
    a542:	4a0b      	ldr	r2, [pc, #44]	; (a570 <configure_usart+0x64>)
    a544:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
    a546:	46c0      	nop			; (mov r8, r8)
    a548:	003a      	movs	r2, r7
    a54a:	490a      	ldr	r1, [pc, #40]	; (a574 <configure_usart+0x68>)
    a54c:	4b0a      	ldr	r3, [pc, #40]	; (a578 <configure_usart+0x6c>)
    a54e:	0018      	movs	r0, r3
    a550:	4b0a      	ldr	r3, [pc, #40]	; (a57c <configure_usart+0x70>)
    a552:	4798      	blx	r3
    a554:	1e03      	subs	r3, r0, #0
    a556:	d1f7      	bne.n	a548 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
    a558:	4b07      	ldr	r3, [pc, #28]	; (a578 <configure_usart+0x6c>)
    a55a:	0018      	movs	r0, r3
    a55c:	4b08      	ldr	r3, [pc, #32]	; (a580 <configure_usart+0x74>)
    a55e:	4798      	blx	r3
}
    a560:	46c0      	nop			; (mov r8, r8)
    a562:	46bd      	mov	sp, r7
    a564:	b010      	add	sp, #64	; 0x40
    a566:	bd80      	pop	{r7, pc}
    a568:	0000a1f9 	.word	0x0000a1f9
    a56c:	002a0003 	.word	0x002a0003
    a570:	002b0003 	.word	0x002b0003
    a574:	42001800 	.word	0x42001800
    a578:	20005090 	.word	0x20005090
    a57c:	00015121 	.word	0x00015121
    a580:	0000a2b9 	.word	0x0000a2b9

0000a584 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
    a584:	b580      	push	{r7, lr}
    a586:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    a588:	490c      	ldr	r1, [pc, #48]	; (a5bc <configure_usart_callbacks+0x38>)
    a58a:	4b0d      	ldr	r3, [pc, #52]	; (a5c0 <configure_usart_callbacks+0x3c>)
    a58c:	2200      	movs	r2, #0
    a58e:	0018      	movs	r0, r3
    a590:	4b0c      	ldr	r3, [pc, #48]	; (a5c4 <configure_usart_callbacks+0x40>)
    a592:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    a594:	490c      	ldr	r1, [pc, #48]	; (a5c8 <configure_usart_callbacks+0x44>)
    a596:	4b0a      	ldr	r3, [pc, #40]	; (a5c0 <configure_usart_callbacks+0x3c>)
    a598:	2201      	movs	r2, #1
    a59a:	0018      	movs	r0, r3
    a59c:	4b09      	ldr	r3, [pc, #36]	; (a5c4 <configure_usart_callbacks+0x40>)
    a59e:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    a5a0:	4b07      	ldr	r3, [pc, #28]	; (a5c0 <configure_usart_callbacks+0x3c>)
    a5a2:	2100      	movs	r1, #0
    a5a4:	0018      	movs	r0, r3
    a5a6:	4b09      	ldr	r3, [pc, #36]	; (a5cc <configure_usart_callbacks+0x48>)
    a5a8:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    a5aa:	4b05      	ldr	r3, [pc, #20]	; (a5c0 <configure_usart_callbacks+0x3c>)
    a5ac:	2101      	movs	r1, #1
    a5ae:	0018      	movs	r0, r3
    a5b0:	4b06      	ldr	r3, [pc, #24]	; (a5cc <configure_usart_callbacks+0x48>)
    a5b2:	4798      	blx	r3
}
    a5b4:	46c0      	nop			; (mov r8, r8)
    a5b6:	46bd      	mov	sp, r7
    a5b8:	bd80      	pop	{r7, pc}
    a5ba:	46c0      	nop			; (mov r8, r8)
    a5bc:	0000a619 	.word	0x0000a619
    a5c0:	20005090 	.word	0x20005090
    a5c4:	000154d5 	.word	0x000154d5
    a5c8:	0000a5d1 	.word	0x0000a5d1
    a5cc:	0000a301 	.word	0x0000a301

0000a5d0 <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
    a5d0:	b580      	push	{r7, lr}
    a5d2:	b082      	sub	sp, #8
    a5d4:	af00      	add	r7, sp, #0
    a5d6:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
    a5d8:	4b09      	ldr	r3, [pc, #36]	; (a600 <usart_read_callback+0x30>)
    a5da:	681a      	ldr	r2, [r3, #0]
    a5dc:	4b09      	ldr	r3, [pc, #36]	; (a604 <usart_read_callback+0x34>)
    a5de:	781b      	ldrb	r3, [r3, #0]
    a5e0:	0019      	movs	r1, r3
    a5e2:	0010      	movs	r0, r2
    a5e4:	4b08      	ldr	r3, [pc, #32]	; (a608 <usart_read_callback+0x38>)
    a5e6:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
    a5e8:	4906      	ldr	r1, [pc, #24]	; (a604 <usart_read_callback+0x34>)
    a5ea:	4b08      	ldr	r3, [pc, #32]	; (a60c <usart_read_callback+0x3c>)
    a5ec:	2201      	movs	r2, #1
    a5ee:	0018      	movs	r0, r3
    a5f0:	4b07      	ldr	r3, [pc, #28]	; (a610 <usart_read_callback+0x40>)
    a5f2:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
    a5f4:	4b07      	ldr	r3, [pc, #28]	; (a614 <usart_read_callback+0x44>)
    a5f6:	4798      	blx	r3
}
    a5f8:	46c0      	nop			; (mov r8, r8)
    a5fa:	46bd      	mov	sp, r7
    a5fc:	b002      	add	sp, #8
    a5fe:	bd80      	pop	{r7, pc}
    a600:	200050c4 	.word	0x200050c4
    a604:	200050c8 	.word	0x200050c8
    a608:	0000a0c9 	.word	0x0000a0c9
    a60c:	20005090 	.word	0x20005090
    a610:	00015565 	.word	0x00015565
    a614:	000011c1 	.word	0x000011c1

0000a618 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
    a618:	b580      	push	{r7, lr}
    a61a:	b082      	sub	sp, #8
    a61c:	af00      	add	r7, sp, #0
    a61e:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
    a620:	4b09      	ldr	r3, [pc, #36]	; (a648 <usart_write_callback+0x30>)
    a622:	681b      	ldr	r3, [r3, #0]
    a624:	4a09      	ldr	r2, [pc, #36]	; (a64c <usart_write_callback+0x34>)
    a626:	0011      	movs	r1, r2
    a628:	0018      	movs	r0, r3
    a62a:	4b09      	ldr	r3, [pc, #36]	; (a650 <usart_write_callback+0x38>)
    a62c:	4798      	blx	r3
    a62e:	0003      	movs	r3, r0
    a630:	3301      	adds	r3, #1
    a632:	d005      	beq.n	a640 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
    a634:	4905      	ldr	r1, [pc, #20]	; (a64c <usart_write_callback+0x34>)
    a636:	4b07      	ldr	r3, [pc, #28]	; (a654 <usart_write_callback+0x3c>)
    a638:	2201      	movs	r2, #1
    a63a:	0018      	movs	r0, r3
    a63c:	4b06      	ldr	r3, [pc, #24]	; (a658 <usart_write_callback+0x40>)
    a63e:	4798      	blx	r3
    }
}
    a640:	46c0      	nop			; (mov r8, r8)
    a642:	46bd      	mov	sp, r7
    a644:	b002      	add	sp, #8
    a646:	bd80      	pop	{r7, pc}
    a648:	200054d0 	.word	0x200054d0
    a64c:	200054cc 	.word	0x200054cc
    a650:	0000a0fd 	.word	0x0000a0fd
    a654:	20005090 	.word	0x20005090
    a658:	0001551d 	.word	0x0001551d

0000a65c <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    a65c:	b590      	push	{r4, r7, lr}
    a65e:	b087      	sub	sp, #28
    a660:	af00      	add	r7, sp, #0
    a662:	60f8      	str	r0, [r7, #12]
    a664:	000c      	movs	r4, r1
    a666:	0010      	movs	r0, r2
    a668:	0019      	movs	r1, r3
    a66a:	230a      	movs	r3, #10
    a66c:	18fb      	adds	r3, r7, r3
    a66e:	1c22      	adds	r2, r4, #0
    a670:	801a      	strh	r2, [r3, #0]
    a672:	2308      	movs	r3, #8
    a674:	18fb      	adds	r3, r7, r3
    a676:	1c02      	adds	r2, r0, #0
    a678:	801a      	strh	r2, [r3, #0]
    a67a:	1dfb      	adds	r3, r7, #7
    a67c:	1c0a      	adds	r2, r1, #0
    a67e:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a680:	230a      	movs	r3, #10
    a682:	18fb      	adds	r3, r7, r3
    a684:	881a      	ldrh	r2, [r3, #0]
    a686:	2308      	movs	r3, #8
    a688:	18fb      	adds	r3, r7, r3
    a68a:	881b      	ldrh	r3, [r3, #0]
    a68c:	1ad3      	subs	r3, r2, r3
    a68e:	3307      	adds	r3, #7
    a690:	2b00      	cmp	r3, #0
    a692:	da00      	bge.n	a696 <SDMMC_UNSTUFF_BITS+0x3a>
    a694:	3307      	adds	r3, #7
    a696:	10db      	asrs	r3, r3, #3
    a698:	3b01      	subs	r3, #1
    a69a:	68fa      	ldr	r2, [r7, #12]
    a69c:	18d3      	adds	r3, r2, r3
    a69e:	781b      	ldrb	r3, [r3, #0]
    a6a0:	0019      	movs	r1, r3
    a6a2:	2308      	movs	r3, #8
    a6a4:	18fb      	adds	r3, r7, r3
    a6a6:	881b      	ldrh	r3, [r3, #0]
    a6a8:	2207      	movs	r2, #7
    a6aa:	4013      	ands	r3, r2
    a6ac:	4119      	asrs	r1, r3
    a6ae:	000b      	movs	r3, r1
    a6b0:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    a6b2:	2308      	movs	r3, #8
    a6b4:	18fb      	adds	r3, r7, r3
    a6b6:	881b      	ldrh	r3, [r3, #0]
    a6b8:	2207      	movs	r2, #7
    a6ba:	401a      	ands	r2, r3
    a6bc:	1dfb      	adds	r3, r7, #7
    a6be:	781b      	ldrb	r3, [r3, #0]
    a6c0:	18d3      	adds	r3, r2, r3
    a6c2:	2b08      	cmp	r3, #8
    a6c4:	dd1c      	ble.n	a700 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a6c6:	230a      	movs	r3, #10
    a6c8:	18fb      	adds	r3, r7, r3
    a6ca:	881a      	ldrh	r2, [r3, #0]
    a6cc:	2308      	movs	r3, #8
    a6ce:	18fb      	adds	r3, r7, r3
    a6d0:	881b      	ldrh	r3, [r3, #0]
    a6d2:	1ad3      	subs	r3, r2, r3
    a6d4:	3307      	adds	r3, #7
    a6d6:	2b00      	cmp	r3, #0
    a6d8:	da00      	bge.n	a6dc <SDMMC_UNSTUFF_BITS+0x80>
    a6da:	3307      	adds	r3, #7
    a6dc:	10db      	asrs	r3, r3, #3
    a6de:	3b02      	subs	r3, #2
    a6e0:	68fa      	ldr	r2, [r7, #12]
    a6e2:	18d3      	adds	r3, r2, r3
    a6e4:	781b      	ldrb	r3, [r3, #0]
    a6e6:	0019      	movs	r1, r3
    a6e8:	2308      	movs	r3, #8
    a6ea:	18fb      	adds	r3, r7, r3
    a6ec:	881b      	ldrh	r3, [r3, #0]
    a6ee:	2207      	movs	r2, #7
    a6f0:	4013      	ands	r3, r2
    a6f2:	2208      	movs	r2, #8
    a6f4:	1ad3      	subs	r3, r2, r3
    a6f6:	4099      	lsls	r1, r3
    a6f8:	000b      	movs	r3, r1
    a6fa:	697a      	ldr	r2, [r7, #20]
    a6fc:	4313      	orrs	r3, r2
    a6fe:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    a700:	2308      	movs	r3, #8
    a702:	18fb      	adds	r3, r7, r3
    a704:	881b      	ldrh	r3, [r3, #0]
    a706:	2207      	movs	r2, #7
    a708:	401a      	ands	r2, r3
    a70a:	1dfb      	adds	r3, r7, #7
    a70c:	781b      	ldrb	r3, [r3, #0]
    a70e:	18d3      	adds	r3, r2, r3
    a710:	2b10      	cmp	r3, #16
    a712:	dd1c      	ble.n	a74e <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a714:	230a      	movs	r3, #10
    a716:	18fb      	adds	r3, r7, r3
    a718:	881a      	ldrh	r2, [r3, #0]
    a71a:	2308      	movs	r3, #8
    a71c:	18fb      	adds	r3, r7, r3
    a71e:	881b      	ldrh	r3, [r3, #0]
    a720:	1ad3      	subs	r3, r2, r3
    a722:	3307      	adds	r3, #7
    a724:	2b00      	cmp	r3, #0
    a726:	da00      	bge.n	a72a <SDMMC_UNSTUFF_BITS+0xce>
    a728:	3307      	adds	r3, #7
    a72a:	10db      	asrs	r3, r3, #3
    a72c:	3b03      	subs	r3, #3
    a72e:	68fa      	ldr	r2, [r7, #12]
    a730:	18d3      	adds	r3, r2, r3
    a732:	781b      	ldrb	r3, [r3, #0]
    a734:	0019      	movs	r1, r3
    a736:	2308      	movs	r3, #8
    a738:	18fb      	adds	r3, r7, r3
    a73a:	881b      	ldrh	r3, [r3, #0]
    a73c:	2207      	movs	r2, #7
    a73e:	4013      	ands	r3, r2
    a740:	2210      	movs	r2, #16
    a742:	1ad3      	subs	r3, r2, r3
    a744:	4099      	lsls	r1, r3
    a746:	000b      	movs	r3, r1
    a748:	697a      	ldr	r2, [r7, #20]
    a74a:	4313      	orrs	r3, r2
    a74c:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    a74e:	2308      	movs	r3, #8
    a750:	18fb      	adds	r3, r7, r3
    a752:	881b      	ldrh	r3, [r3, #0]
    a754:	2207      	movs	r2, #7
    a756:	401a      	ands	r2, r3
    a758:	1dfb      	adds	r3, r7, #7
    a75a:	781b      	ldrb	r3, [r3, #0]
    a75c:	18d3      	adds	r3, r2, r3
    a75e:	2b10      	cmp	r3, #16
    a760:	dd1c      	ble.n	a79c <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a762:	230a      	movs	r3, #10
    a764:	18fb      	adds	r3, r7, r3
    a766:	881a      	ldrh	r2, [r3, #0]
    a768:	2308      	movs	r3, #8
    a76a:	18fb      	adds	r3, r7, r3
    a76c:	881b      	ldrh	r3, [r3, #0]
    a76e:	1ad3      	subs	r3, r2, r3
    a770:	3307      	adds	r3, #7
    a772:	2b00      	cmp	r3, #0
    a774:	da00      	bge.n	a778 <SDMMC_UNSTUFF_BITS+0x11c>
    a776:	3307      	adds	r3, #7
    a778:	10db      	asrs	r3, r3, #3
    a77a:	3b03      	subs	r3, #3
    a77c:	68fa      	ldr	r2, [r7, #12]
    a77e:	18d3      	adds	r3, r2, r3
    a780:	781b      	ldrb	r3, [r3, #0]
    a782:	0019      	movs	r1, r3
    a784:	2308      	movs	r3, #8
    a786:	18fb      	adds	r3, r7, r3
    a788:	881b      	ldrh	r3, [r3, #0]
    a78a:	2207      	movs	r2, #7
    a78c:	4013      	ands	r3, r2
    a78e:	2210      	movs	r2, #16
    a790:	1ad3      	subs	r3, r2, r3
    a792:	4099      	lsls	r1, r3
    a794:	000b      	movs	r3, r1
    a796:	697a      	ldr	r2, [r7, #20]
    a798:	4313      	orrs	r3, r2
    a79a:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    a79c:	1dfb      	adds	r3, r7, #7
    a79e:	781b      	ldrb	r3, [r3, #0]
    a7a0:	2201      	movs	r2, #1
    a7a2:	409a      	lsls	r2, r3
    a7a4:	0013      	movs	r3, r2
    a7a6:	1e5a      	subs	r2, r3, #1
    a7a8:	697b      	ldr	r3, [r7, #20]
    a7aa:	4013      	ands	r3, r2
    a7ac:	617b      	str	r3, [r7, #20]
	return value;
    a7ae:	697b      	ldr	r3, [r7, #20]
}
    a7b0:	0018      	movs	r0, r3
    a7b2:	46bd      	mov	sp, r7
    a7b4:	b007      	add	sp, #28
    a7b6:	bd90      	pop	{r4, r7, pc}

0000a7b8 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    a7b8:	b580      	push	{r7, lr}
    a7ba:	b082      	sub	sp, #8
    a7bc:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    a7be:	4b23      	ldr	r3, [pc, #140]	; (a84c <mmc_spi_op_cond+0x94>)
    a7c0:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    a7c2:	4b23      	ldr	r3, [pc, #140]	; (a850 <mmc_spi_op_cond+0x98>)
    a7c4:	2100      	movs	r1, #0
    a7c6:	0018      	movs	r0, r3
    a7c8:	4b22      	ldr	r3, [pc, #136]	; (a854 <mmc_spi_op_cond+0x9c>)
    a7ca:	4798      	blx	r3
    a7cc:	0003      	movs	r3, r0
    a7ce:	001a      	movs	r2, r3
    a7d0:	2301      	movs	r3, #1
    a7d2:	4053      	eors	r3, r2
    a7d4:	b2db      	uxtb	r3, r3
    a7d6:	2b00      	cmp	r3, #0
    a7d8:	d001      	beq.n	a7de <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    a7da:	2300      	movs	r3, #0
    a7dc:	e031      	b.n	a842 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    a7de:	4b1e      	ldr	r3, [pc, #120]	; (a858 <mmc_spi_op_cond+0xa0>)
    a7e0:	4798      	blx	r3
    a7e2:	0003      	movs	r3, r0
    a7e4:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    a7e6:	683b      	ldr	r3, [r7, #0]
    a7e8:	2201      	movs	r2, #1
    a7ea:	4013      	ands	r3, r2
    a7ec:	d006      	beq.n	a7fc <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    a7ee:	687b      	ldr	r3, [r7, #4]
    a7f0:	1e5a      	subs	r2, r3, #1
    a7f2:	607a      	str	r2, [r7, #4]
    a7f4:	2b00      	cmp	r3, #0
    a7f6:	d1e4      	bne.n	a7c2 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    a7f8:	2300      	movs	r3, #0
    a7fa:	e022      	b.n	a842 <mmc_spi_op_cond+0x8a>
			break;
    a7fc:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    a7fe:	4b17      	ldr	r3, [pc, #92]	; (a85c <mmc_spi_op_cond+0xa4>)
    a800:	2100      	movs	r1, #0
    a802:	0018      	movs	r0, r3
    a804:	4b13      	ldr	r3, [pc, #76]	; (a854 <mmc_spi_op_cond+0x9c>)
    a806:	4798      	blx	r3
    a808:	0003      	movs	r3, r0
    a80a:	001a      	movs	r2, r3
    a80c:	2301      	movs	r3, #1
    a80e:	4053      	eors	r3, r2
    a810:	b2db      	uxtb	r3, r3
    a812:	2b00      	cmp	r3, #0
    a814:	d001      	beq.n	a81a <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    a816:	2300      	movs	r3, #0
    a818:	e013      	b.n	a842 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    a81a:	4b0f      	ldr	r3, [pc, #60]	; (a858 <mmc_spi_op_cond+0xa0>)
    a81c:	4798      	blx	r3
    a81e:	0002      	movs	r2, r0
    a820:	23c0      	movs	r3, #192	; 0xc0
    a822:	05db      	lsls	r3, r3, #23
    a824:	401a      	ands	r2, r3
    a826:	2380      	movs	r3, #128	; 0x80
    a828:	05db      	lsls	r3, r3, #23
    a82a:	429a      	cmp	r2, r3
    a82c:	d108      	bne.n	a840 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    a82e:	4b0c      	ldr	r3, [pc, #48]	; (a860 <mmc_spi_op_cond+0xa8>)
    a830:	681a      	ldr	r2, [r3, #0]
    a832:	4b0b      	ldr	r3, [pc, #44]	; (a860 <mmc_spi_op_cond+0xa8>)
    a834:	681b      	ldr	r3, [r3, #0]
    a836:	7adb      	ldrb	r3, [r3, #11]
    a838:	2108      	movs	r1, #8
    a83a:	430b      	orrs	r3, r1
    a83c:	b2db      	uxtb	r3, r3
    a83e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    a840:	2301      	movs	r3, #1
}
    a842:	0018      	movs	r0, r3
    a844:	46bd      	mov	sp, r7
    a846:	b002      	add	sp, #8
    a848:	bd80      	pop	{r7, pc}
    a84a:	46c0      	nop			; (mov r8, r8)
    a84c:	00001bee 	.word	0x00001bee
    a850:	00001101 	.word	0x00001101
    a854:	0000c235 	.word	0x0000c235
    a858:	0000c475 	.word	0x0000c475
    a85c:	0000053a 	.word	0x0000053a
    a860:	20003cd0 	.word	0x20003cd0

0000a864 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    a864:	b580      	push	{r7, lr}
    a866:	b086      	sub	sp, #24
    a868:	af00      	add	r7, sp, #0
    a86a:	0002      	movs	r2, r0
    a86c:	1dfb      	adds	r3, r7, #7
    a86e:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    a870:	4b2e      	ldr	r3, [pc, #184]	; (a92c <sd_spi_op_cond+0xc8>)
    a872:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    a874:	4b2e      	ldr	r3, [pc, #184]	; (a930 <sd_spi_op_cond+0xcc>)
    a876:	2100      	movs	r1, #0
    a878:	0018      	movs	r0, r3
    a87a:	4b2e      	ldr	r3, [pc, #184]	; (a934 <sd_spi_op_cond+0xd0>)
    a87c:	4798      	blx	r3
    a87e:	0003      	movs	r3, r0
    a880:	001a      	movs	r2, r3
    a882:	2301      	movs	r3, #1
    a884:	4053      	eors	r3, r2
    a886:	b2db      	uxtb	r3, r3
    a888:	2b00      	cmp	r3, #0
    a88a:	d001      	beq.n	a890 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    a88c:	2300      	movs	r3, #0
    a88e:	e048      	b.n	a922 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    a890:	2300      	movs	r3, #0
    a892:	617b      	str	r3, [r7, #20]
		if (v2) {
    a894:	1dfb      	adds	r3, r7, #7
    a896:	781b      	ldrb	r3, [r3, #0]
    a898:	2b00      	cmp	r3, #0
    a89a:	d004      	beq.n	a8a6 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    a89c:	697b      	ldr	r3, [r7, #20]
    a89e:	2280      	movs	r2, #128	; 0x80
    a8a0:	05d2      	lsls	r2, r2, #23
    a8a2:	4313      	orrs	r3, r2
    a8a4:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    a8a6:	697b      	ldr	r3, [r7, #20]
    a8a8:	4a23      	ldr	r2, [pc, #140]	; (a938 <sd_spi_op_cond+0xd4>)
    a8aa:	0019      	movs	r1, r3
    a8ac:	0010      	movs	r0, r2
    a8ae:	4b21      	ldr	r3, [pc, #132]	; (a934 <sd_spi_op_cond+0xd0>)
    a8b0:	4798      	blx	r3
    a8b2:	0003      	movs	r3, r0
    a8b4:	001a      	movs	r2, r3
    a8b6:	2301      	movs	r3, #1
    a8b8:	4053      	eors	r3, r2
    a8ba:	b2db      	uxtb	r3, r3
    a8bc:	2b00      	cmp	r3, #0
    a8be:	d001      	beq.n	a8c4 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    a8c0:	2300      	movs	r3, #0
    a8c2:	e02e      	b.n	a922 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    a8c4:	4b1d      	ldr	r3, [pc, #116]	; (a93c <sd_spi_op_cond+0xd8>)
    a8c6:	4798      	blx	r3
    a8c8:	0003      	movs	r3, r0
    a8ca:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    a8cc:	68fb      	ldr	r3, [r7, #12]
    a8ce:	2201      	movs	r2, #1
    a8d0:	4013      	ands	r3, r2
    a8d2:	d006      	beq.n	a8e2 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    a8d4:	693b      	ldr	r3, [r7, #16]
    a8d6:	1e5a      	subs	r2, r3, #1
    a8d8:	613a      	str	r2, [r7, #16]
    a8da:	2b00      	cmp	r3, #0
    a8dc:	d1ca      	bne.n	a874 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    a8de:	2300      	movs	r3, #0
    a8e0:	e01f      	b.n	a922 <sd_spi_op_cond+0xbe>
			break;
    a8e2:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    a8e4:	4b16      	ldr	r3, [pc, #88]	; (a940 <sd_spi_op_cond+0xdc>)
    a8e6:	2100      	movs	r1, #0
    a8e8:	0018      	movs	r0, r3
    a8ea:	4b12      	ldr	r3, [pc, #72]	; (a934 <sd_spi_op_cond+0xd0>)
    a8ec:	4798      	blx	r3
    a8ee:	0003      	movs	r3, r0
    a8f0:	001a      	movs	r2, r3
    a8f2:	2301      	movs	r3, #1
    a8f4:	4053      	eors	r3, r2
    a8f6:	b2db      	uxtb	r3, r3
    a8f8:	2b00      	cmp	r3, #0
    a8fa:	d001      	beq.n	a900 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    a8fc:	2300      	movs	r3, #0
    a8fe:	e010      	b.n	a922 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    a900:	4b0e      	ldr	r3, [pc, #56]	; (a93c <sd_spi_op_cond+0xd8>)
    a902:	4798      	blx	r3
    a904:	0002      	movs	r2, r0
    a906:	2380      	movs	r3, #128	; 0x80
    a908:	05db      	lsls	r3, r3, #23
    a90a:	4013      	ands	r3, r2
    a90c:	d008      	beq.n	a920 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    a90e:	4b0d      	ldr	r3, [pc, #52]	; (a944 <sd_spi_op_cond+0xe0>)
    a910:	681a      	ldr	r2, [r3, #0]
    a912:	4b0c      	ldr	r3, [pc, #48]	; (a944 <sd_spi_op_cond+0xe0>)
    a914:	681b      	ldr	r3, [r3, #0]
    a916:	7adb      	ldrb	r3, [r3, #11]
    a918:	2108      	movs	r1, #8
    a91a:	430b      	orrs	r3, r1
    a91c:	b2db      	uxtb	r3, r3
    a91e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    a920:	2301      	movs	r3, #1
}
    a922:	0018      	movs	r0, r3
    a924:	46bd      	mov	sp, r7
    a926:	b006      	add	sp, #24
    a928:	bd80      	pop	{r7, pc}
    a92a:	46c0      	nop			; (mov r8, r8)
    a92c:	00001bee 	.word	0x00001bee
    a930:	00001137 	.word	0x00001137
    a934:	0000c235 	.word	0x0000c235
    a938:	00001129 	.word	0x00001129
    a93c:	0000c475 	.word	0x0000c475
    a940:	0000053a 	.word	0x0000053a
    a944:	20003cd0 	.word	0x20003cd0

0000a948 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    a948:	b580      	push	{r7, lr}
    a94a:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    a94c:	2301      	movs	r3, #1
}
    a94e:	0018      	movs	r0, r3
    a950:	46bd      	mov	sp, r7
    a952:	bd80      	pop	{r7, pc}

0000a954 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    a954:	b580      	push	{r7, lr}
    a956:	b084      	sub	sp, #16
    a958:	af00      	add	r7, sp, #0
    a95a:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    a95c:	687b      	ldr	r3, [r7, #4]
    a95e:	2200      	movs	r2, #0
    a960:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    a962:	23d5      	movs	r3, #213	; 0xd5
    a964:	005b      	lsls	r3, r3, #1
    a966:	4a14      	ldr	r2, [pc, #80]	; (a9b8 <sd_cmd8+0x64>)
    a968:	0019      	movs	r1, r3
    a96a:	0010      	movs	r0, r2
    a96c:	4b13      	ldr	r3, [pc, #76]	; (a9bc <sd_cmd8+0x68>)
    a96e:	4798      	blx	r3
    a970:	0003      	movs	r3, r0
    a972:	001a      	movs	r2, r3
    a974:	2301      	movs	r3, #1
    a976:	4053      	eors	r3, r2
    a978:	b2db      	uxtb	r3, r3
    a97a:	2b00      	cmp	r3, #0
    a97c:	d001      	beq.n	a982 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    a97e:	2301      	movs	r3, #1
    a980:	e015      	b.n	a9ae <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    a982:	4b0f      	ldr	r3, [pc, #60]	; (a9c0 <sd_cmd8+0x6c>)
    a984:	4798      	blx	r3
    a986:	0003      	movs	r3, r0
    a988:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    a98a:	68fb      	ldr	r3, [r7, #12]
    a98c:	3301      	adds	r3, #1
    a98e:	d101      	bne.n	a994 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    a990:	2301      	movs	r3, #1
    a992:	e00c      	b.n	a9ae <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    a994:	68fb      	ldr	r3, [r7, #12]
    a996:	051b      	lsls	r3, r3, #20
    a998:	0d1a      	lsrs	r2, r3, #20
    a99a:	23d5      	movs	r3, #213	; 0xd5
    a99c:	005b      	lsls	r3, r3, #1
    a99e:	429a      	cmp	r2, r3
    a9a0:	d001      	beq.n	a9a6 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    a9a2:	2300      	movs	r3, #0
    a9a4:	e003      	b.n	a9ae <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    a9a6:	687b      	ldr	r3, [r7, #4]
    a9a8:	2201      	movs	r2, #1
    a9aa:	701a      	strb	r2, [r3, #0]
	return true;
    a9ac:	2301      	movs	r3, #1
}
    a9ae:	0018      	movs	r0, r3
    a9b0:	46bd      	mov	sp, r7
    a9b2:	b004      	add	sp, #16
    a9b4:	bd80      	pop	{r7, pc}
    a9b6:	46c0      	nop			; (mov r8, r8)
    a9b8:	00005508 	.word	0x00005508
    a9bc:	0000c235 	.word	0x0000c235
    a9c0:	0000c475 	.word	0x0000c475

0000a9c4 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    a9c4:	b590      	push	{r4, r7, lr}
    a9c6:	b089      	sub	sp, #36	; 0x24
    a9c8:	af02      	add	r7, sp, #8
    a9ca:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    a9cc:	2380      	movs	r3, #128	; 0x80
    a9ce:	009a      	lsls	r2, r3, #2
    a9d0:	4841      	ldr	r0, [pc, #260]	; (aad8 <mmc_cmd8+0x114>)
    a9d2:	2300      	movs	r3, #0
    a9d4:	9300      	str	r3, [sp, #0]
    a9d6:	2301      	movs	r3, #1
    a9d8:	2100      	movs	r1, #0
    a9da:	4c40      	ldr	r4, [pc, #256]	; (aadc <mmc_cmd8+0x118>)
    a9dc:	47a0      	blx	r4
    a9de:	0003      	movs	r3, r0
    a9e0:	001a      	movs	r2, r3
    a9e2:	2301      	movs	r3, #1
    a9e4:	4053      	eors	r3, r2
    a9e6:	b2db      	uxtb	r3, r3
    a9e8:	2b00      	cmp	r3, #0
    a9ea:	d001      	beq.n	a9f0 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    a9ec:	2300      	movs	r3, #0
    a9ee:	e06e      	b.n	aace <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    a9f0:	2316      	movs	r3, #22
    a9f2:	18fb      	adds	r3, r7, r3
    a9f4:	2200      	movs	r2, #0
    a9f6:	801a      	strh	r2, [r3, #0]
    a9f8:	e014      	b.n	aa24 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    a9fa:	2310      	movs	r3, #16
    a9fc:	18fb      	adds	r3, r7, r3
    a9fe:	0018      	movs	r0, r3
    aa00:	4b37      	ldr	r3, [pc, #220]	; (aae0 <mmc_cmd8+0x11c>)
    aa02:	4798      	blx	r3
    aa04:	0003      	movs	r3, r0
    aa06:	001a      	movs	r2, r3
    aa08:	2301      	movs	r3, #1
    aa0a:	4053      	eors	r3, r2
    aa0c:	b2db      	uxtb	r3, r3
    aa0e:	2b00      	cmp	r3, #0
    aa10:	d001      	beq.n	aa16 <mmc_cmd8+0x52>
			return false;
    aa12:	2300      	movs	r3, #0
    aa14:	e05b      	b.n	aace <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    aa16:	2316      	movs	r3, #22
    aa18:	18fb      	adds	r3, r7, r3
    aa1a:	881a      	ldrh	r2, [r3, #0]
    aa1c:	2316      	movs	r3, #22
    aa1e:	18fb      	adds	r3, r7, r3
    aa20:	3201      	adds	r2, #1
    aa22:	801a      	strh	r2, [r3, #0]
    aa24:	2316      	movs	r3, #22
    aa26:	18fb      	adds	r3, r7, r3
    aa28:	881b      	ldrh	r3, [r3, #0]
    aa2a:	2b31      	cmp	r3, #49	; 0x31
    aa2c:	d9e5      	bls.n	a9fa <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    aa2e:	693b      	ldr	r3, [r7, #16]
    aa30:	b2db      	uxtb	r3, r3
    aa32:	2202      	movs	r2, #2
    aa34:	4013      	ands	r3, r2
    aa36:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    aa38:	687b      	ldr	r3, [r7, #4]
    aa3a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    aa3c:	4b29      	ldr	r3, [pc, #164]	; (aae4 <mmc_cmd8+0x120>)
    aa3e:	681b      	ldr	r3, [r3, #0]
    aa40:	330e      	adds	r3, #14
    aa42:	0018      	movs	r0, r3
    aa44:	230c      	movs	r3, #12
    aa46:	223e      	movs	r2, #62	; 0x3e
    aa48:	2180      	movs	r1, #128	; 0x80
    aa4a:	4c27      	ldr	r4, [pc, #156]	; (aae8 <mmc_cmd8+0x124>)
    aa4c:	47a0      	blx	r4
    aa4e:	0002      	movs	r2, r0
    aa50:	4b26      	ldr	r3, [pc, #152]	; (aaec <mmc_cmd8+0x128>)
    aa52:	429a      	cmp	r2, r3
    aa54:	d135      	bne.n	aac2 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    aa56:	e014      	b.n	aa82 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    aa58:	230c      	movs	r3, #12
    aa5a:	18fb      	adds	r3, r7, r3
    aa5c:	0018      	movs	r0, r3
    aa5e:	4b20      	ldr	r3, [pc, #128]	; (aae0 <mmc_cmd8+0x11c>)
    aa60:	4798      	blx	r3
    aa62:	0003      	movs	r3, r0
    aa64:	001a      	movs	r2, r3
    aa66:	2301      	movs	r3, #1
    aa68:	4053      	eors	r3, r2
    aa6a:	b2db      	uxtb	r3, r3
    aa6c:	2b00      	cmp	r3, #0
    aa6e:	d001      	beq.n	aa74 <mmc_cmd8+0xb0>
				return false;
    aa70:	2300      	movs	r3, #0
    aa72:	e02c      	b.n	aace <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    aa74:	2316      	movs	r3, #22
    aa76:	18fb      	adds	r3, r7, r3
    aa78:	881a      	ldrh	r2, [r3, #0]
    aa7a:	2316      	movs	r3, #22
    aa7c:	18fb      	adds	r3, r7, r3
    aa7e:	3201      	adds	r2, #1
    aa80:	801a      	strh	r2, [r3, #0]
    aa82:	2316      	movs	r3, #22
    aa84:	18fb      	adds	r3, r7, r3
    aa86:	881b      	ldrh	r3, [r3, #0]
    aa88:	2b35      	cmp	r3, #53	; 0x35
    aa8a:	d9e5      	bls.n	aa58 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    aa8c:	4b15      	ldr	r3, [pc, #84]	; (aae4 <mmc_cmd8+0x120>)
    aa8e:	681b      	ldr	r3, [r3, #0]
    aa90:	68fa      	ldr	r2, [r7, #12]
    aa92:	0852      	lsrs	r2, r2, #1
    aa94:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    aa96:	e014      	b.n	aac2 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    aa98:	230c      	movs	r3, #12
    aa9a:	18fb      	adds	r3, r7, r3
    aa9c:	0018      	movs	r0, r3
    aa9e:	4b10      	ldr	r3, [pc, #64]	; (aae0 <mmc_cmd8+0x11c>)
    aaa0:	4798      	blx	r3
    aaa2:	0003      	movs	r3, r0
    aaa4:	001a      	movs	r2, r3
    aaa6:	2301      	movs	r3, #1
    aaa8:	4053      	eors	r3, r2
    aaaa:	b2db      	uxtb	r3, r3
    aaac:	2b00      	cmp	r3, #0
    aaae:	d001      	beq.n	aab4 <mmc_cmd8+0xf0>
			return false;
    aab0:	2300      	movs	r3, #0
    aab2:	e00c      	b.n	aace <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    aab4:	2316      	movs	r3, #22
    aab6:	18fb      	adds	r3, r7, r3
    aab8:	881a      	ldrh	r2, [r3, #0]
    aaba:	2316      	movs	r3, #22
    aabc:	18fb      	adds	r3, r7, r3
    aabe:	3201      	adds	r2, #1
    aac0:	801a      	strh	r2, [r3, #0]
    aac2:	2316      	movs	r3, #22
    aac4:	18fb      	adds	r3, r7, r3
    aac6:	881b      	ldrh	r3, [r3, #0]
    aac8:	2b7f      	cmp	r3, #127	; 0x7f
    aaca:	d9e5      	bls.n	aa98 <mmc_cmd8+0xd4>
		}
	}
	return true;
    aacc:	2301      	movs	r3, #1
}
    aace:	0018      	movs	r0, r3
    aad0:	46bd      	mov	sp, r7
    aad2:	b007      	add	sp, #28
    aad4:	bd90      	pop	{r4, r7, pc}
    aad6:	46c0      	nop			; (mov r8, r8)
    aad8:	00081108 	.word	0x00081108
    aadc:	0000c25d 	.word	0x0000c25d
    aae0:	0000c489 	.word	0x0000c489
    aae4:	20003cd0 	.word	0x20003cd0
    aae8:	0000a65d 	.word	0x0000a65d
    aaec:	00000fff 	.word	0x00000fff

0000aaf0 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    aaf0:	b590      	push	{r4, r7, lr}
    aaf2:	b083      	sub	sp, #12
    aaf4:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    aaf6:	4b15      	ldr	r3, [pc, #84]	; (ab4c <sd_mmc_cmd9_spi+0x5c>)
    aaf8:	681b      	ldr	r3, [r3, #0]
    aafa:	891b      	ldrh	r3, [r3, #8]
    aafc:	0419      	lsls	r1, r3, #16
    aafe:	4814      	ldr	r0, [pc, #80]	; (ab50 <sd_mmc_cmd9_spi+0x60>)
    ab00:	2301      	movs	r3, #1
    ab02:	9300      	str	r3, [sp, #0]
    ab04:	2301      	movs	r3, #1
    ab06:	2210      	movs	r2, #16
    ab08:	4c12      	ldr	r4, [pc, #72]	; (ab54 <sd_mmc_cmd9_spi+0x64>)
    ab0a:	47a0      	blx	r4
    ab0c:	0003      	movs	r3, r0
    ab0e:	001a      	movs	r2, r3
    ab10:	2301      	movs	r3, #1
    ab12:	4053      	eors	r3, r2
    ab14:	b2db      	uxtb	r3, r3
    ab16:	2b00      	cmp	r3, #0
    ab18:	d001      	beq.n	ab1e <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    ab1a:	2300      	movs	r3, #0
    ab1c:	e012      	b.n	ab44 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    ab1e:	4b0b      	ldr	r3, [pc, #44]	; (ab4c <sd_mmc_cmd9_spi+0x5c>)
    ab20:	681b      	ldr	r3, [r3, #0]
    ab22:	330e      	adds	r3, #14
    ab24:	2101      	movs	r1, #1
    ab26:	0018      	movs	r0, r3
    ab28:	4b0b      	ldr	r3, [pc, #44]	; (ab58 <sd_mmc_cmd9_spi+0x68>)
    ab2a:	4798      	blx	r3
    ab2c:	0003      	movs	r3, r0
    ab2e:	001a      	movs	r2, r3
    ab30:	2301      	movs	r3, #1
    ab32:	4053      	eors	r3, r2
    ab34:	b2db      	uxtb	r3, r3
    ab36:	2b00      	cmp	r3, #0
    ab38:	d001      	beq.n	ab3e <sd_mmc_cmd9_spi+0x4e>
		return false;
    ab3a:	2300      	movs	r3, #0
    ab3c:	e002      	b.n	ab44 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    ab3e:	4b07      	ldr	r3, [pc, #28]	; (ab5c <sd_mmc_cmd9_spi+0x6c>)
    ab40:	4798      	blx	r3
    ab42:	0003      	movs	r3, r0
}
    ab44:	0018      	movs	r0, r3
    ab46:	46bd      	mov	sp, r7
    ab48:	b001      	add	sp, #4
    ab4a:	bd90      	pop	{r4, r7, pc}
    ab4c:	20003cd0 	.word	0x20003cd0
    ab50:	00081109 	.word	0x00081109
    ab54:	0000c25d 	.word	0x0000c25d
    ab58:	0000c52d 	.word	0x0000c52d
    ab5c:	0000c5d1 	.word	0x0000c5d1

0000ab60 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    ab60:	b5b0      	push	{r4, r5, r7, lr}
    ab62:	b084      	sub	sp, #16
    ab64:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    ab66:	4b45      	ldr	r3, [pc, #276]	; (ac7c <mmc_decode_csd+0x11c>)
    ab68:	681b      	ldr	r3, [r3, #0]
    ab6a:	330e      	adds	r3, #14
    ab6c:	0018      	movs	r0, r3
    ab6e:	2304      	movs	r3, #4
    ab70:	227a      	movs	r2, #122	; 0x7a
    ab72:	2180      	movs	r1, #128	; 0x80
    ab74:	4c42      	ldr	r4, [pc, #264]	; (ac80 <mmc_decode_csd+0x120>)
    ab76:	47a0      	blx	r4
    ab78:	0003      	movs	r3, r0
    ab7a:	2b02      	cmp	r3, #2
    ab7c:	d011      	beq.n	aba2 <mmc_decode_csd+0x42>
    ab7e:	d802      	bhi.n	ab86 <mmc_decode_csd+0x26>
    ab80:	2b01      	cmp	r3, #1
    ab82:	d009      	beq.n	ab98 <mmc_decode_csd+0x38>
    ab84:	e003      	b.n	ab8e <mmc_decode_csd+0x2e>
    ab86:	2b03      	cmp	r3, #3
    ab88:	d010      	beq.n	abac <mmc_decode_csd+0x4c>
    ab8a:	2b04      	cmp	r3, #4
    ab8c:	d013      	beq.n	abb6 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    ab8e:	4b3b      	ldr	r3, [pc, #236]	; (ac7c <mmc_decode_csd+0x11c>)
    ab90:	681b      	ldr	r3, [r3, #0]
    ab92:	2212      	movs	r2, #18
    ab94:	731a      	strb	r2, [r3, #12]
		break;
    ab96:	e013      	b.n	abc0 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    ab98:	4b38      	ldr	r3, [pc, #224]	; (ac7c <mmc_decode_csd+0x11c>)
    ab9a:	681b      	ldr	r3, [r3, #0]
    ab9c:	2214      	movs	r2, #20
    ab9e:	731a      	strb	r2, [r3, #12]
		break;
    aba0:	e00e      	b.n	abc0 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    aba2:	4b36      	ldr	r3, [pc, #216]	; (ac7c <mmc_decode_csd+0x11c>)
    aba4:	681b      	ldr	r3, [r3, #0]
    aba6:	2222      	movs	r2, #34	; 0x22
    aba8:	731a      	strb	r2, [r3, #12]
		break;
    abaa:	e009      	b.n	abc0 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    abac:	4b33      	ldr	r3, [pc, #204]	; (ac7c <mmc_decode_csd+0x11c>)
    abae:	681b      	ldr	r3, [r3, #0]
    abb0:	2230      	movs	r2, #48	; 0x30
    abb2:	731a      	strb	r2, [r3, #12]
		break;
    abb4:	e004      	b.n	abc0 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    abb6:	4b31      	ldr	r3, [pc, #196]	; (ac7c <mmc_decode_csd+0x11c>)
    abb8:	681b      	ldr	r3, [r3, #0]
    abba:	2240      	movs	r2, #64	; 0x40
    abbc:	731a      	strb	r2, [r3, #12]
		break;
    abbe:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    abc0:	4b2e      	ldr	r3, [pc, #184]	; (ac7c <mmc_decode_csd+0x11c>)
    abc2:	681b      	ldr	r3, [r3, #0]
    abc4:	330e      	adds	r3, #14
    abc6:	0018      	movs	r0, r3
    abc8:	2308      	movs	r3, #8
    abca:	2260      	movs	r2, #96	; 0x60
    abcc:	2180      	movs	r1, #128	; 0x80
    abce:	4c2c      	ldr	r4, [pc, #176]	; (ac80 <mmc_decode_csd+0x120>)
    abd0:	47a0      	blx	r4
    abd2:	0003      	movs	r3, r0
    abd4:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    abd6:	68fb      	ldr	r3, [r7, #12]
    abd8:	2207      	movs	r2, #7
    abda:	401a      	ands	r2, r3
    abdc:	4b29      	ldr	r3, [pc, #164]	; (ac84 <mmc_decode_csd+0x124>)
    abde:	0092      	lsls	r2, r2, #2
    abe0:	58d3      	ldr	r3, [r2, r3]
    abe2:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    abe4:	68fb      	ldr	r3, [r7, #12]
    abe6:	08db      	lsrs	r3, r3, #3
    abe8:	220f      	movs	r2, #15
    abea:	401a      	ands	r2, r3
    abec:	4b26      	ldr	r3, [pc, #152]	; (ac88 <mmc_decode_csd+0x128>)
    abee:	0092      	lsls	r2, r2, #2
    abf0:	58d3      	ldr	r3, [r2, r3]
    abf2:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    abf4:	4b21      	ldr	r3, [pc, #132]	; (ac7c <mmc_decode_csd+0x11c>)
    abf6:	681b      	ldr	r3, [r3, #0]
    abf8:	68ba      	ldr	r2, [r7, #8]
    abfa:	6879      	ldr	r1, [r7, #4]
    abfc:	434a      	muls	r2, r1
    abfe:	21fa      	movs	r1, #250	; 0xfa
    ac00:	0089      	lsls	r1, r1, #2
    ac02:	434a      	muls	r2, r1
    ac04:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    ac06:	4b1d      	ldr	r3, [pc, #116]	; (ac7c <mmc_decode_csd+0x11c>)
    ac08:	681b      	ldr	r3, [r3, #0]
    ac0a:	330e      	adds	r3, #14
    ac0c:	0018      	movs	r0, r3
    ac0e:	230c      	movs	r3, #12
    ac10:	223e      	movs	r2, #62	; 0x3e
    ac12:	2180      	movs	r1, #128	; 0x80
    ac14:	4c1a      	ldr	r4, [pc, #104]	; (ac80 <mmc_decode_csd+0x120>)
    ac16:	47a0      	blx	r4
    ac18:	0002      	movs	r2, r0
    ac1a:	4b1c      	ldr	r3, [pc, #112]	; (ac8c <mmc_decode_csd+0x12c>)
    ac1c:	429a      	cmp	r2, r3
    ac1e:	d028      	beq.n	ac72 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    ac20:	4b16      	ldr	r3, [pc, #88]	; (ac7c <mmc_decode_csd+0x11c>)
    ac22:	681b      	ldr	r3, [r3, #0]
    ac24:	330e      	adds	r3, #14
    ac26:	0018      	movs	r0, r3
    ac28:	230c      	movs	r3, #12
    ac2a:	223e      	movs	r2, #62	; 0x3e
    ac2c:	2180      	movs	r1, #128	; 0x80
    ac2e:	4c14      	ldr	r4, [pc, #80]	; (ac80 <mmc_decode_csd+0x120>)
    ac30:	47a0      	blx	r4
    ac32:	0003      	movs	r3, r0
    ac34:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    ac36:	4b11      	ldr	r3, [pc, #68]	; (ac7c <mmc_decode_csd+0x11c>)
    ac38:	681b      	ldr	r3, [r3, #0]
    ac3a:	330e      	adds	r3, #14
    ac3c:	0018      	movs	r0, r3
    ac3e:	2303      	movs	r3, #3
    ac40:	222f      	movs	r2, #47	; 0x2f
    ac42:	2180      	movs	r1, #128	; 0x80
    ac44:	4d0e      	ldr	r5, [pc, #56]	; (ac80 <mmc_decode_csd+0x120>)
    ac46:	47a8      	blx	r5
    ac48:	0003      	movs	r3, r0
    ac4a:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    ac4c:	409c      	lsls	r4, r3
    ac4e:	0023      	movs	r3, r4
    ac50:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    ac52:	4b0a      	ldr	r3, [pc, #40]	; (ac7c <mmc_decode_csd+0x11c>)
    ac54:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    ac56:	4b09      	ldr	r3, [pc, #36]	; (ac7c <mmc_decode_csd+0x11c>)
    ac58:	681b      	ldr	r3, [r3, #0]
    ac5a:	330e      	adds	r3, #14
    ac5c:	0018      	movs	r0, r3
    ac5e:	2304      	movs	r3, #4
    ac60:	2250      	movs	r2, #80	; 0x50
    ac62:	2180      	movs	r1, #128	; 0x80
    ac64:	4d06      	ldr	r5, [pc, #24]	; (ac80 <mmc_decode_csd+0x120>)
    ac66:	47a8      	blx	r5
    ac68:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    ac6a:	683b      	ldr	r3, [r7, #0]
    ac6c:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    ac6e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    ac70:	6063      	str	r3, [r4, #4]
	}
}
    ac72:	46c0      	nop			; (mov r8, r8)
    ac74:	46bd      	mov	sp, r7
    ac76:	b004      	add	sp, #16
    ac78:	bdb0      	pop	{r4, r5, r7, pc}
    ac7a:	46c0      	nop			; (mov r8, r8)
    ac7c:	20003cd0 	.word	0x20003cd0
    ac80:	0000a65d 	.word	0x0000a65d
    ac84:	000244f8 	.word	0x000244f8
    ac88:	00024554 	.word	0x00024554
    ac8c:	00000fff 	.word	0x00000fff

0000ac90 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    ac90:	b5b0      	push	{r4, r5, r7, lr}
    ac92:	b084      	sub	sp, #16
    ac94:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    ac96:	4b35      	ldr	r3, [pc, #212]	; (ad6c <sd_decode_csd+0xdc>)
    ac98:	681b      	ldr	r3, [r3, #0]
    ac9a:	330e      	adds	r3, #14
    ac9c:	0018      	movs	r0, r3
    ac9e:	2308      	movs	r3, #8
    aca0:	2260      	movs	r2, #96	; 0x60
    aca2:	2180      	movs	r1, #128	; 0x80
    aca4:	4c32      	ldr	r4, [pc, #200]	; (ad70 <sd_decode_csd+0xe0>)
    aca6:	47a0      	blx	r4
    aca8:	0003      	movs	r3, r0
    acaa:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    acac:	68fb      	ldr	r3, [r7, #12]
    acae:	2207      	movs	r2, #7
    acb0:	401a      	ands	r2, r3
    acb2:	4b30      	ldr	r3, [pc, #192]	; (ad74 <sd_decode_csd+0xe4>)
    acb4:	0092      	lsls	r2, r2, #2
    acb6:	58d3      	ldr	r3, [r2, r3]
    acb8:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    acba:	68fb      	ldr	r3, [r7, #12]
    acbc:	08db      	lsrs	r3, r3, #3
    acbe:	220f      	movs	r2, #15
    acc0:	401a      	ands	r2, r3
    acc2:	4b2d      	ldr	r3, [pc, #180]	; (ad78 <sd_decode_csd+0xe8>)
    acc4:	0092      	lsls	r2, r2, #2
    acc6:	58d3      	ldr	r3, [r2, r3]
    acc8:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    acca:	4b28      	ldr	r3, [pc, #160]	; (ad6c <sd_decode_csd+0xdc>)
    accc:	681b      	ldr	r3, [r3, #0]
    acce:	68ba      	ldr	r2, [r7, #8]
    acd0:	6879      	ldr	r1, [r7, #4]
    acd2:	434a      	muls	r2, r1
    acd4:	21fa      	movs	r1, #250	; 0xfa
    acd6:	0089      	lsls	r1, r1, #2
    acd8:	434a      	muls	r2, r1
    acda:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    acdc:	4b23      	ldr	r3, [pc, #140]	; (ad6c <sd_decode_csd+0xdc>)
    acde:	681b      	ldr	r3, [r3, #0]
    ace0:	330e      	adds	r3, #14
    ace2:	0018      	movs	r0, r3
    ace4:	2302      	movs	r3, #2
    ace6:	227e      	movs	r2, #126	; 0x7e
    ace8:	2180      	movs	r1, #128	; 0x80
    acea:	4c21      	ldr	r4, [pc, #132]	; (ad70 <sd_decode_csd+0xe0>)
    acec:	47a0      	blx	r4
    acee:	1e03      	subs	r3, r0, #0
    acf0:	d00f      	beq.n	ad12 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    acf2:	4b1e      	ldr	r3, [pc, #120]	; (ad6c <sd_decode_csd+0xdc>)
    acf4:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    acf6:	4b1d      	ldr	r3, [pc, #116]	; (ad6c <sd_decode_csd+0xdc>)
    acf8:	681b      	ldr	r3, [r3, #0]
    acfa:	330e      	adds	r3, #14
    acfc:	0018      	movs	r0, r3
    acfe:	2316      	movs	r3, #22
    ad00:	2230      	movs	r2, #48	; 0x30
    ad02:	2180      	movs	r1, #128	; 0x80
    ad04:	4d1a      	ldr	r5, [pc, #104]	; (ad70 <sd_decode_csd+0xe0>)
    ad06:	47a8      	blx	r5
    ad08:	0003      	movs	r3, r0
				* 512;
    ad0a:	3301      	adds	r3, #1
    ad0c:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    ad0e:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    ad10:	e028      	b.n	ad64 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    ad12:	4b16      	ldr	r3, [pc, #88]	; (ad6c <sd_decode_csd+0xdc>)
    ad14:	681b      	ldr	r3, [r3, #0]
    ad16:	330e      	adds	r3, #14
    ad18:	0018      	movs	r0, r3
    ad1a:	230c      	movs	r3, #12
    ad1c:	223e      	movs	r2, #62	; 0x3e
    ad1e:	2180      	movs	r1, #128	; 0x80
    ad20:	4c13      	ldr	r4, [pc, #76]	; (ad70 <sd_decode_csd+0xe0>)
    ad22:	47a0      	blx	r4
    ad24:	0003      	movs	r3, r0
    ad26:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    ad28:	4b10      	ldr	r3, [pc, #64]	; (ad6c <sd_decode_csd+0xdc>)
    ad2a:	681b      	ldr	r3, [r3, #0]
    ad2c:	330e      	adds	r3, #14
    ad2e:	0018      	movs	r0, r3
    ad30:	2303      	movs	r3, #3
    ad32:	222f      	movs	r2, #47	; 0x2f
    ad34:	2180      	movs	r1, #128	; 0x80
    ad36:	4d0e      	ldr	r5, [pc, #56]	; (ad70 <sd_decode_csd+0xe0>)
    ad38:	47a8      	blx	r5
    ad3a:	0003      	movs	r3, r0
    ad3c:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    ad3e:	409c      	lsls	r4, r3
    ad40:	0023      	movs	r3, r4
    ad42:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    ad44:	4b09      	ldr	r3, [pc, #36]	; (ad6c <sd_decode_csd+0xdc>)
    ad46:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    ad48:	4b08      	ldr	r3, [pc, #32]	; (ad6c <sd_decode_csd+0xdc>)
    ad4a:	681b      	ldr	r3, [r3, #0]
    ad4c:	330e      	adds	r3, #14
    ad4e:	0018      	movs	r0, r3
    ad50:	2304      	movs	r3, #4
    ad52:	2250      	movs	r2, #80	; 0x50
    ad54:	2180      	movs	r1, #128	; 0x80
    ad56:	4d06      	ldr	r5, [pc, #24]	; (ad70 <sd_decode_csd+0xe0>)
    ad58:	47a8      	blx	r5
    ad5a:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    ad5c:	683b      	ldr	r3, [r7, #0]
    ad5e:	4093      	lsls	r3, r2
				/ 1024;
    ad60:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    ad62:	6063      	str	r3, [r4, #4]
}
    ad64:	46c0      	nop			; (mov r8, r8)
    ad66:	46bd      	mov	sp, r7
    ad68:	b004      	add	sp, #16
    ad6a:	bdb0      	pop	{r4, r5, r7, pc}
    ad6c:	20003cd0 	.word	0x20003cd0
    ad70:	0000a65d 	.word	0x0000a65d
    ad74:	000244f8 	.word	0x000244f8
    ad78:	00024514 	.word	0x00024514

0000ad7c <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    ad7c:	b580      	push	{r7, lr}
    ad7e:	b082      	sub	sp, #8
    ad80:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    ad82:	4b11      	ldr	r3, [pc, #68]	; (adc8 <sd_mmc_cmd13+0x4c>)
    ad84:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    ad86:	4b11      	ldr	r3, [pc, #68]	; (adcc <sd_mmc_cmd13+0x50>)
    ad88:	2100      	movs	r1, #0
    ad8a:	0018      	movs	r0, r3
    ad8c:	4b10      	ldr	r3, [pc, #64]	; (add0 <sd_mmc_cmd13+0x54>)
    ad8e:	4798      	blx	r3
    ad90:	0003      	movs	r3, r0
    ad92:	001a      	movs	r2, r3
    ad94:	2301      	movs	r3, #1
    ad96:	4053      	eors	r3, r2
    ad98:	b2db      	uxtb	r3, r3
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	d001      	beq.n	ada2 <sd_mmc_cmd13+0x26>
				return false;
    ad9e:	2300      	movs	r3, #0
    ada0:	e00e      	b.n	adc0 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    ada2:	4b0c      	ldr	r3, [pc, #48]	; (add4 <sd_mmc_cmd13+0x58>)
    ada4:	4798      	blx	r3
    ada6:	0002      	movs	r2, r0
    ada8:	23ff      	movs	r3, #255	; 0xff
    adaa:	4013      	ands	r3, r2
    adac:	d006      	beq.n	adbc <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    adae:	687b      	ldr	r3, [r7, #4]
    adb0:	1e5a      	subs	r2, r3, #1
    adb2:	607a      	str	r2, [r7, #4]
    adb4:	2b00      	cmp	r3, #0
    adb6:	d1e6      	bne.n	ad86 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    adb8:	2300      	movs	r3, #0
    adba:	e001      	b.n	adc0 <sd_mmc_cmd13+0x44>
				break;
    adbc:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    adbe:	2301      	movs	r3, #1
}
    adc0:	0018      	movs	r0, r3
    adc2:	46bd      	mov	sp, r7
    adc4:	b002      	add	sp, #8
    adc6:	bd80      	pop	{r7, pc}
    adc8:	00030d40 	.word	0x00030d40
    adcc:	00001b0d 	.word	0x00001b0d
    add0:	0000c235 	.word	0x0000c235
    add4:	0000c475 	.word	0x0000c475

0000add8 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    add8:	b590      	push	{r4, r7, lr}
    adda:	b085      	sub	sp, #20
    addc:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    adde:	4b38      	ldr	r3, [pc, #224]	; (aec0 <sd_acmd51+0xe8>)
    ade0:	681b      	ldr	r3, [r3, #0]
    ade2:	891b      	ldrh	r3, [r3, #8]
    ade4:	041b      	lsls	r3, r3, #16
    ade6:	4a37      	ldr	r2, [pc, #220]	; (aec4 <sd_acmd51+0xec>)
    ade8:	0019      	movs	r1, r3
    adea:	0010      	movs	r0, r2
    adec:	4b36      	ldr	r3, [pc, #216]	; (aec8 <sd_acmd51+0xf0>)
    adee:	4798      	blx	r3
    adf0:	0003      	movs	r3, r0
    adf2:	001a      	movs	r2, r3
    adf4:	2301      	movs	r3, #1
    adf6:	4053      	eors	r3, r2
    adf8:	b2db      	uxtb	r3, r3
    adfa:	2b00      	cmp	r3, #0
    adfc:	d001      	beq.n	ae02 <sd_acmd51+0x2a>
		return false;
    adfe:	2300      	movs	r3, #0
    ae00:	e059      	b.n	aeb6 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    ae02:	4832      	ldr	r0, [pc, #200]	; (aecc <sd_acmd51+0xf4>)
    ae04:	2301      	movs	r3, #1
    ae06:	9300      	str	r3, [sp, #0]
    ae08:	2301      	movs	r3, #1
    ae0a:	2208      	movs	r2, #8
    ae0c:	2100      	movs	r1, #0
    ae0e:	4c30      	ldr	r4, [pc, #192]	; (aed0 <sd_acmd51+0xf8>)
    ae10:	47a0      	blx	r4
    ae12:	0003      	movs	r3, r0
    ae14:	001a      	movs	r2, r3
    ae16:	2301      	movs	r3, #1
    ae18:	4053      	eors	r3, r2
    ae1a:	b2db      	uxtb	r3, r3
    ae1c:	2b00      	cmp	r3, #0
    ae1e:	d001      	beq.n	ae24 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    ae20:	2300      	movs	r3, #0
    ae22:	e048      	b.n	aeb6 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    ae24:	003b      	movs	r3, r7
    ae26:	2101      	movs	r1, #1
    ae28:	0018      	movs	r0, r3
    ae2a:	4b2a      	ldr	r3, [pc, #168]	; (aed4 <sd_acmd51+0xfc>)
    ae2c:	4798      	blx	r3
    ae2e:	0003      	movs	r3, r0
    ae30:	001a      	movs	r2, r3
    ae32:	2301      	movs	r3, #1
    ae34:	4053      	eors	r3, r2
    ae36:	b2db      	uxtb	r3, r3
    ae38:	2b00      	cmp	r3, #0
    ae3a:	d001      	beq.n	ae40 <sd_acmd51+0x68>
		return false;
    ae3c:	2300      	movs	r3, #0
    ae3e:	e03a      	b.n	aeb6 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    ae40:	4b25      	ldr	r3, [pc, #148]	; (aed8 <sd_acmd51+0x100>)
    ae42:	4798      	blx	r3
    ae44:	0003      	movs	r3, r0
    ae46:	001a      	movs	r2, r3
    ae48:	2301      	movs	r3, #1
    ae4a:	4053      	eors	r3, r2
    ae4c:	b2db      	uxtb	r3, r3
    ae4e:	2b00      	cmp	r3, #0
    ae50:	d001      	beq.n	ae56 <sd_acmd51+0x7e>
		return false;
    ae52:	2300      	movs	r3, #0
    ae54:	e02f      	b.n	aeb6 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    ae56:	0038      	movs	r0, r7
    ae58:	2304      	movs	r3, #4
    ae5a:	2238      	movs	r2, #56	; 0x38
    ae5c:	2140      	movs	r1, #64	; 0x40
    ae5e:	4c1f      	ldr	r4, [pc, #124]	; (aedc <sd_acmd51+0x104>)
    ae60:	47a0      	blx	r4
    ae62:	0003      	movs	r3, r0
    ae64:	2b01      	cmp	r3, #1
    ae66:	d008      	beq.n	ae7a <sd_acmd51+0xa2>
    ae68:	d302      	bcc.n	ae70 <sd_acmd51+0x98>
    ae6a:	2b02      	cmp	r3, #2
    ae6c:	d00a      	beq.n	ae84 <sd_acmd51+0xac>
    ae6e:	e01c      	b.n	aeaa <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    ae70:	4b13      	ldr	r3, [pc, #76]	; (aec0 <sd_acmd51+0xe8>)
    ae72:	681b      	ldr	r3, [r3, #0]
    ae74:	2210      	movs	r2, #16
    ae76:	731a      	strb	r2, [r3, #12]
		break;
    ae78:	e01c      	b.n	aeb4 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    ae7a:	4b11      	ldr	r3, [pc, #68]	; (aec0 <sd_acmd51+0xe8>)
    ae7c:	681b      	ldr	r3, [r3, #0]
    ae7e:	221a      	movs	r2, #26
    ae80:	731a      	strb	r2, [r3, #12]
		break;
    ae82:	e017      	b.n	aeb4 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    ae84:	0038      	movs	r0, r7
    ae86:	2301      	movs	r3, #1
    ae88:	222f      	movs	r2, #47	; 0x2f
    ae8a:	2140      	movs	r1, #64	; 0x40
    ae8c:	4c13      	ldr	r4, [pc, #76]	; (aedc <sd_acmd51+0x104>)
    ae8e:	47a0      	blx	r4
    ae90:	0003      	movs	r3, r0
    ae92:	2b01      	cmp	r3, #1
    ae94:	d104      	bne.n	aea0 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    ae96:	4b0a      	ldr	r3, [pc, #40]	; (aec0 <sd_acmd51+0xe8>)
    ae98:	681b      	ldr	r3, [r3, #0]
    ae9a:	2230      	movs	r2, #48	; 0x30
    ae9c:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    ae9e:	e009      	b.n	aeb4 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    aea0:	4b07      	ldr	r3, [pc, #28]	; (aec0 <sd_acmd51+0xe8>)
    aea2:	681b      	ldr	r3, [r3, #0]
    aea4:	2220      	movs	r2, #32
    aea6:	731a      	strb	r2, [r3, #12]
		break;
    aea8:	e004      	b.n	aeb4 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    aeaa:	4b05      	ldr	r3, [pc, #20]	; (aec0 <sd_acmd51+0xe8>)
    aeac:	681b      	ldr	r3, [r3, #0]
    aeae:	2210      	movs	r2, #16
    aeb0:	731a      	strb	r2, [r3, #12]
		break;
    aeb2:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    aeb4:	2301      	movs	r3, #1
}
    aeb6:	0018      	movs	r0, r3
    aeb8:	46bd      	mov	sp, r7
    aeba:	b003      	add	sp, #12
    aebc:	bd90      	pop	{r4, r7, pc}
    aebe:	46c0      	nop			; (mov r8, r8)
    aec0:	20003cd0 	.word	0x20003cd0
    aec4:	00001137 	.word	0x00001137
    aec8:	0000c235 	.word	0x0000c235
    aecc:	00081133 	.word	0x00081133
    aed0:	0000c25d 	.word	0x0000c25d
    aed4:	0000c52d 	.word	0x0000c52d
    aed8:	0000c5d1 	.word	0x0000c5d1
    aedc:	0000a65d 	.word	0x0000a65d

0000aee0 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    aee0:	b580      	push	{r7, lr}
    aee2:	b082      	sub	sp, #8
    aee4:	af00      	add	r7, sp, #0
    aee6:	0002      	movs	r2, r0
    aee8:	1dfb      	adds	r3, r7, #7
    aeea:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    aeec:	1dfb      	adds	r3, r7, #7
    aeee:	781b      	ldrb	r3, [r3, #0]
    aef0:	2b00      	cmp	r3, #0
    aef2:	d001      	beq.n	aef8 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    aef4:	2304      	movs	r3, #4
    aef6:	e047      	b.n	af88 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    aef8:	1dfb      	adds	r3, r7, #7
    aefa:	781b      	ldrb	r3, [r3, #0]
    aefc:	4a24      	ldr	r2, [pc, #144]	; (af90 <sd_mmc_select_slot+0xb0>)
    aefe:	015b      	lsls	r3, r3, #5
    af00:	18d3      	adds	r3, r2, r3
    af02:	330a      	adds	r3, #10
    af04:	781b      	ldrb	r3, [r3, #0]
    af06:	2b04      	cmp	r3, #4
    af08:	d008      	beq.n	af1c <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    af0a:	1dfb      	adds	r3, r7, #7
    af0c:	781b      	ldrb	r3, [r3, #0]
    af0e:	4a20      	ldr	r2, [pc, #128]	; (af90 <sd_mmc_select_slot+0xb0>)
    af10:	015b      	lsls	r3, r3, #5
    af12:	18d3      	adds	r3, r2, r3
    af14:	330a      	adds	r3, #10
    af16:	781b      	ldrb	r3, [r3, #0]
    af18:	2b03      	cmp	r3, #3
    af1a:	d11d      	bne.n	af58 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    af1c:	1dfb      	adds	r3, r7, #7
    af1e:	781b      	ldrb	r3, [r3, #0]
    af20:	4a1b      	ldr	r2, [pc, #108]	; (af90 <sd_mmc_select_slot+0xb0>)
    af22:	015b      	lsls	r3, r3, #5
    af24:	18d3      	adds	r3, r2, r3
    af26:	330a      	adds	r3, #10
    af28:	2202      	movs	r2, #2
    af2a:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    af2c:	1dfb      	adds	r3, r7, #7
    af2e:	781a      	ldrb	r2, [r3, #0]
    af30:	4b17      	ldr	r3, [pc, #92]	; (af90 <sd_mmc_select_slot+0xb0>)
    af32:	0152      	lsls	r2, r2, #5
    af34:	4917      	ldr	r1, [pc, #92]	; (af94 <sd_mmc_select_slot+0xb4>)
    af36:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    af38:	1dfb      	adds	r3, r7, #7
    af3a:	781b      	ldrb	r3, [r3, #0]
    af3c:	4a14      	ldr	r2, [pc, #80]	; (af90 <sd_mmc_select_slot+0xb0>)
    af3e:	015b      	lsls	r3, r3, #5
    af40:	18d3      	adds	r3, r2, r3
    af42:	330d      	adds	r3, #13
    af44:	2201      	movs	r2, #1
    af46:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    af48:	1dfb      	adds	r3, r7, #7
    af4a:	781b      	ldrb	r3, [r3, #0]
    af4c:	4a10      	ldr	r2, [pc, #64]	; (af90 <sd_mmc_select_slot+0xb0>)
    af4e:	015b      	lsls	r3, r3, #5
    af50:	18d3      	adds	r3, r2, r3
    af52:	331e      	adds	r3, #30
    af54:	2200      	movs	r2, #0
    af56:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    af58:	4b0f      	ldr	r3, [pc, #60]	; (af98 <sd_mmc_select_slot+0xb8>)
    af5a:	1dfa      	adds	r2, r7, #7
    af5c:	7812      	ldrb	r2, [r2, #0]
    af5e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    af60:	1dfb      	adds	r3, r7, #7
    af62:	781b      	ldrb	r3, [r3, #0]
    af64:	015a      	lsls	r2, r3, #5
    af66:	4b0a      	ldr	r3, [pc, #40]	; (af90 <sd_mmc_select_slot+0xb0>)
    af68:	18d2      	adds	r2, r2, r3
    af6a:	4b0c      	ldr	r3, [pc, #48]	; (af9c <sd_mmc_select_slot+0xbc>)
    af6c:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    af6e:	4b0c      	ldr	r3, [pc, #48]	; (afa0 <sd_mmc_select_slot+0xc0>)
    af70:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    af72:	1dfb      	adds	r3, r7, #7
    af74:	781b      	ldrb	r3, [r3, #0]
    af76:	4a06      	ldr	r2, [pc, #24]	; (af90 <sd_mmc_select_slot+0xb0>)
    af78:	015b      	lsls	r3, r3, #5
    af7a:	18d3      	adds	r3, r2, r3
    af7c:	330a      	adds	r3, #10
    af7e:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    af80:	3b02      	subs	r3, #2
    af82:	425a      	negs	r2, r3
    af84:	4153      	adcs	r3, r2
    af86:	b2db      	uxtb	r3, r3
}
    af88:	0018      	movs	r0, r3
    af8a:	46bd      	mov	sp, r7
    af8c:	b002      	add	sp, #8
    af8e:	bd80      	pop	{r7, pc}
    af90:	20003cac 	.word	0x20003cac
    af94:	00061a80 	.word	0x00061a80
    af98:	20003ccc 	.word	0x20003ccc
    af9c:	20003cd0 	.word	0x20003cd0
    afa0:	0000afa5 	.word	0x0000afa5

0000afa4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    afa4:	b5b0      	push	{r4, r5, r7, lr}
    afa6:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    afa8:	4b09      	ldr	r3, [pc, #36]	; (afd0 <sd_mmc_configure_slot+0x2c>)
    afaa:	7818      	ldrb	r0, [r3, #0]
    afac:	4b09      	ldr	r3, [pc, #36]	; (afd4 <sd_mmc_configure_slot+0x30>)
    afae:	681b      	ldr	r3, [r3, #0]
    afb0:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    afb2:	4b08      	ldr	r3, [pc, #32]	; (afd4 <sd_mmc_configure_slot+0x30>)
    afb4:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    afb6:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    afb8:	4b06      	ldr	r3, [pc, #24]	; (afd4 <sd_mmc_configure_slot+0x30>)
    afba:	681b      	ldr	r3, [r3, #0]
    afbc:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    afbe:	1e5c      	subs	r4, r3, #1
    afc0:	41a3      	sbcs	r3, r4
    afc2:	b2db      	uxtb	r3, r3
    afc4:	4c04      	ldr	r4, [pc, #16]	; (afd8 <sd_mmc_configure_slot+0x34>)
    afc6:	47a0      	blx	r4
}
    afc8:	46c0      	nop			; (mov r8, r8)
    afca:	46bd      	mov	sp, r7
    afcc:	bdb0      	pop	{r4, r5, r7, pc}
    afce:	46c0      	nop			; (mov r8, r8)
    afd0:	20003ccc 	.word	0x20003ccc
    afd4:	20003cd0 	.word	0x20003cd0
    afd8:	0000c11d 	.word	0x0000c11d

0000afdc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    afdc:	b580      	push	{r7, lr}
    afde:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    afe0:	4b05      	ldr	r3, [pc, #20]	; (aff8 <sd_mmc_deselect_slot+0x1c>)
    afe2:	781b      	ldrb	r3, [r3, #0]
    afe4:	2b00      	cmp	r3, #0
    afe6:	d104      	bne.n	aff2 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    afe8:	4b03      	ldr	r3, [pc, #12]	; (aff8 <sd_mmc_deselect_slot+0x1c>)
    afea:	781b      	ldrb	r3, [r3, #0]
    afec:	0018      	movs	r0, r3
    afee:	4b03      	ldr	r3, [pc, #12]	; (affc <sd_mmc_deselect_slot+0x20>)
    aff0:	4798      	blx	r3
	}
}
    aff2:	46c0      	nop			; (mov r8, r8)
    aff4:	46bd      	mov	sp, r7
    aff6:	bd80      	pop	{r7, pc}
    aff8:	20003ccc 	.word	0x20003ccc
    affc:	0000c1a5 	.word	0x0000c1a5

0000b000 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    b000:	b580      	push	{r7, lr}
    b002:	b082      	sub	sp, #8
    b004:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    b006:	1dfb      	adds	r3, r7, #7
    b008:	2200      	movs	r2, #0
    b00a:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    b00c:	4b59      	ldr	r3, [pc, #356]	; (b174 <sd_mmc_spi_card_init+0x174>)
    b00e:	681b      	ldr	r3, [r3, #0]
    b010:	2201      	movs	r2, #1
    b012:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    b014:	4b57      	ldr	r3, [pc, #348]	; (b174 <sd_mmc_spi_card_init+0x174>)
    b016:	681b      	ldr	r3, [r3, #0]
    b018:	2200      	movs	r2, #0
    b01a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    b01c:	4b55      	ldr	r3, [pc, #340]	; (b174 <sd_mmc_spi_card_init+0x174>)
    b01e:	681b      	ldr	r3, [r3, #0]
    b020:	2200      	movs	r2, #0
    b022:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    b024:	4b54      	ldr	r3, [pc, #336]	; (b178 <sd_mmc_spi_card_init+0x178>)
    b026:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    b028:	2388      	movs	r3, #136	; 0x88
    b02a:	015b      	lsls	r3, r3, #5
    b02c:	2100      	movs	r1, #0
    b02e:	0018      	movs	r0, r3
    b030:	4b52      	ldr	r3, [pc, #328]	; (b17c <sd_mmc_spi_card_init+0x17c>)
    b032:	4798      	blx	r3
    b034:	0003      	movs	r3, r0
    b036:	001a      	movs	r2, r3
    b038:	2301      	movs	r3, #1
    b03a:	4053      	eors	r3, r2
    b03c:	b2db      	uxtb	r3, r3
    b03e:	2b00      	cmp	r3, #0
    b040:	d001      	beq.n	b046 <sd_mmc_spi_card_init+0x46>
		return false;
    b042:	2300      	movs	r3, #0
    b044:	e092      	b.n	b16c <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    b046:	1dfb      	adds	r3, r7, #7
    b048:	0018      	movs	r0, r3
    b04a:	4b4d      	ldr	r3, [pc, #308]	; (b180 <sd_mmc_spi_card_init+0x180>)
    b04c:	4798      	blx	r3
    b04e:	0003      	movs	r3, r0
    b050:	001a      	movs	r2, r3
    b052:	2301      	movs	r3, #1
    b054:	4053      	eors	r3, r2
    b056:	b2db      	uxtb	r3, r3
    b058:	2b00      	cmp	r3, #0
    b05a:	d001      	beq.n	b060 <sd_mmc_spi_card_init+0x60>
		return false;
    b05c:	2300      	movs	r3, #0
    b05e:	e085      	b.n	b16c <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    b060:	4b48      	ldr	r3, [pc, #288]	; (b184 <sd_mmc_spi_card_init+0x184>)
    b062:	4798      	blx	r3
    b064:	0003      	movs	r3, r0
    b066:	001a      	movs	r2, r3
    b068:	2301      	movs	r3, #1
    b06a:	4053      	eors	r3, r2
    b06c:	b2db      	uxtb	r3, r3
    b06e:	2b00      	cmp	r3, #0
    b070:	d001      	beq.n	b076 <sd_mmc_spi_card_init+0x76>
		return false;
    b072:	2300      	movs	r3, #0
    b074:	e07a      	b.n	b16c <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b076:	4b3f      	ldr	r3, [pc, #252]	; (b174 <sd_mmc_spi_card_init+0x174>)
    b078:	681b      	ldr	r3, [r3, #0]
    b07a:	7adb      	ldrb	r3, [r3, #11]
    b07c:	001a      	movs	r2, r3
    b07e:	2301      	movs	r3, #1
    b080:	4013      	ands	r3, r2
    b082:	d021      	beq.n	b0c8 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    b084:	1dfb      	adds	r3, r7, #7
    b086:	781b      	ldrb	r3, [r3, #0]
    b088:	0018      	movs	r0, r3
    b08a:	4b3f      	ldr	r3, [pc, #252]	; (b188 <sd_mmc_spi_card_init+0x188>)
    b08c:	4798      	blx	r3
    b08e:	0003      	movs	r3, r0
    b090:	001a      	movs	r2, r3
    b092:	2301      	movs	r3, #1
    b094:	4053      	eors	r3, r2
    b096:	b2db      	uxtb	r3, r3
    b098:	2b00      	cmp	r3, #0
    b09a:	d007      	beq.n	b0ac <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    b09c:	4b35      	ldr	r3, [pc, #212]	; (b174 <sd_mmc_spi_card_init+0x174>)
    b09e:	681b      	ldr	r3, [r3, #0]
    b0a0:	2202      	movs	r2, #2
    b0a2:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    b0a4:	4b39      	ldr	r3, [pc, #228]	; (b18c <sd_mmc_spi_card_init+0x18c>)
    b0a6:	4798      	blx	r3
    b0a8:	0003      	movs	r3, r0
    b0aa:	e05f      	b.n	b16c <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    b0ac:	4b38      	ldr	r3, [pc, #224]	; (b190 <sd_mmc_spi_card_init+0x190>)
    b0ae:	2100      	movs	r1, #0
    b0b0:	0018      	movs	r0, r3
    b0b2:	4b32      	ldr	r3, [pc, #200]	; (b17c <sd_mmc_spi_card_init+0x17c>)
    b0b4:	4798      	blx	r3
    b0b6:	0003      	movs	r3, r0
    b0b8:	001a      	movs	r2, r3
    b0ba:	2301      	movs	r3, #1
    b0bc:	4053      	eors	r3, r2
    b0be:	b2db      	uxtb	r3, r3
    b0c0:	2b00      	cmp	r3, #0
    b0c2:	d001      	beq.n	b0c8 <sd_mmc_spi_card_init+0xc8>
			return false;
    b0c4:	2300      	movs	r3, #0
    b0c6:	e051      	b.n	b16c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b0c8:	4b2a      	ldr	r3, [pc, #168]	; (b174 <sd_mmc_spi_card_init+0x174>)
    b0ca:	681b      	ldr	r3, [r3, #0]
    b0cc:	7adb      	ldrb	r3, [r3, #11]
    b0ce:	001a      	movs	r2, r3
    b0d0:	2301      	movs	r3, #1
    b0d2:	4013      	ands	r3, r2
    b0d4:	d017      	beq.n	b106 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    b0d6:	4b2f      	ldr	r3, [pc, #188]	; (b194 <sd_mmc_spi_card_init+0x194>)
    b0d8:	4798      	blx	r3
    b0da:	0003      	movs	r3, r0
    b0dc:	001a      	movs	r2, r3
    b0de:	2301      	movs	r3, #1
    b0e0:	4053      	eors	r3, r2
    b0e2:	b2db      	uxtb	r3, r3
    b0e4:	2b00      	cmp	r3, #0
    b0e6:	d001      	beq.n	b0ec <sd_mmc_spi_card_init+0xec>
			return false;
    b0e8:	2300      	movs	r3, #0
    b0ea:	e03f      	b.n	b16c <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    b0ec:	4b2a      	ldr	r3, [pc, #168]	; (b198 <sd_mmc_spi_card_init+0x198>)
    b0ee:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    b0f0:	4b2a      	ldr	r3, [pc, #168]	; (b19c <sd_mmc_spi_card_init+0x19c>)
    b0f2:	4798      	blx	r3
    b0f4:	0003      	movs	r3, r0
    b0f6:	001a      	movs	r2, r3
    b0f8:	2301      	movs	r3, #1
    b0fa:	4053      	eors	r3, r2
    b0fc:	b2db      	uxtb	r3, r3
    b0fe:	2b00      	cmp	r3, #0
    b100:	d001      	beq.n	b106 <sd_mmc_spi_card_init+0x106>
			return false;
    b102:	2300      	movs	r3, #0
    b104:	e032      	b.n	b16c <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    b106:	4b1b      	ldr	r3, [pc, #108]	; (b174 <sd_mmc_spi_card_init+0x174>)
    b108:	681b      	ldr	r3, [r3, #0]
    b10a:	7adb      	ldrb	r3, [r3, #11]
    b10c:	001a      	movs	r2, r3
    b10e:	2301      	movs	r3, #1
    b110:	4013      	ands	r3, r2
    b112:	d016      	beq.n	b142 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    b114:	4b17      	ldr	r3, [pc, #92]	; (b174 <sd_mmc_spi_card_init+0x174>)
    b116:	681b      	ldr	r3, [r3, #0]
    b118:	7adb      	ldrb	r3, [r3, #11]
    b11a:	001a      	movs	r2, r3
    b11c:	2308      	movs	r3, #8
    b11e:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    b120:	d10f      	bne.n	b142 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    b122:	2380      	movs	r3, #128	; 0x80
    b124:	009b      	lsls	r3, r3, #2
    b126:	4a1e      	ldr	r2, [pc, #120]	; (b1a0 <sd_mmc_spi_card_init+0x1a0>)
    b128:	0019      	movs	r1, r3
    b12a:	0010      	movs	r0, r2
    b12c:	4b13      	ldr	r3, [pc, #76]	; (b17c <sd_mmc_spi_card_init+0x17c>)
    b12e:	4798      	blx	r3
    b130:	0003      	movs	r3, r0
    b132:	001a      	movs	r2, r3
    b134:	2301      	movs	r3, #1
    b136:	4053      	eors	r3, r2
    b138:	b2db      	uxtb	r3, r3
    b13a:	2b00      	cmp	r3, #0
    b13c:	d001      	beq.n	b142 <sd_mmc_spi_card_init+0x142>
			return false;
    b13e:	2300      	movs	r3, #0
    b140:	e014      	b.n	b16c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b142:	4b0c      	ldr	r3, [pc, #48]	; (b174 <sd_mmc_spi_card_init+0x174>)
    b144:	681b      	ldr	r3, [r3, #0]
    b146:	7adb      	ldrb	r3, [r3, #11]
    b148:	001a      	movs	r2, r3
    b14a:	2301      	movs	r3, #1
    b14c:	4013      	ands	r3, r2
    b14e:	d00a      	beq.n	b166 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    b150:	4b14      	ldr	r3, [pc, #80]	; (b1a4 <sd_mmc_spi_card_init+0x1a4>)
    b152:	4798      	blx	r3
    b154:	0003      	movs	r3, r0
    b156:	001a      	movs	r2, r3
    b158:	2301      	movs	r3, #1
    b15a:	4053      	eors	r3, r2
    b15c:	b2db      	uxtb	r3, r3
    b15e:	2b00      	cmp	r3, #0
    b160:	d001      	beq.n	b166 <sd_mmc_spi_card_init+0x166>
			return false;
    b162:	2300      	movs	r3, #0
    b164:	e002      	b.n	b16c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    b166:	4b10      	ldr	r3, [pc, #64]	; (b1a8 <sd_mmc_spi_card_init+0x1a8>)
    b168:	4798      	blx	r3
	return true;
    b16a:	2301      	movs	r3, #1
}
    b16c:	0018      	movs	r0, r3
    b16e:	46bd      	mov	sp, r7
    b170:	b002      	add	sp, #8
    b172:	bd80      	pop	{r7, pc}
    b174:	20003cd0 	.word	0x20003cd0
    b178:	0000c1e9 	.word	0x0000c1e9
    b17c:	0000c235 	.word	0x0000c235
    b180:	0000a955 	.word	0x0000a955
    b184:	0000a949 	.word	0x0000a949
    b188:	0000a865 	.word	0x0000a865
    b18c:	0000b1ad 	.word	0x0000b1ad
    b190:	0000113b 	.word	0x0000113b
    b194:	0000aaf1 	.word	0x0000aaf1
    b198:	0000ac91 	.word	0x0000ac91
    b19c:	0000add9 	.word	0x0000add9
    b1a0:	00001110 	.word	0x00001110
    b1a4:	0000ad7d 	.word	0x0000ad7d
    b1a8:	0000afa5 	.word	0x0000afa5

0000b1ac <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    b1ac:	b580      	push	{r7, lr}
    b1ae:	b082      	sub	sp, #8
    b1b0:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    b1b2:	2388      	movs	r3, #136	; 0x88
    b1b4:	015b      	lsls	r3, r3, #5
    b1b6:	2100      	movs	r1, #0
    b1b8:	0018      	movs	r0, r3
    b1ba:	4b32      	ldr	r3, [pc, #200]	; (b284 <sd_mmc_spi_install_mmc+0xd8>)
    b1bc:	4798      	blx	r3
    b1be:	0003      	movs	r3, r0
    b1c0:	001a      	movs	r2, r3
    b1c2:	2301      	movs	r3, #1
    b1c4:	4053      	eors	r3, r2
    b1c6:	b2db      	uxtb	r3, r3
    b1c8:	2b00      	cmp	r3, #0
    b1ca:	d001      	beq.n	b1d0 <sd_mmc_spi_install_mmc+0x24>
		return false;
    b1cc:	2300      	movs	r3, #0
    b1ce:	e055      	b.n	b27c <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    b1d0:	4b2d      	ldr	r3, [pc, #180]	; (b288 <sd_mmc_spi_install_mmc+0xdc>)
    b1d2:	4798      	blx	r3
    b1d4:	0003      	movs	r3, r0
    b1d6:	001a      	movs	r2, r3
    b1d8:	2301      	movs	r3, #1
    b1da:	4053      	eors	r3, r2
    b1dc:	b2db      	uxtb	r3, r3
    b1de:	2b00      	cmp	r3, #0
    b1e0:	d001      	beq.n	b1e6 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    b1e2:	2300      	movs	r3, #0
    b1e4:	e04a      	b.n	b27c <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    b1e6:	4b29      	ldr	r3, [pc, #164]	; (b28c <sd_mmc_spi_install_mmc+0xe0>)
    b1e8:	2100      	movs	r1, #0
    b1ea:	0018      	movs	r0, r3
    b1ec:	4b25      	ldr	r3, [pc, #148]	; (b284 <sd_mmc_spi_install_mmc+0xd8>)
    b1ee:	4798      	blx	r3
    b1f0:	0003      	movs	r3, r0
    b1f2:	001a      	movs	r2, r3
    b1f4:	2301      	movs	r3, #1
    b1f6:	4053      	eors	r3, r2
    b1f8:	b2db      	uxtb	r3, r3
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	d001      	beq.n	b202 <sd_mmc_spi_install_mmc+0x56>
		return false;
    b1fe:	2300      	movs	r3, #0
    b200:	e03c      	b.n	b27c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    b202:	4b23      	ldr	r3, [pc, #140]	; (b290 <sd_mmc_spi_install_mmc+0xe4>)
    b204:	4798      	blx	r3
    b206:	0003      	movs	r3, r0
    b208:	001a      	movs	r2, r3
    b20a:	2301      	movs	r3, #1
    b20c:	4053      	eors	r3, r2
    b20e:	b2db      	uxtb	r3, r3
    b210:	2b00      	cmp	r3, #0
    b212:	d001      	beq.n	b218 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    b214:	2300      	movs	r3, #0
    b216:	e031      	b.n	b27c <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    b218:	4b1e      	ldr	r3, [pc, #120]	; (b294 <sd_mmc_spi_install_mmc+0xe8>)
    b21a:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    b21c:	4b1e      	ldr	r3, [pc, #120]	; (b298 <sd_mmc_spi_install_mmc+0xec>)
    b21e:	681b      	ldr	r3, [r3, #0]
    b220:	7b1b      	ldrb	r3, [r3, #12]
    b222:	2b3f      	cmp	r3, #63	; 0x3f
    b224:	d90c      	bls.n	b240 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    b226:	1dfb      	adds	r3, r7, #7
    b228:	0018      	movs	r0, r3
    b22a:	4b1c      	ldr	r3, [pc, #112]	; (b29c <sd_mmc_spi_install_mmc+0xf0>)
    b22c:	4798      	blx	r3
    b22e:	0003      	movs	r3, r0
    b230:	001a      	movs	r2, r3
    b232:	2301      	movs	r3, #1
    b234:	4053      	eors	r3, r2
    b236:	b2db      	uxtb	r3, r3
    b238:	2b00      	cmp	r3, #0
    b23a:	d001      	beq.n	b240 <sd_mmc_spi_install_mmc+0x94>
			return false;
    b23c:	2300      	movs	r3, #0
    b23e:	e01d      	b.n	b27c <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    b240:	2380      	movs	r3, #128	; 0x80
    b242:	009b      	lsls	r3, r3, #2
    b244:	4a16      	ldr	r2, [pc, #88]	; (b2a0 <sd_mmc_spi_install_mmc+0xf4>)
    b246:	0019      	movs	r1, r3
    b248:	0010      	movs	r0, r2
    b24a:	4b0e      	ldr	r3, [pc, #56]	; (b284 <sd_mmc_spi_install_mmc+0xd8>)
    b24c:	4798      	blx	r3
    b24e:	0003      	movs	r3, r0
    b250:	001a      	movs	r2, r3
    b252:	2301      	movs	r3, #1
    b254:	4053      	eors	r3, r2
    b256:	b2db      	uxtb	r3, r3
    b258:	2b00      	cmp	r3, #0
    b25a:	d001      	beq.n	b260 <sd_mmc_spi_install_mmc+0xb4>
		return false;
    b25c:	2300      	movs	r3, #0
    b25e:	e00d      	b.n	b27c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    b260:	4b10      	ldr	r3, [pc, #64]	; (b2a4 <sd_mmc_spi_install_mmc+0xf8>)
    b262:	4798      	blx	r3
    b264:	0003      	movs	r3, r0
    b266:	001a      	movs	r2, r3
    b268:	2301      	movs	r3, #1
    b26a:	4053      	eors	r3, r2
    b26c:	b2db      	uxtb	r3, r3
    b26e:	2b00      	cmp	r3, #0
    b270:	d001      	beq.n	b276 <sd_mmc_spi_install_mmc+0xca>
		return false;
    b272:	2300      	movs	r3, #0
    b274:	e002      	b.n	b27c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    b276:	4b0c      	ldr	r3, [pc, #48]	; (b2a8 <sd_mmc_spi_install_mmc+0xfc>)
    b278:	4798      	blx	r3
	return true;
    b27a:	2301      	movs	r3, #1
}
    b27c:	0018      	movs	r0, r3
    b27e:	46bd      	mov	sp, r7
    b280:	b002      	add	sp, #8
    b282:	bd80      	pop	{r7, pc}
    b284:	0000c235 	.word	0x0000c235
    b288:	0000a7b9 	.word	0x0000a7b9
    b28c:	0000113b 	.word	0x0000113b
    b290:	0000aaf1 	.word	0x0000aaf1
    b294:	0000ab61 	.word	0x0000ab61
    b298:	20003cd0 	.word	0x20003cd0
    b29c:	0000a9c5 	.word	0x0000a9c5
    b2a0:	00001110 	.word	0x00001110
    b2a4:	0000ad7d 	.word	0x0000ad7d
    b2a8:	0000afa5 	.word	0x0000afa5

0000b2ac <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    b2ac:	b580      	push	{r7, lr}
    b2ae:	b082      	sub	sp, #8
    b2b0:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    b2b2:	1dfb      	adds	r3, r7, #7
    b2b4:	2200      	movs	r2, #0
    b2b6:	701a      	strb	r2, [r3, #0]
    b2b8:	e00c      	b.n	b2d4 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    b2ba:	1dfb      	adds	r3, r7, #7
    b2bc:	781b      	ldrb	r3, [r3, #0]
    b2be:	4a0c      	ldr	r2, [pc, #48]	; (b2f0 <sd_mmc_init+0x44>)
    b2c0:	015b      	lsls	r3, r3, #5
    b2c2:	18d3      	adds	r3, r2, r3
    b2c4:	330a      	adds	r3, #10
    b2c6:	2204      	movs	r2, #4
    b2c8:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    b2ca:	1dfb      	adds	r3, r7, #7
    b2cc:	781a      	ldrb	r2, [r3, #0]
    b2ce:	1dfb      	adds	r3, r7, #7
    b2d0:	3201      	adds	r2, #1
    b2d2:	701a      	strb	r2, [r3, #0]
    b2d4:	1dfb      	adds	r3, r7, #7
    b2d6:	781b      	ldrb	r3, [r3, #0]
    b2d8:	2b00      	cmp	r3, #0
    b2da:	d0ee      	beq.n	b2ba <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    b2dc:	4b05      	ldr	r3, [pc, #20]	; (b2f4 <sd_mmc_init+0x48>)
    b2de:	22ff      	movs	r2, #255	; 0xff
    b2e0:	701a      	strb	r2, [r3, #0]
	driver_init();
    b2e2:	4b05      	ldr	r3, [pc, #20]	; (b2f8 <sd_mmc_init+0x4c>)
    b2e4:	4798      	blx	r3
}
    b2e6:	46c0      	nop			; (mov r8, r8)
    b2e8:	46bd      	mov	sp, r7
    b2ea:	b002      	add	sp, #8
    b2ec:	bd80      	pop	{r7, pc}
    b2ee:	46c0      	nop			; (mov r8, r8)
    b2f0:	20003cac 	.word	0x20003cac
    b2f4:	20003ccc 	.word	0x20003ccc
    b2f8:	0000c055 	.word	0x0000c055

0000b2fc <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    b2fc:	b590      	push	{r4, r7, lr}
    b2fe:	b085      	sub	sp, #20
    b300:	af00      	add	r7, sp, #0
    b302:	0002      	movs	r2, r0
    b304:	1dfb      	adds	r3, r7, #7
    b306:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    b308:	230f      	movs	r3, #15
    b30a:	18fc      	adds	r4, r7, r3
    b30c:	1dfb      	adds	r3, r7, #7
    b30e:	781b      	ldrb	r3, [r3, #0]
    b310:	0018      	movs	r0, r3
    b312:	4b13      	ldr	r3, [pc, #76]	; (b360 <sd_mmc_check+0x64>)
    b314:	4798      	blx	r3
    b316:	0003      	movs	r3, r0
    b318:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    b31a:	230f      	movs	r3, #15
    b31c:	18fb      	adds	r3, r7, r3
    b31e:	781b      	ldrb	r3, [r3, #0]
    b320:	2b01      	cmp	r3, #1
    b322:	d005      	beq.n	b330 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    b324:	4b0f      	ldr	r3, [pc, #60]	; (b364 <sd_mmc_check+0x68>)
    b326:	4798      	blx	r3
		return sd_mmc_err;
    b328:	230f      	movs	r3, #15
    b32a:	18fb      	adds	r3, r7, r3
    b32c:	781b      	ldrb	r3, [r3, #0]
    b32e:	e012      	b.n	b356 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    b330:	4b0d      	ldr	r3, [pc, #52]	; (b368 <sd_mmc_check+0x6c>)
    b332:	4798      	blx	r3
    b334:	1e03      	subs	r3, r0, #0
    b336:	d007      	beq.n	b348 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    b338:	4b0c      	ldr	r3, [pc, #48]	; (b36c <sd_mmc_check+0x70>)
    b33a:	681b      	ldr	r3, [r3, #0]
    b33c:	2200      	movs	r2, #0
    b33e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    b340:	4b08      	ldr	r3, [pc, #32]	; (b364 <sd_mmc_check+0x68>)
    b342:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    b344:	2301      	movs	r3, #1
    b346:	e006      	b.n	b356 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    b348:	4b08      	ldr	r3, [pc, #32]	; (b36c <sd_mmc_check+0x70>)
    b34a:	681b      	ldr	r3, [r3, #0]
    b34c:	2203      	movs	r2, #3
    b34e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    b350:	4b04      	ldr	r3, [pc, #16]	; (b364 <sd_mmc_check+0x68>)
    b352:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    b354:	2303      	movs	r3, #3
}
    b356:	0018      	movs	r0, r3
    b358:	46bd      	mov	sp, r7
    b35a:	b005      	add	sp, #20
    b35c:	bd90      	pop	{r4, r7, pc}
    b35e:	46c0      	nop			; (mov r8, r8)
    b360:	0000aee1 	.word	0x0000aee1
    b364:	0000afdd 	.word	0x0000afdd
    b368:	0000b001 	.word	0x0000b001
    b36c:	20003cd0 	.word	0x20003cd0

0000b370 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    b370:	b580      	push	{r7, lr}
    b372:	b082      	sub	sp, #8
    b374:	af00      	add	r7, sp, #0
    b376:	0002      	movs	r2, r0
    b378:	1dfb      	adds	r3, r7, #7
    b37a:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    b37c:	1dfb      	adds	r3, r7, #7
    b37e:	781b      	ldrb	r3, [r3, #0]
    b380:	0018      	movs	r0, r3
    b382:	4b07      	ldr	r3, [pc, #28]	; (b3a0 <sd_mmc_get_type+0x30>)
    b384:	4798      	blx	r3
    b386:	1e03      	subs	r3, r0, #0
    b388:	d001      	beq.n	b38e <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    b38a:	2300      	movs	r3, #0
    b38c:	e004      	b.n	b398 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    b38e:	4b05      	ldr	r3, [pc, #20]	; (b3a4 <sd_mmc_get_type+0x34>)
    b390:	4798      	blx	r3
	return sd_mmc_card->type;
    b392:	4b05      	ldr	r3, [pc, #20]	; (b3a8 <sd_mmc_get_type+0x38>)
    b394:	681b      	ldr	r3, [r3, #0]
    b396:	7adb      	ldrb	r3, [r3, #11]
}
    b398:	0018      	movs	r0, r3
    b39a:	46bd      	mov	sp, r7
    b39c:	b002      	add	sp, #8
    b39e:	bd80      	pop	{r7, pc}
    b3a0:	0000aee1 	.word	0x0000aee1
    b3a4:	0000afdd 	.word	0x0000afdd
    b3a8:	20003cd0 	.word	0x20003cd0

0000b3ac <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    b3ac:	b580      	push	{r7, lr}
    b3ae:	b082      	sub	sp, #8
    b3b0:	af00      	add	r7, sp, #0
    b3b2:	0002      	movs	r2, r0
    b3b4:	1dfb      	adds	r3, r7, #7
    b3b6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    b3b8:	1dfb      	adds	r3, r7, #7
    b3ba:	781b      	ldrb	r3, [r3, #0]
    b3bc:	0018      	movs	r0, r3
    b3be:	4b07      	ldr	r3, [pc, #28]	; (b3dc <sd_mmc_get_capacity+0x30>)
    b3c0:	4798      	blx	r3
    b3c2:	1e03      	subs	r3, r0, #0
    b3c4:	d001      	beq.n	b3ca <sd_mmc_get_capacity+0x1e>
		return 0;
    b3c6:	2300      	movs	r3, #0
    b3c8:	e004      	b.n	b3d4 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    b3ca:	4b05      	ldr	r3, [pc, #20]	; (b3e0 <sd_mmc_get_capacity+0x34>)
    b3cc:	4798      	blx	r3
	return sd_mmc_card->capacity;
    b3ce:	4b05      	ldr	r3, [pc, #20]	; (b3e4 <sd_mmc_get_capacity+0x38>)
    b3d0:	681b      	ldr	r3, [r3, #0]
    b3d2:	685b      	ldr	r3, [r3, #4]
}
    b3d4:	0018      	movs	r0, r3
    b3d6:	46bd      	mov	sp, r7
    b3d8:	b002      	add	sp, #8
    b3da:	bd80      	pop	{r7, pc}
    b3dc:	0000aee1 	.word	0x0000aee1
    b3e0:	0000afdd 	.word	0x0000afdd
    b3e4:	20003cd0 	.word	0x20003cd0

0000b3e8 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    b3e8:	b580      	push	{r7, lr}
    b3ea:	b082      	sub	sp, #8
    b3ec:	af00      	add	r7, sp, #0
    b3ee:	0002      	movs	r2, r0
    b3f0:	1dfb      	adds	r3, r7, #7
    b3f2:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    b3f4:	2300      	movs	r3, #0
}
    b3f6:	0018      	movs	r0, r3
    b3f8:	46bd      	mov	sp, r7
    b3fa:	b002      	add	sp, #8
    b3fc:	bd80      	pop	{r7, pc}
	...

0000b400 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    b400:	b590      	push	{r4, r7, lr}
    b402:	b089      	sub	sp, #36	; 0x24
    b404:	af02      	add	r7, sp, #8
    b406:	6039      	str	r1, [r7, #0]
    b408:	0011      	movs	r1, r2
    b40a:	1dfb      	adds	r3, r7, #7
    b40c:	1c02      	adds	r2, r0, #0
    b40e:	701a      	strb	r2, [r3, #0]
    b410:	1d3b      	adds	r3, r7, #4
    b412:	1c0a      	adds	r2, r1, #0
    b414:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    b416:	230f      	movs	r3, #15
    b418:	18fc      	adds	r4, r7, r3
    b41a:	1dfb      	adds	r3, r7, #7
    b41c:	781b      	ldrb	r3, [r3, #0]
    b41e:	0018      	movs	r0, r3
    b420:	4b29      	ldr	r3, [pc, #164]	; (b4c8 <sd_mmc_init_read_blocks+0xc8>)
    b422:	4798      	blx	r3
    b424:	0003      	movs	r3, r0
    b426:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    b428:	230f      	movs	r3, #15
    b42a:	18fb      	adds	r3, r7, r3
    b42c:	781b      	ldrb	r3, [r3, #0]
    b42e:	2b00      	cmp	r3, #0
    b430:	d003      	beq.n	b43a <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    b432:	230f      	movs	r3, #15
    b434:	18fb      	adds	r3, r7, r3
    b436:	781b      	ldrb	r3, [r3, #0]
    b438:	e041      	b.n	b4be <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    b43a:	4b24      	ldr	r3, [pc, #144]	; (b4cc <sd_mmc_init_read_blocks+0xcc>)
    b43c:	4798      	blx	r3
    b43e:	0003      	movs	r3, r0
    b440:	001a      	movs	r2, r3
    b442:	2301      	movs	r3, #1
    b444:	4053      	eors	r3, r2
    b446:	b2db      	uxtb	r3, r3
    b448:	2b00      	cmp	r3, #0
    b44a:	d003      	beq.n	b454 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    b44c:	4b20      	ldr	r3, [pc, #128]	; (b4d0 <sd_mmc_init_read_blocks+0xd0>)
    b44e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    b450:	2305      	movs	r3, #5
    b452:	e034      	b.n	b4be <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    b454:	1d3b      	adds	r3, r7, #4
    b456:	881b      	ldrh	r3, [r3, #0]
    b458:	2b01      	cmp	r3, #1
    b45a:	d902      	bls.n	b462 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    b45c:	4b1d      	ldr	r3, [pc, #116]	; (b4d4 <sd_mmc_init_read_blocks+0xd4>)
    b45e:	617b      	str	r3, [r7, #20]
    b460:	e001      	b.n	b466 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    b462:	4b1d      	ldr	r3, [pc, #116]	; (b4d8 <sd_mmc_init_read_blocks+0xd8>)
    b464:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    b466:	4b1d      	ldr	r3, [pc, #116]	; (b4dc <sd_mmc_init_read_blocks+0xdc>)
    b468:	681b      	ldr	r3, [r3, #0]
    b46a:	7adb      	ldrb	r3, [r3, #11]
    b46c:	001a      	movs	r2, r3
    b46e:	2308      	movs	r3, #8
    b470:	4013      	ands	r3, r2
    b472:	d002      	beq.n	b47a <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    b474:	683b      	ldr	r3, [r7, #0]
    b476:	613b      	str	r3, [r7, #16]
    b478:	e002      	b.n	b480 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    b47a:	683b      	ldr	r3, [r7, #0]
    b47c:	025b      	lsls	r3, r3, #9
    b47e:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    b480:	1d3b      	adds	r3, r7, #4
    b482:	881c      	ldrh	r4, [r3, #0]
    b484:	2380      	movs	r3, #128	; 0x80
    b486:	009a      	lsls	r2, r3, #2
    b488:	6939      	ldr	r1, [r7, #16]
    b48a:	6978      	ldr	r0, [r7, #20]
    b48c:	2301      	movs	r3, #1
    b48e:	9300      	str	r3, [sp, #0]
    b490:	0023      	movs	r3, r4
    b492:	4c13      	ldr	r4, [pc, #76]	; (b4e0 <sd_mmc_init_read_blocks+0xe0>)
    b494:	47a0      	blx	r4
    b496:	0003      	movs	r3, r0
    b498:	001a      	movs	r2, r3
    b49a:	2301      	movs	r3, #1
    b49c:	4053      	eors	r3, r2
    b49e:	b2db      	uxtb	r3, r3
    b4a0:	2b00      	cmp	r3, #0
    b4a2:	d003      	beq.n	b4ac <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    b4a4:	4b0a      	ldr	r3, [pc, #40]	; (b4d0 <sd_mmc_init_read_blocks+0xd0>)
    b4a6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    b4a8:	2305      	movs	r3, #5
    b4aa:	e008      	b.n	b4be <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    b4ac:	4b0d      	ldr	r3, [pc, #52]	; (b4e4 <sd_mmc_init_read_blocks+0xe4>)
    b4ae:	1d3a      	adds	r2, r7, #4
    b4b0:	8812      	ldrh	r2, [r2, #0]
    b4b2:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    b4b4:	4b0c      	ldr	r3, [pc, #48]	; (b4e8 <sd_mmc_init_read_blocks+0xe8>)
    b4b6:	1d3a      	adds	r2, r7, #4
    b4b8:	8812      	ldrh	r2, [r2, #0]
    b4ba:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    b4bc:	2300      	movs	r3, #0
}
    b4be:	0018      	movs	r0, r3
    b4c0:	46bd      	mov	sp, r7
    b4c2:	b007      	add	sp, #28
    b4c4:	bd90      	pop	{r4, r7, pc}
    b4c6:	46c0      	nop			; (mov r8, r8)
    b4c8:	0000aee1 	.word	0x0000aee1
    b4cc:	0000ad7d 	.word	0x0000ad7d
    b4d0:	0000afdd 	.word	0x0000afdd
    b4d4:	00101112 	.word	0x00101112
    b4d8:	00081111 	.word	0x00081111
    b4dc:	20003cd0 	.word	0x20003cd0
    b4e0:	0000c25d 	.word	0x0000c25d
    b4e4:	20003cd6 	.word	0x20003cd6
    b4e8:	20003cd4 	.word	0x20003cd4

0000b4ec <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    b4ec:	b580      	push	{r7, lr}
    b4ee:	b082      	sub	sp, #8
    b4f0:	af00      	add	r7, sp, #0
    b4f2:	6078      	str	r0, [r7, #4]
    b4f4:	000a      	movs	r2, r1
    b4f6:	1cbb      	adds	r3, r7, #2
    b4f8:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    b4fa:	1cbb      	adds	r3, r7, #2
    b4fc:	881a      	ldrh	r2, [r3, #0]
    b4fe:	687b      	ldr	r3, [r7, #4]
    b500:	0011      	movs	r1, r2
    b502:	0018      	movs	r0, r3
    b504:	4b0d      	ldr	r3, [pc, #52]	; (b53c <sd_mmc_start_read_blocks+0x50>)
    b506:	4798      	blx	r3
    b508:	0003      	movs	r3, r0
    b50a:	001a      	movs	r2, r3
    b50c:	2301      	movs	r3, #1
    b50e:	4053      	eors	r3, r2
    b510:	b2db      	uxtb	r3, r3
    b512:	2b00      	cmp	r3, #0
    b514:	d004      	beq.n	b520 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    b516:	4b0a      	ldr	r3, [pc, #40]	; (b540 <sd_mmc_start_read_blocks+0x54>)
    b518:	2200      	movs	r2, #0
    b51a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    b51c:	2305      	movs	r3, #5
    b51e:	e008      	b.n	b532 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    b520:	4b07      	ldr	r3, [pc, #28]	; (b540 <sd_mmc_start_read_blocks+0x54>)
    b522:	881a      	ldrh	r2, [r3, #0]
    b524:	1cbb      	adds	r3, r7, #2
    b526:	881b      	ldrh	r3, [r3, #0]
    b528:	1ad3      	subs	r3, r2, r3
    b52a:	b29a      	uxth	r2, r3
    b52c:	4b04      	ldr	r3, [pc, #16]	; (b540 <sd_mmc_start_read_blocks+0x54>)
    b52e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    b530:	2300      	movs	r3, #0
}
    b532:	0018      	movs	r0, r3
    b534:	46bd      	mov	sp, r7
    b536:	b002      	add	sp, #8
    b538:	bd80      	pop	{r7, pc}
    b53a:	46c0      	nop			; (mov r8, r8)
    b53c:	0000c52d 	.word	0x0000c52d
    b540:	20003cd6 	.word	0x20003cd6

0000b544 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    b544:	b580      	push	{r7, lr}
    b546:	b082      	sub	sp, #8
    b548:	af00      	add	r7, sp, #0
    b54a:	0002      	movs	r2, r0
    b54c:	1dfb      	adds	r3, r7, #7
    b54e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    b550:	4b1c      	ldr	r3, [pc, #112]	; (b5c4 <sd_mmc_wait_end_of_read_blocks+0x80>)
    b552:	4798      	blx	r3
    b554:	0003      	movs	r3, r0
    b556:	001a      	movs	r2, r3
    b558:	2301      	movs	r3, #1
    b55a:	4053      	eors	r3, r2
    b55c:	b2db      	uxtb	r3, r3
    b55e:	2b00      	cmp	r3, #0
    b560:	d001      	beq.n	b566 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    b562:	2305      	movs	r3, #5
    b564:	e029      	b.n	b5ba <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    b566:	1dfb      	adds	r3, r7, #7
    b568:	781b      	ldrb	r3, [r3, #0]
    b56a:	2b00      	cmp	r3, #0
    b56c:	d003      	beq.n	b576 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    b56e:	4b16      	ldr	r3, [pc, #88]	; (b5c8 <sd_mmc_wait_end_of_read_blocks+0x84>)
    b570:	2200      	movs	r2, #0
    b572:	801a      	strh	r2, [r3, #0]
    b574:	e005      	b.n	b582 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    b576:	4b14      	ldr	r3, [pc, #80]	; (b5c8 <sd_mmc_wait_end_of_read_blocks+0x84>)
    b578:	881b      	ldrh	r3, [r3, #0]
    b57a:	2b00      	cmp	r3, #0
    b57c:	d001      	beq.n	b582 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    b57e:	2300      	movs	r3, #0
    b580:	e01b      	b.n	b5ba <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    b582:	4b12      	ldr	r3, [pc, #72]	; (b5cc <sd_mmc_wait_end_of_read_blocks+0x88>)
    b584:	881b      	ldrh	r3, [r3, #0]
    b586:	2b01      	cmp	r3, #1
    b588:	d103      	bne.n	b592 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    b58a:	4b11      	ldr	r3, [pc, #68]	; (b5d0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    b58c:	4798      	blx	r3
		return SD_MMC_OK;
    b58e:	2300      	movs	r3, #0
    b590:	e013      	b.n	b5ba <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    b592:	4b10      	ldr	r3, [pc, #64]	; (b5d4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    b594:	2100      	movs	r1, #0
    b596:	0018      	movs	r0, r3
    b598:	4b0f      	ldr	r3, [pc, #60]	; (b5d8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    b59a:	4798      	blx	r3
    b59c:	0003      	movs	r3, r0
    b59e:	001a      	movs	r2, r3
    b5a0:	2301      	movs	r3, #1
    b5a2:	4053      	eors	r3, r2
    b5a4:	b2db      	uxtb	r3, r3
    b5a6:	2b00      	cmp	r3, #0
    b5a8:	d004      	beq.n	b5b4 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    b5aa:	4b0a      	ldr	r3, [pc, #40]	; (b5d4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    b5ac:	2100      	movs	r1, #0
    b5ae:	0018      	movs	r0, r3
    b5b0:	4b09      	ldr	r3, [pc, #36]	; (b5d8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    b5b2:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    b5b4:	4b06      	ldr	r3, [pc, #24]	; (b5d0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    b5b6:	4798      	blx	r3
	return SD_MMC_OK;
    b5b8:	2300      	movs	r3, #0
}
    b5ba:	0018      	movs	r0, r3
    b5bc:	46bd      	mov	sp, r7
    b5be:	b002      	add	sp, #8
    b5c0:	bd80      	pop	{r7, pc}
    b5c2:	46c0      	nop			; (mov r8, r8)
    b5c4:	0000c5d1 	.word	0x0000c5d1
    b5c8:	20003cd6 	.word	0x20003cd6
    b5cc:	20003cd4 	.word	0x20003cd4
    b5d0:	0000afdd 	.word	0x0000afdd
    b5d4:	0000310c 	.word	0x0000310c
    b5d8:	0000c235 	.word	0x0000c235

0000b5dc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    b5dc:	b590      	push	{r4, r7, lr}
    b5de:	b089      	sub	sp, #36	; 0x24
    b5e0:	af02      	add	r7, sp, #8
    b5e2:	6039      	str	r1, [r7, #0]
    b5e4:	0011      	movs	r1, r2
    b5e6:	1dfb      	adds	r3, r7, #7
    b5e8:	1c02      	adds	r2, r0, #0
    b5ea:	701a      	strb	r2, [r3, #0]
    b5ec:	1d3b      	adds	r3, r7, #4
    b5ee:	1c0a      	adds	r2, r1, #0
    b5f0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    b5f2:	230f      	movs	r3, #15
    b5f4:	18fc      	adds	r4, r7, r3
    b5f6:	1dfb      	adds	r3, r7, #7
    b5f8:	781b      	ldrb	r3, [r3, #0]
    b5fa:	0018      	movs	r0, r3
    b5fc:	4b28      	ldr	r3, [pc, #160]	; (b6a0 <sd_mmc_init_write_blocks+0xc4>)
    b5fe:	4798      	blx	r3
    b600:	0003      	movs	r3, r0
    b602:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    b604:	230f      	movs	r3, #15
    b606:	18fb      	adds	r3, r7, r3
    b608:	781b      	ldrb	r3, [r3, #0]
    b60a:	2b00      	cmp	r3, #0
    b60c:	d003      	beq.n	b616 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    b60e:	230f      	movs	r3, #15
    b610:	18fb      	adds	r3, r7, r3
    b612:	781b      	ldrb	r3, [r3, #0]
    b614:	e03f      	b.n	b696 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    b616:	1dfb      	adds	r3, r7, #7
    b618:	781b      	ldrb	r3, [r3, #0]
    b61a:	0018      	movs	r0, r3
    b61c:	4b21      	ldr	r3, [pc, #132]	; (b6a4 <sd_mmc_init_write_blocks+0xc8>)
    b61e:	4798      	blx	r3
    b620:	1e03      	subs	r3, r0, #0
    b622:	d003      	beq.n	b62c <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    b624:	4b20      	ldr	r3, [pc, #128]	; (b6a8 <sd_mmc_init_write_blocks+0xcc>)
    b626:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    b628:	2307      	movs	r3, #7
    b62a:	e034      	b.n	b696 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    b62c:	1d3b      	adds	r3, r7, #4
    b62e:	881b      	ldrh	r3, [r3, #0]
    b630:	2b01      	cmp	r3, #1
    b632:	d902      	bls.n	b63a <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    b634:	4b1d      	ldr	r3, [pc, #116]	; (b6ac <sd_mmc_init_write_blocks+0xd0>)
    b636:	617b      	str	r3, [r7, #20]
    b638:	e001      	b.n	b63e <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    b63a:	4b1d      	ldr	r3, [pc, #116]	; (b6b0 <sd_mmc_init_write_blocks+0xd4>)
    b63c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    b63e:	4b1d      	ldr	r3, [pc, #116]	; (b6b4 <sd_mmc_init_write_blocks+0xd8>)
    b640:	681b      	ldr	r3, [r3, #0]
    b642:	7adb      	ldrb	r3, [r3, #11]
    b644:	001a      	movs	r2, r3
    b646:	2308      	movs	r3, #8
    b648:	4013      	ands	r3, r2
    b64a:	d002      	beq.n	b652 <sd_mmc_init_write_blocks+0x76>
		arg = start;
    b64c:	683b      	ldr	r3, [r7, #0]
    b64e:	613b      	str	r3, [r7, #16]
    b650:	e002      	b.n	b658 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    b652:	683b      	ldr	r3, [r7, #0]
    b654:	025b      	lsls	r3, r3, #9
    b656:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    b658:	1d3b      	adds	r3, r7, #4
    b65a:	881c      	ldrh	r4, [r3, #0]
    b65c:	2380      	movs	r3, #128	; 0x80
    b65e:	009a      	lsls	r2, r3, #2
    b660:	6939      	ldr	r1, [r7, #16]
    b662:	6978      	ldr	r0, [r7, #20]
    b664:	2301      	movs	r3, #1
    b666:	9300      	str	r3, [sp, #0]
    b668:	0023      	movs	r3, r4
    b66a:	4c13      	ldr	r4, [pc, #76]	; (b6b8 <sd_mmc_init_write_blocks+0xdc>)
    b66c:	47a0      	blx	r4
    b66e:	0003      	movs	r3, r0
    b670:	001a      	movs	r2, r3
    b672:	2301      	movs	r3, #1
    b674:	4053      	eors	r3, r2
    b676:	b2db      	uxtb	r3, r3
    b678:	2b00      	cmp	r3, #0
    b67a:	d003      	beq.n	b684 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    b67c:	4b0a      	ldr	r3, [pc, #40]	; (b6a8 <sd_mmc_init_write_blocks+0xcc>)
    b67e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    b680:	2305      	movs	r3, #5
    b682:	e008      	b.n	b696 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    b684:	4b0d      	ldr	r3, [pc, #52]	; (b6bc <sd_mmc_init_write_blocks+0xe0>)
    b686:	1d3a      	adds	r2, r7, #4
    b688:	8812      	ldrh	r2, [r2, #0]
    b68a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    b68c:	4b0c      	ldr	r3, [pc, #48]	; (b6c0 <sd_mmc_init_write_blocks+0xe4>)
    b68e:	1d3a      	adds	r2, r7, #4
    b690:	8812      	ldrh	r2, [r2, #0]
    b692:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    b694:	2300      	movs	r3, #0
}
    b696:	0018      	movs	r0, r3
    b698:	46bd      	mov	sp, r7
    b69a:	b007      	add	sp, #28
    b69c:	bd90      	pop	{r4, r7, pc}
    b69e:	46c0      	nop			; (mov r8, r8)
    b6a0:	0000aee1 	.word	0x0000aee1
    b6a4:	0000b3e9 	.word	0x0000b3e9
    b6a8:	0000afdd 	.word	0x0000afdd
    b6ac:	00109119 	.word	0x00109119
    b6b0:	00089118 	.word	0x00089118
    b6b4:	20003cd0 	.word	0x20003cd0
    b6b8:	0000c25d 	.word	0x0000c25d
    b6bc:	20003cd6 	.word	0x20003cd6
    b6c0:	20003cd4 	.word	0x20003cd4

0000b6c4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    b6c4:	b580      	push	{r7, lr}
    b6c6:	b082      	sub	sp, #8
    b6c8:	af00      	add	r7, sp, #0
    b6ca:	6078      	str	r0, [r7, #4]
    b6cc:	000a      	movs	r2, r1
    b6ce:	1cbb      	adds	r3, r7, #2
    b6d0:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    b6d2:	1cbb      	adds	r3, r7, #2
    b6d4:	881a      	ldrh	r2, [r3, #0]
    b6d6:	687b      	ldr	r3, [r7, #4]
    b6d8:	0011      	movs	r1, r2
    b6da:	0018      	movs	r0, r3
    b6dc:	4b0d      	ldr	r3, [pc, #52]	; (b714 <sd_mmc_start_write_blocks+0x50>)
    b6de:	4798      	blx	r3
    b6e0:	0003      	movs	r3, r0
    b6e2:	001a      	movs	r2, r3
    b6e4:	2301      	movs	r3, #1
    b6e6:	4053      	eors	r3, r2
    b6e8:	b2db      	uxtb	r3, r3
    b6ea:	2b00      	cmp	r3, #0
    b6ec:	d004      	beq.n	b6f8 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    b6ee:	4b0a      	ldr	r3, [pc, #40]	; (b718 <sd_mmc_start_write_blocks+0x54>)
    b6f0:	2200      	movs	r2, #0
    b6f2:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    b6f4:	2305      	movs	r3, #5
    b6f6:	e008      	b.n	b70a <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    b6f8:	4b07      	ldr	r3, [pc, #28]	; (b718 <sd_mmc_start_write_blocks+0x54>)
    b6fa:	881a      	ldrh	r2, [r3, #0]
    b6fc:	1cbb      	adds	r3, r7, #2
    b6fe:	881b      	ldrh	r3, [r3, #0]
    b700:	1ad3      	subs	r3, r2, r3
    b702:	b29a      	uxth	r2, r3
    b704:	4b04      	ldr	r3, [pc, #16]	; (b718 <sd_mmc_start_write_blocks+0x54>)
    b706:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    b708:	2300      	movs	r3, #0
}
    b70a:	0018      	movs	r0, r3
    b70c:	46bd      	mov	sp, r7
    b70e:	b002      	add	sp, #8
    b710:	bd80      	pop	{r7, pc}
    b712:	46c0      	nop			; (mov r8, r8)
    b714:	0000c5dd 	.word	0x0000c5dd
    b718:	20003cd6 	.word	0x20003cd6

0000b71c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    b71c:	b580      	push	{r7, lr}
    b71e:	b082      	sub	sp, #8
    b720:	af00      	add	r7, sp, #0
    b722:	0002      	movs	r2, r0
    b724:	1dfb      	adds	r3, r7, #7
    b726:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    b728:	4b13      	ldr	r3, [pc, #76]	; (b778 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    b72a:	4798      	blx	r3
    b72c:	0003      	movs	r3, r0
    b72e:	001a      	movs	r2, r3
    b730:	2301      	movs	r3, #1
    b732:	4053      	eors	r3, r2
    b734:	b2db      	uxtb	r3, r3
    b736:	2b00      	cmp	r3, #0
    b738:	d001      	beq.n	b73e <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    b73a:	2305      	movs	r3, #5
    b73c:	e018      	b.n	b770 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    b73e:	1dfb      	adds	r3, r7, #7
    b740:	781b      	ldrb	r3, [r3, #0]
    b742:	2b00      	cmp	r3, #0
    b744:	d003      	beq.n	b74e <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    b746:	4b0d      	ldr	r3, [pc, #52]	; (b77c <sd_mmc_wait_end_of_write_blocks+0x60>)
    b748:	2200      	movs	r2, #0
    b74a:	801a      	strh	r2, [r3, #0]
    b74c:	e005      	b.n	b75a <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    b74e:	4b0b      	ldr	r3, [pc, #44]	; (b77c <sd_mmc_wait_end_of_write_blocks+0x60>)
    b750:	881b      	ldrh	r3, [r3, #0]
    b752:	2b00      	cmp	r3, #0
    b754:	d001      	beq.n	b75a <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    b756:	2300      	movs	r3, #0
    b758:	e00a      	b.n	b770 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    b75a:	4b09      	ldr	r3, [pc, #36]	; (b780 <sd_mmc_wait_end_of_write_blocks+0x64>)
    b75c:	881b      	ldrh	r3, [r3, #0]
    b75e:	2b01      	cmp	r3, #1
    b760:	d103      	bne.n	b76a <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    b762:	4b08      	ldr	r3, [pc, #32]	; (b784 <sd_mmc_wait_end_of_write_blocks+0x68>)
    b764:	4798      	blx	r3
		return SD_MMC_OK;
    b766:	2300      	movs	r3, #0
    b768:	e002      	b.n	b770 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    b76a:	4b06      	ldr	r3, [pc, #24]	; (b784 <sd_mmc_wait_end_of_write_blocks+0x68>)
    b76c:	4798      	blx	r3
	return SD_MMC_OK;
    b76e:	2300      	movs	r3, #0
}
    b770:	0018      	movs	r0, r3
    b772:	46bd      	mov	sp, r7
    b774:	b002      	add	sp, #8
    b776:	bd80      	pop	{r7, pc}
    b778:	0000c69d 	.word	0x0000c69d
    b77c:	20003cd6 	.word	0x20003cd6
    b780:	20003cd4 	.word	0x20003cd4
    b784:	0000afdd 	.word	0x0000afdd

0000b788 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    b788:	b580      	push	{r7, lr}
    b78a:	b082      	sub	sp, #8
    b78c:	af00      	add	r7, sp, #0
    b78e:	0002      	movs	r2, r0
    b790:	1dfb      	adds	r3, r7, #7
    b792:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    b794:	1dfb      	adds	r3, r7, #7
    b796:	781b      	ldrb	r3, [r3, #0]
    b798:	0018      	movs	r0, r3
    b79a:	4b16      	ldr	r3, [pc, #88]	; (b7f4 <sd_mmc_test_unit_ready+0x6c>)
    b79c:	4798      	blx	r3
    b79e:	0003      	movs	r3, r0
    b7a0:	2b01      	cmp	r3, #1
    b7a2:	d019      	beq.n	b7d8 <sd_mmc_test_unit_ready+0x50>
    b7a4:	2b02      	cmp	r3, #2
    b7a6:	d019      	beq.n	b7dc <sd_mmc_test_unit_ready+0x54>
    b7a8:	2b00      	cmp	r3, #0
    b7aa:	d11e      	bne.n	b7ea <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    b7ac:	1dfb      	adds	r3, r7, #7
    b7ae:	781b      	ldrb	r3, [r3, #0]
    b7b0:	4a11      	ldr	r2, [pc, #68]	; (b7f8 <sd_mmc_test_unit_ready+0x70>)
    b7b2:	5cd3      	ldrb	r3, [r2, r3]
    b7b4:	2b00      	cmp	r3, #0
    b7b6:	d001      	beq.n	b7bc <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    b7b8:	2302      	movs	r3, #2
    b7ba:	e017      	b.n	b7ec <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    b7bc:	1dfb      	adds	r3, r7, #7
    b7be:	781b      	ldrb	r3, [r3, #0]
    b7c0:	0018      	movs	r0, r3
    b7c2:	4b0e      	ldr	r3, [pc, #56]	; (b7fc <sd_mmc_test_unit_ready+0x74>)
    b7c4:	4798      	blx	r3
    b7c6:	0003      	movs	r3, r0
    b7c8:	001a      	movs	r2, r3
    b7ca:	2303      	movs	r3, #3
    b7cc:	4013      	ands	r3, r2
    b7ce:	d001      	beq.n	b7d4 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    b7d0:	2300      	movs	r3, #0
    b7d2:	e00b      	b.n	b7ec <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    b7d4:	2302      	movs	r3, #2
    b7d6:	e009      	b.n	b7ec <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    b7d8:	2303      	movs	r3, #3
    b7da:	e007      	b.n	b7ec <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    b7dc:	1dfb      	adds	r3, r7, #7
    b7de:	781b      	ldrb	r3, [r3, #0]
    b7e0:	4a05      	ldr	r2, [pc, #20]	; (b7f8 <sd_mmc_test_unit_ready+0x70>)
    b7e2:	2100      	movs	r1, #0
    b7e4:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    b7e6:	2302      	movs	r3, #2
    b7e8:	e000      	b.n	b7ec <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    b7ea:	2301      	movs	r3, #1
	}
}
    b7ec:	0018      	movs	r0, r3
    b7ee:	46bd      	mov	sp, r7
    b7f0:	b002      	add	sp, #8
    b7f2:	bd80      	pop	{r7, pc}
    b7f4:	0000b2fd 	.word	0x0000b2fd
    b7f8:	20003cd8 	.word	0x20003cd8
    b7fc:	0000b371 	.word	0x0000b371

0000b800 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    b800:	b580      	push	{r7, lr}
    b802:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    b804:	2000      	movs	r0, #0
    b806:	4b03      	ldr	r3, [pc, #12]	; (b814 <sd_mmc_test_unit_ready_0+0x14>)
    b808:	4798      	blx	r3
    b80a:	0003      	movs	r3, r0
}
    b80c:	0018      	movs	r0, r3
    b80e:	46bd      	mov	sp, r7
    b810:	bd80      	pop	{r7, pc}
    b812:	46c0      	nop			; (mov r8, r8)
    b814:	0000b789 	.word	0x0000b789

0000b818 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    b818:	b580      	push	{r7, lr}
    b81a:	b082      	sub	sp, #8
    b81c:	af00      	add	r7, sp, #0
    b81e:	0002      	movs	r2, r0
    b820:	6039      	str	r1, [r7, #0]
    b822:	1dfb      	adds	r3, r7, #7
    b824:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    b826:	1dfb      	adds	r3, r7, #7
    b828:	781b      	ldrb	r3, [r3, #0]
    b82a:	0018      	movs	r0, r3
    b82c:	4b08      	ldr	r3, [pc, #32]	; (b850 <sd_mmc_read_capacity+0x38>)
    b82e:	4798      	blx	r3
    b830:	0003      	movs	r3, r0
    b832:	005b      	lsls	r3, r3, #1
    b834:	1e5a      	subs	r2, r3, #1
    b836:	683b      	ldr	r3, [r7, #0]
    b838:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    b83a:	1dfb      	adds	r3, r7, #7
    b83c:	781b      	ldrb	r3, [r3, #0]
    b83e:	0018      	movs	r0, r3
    b840:	4b04      	ldr	r3, [pc, #16]	; (b854 <sd_mmc_read_capacity+0x3c>)
    b842:	4798      	blx	r3
    b844:	0003      	movs	r3, r0
}
    b846:	0018      	movs	r0, r3
    b848:	46bd      	mov	sp, r7
    b84a:	b002      	add	sp, #8
    b84c:	bd80      	pop	{r7, pc}
    b84e:	46c0      	nop			; (mov r8, r8)
    b850:	0000b3ad 	.word	0x0000b3ad
    b854:	0000b789 	.word	0x0000b789

0000b858 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    b858:	b580      	push	{r7, lr}
    b85a:	b082      	sub	sp, #8
    b85c:	af00      	add	r7, sp, #0
    b85e:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    b860:	687b      	ldr	r3, [r7, #4]
    b862:	0019      	movs	r1, r3
    b864:	2000      	movs	r0, #0
    b866:	4b03      	ldr	r3, [pc, #12]	; (b874 <sd_mmc_read_capacity_0+0x1c>)
    b868:	4798      	blx	r3
    b86a:	0003      	movs	r3, r0
}
    b86c:	0018      	movs	r0, r3
    b86e:	46bd      	mov	sp, r7
    b870:	b002      	add	sp, #8
    b872:	bd80      	pop	{r7, pc}
    b874:	0000b819 	.word	0x0000b819

0000b878 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    b878:	b580      	push	{r7, lr}
    b87a:	b082      	sub	sp, #8
    b87c:	af00      	add	r7, sp, #0
    b87e:	0002      	movs	r2, r0
    b880:	1dfb      	adds	r3, r7, #7
    b882:	701a      	strb	r2, [r3, #0]
    b884:	1dbb      	adds	r3, r7, #6
    b886:	1c0a      	adds	r2, r1, #0
    b888:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    b88a:	1dfb      	adds	r3, r7, #7
    b88c:	781b      	ldrb	r3, [r3, #0]
    b88e:	4a04      	ldr	r2, [pc, #16]	; (b8a0 <sd_mmc_unload+0x28>)
    b890:	1db9      	adds	r1, r7, #6
    b892:	7809      	ldrb	r1, [r1, #0]
    b894:	54d1      	strb	r1, [r2, r3]
	return true;
    b896:	2301      	movs	r3, #1
}
    b898:	0018      	movs	r0, r3
    b89a:	46bd      	mov	sp, r7
    b89c:	b002      	add	sp, #8
    b89e:	bd80      	pop	{r7, pc}
    b8a0:	20003cd8 	.word	0x20003cd8

0000b8a4 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    b8a4:	b580      	push	{r7, lr}
    b8a6:	b082      	sub	sp, #8
    b8a8:	af00      	add	r7, sp, #0
    b8aa:	0002      	movs	r2, r0
    b8ac:	1dfb      	adds	r3, r7, #7
    b8ae:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    b8b0:	1dfb      	adds	r3, r7, #7
    b8b2:	781b      	ldrb	r3, [r3, #0]
    b8b4:	0019      	movs	r1, r3
    b8b6:	2000      	movs	r0, #0
    b8b8:	4b03      	ldr	r3, [pc, #12]	; (b8c8 <sd_mmc_unload_0+0x24>)
    b8ba:	4798      	blx	r3
    b8bc:	0003      	movs	r3, r0
}
    b8be:	0018      	movs	r0, r3
    b8c0:	46bd      	mov	sp, r7
    b8c2:	b002      	add	sp, #8
    b8c4:	bd80      	pop	{r7, pc}
    b8c6:	46c0      	nop			; (mov r8, r8)
    b8c8:	0000b879 	.word	0x0000b879

0000b8cc <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    b8cc:	b580      	push	{r7, lr}
    b8ce:	b082      	sub	sp, #8
    b8d0:	af00      	add	r7, sp, #0
    b8d2:	0002      	movs	r2, r0
    b8d4:	1dfb      	adds	r3, r7, #7
    b8d6:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    b8d8:	1dfb      	adds	r3, r7, #7
    b8da:	781b      	ldrb	r3, [r3, #0]
    b8dc:	0018      	movs	r0, r3
    b8de:	4b03      	ldr	r3, [pc, #12]	; (b8ec <sd_mmc_wr_protect+0x20>)
    b8e0:	4798      	blx	r3
    b8e2:	0003      	movs	r3, r0
}
    b8e4:	0018      	movs	r0, r3
    b8e6:	46bd      	mov	sp, r7
    b8e8:	b002      	add	sp, #8
    b8ea:	bd80      	pop	{r7, pc}
    b8ec:	0000b3e9 	.word	0x0000b3e9

0000b8f0 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    b8f0:	b580      	push	{r7, lr}
    b8f2:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    b8f4:	2000      	movs	r0, #0
    b8f6:	4b03      	ldr	r3, [pc, #12]	; (b904 <sd_mmc_wr_protect_0+0x14>)
    b8f8:	4798      	blx	r3
    b8fa:	0003      	movs	r3, r0
}
    b8fc:	0018      	movs	r0, r3
    b8fe:	46bd      	mov	sp, r7
    b900:	bd80      	pop	{r7, pc}
    b902:	46c0      	nop			; (mov r8, r8)
    b904:	0000b8cd 	.word	0x0000b8cd

0000b908 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    b908:	b580      	push	{r7, lr}
    b90a:	b082      	sub	sp, #8
    b90c:	af00      	add	r7, sp, #0
    b90e:	0002      	movs	r2, r0
    b910:	1dfb      	adds	r3, r7, #7
    b912:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    b914:	2301      	movs	r3, #1
}
    b916:	0018      	movs	r0, r3
    b918:	46bd      	mov	sp, r7
    b91a:	b002      	add	sp, #8
    b91c:	bd80      	pop	{r7, pc}
	...

0000b920 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    b920:	b580      	push	{r7, lr}
    b922:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    b924:	2000      	movs	r0, #0
    b926:	4b03      	ldr	r3, [pc, #12]	; (b934 <sd_mmc_removal_0+0x14>)
    b928:	4798      	blx	r3
    b92a:	0003      	movs	r3, r0
}
    b92c:	0018      	movs	r0, r3
    b92e:	46bd      	mov	sp, r7
    b930:	bd80      	pop	{r7, pc}
    b932:	46c0      	nop			; (mov r8, r8)
    b934:	0000b909 	.word	0x0000b909

0000b938 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    b938:	b580      	push	{r7, lr}
    b93a:	b084      	sub	sp, #16
    b93c:	af00      	add	r7, sp, #0
    b93e:	60b9      	str	r1, [r7, #8]
    b940:	607a      	str	r2, [r7, #4]
    b942:	230f      	movs	r3, #15
    b944:	18fb      	adds	r3, r7, r3
    b946:	1c02      	adds	r2, r0, #0
    b948:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    b94a:	68b9      	ldr	r1, [r7, #8]
    b94c:	230f      	movs	r3, #15
    b94e:	18fb      	adds	r3, r7, r3
    b950:	781b      	ldrb	r3, [r3, #0]
    b952:	2201      	movs	r2, #1
    b954:	0018      	movs	r0, r3
    b956:	4b10      	ldr	r3, [pc, #64]	; (b998 <sd_mmc_mem_2_ram+0x60>)
    b958:	4798      	blx	r3
    b95a:	1e03      	subs	r3, r0, #0
    b95c:	d005      	beq.n	b96a <sd_mmc_mem_2_ram+0x32>
    b95e:	2b02      	cmp	r3, #2
    b960:	d101      	bne.n	b966 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    b962:	2302      	movs	r3, #2
    b964:	e013      	b.n	b98e <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    b966:	2301      	movs	r3, #1
    b968:	e011      	b.n	b98e <sd_mmc_mem_2_ram+0x56>
		break;
    b96a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    b96c:	687b      	ldr	r3, [r7, #4]
    b96e:	2101      	movs	r1, #1
    b970:	0018      	movs	r0, r3
    b972:	4b0a      	ldr	r3, [pc, #40]	; (b99c <sd_mmc_mem_2_ram+0x64>)
    b974:	4798      	blx	r3
    b976:	1e03      	subs	r3, r0, #0
    b978:	d001      	beq.n	b97e <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    b97a:	2301      	movs	r3, #1
    b97c:	e007      	b.n	b98e <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    b97e:	2000      	movs	r0, #0
    b980:	4b07      	ldr	r3, [pc, #28]	; (b9a0 <sd_mmc_mem_2_ram+0x68>)
    b982:	4798      	blx	r3
    b984:	1e03      	subs	r3, r0, #0
    b986:	d001      	beq.n	b98c <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    b988:	2301      	movs	r3, #1
    b98a:	e000      	b.n	b98e <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    b98c:	2300      	movs	r3, #0
}
    b98e:	0018      	movs	r0, r3
    b990:	46bd      	mov	sp, r7
    b992:	b004      	add	sp, #16
    b994:	bd80      	pop	{r7, pc}
    b996:	46c0      	nop			; (mov r8, r8)
    b998:	0000b401 	.word	0x0000b401
    b99c:	0000b4ed 	.word	0x0000b4ed
    b9a0:	0000b545 	.word	0x0000b545

0000b9a4 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    b9a4:	b580      	push	{r7, lr}
    b9a6:	b082      	sub	sp, #8
    b9a8:	af00      	add	r7, sp, #0
    b9aa:	6078      	str	r0, [r7, #4]
    b9ac:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    b9ae:	683a      	ldr	r2, [r7, #0]
    b9b0:	687b      	ldr	r3, [r7, #4]
    b9b2:	0019      	movs	r1, r3
    b9b4:	2000      	movs	r0, #0
    b9b6:	4b03      	ldr	r3, [pc, #12]	; (b9c4 <sd_mmc_mem_2_ram_0+0x20>)
    b9b8:	4798      	blx	r3
    b9ba:	0003      	movs	r3, r0
}
    b9bc:	0018      	movs	r0, r3
    b9be:	46bd      	mov	sp, r7
    b9c0:	b002      	add	sp, #8
    b9c2:	bd80      	pop	{r7, pc}
    b9c4:	0000b939 	.word	0x0000b939

0000b9c8 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    b9c8:	b580      	push	{r7, lr}
    b9ca:	b084      	sub	sp, #16
    b9cc:	af00      	add	r7, sp, #0
    b9ce:	60b9      	str	r1, [r7, #8]
    b9d0:	607a      	str	r2, [r7, #4]
    b9d2:	230f      	movs	r3, #15
    b9d4:	18fb      	adds	r3, r7, r3
    b9d6:	1c02      	adds	r2, r0, #0
    b9d8:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    b9da:	68b9      	ldr	r1, [r7, #8]
    b9dc:	230f      	movs	r3, #15
    b9de:	18fb      	adds	r3, r7, r3
    b9e0:	781b      	ldrb	r3, [r3, #0]
    b9e2:	2201      	movs	r2, #1
    b9e4:	0018      	movs	r0, r3
    b9e6:	4b10      	ldr	r3, [pc, #64]	; (ba28 <sd_mmc_ram_2_mem+0x60>)
    b9e8:	4798      	blx	r3
    b9ea:	1e03      	subs	r3, r0, #0
    b9ec:	d005      	beq.n	b9fa <sd_mmc_ram_2_mem+0x32>
    b9ee:	2b02      	cmp	r3, #2
    b9f0:	d101      	bne.n	b9f6 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    b9f2:	2302      	movs	r3, #2
    b9f4:	e013      	b.n	ba1e <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    b9f6:	2301      	movs	r3, #1
    b9f8:	e011      	b.n	ba1e <sd_mmc_ram_2_mem+0x56>
		break;
    b9fa:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    b9fc:	687b      	ldr	r3, [r7, #4]
    b9fe:	2101      	movs	r1, #1
    ba00:	0018      	movs	r0, r3
    ba02:	4b0a      	ldr	r3, [pc, #40]	; (ba2c <sd_mmc_ram_2_mem+0x64>)
    ba04:	4798      	blx	r3
    ba06:	1e03      	subs	r3, r0, #0
    ba08:	d001      	beq.n	ba0e <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    ba0a:	2301      	movs	r3, #1
    ba0c:	e007      	b.n	ba1e <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    ba0e:	2000      	movs	r0, #0
    ba10:	4b07      	ldr	r3, [pc, #28]	; (ba30 <sd_mmc_ram_2_mem+0x68>)
    ba12:	4798      	blx	r3
    ba14:	1e03      	subs	r3, r0, #0
    ba16:	d001      	beq.n	ba1c <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    ba18:	2301      	movs	r3, #1
    ba1a:	e000      	b.n	ba1e <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    ba1c:	2300      	movs	r3, #0
}
    ba1e:	0018      	movs	r0, r3
    ba20:	46bd      	mov	sp, r7
    ba22:	b004      	add	sp, #16
    ba24:	bd80      	pop	{r7, pc}
    ba26:	46c0      	nop			; (mov r8, r8)
    ba28:	0000b5dd 	.word	0x0000b5dd
    ba2c:	0000b6c5 	.word	0x0000b6c5
    ba30:	0000b71d 	.word	0x0000b71d

0000ba34 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    ba34:	b580      	push	{r7, lr}
    ba36:	b082      	sub	sp, #8
    ba38:	af00      	add	r7, sp, #0
    ba3a:	6078      	str	r0, [r7, #4]
    ba3c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    ba3e:	683a      	ldr	r2, [r7, #0]
    ba40:	687b      	ldr	r3, [r7, #4]
    ba42:	0019      	movs	r1, r3
    ba44:	2000      	movs	r0, #0
    ba46:	4b03      	ldr	r3, [pc, #12]	; (ba54 <sd_mmc_ram_2_mem_0+0x20>)
    ba48:	4798      	blx	r3
    ba4a:	0003      	movs	r3, r0
}
    ba4c:	0018      	movs	r0, r3
    ba4e:	46bd      	mov	sp, r7
    ba50:	b002      	add	sp, #8
    ba52:	bd80      	pop	{r7, pc}
    ba54:	0000b9c9 	.word	0x0000b9c9

0000ba58 <system_pinmux_get_group_from_gpio_pin>:
{
    ba58:	b580      	push	{r7, lr}
    ba5a:	b084      	sub	sp, #16
    ba5c:	af00      	add	r7, sp, #0
    ba5e:	0002      	movs	r2, r0
    ba60:	1dfb      	adds	r3, r7, #7
    ba62:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    ba64:	230f      	movs	r3, #15
    ba66:	18fb      	adds	r3, r7, r3
    ba68:	1dfa      	adds	r2, r7, #7
    ba6a:	7812      	ldrb	r2, [r2, #0]
    ba6c:	09d2      	lsrs	r2, r2, #7
    ba6e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    ba70:	230e      	movs	r3, #14
    ba72:	18fb      	adds	r3, r7, r3
    ba74:	1dfa      	adds	r2, r7, #7
    ba76:	7812      	ldrb	r2, [r2, #0]
    ba78:	0952      	lsrs	r2, r2, #5
    ba7a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    ba7c:	4b0d      	ldr	r3, [pc, #52]	; (bab4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    ba7e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    ba80:	230f      	movs	r3, #15
    ba82:	18fb      	adds	r3, r7, r3
    ba84:	781b      	ldrb	r3, [r3, #0]
    ba86:	2b00      	cmp	r3, #0
    ba88:	d10f      	bne.n	baaa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    ba8a:	230f      	movs	r3, #15
    ba8c:	18fb      	adds	r3, r7, r3
    ba8e:	781b      	ldrb	r3, [r3, #0]
    ba90:	009b      	lsls	r3, r3, #2
    ba92:	2210      	movs	r2, #16
    ba94:	4694      	mov	ip, r2
    ba96:	44bc      	add	ip, r7
    ba98:	4463      	add	r3, ip
    ba9a:	3b08      	subs	r3, #8
    ba9c:	681a      	ldr	r2, [r3, #0]
    ba9e:	230e      	movs	r3, #14
    baa0:	18fb      	adds	r3, r7, r3
    baa2:	781b      	ldrb	r3, [r3, #0]
    baa4:	01db      	lsls	r3, r3, #7
    baa6:	18d3      	adds	r3, r2, r3
    baa8:	e000      	b.n	baac <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    baaa:	2300      	movs	r3, #0
}
    baac:	0018      	movs	r0, r3
    baae:	46bd      	mov	sp, r7
    bab0:	b004      	add	sp, #16
    bab2:	bd80      	pop	{r7, pc}
    bab4:	41004400 	.word	0x41004400

0000bab8 <system_interrupt_enable>:
{
    bab8:	b580      	push	{r7, lr}
    baba:	b082      	sub	sp, #8
    babc:	af00      	add	r7, sp, #0
    babe:	0002      	movs	r2, r0
    bac0:	1dfb      	adds	r3, r7, #7
    bac2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    bac4:	4b06      	ldr	r3, [pc, #24]	; (bae0 <system_interrupt_enable+0x28>)
    bac6:	1dfa      	adds	r2, r7, #7
    bac8:	7812      	ldrb	r2, [r2, #0]
    baca:	0011      	movs	r1, r2
    bacc:	221f      	movs	r2, #31
    bace:	400a      	ands	r2, r1
    bad0:	2101      	movs	r1, #1
    bad2:	4091      	lsls	r1, r2
    bad4:	000a      	movs	r2, r1
    bad6:	601a      	str	r2, [r3, #0]
}
    bad8:	46c0      	nop			; (mov r8, r8)
    bada:	46bd      	mov	sp, r7
    badc:	b002      	add	sp, #8
    bade:	bd80      	pop	{r7, pc}
    bae0:	e000e100 	.word	0xe000e100

0000bae4 <port_get_group_from_gpio_pin>:
{
    bae4:	b580      	push	{r7, lr}
    bae6:	b082      	sub	sp, #8
    bae8:	af00      	add	r7, sp, #0
    baea:	0002      	movs	r2, r0
    baec:	1dfb      	adds	r3, r7, #7
    baee:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    baf0:	1dfb      	adds	r3, r7, #7
    baf2:	781b      	ldrb	r3, [r3, #0]
    baf4:	0018      	movs	r0, r3
    baf6:	4b03      	ldr	r3, [pc, #12]	; (bb04 <port_get_group_from_gpio_pin+0x20>)
    baf8:	4798      	blx	r3
    bafa:	0003      	movs	r3, r0
}
    bafc:	0018      	movs	r0, r3
    bafe:	46bd      	mov	sp, r7
    bb00:	b002      	add	sp, #8
    bb02:	bd80      	pop	{r7, pc}
    bb04:	0000ba59 	.word	0x0000ba59

0000bb08 <port_get_config_defaults>:
{
    bb08:	b580      	push	{r7, lr}
    bb0a:	b082      	sub	sp, #8
    bb0c:	af00      	add	r7, sp, #0
    bb0e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    bb10:	687b      	ldr	r3, [r7, #4]
    bb12:	2200      	movs	r2, #0
    bb14:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    bb16:	687b      	ldr	r3, [r7, #4]
    bb18:	2201      	movs	r2, #1
    bb1a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    bb1c:	687b      	ldr	r3, [r7, #4]
    bb1e:	2200      	movs	r2, #0
    bb20:	709a      	strb	r2, [r3, #2]
}
    bb22:	46c0      	nop			; (mov r8, r8)
    bb24:	46bd      	mov	sp, r7
    bb26:	b002      	add	sp, #8
    bb28:	bd80      	pop	{r7, pc}
	...

0000bb2c <port_pin_set_output_level>:
{
    bb2c:	b580      	push	{r7, lr}
    bb2e:	b084      	sub	sp, #16
    bb30:	af00      	add	r7, sp, #0
    bb32:	0002      	movs	r2, r0
    bb34:	1dfb      	adds	r3, r7, #7
    bb36:	701a      	strb	r2, [r3, #0]
    bb38:	1dbb      	adds	r3, r7, #6
    bb3a:	1c0a      	adds	r2, r1, #0
    bb3c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    bb3e:	1dfb      	adds	r3, r7, #7
    bb40:	781b      	ldrb	r3, [r3, #0]
    bb42:	0018      	movs	r0, r3
    bb44:	4b0d      	ldr	r3, [pc, #52]	; (bb7c <port_pin_set_output_level+0x50>)
    bb46:	4798      	blx	r3
    bb48:	0003      	movs	r3, r0
    bb4a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    bb4c:	1dfb      	adds	r3, r7, #7
    bb4e:	781b      	ldrb	r3, [r3, #0]
    bb50:	221f      	movs	r2, #31
    bb52:	4013      	ands	r3, r2
    bb54:	2201      	movs	r2, #1
    bb56:	409a      	lsls	r2, r3
    bb58:	0013      	movs	r3, r2
    bb5a:	60bb      	str	r3, [r7, #8]
	if (level) {
    bb5c:	1dbb      	adds	r3, r7, #6
    bb5e:	781b      	ldrb	r3, [r3, #0]
    bb60:	2b00      	cmp	r3, #0
    bb62:	d003      	beq.n	bb6c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    bb64:	68fb      	ldr	r3, [r7, #12]
    bb66:	68ba      	ldr	r2, [r7, #8]
    bb68:	619a      	str	r2, [r3, #24]
}
    bb6a:	e002      	b.n	bb72 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    bb6c:	68fb      	ldr	r3, [r7, #12]
    bb6e:	68ba      	ldr	r2, [r7, #8]
    bb70:	615a      	str	r2, [r3, #20]
}
    bb72:	46c0      	nop			; (mov r8, r8)
    bb74:	46bd      	mov	sp, r7
    bb76:	b004      	add	sp, #16
    bb78:	bd80      	pop	{r7, pc}
    bb7a:	46c0      	nop			; (mov r8, r8)
    bb7c:	0000bae5 	.word	0x0000bae5

0000bb80 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    bb80:	b580      	push	{r7, lr}
    bb82:	b084      	sub	sp, #16
    bb84:	af00      	add	r7, sp, #0
    bb86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    bb88:	687b      	ldr	r3, [r7, #4]
    bb8a:	681b      	ldr	r3, [r3, #0]
    bb8c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    bb8e:	68fb      	ldr	r3, [r7, #12]
    bb90:	69db      	ldr	r3, [r3, #28]
    bb92:	1e5a      	subs	r2, r3, #1
    bb94:	4193      	sbcs	r3, r2
    bb96:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    bb98:	0018      	movs	r0, r3
    bb9a:	46bd      	mov	sp, r7
    bb9c:	b004      	add	sp, #16
    bb9e:	bd80      	pop	{r7, pc}

0000bba0 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    bba0:	b580      	push	{r7, lr}
    bba2:	b082      	sub	sp, #8
    bba4:	af00      	add	r7, sp, #0
    bba6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    bba8:	687b      	ldr	r3, [r7, #4]
    bbaa:	2201      	movs	r2, #1
    bbac:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    bbae:	687b      	ldr	r3, [r7, #4]
    bbb0:	2200      	movs	r2, #0
    bbb2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    bbb4:	687b      	ldr	r3, [r7, #4]
    bbb6:	2200      	movs	r2, #0
    bbb8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    bbba:	687b      	ldr	r3, [r7, #4]
    bbbc:	22c0      	movs	r2, #192	; 0xc0
    bbbe:	0392      	lsls	r2, r2, #14
    bbc0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    bbc2:	687b      	ldr	r3, [r7, #4]
    bbc4:	2200      	movs	r2, #0
    bbc6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    bbc8:	687b      	ldr	r3, [r7, #4]
    bbca:	2200      	movs	r2, #0
    bbcc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    bbce:	687b      	ldr	r3, [r7, #4]
    bbd0:	2201      	movs	r2, #1
    bbd2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    bbd4:	687b      	ldr	r3, [r7, #4]
    bbd6:	2201      	movs	r2, #1
    bbd8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    bbda:	687b      	ldr	r3, [r7, #4]
    bbdc:	2200      	movs	r2, #0
    bbde:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    bbe0:	687b      	ldr	r3, [r7, #4]
    bbe2:	2224      	movs	r2, #36	; 0x24
    bbe4:	2100      	movs	r1, #0
    bbe6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    bbe8:	687b      	ldr	r3, [r7, #4]
    bbea:	3318      	adds	r3, #24
    bbec:	220c      	movs	r2, #12
    bbee:	2100      	movs	r1, #0
    bbf0:	0018      	movs	r0, r3
    bbf2:	4b0a      	ldr	r3, [pc, #40]	; (bc1c <spi_get_config_defaults+0x7c>)
    bbf4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    bbf6:	687b      	ldr	r3, [r7, #4]
    bbf8:	4a09      	ldr	r2, [pc, #36]	; (bc20 <spi_get_config_defaults+0x80>)
    bbfa:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    bbfc:	687b      	ldr	r3, [r7, #4]
    bbfe:	2200      	movs	r2, #0
    bc00:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    bc02:	687b      	ldr	r3, [r7, #4]
    bc04:	2200      	movs	r2, #0
    bc06:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    bc08:	687b      	ldr	r3, [r7, #4]
    bc0a:	2200      	movs	r2, #0
    bc0c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    bc0e:	687b      	ldr	r3, [r7, #4]
    bc10:	2200      	movs	r2, #0
    bc12:	635a      	str	r2, [r3, #52]	; 0x34

};
    bc14:	46c0      	nop			; (mov r8, r8)
    bc16:	46bd      	mov	sp, r7
    bc18:	b002      	add	sp, #8
    bc1a:	bd80      	pop	{r7, pc}
    bc1c:	00020f1f 	.word	0x00020f1f
    bc20:	000186a0 	.word	0x000186a0

0000bc24 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    bc24:	b580      	push	{r7, lr}
    bc26:	b082      	sub	sp, #8
    bc28:	af00      	add	r7, sp, #0
    bc2a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    bc2c:	687b      	ldr	r3, [r7, #4]
    bc2e:	220a      	movs	r2, #10
    bc30:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    bc32:	687b      	ldr	r3, [r7, #4]
    bc34:	2200      	movs	r2, #0
    bc36:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    bc38:	687b      	ldr	r3, [r7, #4]
    bc3a:	2200      	movs	r2, #0
    bc3c:	709a      	strb	r2, [r3, #2]
}
    bc3e:	46c0      	nop			; (mov r8, r8)
    bc40:	46bd      	mov	sp, r7
    bc42:	b002      	add	sp, #8
    bc44:	bd80      	pop	{r7, pc}
	...

0000bc48 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    bc48:	b580      	push	{r7, lr}
    bc4a:	b084      	sub	sp, #16
    bc4c:	af00      	add	r7, sp, #0
    bc4e:	6078      	str	r0, [r7, #4]
    bc50:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    bc52:	683b      	ldr	r3, [r7, #0]
    bc54:	781a      	ldrb	r2, [r3, #0]
    bc56:	687b      	ldr	r3, [r7, #4]
    bc58:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    bc5a:	683b      	ldr	r3, [r7, #0]
    bc5c:	785a      	ldrb	r2, [r3, #1]
    bc5e:	687b      	ldr	r3, [r7, #4]
    bc60:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    bc62:	683b      	ldr	r3, [r7, #0]
    bc64:	789a      	ldrb	r2, [r3, #2]
    bc66:	687b      	ldr	r3, [r7, #4]
    bc68:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    bc6a:	230c      	movs	r3, #12
    bc6c:	18fb      	adds	r3, r7, r3
    bc6e:	0018      	movs	r0, r3
    bc70:	4b0b      	ldr	r3, [pc, #44]	; (bca0 <spi_attach_slave+0x58>)
    bc72:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    bc74:	230c      	movs	r3, #12
    bc76:	18fb      	adds	r3, r7, r3
    bc78:	2201      	movs	r2, #1
    bc7a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    bc7c:	687b      	ldr	r3, [r7, #4]
    bc7e:	781b      	ldrb	r3, [r3, #0]
    bc80:	220c      	movs	r2, #12
    bc82:	18ba      	adds	r2, r7, r2
    bc84:	0011      	movs	r1, r2
    bc86:	0018      	movs	r0, r3
    bc88:	4b06      	ldr	r3, [pc, #24]	; (bca4 <spi_attach_slave+0x5c>)
    bc8a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    bc8c:	687b      	ldr	r3, [r7, #4]
    bc8e:	781b      	ldrb	r3, [r3, #0]
    bc90:	2101      	movs	r1, #1
    bc92:	0018      	movs	r0, r3
    bc94:	4b04      	ldr	r3, [pc, #16]	; (bca8 <spi_attach_slave+0x60>)
    bc96:	4798      	blx	r3
}
    bc98:	46c0      	nop			; (mov r8, r8)
    bc9a:	46bd      	mov	sp, r7
    bc9c:	b004      	add	sp, #16
    bc9e:	bd80      	pop	{r7, pc}
    bca0:	0000bb09 	.word	0x0000bb09
    bca4:	00012fed 	.word	0x00012fed
    bca8:	0000bb2d 	.word	0x0000bb2d

0000bcac <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    bcac:	b580      	push	{r7, lr}
    bcae:	b084      	sub	sp, #16
    bcb0:	af00      	add	r7, sp, #0
    bcb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    bcb4:	687b      	ldr	r3, [r7, #4]
    bcb6:	681b      	ldr	r3, [r3, #0]
    bcb8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    bcba:	687b      	ldr	r3, [r7, #4]
    bcbc:	681b      	ldr	r3, [r3, #0]
    bcbe:	0018      	movs	r0, r3
    bcc0:	4b0b      	ldr	r3, [pc, #44]	; (bcf0 <spi_enable+0x44>)
    bcc2:	4798      	blx	r3
    bcc4:	0003      	movs	r3, r0
    bcc6:	0018      	movs	r0, r3
    bcc8:	4b0a      	ldr	r3, [pc, #40]	; (bcf4 <spi_enable+0x48>)
    bcca:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    bccc:	46c0      	nop			; (mov r8, r8)
    bcce:	687b      	ldr	r3, [r7, #4]
    bcd0:	0018      	movs	r0, r3
    bcd2:	4b09      	ldr	r3, [pc, #36]	; (bcf8 <spi_enable+0x4c>)
    bcd4:	4798      	blx	r3
    bcd6:	1e03      	subs	r3, r0, #0
    bcd8:	d1f9      	bne.n	bcce <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    bcda:	68fb      	ldr	r3, [r7, #12]
    bcdc:	681b      	ldr	r3, [r3, #0]
    bcde:	2202      	movs	r2, #2
    bce0:	431a      	orrs	r2, r3
    bce2:	68fb      	ldr	r3, [r7, #12]
    bce4:	601a      	str	r2, [r3, #0]
}
    bce6:	46c0      	nop			; (mov r8, r8)
    bce8:	46bd      	mov	sp, r7
    bcea:	b004      	add	sp, #16
    bcec:	bd80      	pop	{r7, pc}
    bcee:	46c0      	nop			; (mov r8, r8)
    bcf0:	00013cbd 	.word	0x00013cbd
    bcf4:	0000bab9 	.word	0x0000bab9
    bcf8:	0000bb81 	.word	0x0000bb81

0000bcfc <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    bcfc:	b580      	push	{r7, lr}
    bcfe:	b084      	sub	sp, #16
    bd00:	af00      	add	r7, sp, #0
    bd02:	6078      	str	r0, [r7, #4]
    bd04:	000a      	movs	r2, r1
    bd06:	1cfb      	adds	r3, r7, #3
    bd08:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    bd0a:	230f      	movs	r3, #15
    bd0c:	18fb      	adds	r3, r7, r3
    bd0e:	2200      	movs	r2, #0
    bd10:	701a      	strb	r2, [r3, #0]
	while (size--) {
    bd12:	e038      	b.n	bd86 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    bd14:	687b      	ldr	r3, [r7, #4]
    bd16:	1c5a      	adds	r2, r3, #1
    bd18:	607a      	str	r2, [r7, #4]
    bd1a:	220e      	movs	r2, #14
    bd1c:	18ba      	adds	r2, r7, r2
    bd1e:	781b      	ldrb	r3, [r3, #0]
    bd20:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    bd22:	230d      	movs	r3, #13
    bd24:	18fb      	adds	r3, r7, r3
    bd26:	2200      	movs	r2, #0
    bd28:	701a      	strb	r2, [r3, #0]
    bd2a:	e027      	b.n	bd7c <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    bd2c:	230f      	movs	r3, #15
    bd2e:	18fa      	adds	r2, r7, r3
    bd30:	230f      	movs	r3, #15
    bd32:	18fb      	adds	r3, r7, r3
    bd34:	781b      	ldrb	r3, [r3, #0]
    bd36:	18db      	adds	r3, r3, r3
    bd38:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    bd3a:	230e      	movs	r3, #14
    bd3c:	18fa      	adds	r2, r7, r3
    bd3e:	230f      	movs	r3, #15
    bd40:	18fb      	adds	r3, r7, r3
    bd42:	7812      	ldrb	r2, [r2, #0]
    bd44:	781b      	ldrb	r3, [r3, #0]
    bd46:	4053      	eors	r3, r2
    bd48:	b2db      	uxtb	r3, r3
    bd4a:	b25b      	sxtb	r3, r3
    bd4c:	2b00      	cmp	r3, #0
    bd4e:	da07      	bge.n	bd60 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    bd50:	230f      	movs	r3, #15
    bd52:	18fb      	adds	r3, r7, r3
    bd54:	220f      	movs	r2, #15
    bd56:	18ba      	adds	r2, r7, r2
    bd58:	7812      	ldrb	r2, [r2, #0]
    bd5a:	2109      	movs	r1, #9
    bd5c:	404a      	eors	r2, r1
    bd5e:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    bd60:	230e      	movs	r3, #14
    bd62:	18fa      	adds	r2, r7, r3
    bd64:	230e      	movs	r3, #14
    bd66:	18fb      	adds	r3, r7, r3
    bd68:	781b      	ldrb	r3, [r3, #0]
    bd6a:	18db      	adds	r3, r3, r3
    bd6c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    bd6e:	230d      	movs	r3, #13
    bd70:	18fb      	adds	r3, r7, r3
    bd72:	781a      	ldrb	r2, [r3, #0]
    bd74:	230d      	movs	r3, #13
    bd76:	18fb      	adds	r3, r7, r3
    bd78:	3201      	adds	r2, #1
    bd7a:	701a      	strb	r2, [r3, #0]
    bd7c:	230d      	movs	r3, #13
    bd7e:	18fb      	adds	r3, r7, r3
    bd80:	781b      	ldrb	r3, [r3, #0]
    bd82:	2b07      	cmp	r3, #7
    bd84:	d9d2      	bls.n	bd2c <sd_mmc_spi_crc7+0x30>
	while (size--) {
    bd86:	1cfb      	adds	r3, r7, #3
    bd88:	781b      	ldrb	r3, [r3, #0]
    bd8a:	1cfa      	adds	r2, r7, #3
    bd8c:	1e59      	subs	r1, r3, #1
    bd8e:	7011      	strb	r1, [r2, #0]
    bd90:	2b00      	cmp	r3, #0
    bd92:	d1bf      	bne.n	bd14 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    bd94:	230f      	movs	r3, #15
    bd96:	18fb      	adds	r3, r7, r3
    bd98:	781b      	ldrb	r3, [r3, #0]
    bd9a:	005b      	lsls	r3, r3, #1
    bd9c:	b25b      	sxtb	r3, r3
    bd9e:	2201      	movs	r2, #1
    bda0:	4313      	orrs	r3, r2
    bda2:	b25a      	sxtb	r2, r3
    bda4:	230f      	movs	r3, #15
    bda6:	18fb      	adds	r3, r7, r3
    bda8:	701a      	strb	r2, [r3, #0]
	return crc;
    bdaa:	230f      	movs	r3, #15
    bdac:	18fb      	adds	r3, r7, r3
    bdae:	781b      	ldrb	r3, [r3, #0]
}
    bdb0:	0018      	movs	r0, r3
    bdb2:	46bd      	mov	sp, r7
    bdb4:	b004      	add	sp, #16
    bdb6:	bd80      	pop	{r7, pc}

0000bdb8 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    bdb8:	b590      	push	{r4, r7, lr}
    bdba:	b083      	sub	sp, #12
    bdbc:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    bdbe:	1c7b      	adds	r3, r7, #1
    bdc0:	22ff      	movs	r2, #255	; 0xff
    bdc2:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    bdc4:	1cbb      	adds	r3, r7, #2
    bdc6:	22ff      	movs	r2, #255	; 0xff
    bdc8:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bdca:	1cbb      	adds	r3, r7, #2
    bdcc:	881b      	ldrh	r3, [r3, #0]
    bdce:	1c79      	adds	r1, r7, #1
    bdd0:	4811      	ldr	r0, [pc, #68]	; (be18 <sd_mmc_spi_wait_busy+0x60>)
    bdd2:	2201      	movs	r2, #1
    bdd4:	4c11      	ldr	r4, [pc, #68]	; (be1c <sd_mmc_spi_wait_busy+0x64>)
    bdd6:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    bdd8:	4b11      	ldr	r3, [pc, #68]	; (be20 <sd_mmc_spi_wait_busy+0x68>)
    bdda:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bddc:	1cbb      	adds	r3, r7, #2
    bdde:	881b      	ldrh	r3, [r3, #0]
    bde0:	1c79      	adds	r1, r7, #1
    bde2:	480d      	ldr	r0, [pc, #52]	; (be18 <sd_mmc_spi_wait_busy+0x60>)
    bde4:	2201      	movs	r2, #1
    bde6:	4c0d      	ldr	r4, [pc, #52]	; (be1c <sd_mmc_spi_wait_busy+0x64>)
    bde8:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bdea:	1cbb      	adds	r3, r7, #2
    bdec:	881b      	ldrh	r3, [r3, #0]
    bdee:	1c79      	adds	r1, r7, #1
    bdf0:	4809      	ldr	r0, [pc, #36]	; (be18 <sd_mmc_spi_wait_busy+0x60>)
    bdf2:	2201      	movs	r2, #1
    bdf4:	4c09      	ldr	r4, [pc, #36]	; (be1c <sd_mmc_spi_wait_busy+0x64>)
    bdf6:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    bdf8:	687b      	ldr	r3, [r7, #4]
    bdfa:	1e5a      	subs	r2, r3, #1
    bdfc:	607a      	str	r2, [r7, #4]
    bdfe:	2b00      	cmp	r3, #0
    be00:	d101      	bne.n	be06 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    be02:	2300      	movs	r3, #0
    be04:	e004      	b.n	be10 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    be06:	1c7b      	adds	r3, r7, #1
    be08:	781b      	ldrb	r3, [r3, #0]
    be0a:	2bff      	cmp	r3, #255	; 0xff
    be0c:	d1ed      	bne.n	bdea <sd_mmc_spi_wait_busy+0x32>
	return true;
    be0e:	2301      	movs	r3, #1
}
    be10:	0018      	movs	r0, r3
    be12:	46bd      	mov	sp, r7
    be14:	b003      	add	sp, #12
    be16:	bd90      	pop	{r4, r7, pc}
    be18:	20003cdc 	.word	0x20003cdc
    be1c:	000145fd 	.word	0x000145fd
    be20:	00030d40 	.word	0x00030d40

0000be24 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    be24:	b590      	push	{r4, r7, lr}
    be26:	b083      	sub	sp, #12
    be28:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    be2a:	1cbb      	adds	r3, r7, #2
    be2c:	22ff      	movs	r2, #255	; 0xff
    be2e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    be30:	1c7b      	adds	r3, r7, #1
    be32:	2200      	movs	r2, #0
    be34:	701a      	strb	r2, [r3, #0]
	i = 500000;
    be36:	4b18      	ldr	r3, [pc, #96]	; (be98 <sd_mmc_spi_start_read_block+0x74>)
    be38:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    be3a:	687b      	ldr	r3, [r7, #4]
    be3c:	1e5a      	subs	r2, r3, #1
    be3e:	607a      	str	r2, [r7, #4]
    be40:	2b00      	cmp	r3, #0
    be42:	d104      	bne.n	be4e <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    be44:	4b15      	ldr	r3, [pc, #84]	; (be9c <sd_mmc_spi_start_read_block+0x78>)
    be46:	2204      	movs	r2, #4
    be48:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    be4a:	2300      	movs	r3, #0
    be4c:	e020      	b.n	be90 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    be4e:	1cbb      	adds	r3, r7, #2
    be50:	881b      	ldrh	r3, [r3, #0]
    be52:	1c79      	adds	r1, r7, #1
    be54:	4812      	ldr	r0, [pc, #72]	; (bea0 <sd_mmc_spi_start_read_block+0x7c>)
    be56:	2201      	movs	r2, #1
    be58:	4c12      	ldr	r4, [pc, #72]	; (bea4 <sd_mmc_spi_start_read_block+0x80>)
    be5a:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    be5c:	1c7b      	adds	r3, r7, #1
    be5e:	781b      	ldrb	r3, [r3, #0]
    be60:	001a      	movs	r2, r3
    be62:	23f0      	movs	r3, #240	; 0xf0
    be64:	4013      	ands	r3, r2
    be66:	d10e      	bne.n	be86 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    be68:	1c7b      	adds	r3, r7, #1
    be6a:	781b      	ldrb	r3, [r3, #0]
    be6c:	001a      	movs	r2, r3
    be6e:	2307      	movs	r3, #7
    be70:	4013      	ands	r3, r2
    be72:	d003      	beq.n	be7c <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    be74:	4b09      	ldr	r3, [pc, #36]	; (be9c <sd_mmc_spi_start_read_block+0x78>)
    be76:	2207      	movs	r2, #7
    be78:	701a      	strb	r2, [r3, #0]
    be7a:	e002      	b.n	be82 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    be7c:	4b07      	ldr	r3, [pc, #28]	; (be9c <sd_mmc_spi_start_read_block+0x78>)
    be7e:	220b      	movs	r2, #11
    be80:	701a      	strb	r2, [r3, #0]
			}
			return false;
    be82:	2300      	movs	r3, #0
    be84:	e004      	b.n	be90 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    be86:	1c7b      	adds	r3, r7, #1
    be88:	781b      	ldrb	r3, [r3, #0]
    be8a:	2bfe      	cmp	r3, #254	; 0xfe
    be8c:	d1d5      	bne.n	be3a <sd_mmc_spi_start_read_block+0x16>

	return true;
    be8e:	2301      	movs	r3, #1
}
    be90:	0018      	movs	r0, r3
    be92:	46bd      	mov	sp, r7
    be94:	b003      	add	sp, #12
    be96:	bd90      	pop	{r4, r7, pc}
    be98:	0007a120 	.word	0x0007a120
    be9c:	20003d1f 	.word	0x20003d1f
    bea0:	20003cdc 	.word	0x20003cdc
    bea4:	000145fd 	.word	0x000145fd

0000bea8 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    bea8:	b590      	push	{r4, r7, lr}
    beaa:	b083      	sub	sp, #12
    beac:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    beae:	1dbb      	adds	r3, r7, #6
    beb0:	22ff      	movs	r2, #255	; 0xff
    beb2:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    beb4:	1dbb      	adds	r3, r7, #6
    beb6:	881b      	ldrh	r3, [r3, #0]
    beb8:	1d39      	adds	r1, r7, #4
    beba:	4804      	ldr	r0, [pc, #16]	; (becc <sd_mmc_spi_stop_read_block+0x24>)
    bebc:	2202      	movs	r2, #2
    bebe:	4c04      	ldr	r4, [pc, #16]	; (bed0 <sd_mmc_spi_stop_read_block+0x28>)
    bec0:	47a0      	blx	r4
			dummy);
}
    bec2:	46c0      	nop			; (mov r8, r8)
    bec4:	46bd      	mov	sp, r7
    bec6:	b003      	add	sp, #12
    bec8:	bd90      	pop	{r4, r7, pc}
    beca:	46c0      	nop			; (mov r8, r8)
    becc:	20003cdc 	.word	0x20003cdc
    bed0:	000145fd 	.word	0x000145fd

0000bed4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    bed4:	b580      	push	{r7, lr}
    bed6:	b082      	sub	sp, #8
    bed8:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    beda:	1dfb      	adds	r3, r7, #7
    bedc:	22ff      	movs	r2, #255	; 0xff
    bede:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    bee0:	1df9      	adds	r1, r7, #7
    bee2:	4b0d      	ldr	r3, [pc, #52]	; (bf18 <sd_mmc_spi_start_write_block+0x44>)
    bee4:	2201      	movs	r2, #1
    bee6:	0018      	movs	r0, r3
    bee8:	4b0c      	ldr	r3, [pc, #48]	; (bf1c <sd_mmc_spi_start_write_block+0x48>)
    beea:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    beec:	4b0c      	ldr	r3, [pc, #48]	; (bf20 <sd_mmc_spi_start_write_block+0x4c>)
    beee:	881b      	ldrh	r3, [r3, #0]
    bef0:	2b01      	cmp	r3, #1
    bef2:	d103      	bne.n	befc <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    bef4:	1dbb      	adds	r3, r7, #6
    bef6:	22fe      	movs	r2, #254	; 0xfe
    bef8:	701a      	strb	r2, [r3, #0]
    befa:	e002      	b.n	bf02 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    befc:	1dbb      	adds	r3, r7, #6
    befe:	22fc      	movs	r2, #252	; 0xfc
    bf00:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    bf02:	1db9      	adds	r1, r7, #6
    bf04:	4b04      	ldr	r3, [pc, #16]	; (bf18 <sd_mmc_spi_start_write_block+0x44>)
    bf06:	2201      	movs	r2, #1
    bf08:	0018      	movs	r0, r3
    bf0a:	4b04      	ldr	r3, [pc, #16]	; (bf1c <sd_mmc_spi_start_write_block+0x48>)
    bf0c:	4798      	blx	r3
}
    bf0e:	46c0      	nop			; (mov r8, r8)
    bf10:	46bd      	mov	sp, r7
    bf12:	b002      	add	sp, #8
    bf14:	bd80      	pop	{r7, pc}
    bf16:	46c0      	nop			; (mov r8, r8)
    bf18:	20003cdc 	.word	0x20003cdc
    bf1c:	00014821 	.word	0x00014821
    bf20:	20003d2a 	.word	0x20003d2a

0000bf24 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    bf24:	b590      	push	{r4, r7, lr}
    bf26:	b083      	sub	sp, #12
    bf28:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    bf2a:	1dbb      	adds	r3, r7, #6
    bf2c:	22ff      	movs	r2, #255	; 0xff
    bf2e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    bf30:	1cbb      	adds	r3, r7, #2
    bf32:	2201      	movs	r2, #1
    bf34:	4252      	negs	r2, r2
    bf36:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    bf38:	1cb9      	adds	r1, r7, #2
    bf3a:	4b1b      	ldr	r3, [pc, #108]	; (bfa8 <sd_mmc_spi_stop_write_block+0x84>)
    bf3c:	2202      	movs	r2, #2
    bf3e:	0018      	movs	r0, r3
    bf40:	4b1a      	ldr	r3, [pc, #104]	; (bfac <sd_mmc_spi_stop_write_block+0x88>)
    bf42:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    bf44:	1dbb      	adds	r3, r7, #6
    bf46:	881b      	ldrh	r3, [r3, #0]
    bf48:	1d79      	adds	r1, r7, #5
    bf4a:	4817      	ldr	r0, [pc, #92]	; (bfa8 <sd_mmc_spi_stop_write_block+0x84>)
    bf4c:	2201      	movs	r2, #1
    bf4e:	4c18      	ldr	r4, [pc, #96]	; (bfb0 <sd_mmc_spi_stop_write_block+0x8c>)
    bf50:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    bf52:	1d7b      	adds	r3, r7, #5
    bf54:	781b      	ldrb	r3, [r3, #0]
    bf56:	001a      	movs	r2, r3
    bf58:	2310      	movs	r3, #16
    bf5a:	4013      	ands	r3, r2
    bf5c:	d105      	bne.n	bf6a <sd_mmc_spi_stop_write_block+0x46>
    bf5e:	1d7b      	adds	r3, r7, #5
    bf60:	781b      	ldrb	r3, [r3, #0]
    bf62:	001a      	movs	r2, r3
    bf64:	2301      	movs	r3, #1
    bf66:	4013      	ands	r3, r2
    bf68:	d104      	bne.n	bf74 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    bf6a:	4b12      	ldr	r3, [pc, #72]	; (bfb4 <sd_mmc_spi_stop_write_block+0x90>)
    bf6c:	2201      	movs	r2, #1
    bf6e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    bf70:	2300      	movs	r3, #0
    bf72:	e014      	b.n	bf9e <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    bf74:	1d7b      	adds	r3, r7, #5
    bf76:	781b      	ldrb	r3, [r3, #0]
    bf78:	001a      	movs	r2, r3
    bf7a:	231e      	movs	r3, #30
    bf7c:	4013      	ands	r3, r2
    bf7e:	2b04      	cmp	r3, #4
    bf80:	d00b      	beq.n	bf9a <sd_mmc_spi_stop_write_block+0x76>
    bf82:	2b0a      	cmp	r3, #10
    bf84:	d104      	bne.n	bf90 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    bf86:	4b0b      	ldr	r3, [pc, #44]	; (bfb4 <sd_mmc_spi_stop_write_block+0x90>)
    bf88:	2208      	movs	r2, #8
    bf8a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    bf8c:	2300      	movs	r3, #0
    bf8e:	e006      	b.n	bf9e <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    bf90:	4b08      	ldr	r3, [pc, #32]	; (bfb4 <sd_mmc_spi_stop_write_block+0x90>)
    bf92:	220a      	movs	r2, #10
    bf94:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    bf96:	2300      	movs	r3, #0
    bf98:	e001      	b.n	bf9e <sd_mmc_spi_stop_write_block+0x7a>
		break;
    bf9a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    bf9c:	2301      	movs	r3, #1
}
    bf9e:	0018      	movs	r0, r3
    bfa0:	46bd      	mov	sp, r7
    bfa2:	b003      	add	sp, #12
    bfa4:	bd90      	pop	{r4, r7, pc}
    bfa6:	46c0      	nop			; (mov r8, r8)
    bfa8:	20003cdc 	.word	0x20003cdc
    bfac:	00014821 	.word	0x00014821
    bfb0:	000145fd 	.word	0x000145fd
    bfb4:	20003d1f 	.word	0x20003d1f

0000bfb8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    bfb8:	b590      	push	{r4, r7, lr}
    bfba:	b083      	sub	sp, #12
    bfbc:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    bfbe:	4b1d      	ldr	r3, [pc, #116]	; (c034 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    bfc0:	881b      	ldrh	r3, [r3, #0]
    bfc2:	2b01      	cmp	r3, #1
    bfc4:	d101      	bne.n	bfca <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    bfc6:	2301      	movs	r3, #1
    bfc8:	e030      	b.n	c02c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    bfca:	4b1a      	ldr	r3, [pc, #104]	; (c034 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    bfcc:	881b      	ldrh	r3, [r3, #0]
    bfce:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    bfd0:	4b19      	ldr	r3, [pc, #100]	; (c038 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    bfd2:	681a      	ldr	r2, [r3, #0]
    bfd4:	4b19      	ldr	r3, [pc, #100]	; (c03c <sd_mmc_spi_stop_multiwrite_block+0x84>)
    bfd6:	881b      	ldrh	r3, [r3, #0]
    bfd8:	0019      	movs	r1, r3
    bfda:	4b19      	ldr	r3, [pc, #100]	; (c040 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    bfdc:	0010      	movs	r0, r2
    bfde:	4798      	blx	r3
    bfe0:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    bfe2:	429c      	cmp	r4, r3
    bfe4:	d901      	bls.n	bfea <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    bfe6:	2301      	movs	r3, #1
    bfe8:	e020      	b.n	c02c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    bfea:	1dfb      	adds	r3, r7, #7
    bfec:	22ff      	movs	r2, #255	; 0xff
    bfee:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    bff0:	1df9      	adds	r1, r7, #7
    bff2:	4b14      	ldr	r3, [pc, #80]	; (c044 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    bff4:	2201      	movs	r2, #1
    bff6:	0018      	movs	r0, r3
    bff8:	4b13      	ldr	r3, [pc, #76]	; (c048 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    bffa:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    bffc:	1dfb      	adds	r3, r7, #7
    bffe:	22fd      	movs	r2, #253	; 0xfd
    c000:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    c002:	1df9      	adds	r1, r7, #7
    c004:	4b0f      	ldr	r3, [pc, #60]	; (c044 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    c006:	2201      	movs	r2, #1
    c008:	0018      	movs	r0, r3
    c00a:	4b0f      	ldr	r3, [pc, #60]	; (c048 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    c00c:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    c00e:	4b0f      	ldr	r3, [pc, #60]	; (c04c <sd_mmc_spi_stop_multiwrite_block+0x94>)
    c010:	4798      	blx	r3
    c012:	0003      	movs	r3, r0
    c014:	001a      	movs	r2, r3
    c016:	2301      	movs	r3, #1
    c018:	4053      	eors	r3, r2
    c01a:	b2db      	uxtb	r3, r3
    c01c:	2b00      	cmp	r3, #0
    c01e:	d004      	beq.n	c02a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c020:	4b0b      	ldr	r3, [pc, #44]	; (c050 <sd_mmc_spi_stop_multiwrite_block+0x98>)
    c022:	2205      	movs	r2, #5
    c024:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    c026:	2300      	movs	r3, #0
    c028:	e000      	b.n	c02c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    c02a:	2301      	movs	r3, #1
}
    c02c:	0018      	movs	r0, r3
    c02e:	46bd      	mov	sp, r7
    c030:	b003      	add	sp, #12
    c032:	bd90      	pop	{r4, r7, pc}
    c034:	20003d2a 	.word	0x20003d2a
    c038:	20003d24 	.word	0x20003d24
    c03c:	20003d28 	.word	0x20003d28
    c040:	0001ef45 	.word	0x0001ef45
    c044:	20003cdc 	.word	0x20003cdc
    c048:	00014821 	.word	0x00014821
    c04c:	0000bdb9 	.word	0x0000bdb9
    c050:	20003d1f 	.word	0x20003d1f

0000c054 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    c054:	b580      	push	{r7, lr}
    c056:	b090      	sub	sp, #64	; 0x40
    c058:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c05a:	4b1f      	ldr	r3, [pc, #124]	; (c0d8 <sd_mmc_spi_init+0x84>)
    c05c:	2200      	movs	r2, #0
    c05e:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    c060:	233c      	movs	r3, #60	; 0x3c
    c062:	18fb      	adds	r3, r7, r3
    c064:	0018      	movs	r0, r3
    c066:	4b1d      	ldr	r3, [pc, #116]	; (c0dc <sd_mmc_spi_init+0x88>)
    c068:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    c06a:	1d3b      	adds	r3, r7, #4
    c06c:	0018      	movs	r0, r3
    c06e:	4b1c      	ldr	r3, [pc, #112]	; (c0e0 <sd_mmc_spi_init+0x8c>)
    c070:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    c072:	1d3b      	adds	r3, r7, #4
    c074:	2280      	movs	r2, #128	; 0x80
    c076:	0252      	lsls	r2, r2, #9
    c078:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    c07a:	1d3b      	adds	r3, r7, #4
    c07c:	4a19      	ldr	r2, [pc, #100]	; (c0e4 <sd_mmc_spi_init+0x90>)
    c07e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    c080:	1d3b      	adds	r3, r7, #4
    c082:	4a19      	ldr	r2, [pc, #100]	; (c0e8 <sd_mmc_spi_init+0x94>)
    c084:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    c086:	1d3b      	adds	r3, r7, #4
    c088:	4a18      	ldr	r2, [pc, #96]	; (c0ec <sd_mmc_spi_init+0x98>)
    c08a:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    c08c:	1d3b      	adds	r3, r7, #4
    c08e:	4a18      	ldr	r2, [pc, #96]	; (c0f0 <sd_mmc_spi_init+0x9c>)
    c090:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    c092:	1d3b      	adds	r3, r7, #4
    c094:	2224      	movs	r2, #36	; 0x24
    c096:	2100      	movs	r1, #0
    c098:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    c09a:	1d3b      	adds	r3, r7, #4
    c09c:	4a15      	ldr	r2, [pc, #84]	; (c0f4 <sd_mmc_spi_init+0xa0>)
    c09e:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    c0a0:	1d3a      	adds	r2, r7, #4
    c0a2:	4915      	ldr	r1, [pc, #84]	; (c0f8 <sd_mmc_spi_init+0xa4>)
    c0a4:	4b15      	ldr	r3, [pc, #84]	; (c0fc <sd_mmc_spi_init+0xa8>)
    c0a6:	0018      	movs	r0, r3
    c0a8:	4b15      	ldr	r3, [pc, #84]	; (c100 <sd_mmc_spi_init+0xac>)
    c0aa:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    c0ac:	4b13      	ldr	r3, [pc, #76]	; (c0fc <sd_mmc_spi_init+0xa8>)
    c0ae:	0018      	movs	r0, r3
    c0b0:	4b14      	ldr	r3, [pc, #80]	; (c104 <sd_mmc_spi_init+0xb0>)
    c0b2:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    c0b4:	4b14      	ldr	r3, [pc, #80]	; (c108 <sd_mmc_spi_init+0xb4>)
    c0b6:	0018      	movs	r0, r3
    c0b8:	4b14      	ldr	r3, [pc, #80]	; (c10c <sd_mmc_spi_init+0xb8>)
    c0ba:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    c0bc:	4b14      	ldr	r3, [pc, #80]	; (c110 <sd_mmc_spi_init+0xbc>)
    c0be:	781a      	ldrb	r2, [r3, #0]
    c0c0:	4b11      	ldr	r3, [pc, #68]	; (c108 <sd_mmc_spi_init+0xb4>)
    c0c2:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    c0c4:	4a10      	ldr	r2, [pc, #64]	; (c108 <sd_mmc_spi_init+0xb4>)
    c0c6:	4b13      	ldr	r3, [pc, #76]	; (c114 <sd_mmc_spi_init+0xc0>)
    c0c8:	0011      	movs	r1, r2
    c0ca:	0018      	movs	r0, r3
    c0cc:	4b12      	ldr	r3, [pc, #72]	; (c118 <sd_mmc_spi_init+0xc4>)
    c0ce:	4798      	blx	r3
}
    c0d0:	46c0      	nop			; (mov r8, r8)
    c0d2:	46bd      	mov	sp, r7
    c0d4:	b010      	add	sp, #64	; 0x40
    c0d6:	bd80      	pop	{r7, pc}
    c0d8:	20003d1f 	.word	0x20003d1f
    c0dc:	0000bb09 	.word	0x0000bb09
    c0e0:	0000bba1 	.word	0x0000bba1
    c0e4:	00100002 	.word	0x00100002
    c0e8:	00110002 	.word	0x00110002
    c0ec:	00120002 	.word	0x00120002
    c0f0:	00130002 	.word	0x00130002
    c0f4:	00061a80 	.word	0x00061a80
    c0f8:	42000c00 	.word	0x42000c00
    c0fc:	20003cdc 	.word	0x20003cdc
    c100:	0001446d 	.word	0x0001446d
    c104:	0000bcad 	.word	0x0000bcad
    c108:	20003d1c 	.word	0x20003d1c
    c10c:	0000bc25 	.word	0x0000bc25
    c110:	20000114 	.word	0x20000114
    c114:	20003d18 	.word	0x20003d18
    c118:	0000bc49 	.word	0x0000bc49

0000c11c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    c11c:	b590      	push	{r4, r7, lr}
    c11e:	b083      	sub	sp, #12
    c120:	af00      	add	r7, sp, #0
    c122:	0004      	movs	r4, r0
    c124:	6039      	str	r1, [r7, #0]
    c126:	0010      	movs	r0, r2
    c128:	0019      	movs	r1, r3
    c12a:	1dfb      	adds	r3, r7, #7
    c12c:	1c22      	adds	r2, r4, #0
    c12e:	701a      	strb	r2, [r3, #0]
    c130:	1dbb      	adds	r3, r7, #6
    c132:	1c02      	adds	r2, r0, #0
    c134:	701a      	strb	r2, [r3, #0]
    c136:	1d7b      	adds	r3, r7, #5
    c138:	1c0a      	adds	r2, r1, #0
    c13a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c13c:	4b13      	ldr	r3, [pc, #76]	; (c18c <sd_mmc_spi_select_device+0x70>)
    c13e:	2200      	movs	r2, #0
    c140:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    c142:	683b      	ldr	r3, [r7, #0]
    c144:	4a12      	ldr	r2, [pc, #72]	; (c190 <sd_mmc_spi_select_device+0x74>)
    c146:	4293      	cmp	r3, r2
    c148:	d907      	bls.n	c15a <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    c14a:	4b11      	ldr	r3, [pc, #68]	; (c190 <sd_mmc_spi_select_device+0x74>)
    c14c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c14e:	e004      	b.n	c15a <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    c150:	683b      	ldr	r3, [r7, #0]
    c152:	08db      	lsrs	r3, r3, #3
    c154:	683a      	ldr	r2, [r7, #0]
    c156:	1ad3      	subs	r3, r2, r3
    c158:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c15a:	683a      	ldr	r2, [r7, #0]
    c15c:	4b0d      	ldr	r3, [pc, #52]	; (c194 <sd_mmc_spi_select_device+0x78>)
    c15e:	0011      	movs	r1, r2
    c160:	0018      	movs	r0, r3
    c162:	4b0d      	ldr	r3, [pc, #52]	; (c198 <sd_mmc_spi_select_device+0x7c>)
    c164:	4798      	blx	r3
    c166:	0003      	movs	r3, r0
    c168:	2b17      	cmp	r3, #23
    c16a:	d0f1      	beq.n	c150 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    c16c:	1dfb      	adds	r3, r7, #7
    c16e:	781a      	ldrb	r2, [r3, #0]
    c170:	0013      	movs	r3, r2
    c172:	005b      	lsls	r3, r3, #1
    c174:	189b      	adds	r3, r3, r2
    c176:	4a09      	ldr	r2, [pc, #36]	; (c19c <sd_mmc_spi_select_device+0x80>)
    c178:	1899      	adds	r1, r3, r2
    c17a:	4b06      	ldr	r3, [pc, #24]	; (c194 <sd_mmc_spi_select_device+0x78>)
    c17c:	2201      	movs	r2, #1
    c17e:	0018      	movs	r0, r3
    c180:	4b07      	ldr	r3, [pc, #28]	; (c1a0 <sd_mmc_spi_select_device+0x84>)
    c182:	4798      	blx	r3
}
    c184:	46c0      	nop			; (mov r8, r8)
    c186:	46bd      	mov	sp, r7
    c188:	b003      	add	sp, #12
    c18a:	bd90      	pop	{r4, r7, pc}
    c18c:	20003d1f 	.word	0x20003d1f
    c190:	00989680 	.word	0x00989680
    c194:	20003cdc 	.word	0x20003cdc
    c198:	00014195 	.word	0x00014195
    c19c:	20003d18 	.word	0x20003d18
    c1a0:	00014731 	.word	0x00014731

0000c1a4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    c1a4:	b580      	push	{r7, lr}
    c1a6:	b082      	sub	sp, #8
    c1a8:	af00      	add	r7, sp, #0
    c1aa:	0002      	movs	r2, r0
    c1ac:	1dfb      	adds	r3, r7, #7
    c1ae:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c1b0:	4b09      	ldr	r3, [pc, #36]	; (c1d8 <sd_mmc_spi_deselect_device+0x34>)
    c1b2:	2200      	movs	r2, #0
    c1b4:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    c1b6:	1dfb      	adds	r3, r7, #7
    c1b8:	781a      	ldrb	r2, [r3, #0]
    c1ba:	0013      	movs	r3, r2
    c1bc:	005b      	lsls	r3, r3, #1
    c1be:	189b      	adds	r3, r3, r2
    c1c0:	4a06      	ldr	r2, [pc, #24]	; (c1dc <sd_mmc_spi_deselect_device+0x38>)
    c1c2:	1899      	adds	r1, r3, r2
    c1c4:	4b06      	ldr	r3, [pc, #24]	; (c1e0 <sd_mmc_spi_deselect_device+0x3c>)
    c1c6:	2200      	movs	r2, #0
    c1c8:	0018      	movs	r0, r3
    c1ca:	4b06      	ldr	r3, [pc, #24]	; (c1e4 <sd_mmc_spi_deselect_device+0x40>)
    c1cc:	4798      	blx	r3
}
    c1ce:	46c0      	nop			; (mov r8, r8)
    c1d0:	46bd      	mov	sp, r7
    c1d2:	b002      	add	sp, #8
    c1d4:	bd80      	pop	{r7, pc}
    c1d6:	46c0      	nop			; (mov r8, r8)
    c1d8:	20003d1f 	.word	0x20003d1f
    c1dc:	20003d18 	.word	0x20003d18
    c1e0:	20003cdc 	.word	0x20003cdc
    c1e4:	00014731 	.word	0x00014731

0000c1e8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    c1e8:	b580      	push	{r7, lr}
    c1ea:	b082      	sub	sp, #8
    c1ec:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    c1ee:	1dbb      	adds	r3, r7, #6
    c1f0:	22ff      	movs	r2, #255	; 0xff
    c1f2:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c1f4:	4b0c      	ldr	r3, [pc, #48]	; (c228 <sd_mmc_spi_send_clock+0x40>)
    c1f6:	2200      	movs	r2, #0
    c1f8:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    c1fa:	1dfb      	adds	r3, r7, #7
    c1fc:	2200      	movs	r2, #0
    c1fe:	701a      	strb	r2, [r3, #0]
    c200:	e00a      	b.n	c218 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    c202:	1db9      	adds	r1, r7, #6
    c204:	4b09      	ldr	r3, [pc, #36]	; (c22c <sd_mmc_spi_send_clock+0x44>)
    c206:	2201      	movs	r2, #1
    c208:	0018      	movs	r0, r3
    c20a:	4b09      	ldr	r3, [pc, #36]	; (c230 <sd_mmc_spi_send_clock+0x48>)
    c20c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    c20e:	1dfb      	adds	r3, r7, #7
    c210:	781a      	ldrb	r2, [r3, #0]
    c212:	1dfb      	adds	r3, r7, #7
    c214:	3201      	adds	r2, #1
    c216:	701a      	strb	r2, [r3, #0]
    c218:	1dfb      	adds	r3, r7, #7
    c21a:	781b      	ldrb	r3, [r3, #0]
    c21c:	2b09      	cmp	r3, #9
    c21e:	d9f0      	bls.n	c202 <sd_mmc_spi_send_clock+0x1a>
	}
}
    c220:	46c0      	nop			; (mov r8, r8)
    c222:	46bd      	mov	sp, r7
    c224:	b002      	add	sp, #8
    c226:	bd80      	pop	{r7, pc}
    c228:	20003d1f 	.word	0x20003d1f
    c22c:	20003cdc 	.word	0x20003cdc
    c230:	00014821 	.word	0x00014821

0000c234 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    c234:	b590      	push	{r4, r7, lr}
    c236:	b085      	sub	sp, #20
    c238:	af02      	add	r7, sp, #8
    c23a:	6078      	str	r0, [r7, #4]
    c23c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    c23e:	6839      	ldr	r1, [r7, #0]
    c240:	6878      	ldr	r0, [r7, #4]
    c242:	2300      	movs	r3, #0
    c244:	9300      	str	r3, [sp, #0]
    c246:	2300      	movs	r3, #0
    c248:	2200      	movs	r2, #0
    c24a:	4c03      	ldr	r4, [pc, #12]	; (c258 <sd_mmc_spi_send_cmd+0x24>)
    c24c:	47a0      	blx	r4
    c24e:	0003      	movs	r3, r0
}
    c250:	0018      	movs	r0, r3
    c252:	46bd      	mov	sp, r7
    c254:	b003      	add	sp, #12
    c256:	bd90      	pop	{r4, r7, pc}
    c258:	0000c25d 	.word	0x0000c25d

0000c25c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    c25c:	b590      	push	{r4, r7, lr}
    c25e:	b089      	sub	sp, #36	; 0x24
    c260:	af00      	add	r7, sp, #0
    c262:	60f8      	str	r0, [r7, #12]
    c264:	60b9      	str	r1, [r7, #8]
    c266:	0019      	movs	r1, r3
    c268:	1dbb      	adds	r3, r7, #6
    c26a:	801a      	strh	r2, [r3, #0]
    c26c:	1d3b      	adds	r3, r7, #4
    c26e:	1c0a      	adds	r2, r1, #0
    c270:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    c272:	231b      	movs	r3, #27
    c274:	18fb      	adds	r3, r7, r3
    c276:	22ff      	movs	r2, #255	; 0xff
    c278:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    c27a:	231c      	movs	r3, #28
    c27c:	18fb      	adds	r3, r7, r3
    c27e:	22ff      	movs	r2, #255	; 0xff
    c280:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c282:	4b72      	ldr	r3, [pc, #456]	; (c44c <sd_mmc_spi_adtc_start+0x1f0>)
    c284:	2200      	movs	r2, #0
    c286:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    c288:	68fb      	ldr	r3, [r7, #12]
    c28a:	b2db      	uxtb	r3, r3
    c28c:	223f      	movs	r2, #63	; 0x3f
    c28e:	4013      	ands	r3, r2
    c290:	b2db      	uxtb	r3, r3
    c292:	2240      	movs	r2, #64	; 0x40
    c294:	4313      	orrs	r3, r2
    c296:	b2da      	uxtb	r2, r3
    c298:	2314      	movs	r3, #20
    c29a:	18fb      	adds	r3, r7, r3
    c29c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    c29e:	68bb      	ldr	r3, [r7, #8]
    c2a0:	0e1b      	lsrs	r3, r3, #24
    c2a2:	b2da      	uxtb	r2, r3
    c2a4:	2314      	movs	r3, #20
    c2a6:	18fb      	adds	r3, r7, r3
    c2a8:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    c2aa:	68bb      	ldr	r3, [r7, #8]
    c2ac:	0c1b      	lsrs	r3, r3, #16
    c2ae:	b2da      	uxtb	r2, r3
    c2b0:	2314      	movs	r3, #20
    c2b2:	18fb      	adds	r3, r7, r3
    c2b4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    c2b6:	68bb      	ldr	r3, [r7, #8]
    c2b8:	0a1b      	lsrs	r3, r3, #8
    c2ba:	b2da      	uxtb	r2, r3
    c2bc:	2314      	movs	r3, #20
    c2be:	18fb      	adds	r3, r7, r3
    c2c0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    c2c2:	68bb      	ldr	r3, [r7, #8]
    c2c4:	b2da      	uxtb	r2, r3
    c2c6:	2314      	movs	r3, #20
    c2c8:	18fb      	adds	r3, r7, r3
    c2ca:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    c2cc:	2314      	movs	r3, #20
    c2ce:	18fb      	adds	r3, r7, r3
    c2d0:	2105      	movs	r1, #5
    c2d2:	0018      	movs	r0, r3
    c2d4:	4b5e      	ldr	r3, [pc, #376]	; (c450 <sd_mmc_spi_adtc_start+0x1f4>)
    c2d6:	4798      	blx	r3
    c2d8:	0003      	movs	r3, r0
    c2da:	001a      	movs	r2, r3
    c2dc:	2314      	movs	r3, #20
    c2de:	18fb      	adds	r3, r7, r3
    c2e0:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    c2e2:	231b      	movs	r3, #27
    c2e4:	18f9      	adds	r1, r7, r3
    c2e6:	4b5b      	ldr	r3, [pc, #364]	; (c454 <sd_mmc_spi_adtc_start+0x1f8>)
    c2e8:	2201      	movs	r2, #1
    c2ea:	0018      	movs	r0, r3
    c2ec:	4b5a      	ldr	r3, [pc, #360]	; (c458 <sd_mmc_spi_adtc_start+0x1fc>)
    c2ee:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    c2f0:	2314      	movs	r3, #20
    c2f2:	18f9      	adds	r1, r7, r3
    c2f4:	4b57      	ldr	r3, [pc, #348]	; (c454 <sd_mmc_spi_adtc_start+0x1f8>)
    c2f6:	2206      	movs	r2, #6
    c2f8:	0018      	movs	r0, r3
    c2fa:	4b57      	ldr	r3, [pc, #348]	; (c458 <sd_mmc_spi_adtc_start+0x1fc>)
    c2fc:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    c2fe:	2313      	movs	r3, #19
    c300:	18fb      	adds	r3, r7, r3
    c302:	22ff      	movs	r2, #255	; 0xff
    c304:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c306:	231c      	movs	r3, #28
    c308:	18fb      	adds	r3, r7, r3
    c30a:	881b      	ldrh	r3, [r3, #0]
    c30c:	2213      	movs	r2, #19
    c30e:	18b9      	adds	r1, r7, r2
    c310:	4850      	ldr	r0, [pc, #320]	; (c454 <sd_mmc_spi_adtc_start+0x1f8>)
    c312:	2201      	movs	r2, #1
    c314:	4c51      	ldr	r4, [pc, #324]	; (c45c <sd_mmc_spi_adtc_start+0x200>)
    c316:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    c318:	231f      	movs	r3, #31
    c31a:	18fb      	adds	r3, r7, r3
    c31c:	2207      	movs	r2, #7
    c31e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c320:	231c      	movs	r3, #28
    c322:	18fb      	adds	r3, r7, r3
    c324:	881b      	ldrh	r3, [r3, #0]
    c326:	2213      	movs	r2, #19
    c328:	18b9      	adds	r1, r7, r2
    c32a:	484a      	ldr	r0, [pc, #296]	; (c454 <sd_mmc_spi_adtc_start+0x1f8>)
    c32c:	2201      	movs	r2, #1
    c32e:	4c4b      	ldr	r4, [pc, #300]	; (c45c <sd_mmc_spi_adtc_start+0x200>)
    c330:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    c332:	2313      	movs	r3, #19
    c334:	18fb      	adds	r3, r7, r3
    c336:	781b      	ldrb	r3, [r3, #0]
    c338:	b25b      	sxtb	r3, r3
    c33a:	2b00      	cmp	r3, #0
    c33c:	da10      	bge.n	c360 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    c33e:	231f      	movs	r3, #31
    c340:	18fb      	adds	r3, r7, r3
    c342:	221f      	movs	r2, #31
    c344:	18ba      	adds	r2, r7, r2
    c346:	7812      	ldrb	r2, [r2, #0]
    c348:	3a01      	subs	r2, #1
    c34a:	701a      	strb	r2, [r3, #0]
    c34c:	231f      	movs	r3, #31
    c34e:	18fb      	adds	r3, r7, r3
    c350:	781b      	ldrb	r3, [r3, #0]
    c352:	2b00      	cmp	r3, #0
    c354:	d1e4      	bne.n	c320 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    c356:	4b3d      	ldr	r3, [pc, #244]	; (c44c <sd_mmc_spi_adtc_start+0x1f0>)
    c358:	2202      	movs	r2, #2
    c35a:	701a      	strb	r2, [r3, #0]
			return false;
    c35c:	2300      	movs	r3, #0
    c35e:	e070      	b.n	c442 <sd_mmc_spi_adtc_start+0x1e6>
			break;
    c360:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    c362:	2313      	movs	r3, #19
    c364:	18fb      	adds	r3, r7, r3
    c366:	781b      	ldrb	r3, [r3, #0]
    c368:	001a      	movs	r2, r3
    c36a:	4b3d      	ldr	r3, [pc, #244]	; (c460 <sd_mmc_spi_adtc_start+0x204>)
    c36c:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    c36e:	2313      	movs	r3, #19
    c370:	18fb      	adds	r3, r7, r3
    c372:	781b      	ldrb	r3, [r3, #0]
    c374:	001a      	movs	r2, r3
    c376:	2308      	movs	r3, #8
    c378:	4013      	ands	r3, r2
    c37a:	d004      	beq.n	c386 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    c37c:	4b33      	ldr	r3, [pc, #204]	; (c44c <sd_mmc_spi_adtc_start+0x1f0>)
    c37e:	2206      	movs	r2, #6
    c380:	701a      	strb	r2, [r3, #0]
		return false;
    c382:	2300      	movs	r3, #0
    c384:	e05d      	b.n	c442 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    c386:	2313      	movs	r3, #19
    c388:	18fb      	adds	r3, r7, r3
    c38a:	781b      	ldrb	r3, [r3, #0]
    c38c:	001a      	movs	r2, r3
    c38e:	2304      	movs	r3, #4
    c390:	4013      	ands	r3, r2
    c392:	d004      	beq.n	c39e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    c394:	4b2d      	ldr	r3, [pc, #180]	; (c44c <sd_mmc_spi_adtc_start+0x1f0>)
    c396:	2209      	movs	r2, #9
    c398:	701a      	strb	r2, [r3, #0]
		return false;
    c39a:	2300      	movs	r3, #0
    c39c:	e051      	b.n	c442 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    c39e:	2313      	movs	r3, #19
    c3a0:	18fb      	adds	r3, r7, r3
    c3a2:	781b      	ldrb	r3, [r3, #0]
    c3a4:	001a      	movs	r2, r3
    c3a6:	2301      	movs	r3, #1
    c3a8:	439a      	bics	r2, r3
    c3aa:	1e13      	subs	r3, r2, #0
    c3ac:	d004      	beq.n	c3b8 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    c3ae:	4b27      	ldr	r3, [pc, #156]	; (c44c <sd_mmc_spi_adtc_start+0x1f0>)
    c3b0:	2201      	movs	r2, #1
    c3b2:	701a      	strb	r2, [r3, #0]
		return false;
    c3b4:	2300      	movs	r3, #0
    c3b6:	e044      	b.n	c442 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    c3b8:	68fa      	ldr	r2, [r7, #12]
    c3ba:	2380      	movs	r3, #128	; 0x80
    c3bc:	019b      	lsls	r3, r3, #6
    c3be:	4013      	ands	r3, r2
    c3c0:	d00d      	beq.n	c3de <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    c3c2:	4b28      	ldr	r3, [pc, #160]	; (c464 <sd_mmc_spi_adtc_start+0x208>)
    c3c4:	4798      	blx	r3
    c3c6:	0003      	movs	r3, r0
    c3c8:	001a      	movs	r2, r3
    c3ca:	2301      	movs	r3, #1
    c3cc:	4053      	eors	r3, r2
    c3ce:	b2db      	uxtb	r3, r3
    c3d0:	2b00      	cmp	r3, #0
    c3d2:	d004      	beq.n	c3de <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    c3d4:	4b1d      	ldr	r3, [pc, #116]	; (c44c <sd_mmc_spi_adtc_start+0x1f0>)
    c3d6:	2203      	movs	r2, #3
    c3d8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    c3da:	2300      	movs	r3, #0
    c3dc:	e031      	b.n	c442 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    c3de:	68fa      	ldr	r2, [r7, #12]
    c3e0:	2380      	movs	r3, #128	; 0x80
    c3e2:	009b      	lsls	r3, r3, #2
    c3e4:	4013      	ands	r3, r2
    c3e6:	d00e      	beq.n	c406 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    c3e8:	4b1d      	ldr	r3, [pc, #116]	; (c460 <sd_mmc_spi_adtc_start+0x204>)
    c3ea:	2200      	movs	r2, #0
    c3ec:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    c3ee:	231c      	movs	r3, #28
    c3f0:	18fb      	adds	r3, r7, r3
    c3f2:	881b      	ldrh	r3, [r3, #0]
    c3f4:	491a      	ldr	r1, [pc, #104]	; (c460 <sd_mmc_spi_adtc_start+0x204>)
    c3f6:	4817      	ldr	r0, [pc, #92]	; (c454 <sd_mmc_spi_adtc_start+0x1f8>)
    c3f8:	2201      	movs	r2, #1
    c3fa:	4c18      	ldr	r4, [pc, #96]	; (c45c <sd_mmc_spi_adtc_start+0x200>)
    c3fc:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    c3fe:	4b18      	ldr	r3, [pc, #96]	; (c460 <sd_mmc_spi_adtc_start+0x204>)
    c400:	681a      	ldr	r2, [r3, #0]
    c402:	4b17      	ldr	r3, [pc, #92]	; (c460 <sd_mmc_spi_adtc_start+0x204>)
    c404:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    c406:	68fa      	ldr	r2, [r7, #12]
    c408:	2380      	movs	r3, #128	; 0x80
    c40a:	00db      	lsls	r3, r3, #3
    c40c:	4013      	ands	r3, r2
    c40e:	d00c      	beq.n	c42a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    c410:	231c      	movs	r3, #28
    c412:	18fb      	adds	r3, r7, r3
    c414:	881b      	ldrh	r3, [r3, #0]
    c416:	4912      	ldr	r1, [pc, #72]	; (c460 <sd_mmc_spi_adtc_start+0x204>)
    c418:	480e      	ldr	r0, [pc, #56]	; (c454 <sd_mmc_spi_adtc_start+0x1f8>)
    c41a:	2204      	movs	r2, #4
    c41c:	4c0f      	ldr	r4, [pc, #60]	; (c45c <sd_mmc_spi_adtc_start+0x200>)
    c41e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    c420:	4b0f      	ldr	r3, [pc, #60]	; (c460 <sd_mmc_spi_adtc_start+0x204>)
    c422:	681b      	ldr	r3, [r3, #0]
    c424:	ba1a      	rev	r2, r3
    c426:	4b0e      	ldr	r3, [pc, #56]	; (c460 <sd_mmc_spi_adtc_start+0x204>)
    c428:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    c42a:	4b0f      	ldr	r3, [pc, #60]	; (c468 <sd_mmc_spi_adtc_start+0x20c>)
    c42c:	1dba      	adds	r2, r7, #6
    c42e:	8812      	ldrh	r2, [r2, #0]
    c430:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    c432:	4b0e      	ldr	r3, [pc, #56]	; (c46c <sd_mmc_spi_adtc_start+0x210>)
    c434:	1d3a      	adds	r2, r7, #4
    c436:	8812      	ldrh	r2, [r2, #0]
    c438:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    c43a:	4b0d      	ldr	r3, [pc, #52]	; (c470 <sd_mmc_spi_adtc_start+0x214>)
    c43c:	2200      	movs	r2, #0
    c43e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    c440:	2301      	movs	r3, #1
}
    c442:	0018      	movs	r0, r3
    c444:	46bd      	mov	sp, r7
    c446:	b009      	add	sp, #36	; 0x24
    c448:	bd90      	pop	{r4, r7, pc}
    c44a:	46c0      	nop			; (mov r8, r8)
    c44c:	20003d1f 	.word	0x20003d1f
    c450:	0000bcfd 	.word	0x0000bcfd
    c454:	20003cdc 	.word	0x20003cdc
    c458:	00014821 	.word	0x00014821
    c45c:	000145fd 	.word	0x000145fd
    c460:	20003d20 	.word	0x20003d20
    c464:	0000bdb9 	.word	0x0000bdb9
    c468:	20003d28 	.word	0x20003d28
    c46c:	20003d2a 	.word	0x20003d2a
    c470:	20003d24 	.word	0x20003d24

0000c474 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    c474:	b580      	push	{r7, lr}
    c476:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    c478:	4b02      	ldr	r3, [pc, #8]	; (c484 <sd_mmc_spi_get_response+0x10>)
    c47a:	681b      	ldr	r3, [r3, #0]
}
    c47c:	0018      	movs	r0, r3
    c47e:	46bd      	mov	sp, r7
    c480:	bd80      	pop	{r7, pc}
    c482:	46c0      	nop			; (mov r8, r8)
    c484:	20003d20 	.word	0x20003d20

0000c488 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    c488:	b590      	push	{r4, r7, lr}
    c48a:	b085      	sub	sp, #20
    c48c:	af00      	add	r7, sp, #0
    c48e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    c490:	230e      	movs	r3, #14
    c492:	18fb      	adds	r3, r7, r3
    c494:	22ff      	movs	r2, #255	; 0xff
    c496:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c498:	4b1c      	ldr	r3, [pc, #112]	; (c50c <sd_mmc_spi_read_word+0x84>)
    c49a:	2200      	movs	r2, #0
    c49c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c49e:	4b1c      	ldr	r3, [pc, #112]	; (c510 <sd_mmc_spi_read_word+0x88>)
    c4a0:	681a      	ldr	r2, [r3, #0]
    c4a2:	4b1c      	ldr	r3, [pc, #112]	; (c514 <sd_mmc_spi_read_word+0x8c>)
    c4a4:	881b      	ldrh	r3, [r3, #0]
    c4a6:	0019      	movs	r1, r3
    c4a8:	4b1b      	ldr	r3, [pc, #108]	; (c518 <sd_mmc_spi_read_word+0x90>)
    c4aa:	0010      	movs	r0, r2
    c4ac:	4798      	blx	r3
    c4ae:	1e0b      	subs	r3, r1, #0
    c4b0:	d10a      	bne.n	c4c8 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    c4b2:	4b1a      	ldr	r3, [pc, #104]	; (c51c <sd_mmc_spi_read_word+0x94>)
    c4b4:	4798      	blx	r3
    c4b6:	0003      	movs	r3, r0
    c4b8:	001a      	movs	r2, r3
    c4ba:	2301      	movs	r3, #1
    c4bc:	4053      	eors	r3, r2
    c4be:	b2db      	uxtb	r3, r3
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	d001      	beq.n	c4c8 <sd_mmc_spi_read_word+0x40>
			return false;
    c4c4:	2300      	movs	r3, #0
    c4c6:	e01d      	b.n	c504 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    c4c8:	230e      	movs	r3, #14
    c4ca:	18fb      	adds	r3, r7, r3
    c4cc:	881b      	ldrh	r3, [r3, #0]
    c4ce:	1d39      	adds	r1, r7, #4
    c4d0:	4813      	ldr	r0, [pc, #76]	; (c520 <sd_mmc_spi_read_word+0x98>)
    c4d2:	2204      	movs	r2, #4
    c4d4:	4c13      	ldr	r4, [pc, #76]	; (c524 <sd_mmc_spi_read_word+0x9c>)
    c4d6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    c4d8:	687b      	ldr	r3, [r7, #4]
    c4da:	687a      	ldr	r2, [r7, #4]
    c4dc:	6812      	ldr	r2, [r2, #0]
    c4de:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    c4e0:	4b0b      	ldr	r3, [pc, #44]	; (c510 <sd_mmc_spi_read_word+0x88>)
    c4e2:	681b      	ldr	r3, [r3, #0]
    c4e4:	1d1a      	adds	r2, r3, #4
    c4e6:	4b0a      	ldr	r3, [pc, #40]	; (c510 <sd_mmc_spi_read_word+0x88>)
    c4e8:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c4ea:	4b09      	ldr	r3, [pc, #36]	; (c510 <sd_mmc_spi_read_word+0x88>)
    c4ec:	681a      	ldr	r2, [r3, #0]
    c4ee:	4b09      	ldr	r3, [pc, #36]	; (c514 <sd_mmc_spi_read_word+0x8c>)
    c4f0:	881b      	ldrh	r3, [r3, #0]
    c4f2:	0019      	movs	r1, r3
    c4f4:	4b08      	ldr	r3, [pc, #32]	; (c518 <sd_mmc_spi_read_word+0x90>)
    c4f6:	0010      	movs	r0, r2
    c4f8:	4798      	blx	r3
    c4fa:	1e0b      	subs	r3, r1, #0
    c4fc:	d101      	bne.n	c502 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    c4fe:	4b0a      	ldr	r3, [pc, #40]	; (c528 <sd_mmc_spi_read_word+0xa0>)
    c500:	4798      	blx	r3
	}
	return true;
    c502:	2301      	movs	r3, #1
}
    c504:	0018      	movs	r0, r3
    c506:	46bd      	mov	sp, r7
    c508:	b005      	add	sp, #20
    c50a:	bd90      	pop	{r4, r7, pc}
    c50c:	20003d1f 	.word	0x20003d1f
    c510:	20003d24 	.word	0x20003d24
    c514:	20003d28 	.word	0x20003d28
    c518:	0001f051 	.word	0x0001f051
    c51c:	0000be25 	.word	0x0000be25
    c520:	20003cdc 	.word	0x20003cdc
    c524:	000145fd 	.word	0x000145fd
    c528:	0000bea9 	.word	0x0000bea9

0000c52c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    c52c:	b590      	push	{r4, r7, lr}
    c52e:	b085      	sub	sp, #20
    c530:	af00      	add	r7, sp, #0
    c532:	6078      	str	r0, [r7, #4]
    c534:	000a      	movs	r2, r1
    c536:	1cbb      	adds	r3, r7, #2
    c538:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    c53a:	230a      	movs	r3, #10
    c53c:	18fb      	adds	r3, r7, r3
    c53e:	22ff      	movs	r2, #255	; 0xff
    c540:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c542:	4b1c      	ldr	r3, [pc, #112]	; (c5b4 <sd_mmc_spi_start_read_blocks+0x88>)
    c544:	2200      	movs	r2, #0
    c546:	701a      	strb	r2, [r3, #0]
	pos = 0;
    c548:	2300      	movs	r3, #0
    c54a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    c54c:	e025      	b.n	c59a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    c54e:	4b1a      	ldr	r3, [pc, #104]	; (c5b8 <sd_mmc_spi_start_read_blocks+0x8c>)
    c550:	4798      	blx	r3
    c552:	0003      	movs	r3, r0
    c554:	001a      	movs	r2, r3
    c556:	2301      	movs	r3, #1
    c558:	4053      	eors	r3, r2
    c55a:	b2db      	uxtb	r3, r3
    c55c:	2b00      	cmp	r3, #0
    c55e:	d001      	beq.n	c564 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    c560:	2300      	movs	r3, #0
    c562:	e022      	b.n	c5aa <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    c564:	687a      	ldr	r2, [r7, #4]
    c566:	68fb      	ldr	r3, [r7, #12]
    c568:	18d1      	adds	r1, r2, r3
    c56a:	4b14      	ldr	r3, [pc, #80]	; (c5bc <sd_mmc_spi_start_read_blocks+0x90>)
    c56c:	881a      	ldrh	r2, [r3, #0]
    c56e:	230a      	movs	r3, #10
    c570:	18fb      	adds	r3, r7, r3
    c572:	881b      	ldrh	r3, [r3, #0]
    c574:	4812      	ldr	r0, [pc, #72]	; (c5c0 <sd_mmc_spi_start_read_blocks+0x94>)
    c576:	4c13      	ldr	r4, [pc, #76]	; (c5c4 <sd_mmc_spi_start_read_blocks+0x98>)
    c578:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    c57a:	4b10      	ldr	r3, [pc, #64]	; (c5bc <sd_mmc_spi_start_read_blocks+0x90>)
    c57c:	881b      	ldrh	r3, [r3, #0]
    c57e:	001a      	movs	r2, r3
    c580:	68fb      	ldr	r3, [r7, #12]
    c582:	189b      	adds	r3, r3, r2
    c584:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c586:	4b0d      	ldr	r3, [pc, #52]	; (c5bc <sd_mmc_spi_start_read_blocks+0x90>)
    c588:	881b      	ldrh	r3, [r3, #0]
    c58a:	001a      	movs	r2, r3
    c58c:	4b0e      	ldr	r3, [pc, #56]	; (c5c8 <sd_mmc_spi_start_read_blocks+0x9c>)
    c58e:	681b      	ldr	r3, [r3, #0]
    c590:	18d2      	adds	r2, r2, r3
    c592:	4b0d      	ldr	r3, [pc, #52]	; (c5c8 <sd_mmc_spi_start_read_blocks+0x9c>)
    c594:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    c596:	4b0d      	ldr	r3, [pc, #52]	; (c5cc <sd_mmc_spi_start_read_blocks+0xa0>)
    c598:	4798      	blx	r3
	while (nb_block--) {
    c59a:	1cbb      	adds	r3, r7, #2
    c59c:	881b      	ldrh	r3, [r3, #0]
    c59e:	1cba      	adds	r2, r7, #2
    c5a0:	1e59      	subs	r1, r3, #1
    c5a2:	8011      	strh	r1, [r2, #0]
    c5a4:	2b00      	cmp	r3, #0
    c5a6:	d1d2      	bne.n	c54e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    c5a8:	2301      	movs	r3, #1
}
    c5aa:	0018      	movs	r0, r3
    c5ac:	46bd      	mov	sp, r7
    c5ae:	b005      	add	sp, #20
    c5b0:	bd90      	pop	{r4, r7, pc}
    c5b2:	46c0      	nop			; (mov r8, r8)
    c5b4:	20003d1f 	.word	0x20003d1f
    c5b8:	0000be25 	.word	0x0000be25
    c5bc:	20003d28 	.word	0x20003d28
    c5c0:	20003cdc 	.word	0x20003cdc
    c5c4:	000145fd 	.word	0x000145fd
    c5c8:	20003d24 	.word	0x20003d24
    c5cc:	0000bea9 	.word	0x0000bea9

0000c5d0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    c5d0:	b580      	push	{r7, lr}
    c5d2:	af00      	add	r7, sp, #0
	return true;
    c5d4:	2301      	movs	r3, #1
}
    c5d6:	0018      	movs	r0, r3
    c5d8:	46bd      	mov	sp, r7
    c5da:	bd80      	pop	{r7, pc}

0000c5dc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    c5dc:	b580      	push	{r7, lr}
    c5de:	b084      	sub	sp, #16
    c5e0:	af00      	add	r7, sp, #0
    c5e2:	6078      	str	r0, [r7, #4]
    c5e4:	000a      	movs	r2, r1
    c5e6:	1cbb      	adds	r3, r7, #2
    c5e8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c5ea:	4b24      	ldr	r3, [pc, #144]	; (c67c <sd_mmc_spi_start_write_blocks+0xa0>)
    c5ec:	2200      	movs	r2, #0
    c5ee:	701a      	strb	r2, [r3, #0]
	pos = 0;
    c5f0:	2300      	movs	r3, #0
    c5f2:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    c5f4:	e035      	b.n	c662 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    c5f6:	4b22      	ldr	r3, [pc, #136]	; (c680 <sd_mmc_spi_start_write_blocks+0xa4>)
    c5f8:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    c5fa:	687a      	ldr	r2, [r7, #4]
    c5fc:	68fb      	ldr	r3, [r7, #12]
    c5fe:	18d1      	adds	r1, r2, r3
    c600:	4b20      	ldr	r3, [pc, #128]	; (c684 <sd_mmc_spi_start_write_blocks+0xa8>)
    c602:	881a      	ldrh	r2, [r3, #0]
    c604:	4b20      	ldr	r3, [pc, #128]	; (c688 <sd_mmc_spi_start_write_blocks+0xac>)
    c606:	0018      	movs	r0, r3
    c608:	4b20      	ldr	r3, [pc, #128]	; (c68c <sd_mmc_spi_start_write_blocks+0xb0>)
    c60a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    c60c:	4b1d      	ldr	r3, [pc, #116]	; (c684 <sd_mmc_spi_start_write_blocks+0xa8>)
    c60e:	881b      	ldrh	r3, [r3, #0]
    c610:	001a      	movs	r2, r3
    c612:	68fb      	ldr	r3, [r7, #12]
    c614:	189b      	adds	r3, r3, r2
    c616:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c618:	4b1a      	ldr	r3, [pc, #104]	; (c684 <sd_mmc_spi_start_write_blocks+0xa8>)
    c61a:	881b      	ldrh	r3, [r3, #0]
    c61c:	001a      	movs	r2, r3
    c61e:	4b1c      	ldr	r3, [pc, #112]	; (c690 <sd_mmc_spi_start_write_blocks+0xb4>)
    c620:	681b      	ldr	r3, [r3, #0]
    c622:	18d2      	adds	r2, r2, r3
    c624:	4b1a      	ldr	r3, [pc, #104]	; (c690 <sd_mmc_spi_start_write_blocks+0xb4>)
    c626:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    c628:	4b1a      	ldr	r3, [pc, #104]	; (c694 <sd_mmc_spi_start_write_blocks+0xb8>)
    c62a:	4798      	blx	r3
    c62c:	0003      	movs	r3, r0
    c62e:	001a      	movs	r2, r3
    c630:	2301      	movs	r3, #1
    c632:	4053      	eors	r3, r2
    c634:	b2db      	uxtb	r3, r3
    c636:	2b00      	cmp	r3, #0
    c638:	d001      	beq.n	c63e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    c63a:	2300      	movs	r3, #0
    c63c:	e019      	b.n	c672 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    c63e:	1cbb      	adds	r3, r7, #2
    c640:	881b      	ldrh	r3, [r3, #0]
    c642:	2b00      	cmp	r3, #0
    c644:	d00d      	beq.n	c662 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    c646:	4b14      	ldr	r3, [pc, #80]	; (c698 <sd_mmc_spi_start_write_blocks+0xbc>)
    c648:	4798      	blx	r3
    c64a:	0003      	movs	r3, r0
    c64c:	001a      	movs	r2, r3
    c64e:	2301      	movs	r3, #1
    c650:	4053      	eors	r3, r2
    c652:	b2db      	uxtb	r3, r3
    c654:	2b00      	cmp	r3, #0
    c656:	d004      	beq.n	c662 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c658:	4b08      	ldr	r3, [pc, #32]	; (c67c <sd_mmc_spi_start_write_blocks+0xa0>)
    c65a:	2205      	movs	r2, #5
    c65c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    c65e:	2300      	movs	r3, #0
    c660:	e007      	b.n	c672 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    c662:	1cbb      	adds	r3, r7, #2
    c664:	881b      	ldrh	r3, [r3, #0]
    c666:	1cba      	adds	r2, r7, #2
    c668:	1e59      	subs	r1, r3, #1
    c66a:	8011      	strh	r1, [r2, #0]
    c66c:	2b00      	cmp	r3, #0
    c66e:	d1c2      	bne.n	c5f6 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    c670:	2301      	movs	r3, #1
}
    c672:	0018      	movs	r0, r3
    c674:	46bd      	mov	sp, r7
    c676:	b004      	add	sp, #16
    c678:	bd80      	pop	{r7, pc}
    c67a:	46c0      	nop			; (mov r8, r8)
    c67c:	20003d1f 	.word	0x20003d1f
    c680:	0000bed5 	.word	0x0000bed5
    c684:	20003d28 	.word	0x20003d28
    c688:	20003cdc 	.word	0x20003cdc
    c68c:	00014821 	.word	0x00014821
    c690:	20003d24 	.word	0x20003d24
    c694:	0000bf25 	.word	0x0000bf25
    c698:	0000bdb9 	.word	0x0000bdb9

0000c69c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    c69c:	b580      	push	{r7, lr}
    c69e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    c6a0:	4b09      	ldr	r3, [pc, #36]	; (c6c8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    c6a2:	4798      	blx	r3
    c6a4:	0003      	movs	r3, r0
    c6a6:	001a      	movs	r2, r3
    c6a8:	2301      	movs	r3, #1
    c6aa:	4053      	eors	r3, r2
    c6ac:	b2db      	uxtb	r3, r3
    c6ae:	2b00      	cmp	r3, #0
    c6b0:	d004      	beq.n	c6bc <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c6b2:	4b06      	ldr	r3, [pc, #24]	; (c6cc <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    c6b4:	2205      	movs	r2, #5
    c6b6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    c6b8:	2300      	movs	r3, #0
    c6ba:	e002      	b.n	c6c2 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    c6bc:	4b04      	ldr	r3, [pc, #16]	; (c6d0 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    c6be:	4798      	blx	r3
    c6c0:	0003      	movs	r3, r0
}
    c6c2:	0018      	movs	r0, r3
    c6c4:	46bd      	mov	sp, r7
    c6c6:	bd80      	pop	{r7, pc}
    c6c8:	0000bdb9 	.word	0x0000bdb9
    c6cc:	20003d1f 	.word	0x20003d1f
    c6d0:	0000bfb9 	.word	0x0000bfb9

0000c6d4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    c6d4:	b580      	push	{r7, lr}
    c6d6:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    c6d8:	2000      	movs	r0, #0
    c6da:	4b0f      	ldr	r3, [pc, #60]	; (c718 <delay_init+0x44>)
    c6dc:	4798      	blx	r3
    c6de:	0002      	movs	r2, r0
    c6e0:	4b0e      	ldr	r3, [pc, #56]	; (c71c <delay_init+0x48>)
    c6e2:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    c6e4:	4b0d      	ldr	r3, [pc, #52]	; (c71c <delay_init+0x48>)
    c6e6:	6818      	ldr	r0, [r3, #0]
    c6e8:	4b0d      	ldr	r3, [pc, #52]	; (c720 <delay_init+0x4c>)
    c6ea:	22fa      	movs	r2, #250	; 0xfa
    c6ec:	0091      	lsls	r1, r2, #2
    c6ee:	4798      	blx	r3
    c6f0:	0003      	movs	r3, r0
    c6f2:	001a      	movs	r2, r3
    c6f4:	4b09      	ldr	r3, [pc, #36]	; (c71c <delay_init+0x48>)
    c6f6:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    c6f8:	4b08      	ldr	r3, [pc, #32]	; (c71c <delay_init+0x48>)
    c6fa:	6818      	ldr	r0, [r3, #0]
    c6fc:	4b08      	ldr	r3, [pc, #32]	; (c720 <delay_init+0x4c>)
    c6fe:	22fa      	movs	r2, #250	; 0xfa
    c700:	0091      	lsls	r1, r2, #2
    c702:	4798      	blx	r3
    c704:	0003      	movs	r3, r0
    c706:	001a      	movs	r2, r3
    c708:	4b06      	ldr	r3, [pc, #24]	; (c724 <delay_init+0x50>)
    c70a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    c70c:	4b06      	ldr	r3, [pc, #24]	; (c728 <delay_init+0x54>)
    c70e:	2205      	movs	r2, #5
    c710:	601a      	str	r2, [r3, #0]
}
    c712:	46c0      	nop			; (mov r8, r8)
    c714:	46bd      	mov	sp, r7
    c716:	bd80      	pop	{r7, pc}
    c718:	000163a5 	.word	0x000163a5
    c71c:	20000118 	.word	0x20000118
    c720:	0001ef45 	.word	0x0001ef45
    c724:	2000011c 	.word	0x2000011c
    c728:	e000e010 	.word	0xe000e010

0000c72c <system_pinmux_get_group_from_gpio_pin>:
{
    c72c:	b580      	push	{r7, lr}
    c72e:	b084      	sub	sp, #16
    c730:	af00      	add	r7, sp, #0
    c732:	0002      	movs	r2, r0
    c734:	1dfb      	adds	r3, r7, #7
    c736:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c738:	230f      	movs	r3, #15
    c73a:	18fb      	adds	r3, r7, r3
    c73c:	1dfa      	adds	r2, r7, #7
    c73e:	7812      	ldrb	r2, [r2, #0]
    c740:	09d2      	lsrs	r2, r2, #7
    c742:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    c744:	230e      	movs	r3, #14
    c746:	18fb      	adds	r3, r7, r3
    c748:	1dfa      	adds	r2, r7, #7
    c74a:	7812      	ldrb	r2, [r2, #0]
    c74c:	0952      	lsrs	r2, r2, #5
    c74e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    c750:	4b0d      	ldr	r3, [pc, #52]	; (c788 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    c752:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    c754:	230f      	movs	r3, #15
    c756:	18fb      	adds	r3, r7, r3
    c758:	781b      	ldrb	r3, [r3, #0]
    c75a:	2b00      	cmp	r3, #0
    c75c:	d10f      	bne.n	c77e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    c75e:	230f      	movs	r3, #15
    c760:	18fb      	adds	r3, r7, r3
    c762:	781b      	ldrb	r3, [r3, #0]
    c764:	009b      	lsls	r3, r3, #2
    c766:	2210      	movs	r2, #16
    c768:	4694      	mov	ip, r2
    c76a:	44bc      	add	ip, r7
    c76c:	4463      	add	r3, ip
    c76e:	3b08      	subs	r3, #8
    c770:	681a      	ldr	r2, [r3, #0]
    c772:	230e      	movs	r3, #14
    c774:	18fb      	adds	r3, r7, r3
    c776:	781b      	ldrb	r3, [r3, #0]
    c778:	01db      	lsls	r3, r3, #7
    c77a:	18d3      	adds	r3, r2, r3
    c77c:	e000      	b.n	c780 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    c77e:	2300      	movs	r3, #0
}
    c780:	0018      	movs	r0, r3
    c782:	46bd      	mov	sp, r7
    c784:	b004      	add	sp, #16
    c786:	bd80      	pop	{r7, pc}
    c788:	41004400 	.word	0x41004400

0000c78c <system_interrupt_enable_global>:
{
    c78c:	b580      	push	{r7, lr}
    c78e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    c790:	4b04      	ldr	r3, [pc, #16]	; (c7a4 <system_interrupt_enable_global+0x18>)
    c792:	2201      	movs	r2, #1
    c794:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    c796:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c79a:	b662      	cpsie	i
}
    c79c:	46c0      	nop			; (mov r8, r8)
    c79e:	46bd      	mov	sp, r7
    c7a0:	bd80      	pop	{r7, pc}
    c7a2:	46c0      	nop			; (mov r8, r8)
    c7a4:	20000122 	.word	0x20000122

0000c7a8 <port_get_group_from_gpio_pin>:
{
    c7a8:	b580      	push	{r7, lr}
    c7aa:	b082      	sub	sp, #8
    c7ac:	af00      	add	r7, sp, #0
    c7ae:	0002      	movs	r2, r0
    c7b0:	1dfb      	adds	r3, r7, #7
    c7b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c7b4:	1dfb      	adds	r3, r7, #7
    c7b6:	781b      	ldrb	r3, [r3, #0]
    c7b8:	0018      	movs	r0, r3
    c7ba:	4b03      	ldr	r3, [pc, #12]	; (c7c8 <port_get_group_from_gpio_pin+0x20>)
    c7bc:	4798      	blx	r3
    c7be:	0003      	movs	r3, r0
}
    c7c0:	0018      	movs	r0, r3
    c7c2:	46bd      	mov	sp, r7
    c7c4:	b002      	add	sp, #8
    c7c6:	bd80      	pop	{r7, pc}
    c7c8:	0000c72d 	.word	0x0000c72d

0000c7cc <port_get_config_defaults>:
{
    c7cc:	b580      	push	{r7, lr}
    c7ce:	b082      	sub	sp, #8
    c7d0:	af00      	add	r7, sp, #0
    c7d2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    c7d4:	687b      	ldr	r3, [r7, #4]
    c7d6:	2200      	movs	r2, #0
    c7d8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c7da:	687b      	ldr	r3, [r7, #4]
    c7dc:	2201      	movs	r2, #1
    c7de:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    c7e0:	687b      	ldr	r3, [r7, #4]
    c7e2:	2200      	movs	r2, #0
    c7e4:	709a      	strb	r2, [r3, #2]
}
    c7e6:	46c0      	nop			; (mov r8, r8)
    c7e8:	46bd      	mov	sp, r7
    c7ea:	b002      	add	sp, #8
    c7ec:	bd80      	pop	{r7, pc}
	...

0000c7f0 <port_pin_set_output_level>:
{
    c7f0:	b580      	push	{r7, lr}
    c7f2:	b084      	sub	sp, #16
    c7f4:	af00      	add	r7, sp, #0
    c7f6:	0002      	movs	r2, r0
    c7f8:	1dfb      	adds	r3, r7, #7
    c7fa:	701a      	strb	r2, [r3, #0]
    c7fc:	1dbb      	adds	r3, r7, #6
    c7fe:	1c0a      	adds	r2, r1, #0
    c800:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    c802:	1dfb      	adds	r3, r7, #7
    c804:	781b      	ldrb	r3, [r3, #0]
    c806:	0018      	movs	r0, r3
    c808:	4b0d      	ldr	r3, [pc, #52]	; (c840 <port_pin_set_output_level+0x50>)
    c80a:	4798      	blx	r3
    c80c:	0003      	movs	r3, r0
    c80e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c810:	1dfb      	adds	r3, r7, #7
    c812:	781b      	ldrb	r3, [r3, #0]
    c814:	221f      	movs	r2, #31
    c816:	4013      	ands	r3, r2
    c818:	2201      	movs	r2, #1
    c81a:	409a      	lsls	r2, r3
    c81c:	0013      	movs	r3, r2
    c81e:	60bb      	str	r3, [r7, #8]
	if (level) {
    c820:	1dbb      	adds	r3, r7, #6
    c822:	781b      	ldrb	r3, [r3, #0]
    c824:	2b00      	cmp	r3, #0
    c826:	d003      	beq.n	c830 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    c828:	68fb      	ldr	r3, [r7, #12]
    c82a:	68ba      	ldr	r2, [r7, #8]
    c82c:	619a      	str	r2, [r3, #24]
}
    c82e:	e002      	b.n	c836 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    c830:	68fb      	ldr	r3, [r7, #12]
    c832:	68ba      	ldr	r2, [r7, #8]
    c834:	615a      	str	r2, [r3, #20]
}
    c836:	46c0      	nop			; (mov r8, r8)
    c838:	46bd      	mov	sp, r7
    c83a:	b004      	add	sp, #16
    c83c:	bd80      	pop	{r7, pc}
    c83e:	46c0      	nop			; (mov r8, r8)
    c840:	0000c7a9 	.word	0x0000c7a9

0000c844 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    c844:	b580      	push	{r7, lr}
    c846:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    c848:	4b04      	ldr	r3, [pc, #16]	; (c85c <chip_isr+0x18>)
    c84a:	681b      	ldr	r3, [r3, #0]
    c84c:	2b00      	cmp	r3, #0
    c84e:	d002      	beq.n	c856 <chip_isr+0x12>
		gpfIsr();
    c850:	4b02      	ldr	r3, [pc, #8]	; (c85c <chip_isr+0x18>)
    c852:	681b      	ldr	r3, [r3, #0]
    c854:	4798      	blx	r3
	}
}
    c856:	46c0      	nop			; (mov r8, r8)
    c858:	46bd      	mov	sp, r7
    c85a:	bd80      	pop	{r7, pc}
    c85c:	20003d2c 	.word	0x20003d2c

0000c860 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    c860:	b580      	push	{r7, lr}
    c862:	b082      	sub	sp, #8
    c864:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    c866:	1d3b      	adds	r3, r7, #4
    c868:	0018      	movs	r0, r3
    c86a:	4b10      	ldr	r3, [pc, #64]	; (c8ac <init_chip_pins+0x4c>)
    c86c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c86e:	1d3b      	adds	r3, r7, #4
    c870:	2201      	movs	r2, #1
    c872:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    c874:	1d3b      	adds	r3, r7, #4
    c876:	0019      	movs	r1, r3
    c878:	201b      	movs	r0, #27
    c87a:	4b0d      	ldr	r3, [pc, #52]	; (c8b0 <init_chip_pins+0x50>)
    c87c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    c87e:	1d3b      	adds	r3, r7, #4
    c880:	0019      	movs	r1, r3
    c882:	201c      	movs	r0, #28
    c884:	4b0a      	ldr	r3, [pc, #40]	; (c8b0 <init_chip_pins+0x50>)
    c886:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    c888:	1d3b      	adds	r3, r7, #4
    c88a:	0019      	movs	r1, r3
    c88c:	2028      	movs	r0, #40	; 0x28
    c88e:	4b08      	ldr	r3, [pc, #32]	; (c8b0 <init_chip_pins+0x50>)
    c890:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    c892:	2100      	movs	r1, #0
    c894:	201c      	movs	r0, #28
    c896:	4b07      	ldr	r3, [pc, #28]	; (c8b4 <init_chip_pins+0x54>)
    c898:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    c89a:	2100      	movs	r1, #0
    c89c:	201b      	movs	r0, #27
    c89e:	4b05      	ldr	r3, [pc, #20]	; (c8b4 <init_chip_pins+0x54>)
    c8a0:	4798      	blx	r3
}
    c8a2:	46c0      	nop			; (mov r8, r8)
    c8a4:	46bd      	mov	sp, r7
    c8a6:	b002      	add	sp, #8
    c8a8:	bd80      	pop	{r7, pc}
    c8aa:	46c0      	nop			; (mov r8, r8)
    c8ac:	0000c7cd 	.word	0x0000c7cd
    c8b0:	00012fed 	.word	0x00012fed
    c8b4:	0000c7f1 	.word	0x0000c7f1

0000c8b8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    c8b8:	b580      	push	{r7, lr}
    c8ba:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    c8bc:	4b0b      	ldr	r3, [pc, #44]	; (c8ec <nm_bsp_init+0x34>)
    c8be:	2200      	movs	r2, #0
    c8c0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    c8c2:	4b0b      	ldr	r3, [pc, #44]	; (c8f0 <nm_bsp_init+0x38>)
    c8c4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    c8c6:	4b0b      	ldr	r3, [pc, #44]	; (c8f4 <nm_bsp_init+0x3c>)
    c8c8:	681b      	ldr	r3, [r3, #0]
    c8ca:	2201      	movs	r2, #1
    c8cc:	4013      	ands	r3, r2
    c8ce:	d004      	beq.n	c8da <nm_bsp_init+0x22>
    c8d0:	4b08      	ldr	r3, [pc, #32]	; (c8f4 <nm_bsp_init+0x3c>)
    c8d2:	681b      	ldr	r3, [r3, #0]
    c8d4:	2202      	movs	r2, #2
    c8d6:	4013      	ands	r3, r2
    c8d8:	d101      	bne.n	c8de <nm_bsp_init+0x26>
	    delay_init();
    c8da:	4b07      	ldr	r3, [pc, #28]	; (c8f8 <nm_bsp_init+0x40>)
    c8dc:	4798      	blx	r3
    }

	system_interrupt_enable_global();
    c8de:	4b07      	ldr	r3, [pc, #28]	; (c8fc <nm_bsp_init+0x44>)
    c8e0:	4798      	blx	r3

	return M2M_SUCCESS;
    c8e2:	2300      	movs	r3, #0
}
    c8e4:	0018      	movs	r0, r3
    c8e6:	46bd      	mov	sp, r7
    c8e8:	bd80      	pop	{r7, pc}
    c8ea:	46c0      	nop			; (mov r8, r8)
    c8ec:	20003d2c 	.word	0x20003d2c
    c8f0:	0000c861 	.word	0x0000c861
    c8f4:	e000e010 	.word	0xe000e010
    c8f8:	0000c6d5 	.word	0x0000c6d5
    c8fc:	0000c78d 	.word	0x0000c78d

0000c900 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    c900:	b580      	push	{r7, lr}
    c902:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    c904:	2100      	movs	r1, #0
    c906:	201c      	movs	r0, #28
    c908:	4b0b      	ldr	r3, [pc, #44]	; (c938 <nm_bsp_reset+0x38>)
    c90a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    c90c:	2100      	movs	r1, #0
    c90e:	201b      	movs	r0, #27
    c910:	4b09      	ldr	r3, [pc, #36]	; (c938 <nm_bsp_reset+0x38>)
    c912:	4798      	blx	r3
	nm_bsp_sleep(1);
    c914:	2001      	movs	r0, #1
    c916:	4b09      	ldr	r3, [pc, #36]	; (c93c <nm_bsp_reset+0x3c>)
    c918:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    c91a:	2101      	movs	r1, #1
    c91c:	201c      	movs	r0, #28
    c91e:	4b06      	ldr	r3, [pc, #24]	; (c938 <nm_bsp_reset+0x38>)
    c920:	4798      	blx	r3
	nm_bsp_sleep(10);
    c922:	200a      	movs	r0, #10
    c924:	4b05      	ldr	r3, [pc, #20]	; (c93c <nm_bsp_reset+0x3c>)
    c926:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    c928:	2101      	movs	r1, #1
    c92a:	201b      	movs	r0, #27
    c92c:	4b02      	ldr	r3, [pc, #8]	; (c938 <nm_bsp_reset+0x38>)
    c92e:	4798      	blx	r3
}
    c930:	46c0      	nop			; (mov r8, r8)
    c932:	46bd      	mov	sp, r7
    c934:	bd80      	pop	{r7, pc}
    c936:	46c0      	nop			; (mov r8, r8)
    c938:	0000c7f1 	.word	0x0000c7f1
    c93c:	0000c941 	.word	0x0000c941

0000c940 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    c940:	b580      	push	{r7, lr}
    c942:	b082      	sub	sp, #8
    c944:	af00      	add	r7, sp, #0
    c946:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
    c948:	687b      	ldr	r3, [r7, #4]
    c94a:	0018      	movs	r0, r3
    c94c:	4b02      	ldr	r3, [pc, #8]	; (c958 <nm_bsp_sleep+0x18>)
    c94e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
    c950:	46c0      	nop			; (mov r8, r8)
    c952:	46bd      	mov	sp, r7
    c954:	b002      	add	sp, #8
    c956:	bd80      	pop	{r7, pc}
    c958:	00008755 	.word	0x00008755

0000c95c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    c95c:	b580      	push	{r7, lr}
    c95e:	b086      	sub	sp, #24
    c960:	af00      	add	r7, sp, #0
    c962:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    c964:	4b15      	ldr	r3, [pc, #84]	; (c9bc <nm_bsp_register_isr+0x60>)
    c966:	687a      	ldr	r2, [r7, #4]
    c968:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    c96a:	230c      	movs	r3, #12
    c96c:	18fb      	adds	r3, r7, r3
    c96e:	0018      	movs	r0, r3
    c970:	4b13      	ldr	r3, [pc, #76]	; (c9c0 <nm_bsp_register_isr+0x64>)
    c972:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    c974:	230c      	movs	r3, #12
    c976:	18fb      	adds	r3, r7, r3
    c978:	2229      	movs	r2, #41	; 0x29
    c97a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    c97c:	230c      	movs	r3, #12
    c97e:	18fb      	adds	r3, r7, r3
    c980:	2200      	movs	r2, #0
    c982:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    c984:	230c      	movs	r3, #12
    c986:	18fb      	adds	r3, r7, r3
    c988:	2201      	movs	r2, #1
    c98a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    c98c:	230c      	movs	r3, #12
    c98e:	18fb      	adds	r3, r7, r3
    c990:	2202      	movs	r2, #2
    c992:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    c994:	230c      	movs	r3, #12
    c996:	18fb      	adds	r3, r7, r3
    c998:	0019      	movs	r1, r3
    c99a:	2009      	movs	r0, #9
    c99c:	4b09      	ldr	r3, [pc, #36]	; (c9c4 <nm_bsp_register_isr+0x68>)
    c99e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    c9a0:	4b09      	ldr	r3, [pc, #36]	; (c9c8 <nm_bsp_register_isr+0x6c>)
    c9a2:	2200      	movs	r2, #0
    c9a4:	2109      	movs	r1, #9
    c9a6:	0018      	movs	r0, r3
    c9a8:	4b08      	ldr	r3, [pc, #32]	; (c9cc <nm_bsp_register_isr+0x70>)
    c9aa:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    c9ac:	2100      	movs	r1, #0
    c9ae:	2009      	movs	r0, #9
    c9b0:	4b07      	ldr	r3, [pc, #28]	; (c9d0 <nm_bsp_register_isr+0x74>)
    c9b2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    c9b4:	46c0      	nop			; (mov r8, r8)
    c9b6:	46bd      	mov	sp, r7
    c9b8:	b006      	add	sp, #24
    c9ba:	bd80      	pop	{r7, pc}
    c9bc:	20003d2c 	.word	0x20003d2c
    c9c0:	00012e95 	.word	0x00012e95
    c9c4:	00012ec9 	.word	0x00012ec9
    c9c8:	0000c845 	.word	0x0000c845
    c9cc:	00012a95 	.word	0x00012a95
    c9d0:	00012af9 	.word	0x00012af9

0000c9d4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    c9d4:	b580      	push	{r7, lr}
    c9d6:	b082      	sub	sp, #8
    c9d8:	af00      	add	r7, sp, #0
    c9da:	0002      	movs	r2, r0
    c9dc:	1dfb      	adds	r3, r7, #7
    c9de:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    c9e0:	1dfb      	adds	r3, r7, #7
    c9e2:	781b      	ldrb	r3, [r3, #0]
    c9e4:	2b00      	cmp	r3, #0
    c9e6:	d004      	beq.n	c9f2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    c9e8:	2100      	movs	r1, #0
    c9ea:	2009      	movs	r0, #9
    c9ec:	4b05      	ldr	r3, [pc, #20]	; (ca04 <nm_bsp_interrupt_ctrl+0x30>)
    c9ee:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    c9f0:	e003      	b.n	c9fa <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    c9f2:	2100      	movs	r1, #0
    c9f4:	2009      	movs	r0, #9
    c9f6:	4b04      	ldr	r3, [pc, #16]	; (ca08 <nm_bsp_interrupt_ctrl+0x34>)
    c9f8:	4798      	blx	r3
}
    c9fa:	46c0      	nop			; (mov r8, r8)
    c9fc:	46bd      	mov	sp, r7
    c9fe:	b002      	add	sp, #8
    ca00:	bd80      	pop	{r7, pc}
    ca02:	46c0      	nop			; (mov r8, r8)
    ca04:	00012af9 	.word	0x00012af9
    ca08:	00012b41 	.word	0x00012b41

0000ca0c <system_pinmux_get_group_from_gpio_pin>:
{
    ca0c:	b580      	push	{r7, lr}
    ca0e:	b084      	sub	sp, #16
    ca10:	af00      	add	r7, sp, #0
    ca12:	0002      	movs	r2, r0
    ca14:	1dfb      	adds	r3, r7, #7
    ca16:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    ca18:	230f      	movs	r3, #15
    ca1a:	18fb      	adds	r3, r7, r3
    ca1c:	1dfa      	adds	r2, r7, #7
    ca1e:	7812      	ldrb	r2, [r2, #0]
    ca20:	09d2      	lsrs	r2, r2, #7
    ca22:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    ca24:	230e      	movs	r3, #14
    ca26:	18fb      	adds	r3, r7, r3
    ca28:	1dfa      	adds	r2, r7, #7
    ca2a:	7812      	ldrb	r2, [r2, #0]
    ca2c:	0952      	lsrs	r2, r2, #5
    ca2e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    ca30:	4b0d      	ldr	r3, [pc, #52]	; (ca68 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    ca32:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    ca34:	230f      	movs	r3, #15
    ca36:	18fb      	adds	r3, r7, r3
    ca38:	781b      	ldrb	r3, [r3, #0]
    ca3a:	2b00      	cmp	r3, #0
    ca3c:	d10f      	bne.n	ca5e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    ca3e:	230f      	movs	r3, #15
    ca40:	18fb      	adds	r3, r7, r3
    ca42:	781b      	ldrb	r3, [r3, #0]
    ca44:	009b      	lsls	r3, r3, #2
    ca46:	2210      	movs	r2, #16
    ca48:	4694      	mov	ip, r2
    ca4a:	44bc      	add	ip, r7
    ca4c:	4463      	add	r3, ip
    ca4e:	3b08      	subs	r3, #8
    ca50:	681a      	ldr	r2, [r3, #0]
    ca52:	230e      	movs	r3, #14
    ca54:	18fb      	adds	r3, r7, r3
    ca56:	781b      	ldrb	r3, [r3, #0]
    ca58:	01db      	lsls	r3, r3, #7
    ca5a:	18d3      	adds	r3, r2, r3
    ca5c:	e000      	b.n	ca60 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    ca5e:	2300      	movs	r3, #0
}
    ca60:	0018      	movs	r0, r3
    ca62:	46bd      	mov	sp, r7
    ca64:	b004      	add	sp, #16
    ca66:	bd80      	pop	{r7, pc}
    ca68:	41004400 	.word	0x41004400

0000ca6c <system_interrupt_enable>:
{
    ca6c:	b580      	push	{r7, lr}
    ca6e:	b082      	sub	sp, #8
    ca70:	af00      	add	r7, sp, #0
    ca72:	0002      	movs	r2, r0
    ca74:	1dfb      	adds	r3, r7, #7
    ca76:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ca78:	4b06      	ldr	r3, [pc, #24]	; (ca94 <system_interrupt_enable+0x28>)
    ca7a:	1dfa      	adds	r2, r7, #7
    ca7c:	7812      	ldrb	r2, [r2, #0]
    ca7e:	0011      	movs	r1, r2
    ca80:	221f      	movs	r2, #31
    ca82:	400a      	ands	r2, r1
    ca84:	2101      	movs	r1, #1
    ca86:	4091      	lsls	r1, r2
    ca88:	000a      	movs	r2, r1
    ca8a:	601a      	str	r2, [r3, #0]
}
    ca8c:	46c0      	nop			; (mov r8, r8)
    ca8e:	46bd      	mov	sp, r7
    ca90:	b002      	add	sp, #8
    ca92:	bd80      	pop	{r7, pc}
    ca94:	e000e100 	.word	0xe000e100

0000ca98 <system_interrupt_disable>:
{
    ca98:	b580      	push	{r7, lr}
    ca9a:	b082      	sub	sp, #8
    ca9c:	af00      	add	r7, sp, #0
    ca9e:	0002      	movs	r2, r0
    caa0:	1dfb      	adds	r3, r7, #7
    caa2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    caa4:	4a07      	ldr	r2, [pc, #28]	; (cac4 <system_interrupt_disable+0x2c>)
    caa6:	1dfb      	adds	r3, r7, #7
    caa8:	781b      	ldrb	r3, [r3, #0]
    caaa:	0019      	movs	r1, r3
    caac:	231f      	movs	r3, #31
    caae:	400b      	ands	r3, r1
    cab0:	2101      	movs	r1, #1
    cab2:	4099      	lsls	r1, r3
    cab4:	000b      	movs	r3, r1
    cab6:	0019      	movs	r1, r3
    cab8:	2380      	movs	r3, #128	; 0x80
    caba:	50d1      	str	r1, [r2, r3]
}
    cabc:	46c0      	nop			; (mov r8, r8)
    cabe:	46bd      	mov	sp, r7
    cac0:	b002      	add	sp, #8
    cac2:	bd80      	pop	{r7, pc}
    cac4:	e000e100 	.word	0xe000e100

0000cac8 <port_get_group_from_gpio_pin>:
{
    cac8:	b580      	push	{r7, lr}
    caca:	b082      	sub	sp, #8
    cacc:	af00      	add	r7, sp, #0
    cace:	0002      	movs	r2, r0
    cad0:	1dfb      	adds	r3, r7, #7
    cad2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    cad4:	1dfb      	adds	r3, r7, #7
    cad6:	781b      	ldrb	r3, [r3, #0]
    cad8:	0018      	movs	r0, r3
    cada:	4b03      	ldr	r3, [pc, #12]	; (cae8 <port_get_group_from_gpio_pin+0x20>)
    cadc:	4798      	blx	r3
    cade:	0003      	movs	r3, r0
}
    cae0:	0018      	movs	r0, r3
    cae2:	46bd      	mov	sp, r7
    cae4:	b002      	add	sp, #8
    cae6:	bd80      	pop	{r7, pc}
    cae8:	0000ca0d 	.word	0x0000ca0d

0000caec <port_get_config_defaults>:
{
    caec:	b580      	push	{r7, lr}
    caee:	b082      	sub	sp, #8
    caf0:	af00      	add	r7, sp, #0
    caf2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    caf4:	687b      	ldr	r3, [r7, #4]
    caf6:	2200      	movs	r2, #0
    caf8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    cafa:	687b      	ldr	r3, [r7, #4]
    cafc:	2201      	movs	r2, #1
    cafe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    cb00:	687b      	ldr	r3, [r7, #4]
    cb02:	2200      	movs	r2, #0
    cb04:	709a      	strb	r2, [r3, #2]
}
    cb06:	46c0      	nop			; (mov r8, r8)
    cb08:	46bd      	mov	sp, r7
    cb0a:	b002      	add	sp, #8
    cb0c:	bd80      	pop	{r7, pc}
	...

0000cb10 <port_pin_set_output_level>:
{
    cb10:	b580      	push	{r7, lr}
    cb12:	b084      	sub	sp, #16
    cb14:	af00      	add	r7, sp, #0
    cb16:	0002      	movs	r2, r0
    cb18:	1dfb      	adds	r3, r7, #7
    cb1a:	701a      	strb	r2, [r3, #0]
    cb1c:	1dbb      	adds	r3, r7, #6
    cb1e:	1c0a      	adds	r2, r1, #0
    cb20:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    cb22:	1dfb      	adds	r3, r7, #7
    cb24:	781b      	ldrb	r3, [r3, #0]
    cb26:	0018      	movs	r0, r3
    cb28:	4b0d      	ldr	r3, [pc, #52]	; (cb60 <port_pin_set_output_level+0x50>)
    cb2a:	4798      	blx	r3
    cb2c:	0003      	movs	r3, r0
    cb2e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    cb30:	1dfb      	adds	r3, r7, #7
    cb32:	781b      	ldrb	r3, [r3, #0]
    cb34:	221f      	movs	r2, #31
    cb36:	4013      	ands	r3, r2
    cb38:	2201      	movs	r2, #1
    cb3a:	409a      	lsls	r2, r3
    cb3c:	0013      	movs	r3, r2
    cb3e:	60bb      	str	r3, [r7, #8]
	if (level) {
    cb40:	1dbb      	adds	r3, r7, #6
    cb42:	781b      	ldrb	r3, [r3, #0]
    cb44:	2b00      	cmp	r3, #0
    cb46:	d003      	beq.n	cb50 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    cb48:	68fb      	ldr	r3, [r7, #12]
    cb4a:	68ba      	ldr	r2, [r7, #8]
    cb4c:	619a      	str	r2, [r3, #24]
}
    cb4e:	e002      	b.n	cb56 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    cb50:	68fb      	ldr	r3, [r7, #12]
    cb52:	68ba      	ldr	r2, [r7, #8]
    cb54:	615a      	str	r2, [r3, #20]
}
    cb56:	46c0      	nop			; (mov r8, r8)
    cb58:	46bd      	mov	sp, r7
    cb5a:	b004      	add	sp, #16
    cb5c:	bd80      	pop	{r7, pc}
    cb5e:	46c0      	nop			; (mov r8, r8)
    cb60:	0000cac9 	.word	0x0000cac9

0000cb64 <spi_is_syncing>:
{
    cb64:	b580      	push	{r7, lr}
    cb66:	b084      	sub	sp, #16
    cb68:	af00      	add	r7, sp, #0
    cb6a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cb6c:	687b      	ldr	r3, [r7, #4]
    cb6e:	681b      	ldr	r3, [r3, #0]
    cb70:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    cb72:	68fb      	ldr	r3, [r7, #12]
    cb74:	69db      	ldr	r3, [r3, #28]
    cb76:	1e5a      	subs	r2, r3, #1
    cb78:	4193      	sbcs	r3, r2
    cb7a:	b2db      	uxtb	r3, r3
}
    cb7c:	0018      	movs	r0, r3
    cb7e:	46bd      	mov	sp, r7
    cb80:	b004      	add	sp, #16
    cb82:	bd80      	pop	{r7, pc}

0000cb84 <spi_get_config_defaults>:
{
    cb84:	b580      	push	{r7, lr}
    cb86:	b082      	sub	sp, #8
    cb88:	af00      	add	r7, sp, #0
    cb8a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    cb8c:	687b      	ldr	r3, [r7, #4]
    cb8e:	2201      	movs	r2, #1
    cb90:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    cb92:	687b      	ldr	r3, [r7, #4]
    cb94:	2200      	movs	r2, #0
    cb96:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    cb98:	687b      	ldr	r3, [r7, #4]
    cb9a:	2200      	movs	r2, #0
    cb9c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    cb9e:	687b      	ldr	r3, [r7, #4]
    cba0:	22c0      	movs	r2, #192	; 0xc0
    cba2:	0392      	lsls	r2, r2, #14
    cba4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    cba6:	687b      	ldr	r3, [r7, #4]
    cba8:	2200      	movs	r2, #0
    cbaa:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    cbac:	687b      	ldr	r3, [r7, #4]
    cbae:	2200      	movs	r2, #0
    cbb0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    cbb2:	687b      	ldr	r3, [r7, #4]
    cbb4:	2201      	movs	r2, #1
    cbb6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    cbb8:	687b      	ldr	r3, [r7, #4]
    cbba:	2201      	movs	r2, #1
    cbbc:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    cbbe:	687b      	ldr	r3, [r7, #4]
    cbc0:	2200      	movs	r2, #0
    cbc2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    cbc4:	687b      	ldr	r3, [r7, #4]
    cbc6:	2224      	movs	r2, #36	; 0x24
    cbc8:	2100      	movs	r1, #0
    cbca:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    cbcc:	687b      	ldr	r3, [r7, #4]
    cbce:	3318      	adds	r3, #24
    cbd0:	220c      	movs	r2, #12
    cbd2:	2100      	movs	r1, #0
    cbd4:	0018      	movs	r0, r3
    cbd6:	4b0a      	ldr	r3, [pc, #40]	; (cc00 <spi_get_config_defaults+0x7c>)
    cbd8:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    cbda:	687b      	ldr	r3, [r7, #4]
    cbdc:	4a09      	ldr	r2, [pc, #36]	; (cc04 <spi_get_config_defaults+0x80>)
    cbde:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    cbe0:	687b      	ldr	r3, [r7, #4]
    cbe2:	2200      	movs	r2, #0
    cbe4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    cbe6:	687b      	ldr	r3, [r7, #4]
    cbe8:	2200      	movs	r2, #0
    cbea:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    cbec:	687b      	ldr	r3, [r7, #4]
    cbee:	2200      	movs	r2, #0
    cbf0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    cbf2:	687b      	ldr	r3, [r7, #4]
    cbf4:	2200      	movs	r2, #0
    cbf6:	635a      	str	r2, [r3, #52]	; 0x34
};
    cbf8:	46c0      	nop			; (mov r8, r8)
    cbfa:	46bd      	mov	sp, r7
    cbfc:	b002      	add	sp, #8
    cbfe:	bd80      	pop	{r7, pc}
    cc00:	00020f1f 	.word	0x00020f1f
    cc04:	000186a0 	.word	0x000186a0

0000cc08 <spi_slave_inst_get_config_defaults>:
{
    cc08:	b580      	push	{r7, lr}
    cc0a:	b082      	sub	sp, #8
    cc0c:	af00      	add	r7, sp, #0
    cc0e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    cc10:	687b      	ldr	r3, [r7, #4]
    cc12:	220a      	movs	r2, #10
    cc14:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    cc16:	687b      	ldr	r3, [r7, #4]
    cc18:	2200      	movs	r2, #0
    cc1a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    cc1c:	687b      	ldr	r3, [r7, #4]
    cc1e:	2200      	movs	r2, #0
    cc20:	709a      	strb	r2, [r3, #2]
}
    cc22:	46c0      	nop			; (mov r8, r8)
    cc24:	46bd      	mov	sp, r7
    cc26:	b002      	add	sp, #8
    cc28:	bd80      	pop	{r7, pc}
	...

0000cc2c <spi_attach_slave>:
{
    cc2c:	b580      	push	{r7, lr}
    cc2e:	b084      	sub	sp, #16
    cc30:	af00      	add	r7, sp, #0
    cc32:	6078      	str	r0, [r7, #4]
    cc34:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    cc36:	683b      	ldr	r3, [r7, #0]
    cc38:	781a      	ldrb	r2, [r3, #0]
    cc3a:	687b      	ldr	r3, [r7, #4]
    cc3c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    cc3e:	683b      	ldr	r3, [r7, #0]
    cc40:	785a      	ldrb	r2, [r3, #1]
    cc42:	687b      	ldr	r3, [r7, #4]
    cc44:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    cc46:	683b      	ldr	r3, [r7, #0]
    cc48:	789a      	ldrb	r2, [r3, #2]
    cc4a:	687b      	ldr	r3, [r7, #4]
    cc4c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    cc4e:	230c      	movs	r3, #12
    cc50:	18fb      	adds	r3, r7, r3
    cc52:	0018      	movs	r0, r3
    cc54:	4b0b      	ldr	r3, [pc, #44]	; (cc84 <spi_attach_slave+0x58>)
    cc56:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    cc58:	230c      	movs	r3, #12
    cc5a:	18fb      	adds	r3, r7, r3
    cc5c:	2201      	movs	r2, #1
    cc5e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    cc60:	687b      	ldr	r3, [r7, #4]
    cc62:	781b      	ldrb	r3, [r3, #0]
    cc64:	220c      	movs	r2, #12
    cc66:	18ba      	adds	r2, r7, r2
    cc68:	0011      	movs	r1, r2
    cc6a:	0018      	movs	r0, r3
    cc6c:	4b06      	ldr	r3, [pc, #24]	; (cc88 <spi_attach_slave+0x5c>)
    cc6e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    cc70:	687b      	ldr	r3, [r7, #4]
    cc72:	781b      	ldrb	r3, [r3, #0]
    cc74:	2101      	movs	r1, #1
    cc76:	0018      	movs	r0, r3
    cc78:	4b04      	ldr	r3, [pc, #16]	; (cc8c <spi_attach_slave+0x60>)
    cc7a:	4798      	blx	r3
}
    cc7c:	46c0      	nop			; (mov r8, r8)
    cc7e:	46bd      	mov	sp, r7
    cc80:	b004      	add	sp, #16
    cc82:	bd80      	pop	{r7, pc}
    cc84:	0000caed 	.word	0x0000caed
    cc88:	00012fed 	.word	0x00012fed
    cc8c:	0000cb11 	.word	0x0000cb11

0000cc90 <spi_enable>:
{
    cc90:	b580      	push	{r7, lr}
    cc92:	b084      	sub	sp, #16
    cc94:	af00      	add	r7, sp, #0
    cc96:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cc98:	687b      	ldr	r3, [r7, #4]
    cc9a:	681b      	ldr	r3, [r3, #0]
    cc9c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    cc9e:	687b      	ldr	r3, [r7, #4]
    cca0:	681b      	ldr	r3, [r3, #0]
    cca2:	0018      	movs	r0, r3
    cca4:	4b0b      	ldr	r3, [pc, #44]	; (ccd4 <spi_enable+0x44>)
    cca6:	4798      	blx	r3
    cca8:	0003      	movs	r3, r0
    ccaa:	0018      	movs	r0, r3
    ccac:	4b0a      	ldr	r3, [pc, #40]	; (ccd8 <spi_enable+0x48>)
    ccae:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    ccb0:	46c0      	nop			; (mov r8, r8)
    ccb2:	687b      	ldr	r3, [r7, #4]
    ccb4:	0018      	movs	r0, r3
    ccb6:	4b09      	ldr	r3, [pc, #36]	; (ccdc <spi_enable+0x4c>)
    ccb8:	4798      	blx	r3
    ccba:	1e03      	subs	r3, r0, #0
    ccbc:	d1f9      	bne.n	ccb2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    ccbe:	68fb      	ldr	r3, [r7, #12]
    ccc0:	681b      	ldr	r3, [r3, #0]
    ccc2:	2202      	movs	r2, #2
    ccc4:	431a      	orrs	r2, r3
    ccc6:	68fb      	ldr	r3, [r7, #12]
    ccc8:	601a      	str	r2, [r3, #0]
}
    ccca:	46c0      	nop			; (mov r8, r8)
    cccc:	46bd      	mov	sp, r7
    ccce:	b004      	add	sp, #16
    ccd0:	bd80      	pop	{r7, pc}
    ccd2:	46c0      	nop			; (mov r8, r8)
    ccd4:	00013cbd 	.word	0x00013cbd
    ccd8:	0000ca6d 	.word	0x0000ca6d
    ccdc:	0000cb65 	.word	0x0000cb65

0000cce0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    cce0:	b580      	push	{r7, lr}
    cce2:	b084      	sub	sp, #16
    cce4:	af00      	add	r7, sp, #0
    cce6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cce8:	687b      	ldr	r3, [r7, #4]
    ccea:	681b      	ldr	r3, [r3, #0]
    ccec:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    ccee:	687b      	ldr	r3, [r7, #4]
    ccf0:	681b      	ldr	r3, [r3, #0]
    ccf2:	0018      	movs	r0, r3
    ccf4:	4b0e      	ldr	r3, [pc, #56]	; (cd30 <spi_disable+0x50>)
    ccf6:	4798      	blx	r3
    ccf8:	0003      	movs	r3, r0
    ccfa:	0018      	movs	r0, r3
    ccfc:	4b0d      	ldr	r3, [pc, #52]	; (cd34 <spi_disable+0x54>)
    ccfe:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    cd00:	46c0      	nop			; (mov r8, r8)
    cd02:	687b      	ldr	r3, [r7, #4]
    cd04:	0018      	movs	r0, r3
    cd06:	4b0c      	ldr	r3, [pc, #48]	; (cd38 <spi_disable+0x58>)
    cd08:	4798      	blx	r3
    cd0a:	1e03      	subs	r3, r0, #0
    cd0c:	d1f9      	bne.n	cd02 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    cd0e:	68fb      	ldr	r3, [r7, #12]
    cd10:	228f      	movs	r2, #143	; 0x8f
    cd12:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    cd14:	68fb      	ldr	r3, [r7, #12]
    cd16:	228f      	movs	r2, #143	; 0x8f
    cd18:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    cd1a:	68fb      	ldr	r3, [r7, #12]
    cd1c:	681b      	ldr	r3, [r3, #0]
    cd1e:	2202      	movs	r2, #2
    cd20:	4393      	bics	r3, r2
    cd22:	001a      	movs	r2, r3
    cd24:	68fb      	ldr	r3, [r7, #12]
    cd26:	601a      	str	r2, [r3, #0]
}
    cd28:	46c0      	nop			; (mov r8, r8)
    cd2a:	46bd      	mov	sp, r7
    cd2c:	b004      	add	sp, #16
    cd2e:	bd80      	pop	{r7, pc}
    cd30:	00013cbd 	.word	0x00013cbd
    cd34:	0000ca99 	.word	0x0000ca99
    cd38:	0000cb65 	.word	0x0000cb65

0000cd3c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    cd3c:	b580      	push	{r7, lr}
    cd3e:	b084      	sub	sp, #16
    cd40:	af00      	add	r7, sp, #0
    cd42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cd44:	687b      	ldr	r3, [r7, #4]
    cd46:	681b      	ldr	r3, [r3, #0]
    cd48:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cd4a:	68fb      	ldr	r3, [r7, #12]
    cd4c:	7e1b      	ldrb	r3, [r3, #24]
    cd4e:	b2db      	uxtb	r3, r3
    cd50:	001a      	movs	r2, r3
    cd52:	2302      	movs	r3, #2
    cd54:	4013      	ands	r3, r2
    cd56:	1e5a      	subs	r2, r3, #1
    cd58:	4193      	sbcs	r3, r2
    cd5a:	b2db      	uxtb	r3, r3
}
    cd5c:	0018      	movs	r0, r3
    cd5e:	46bd      	mov	sp, r7
    cd60:	b004      	add	sp, #16
    cd62:	bd80      	pop	{r7, pc}

0000cd64 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    cd64:	b580      	push	{r7, lr}
    cd66:	b084      	sub	sp, #16
    cd68:	af00      	add	r7, sp, #0
    cd6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cd6c:	687b      	ldr	r3, [r7, #4]
    cd6e:	681b      	ldr	r3, [r3, #0]
    cd70:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cd72:	68fb      	ldr	r3, [r7, #12]
    cd74:	7e1b      	ldrb	r3, [r3, #24]
    cd76:	b2db      	uxtb	r3, r3
    cd78:	001a      	movs	r2, r3
    cd7a:	2301      	movs	r3, #1
    cd7c:	4013      	ands	r3, r2
    cd7e:	1e5a      	subs	r2, r3, #1
    cd80:	4193      	sbcs	r3, r2
    cd82:	b2db      	uxtb	r3, r3
}
    cd84:	0018      	movs	r0, r3
    cd86:	46bd      	mov	sp, r7
    cd88:	b004      	add	sp, #16
    cd8a:	bd80      	pop	{r7, pc}

0000cd8c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    cd8c:	b580      	push	{r7, lr}
    cd8e:	b084      	sub	sp, #16
    cd90:	af00      	add	r7, sp, #0
    cd92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cd94:	687b      	ldr	r3, [r7, #4]
    cd96:	681b      	ldr	r3, [r3, #0]
    cd98:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cd9a:	68fb      	ldr	r3, [r7, #12]
    cd9c:	7e1b      	ldrb	r3, [r3, #24]
    cd9e:	b2db      	uxtb	r3, r3
    cda0:	001a      	movs	r2, r3
    cda2:	2304      	movs	r3, #4
    cda4:	4013      	ands	r3, r2
    cda6:	1e5a      	subs	r2, r3, #1
    cda8:	4193      	sbcs	r3, r2
    cdaa:	b2db      	uxtb	r3, r3
}
    cdac:	0018      	movs	r0, r3
    cdae:	46bd      	mov	sp, r7
    cdb0:	b004      	add	sp, #16
    cdb2:	bd80      	pop	{r7, pc}

0000cdb4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    cdb4:	b580      	push	{r7, lr}
    cdb6:	b084      	sub	sp, #16
    cdb8:	af00      	add	r7, sp, #0
    cdba:	6078      	str	r0, [r7, #4]
    cdbc:	000a      	movs	r2, r1
    cdbe:	1cbb      	adds	r3, r7, #2
    cdc0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cdc2:	687b      	ldr	r3, [r7, #4]
    cdc4:	681b      	ldr	r3, [r3, #0]
    cdc6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    cdc8:	687b      	ldr	r3, [r7, #4]
    cdca:	0018      	movs	r0, r3
    cdcc:	4b0a      	ldr	r3, [pc, #40]	; (cdf8 <spi_write+0x44>)
    cdce:	4798      	blx	r3
    cdd0:	0003      	movs	r3, r0
    cdd2:	001a      	movs	r2, r3
    cdd4:	2301      	movs	r3, #1
    cdd6:	4053      	eors	r3, r2
    cdd8:	b2db      	uxtb	r3, r3
    cdda:	2b00      	cmp	r3, #0
    cddc:	d001      	beq.n	cde2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    cdde:	2305      	movs	r3, #5
    cde0:	e006      	b.n	cdf0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cde2:	1cbb      	adds	r3, r7, #2
    cde4:	881b      	ldrh	r3, [r3, #0]
    cde6:	05db      	lsls	r3, r3, #23
    cde8:	0dda      	lsrs	r2, r3, #23
    cdea:	68fb      	ldr	r3, [r7, #12]
    cdec:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    cdee:	2300      	movs	r3, #0
}
    cdf0:	0018      	movs	r0, r3
    cdf2:	46bd      	mov	sp, r7
    cdf4:	b004      	add	sp, #16
    cdf6:	bd80      	pop	{r7, pc}
    cdf8:	0000cd65 	.word	0x0000cd65

0000cdfc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    cdfc:	b580      	push	{r7, lr}
    cdfe:	b084      	sub	sp, #16
    ce00:	af00      	add	r7, sp, #0
    ce02:	6078      	str	r0, [r7, #4]
    ce04:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    ce06:	687b      	ldr	r3, [r7, #4]
    ce08:	681b      	ldr	r3, [r3, #0]
    ce0a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    ce0c:	687b      	ldr	r3, [r7, #4]
    ce0e:	0018      	movs	r0, r3
    ce10:	4b1b      	ldr	r3, [pc, #108]	; (ce80 <spi_read+0x84>)
    ce12:	4798      	blx	r3
    ce14:	0003      	movs	r3, r0
    ce16:	001a      	movs	r2, r3
    ce18:	2301      	movs	r3, #1
    ce1a:	4053      	eors	r3, r2
    ce1c:	b2db      	uxtb	r3, r3
    ce1e:	2b00      	cmp	r3, #0
    ce20:	d001      	beq.n	ce26 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    ce22:	2310      	movs	r3, #16
    ce24:	e027      	b.n	ce76 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    ce26:	230f      	movs	r3, #15
    ce28:	18fb      	adds	r3, r7, r3
    ce2a:	2200      	movs	r2, #0
    ce2c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ce2e:	68bb      	ldr	r3, [r7, #8]
    ce30:	8b5b      	ldrh	r3, [r3, #26]
    ce32:	b29b      	uxth	r3, r3
    ce34:	001a      	movs	r2, r3
    ce36:	2304      	movs	r3, #4
    ce38:	4013      	ands	r3, r2
    ce3a:	d006      	beq.n	ce4a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    ce3c:	230f      	movs	r3, #15
    ce3e:	18fb      	adds	r3, r7, r3
    ce40:	221e      	movs	r2, #30
    ce42:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ce44:	68bb      	ldr	r3, [r7, #8]
    ce46:	2204      	movs	r2, #4
    ce48:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ce4a:	687b      	ldr	r3, [r7, #4]
    ce4c:	799b      	ldrb	r3, [r3, #6]
    ce4e:	2b01      	cmp	r3, #1
    ce50:	d108      	bne.n	ce64 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    ce52:	68bb      	ldr	r3, [r7, #8]
    ce54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ce56:	b29b      	uxth	r3, r3
    ce58:	05db      	lsls	r3, r3, #23
    ce5a:	0ddb      	lsrs	r3, r3, #23
    ce5c:	b29a      	uxth	r2, r3
    ce5e:	683b      	ldr	r3, [r7, #0]
    ce60:	801a      	strh	r2, [r3, #0]
    ce62:	e005      	b.n	ce70 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ce64:	68bb      	ldr	r3, [r7, #8]
    ce66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ce68:	b2db      	uxtb	r3, r3
    ce6a:	b29a      	uxth	r2, r3
    ce6c:	683b      	ldr	r3, [r7, #0]
    ce6e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    ce70:	230f      	movs	r3, #15
    ce72:	18fb      	adds	r3, r7, r3
    ce74:	781b      	ldrb	r3, [r3, #0]
}
    ce76:	0018      	movs	r0, r3
    ce78:	46bd      	mov	sp, r7
    ce7a:	b004      	add	sp, #16
    ce7c:	bd80      	pop	{r7, pc}
    ce7e:	46c0      	nop			; (mov r8, r8)
    ce80:	0000cd8d 	.word	0x0000cd8d

0000ce84 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    ce84:	b580      	push	{r7, lr}
    ce86:	b086      	sub	sp, #24
    ce88:	af00      	add	r7, sp, #0
    ce8a:	60f8      	str	r0, [r7, #12]
    ce8c:	60b9      	str	r1, [r7, #8]
    ce8e:	1dbb      	adds	r3, r7, #6
    ce90:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
    ce92:	2313      	movs	r3, #19
    ce94:	18fb      	adds	r3, r7, r3
    ce96:	22ff      	movs	r2, #255	; 0xff
    ce98:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    ce9a:	2317      	movs	r3, #23
    ce9c:	18fb      	adds	r3, r7, r3
    ce9e:	2200      	movs	r2, #0
    cea0:	701a      	strb	r2, [r3, #0]
    cea2:	2316      	movs	r3, #22
    cea4:	18fb      	adds	r3, r7, r3
    cea6:	2200      	movs	r2, #0
    cea8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    ceaa:	2314      	movs	r3, #20
    ceac:	18fb      	adds	r3, r7, r3
    ceae:	2200      	movs	r2, #0
    ceb0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    ceb2:	2310      	movs	r3, #16
    ceb4:	18fb      	adds	r3, r7, r3
    ceb6:	2200      	movs	r2, #0
    ceb8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    ceba:	68bb      	ldr	r3, [r7, #8]
    cebc:	2b00      	cmp	r3, #0
    cebe:	d102      	bne.n	cec6 <spi_rw+0x42>
    cec0:	68fb      	ldr	r3, [r7, #12]
    cec2:	2b00      	cmp	r3, #0
    cec4:	d003      	beq.n	cece <spi_rw+0x4a>
    cec6:	1dbb      	adds	r3, r7, #6
    cec8:	881b      	ldrh	r3, [r3, #0]
    ceca:	2b00      	cmp	r3, #0
    cecc:	d102      	bne.n	ced4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    cece:	230f      	movs	r3, #15
    ced0:	425b      	negs	r3, r3
    ced2:	e07e      	b.n	cfd2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    ced4:	68fb      	ldr	r3, [r7, #12]
    ced6:	2b00      	cmp	r3, #0
    ced8:	d106      	bne.n	cee8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    ceda:	2313      	movs	r3, #19
    cedc:	18fb      	adds	r3, r7, r3
    cede:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    cee0:	2317      	movs	r3, #23
    cee2:	18fb      	adds	r3, r7, r3
    cee4:	2201      	movs	r2, #1
    cee6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    cee8:	68bb      	ldr	r3, [r7, #8]
    ceea:	2b00      	cmp	r3, #0
    ceec:	d106      	bne.n	cefc <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    ceee:	2313      	movs	r3, #19
    cef0:	18fb      	adds	r3, r7, r3
    cef2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    cef4:	2316      	movs	r3, #22
    cef6:	18fb      	adds	r3, r7, r3
    cef8:	2201      	movs	r2, #1
    cefa:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    cefc:	4937      	ldr	r1, [pc, #220]	; (cfdc <spi_rw+0x158>)
    cefe:	4b38      	ldr	r3, [pc, #224]	; (cfe0 <spi_rw+0x15c>)
    cf00:	2201      	movs	r2, #1
    cf02:	0018      	movs	r0, r3
    cf04:	4b37      	ldr	r3, [pc, #220]	; (cfe4 <spi_rw+0x160>)
    cf06:	4798      	blx	r3

	while (u16Sz) {
    cf08:	e04c      	b.n	cfa4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    cf0a:	68fb      	ldr	r3, [r7, #12]
    cf0c:	781a      	ldrb	r2, [r3, #0]
    cf0e:	2314      	movs	r3, #20
    cf10:	18fb      	adds	r3, r7, r3
    cf12:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    cf14:	46c0      	nop			; (mov r8, r8)
    cf16:	4b32      	ldr	r3, [pc, #200]	; (cfe0 <spi_rw+0x15c>)
    cf18:	0018      	movs	r0, r3
    cf1a:	4b33      	ldr	r3, [pc, #204]	; (cfe8 <spi_rw+0x164>)
    cf1c:	4798      	blx	r3
    cf1e:	0003      	movs	r3, r0
    cf20:	001a      	movs	r2, r3
    cf22:	2301      	movs	r3, #1
    cf24:	4053      	eors	r3, r2
    cf26:	b2db      	uxtb	r3, r3
    cf28:	2b00      	cmp	r3, #0
    cf2a:	d1f4      	bne.n	cf16 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    cf2c:	46c0      	nop			; (mov r8, r8)
    cf2e:	2314      	movs	r3, #20
    cf30:	18fb      	adds	r3, r7, r3
    cf32:	881a      	ldrh	r2, [r3, #0]
    cf34:	4b2a      	ldr	r3, [pc, #168]	; (cfe0 <spi_rw+0x15c>)
    cf36:	0011      	movs	r1, r2
    cf38:	0018      	movs	r0, r3
    cf3a:	4b2c      	ldr	r3, [pc, #176]	; (cfec <spi_rw+0x168>)
    cf3c:	4798      	blx	r3
    cf3e:	1e03      	subs	r3, r0, #0
    cf40:	d1f5      	bne.n	cf2e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    cf42:	46c0      	nop			; (mov r8, r8)
    cf44:	4b26      	ldr	r3, [pc, #152]	; (cfe0 <spi_rw+0x15c>)
    cf46:	0018      	movs	r0, r3
    cf48:	4b29      	ldr	r3, [pc, #164]	; (cff0 <spi_rw+0x16c>)
    cf4a:	4798      	blx	r3
    cf4c:	0003      	movs	r3, r0
    cf4e:	001a      	movs	r2, r3
    cf50:	2301      	movs	r3, #1
    cf52:	4053      	eors	r3, r2
    cf54:	b2db      	uxtb	r3, r3
    cf56:	2b00      	cmp	r3, #0
    cf58:	d1f4      	bne.n	cf44 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    cf5a:	46c0      	nop			; (mov r8, r8)
    cf5c:	2310      	movs	r3, #16
    cf5e:	18fa      	adds	r2, r7, r3
    cf60:	4b1f      	ldr	r3, [pc, #124]	; (cfe0 <spi_rw+0x15c>)
    cf62:	0011      	movs	r1, r2
    cf64:	0018      	movs	r0, r3
    cf66:	4b23      	ldr	r3, [pc, #140]	; (cff4 <spi_rw+0x170>)
    cf68:	4798      	blx	r3
    cf6a:	1e03      	subs	r3, r0, #0
    cf6c:	d1f6      	bne.n	cf5c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    cf6e:	2310      	movs	r3, #16
    cf70:	18fb      	adds	r3, r7, r3
    cf72:	881b      	ldrh	r3, [r3, #0]
    cf74:	b2da      	uxtb	r2, r3
    cf76:	68bb      	ldr	r3, [r7, #8]
    cf78:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    cf7a:	1dbb      	adds	r3, r7, #6
    cf7c:	881a      	ldrh	r2, [r3, #0]
    cf7e:	1dbb      	adds	r3, r7, #6
    cf80:	3a01      	subs	r2, #1
    cf82:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    cf84:	2316      	movs	r3, #22
    cf86:	18fb      	adds	r3, r7, r3
    cf88:	781b      	ldrb	r3, [r3, #0]
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	d102      	bne.n	cf94 <spi_rw+0x110>
			pu8Miso++;
    cf8e:	68bb      	ldr	r3, [r7, #8]
    cf90:	3301      	adds	r3, #1
    cf92:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    cf94:	2317      	movs	r3, #23
    cf96:	18fb      	adds	r3, r7, r3
    cf98:	781b      	ldrb	r3, [r3, #0]
    cf9a:	2b00      	cmp	r3, #0
    cf9c:	d102      	bne.n	cfa4 <spi_rw+0x120>
			pu8Mosi++;
    cf9e:	68fb      	ldr	r3, [r7, #12]
    cfa0:	3301      	adds	r3, #1
    cfa2:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
    cfa4:	1dbb      	adds	r3, r7, #6
    cfa6:	881b      	ldrh	r3, [r3, #0]
    cfa8:	2b00      	cmp	r3, #0
    cfaa:	d1ae      	bne.n	cf0a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
    cfac:	46c0      	nop			; (mov r8, r8)
    cfae:	4b0c      	ldr	r3, [pc, #48]	; (cfe0 <spi_rw+0x15c>)
    cfb0:	0018      	movs	r0, r3
    cfb2:	4b11      	ldr	r3, [pc, #68]	; (cff8 <spi_rw+0x174>)
    cfb4:	4798      	blx	r3
    cfb6:	0003      	movs	r3, r0
    cfb8:	001a      	movs	r2, r3
    cfba:	2301      	movs	r3, #1
    cfbc:	4053      	eors	r3, r2
    cfbe:	b2db      	uxtb	r3, r3
    cfc0:	2b00      	cmp	r3, #0
    cfc2:	d1f4      	bne.n	cfae <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    cfc4:	4905      	ldr	r1, [pc, #20]	; (cfdc <spi_rw+0x158>)
    cfc6:	4b06      	ldr	r3, [pc, #24]	; (cfe0 <spi_rw+0x15c>)
    cfc8:	2200      	movs	r2, #0
    cfca:	0018      	movs	r0, r3
    cfcc:	4b05      	ldr	r3, [pc, #20]	; (cfe4 <spi_rw+0x160>)
    cfce:	4798      	blx	r3

	return M2M_SUCCESS;
    cfd0:	2300      	movs	r3, #0
}
    cfd2:	0018      	movs	r0, r3
    cfd4:	46bd      	mov	sp, r7
    cfd6:	b006      	add	sp, #24
    cfd8:	bd80      	pop	{r7, pc}
    cfda:	46c0      	nop			; (mov r8, r8)
    cfdc:	200054d4 	.word	0x200054d4
    cfe0:	200054d8 	.word	0x200054d8
    cfe4:	00014731 	.word	0x00014731
    cfe8:	0000cd65 	.word	0x0000cd65
    cfec:	0000cdb5 	.word	0x0000cdb5
    cff0:	0000cd8d 	.word	0x0000cd8d
    cff4:	0000cdfd 	.word	0x0000cdfd
    cff8:	0000cd3d 	.word	0x0000cd3d

0000cffc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    cffc:	b580      	push	{r7, lr}
    cffe:	b092      	sub	sp, #72	; 0x48
    d000:	af00      	add	r7, sp, #0
    d002:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    d004:	2347      	movs	r3, #71	; 0x47
    d006:	18fb      	adds	r3, r7, r3
    d008:	2200      	movs	r2, #0
    d00a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    d00c:	2308      	movs	r3, #8
    d00e:	18fb      	adds	r3, r7, r3
    d010:	0018      	movs	r0, r3
    d012:	4b26      	ldr	r3, [pc, #152]	; (d0ac <nm_bus_init+0xb0>)
    d014:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    d016:	2308      	movs	r3, #8
    d018:	18fb      	adds	r3, r7, r3
    d01a:	220e      	movs	r2, #14
    d01c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    d01e:	2308      	movs	r3, #8
    d020:	18fa      	adds	r2, r7, r3
    d022:	4b23      	ldr	r3, [pc, #140]	; (d0b0 <nm_bus_init+0xb4>)
    d024:	0011      	movs	r1, r2
    d026:	0018      	movs	r0, r3
    d028:	4b22      	ldr	r3, [pc, #136]	; (d0b4 <nm_bus_init+0xb8>)
    d02a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    d02c:	230c      	movs	r3, #12
    d02e:	18fb      	adds	r3, r7, r3
    d030:	0018      	movs	r0, r3
    d032:	4b21      	ldr	r3, [pc, #132]	; (d0b8 <nm_bus_init+0xbc>)
    d034:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    d036:	230c      	movs	r3, #12
    d038:	18fb      	adds	r3, r7, r3
    d03a:	22c0      	movs	r2, #192	; 0xc0
    d03c:	0392      	lsls	r2, r2, #14
    d03e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    d040:	230c      	movs	r3, #12
    d042:	18fb      	adds	r3, r7, r3
    d044:	4a1d      	ldr	r2, [pc, #116]	; (d0bc <nm_bus_init+0xc0>)
    d046:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    d048:	230c      	movs	r3, #12
    d04a:	18fb      	adds	r3, r7, r3
    d04c:	4a1c      	ldr	r2, [pc, #112]	; (d0c0 <nm_bus_init+0xc4>)
    d04e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    d050:	230c      	movs	r3, #12
    d052:	18fb      	adds	r3, r7, r3
    d054:	2201      	movs	r2, #1
    d056:	4252      	negs	r2, r2
    d058:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    d05a:	230c      	movs	r3, #12
    d05c:	18fb      	adds	r3, r7, r3
    d05e:	4a19      	ldr	r2, [pc, #100]	; (d0c4 <nm_bus_init+0xc8>)
    d060:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    d062:	230c      	movs	r3, #12
    d064:	18fb      	adds	r3, r7, r3
    d066:	2200      	movs	r2, #0
    d068:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    d06a:	230c      	movs	r3, #12
    d06c:	18fb      	adds	r3, r7, r3
    d06e:	4a16      	ldr	r2, [pc, #88]	; (d0c8 <nm_bus_init+0xcc>)
    d070:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    d072:	230c      	movs	r3, #12
    d074:	18fa      	adds	r2, r7, r3
    d076:	4915      	ldr	r1, [pc, #84]	; (d0cc <nm_bus_init+0xd0>)
    d078:	4b15      	ldr	r3, [pc, #84]	; (d0d0 <nm_bus_init+0xd4>)
    d07a:	0018      	movs	r0, r3
    d07c:	4b15      	ldr	r3, [pc, #84]	; (d0d4 <nm_bus_init+0xd8>)
    d07e:	4798      	blx	r3
    d080:	1e03      	subs	r3, r0, #0
    d082:	d002      	beq.n	d08a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    d084:	2306      	movs	r3, #6
    d086:	425b      	negs	r3, r3
    d088:	e00c      	b.n	d0a4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    d08a:	4b11      	ldr	r3, [pc, #68]	; (d0d0 <nm_bus_init+0xd4>)
    d08c:	0018      	movs	r0, r3
    d08e:	4b12      	ldr	r3, [pc, #72]	; (d0d8 <nm_bus_init+0xdc>)
    d090:	4798      	blx	r3

	nm_bsp_reset();
    d092:	4b12      	ldr	r3, [pc, #72]	; (d0dc <nm_bus_init+0xe0>)
    d094:	4798      	blx	r3
	nm_bsp_sleep(1);
    d096:	2001      	movs	r0, #1
    d098:	4b11      	ldr	r3, [pc, #68]	; (d0e0 <nm_bus_init+0xe4>)
    d09a:	4798      	blx	r3
#endif
	return result;
    d09c:	2347      	movs	r3, #71	; 0x47
    d09e:	18fb      	adds	r3, r7, r3
    d0a0:	781b      	ldrb	r3, [r3, #0]
    d0a2:	b25b      	sxtb	r3, r3
}
    d0a4:	0018      	movs	r0, r3
    d0a6:	46bd      	mov	sp, r7
    d0a8:	b012      	add	sp, #72	; 0x48
    d0aa:	bd80      	pop	{r7, pc}
    d0ac:	0000cc09 	.word	0x0000cc09
    d0b0:	200054d4 	.word	0x200054d4
    d0b4:	0000cc2d 	.word	0x0000cc2d
    d0b8:	0000cb85 	.word	0x0000cb85
    d0bc:	000c0002 	.word	0x000c0002
    d0c0:	000d0002 	.word	0x000d0002
    d0c4:	000f0002 	.word	0x000f0002
    d0c8:	00124f80 	.word	0x00124f80
    d0cc:	42001000 	.word	0x42001000
    d0d0:	200054d8 	.word	0x200054d8
    d0d4:	0001446d 	.word	0x0001446d
    d0d8:	0000cc91 	.word	0x0000cc91
    d0dc:	0000c901 	.word	0x0000c901
    d0e0:	0000c941 	.word	0x0000c941

0000d0e4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    d0e4:	b590      	push	{r4, r7, lr}
    d0e6:	b085      	sub	sp, #20
    d0e8:	af00      	add	r7, sp, #0
    d0ea:	0002      	movs	r2, r0
    d0ec:	6039      	str	r1, [r7, #0]
    d0ee:	1dfb      	adds	r3, r7, #7
    d0f0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    d0f2:	230f      	movs	r3, #15
    d0f4:	18fb      	adds	r3, r7, r3
    d0f6:	2200      	movs	r2, #0
    d0f8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    d0fa:	1dfb      	adds	r3, r7, #7
    d0fc:	781b      	ldrb	r3, [r3, #0]
    d0fe:	2b03      	cmp	r3, #3
    d100:	d10f      	bne.n	d122 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    d102:	683b      	ldr	r3, [r7, #0]
    d104:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    d106:	68bb      	ldr	r3, [r7, #8]
    d108:	6818      	ldr	r0, [r3, #0]
    d10a:	68bb      	ldr	r3, [r7, #8]
    d10c:	6859      	ldr	r1, [r3, #4]
    d10e:	68bb      	ldr	r3, [r7, #8]
    d110:	891b      	ldrh	r3, [r3, #8]
    d112:	220f      	movs	r2, #15
    d114:	18bc      	adds	r4, r7, r2
    d116:	001a      	movs	r2, r3
    d118:	4b10      	ldr	r3, [pc, #64]	; (d15c <nm_bus_ioctl+0x78>)
    d11a:	4798      	blx	r3
    d11c:	0003      	movs	r3, r0
    d11e:	7023      	strb	r3, [r4, #0]
		}
		break;
    d120:	e013      	b.n	d14a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    d122:	230f      	movs	r3, #15
    d124:	18fb      	adds	r3, r7, r3
    d126:	22ff      	movs	r2, #255	; 0xff
    d128:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    d12a:	2383      	movs	r3, #131	; 0x83
    d12c:	005a      	lsls	r2, r3, #1
    d12e:	490c      	ldr	r1, [pc, #48]	; (d160 <nm_bus_ioctl+0x7c>)
    d130:	4b0c      	ldr	r3, [pc, #48]	; (d164 <nm_bus_ioctl+0x80>)
    d132:	0018      	movs	r0, r3
    d134:	4b0c      	ldr	r3, [pc, #48]	; (d168 <nm_bus_ioctl+0x84>)
    d136:	4798      	blx	r3
    d138:	4b0c      	ldr	r3, [pc, #48]	; (d16c <nm_bus_ioctl+0x88>)
    d13a:	0018      	movs	r0, r3
    d13c:	4b0a      	ldr	r3, [pc, #40]	; (d168 <nm_bus_ioctl+0x84>)
    d13e:	4798      	blx	r3
    d140:	4b0b      	ldr	r3, [pc, #44]	; (d170 <nm_bus_ioctl+0x8c>)
    d142:	0018      	movs	r0, r3
    d144:	4b08      	ldr	r3, [pc, #32]	; (d168 <nm_bus_ioctl+0x84>)
    d146:	4798      	blx	r3
			break;
    d148:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    d14a:	230f      	movs	r3, #15
    d14c:	18fb      	adds	r3, r7, r3
    d14e:	781b      	ldrb	r3, [r3, #0]
    d150:	b25b      	sxtb	r3, r3
}
    d152:	0018      	movs	r0, r3
    d154:	46bd      	mov	sp, r7
    d156:	b005      	add	sp, #20
    d158:	bd90      	pop	{r4, r7, pc}
    d15a:	46c0      	nop			; (mov r8, r8)
    d15c:	0000ce85 	.word	0x0000ce85
    d160:	000245c0 	.word	0x000245c0
    d164:	00024594 	.word	0x00024594
    d168:	0000a4ed 	.word	0x0000a4ed
    d16c:	000245a8 	.word	0x000245a8
    d170:	000245bc 	.word	0x000245bc

0000d174 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    d174:	b580      	push	{r7, lr}
    d176:	b082      	sub	sp, #8
    d178:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    d17a:	1dfb      	adds	r3, r7, #7
    d17c:	2200      	movs	r2, #0
    d17e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    d180:	1d3b      	adds	r3, r7, #4
    d182:	0018      	movs	r0, r3
    d184:	4b13      	ldr	r3, [pc, #76]	; (d1d4 <nm_bus_deinit+0x60>)
    d186:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    d188:	1d3b      	adds	r3, r7, #4
    d18a:	2200      	movs	r2, #0
    d18c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    d18e:	1d3b      	adds	r3, r7, #4
    d190:	2200      	movs	r2, #0
    d192:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    d194:	4b10      	ldr	r3, [pc, #64]	; (d1d8 <nm_bus_deinit+0x64>)
    d196:	0018      	movs	r0, r3
    d198:	4b10      	ldr	r3, [pc, #64]	; (d1dc <nm_bus_deinit+0x68>)
    d19a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    d19c:	1d3b      	adds	r3, r7, #4
    d19e:	0019      	movs	r1, r3
    d1a0:	200c      	movs	r0, #12
    d1a2:	4b0f      	ldr	r3, [pc, #60]	; (d1e0 <nm_bus_deinit+0x6c>)
    d1a4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    d1a6:	1d3b      	adds	r3, r7, #4
    d1a8:	0019      	movs	r1, r3
    d1aa:	200f      	movs	r0, #15
    d1ac:	4b0c      	ldr	r3, [pc, #48]	; (d1e0 <nm_bus_deinit+0x6c>)
    d1ae:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    d1b0:	1d3b      	adds	r3, r7, #4
    d1b2:	0019      	movs	r1, r3
    d1b4:	200d      	movs	r0, #13
    d1b6:	4b0a      	ldr	r3, [pc, #40]	; (d1e0 <nm_bus_deinit+0x6c>)
    d1b8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    d1ba:	1d3b      	adds	r3, r7, #4
    d1bc:	0019      	movs	r1, r3
    d1be:	200e      	movs	r0, #14
    d1c0:	4b07      	ldr	r3, [pc, #28]	; (d1e0 <nm_bus_deinit+0x6c>)
    d1c2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    d1c4:	1dfb      	adds	r3, r7, #7
    d1c6:	781b      	ldrb	r3, [r3, #0]
    d1c8:	b25b      	sxtb	r3, r3
}
    d1ca:	0018      	movs	r0, r3
    d1cc:	46bd      	mov	sp, r7
    d1ce:	b002      	add	sp, #8
    d1d0:	bd80      	pop	{r7, pc}
    d1d2:	46c0      	nop			; (mov r8, r8)
    d1d4:	0000caed 	.word	0x0000caed
    d1d8:	200054d8 	.word	0x200054d8
    d1dc:	0000cce1 	.word	0x0000cce1
    d1e0:	00012fed 	.word	0x00012fed

0000d1e4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    d1e4:	b580      	push	{r7, lr}
    d1e6:	b084      	sub	sp, #16
    d1e8:	af00      	add	r7, sp, #0
    d1ea:	60f8      	str	r0, [r7, #12]
    d1ec:	60b9      	str	r1, [r7, #8]
    d1ee:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    d1f0:	687b      	ldr	r3, [r7, #4]
    d1f2:	2b00      	cmp	r3, #0
    d1f4:	d010      	beq.n	d218 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    d1f6:	68bb      	ldr	r3, [r7, #8]
    d1f8:	781a      	ldrb	r2, [r3, #0]
    d1fa:	68fb      	ldr	r3, [r7, #12]
    d1fc:	701a      	strb	r2, [r3, #0]
		pDst++;
    d1fe:	68fb      	ldr	r3, [r7, #12]
    d200:	3301      	adds	r3, #1
    d202:	60fb      	str	r3, [r7, #12]
		pSrc++;
    d204:	68bb      	ldr	r3, [r7, #8]
    d206:	3301      	adds	r3, #1
    d208:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    d20a:	687b      	ldr	r3, [r7, #4]
    d20c:	3b01      	subs	r3, #1
    d20e:	607b      	str	r3, [r7, #4]
    d210:	687b      	ldr	r3, [r7, #4]
    d212:	2b00      	cmp	r3, #0
    d214:	d1ef      	bne.n	d1f6 <m2m_memcpy+0x12>
    d216:	e000      	b.n	d21a <m2m_memcpy+0x36>
	if(sz == 0) return;
    d218:	46c0      	nop			; (mov r8, r8)
}
    d21a:	46bd      	mov	sp, r7
    d21c:	b004      	add	sp, #16
    d21e:	bd80      	pop	{r7, pc}

0000d220 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    d220:	b580      	push	{r7, lr}
    d222:	b084      	sub	sp, #16
    d224:	af00      	add	r7, sp, #0
    d226:	60f8      	str	r0, [r7, #12]
    d228:	607a      	str	r2, [r7, #4]
    d22a:	230b      	movs	r3, #11
    d22c:	18fb      	adds	r3, r7, r3
    d22e:	1c0a      	adds	r2, r1, #0
    d230:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    d232:	687b      	ldr	r3, [r7, #4]
    d234:	2b00      	cmp	r3, #0
    d236:	d00e      	beq.n	d256 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    d238:	68fb      	ldr	r3, [r7, #12]
    d23a:	220b      	movs	r2, #11
    d23c:	18ba      	adds	r2, r7, r2
    d23e:	7812      	ldrb	r2, [r2, #0]
    d240:	701a      	strb	r2, [r3, #0]
		pBuf++;
    d242:	68fb      	ldr	r3, [r7, #12]
    d244:	3301      	adds	r3, #1
    d246:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    d248:	687b      	ldr	r3, [r7, #4]
    d24a:	3b01      	subs	r3, #1
    d24c:	607b      	str	r3, [r7, #4]
    d24e:	687b      	ldr	r3, [r7, #4]
    d250:	2b00      	cmp	r3, #0
    d252:	d1f1      	bne.n	d238 <m2m_memset+0x18>
    d254:	e000      	b.n	d258 <m2m_memset+0x38>
	if(sz == 0) return;
    d256:	46c0      	nop			; (mov r8, r8)
}
    d258:	46bd      	mov	sp, r7
    d25a:	b004      	add	sp, #16
    d25c:	bd80      	pop	{r7, pc}

0000d25e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    d25e:	b580      	push	{r7, lr}
    d260:	b084      	sub	sp, #16
    d262:	af00      	add	r7, sp, #0
    d264:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    d266:	230e      	movs	r3, #14
    d268:	18fb      	adds	r3, r7, r3
    d26a:	2200      	movs	r2, #0
    d26c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    d26e:	e009      	b.n	d284 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    d270:	230e      	movs	r3, #14
    d272:	18fb      	adds	r3, r7, r3
    d274:	881a      	ldrh	r2, [r3, #0]
    d276:	230e      	movs	r3, #14
    d278:	18fb      	adds	r3, r7, r3
    d27a:	3201      	adds	r2, #1
    d27c:	801a      	strh	r2, [r3, #0]
		pcStr++;
    d27e:	687b      	ldr	r3, [r7, #4]
    d280:	3301      	adds	r3, #1
    d282:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    d284:	687b      	ldr	r3, [r7, #4]
    d286:	781b      	ldrb	r3, [r3, #0]
    d288:	2b00      	cmp	r3, #0
    d28a:	d1f1      	bne.n	d270 <m2m_strlen+0x12>
	}
	return u16StrLen;
    d28c:	230e      	movs	r3, #14
    d28e:	18fb      	adds	r3, r7, r3
    d290:	881b      	ldrh	r3, [r3, #0]
}
    d292:	0018      	movs	r0, r3
    d294:	46bd      	mov	sp, r7
    d296:	b004      	add	sp, #16
    d298:	bd80      	pop	{r7, pc}
	...

0000d29c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
    d29c:	b580      	push	{r7, lr}
    d29e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    d2a0:	4b04      	ldr	r3, [pc, #16]	; (d2b4 <isr+0x18>)
    d2a2:	78db      	ldrb	r3, [r3, #3]
    d2a4:	b2db      	uxtb	r3, r3
    d2a6:	3301      	adds	r3, #1
    d2a8:	b2da      	uxtb	r2, r3
    d2aa:	4b02      	ldr	r3, [pc, #8]	; (d2b4 <isr+0x18>)
    d2ac:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    d2ae:	46c0      	nop			; (mov r8, r8)
    d2b0:	46bd      	mov	sp, r7
    d2b2:	bd80      	pop	{r7, pc}
    d2b4:	20005514 	.word	0x20005514

0000d2b8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    d2b8:	b590      	push	{r4, r7, lr}
    d2ba:	b083      	sub	sp, #12
    d2bc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    d2be:	1dfb      	adds	r3, r7, #7
    d2c0:	2200      	movs	r2, #0
    d2c2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    d2c4:	4b14      	ldr	r3, [pc, #80]	; (d318 <hif_set_rx_done+0x60>)
    d2c6:	2200      	movs	r2, #0
    d2c8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    d2ca:	2001      	movs	r0, #1
    d2cc:	4b13      	ldr	r3, [pc, #76]	; (d31c <hif_set_rx_done+0x64>)
    d2ce:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    d2d0:	1dfc      	adds	r4, r7, #7
    d2d2:	003b      	movs	r3, r7
    d2d4:	4a12      	ldr	r2, [pc, #72]	; (d320 <hif_set_rx_done+0x68>)
    d2d6:	0019      	movs	r1, r3
    d2d8:	0010      	movs	r0, r2
    d2da:	4b12      	ldr	r3, [pc, #72]	; (d324 <hif_set_rx_done+0x6c>)
    d2dc:	4798      	blx	r3
    d2de:	0003      	movs	r3, r0
    d2e0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    d2e2:	1dfb      	adds	r3, r7, #7
    d2e4:	781b      	ldrb	r3, [r3, #0]
    d2e6:	b25b      	sxtb	r3, r3
    d2e8:	2b00      	cmp	r3, #0
    d2ea:	d10d      	bne.n	d308 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    d2ec:	683b      	ldr	r3, [r7, #0]
    d2ee:	2202      	movs	r2, #2
    d2f0:	4313      	orrs	r3, r2
    d2f2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    d2f4:	683b      	ldr	r3, [r7, #0]
    d2f6:	1dfc      	adds	r4, r7, #7
    d2f8:	4a09      	ldr	r2, [pc, #36]	; (d320 <hif_set_rx_done+0x68>)
    d2fa:	0019      	movs	r1, r3
    d2fc:	0010      	movs	r0, r2
    d2fe:	4b0a      	ldr	r3, [pc, #40]	; (d328 <hif_set_rx_done+0x70>)
    d300:	4798      	blx	r3
    d302:	0003      	movs	r3, r0
    d304:	7023      	strb	r3, [r4, #0]
    d306:	e000      	b.n	d30a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
    d308:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    d30a:	1dfb      	adds	r3, r7, #7
    d30c:	781b      	ldrb	r3, [r3, #0]
    d30e:	b25b      	sxtb	r3, r3

}
    d310:	0018      	movs	r0, r3
    d312:	46bd      	mov	sp, r7
    d314:	b003      	add	sp, #12
    d316:	bd90      	pop	{r4, r7, pc}
    d318:	20005514 	.word	0x20005514
    d31c:	0000c9d5 	.word	0x0000c9d5
    d320:	00001070 	.word	0x00001070
    d324:	0000f2b1 	.word	0x0000f2b1
    d328:	0000f2d5 	.word	0x0000f2d5

0000d32c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    d32c:	b580      	push	{r7, lr}
    d32e:	b082      	sub	sp, #8
    d330:	af00      	add	r7, sp, #0
    d332:	603a      	str	r2, [r7, #0]
    d334:	1dfb      	adds	r3, r7, #7
    d336:	1c02      	adds	r2, r0, #0
    d338:	701a      	strb	r2, [r3, #0]
    d33a:	1d3b      	adds	r3, r7, #4
    d33c:	1c0a      	adds	r2, r1, #0
    d33e:	801a      	strh	r2, [r3, #0]


}
    d340:	46c0      	nop			; (mov r8, r8)
    d342:	46bd      	mov	sp, r7
    d344:	b002      	add	sp, #8
    d346:	bd80      	pop	{r7, pc}

0000d348 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    d348:	b590      	push	{r4, r7, lr}
    d34a:	b083      	sub	sp, #12
    d34c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    d34e:	1dfb      	adds	r3, r7, #7
    d350:	2200      	movs	r2, #0
    d352:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    d354:	4b16      	ldr	r3, [pc, #88]	; (d3b0 <hif_chip_wake+0x68>)
    d356:	789b      	ldrb	r3, [r3, #2]
    d358:	b2db      	uxtb	r3, r3
    d35a:	2b00      	cmp	r3, #0
    d35c:	d003      	beq.n	d366 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    d35e:	1dfb      	adds	r3, r7, #7
    d360:	781b      	ldrb	r3, [r3, #0]
    d362:	b25b      	sxtb	r3, r3
    d364:	e01f      	b.n	d3a6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    d366:	4b12      	ldr	r3, [pc, #72]	; (d3b0 <hif_chip_wake+0x68>)
    d368:	785b      	ldrb	r3, [r3, #1]
    d36a:	b2db      	uxtb	r3, r3
    d36c:	2b00      	cmp	r3, #0
    d36e:	d10e      	bne.n	d38e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    d370:	4b0f      	ldr	r3, [pc, #60]	; (d3b0 <hif_chip_wake+0x68>)
    d372:	781b      	ldrb	r3, [r3, #0]
    d374:	b2db      	uxtb	r3, r3
    d376:	2b00      	cmp	r3, #0
    d378:	d009      	beq.n	d38e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    d37a:	1dfc      	adds	r4, r7, #7
    d37c:	4b0d      	ldr	r3, [pc, #52]	; (d3b4 <hif_chip_wake+0x6c>)
    d37e:	4798      	blx	r3
    d380:	0003      	movs	r3, r0
    d382:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    d384:	1dfb      	adds	r3, r7, #7
    d386:	781b      	ldrb	r3, [r3, #0]
    d388:	b25b      	sxtb	r3, r3
    d38a:	2b00      	cmp	r3, #0
    d38c:	d107      	bne.n	d39e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    d38e:	4b08      	ldr	r3, [pc, #32]	; (d3b0 <hif_chip_wake+0x68>)
    d390:	785b      	ldrb	r3, [r3, #1]
    d392:	b2db      	uxtb	r3, r3
    d394:	3301      	adds	r3, #1
    d396:	b2da      	uxtb	r2, r3
    d398:	4b05      	ldr	r3, [pc, #20]	; (d3b0 <hif_chip_wake+0x68>)
    d39a:	705a      	strb	r2, [r3, #1]
    d39c:	e000      	b.n	d3a0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
    d39e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    d3a0:	1dfb      	adds	r3, r7, #7
    d3a2:	781b      	ldrb	r3, [r3, #0]
    d3a4:	b25b      	sxtb	r3, r3
}
    d3a6:	0018      	movs	r0, r3
    d3a8:	46bd      	mov	sp, r7
    d3aa:	b003      	add	sp, #12
    d3ac:	bd90      	pop	{r4, r7, pc}
    d3ae:	46c0      	nop			; (mov r8, r8)
    d3b0:	20005514 	.word	0x20005514
    d3b4:	0000ed81 	.word	0x0000ed81

0000d3b8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    d3b8:	b580      	push	{r7, lr}
    d3ba:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    d3bc:	4b07      	ldr	r3, [pc, #28]	; (d3dc <hif_chip_sleep_sc+0x24>)
    d3be:	785b      	ldrb	r3, [r3, #1]
    d3c0:	b2db      	uxtb	r3, r3
    d3c2:	2b00      	cmp	r3, #0
    d3c4:	d006      	beq.n	d3d4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    d3c6:	4b05      	ldr	r3, [pc, #20]	; (d3dc <hif_chip_sleep_sc+0x24>)
    d3c8:	785b      	ldrb	r3, [r3, #1]
    d3ca:	b2db      	uxtb	r3, r3
    d3cc:	3b01      	subs	r3, #1
    d3ce:	b2da      	uxtb	r2, r3
    d3d0:	4b02      	ldr	r3, [pc, #8]	; (d3dc <hif_chip_sleep_sc+0x24>)
    d3d2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    d3d4:	2300      	movs	r3, #0
}
    d3d6:	0018      	movs	r0, r3
    d3d8:	46bd      	mov	sp, r7
    d3da:	bd80      	pop	{r7, pc}
    d3dc:	20005514 	.word	0x20005514

0000d3e0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    d3e0:	b590      	push	{r4, r7, lr}
    d3e2:	b083      	sub	sp, #12
    d3e4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    d3e6:	1dfb      	adds	r3, r7, #7
    d3e8:	2200      	movs	r2, #0
    d3ea:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    d3ec:	4b10      	ldr	r3, [pc, #64]	; (d430 <hif_chip_sleep+0x50>)
    d3ee:	785b      	ldrb	r3, [r3, #1]
    d3f0:	b2db      	uxtb	r3, r3
    d3f2:	2b00      	cmp	r3, #0
    d3f4:	d006      	beq.n	d404 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    d3f6:	4b0e      	ldr	r3, [pc, #56]	; (d430 <hif_chip_sleep+0x50>)
    d3f8:	785b      	ldrb	r3, [r3, #1]
    d3fa:	b2db      	uxtb	r3, r3
    d3fc:	3b01      	subs	r3, #1
    d3fe:	b2da      	uxtb	r2, r3
    d400:	4b0b      	ldr	r3, [pc, #44]	; (d430 <hif_chip_sleep+0x50>)
    d402:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    d404:	4b0a      	ldr	r3, [pc, #40]	; (d430 <hif_chip_sleep+0x50>)
    d406:	785b      	ldrb	r3, [r3, #1]
    d408:	b2db      	uxtb	r3, r3
    d40a:	2b00      	cmp	r3, #0
    d40c:	d109      	bne.n	d422 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    d40e:	4b08      	ldr	r3, [pc, #32]	; (d430 <hif_chip_sleep+0x50>)
    d410:	781b      	ldrb	r3, [r3, #0]
    d412:	b2db      	uxtb	r3, r3
    d414:	2b00      	cmp	r3, #0
    d416:	d004      	beq.n	d422 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    d418:	1dfc      	adds	r4, r7, #7
    d41a:	4b06      	ldr	r3, [pc, #24]	; (d434 <hif_chip_sleep+0x54>)
    d41c:	4798      	blx	r3
    d41e:	0003      	movs	r3, r0
    d420:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    d422:	1dfb      	adds	r3, r7, #7
    d424:	781b      	ldrb	r3, [r3, #0]
    d426:	b25b      	sxtb	r3, r3
}
    d428:	0018      	movs	r0, r3
    d42a:	46bd      	mov	sp, r7
    d42c:	b003      	add	sp, #12
    d42e:	bd90      	pop	{r4, r7, pc}
    d430:	20005514 	.word	0x20005514
    d434:	0000eca9 	.word	0x0000eca9

0000d438 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    d438:	b580      	push	{r7, lr}
    d43a:	b082      	sub	sp, #8
    d43c:	af00      	add	r7, sp, #0
    d43e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    d440:	4b09      	ldr	r3, [pc, #36]	; (d468 <hif_init+0x30>)
    d442:	222c      	movs	r2, #44	; 0x2c
    d444:	2100      	movs	r1, #0
    d446:	0018      	movs	r0, r3
    d448:	4b08      	ldr	r3, [pc, #32]	; (d46c <hif_init+0x34>)
    d44a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    d44c:	4b08      	ldr	r3, [pc, #32]	; (d470 <hif_init+0x38>)
    d44e:	0018      	movs	r0, r3
    d450:	4b08      	ldr	r3, [pc, #32]	; (d474 <hif_init+0x3c>)
    d452:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    d454:	4b08      	ldr	r3, [pc, #32]	; (d478 <hif_init+0x40>)
    d456:	0019      	movs	r1, r3
    d458:	2003      	movs	r0, #3
    d45a:	4b08      	ldr	r3, [pc, #32]	; (d47c <hif_init+0x44>)
    d45c:	4798      	blx	r3
	return M2M_SUCCESS;
    d45e:	2300      	movs	r3, #0
}
    d460:	0018      	movs	r0, r3
    d462:	46bd      	mov	sp, r7
    d464:	b002      	add	sp, #8
    d466:	bd80      	pop	{r7, pc}
    d468:	20005514 	.word	0x20005514
    d46c:	0000d221 	.word	0x0000d221
    d470:	0000d29d 	.word	0x0000d29d
    d474:	0000c95d 	.word	0x0000c95d
    d478:	0000d32d 	.word	0x0000d32d
    d47c:	0000df1d 	.word	0x0000df1d

0000d480 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    d480:	b590      	push	{r4, r7, lr}
    d482:	b089      	sub	sp, #36	; 0x24
    d484:	af00      	add	r7, sp, #0
    d486:	0004      	movs	r4, r0
    d488:	0008      	movs	r0, r1
    d48a:	603a      	str	r2, [r7, #0]
    d48c:	0019      	movs	r1, r3
    d48e:	1dfb      	adds	r3, r7, #7
    d490:	1c22      	adds	r2, r4, #0
    d492:	701a      	strb	r2, [r3, #0]
    d494:	1dbb      	adds	r3, r7, #6
    d496:	1c02      	adds	r2, r0, #0
    d498:	701a      	strb	r2, [r3, #0]
    d49a:	1d3b      	adds	r3, r7, #4
    d49c:	1c0a      	adds	r2, r1, #0
    d49e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    d4a0:	231f      	movs	r3, #31
    d4a2:	18fb      	adds	r3, r7, r3
    d4a4:	22ff      	movs	r2, #255	; 0xff
    d4a6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    d4a8:	1dbb      	adds	r3, r7, #6
    d4aa:	781b      	ldrb	r3, [r3, #0]
    d4ac:	227f      	movs	r2, #127	; 0x7f
    d4ae:	4013      	ands	r3, r2
    d4b0:	b2da      	uxtb	r2, r3
    d4b2:	2318      	movs	r3, #24
    d4b4:	18fb      	adds	r3, r7, r3
    d4b6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    d4b8:	2318      	movs	r3, #24
    d4ba:	18fb      	adds	r3, r7, r3
    d4bc:	1dfa      	adds	r2, r7, #7
    d4be:	7812      	ldrb	r2, [r2, #0]
    d4c0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    d4c2:	2318      	movs	r3, #24
    d4c4:	18fb      	adds	r3, r7, r3
    d4c6:	2208      	movs	r2, #8
    d4c8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    d4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d4cc:	2b00      	cmp	r3, #0
    d4ce:	d011      	beq.n	d4f4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    d4d0:	2318      	movs	r3, #24
    d4d2:	18fb      	adds	r3, r7, r3
    d4d4:	885b      	ldrh	r3, [r3, #2]
    d4d6:	b29a      	uxth	r2, r3
    d4d8:	2338      	movs	r3, #56	; 0x38
    d4da:	18f9      	adds	r1, r7, r3
    d4dc:	2334      	movs	r3, #52	; 0x34
    d4de:	18fb      	adds	r3, r7, r3
    d4e0:	8809      	ldrh	r1, [r1, #0]
    d4e2:	881b      	ldrh	r3, [r3, #0]
    d4e4:	18cb      	adds	r3, r1, r3
    d4e6:	b29b      	uxth	r3, r3
    d4e8:	18d3      	adds	r3, r2, r3
    d4ea:	b29a      	uxth	r2, r3
    d4ec:	2318      	movs	r3, #24
    d4ee:	18fb      	adds	r3, r7, r3
    d4f0:	805a      	strh	r2, [r3, #2]
    d4f2:	e00a      	b.n	d50a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    d4f4:	2318      	movs	r3, #24
    d4f6:	18fb      	adds	r3, r7, r3
    d4f8:	885b      	ldrh	r3, [r3, #2]
    d4fa:	b29a      	uxth	r2, r3
    d4fc:	1d3b      	adds	r3, r7, #4
    d4fe:	881b      	ldrh	r3, [r3, #0]
    d500:	18d3      	adds	r3, r2, r3
    d502:	b29a      	uxth	r2, r3
    d504:	2318      	movs	r3, #24
    d506:	18fb      	adds	r3, r7, r3
    d508:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    d50a:	231f      	movs	r3, #31
    d50c:	18fc      	adds	r4, r7, r3
    d50e:	4bb2      	ldr	r3, [pc, #712]	; (d7d8 <hif_send+0x358>)
    d510:	4798      	blx	r3
    d512:	0003      	movs	r3, r0
    d514:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    d516:	231f      	movs	r3, #31
    d518:	18fb      	adds	r3, r7, r3
    d51a:	781b      	ldrb	r3, [r3, #0]
    d51c:	b25b      	sxtb	r3, r3
    d51e:	2b00      	cmp	r3, #0
    d520:	d000      	beq.n	d524 <hif_send+0xa4>
    d522:	e129      	b.n	d778 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
    d524:	2300      	movs	r3, #0
    d526:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    d528:	230e      	movs	r3, #14
    d52a:	18fb      	adds	r3, r7, r3
    d52c:	2200      	movs	r2, #0
    d52e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    d530:	2300      	movs	r3, #0
    d532:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    d534:	1dfb      	adds	r3, r7, #7
    d536:	781a      	ldrb	r2, [r3, #0]
    d538:	697b      	ldr	r3, [r7, #20]
    d53a:	4313      	orrs	r3, r2
    d53c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    d53e:	1dbb      	adds	r3, r7, #6
    d540:	781b      	ldrb	r3, [r3, #0]
    d542:	021a      	lsls	r2, r3, #8
    d544:	697b      	ldr	r3, [r7, #20]
    d546:	4313      	orrs	r3, r2
    d548:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    d54a:	2318      	movs	r3, #24
    d54c:	18fb      	adds	r3, r7, r3
    d54e:	885b      	ldrh	r3, [r3, #2]
    d550:	b29b      	uxth	r3, r3
    d552:	041a      	lsls	r2, r3, #16
    d554:	697b      	ldr	r3, [r7, #20]
    d556:	4313      	orrs	r3, r2
    d558:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    d55a:	697b      	ldr	r3, [r7, #20]
    d55c:	221f      	movs	r2, #31
    d55e:	18bc      	adds	r4, r7, r2
    d560:	4a9e      	ldr	r2, [pc, #632]	; (d7dc <hif_send+0x35c>)
    d562:	0019      	movs	r1, r3
    d564:	0010      	movs	r0, r2
    d566:	4b9e      	ldr	r3, [pc, #632]	; (d7e0 <hif_send+0x360>)
    d568:	4798      	blx	r3
    d56a:	0003      	movs	r3, r0
    d56c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    d56e:	231f      	movs	r3, #31
    d570:	18fb      	adds	r3, r7, r3
    d572:	781b      	ldrb	r3, [r3, #0]
    d574:	b25b      	sxtb	r3, r3
    d576:	2b00      	cmp	r3, #0
    d578:	d000      	beq.n	d57c <hif_send+0xfc>
    d57a:	e119      	b.n	d7b0 <hif_send+0x330>

		reg = 0UL;
    d57c:	2300      	movs	r3, #0
    d57e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    d580:	697b      	ldr	r3, [r7, #20]
    d582:	2202      	movs	r2, #2
    d584:	4313      	orrs	r3, r2
    d586:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    d588:	697b      	ldr	r3, [r7, #20]
    d58a:	221f      	movs	r2, #31
    d58c:	18bc      	adds	r4, r7, r2
    d58e:	4a95      	ldr	r2, [pc, #596]	; (d7e4 <hif_send+0x364>)
    d590:	0019      	movs	r1, r3
    d592:	0010      	movs	r0, r2
    d594:	4b92      	ldr	r3, [pc, #584]	; (d7e0 <hif_send+0x360>)
    d596:	4798      	blx	r3
    d598:	0003      	movs	r3, r0
    d59a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    d59c:	231f      	movs	r3, #31
    d59e:	18fb      	adds	r3, r7, r3
    d5a0:	781b      	ldrb	r3, [r3, #0]
    d5a2:	b25b      	sxtb	r3, r3
    d5a4:	2b00      	cmp	r3, #0
    d5a6:	d000      	beq.n	d5aa <hif_send+0x12a>
    d5a8:	e104      	b.n	d7b4 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    d5aa:	2300      	movs	r3, #0
    d5ac:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    d5ae:	230e      	movs	r3, #14
    d5b0:	18fb      	adds	r3, r7, r3
    d5b2:	2200      	movs	r2, #0
    d5b4:	801a      	strh	r2, [r3, #0]
    d5b6:	e050      	b.n	d65a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    d5b8:	231f      	movs	r3, #31
    d5ba:	18fc      	adds	r4, r7, r3
    d5bc:	2314      	movs	r3, #20
    d5be:	18fb      	adds	r3, r7, r3
    d5c0:	4a88      	ldr	r2, [pc, #544]	; (d7e4 <hif_send+0x364>)
    d5c2:	0019      	movs	r1, r3
    d5c4:	0010      	movs	r0, r2
    d5c6:	4b88      	ldr	r3, [pc, #544]	; (d7e8 <hif_send+0x368>)
    d5c8:	4798      	blx	r3
    d5ca:	0003      	movs	r3, r0
    d5cc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    d5ce:	231f      	movs	r3, #31
    d5d0:	18fb      	adds	r3, r7, r3
    d5d2:	781b      	ldrb	r3, [r3, #0]
    d5d4:	b25b      	sxtb	r3, r3
    d5d6:	2b00      	cmp	r3, #0
    d5d8:	d147      	bne.n	d66a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    d5da:	230e      	movs	r3, #14
    d5dc:	18fb      	adds	r3, r7, r3
    d5de:	881b      	ldrh	r3, [r3, #0]
    d5e0:	b29a      	uxth	r2, r3
    d5e2:	23f4      	movs	r3, #244	; 0xf4
    d5e4:	33ff      	adds	r3, #255	; 0xff
    d5e6:	429a      	cmp	r2, r3
    d5e8:	d916      	bls.n	d618 <hif_send+0x198>
				if(cnt < 501) {
    d5ea:	230e      	movs	r3, #14
    d5ec:	18fb      	adds	r3, r7, r3
    d5ee:	881b      	ldrh	r3, [r3, #0]
    d5f0:	b29a      	uxth	r2, r3
    d5f2:	23fa      	movs	r3, #250	; 0xfa
    d5f4:	005b      	lsls	r3, r3, #1
    d5f6:	429a      	cmp	r2, r3
    d5f8:	d80b      	bhi.n	d612 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
    d5fa:	4b7c      	ldr	r3, [pc, #496]	; (d7ec <hif_send+0x36c>)
    d5fc:	0018      	movs	r0, r3
    d5fe:	4b7c      	ldr	r3, [pc, #496]	; (d7f0 <hif_send+0x370>)
    d600:	4798      	blx	r3
    d602:	4b7c      	ldr	r3, [pc, #496]	; (d7f4 <hif_send+0x374>)
    d604:	0018      	movs	r0, r3
    d606:	4b7a      	ldr	r3, [pc, #488]	; (d7f0 <hif_send+0x370>)
    d608:	4798      	blx	r3
    d60a:	4b7b      	ldr	r3, [pc, #492]	; (d7f8 <hif_send+0x378>)
    d60c:	0018      	movs	r0, r3
    d60e:	4b78      	ldr	r3, [pc, #480]	; (d7f0 <hif_send+0x370>)
    d610:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    d612:	2001      	movs	r0, #1
    d614:	4b79      	ldr	r3, [pc, #484]	; (d7fc <hif_send+0x37c>)
    d616:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    d618:	697b      	ldr	r3, [r7, #20]
    d61a:	2202      	movs	r2, #2
    d61c:	4013      	ands	r3, r2
    d61e:	d113      	bne.n	d648 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    d620:	231f      	movs	r3, #31
    d622:	18fc      	adds	r4, r7, r3
    d624:	2310      	movs	r3, #16
    d626:	18fb      	adds	r3, r7, r3
    d628:	4a75      	ldr	r2, [pc, #468]	; (d800 <hif_send+0x380>)
    d62a:	0019      	movs	r1, r3
    d62c:	0010      	movs	r0, r2
    d62e:	4b6e      	ldr	r3, [pc, #440]	; (d7e8 <hif_send+0x368>)
    d630:	4798      	blx	r3
    d632:	0003      	movs	r3, r0
    d634:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    d636:	231f      	movs	r3, #31
    d638:	18fb      	adds	r3, r7, r3
    d63a:	781b      	ldrb	r3, [r3, #0]
    d63c:	b25b      	sxtb	r3, r3
    d63e:	2b00      	cmp	r3, #0
    d640:	d015      	beq.n	d66e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    d642:	2300      	movs	r3, #0
    d644:	613b      	str	r3, [r7, #16]
					goto ERR1;
    d646:	e0bc      	b.n	d7c2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
    d648:	230e      	movs	r3, #14
    d64a:	18fb      	adds	r3, r7, r3
    d64c:	881b      	ldrh	r3, [r3, #0]
    d64e:	b29b      	uxth	r3, r3
    d650:	3301      	adds	r3, #1
    d652:	b29a      	uxth	r2, r3
    d654:	230e      	movs	r3, #14
    d656:	18fb      	adds	r3, r7, r3
    d658:	801a      	strh	r2, [r3, #0]
    d65a:	230e      	movs	r3, #14
    d65c:	18fb      	adds	r3, r7, r3
    d65e:	881b      	ldrh	r3, [r3, #0]
    d660:	b29b      	uxth	r3, r3
    d662:	4a68      	ldr	r2, [pc, #416]	; (d804 <hif_send+0x384>)
    d664:	4293      	cmp	r3, r2
    d666:	d9a7      	bls.n	d5b8 <hif_send+0x138>
    d668:	e002      	b.n	d670 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
    d66a:	46c0      	nop			; (mov r8, r8)
    d66c:	e000      	b.n	d670 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
    d66e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    d670:	693b      	ldr	r3, [r7, #16]
    d672:	2b00      	cmp	r3, #0
    d674:	d100      	bne.n	d678 <hif_send+0x1f8>
    d676:	e074      	b.n	d762 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    d678:	693b      	ldr	r3, [r7, #16]
    d67a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    d67c:	2318      	movs	r3, #24
    d67e:	18fb      	adds	r3, r7, r3
    d680:	885b      	ldrh	r3, [r3, #2]
    d682:	b29a      	uxth	r2, r3
    d684:	2318      	movs	r3, #24
    d686:	18fb      	adds	r3, r7, r3
    d688:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    d68a:	68bb      	ldr	r3, [r7, #8]
    d68c:	221f      	movs	r2, #31
    d68e:	18bc      	adds	r4, r7, r2
    d690:	2218      	movs	r2, #24
    d692:	18b9      	adds	r1, r7, r2
    d694:	2208      	movs	r2, #8
    d696:	0018      	movs	r0, r3
    d698:	4b5b      	ldr	r3, [pc, #364]	; (d808 <hif_send+0x388>)
    d69a:	4798      	blx	r3
    d69c:	0003      	movs	r3, r0
    d69e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    d6a0:	231f      	movs	r3, #31
    d6a2:	18fb      	adds	r3, r7, r3
    d6a4:	781b      	ldrb	r3, [r3, #0]
    d6a6:	b25b      	sxtb	r3, r3
    d6a8:	2b00      	cmp	r3, #0
    d6aa:	d000      	beq.n	d6ae <hif_send+0x22e>
    d6ac:	e084      	b.n	d7b8 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    d6ae:	68bb      	ldr	r3, [r7, #8]
    d6b0:	3308      	adds	r3, #8
    d6b2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    d6b4:	683b      	ldr	r3, [r7, #0]
    d6b6:	2b00      	cmp	r3, #0
    d6b8:	d016      	beq.n	d6e8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    d6ba:	68b8      	ldr	r0, [r7, #8]
    d6bc:	1d3b      	adds	r3, r7, #4
    d6be:	881a      	ldrh	r2, [r3, #0]
    d6c0:	231f      	movs	r3, #31
    d6c2:	18fc      	adds	r4, r7, r3
    d6c4:	683b      	ldr	r3, [r7, #0]
    d6c6:	0019      	movs	r1, r3
    d6c8:	4b4f      	ldr	r3, [pc, #316]	; (d808 <hif_send+0x388>)
    d6ca:	4798      	blx	r3
    d6cc:	0003      	movs	r3, r0
    d6ce:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    d6d0:	231f      	movs	r3, #31
    d6d2:	18fb      	adds	r3, r7, r3
    d6d4:	781b      	ldrb	r3, [r3, #0]
    d6d6:	b25b      	sxtb	r3, r3
    d6d8:	2b00      	cmp	r3, #0
    d6da:	d000      	beq.n	d6de <hif_send+0x25e>
    d6dc:	e06e      	b.n	d7bc <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
    d6de:	1d3b      	adds	r3, r7, #4
    d6e0:	881a      	ldrh	r2, [r3, #0]
    d6e2:	68bb      	ldr	r3, [r7, #8]
    d6e4:	18d3      	adds	r3, r2, r3
    d6e6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    d6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d6ea:	2b00      	cmp	r3, #0
    d6ec:	d021      	beq.n	d732 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    d6ee:	2338      	movs	r3, #56	; 0x38
    d6f0:	18fb      	adds	r3, r7, r3
    d6f2:	881a      	ldrh	r2, [r3, #0]
    d6f4:	1d3b      	adds	r3, r7, #4
    d6f6:	881b      	ldrh	r3, [r3, #0]
    d6f8:	1ad3      	subs	r3, r2, r3
    d6fa:	001a      	movs	r2, r3
    d6fc:	68bb      	ldr	r3, [r7, #8]
    d6fe:	18d3      	adds	r3, r2, r3
    d700:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    d702:	68b8      	ldr	r0, [r7, #8]
    d704:	2334      	movs	r3, #52	; 0x34
    d706:	18fb      	adds	r3, r7, r3
    d708:	881a      	ldrh	r2, [r3, #0]
    d70a:	231f      	movs	r3, #31
    d70c:	18fc      	adds	r4, r7, r3
    d70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d710:	0019      	movs	r1, r3
    d712:	4b3d      	ldr	r3, [pc, #244]	; (d808 <hif_send+0x388>)
    d714:	4798      	blx	r3
    d716:	0003      	movs	r3, r0
    d718:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    d71a:	231f      	movs	r3, #31
    d71c:	18fb      	adds	r3, r7, r3
    d71e:	781b      	ldrb	r3, [r3, #0]
    d720:	b25b      	sxtb	r3, r3
    d722:	2b00      	cmp	r3, #0
    d724:	d14c      	bne.n	d7c0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
    d726:	2334      	movs	r3, #52	; 0x34
    d728:	18fb      	adds	r3, r7, r3
    d72a:	881a      	ldrh	r2, [r3, #0]
    d72c:	68bb      	ldr	r3, [r7, #8]
    d72e:	18d3      	adds	r3, r2, r3
    d730:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    d732:	693b      	ldr	r3, [r7, #16]
    d734:	009b      	lsls	r3, r3, #2
    d736:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    d738:	697b      	ldr	r3, [r7, #20]
    d73a:	2202      	movs	r2, #2
    d73c:	4313      	orrs	r3, r2
    d73e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    d740:	697b      	ldr	r3, [r7, #20]
    d742:	221f      	movs	r2, #31
    d744:	18bc      	adds	r4, r7, r2
    d746:	4a31      	ldr	r2, [pc, #196]	; (d80c <hif_send+0x38c>)
    d748:	0019      	movs	r1, r3
    d74a:	0010      	movs	r0, r2
    d74c:	4b24      	ldr	r3, [pc, #144]	; (d7e0 <hif_send+0x360>)
    d74e:	4798      	blx	r3
    d750:	0003      	movs	r3, r0
    d752:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    d754:	231f      	movs	r3, #31
    d756:	18fb      	adds	r3, r7, r3
    d758:	781b      	ldrb	r3, [r3, #0]
    d75a:	b25b      	sxtb	r3, r3
    d75c:	2b00      	cmp	r3, #0
    d75e:	d01c      	beq.n	d79a <hif_send+0x31a>
    d760:	e02f      	b.n	d7c2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
    d762:	231f      	movs	r3, #31
    d764:	18fc      	adds	r4, r7, r3
    d766:	4b2a      	ldr	r3, [pc, #168]	; (d810 <hif_send+0x390>)
    d768:	4798      	blx	r3
    d76a:	0003      	movs	r3, r0
    d76c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    d76e:	231f      	movs	r3, #31
    d770:	18fb      	adds	r3, r7, r3
    d772:	22fd      	movs	r2, #253	; 0xfd
    d774:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    d776:	e026      	b.n	d7c6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    d778:	2398      	movs	r3, #152	; 0x98
    d77a:	33ff      	adds	r3, #255	; 0xff
    d77c:	001a      	movs	r2, r3
    d77e:	4925      	ldr	r1, [pc, #148]	; (d814 <hif_send+0x394>)
    d780:	4b25      	ldr	r3, [pc, #148]	; (d818 <hif_send+0x398>)
    d782:	0018      	movs	r0, r3
    d784:	4b1a      	ldr	r3, [pc, #104]	; (d7f0 <hif_send+0x370>)
    d786:	4798      	blx	r3
    d788:	4b24      	ldr	r3, [pc, #144]	; (d81c <hif_send+0x39c>)
    d78a:	0018      	movs	r0, r3
    d78c:	4b18      	ldr	r3, [pc, #96]	; (d7f0 <hif_send+0x370>)
    d78e:	4798      	blx	r3
    d790:	4b19      	ldr	r3, [pc, #100]	; (d7f8 <hif_send+0x378>)
    d792:	0018      	movs	r0, r3
    d794:	4b16      	ldr	r3, [pc, #88]	; (d7f0 <hif_send+0x370>)
    d796:	4798      	blx	r3
		goto ERR2;
    d798:	e015      	b.n	d7c6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    d79a:	231f      	movs	r3, #31
    d79c:	18fc      	adds	r4, r7, r3
    d79e:	4b1c      	ldr	r3, [pc, #112]	; (d810 <hif_send+0x390>)
    d7a0:	4798      	blx	r3
    d7a2:	0003      	movs	r3, r0
    d7a4:	7023      	strb	r3, [r4, #0]
	return ret;
    d7a6:	231f      	movs	r3, #31
    d7a8:	18fb      	adds	r3, r7, r3
    d7aa:	781b      	ldrb	r3, [r3, #0]
    d7ac:	b25b      	sxtb	r3, r3
    d7ae:	e00e      	b.n	d7ce <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
    d7b0:	46c0      	nop			; (mov r8, r8)
    d7b2:	e006      	b.n	d7c2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
    d7b4:	46c0      	nop			; (mov r8, r8)
    d7b6:	e004      	b.n	d7c2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
    d7b8:	46c0      	nop			; (mov r8, r8)
    d7ba:	e002      	b.n	d7c2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
    d7bc:	46c0      	nop			; (mov r8, r8)
    d7be:	e000      	b.n	d7c2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
    d7c0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    d7c2:	4b17      	ldr	r3, [pc, #92]	; (d820 <hif_send+0x3a0>)
    d7c4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    d7c6:	231f      	movs	r3, #31
    d7c8:	18fb      	adds	r3, r7, r3
    d7ca:	781b      	ldrb	r3, [r3, #0]
    d7cc:	b25b      	sxtb	r3, r3
}
    d7ce:	0018      	movs	r0, r3
    d7d0:	46bd      	mov	sp, r7
    d7d2:	b009      	add	sp, #36	; 0x24
    d7d4:	bd90      	pop	{r4, r7, pc}
    d7d6:	46c0      	nop			; (mov r8, r8)
    d7d8:	0000d349 	.word	0x0000d349
    d7dc:	0000108c 	.word	0x0000108c
    d7e0:	0000f2d5 	.word	0x0000f2d5
    d7e4:	00001078 	.word	0x00001078
    d7e8:	0000f2b1 	.word	0x0000f2b1
    d7ec:	000245d0 	.word	0x000245d0
    d7f0:	0000a4ed 	.word	0x0000a4ed
    d7f4:	000245dc 	.word	0x000245dc
    d7f8:	000245f0 	.word	0x000245f0
    d7fc:	0000c941 	.word	0x0000c941
    d800:	00150400 	.word	0x00150400
    d804:	000003e7 	.word	0x000003e7
    d808:	0000f41d 	.word	0x0000f41d
    d80c:	0000106c 	.word	0x0000106c
    d810:	0000d3e1 	.word	0x0000d3e1
    d814:	000248f8 	.word	0x000248f8
    d818:	000245f4 	.word	0x000245f4
    d81c:	00024608 	.word	0x00024608
    d820:	0000d3b9 	.word	0x0000d3b9

0000d824 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    d824:	b590      	push	{r4, r7, lr}
    d826:	b087      	sub	sp, #28
    d828:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    d82a:	230f      	movs	r3, #15
    d82c:	18fb      	adds	r3, r7, r3
    d82e:	2200      	movs	r2, #0
    d830:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    d832:	230f      	movs	r3, #15
    d834:	18fc      	adds	r4, r7, r3
    d836:	2308      	movs	r3, #8
    d838:	18fb      	adds	r3, r7, r3
    d83a:	4adc      	ldr	r2, [pc, #880]	; (dbac <hif_isr+0x388>)
    d83c:	0019      	movs	r1, r3
    d83e:	0010      	movs	r0, r2
    d840:	4bdb      	ldr	r3, [pc, #876]	; (dbb0 <hif_isr+0x38c>)
    d842:	4798      	blx	r3
    d844:	0003      	movs	r3, r0
    d846:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    d848:	230f      	movs	r3, #15
    d84a:	18fb      	adds	r3, r7, r3
    d84c:	781b      	ldrb	r3, [r3, #0]
    d84e:	b25b      	sxtb	r3, r3
    d850:	2b00      	cmp	r3, #0
    d852:	d000      	beq.n	d856 <hif_isr+0x32>
    d854:	e21e      	b.n	dc94 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    d856:	68bb      	ldr	r3, [r7, #8]
    d858:	2201      	movs	r2, #1
    d85a:	4013      	ands	r3, r2
    d85c:	d100      	bne.n	d860 <hif_isr+0x3c>
    d85e:	e204      	b.n	dc6a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    d860:	2000      	movs	r0, #0
    d862:	4bd4      	ldr	r3, [pc, #848]	; (dbb4 <hif_isr+0x390>)
    d864:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    d866:	68bb      	ldr	r3, [r7, #8]
    d868:	2201      	movs	r2, #1
    d86a:	4393      	bics	r3, r2
    d86c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    d86e:	68bb      	ldr	r3, [r7, #8]
    d870:	220f      	movs	r2, #15
    d872:	18bc      	adds	r4, r7, r2
    d874:	4acd      	ldr	r2, [pc, #820]	; (dbac <hif_isr+0x388>)
    d876:	0019      	movs	r1, r3
    d878:	0010      	movs	r0, r2
    d87a:	4bcf      	ldr	r3, [pc, #828]	; (dbb8 <hif_isr+0x394>)
    d87c:	4798      	blx	r3
    d87e:	0003      	movs	r3, r0
    d880:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    d882:	230f      	movs	r3, #15
    d884:	18fb      	adds	r3, r7, r3
    d886:	781b      	ldrb	r3, [r3, #0]
    d888:	b25b      	sxtb	r3, r3
    d88a:	2b00      	cmp	r3, #0
    d88c:	d000      	beq.n	d890 <hif_isr+0x6c>
    d88e:	e210      	b.n	dcb2 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
    d890:	4bca      	ldr	r3, [pc, #808]	; (dbbc <hif_isr+0x398>)
    d892:	2201      	movs	r2, #1
    d894:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    d896:	68bb      	ldr	r3, [r7, #8]
    d898:	089b      	lsrs	r3, r3, #2
    d89a:	b29a      	uxth	r2, r3
    d89c:	230c      	movs	r3, #12
    d89e:	18fb      	adds	r3, r7, r3
    d8a0:	0512      	lsls	r2, r2, #20
    d8a2:	0d12      	lsrs	r2, r2, #20
    d8a4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    d8a6:	230c      	movs	r3, #12
    d8a8:	18fb      	adds	r3, r7, r3
    d8aa:	881b      	ldrh	r3, [r3, #0]
    d8ac:	2b00      	cmp	r3, #0
    d8ae:	d100      	bne.n	d8b2 <hif_isr+0x8e>
    d8b0:	e1c8      	b.n	dc44 <hif_isr+0x420>
				uint32 address = 0;
    d8b2:	2300      	movs	r3, #0
    d8b4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    d8b6:	230f      	movs	r3, #15
    d8b8:	18fc      	adds	r4, r7, r3
    d8ba:	003b      	movs	r3, r7
    d8bc:	4ac0      	ldr	r2, [pc, #768]	; (dbc0 <hif_isr+0x39c>)
    d8be:	0019      	movs	r1, r3
    d8c0:	0010      	movs	r0, r2
    d8c2:	4bbb      	ldr	r3, [pc, #748]	; (dbb0 <hif_isr+0x38c>)
    d8c4:	4798      	blx	r3
    d8c6:	0003      	movs	r3, r0
    d8c8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    d8ca:	230f      	movs	r3, #15
    d8cc:	18fb      	adds	r3, r7, r3
    d8ce:	781b      	ldrb	r3, [r3, #0]
    d8d0:	b25b      	sxtb	r3, r3
    d8d2:	2b00      	cmp	r3, #0
    d8d4:	d012      	beq.n	d8fc <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    d8d6:	23e4      	movs	r3, #228	; 0xe4
    d8d8:	005a      	lsls	r2, r3, #1
    d8da:	49ba      	ldr	r1, [pc, #744]	; (dbc4 <hif_isr+0x3a0>)
    d8dc:	4bba      	ldr	r3, [pc, #744]	; (dbc8 <hif_isr+0x3a4>)
    d8de:	0018      	movs	r0, r3
    d8e0:	4bba      	ldr	r3, [pc, #744]	; (dbcc <hif_isr+0x3a8>)
    d8e2:	4798      	blx	r3
    d8e4:	4bba      	ldr	r3, [pc, #744]	; (dbd0 <hif_isr+0x3ac>)
    d8e6:	0018      	movs	r0, r3
    d8e8:	4bb8      	ldr	r3, [pc, #736]	; (dbcc <hif_isr+0x3a8>)
    d8ea:	4798      	blx	r3
    d8ec:	4bb9      	ldr	r3, [pc, #740]	; (dbd4 <hif_isr+0x3b0>)
    d8ee:	0018      	movs	r0, r3
    d8f0:	4bb6      	ldr	r3, [pc, #728]	; (dbcc <hif_isr+0x3a8>)
    d8f2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    d8f4:	2001      	movs	r0, #1
    d8f6:	4baf      	ldr	r3, [pc, #700]	; (dbb4 <hif_isr+0x390>)
    d8f8:	4798      	blx	r3
					goto ERR1;
    d8fa:	e1db      	b.n	dcb4 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
    d8fc:	683a      	ldr	r2, [r7, #0]
    d8fe:	4baf      	ldr	r3, [pc, #700]	; (dbbc <hif_isr+0x398>)
    d900:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    d902:	230c      	movs	r3, #12
    d904:	18fb      	adds	r3, r7, r3
    d906:	881a      	ldrh	r2, [r3, #0]
    d908:	4bac      	ldr	r3, [pc, #688]	; (dbbc <hif_isr+0x398>)
    d90a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    d90c:	683b      	ldr	r3, [r7, #0]
    d90e:	220f      	movs	r2, #15
    d910:	18bc      	adds	r4, r7, r2
    d912:	1d39      	adds	r1, r7, #4
    d914:	2204      	movs	r2, #4
    d916:	0018      	movs	r0, r3
    d918:	4baf      	ldr	r3, [pc, #700]	; (dbd8 <hif_isr+0x3b4>)
    d91a:	4798      	blx	r3
    d91c:	0003      	movs	r3, r0
    d91e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    d920:	1d3b      	adds	r3, r7, #4
    d922:	885b      	ldrh	r3, [r3, #2]
    d924:	b29a      	uxth	r2, r3
    d926:	1d3b      	adds	r3, r7, #4
    d928:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    d92a:	230f      	movs	r3, #15
    d92c:	18fb      	adds	r3, r7, r3
    d92e:	781b      	ldrb	r3, [r3, #0]
    d930:	b25b      	sxtb	r3, r3
    d932:	2b00      	cmp	r3, #0
    d934:	d012      	beq.n	d95c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    d936:	23e9      	movs	r3, #233	; 0xe9
    d938:	005a      	lsls	r2, r3, #1
    d93a:	49a2      	ldr	r1, [pc, #648]	; (dbc4 <hif_isr+0x3a0>)
    d93c:	4ba2      	ldr	r3, [pc, #648]	; (dbc8 <hif_isr+0x3a4>)
    d93e:	0018      	movs	r0, r3
    d940:	4ba2      	ldr	r3, [pc, #648]	; (dbcc <hif_isr+0x3a8>)
    d942:	4798      	blx	r3
    d944:	4ba5      	ldr	r3, [pc, #660]	; (dbdc <hif_isr+0x3b8>)
    d946:	0018      	movs	r0, r3
    d948:	4ba0      	ldr	r3, [pc, #640]	; (dbcc <hif_isr+0x3a8>)
    d94a:	4798      	blx	r3
    d94c:	4ba1      	ldr	r3, [pc, #644]	; (dbd4 <hif_isr+0x3b0>)
    d94e:	0018      	movs	r0, r3
    d950:	4b9e      	ldr	r3, [pc, #632]	; (dbcc <hif_isr+0x3a8>)
    d952:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    d954:	2001      	movs	r0, #1
    d956:	4b97      	ldr	r3, [pc, #604]	; (dbb4 <hif_isr+0x390>)
    d958:	4798      	blx	r3
					goto ERR1;
    d95a:	e1ab      	b.n	dcb4 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
    d95c:	1d3b      	adds	r3, r7, #4
    d95e:	885b      	ldrh	r3, [r3, #2]
    d960:	b29b      	uxth	r3, r3
    d962:	220c      	movs	r2, #12
    d964:	18ba      	adds	r2, r7, r2
    d966:	8812      	ldrh	r2, [r2, #0]
    d968:	429a      	cmp	r2, r3
    d96a:	d02f      	beq.n	d9cc <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
    d96c:	230c      	movs	r3, #12
    d96e:	18fb      	adds	r3, r7, r3
    d970:	881b      	ldrh	r3, [r3, #0]
    d972:	1d3a      	adds	r2, r7, #4
    d974:	8852      	ldrh	r2, [r2, #2]
    d976:	b292      	uxth	r2, r2
    d978:	1a9b      	subs	r3, r3, r2
    d97a:	2b04      	cmp	r3, #4
    d97c:	dd26      	ble.n	d9cc <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    d97e:	23dc      	movs	r3, #220	; 0xdc
    d980:	33ff      	adds	r3, #255	; 0xff
    d982:	001a      	movs	r2, r3
    d984:	498f      	ldr	r1, [pc, #572]	; (dbc4 <hif_isr+0x3a0>)
    d986:	4b90      	ldr	r3, [pc, #576]	; (dbc8 <hif_isr+0x3a4>)
    d988:	0018      	movs	r0, r3
    d98a:	4b90      	ldr	r3, [pc, #576]	; (dbcc <hif_isr+0x3a8>)
    d98c:	4798      	blx	r3
    d98e:	230c      	movs	r3, #12
    d990:	18fb      	adds	r3, r7, r3
    d992:	8819      	ldrh	r1, [r3, #0]
    d994:	1d3b      	adds	r3, r7, #4
    d996:	885b      	ldrh	r3, [r3, #2]
    d998:	b29b      	uxth	r3, r3
    d99a:	001a      	movs	r2, r3
    d99c:	1d3b      	adds	r3, r7, #4
    d99e:	781b      	ldrb	r3, [r3, #0]
    d9a0:	b2db      	uxtb	r3, r3
    d9a2:	001c      	movs	r4, r3
    d9a4:	1d3b      	adds	r3, r7, #4
    d9a6:	785b      	ldrb	r3, [r3, #1]
    d9a8:	b2db      	uxtb	r3, r3
    d9aa:	488d      	ldr	r0, [pc, #564]	; (dbe0 <hif_isr+0x3bc>)
    d9ac:	9300      	str	r3, [sp, #0]
    d9ae:	0023      	movs	r3, r4
    d9b0:	4c86      	ldr	r4, [pc, #536]	; (dbcc <hif_isr+0x3a8>)
    d9b2:	47a0      	blx	r4
    d9b4:	4b87      	ldr	r3, [pc, #540]	; (dbd4 <hif_isr+0x3b0>)
    d9b6:	0018      	movs	r0, r3
    d9b8:	4b84      	ldr	r3, [pc, #528]	; (dbcc <hif_isr+0x3a8>)
    d9ba:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    d9bc:	2001      	movs	r0, #1
    d9be:	4b7d      	ldr	r3, [pc, #500]	; (dbb4 <hif_isr+0x390>)
    d9c0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    d9c2:	230f      	movs	r3, #15
    d9c4:	18fb      	adds	r3, r7, r3
    d9c6:	22fa      	movs	r2, #250	; 0xfa
    d9c8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    d9ca:	e173      	b.n	dcb4 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    d9cc:	1d3b      	adds	r3, r7, #4
    d9ce:	781b      	ldrb	r3, [r3, #0]
    d9d0:	b2db      	uxtb	r3, r3
    d9d2:	2b01      	cmp	r3, #1
    d9d4:	d122      	bne.n	da1c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
    d9d6:	4b79      	ldr	r3, [pc, #484]	; (dbbc <hif_isr+0x398>)
    d9d8:	691b      	ldr	r3, [r3, #16]
    d9da:	2b00      	cmp	r3, #0
    d9dc:	d00d      	beq.n	d9fa <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d9de:	4b77      	ldr	r3, [pc, #476]	; (dbbc <hif_isr+0x398>)
    d9e0:	691b      	ldr	r3, [r3, #16]
    d9e2:	1d3a      	adds	r2, r7, #4
    d9e4:	7852      	ldrb	r2, [r2, #1]
    d9e6:	b2d0      	uxtb	r0, r2
    d9e8:	1d3a      	adds	r2, r7, #4
    d9ea:	8852      	ldrh	r2, [r2, #2]
    d9ec:	b292      	uxth	r2, r2
    d9ee:	3a08      	subs	r2, #8
    d9f0:	b291      	uxth	r1, r2
    d9f2:	683a      	ldr	r2, [r7, #0]
    d9f4:	3208      	adds	r2, #8
    d9f6:	4798      	blx	r3
    d9f8:	e102      	b.n	dc00 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
    d9fa:	23e8      	movs	r3, #232	; 0xe8
    d9fc:	33ff      	adds	r3, #255	; 0xff
    d9fe:	001a      	movs	r2, r3
    da00:	4970      	ldr	r1, [pc, #448]	; (dbc4 <hif_isr+0x3a0>)
    da02:	4b71      	ldr	r3, [pc, #452]	; (dbc8 <hif_isr+0x3a4>)
    da04:	0018      	movs	r0, r3
    da06:	4b71      	ldr	r3, [pc, #452]	; (dbcc <hif_isr+0x3a8>)
    da08:	4798      	blx	r3
    da0a:	4b76      	ldr	r3, [pc, #472]	; (dbe4 <hif_isr+0x3c0>)
    da0c:	0018      	movs	r0, r3
    da0e:	4b6f      	ldr	r3, [pc, #444]	; (dbcc <hif_isr+0x3a8>)
    da10:	4798      	blx	r3
    da12:	4b70      	ldr	r3, [pc, #448]	; (dbd4 <hif_isr+0x3b0>)
    da14:	0018      	movs	r0, r3
    da16:	4b6d      	ldr	r3, [pc, #436]	; (dbcc <hif_isr+0x3a8>)
    da18:	4798      	blx	r3
    da1a:	e0f1      	b.n	dc00 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    da1c:	1d3b      	adds	r3, r7, #4
    da1e:	781b      	ldrb	r3, [r3, #0]
    da20:	b2db      	uxtb	r3, r3
    da22:	2b02      	cmp	r3, #2
    da24:	d122      	bne.n	da6c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
    da26:	4b65      	ldr	r3, [pc, #404]	; (dbbc <hif_isr+0x398>)
    da28:	695b      	ldr	r3, [r3, #20]
    da2a:	2b00      	cmp	r3, #0
    da2c:	d00d      	beq.n	da4a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    da2e:	4b63      	ldr	r3, [pc, #396]	; (dbbc <hif_isr+0x398>)
    da30:	695b      	ldr	r3, [r3, #20]
    da32:	1d3a      	adds	r2, r7, #4
    da34:	7852      	ldrb	r2, [r2, #1]
    da36:	b2d0      	uxtb	r0, r2
    da38:	1d3a      	adds	r2, r7, #4
    da3a:	8852      	ldrh	r2, [r2, #2]
    da3c:	b292      	uxth	r2, r2
    da3e:	3a08      	subs	r2, #8
    da40:	b291      	uxth	r1, r2
    da42:	683a      	ldr	r2, [r7, #0]
    da44:	3208      	adds	r2, #8
    da46:	4798      	blx	r3
    da48:	e0da      	b.n	dc00 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
    da4a:	23f0      	movs	r3, #240	; 0xf0
    da4c:	33ff      	adds	r3, #255	; 0xff
    da4e:	001a      	movs	r2, r3
    da50:	495c      	ldr	r1, [pc, #368]	; (dbc4 <hif_isr+0x3a0>)
    da52:	4b5d      	ldr	r3, [pc, #372]	; (dbc8 <hif_isr+0x3a4>)
    da54:	0018      	movs	r0, r3
    da56:	4b5d      	ldr	r3, [pc, #372]	; (dbcc <hif_isr+0x3a8>)
    da58:	4798      	blx	r3
    da5a:	4b63      	ldr	r3, [pc, #396]	; (dbe8 <hif_isr+0x3c4>)
    da5c:	0018      	movs	r0, r3
    da5e:	4b5b      	ldr	r3, [pc, #364]	; (dbcc <hif_isr+0x3a8>)
    da60:	4798      	blx	r3
    da62:	4b5c      	ldr	r3, [pc, #368]	; (dbd4 <hif_isr+0x3b0>)
    da64:	0018      	movs	r0, r3
    da66:	4b59      	ldr	r3, [pc, #356]	; (dbcc <hif_isr+0x3a8>)
    da68:	4798      	blx	r3
    da6a:	e0c9      	b.n	dc00 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    da6c:	1d3b      	adds	r3, r7, #4
    da6e:	781b      	ldrb	r3, [r3, #0]
    da70:	b2db      	uxtb	r3, r3
    da72:	2b04      	cmp	r3, #4
    da74:	d122      	bne.n	dabc <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
    da76:	4b51      	ldr	r3, [pc, #324]	; (dbbc <hif_isr+0x398>)
    da78:	699b      	ldr	r3, [r3, #24]
    da7a:	2b00      	cmp	r3, #0
    da7c:	d00d      	beq.n	da9a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    da7e:	4b4f      	ldr	r3, [pc, #316]	; (dbbc <hif_isr+0x398>)
    da80:	699b      	ldr	r3, [r3, #24]
    da82:	1d3a      	adds	r2, r7, #4
    da84:	7852      	ldrb	r2, [r2, #1]
    da86:	b2d0      	uxtb	r0, r2
    da88:	1d3a      	adds	r2, r7, #4
    da8a:	8852      	ldrh	r2, [r2, #2]
    da8c:	b292      	uxth	r2, r2
    da8e:	3a08      	subs	r2, #8
    da90:	b291      	uxth	r1, r2
    da92:	683a      	ldr	r2, [r7, #0]
    da94:	3208      	adds	r2, #8
    da96:	4798      	blx	r3
    da98:	e0b2      	b.n	dc00 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
    da9a:	23f8      	movs	r3, #248	; 0xf8
    da9c:	33ff      	adds	r3, #255	; 0xff
    da9e:	001a      	movs	r2, r3
    daa0:	4948      	ldr	r1, [pc, #288]	; (dbc4 <hif_isr+0x3a0>)
    daa2:	4b49      	ldr	r3, [pc, #292]	; (dbc8 <hif_isr+0x3a4>)
    daa4:	0018      	movs	r0, r3
    daa6:	4b49      	ldr	r3, [pc, #292]	; (dbcc <hif_isr+0x3a8>)
    daa8:	4798      	blx	r3
    daaa:	4b50      	ldr	r3, [pc, #320]	; (dbec <hif_isr+0x3c8>)
    daac:	0018      	movs	r0, r3
    daae:	4b47      	ldr	r3, [pc, #284]	; (dbcc <hif_isr+0x3a8>)
    dab0:	4798      	blx	r3
    dab2:	4b48      	ldr	r3, [pc, #288]	; (dbd4 <hif_isr+0x3b0>)
    dab4:	0018      	movs	r0, r3
    dab6:	4b45      	ldr	r3, [pc, #276]	; (dbcc <hif_isr+0x3a8>)
    dab8:	4798      	blx	r3
    daba:	e0a1      	b.n	dc00 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    dabc:	1d3b      	adds	r3, r7, #4
    dabe:	781b      	ldrb	r3, [r3, #0]
    dac0:	b2db      	uxtb	r3, r3
    dac2:	2b06      	cmp	r3, #6
    dac4:	d121      	bne.n	db0a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
    dac6:	4b3d      	ldr	r3, [pc, #244]	; (dbbc <hif_isr+0x398>)
    dac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    daca:	2b00      	cmp	r3, #0
    dacc:	d00d      	beq.n	daea <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    dace:	4b3b      	ldr	r3, [pc, #236]	; (dbbc <hif_isr+0x398>)
    dad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dad2:	1d3a      	adds	r2, r7, #4
    dad4:	7852      	ldrb	r2, [r2, #1]
    dad6:	b2d0      	uxtb	r0, r2
    dad8:	1d3a      	adds	r2, r7, #4
    dada:	8852      	ldrh	r2, [r2, #2]
    dadc:	b292      	uxth	r2, r2
    dade:	3a08      	subs	r2, #8
    dae0:	b291      	uxth	r1, r2
    dae2:	683a      	ldr	r2, [r7, #0]
    dae4:	3208      	adds	r2, #8
    dae6:	4798      	blx	r3
    dae8:	e08a      	b.n	dc00 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
    daea:	2380      	movs	r3, #128	; 0x80
    daec:	009a      	lsls	r2, r3, #2
    daee:	4935      	ldr	r1, [pc, #212]	; (dbc4 <hif_isr+0x3a0>)
    daf0:	4b35      	ldr	r3, [pc, #212]	; (dbc8 <hif_isr+0x3a4>)
    daf2:	0018      	movs	r0, r3
    daf4:	4b35      	ldr	r3, [pc, #212]	; (dbcc <hif_isr+0x3a8>)
    daf6:	4798      	blx	r3
    daf8:	4b3d      	ldr	r3, [pc, #244]	; (dbf0 <hif_isr+0x3cc>)
    dafa:	0018      	movs	r0, r3
    dafc:	4b33      	ldr	r3, [pc, #204]	; (dbcc <hif_isr+0x3a8>)
    dafe:	4798      	blx	r3
    db00:	4b34      	ldr	r3, [pc, #208]	; (dbd4 <hif_isr+0x3b0>)
    db02:	0018      	movs	r0, r3
    db04:	4b31      	ldr	r3, [pc, #196]	; (dbcc <hif_isr+0x3a8>)
    db06:	4798      	blx	r3
    db08:	e07a      	b.n	dc00 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    db0a:	1d3b      	adds	r3, r7, #4
    db0c:	781b      	ldrb	r3, [r3, #0]
    db0e:	b2db      	uxtb	r3, r3
    db10:	2b07      	cmp	r3, #7
    db12:	d120      	bne.n	db56 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
    db14:	4b29      	ldr	r3, [pc, #164]	; (dbbc <hif_isr+0x398>)
    db16:	69db      	ldr	r3, [r3, #28]
    db18:	2b00      	cmp	r3, #0
    db1a:	d00d      	beq.n	db38 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    db1c:	4b27      	ldr	r3, [pc, #156]	; (dbbc <hif_isr+0x398>)
    db1e:	69db      	ldr	r3, [r3, #28]
    db20:	1d3a      	adds	r2, r7, #4
    db22:	7852      	ldrb	r2, [r2, #1]
    db24:	b2d0      	uxtb	r0, r2
    db26:	1d3a      	adds	r2, r7, #4
    db28:	8852      	ldrh	r2, [r2, #2]
    db2a:	b292      	uxth	r2, r2
    db2c:	3a08      	subs	r2, #8
    db2e:	b291      	uxth	r1, r2
    db30:	683a      	ldr	r2, [r7, #0]
    db32:	3208      	adds	r2, #8
    db34:	4798      	blx	r3
    db36:	e063      	b.n	dc00 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
    db38:	4a2e      	ldr	r2, [pc, #184]	; (dbf4 <hif_isr+0x3d0>)
    db3a:	4922      	ldr	r1, [pc, #136]	; (dbc4 <hif_isr+0x3a0>)
    db3c:	4b22      	ldr	r3, [pc, #136]	; (dbc8 <hif_isr+0x3a4>)
    db3e:	0018      	movs	r0, r3
    db40:	4b22      	ldr	r3, [pc, #136]	; (dbcc <hif_isr+0x3a8>)
    db42:	4798      	blx	r3
    db44:	4b2c      	ldr	r3, [pc, #176]	; (dbf8 <hif_isr+0x3d4>)
    db46:	0018      	movs	r0, r3
    db48:	4b20      	ldr	r3, [pc, #128]	; (dbcc <hif_isr+0x3a8>)
    db4a:	4798      	blx	r3
    db4c:	4b21      	ldr	r3, [pc, #132]	; (dbd4 <hif_isr+0x3b0>)
    db4e:	0018      	movs	r0, r3
    db50:	4b1e      	ldr	r3, [pc, #120]	; (dbcc <hif_isr+0x3a8>)
    db52:	4798      	blx	r3
    db54:	e054      	b.n	dc00 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    db56:	1d3b      	adds	r3, r7, #4
    db58:	781b      	ldrb	r3, [r3, #0]
    db5a:	b2db      	uxtb	r3, r3
    db5c:	2b05      	cmp	r3, #5
    db5e:	d111      	bne.n	db84 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
    db60:	4b16      	ldr	r3, [pc, #88]	; (dbbc <hif_isr+0x398>)
    db62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db64:	2b00      	cmp	r3, #0
    db66:	d04b      	beq.n	dc00 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    db68:	4b14      	ldr	r3, [pc, #80]	; (dbbc <hif_isr+0x398>)
    db6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db6c:	1d3a      	adds	r2, r7, #4
    db6e:	7852      	ldrb	r2, [r2, #1]
    db70:	b2d0      	uxtb	r0, r2
    db72:	1d3a      	adds	r2, r7, #4
    db74:	8852      	ldrh	r2, [r2, #2]
    db76:	b292      	uxth	r2, r2
    db78:	3a08      	subs	r2, #8
    db7a:	b291      	uxth	r1, r2
    db7c:	683a      	ldr	r2, [r7, #0]
    db7e:	3208      	adds	r2, #8
    db80:	4798      	blx	r3
    db82:	e03d      	b.n	dc00 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    db84:	2384      	movs	r3, #132	; 0x84
    db86:	009a      	lsls	r2, r3, #2
    db88:	490e      	ldr	r1, [pc, #56]	; (dbc4 <hif_isr+0x3a0>)
    db8a:	4b0f      	ldr	r3, [pc, #60]	; (dbc8 <hif_isr+0x3a4>)
    db8c:	0018      	movs	r0, r3
    db8e:	4b0f      	ldr	r3, [pc, #60]	; (dbcc <hif_isr+0x3a8>)
    db90:	4798      	blx	r3
    db92:	4b1a      	ldr	r3, [pc, #104]	; (dbfc <hif_isr+0x3d8>)
    db94:	0018      	movs	r0, r3
    db96:	4b0d      	ldr	r3, [pc, #52]	; (dbcc <hif_isr+0x3a8>)
    db98:	4798      	blx	r3
    db9a:	4b0e      	ldr	r3, [pc, #56]	; (dbd4 <hif_isr+0x3b0>)
    db9c:	0018      	movs	r0, r3
    db9e:	4b0b      	ldr	r3, [pc, #44]	; (dbcc <hif_isr+0x3a8>)
    dba0:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    dba2:	230f      	movs	r3, #15
    dba4:	18fb      	adds	r3, r7, r3
    dba6:	22fa      	movs	r2, #250	; 0xfa
    dba8:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    dbaa:	e083      	b.n	dcb4 <hif_isr+0x490>
    dbac:	00001070 	.word	0x00001070
    dbb0:	0000f2b1 	.word	0x0000f2b1
    dbb4:	0000c9d5 	.word	0x0000c9d5
    dbb8:	0000f2d5 	.word	0x0000f2d5
    dbbc:	20005514 	.word	0x20005514
    dbc0:	00001084 	.word	0x00001084
    dbc4:	00024904 	.word	0x00024904
    dbc8:	000245f4 	.word	0x000245f4
    dbcc:	0000a4ed 	.word	0x0000a4ed
    dbd0:	00024628 	.word	0x00024628
    dbd4:	000245f0 	.word	0x000245f0
    dbd8:	0000f325 	.word	0x0000f325
    dbdc:	00024650 	.word	0x00024650
    dbe0:	00024668 	.word	0x00024668
    dbe4:	000246a8 	.word	0x000246a8
    dbe8:	000246cc 	.word	0x000246cc
    dbec:	000246f0 	.word	0x000246f0
    dbf0:	00024710 	.word	0x00024710
    dbf4:	00000207 	.word	0x00000207
    dbf8:	00024734 	.word	0x00024734
    dbfc:	00024758 	.word	0x00024758
				}
				if(gstrHifCxt.u8HifRXDone)
    dc00:	4b30      	ldr	r3, [pc, #192]	; (dcc4 <hif_isr+0x4a0>)
    dc02:	789b      	ldrb	r3, [r3, #2]
    dc04:	b2db      	uxtb	r3, r3
    dc06:	2b00      	cmp	r3, #0
    dc08:	d054      	beq.n	dcb4 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    dc0a:	4a2f      	ldr	r2, [pc, #188]	; (dcc8 <hif_isr+0x4a4>)
    dc0c:	492f      	ldr	r1, [pc, #188]	; (dccc <hif_isr+0x4a8>)
    dc0e:	4b30      	ldr	r3, [pc, #192]	; (dcd0 <hif_isr+0x4ac>)
    dc10:	0018      	movs	r0, r3
    dc12:	4b30      	ldr	r3, [pc, #192]	; (dcd4 <hif_isr+0x4b0>)
    dc14:	4798      	blx	r3
    dc16:	1d3b      	adds	r3, r7, #4
    dc18:	781b      	ldrb	r3, [r3, #0]
    dc1a:	b2db      	uxtb	r3, r3
    dc1c:	0019      	movs	r1, r3
    dc1e:	1d3b      	adds	r3, r7, #4
    dc20:	785b      	ldrb	r3, [r3, #1]
    dc22:	b2db      	uxtb	r3, r3
    dc24:	001a      	movs	r2, r3
    dc26:	4b2c      	ldr	r3, [pc, #176]	; (dcd8 <hif_isr+0x4b4>)
    dc28:	0018      	movs	r0, r3
    dc2a:	4b2a      	ldr	r3, [pc, #168]	; (dcd4 <hif_isr+0x4b0>)
    dc2c:	4798      	blx	r3
    dc2e:	4b2b      	ldr	r3, [pc, #172]	; (dcdc <hif_isr+0x4b8>)
    dc30:	0018      	movs	r0, r3
    dc32:	4b28      	ldr	r3, [pc, #160]	; (dcd4 <hif_isr+0x4b0>)
    dc34:	4798      	blx	r3
					ret = hif_set_rx_done();
    dc36:	230f      	movs	r3, #15
    dc38:	18fc      	adds	r4, r7, r3
    dc3a:	4b29      	ldr	r3, [pc, #164]	; (dce0 <hif_isr+0x4bc>)
    dc3c:	4798      	blx	r3
    dc3e:	0003      	movs	r3, r0
    dc40:	7023      	strb	r3, [r4, #0]
    dc42:	e037      	b.n	dcb4 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    dc44:	4a27      	ldr	r2, [pc, #156]	; (dce4 <hif_isr+0x4c0>)
    dc46:	4921      	ldr	r1, [pc, #132]	; (dccc <hif_isr+0x4a8>)
    dc48:	4b21      	ldr	r3, [pc, #132]	; (dcd0 <hif_isr+0x4ac>)
    dc4a:	0018      	movs	r0, r3
    dc4c:	4b21      	ldr	r3, [pc, #132]	; (dcd4 <hif_isr+0x4b0>)
    dc4e:	4798      	blx	r3
    dc50:	4b25      	ldr	r3, [pc, #148]	; (dce8 <hif_isr+0x4c4>)
    dc52:	0018      	movs	r0, r3
    dc54:	4b1f      	ldr	r3, [pc, #124]	; (dcd4 <hif_isr+0x4b0>)
    dc56:	4798      	blx	r3
    dc58:	4b20      	ldr	r3, [pc, #128]	; (dcdc <hif_isr+0x4b8>)
    dc5a:	0018      	movs	r0, r3
    dc5c:	4b1d      	ldr	r3, [pc, #116]	; (dcd4 <hif_isr+0x4b0>)
    dc5e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    dc60:	230f      	movs	r3, #15
    dc62:	18fb      	adds	r3, r7, r3
    dc64:	22fe      	movs	r2, #254	; 0xfe
    dc66:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    dc68:	e024      	b.n	dcb4 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    dc6a:	4a20      	ldr	r2, [pc, #128]	; (dcec <hif_isr+0x4c8>)
    dc6c:	4917      	ldr	r1, [pc, #92]	; (dccc <hif_isr+0x4a8>)
    dc6e:	4b18      	ldr	r3, [pc, #96]	; (dcd0 <hif_isr+0x4ac>)
    dc70:	0018      	movs	r0, r3
    dc72:	4b18      	ldr	r3, [pc, #96]	; (dcd4 <hif_isr+0x4b0>)
    dc74:	4798      	blx	r3
    dc76:	68ba      	ldr	r2, [r7, #8]
    dc78:	4b1d      	ldr	r3, [pc, #116]	; (dcf0 <hif_isr+0x4cc>)
    dc7a:	0011      	movs	r1, r2
    dc7c:	0018      	movs	r0, r3
    dc7e:	4b15      	ldr	r3, [pc, #84]	; (dcd4 <hif_isr+0x4b0>)
    dc80:	4798      	blx	r3
    dc82:	4b16      	ldr	r3, [pc, #88]	; (dcdc <hif_isr+0x4b8>)
    dc84:	0018      	movs	r0, r3
    dc86:	4b13      	ldr	r3, [pc, #76]	; (dcd4 <hif_isr+0x4b0>)
    dc88:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    dc8a:	230f      	movs	r3, #15
    dc8c:	18fb      	adds	r3, r7, r3
    dc8e:	22f4      	movs	r2, #244	; 0xf4
    dc90:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    dc92:	e00f      	b.n	dcb4 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    dc94:	4a17      	ldr	r2, [pc, #92]	; (dcf4 <hif_isr+0x4d0>)
    dc96:	490d      	ldr	r1, [pc, #52]	; (dccc <hif_isr+0x4a8>)
    dc98:	4b0d      	ldr	r3, [pc, #52]	; (dcd0 <hif_isr+0x4ac>)
    dc9a:	0018      	movs	r0, r3
    dc9c:	4b0d      	ldr	r3, [pc, #52]	; (dcd4 <hif_isr+0x4b0>)
    dc9e:	4798      	blx	r3
    dca0:	4b15      	ldr	r3, [pc, #84]	; (dcf8 <hif_isr+0x4d4>)
    dca2:	0018      	movs	r0, r3
    dca4:	4b0b      	ldr	r3, [pc, #44]	; (dcd4 <hif_isr+0x4b0>)
    dca6:	4798      	blx	r3
    dca8:	4b0c      	ldr	r3, [pc, #48]	; (dcdc <hif_isr+0x4b8>)
    dcaa:	0018      	movs	r0, r3
    dcac:	4b09      	ldr	r3, [pc, #36]	; (dcd4 <hif_isr+0x4b0>)
    dcae:	4798      	blx	r3
		goto ERR1;
    dcb0:	e000      	b.n	dcb4 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
    dcb2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    dcb4:	230f      	movs	r3, #15
    dcb6:	18fb      	adds	r3, r7, r3
    dcb8:	781b      	ldrb	r3, [r3, #0]
    dcba:	b25b      	sxtb	r3, r3
}
    dcbc:	0018      	movs	r0, r3
    dcbe:	46bd      	mov	sp, r7
    dcc0:	b005      	add	sp, #20
    dcc2:	bd90      	pop	{r4, r7, pc}
    dcc4:	20005514 	.word	0x20005514
    dcc8:	00000216 	.word	0x00000216
    dccc:	00024904 	.word	0x00024904
    dcd0:	000245f4 	.word	0x000245f4
    dcd4:	0000a4ed 	.word	0x0000a4ed
    dcd8:	00024770 	.word	0x00024770
    dcdc:	000245f0 	.word	0x000245f0
    dce0:	0000d2b9 	.word	0x0000d2b9
    dce4:	0000021d 	.word	0x0000021d
    dce8:	0002479c 	.word	0x0002479c
    dcec:	00000225 	.word	0x00000225
    dcf0:	000247b0 	.word	0x000247b0
    dcf4:	0000022e 	.word	0x0000022e
    dcf8:	000247cc 	.word	0x000247cc

0000dcfc <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    dcfc:	b590      	push	{r4, r7, lr}
    dcfe:	b083      	sub	sp, #12
    dd00:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    dd02:	1dfb      	adds	r3, r7, #7
    dd04:	2200      	movs	r2, #0
    dd06:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
    dd08:	4b1c      	ldr	r3, [pc, #112]	; (dd7c <hif_handle_isr+0x80>)
    dd0a:	2200      	movs	r2, #0
    dd0c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    dd0e:	e024      	b.n	dd5a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    dd10:	4b1a      	ldr	r3, [pc, #104]	; (dd7c <hif_handle_isr+0x80>)
    dd12:	78db      	ldrb	r3, [r3, #3]
    dd14:	b2db      	uxtb	r3, r3
    dd16:	3b01      	subs	r3, #1
    dd18:	b2da      	uxtb	r2, r3
    dd1a:	4b18      	ldr	r3, [pc, #96]	; (dd7c <hif_handle_isr+0x80>)
    dd1c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    dd1e:	1dfc      	adds	r4, r7, #7
    dd20:	4b17      	ldr	r3, [pc, #92]	; (dd80 <hif_handle_isr+0x84>)
    dd22:	4798      	blx	r3
    dd24:	0003      	movs	r3, r0
    dd26:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    dd28:	1dfb      	adds	r3, r7, #7
    dd2a:	781b      	ldrb	r3, [r3, #0]
    dd2c:	b25b      	sxtb	r3, r3
    dd2e:	2b00      	cmp	r3, #0
    dd30:	d100      	bne.n	dd34 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    dd32:	e012      	b.n	dd5a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    dd34:	4a13      	ldr	r2, [pc, #76]	; (dd84 <hif_handle_isr+0x88>)
    dd36:	4914      	ldr	r1, [pc, #80]	; (dd88 <hif_handle_isr+0x8c>)
    dd38:	4b14      	ldr	r3, [pc, #80]	; (dd8c <hif_handle_isr+0x90>)
    dd3a:	0018      	movs	r0, r3
    dd3c:	4b14      	ldr	r3, [pc, #80]	; (dd90 <hif_handle_isr+0x94>)
    dd3e:	4798      	blx	r3
    dd40:	1dfb      	adds	r3, r7, #7
    dd42:	2200      	movs	r2, #0
    dd44:	569a      	ldrsb	r2, [r3, r2]
    dd46:	4b13      	ldr	r3, [pc, #76]	; (dd94 <hif_handle_isr+0x98>)
    dd48:	0011      	movs	r1, r2
    dd4a:	0018      	movs	r0, r3
    dd4c:	4b10      	ldr	r3, [pc, #64]	; (dd90 <hif_handle_isr+0x94>)
    dd4e:	4798      	blx	r3
    dd50:	4b11      	ldr	r3, [pc, #68]	; (dd98 <hif_handle_isr+0x9c>)
    dd52:	0018      	movs	r0, r3
    dd54:	4b0e      	ldr	r3, [pc, #56]	; (dd90 <hif_handle_isr+0x94>)
    dd56:	4798      	blx	r3
			ret = hif_isr();
    dd58:	e7e1      	b.n	dd1e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    dd5a:	4b08      	ldr	r3, [pc, #32]	; (dd7c <hif_handle_isr+0x80>)
    dd5c:	78db      	ldrb	r3, [r3, #3]
    dd5e:	b2db      	uxtb	r3, r3
    dd60:	2b00      	cmp	r3, #0
    dd62:	d004      	beq.n	dd6e <hif_handle_isr+0x72>
    dd64:	4b05      	ldr	r3, [pc, #20]	; (dd7c <hif_handle_isr+0x80>)
    dd66:	791b      	ldrb	r3, [r3, #4]
    dd68:	b2db      	uxtb	r3, r3
    dd6a:	2b00      	cmp	r3, #0
    dd6c:	d0d0      	beq.n	dd10 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
    dd6e:	1dfb      	adds	r3, r7, #7
    dd70:	781b      	ldrb	r3, [r3, #0]
    dd72:	b25b      	sxtb	r3, r3
}
    dd74:	0018      	movs	r0, r3
    dd76:	46bd      	mov	sp, r7
    dd78:	b003      	add	sp, #12
    dd7a:	bd90      	pop	{r4, r7, pc}
    dd7c:	20005514 	.word	0x20005514
    dd80:	0000d825 	.word	0x0000d825
    dd84:	00000257 	.word	0x00000257
    dd88:	0002490c 	.word	0x0002490c
    dd8c:	000245f4 	.word	0x000245f4
    dd90:	0000a4ed 	.word	0x0000a4ed
    dd94:	000247f0 	.word	0x000247f0
    dd98:	000245f0 	.word	0x000245f0

0000dd9c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    dd9c:	b590      	push	{r4, r7, lr}
    dd9e:	b087      	sub	sp, #28
    dda0:	af00      	add	r7, sp, #0
    dda2:	60f8      	str	r0, [r7, #12]
    dda4:	60b9      	str	r1, [r7, #8]
    dda6:	0019      	movs	r1, r3
    dda8:	1dbb      	adds	r3, r7, #6
    ddaa:	801a      	strh	r2, [r3, #0]
    ddac:	1d7b      	adds	r3, r7, #5
    ddae:	1c0a      	adds	r2, r1, #0
    ddb0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    ddb2:	2317      	movs	r3, #23
    ddb4:	18fb      	adds	r3, r7, r3
    ddb6:	2200      	movs	r2, #0
    ddb8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    ddba:	68fb      	ldr	r3, [r7, #12]
    ddbc:	2b00      	cmp	r3, #0
    ddbe:	d006      	beq.n	ddce <hif_receive+0x32>
    ddc0:	68bb      	ldr	r3, [r7, #8]
    ddc2:	2b00      	cmp	r3, #0
    ddc4:	d003      	beq.n	ddce <hif_receive+0x32>
    ddc6:	1dbb      	adds	r3, r7, #6
    ddc8:	881b      	ldrh	r3, [r3, #0]
    ddca:	2b00      	cmp	r3, #0
    ddcc:	d11e      	bne.n	de0c <hif_receive+0x70>
	{
		if(isDone)
    ddce:	1d7b      	adds	r3, r7, #5
    ddd0:	781b      	ldrb	r3, [r3, #0]
    ddd2:	2b00      	cmp	r3, #0
    ddd4:	d006      	beq.n	dde4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    ddd6:	2317      	movs	r3, #23
    ddd8:	18fc      	adds	r4, r7, r3
    ddda:	4b45      	ldr	r3, [pc, #276]	; (def0 <hif_receive+0x154>)
    dddc:	4798      	blx	r3
    ddde:	0003      	movs	r3, r0
    dde0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    dde2:	e07c      	b.n	dede <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
    dde4:	2317      	movs	r3, #23
    dde6:	18fb      	adds	r3, r7, r3
    dde8:	22f4      	movs	r2, #244	; 0xf4
    ddea:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    ddec:	239e      	movs	r3, #158	; 0x9e
    ddee:	009a      	lsls	r2, r3, #2
    ddf0:	4940      	ldr	r1, [pc, #256]	; (def4 <hif_receive+0x158>)
    ddf2:	4b41      	ldr	r3, [pc, #260]	; (def8 <hif_receive+0x15c>)
    ddf4:	0018      	movs	r0, r3
    ddf6:	4b41      	ldr	r3, [pc, #260]	; (defc <hif_receive+0x160>)
    ddf8:	4798      	blx	r3
    ddfa:	4b41      	ldr	r3, [pc, #260]	; (df00 <hif_receive+0x164>)
    ddfc:	0018      	movs	r0, r3
    ddfe:	4b3f      	ldr	r3, [pc, #252]	; (defc <hif_receive+0x160>)
    de00:	4798      	blx	r3
    de02:	4b40      	ldr	r3, [pc, #256]	; (df04 <hif_receive+0x168>)
    de04:	0018      	movs	r0, r3
    de06:	4b3d      	ldr	r3, [pc, #244]	; (defc <hif_receive+0x160>)
    de08:	4798      	blx	r3
		goto ERR1;
    de0a:	e068      	b.n	dede <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    de0c:	1dbb      	adds	r3, r7, #6
    de0e:	881a      	ldrh	r2, [r3, #0]
    de10:	4b3d      	ldr	r3, [pc, #244]	; (df08 <hif_receive+0x16c>)
    de12:	68db      	ldr	r3, [r3, #12]
    de14:	429a      	cmp	r2, r3
    de16:	d917      	bls.n	de48 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
    de18:	2317      	movs	r3, #23
    de1a:	18fb      	adds	r3, r7, r3
    de1c:	22f4      	movs	r2, #244	; 0xf4
    de1e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    de20:	23a0      	movs	r3, #160	; 0xa0
    de22:	009a      	lsls	r2, r3, #2
    de24:	4933      	ldr	r1, [pc, #204]	; (def4 <hif_receive+0x158>)
    de26:	4b34      	ldr	r3, [pc, #208]	; (def8 <hif_receive+0x15c>)
    de28:	0018      	movs	r0, r3
    de2a:	4b34      	ldr	r3, [pc, #208]	; (defc <hif_receive+0x160>)
    de2c:	4798      	blx	r3
    de2e:	1dbb      	adds	r3, r7, #6
    de30:	8819      	ldrh	r1, [r3, #0]
    de32:	4b35      	ldr	r3, [pc, #212]	; (df08 <hif_receive+0x16c>)
    de34:	68da      	ldr	r2, [r3, #12]
    de36:	4b35      	ldr	r3, [pc, #212]	; (df0c <hif_receive+0x170>)
    de38:	0018      	movs	r0, r3
    de3a:	4b30      	ldr	r3, [pc, #192]	; (defc <hif_receive+0x160>)
    de3c:	4798      	blx	r3
    de3e:	4b31      	ldr	r3, [pc, #196]	; (df04 <hif_receive+0x168>)
    de40:	0018      	movs	r0, r3
    de42:	4b2e      	ldr	r3, [pc, #184]	; (defc <hif_receive+0x160>)
    de44:	4798      	blx	r3
		goto ERR1;
    de46:	e04a      	b.n	dede <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    de48:	4b2f      	ldr	r3, [pc, #188]	; (df08 <hif_receive+0x16c>)
    de4a:	689a      	ldr	r2, [r3, #8]
    de4c:	68fb      	ldr	r3, [r7, #12]
    de4e:	429a      	cmp	r2, r3
    de50:	d80a      	bhi.n	de68 <hif_receive+0xcc>
    de52:	1dbb      	adds	r3, r7, #6
    de54:	881a      	ldrh	r2, [r3, #0]
    de56:	68fb      	ldr	r3, [r7, #12]
    de58:	18d2      	adds	r2, r2, r3
    de5a:	4b2b      	ldr	r3, [pc, #172]	; (df08 <hif_receive+0x16c>)
    de5c:	6899      	ldr	r1, [r3, #8]
    de5e:	4b2a      	ldr	r3, [pc, #168]	; (df08 <hif_receive+0x16c>)
    de60:	68db      	ldr	r3, [r3, #12]
    de62:	18cb      	adds	r3, r1, r3
    de64:	429a      	cmp	r2, r3
    de66:	d912      	bls.n	de8e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
    de68:	2317      	movs	r3, #23
    de6a:	18fb      	adds	r3, r7, r3
    de6c:	22f4      	movs	r2, #244	; 0xf4
    de6e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    de70:	4a27      	ldr	r2, [pc, #156]	; (df10 <hif_receive+0x174>)
    de72:	4920      	ldr	r1, [pc, #128]	; (def4 <hif_receive+0x158>)
    de74:	4b20      	ldr	r3, [pc, #128]	; (def8 <hif_receive+0x15c>)
    de76:	0018      	movs	r0, r3
    de78:	4b20      	ldr	r3, [pc, #128]	; (defc <hif_receive+0x160>)
    de7a:	4798      	blx	r3
    de7c:	4b25      	ldr	r3, [pc, #148]	; (df14 <hif_receive+0x178>)
    de7e:	0018      	movs	r0, r3
    de80:	4b1e      	ldr	r3, [pc, #120]	; (defc <hif_receive+0x160>)
    de82:	4798      	blx	r3
    de84:	4b1f      	ldr	r3, [pc, #124]	; (df04 <hif_receive+0x168>)
    de86:	0018      	movs	r0, r3
    de88:	4b1c      	ldr	r3, [pc, #112]	; (defc <hif_receive+0x160>)
    de8a:	4798      	blx	r3
		goto ERR1;
    de8c:	e027      	b.n	dede <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    de8e:	1dbb      	adds	r3, r7, #6
    de90:	881a      	ldrh	r2, [r3, #0]
    de92:	2317      	movs	r3, #23
    de94:	18fc      	adds	r4, r7, r3
    de96:	68b9      	ldr	r1, [r7, #8]
    de98:	68fb      	ldr	r3, [r7, #12]
    de9a:	0018      	movs	r0, r3
    de9c:	4b1e      	ldr	r3, [pc, #120]	; (df18 <hif_receive+0x17c>)
    de9e:	4798      	blx	r3
    dea0:	0003      	movs	r3, r0
    dea2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    dea4:	2317      	movs	r3, #23
    dea6:	18fb      	adds	r3, r7, r3
    dea8:	781b      	ldrb	r3, [r3, #0]
    deaa:	b25b      	sxtb	r3, r3
    deac:	2b00      	cmp	r3, #0
    deae:	d115      	bne.n	dedc <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    deb0:	4b15      	ldr	r3, [pc, #84]	; (df08 <hif_receive+0x16c>)
    deb2:	689a      	ldr	r2, [r3, #8]
    deb4:	4b14      	ldr	r3, [pc, #80]	; (df08 <hif_receive+0x16c>)
    deb6:	68db      	ldr	r3, [r3, #12]
    deb8:	18d2      	adds	r2, r2, r3
    deba:	1dbb      	adds	r3, r7, #6
    debc:	8819      	ldrh	r1, [r3, #0]
    debe:	68fb      	ldr	r3, [r7, #12]
    dec0:	18cb      	adds	r3, r1, r3
    dec2:	429a      	cmp	r2, r3
    dec4:	d003      	beq.n	dece <hif_receive+0x132>
    dec6:	1d7b      	adds	r3, r7, #5
    dec8:	781b      	ldrb	r3, [r3, #0]
    deca:	2b00      	cmp	r3, #0
    decc:	d007      	beq.n	dede <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    dece:	2317      	movs	r3, #23
    ded0:	18fc      	adds	r4, r7, r3
    ded2:	4b07      	ldr	r3, [pc, #28]	; (def0 <hif_receive+0x154>)
    ded4:	4798      	blx	r3
    ded6:	0003      	movs	r3, r0
    ded8:	7023      	strb	r3, [r4, #0]
    deda:	e000      	b.n	dede <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
    dedc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    dede:	2317      	movs	r3, #23
    dee0:	18fb      	adds	r3, r7, r3
    dee2:	781b      	ldrb	r3, [r3, #0]
    dee4:	b25b      	sxtb	r3, r3
}
    dee6:	0018      	movs	r0, r3
    dee8:	46bd      	mov	sp, r7
    deea:	b007      	add	sp, #28
    deec:	bd90      	pop	{r4, r7, pc}
    deee:	46c0      	nop			; (mov r8, r8)
    def0:	0000d2b9 	.word	0x0000d2b9
    def4:	0002491c 	.word	0x0002491c
    def8:	000245f4 	.word	0x000245f4
    defc:	0000a4ed 	.word	0x0000a4ed
    df00:	00024820 	.word	0x00024820
    df04:	000245f0 	.word	0x000245f0
    df08:	20005514 	.word	0x20005514
    df0c:	00024840 	.word	0x00024840
    df10:	00000286 	.word	0x00000286
    df14:	00024888 	.word	0x00024888
    df18:	0000f325 	.word	0x0000f325

0000df1c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    df1c:	b580      	push	{r7, lr}
    df1e:	b084      	sub	sp, #16
    df20:	af00      	add	r7, sp, #0
    df22:	0002      	movs	r2, r0
    df24:	6039      	str	r1, [r7, #0]
    df26:	1dfb      	adds	r3, r7, #7
    df28:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    df2a:	230f      	movs	r3, #15
    df2c:	18fb      	adds	r3, r7, r3
    df2e:	2200      	movs	r2, #0
    df30:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    df32:	1dfb      	adds	r3, r7, #7
    df34:	781b      	ldrb	r3, [r3, #0]
    df36:	2b07      	cmp	r3, #7
    df38:	d820      	bhi.n	df7c <hif_register_cb+0x60>
    df3a:	009a      	lsls	r2, r3, #2
    df3c:	4b1e      	ldr	r3, [pc, #120]	; (dfb8 <hif_register_cb+0x9c>)
    df3e:	18d3      	adds	r3, r2, r3
    df40:	681b      	ldr	r3, [r3, #0]
    df42:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    df44:	4b1d      	ldr	r3, [pc, #116]	; (dfbc <hif_register_cb+0xa0>)
    df46:	683a      	ldr	r2, [r7, #0]
    df48:	615a      	str	r2, [r3, #20]
			break;
    df4a:	e02d      	b.n	dfa8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    df4c:	4b1b      	ldr	r3, [pc, #108]	; (dfbc <hif_register_cb+0xa0>)
    df4e:	683a      	ldr	r2, [r7, #0]
    df50:	611a      	str	r2, [r3, #16]
			break;
    df52:	e029      	b.n	dfa8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    df54:	4b19      	ldr	r3, [pc, #100]	; (dfbc <hif_register_cb+0xa0>)
    df56:	683a      	ldr	r2, [r7, #0]
    df58:	619a      	str	r2, [r3, #24]
			break;
    df5a:	e025      	b.n	dfa8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    df5c:	4b17      	ldr	r3, [pc, #92]	; (dfbc <hif_register_cb+0xa0>)
    df5e:	683a      	ldr	r2, [r7, #0]
    df60:	621a      	str	r2, [r3, #32]
			break;
    df62:	e021      	b.n	dfa8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    df64:	4b15      	ldr	r3, [pc, #84]	; (dfbc <hif_register_cb+0xa0>)
    df66:	683a      	ldr	r2, [r7, #0]
    df68:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    df6a:	e01d      	b.n	dfa8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    df6c:	4b13      	ldr	r3, [pc, #76]	; (dfbc <hif_register_cb+0xa0>)
    df6e:	683a      	ldr	r2, [r7, #0]
    df70:	61da      	str	r2, [r3, #28]
			break;
    df72:	e019      	b.n	dfa8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    df74:	4b11      	ldr	r3, [pc, #68]	; (dfbc <hif_register_cb+0xa0>)
    df76:	683a      	ldr	r2, [r7, #0]
    df78:	629a      	str	r2, [r3, #40]	; 0x28
			break;
    df7a:	e015      	b.n	dfa8 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    df7c:	4a10      	ldr	r2, [pc, #64]	; (dfc0 <hif_register_cb+0xa4>)
    df7e:	4911      	ldr	r1, [pc, #68]	; (dfc4 <hif_register_cb+0xa8>)
    df80:	4b11      	ldr	r3, [pc, #68]	; (dfc8 <hif_register_cb+0xac>)
    df82:	0018      	movs	r0, r3
    df84:	4b11      	ldr	r3, [pc, #68]	; (dfcc <hif_register_cb+0xb0>)
    df86:	4798      	blx	r3
    df88:	1dfb      	adds	r3, r7, #7
    df8a:	781a      	ldrb	r2, [r3, #0]
    df8c:	4b10      	ldr	r3, [pc, #64]	; (dfd0 <hif_register_cb+0xb4>)
    df8e:	0011      	movs	r1, r2
    df90:	0018      	movs	r0, r3
    df92:	4b0e      	ldr	r3, [pc, #56]	; (dfcc <hif_register_cb+0xb0>)
    df94:	4798      	blx	r3
    df96:	4b0f      	ldr	r3, [pc, #60]	; (dfd4 <hif_register_cb+0xb8>)
    df98:	0018      	movs	r0, r3
    df9a:	4b0c      	ldr	r3, [pc, #48]	; (dfcc <hif_register_cb+0xb0>)
    df9c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    df9e:	230f      	movs	r3, #15
    dfa0:	18fb      	adds	r3, r7, r3
    dfa2:	22f4      	movs	r2, #244	; 0xf4
    dfa4:	701a      	strb	r2, [r3, #0]
			break;
    dfa6:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    dfa8:	230f      	movs	r3, #15
    dfaa:	18fb      	adds	r3, r7, r3
    dfac:	781b      	ldrb	r3, [r3, #0]
    dfae:	b25b      	sxtb	r3, r3
}
    dfb0:	0018      	movs	r0, r3
    dfb2:	46bd      	mov	sp, r7
    dfb4:	b004      	add	sp, #16
    dfb6:	bd80      	pop	{r7, pc}
    dfb8:	000248d8 	.word	0x000248d8
    dfbc:	20005514 	.word	0x20005514
    dfc0:	000002be 	.word	0x000002be
    dfc4:	00024928 	.word	0x00024928
    dfc8:	000245f4 	.word	0x000245f4
    dfcc:	0000a4ed 	.word	0x0000a4ed
    dfd0:	000248cc 	.word	0x000248cc
    dfd4:	000245f0 	.word	0x000245f0

0000dfd8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    dfd8:	b590      	push	{r4, r7, lr}
    dfda:	b0af      	sub	sp, #188	; 0xbc
    dfdc:	af02      	add	r7, sp, #8
    dfde:	603a      	str	r2, [r7, #0]
    dfe0:	1dfb      	adds	r3, r7, #7
    dfe2:	1c02      	adds	r2, r0, #0
    dfe4:	701a      	strb	r2, [r3, #0]
    dfe6:	1d3b      	adds	r3, r7, #4
    dfe8:	1c0a      	adds	r2, r1, #0
    dfea:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    dfec:	1dfb      	adds	r3, r7, #7
    dfee:	781b      	ldrb	r3, [r3, #0]
    dff0:	2b2c      	cmp	r3, #44	; 0x2c
    dff2:	d116      	bne.n	e022 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    dff4:	23a4      	movs	r3, #164	; 0xa4
    dff6:	18f9      	adds	r1, r7, r3
    dff8:	6838      	ldr	r0, [r7, #0]
    dffa:	2300      	movs	r3, #0
    dffc:	2204      	movs	r2, #4
    dffe:	4cca      	ldr	r4, [pc, #808]	; (e328 <m2m_wifi_cb+0x350>)
    e000:	47a0      	blx	r4
    e002:	1e03      	subs	r3, r0, #0
    e004:	d000      	beq.n	e008 <m2m_wifi_cb+0x30>
    e006:	e1b4      	b.n	e372 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
    e008:	4bc8      	ldr	r3, [pc, #800]	; (e32c <m2m_wifi_cb+0x354>)
    e00a:	681b      	ldr	r3, [r3, #0]
    e00c:	2b00      	cmp	r3, #0
    e00e:	d100      	bne.n	e012 <m2m_wifi_cb+0x3a>
    e010:	e1af      	b.n	e372 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    e012:	4bc6      	ldr	r3, [pc, #792]	; (e32c <m2m_wifi_cb+0x354>)
    e014:	681b      	ldr	r3, [r3, #0]
    e016:	22a4      	movs	r2, #164	; 0xa4
    e018:	18ba      	adds	r2, r7, r2
    e01a:	0011      	movs	r1, r2
    e01c:	202c      	movs	r0, #44	; 0x2c
    e01e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    e020:	e1a7      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    e022:	1dfb      	adds	r3, r7, #7
    e024:	781b      	ldrb	r3, [r3, #0]
    e026:	2b1b      	cmp	r3, #27
    e028:	d116      	bne.n	e058 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    e02a:	239c      	movs	r3, #156	; 0x9c
    e02c:	18f9      	adds	r1, r7, r3
    e02e:	6838      	ldr	r0, [r7, #0]
    e030:	2300      	movs	r3, #0
    e032:	2208      	movs	r2, #8
    e034:	4cbc      	ldr	r4, [pc, #752]	; (e328 <m2m_wifi_cb+0x350>)
    e036:	47a0      	blx	r4
    e038:	1e03      	subs	r3, r0, #0
    e03a:	d000      	beq.n	e03e <m2m_wifi_cb+0x66>
    e03c:	e199      	b.n	e372 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    e03e:	4bbb      	ldr	r3, [pc, #748]	; (e32c <m2m_wifi_cb+0x354>)
    e040:	681b      	ldr	r3, [r3, #0]
    e042:	2b00      	cmp	r3, #0
    e044:	d100      	bne.n	e048 <m2m_wifi_cb+0x70>
    e046:	e194      	b.n	e372 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    e048:	4bb8      	ldr	r3, [pc, #736]	; (e32c <m2m_wifi_cb+0x354>)
    e04a:	681b      	ldr	r3, [r3, #0]
    e04c:	229c      	movs	r2, #156	; 0x9c
    e04e:	18ba      	adds	r2, r7, r2
    e050:	0011      	movs	r1, r2
    e052:	201b      	movs	r0, #27
    e054:	4798      	blx	r3
}
    e056:	e18c      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    e058:	1dfb      	adds	r3, r7, #7
    e05a:	781b      	ldrb	r3, [r3, #0]
    e05c:	2b06      	cmp	r3, #6
    e05e:	d116      	bne.n	e08e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    e060:	230c      	movs	r3, #12
    e062:	18f9      	adds	r1, r7, r3
    e064:	6838      	ldr	r0, [r7, #0]
    e066:	2301      	movs	r3, #1
    e068:	2230      	movs	r2, #48	; 0x30
    e06a:	4caf      	ldr	r4, [pc, #700]	; (e328 <m2m_wifi_cb+0x350>)
    e06c:	47a0      	blx	r4
    e06e:	1e03      	subs	r3, r0, #0
    e070:	d000      	beq.n	e074 <m2m_wifi_cb+0x9c>
    e072:	e17e      	b.n	e372 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    e074:	4bad      	ldr	r3, [pc, #692]	; (e32c <m2m_wifi_cb+0x354>)
    e076:	681b      	ldr	r3, [r3, #0]
    e078:	2b00      	cmp	r3, #0
    e07a:	d100      	bne.n	e07e <m2m_wifi_cb+0xa6>
    e07c:	e179      	b.n	e372 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    e07e:	4bab      	ldr	r3, [pc, #684]	; (e32c <m2m_wifi_cb+0x354>)
    e080:	681b      	ldr	r3, [r3, #0]
    e082:	220c      	movs	r2, #12
    e084:	18ba      	adds	r2, r7, r2
    e086:	0011      	movs	r1, r2
    e088:	2006      	movs	r0, #6
    e08a:	4798      	blx	r3
}
    e08c:	e171      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    e08e:	1dfb      	adds	r3, r7, #7
    e090:	781b      	ldrb	r3, [r3, #0]
    e092:	2b0e      	cmp	r3, #14
    e094:	d100      	bne.n	e098 <m2m_wifi_cb+0xc0>
    e096:	e16c      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    e098:	1dfb      	adds	r3, r7, #7
    e09a:	781b      	ldrb	r3, [r3, #0]
    e09c:	2b32      	cmp	r3, #50	; 0x32
    e09e:	d116      	bne.n	e0ce <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    e0a0:	2384      	movs	r3, #132	; 0x84
    e0a2:	18f9      	adds	r1, r7, r3
    e0a4:	6838      	ldr	r0, [r7, #0]
    e0a6:	2300      	movs	r3, #0
    e0a8:	2218      	movs	r2, #24
    e0aa:	4c9f      	ldr	r4, [pc, #636]	; (e328 <m2m_wifi_cb+0x350>)
    e0ac:	47a0      	blx	r4
    e0ae:	1e03      	subs	r3, r0, #0
    e0b0:	d000      	beq.n	e0b4 <m2m_wifi_cb+0xdc>
    e0b2:	e15e      	b.n	e372 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    e0b4:	4b9d      	ldr	r3, [pc, #628]	; (e32c <m2m_wifi_cb+0x354>)
    e0b6:	681b      	ldr	r3, [r3, #0]
    e0b8:	2b00      	cmp	r3, #0
    e0ba:	d100      	bne.n	e0be <m2m_wifi_cb+0xe6>
    e0bc:	e159      	b.n	e372 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    e0be:	4b9b      	ldr	r3, [pc, #620]	; (e32c <m2m_wifi_cb+0x354>)
    e0c0:	681b      	ldr	r3, [r3, #0]
    e0c2:	2284      	movs	r2, #132	; 0x84
    e0c4:	18ba      	adds	r2, r7, r2
    e0c6:	0011      	movs	r1, r2
    e0c8:	2032      	movs	r0, #50	; 0x32
    e0ca:	4798      	blx	r3
}
    e0cc:	e151      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    e0ce:	1dfb      	adds	r3, r7, #7
    e0d0:	781b      	ldrb	r3, [r3, #0]
    e0d2:	2b2f      	cmp	r3, #47	; 0x2f
    e0d4:	d11d      	bne.n	e112 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    e0d6:	230c      	movs	r3, #12
    e0d8:	18fb      	adds	r3, r7, r3
    e0da:	2264      	movs	r2, #100	; 0x64
    e0dc:	2100      	movs	r1, #0
    e0de:	0018      	movs	r0, r3
    e0e0:	4b93      	ldr	r3, [pc, #588]	; (e330 <m2m_wifi_cb+0x358>)
    e0e2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    e0e4:	230c      	movs	r3, #12
    e0e6:	18f9      	adds	r1, r7, r3
    e0e8:	6838      	ldr	r0, [r7, #0]
    e0ea:	2300      	movs	r3, #0
    e0ec:	2264      	movs	r2, #100	; 0x64
    e0ee:	4c8e      	ldr	r4, [pc, #568]	; (e328 <m2m_wifi_cb+0x350>)
    e0f0:	47a0      	blx	r4
    e0f2:	1e03      	subs	r3, r0, #0
    e0f4:	d000      	beq.n	e0f8 <m2m_wifi_cb+0x120>
    e0f6:	e13c      	b.n	e372 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    e0f8:	4b8c      	ldr	r3, [pc, #560]	; (e32c <m2m_wifi_cb+0x354>)
    e0fa:	681b      	ldr	r3, [r3, #0]
    e0fc:	2b00      	cmp	r3, #0
    e0fe:	d100      	bne.n	e102 <m2m_wifi_cb+0x12a>
    e100:	e137      	b.n	e372 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    e102:	4b8a      	ldr	r3, [pc, #552]	; (e32c <m2m_wifi_cb+0x354>)
    e104:	681b      	ldr	r3, [r3, #0]
    e106:	220c      	movs	r2, #12
    e108:	18ba      	adds	r2, r7, r2
    e10a:	0011      	movs	r1, r2
    e10c:	202f      	movs	r0, #47	; 0x2f
    e10e:	4798      	blx	r3
}
    e110:	e12f      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    e112:	1dfb      	adds	r3, r7, #7
    e114:	781b      	ldrb	r3, [r3, #0]
    e116:	2b34      	cmp	r3, #52	; 0x34
    e118:	d137      	bne.n	e18a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    e11a:	2380      	movs	r3, #128	; 0x80
    e11c:	18f9      	adds	r1, r7, r3
    e11e:	6838      	ldr	r0, [r7, #0]
    e120:	2300      	movs	r3, #0
    e122:	2204      	movs	r2, #4
    e124:	4c80      	ldr	r4, [pc, #512]	; (e328 <m2m_wifi_cb+0x350>)
    e126:	47a0      	blx	r4
    e128:	1e03      	subs	r3, r0, #0
    e12a:	d000      	beq.n	e12e <m2m_wifi_cb+0x156>
    e12c:	e121      	b.n	e372 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    e12e:	4b81      	ldr	r3, [pc, #516]	; (e334 <m2m_wifi_cb+0x35c>)
    e130:	0018      	movs	r0, r3
    e132:	4b81      	ldr	r3, [pc, #516]	; (e338 <m2m_wifi_cb+0x360>)
    e134:	4798      	blx	r3
    e136:	2380      	movs	r3, #128	; 0x80
    e138:	18fb      	adds	r3, r7, r3
    e13a:	681b      	ldr	r3, [r3, #0]
    e13c:	0e1b      	lsrs	r3, r3, #24
    e13e:	b2db      	uxtb	r3, r3
    e140:	0019      	movs	r1, r3
    e142:	2380      	movs	r3, #128	; 0x80
    e144:	18fb      	adds	r3, r7, r3
    e146:	681b      	ldr	r3, [r3, #0]
    e148:	0c1b      	lsrs	r3, r3, #16
    e14a:	b2db      	uxtb	r3, r3
    e14c:	001a      	movs	r2, r3
    e14e:	2380      	movs	r3, #128	; 0x80
    e150:	18fb      	adds	r3, r7, r3
    e152:	681b      	ldr	r3, [r3, #0]
    e154:	0a1b      	lsrs	r3, r3, #8
    e156:	b2db      	uxtb	r3, r3
    e158:	001c      	movs	r4, r3
    e15a:	2380      	movs	r3, #128	; 0x80
    e15c:	18fb      	adds	r3, r7, r3
    e15e:	681b      	ldr	r3, [r3, #0]
    e160:	b2db      	uxtb	r3, r3
    e162:	4876      	ldr	r0, [pc, #472]	; (e33c <m2m_wifi_cb+0x364>)
    e164:	9300      	str	r3, [sp, #0]
    e166:	0023      	movs	r3, r4
    e168:	4c73      	ldr	r4, [pc, #460]	; (e338 <m2m_wifi_cb+0x360>)
    e16a:	47a0      	blx	r4
    e16c:	4b74      	ldr	r3, [pc, #464]	; (e340 <m2m_wifi_cb+0x368>)
    e16e:	0018      	movs	r0, r3
    e170:	4b71      	ldr	r3, [pc, #452]	; (e338 <m2m_wifi_cb+0x360>)
    e172:	4798      	blx	r3
			if (gpfAppWifiCb)
    e174:	4b6d      	ldr	r3, [pc, #436]	; (e32c <m2m_wifi_cb+0x354>)
    e176:	681b      	ldr	r3, [r3, #0]
    e178:	2b00      	cmp	r3, #0
    e17a:	d100      	bne.n	e17e <m2m_wifi_cb+0x1a6>
    e17c:	e0f9      	b.n	e372 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    e17e:	4b6b      	ldr	r3, [pc, #428]	; (e32c <m2m_wifi_cb+0x354>)
    e180:	681b      	ldr	r3, [r3, #0]
    e182:	2100      	movs	r1, #0
    e184:	2034      	movs	r0, #52	; 0x34
    e186:	4798      	blx	r3
}
    e188:	e0f3      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    e18a:	1dfb      	adds	r3, r7, #7
    e18c:	781b      	ldrb	r3, [r3, #0]
    e18e:	2b11      	cmp	r3, #17
    e190:	d11e      	bne.n	e1d0 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
    e192:	4b6c      	ldr	r3, [pc, #432]	; (e344 <m2m_wifi_cb+0x36c>)
    e194:	2200      	movs	r2, #0
    e196:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    e198:	237c      	movs	r3, #124	; 0x7c
    e19a:	18f9      	adds	r1, r7, r3
    e19c:	6838      	ldr	r0, [r7, #0]
    e19e:	2300      	movs	r3, #0
    e1a0:	2204      	movs	r2, #4
    e1a2:	4c61      	ldr	r4, [pc, #388]	; (e328 <m2m_wifi_cb+0x350>)
    e1a4:	47a0      	blx	r4
    e1a6:	1e03      	subs	r3, r0, #0
    e1a8:	d000      	beq.n	e1ac <m2m_wifi_cb+0x1d4>
    e1aa:	e0e2      	b.n	e372 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
    e1ac:	237c      	movs	r3, #124	; 0x7c
    e1ae:	18fb      	adds	r3, r7, r3
    e1b0:	781a      	ldrb	r2, [r3, #0]
    e1b2:	4b65      	ldr	r3, [pc, #404]	; (e348 <m2m_wifi_cb+0x370>)
    e1b4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    e1b6:	4b5d      	ldr	r3, [pc, #372]	; (e32c <m2m_wifi_cb+0x354>)
    e1b8:	681b      	ldr	r3, [r3, #0]
    e1ba:	2b00      	cmp	r3, #0
    e1bc:	d100      	bne.n	e1c0 <m2m_wifi_cb+0x1e8>
    e1be:	e0d8      	b.n	e372 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    e1c0:	4b5a      	ldr	r3, [pc, #360]	; (e32c <m2m_wifi_cb+0x354>)
    e1c2:	681b      	ldr	r3, [r3, #0]
    e1c4:	227c      	movs	r2, #124	; 0x7c
    e1c6:	18ba      	adds	r2, r7, r2
    e1c8:	0011      	movs	r1, r2
    e1ca:	2011      	movs	r0, #17
    e1cc:	4798      	blx	r3
}
    e1ce:	e0d0      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    e1d0:	1dfb      	adds	r3, r7, #7
    e1d2:	781b      	ldrb	r3, [r3, #0]
    e1d4:	2b13      	cmp	r3, #19
    e1d6:	d116      	bne.n	e206 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    e1d8:	230c      	movs	r3, #12
    e1da:	18f9      	adds	r1, r7, r3
    e1dc:	6838      	ldr	r0, [r7, #0]
    e1de:	2300      	movs	r3, #0
    e1e0:	222c      	movs	r2, #44	; 0x2c
    e1e2:	4c51      	ldr	r4, [pc, #324]	; (e328 <m2m_wifi_cb+0x350>)
    e1e4:	47a0      	blx	r4
    e1e6:	1e03      	subs	r3, r0, #0
    e1e8:	d000      	beq.n	e1ec <m2m_wifi_cb+0x214>
    e1ea:	e0c2      	b.n	e372 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    e1ec:	4b4f      	ldr	r3, [pc, #316]	; (e32c <m2m_wifi_cb+0x354>)
    e1ee:	681b      	ldr	r3, [r3, #0]
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	d100      	bne.n	e1f6 <m2m_wifi_cb+0x21e>
    e1f4:	e0bd      	b.n	e372 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    e1f6:	4b4d      	ldr	r3, [pc, #308]	; (e32c <m2m_wifi_cb+0x354>)
    e1f8:	681b      	ldr	r3, [r3, #0]
    e1fa:	220c      	movs	r2, #12
    e1fc:	18ba      	adds	r2, r7, r2
    e1fe:	0011      	movs	r1, r2
    e200:	2013      	movs	r0, #19
    e202:	4798      	blx	r3
}
    e204:	e0b5      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    e206:	1dfb      	adds	r3, r7, #7
    e208:	781b      	ldrb	r3, [r3, #0]
    e20a:	2b04      	cmp	r3, #4
    e20c:	d116      	bne.n	e23c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    e20e:	23a8      	movs	r3, #168	; 0xa8
    e210:	18f9      	adds	r1, r7, r3
    e212:	6838      	ldr	r0, [r7, #0]
    e214:	2300      	movs	r3, #0
    e216:	2204      	movs	r2, #4
    e218:	4c43      	ldr	r4, [pc, #268]	; (e328 <m2m_wifi_cb+0x350>)
    e21a:	47a0      	blx	r4
    e21c:	1e03      	subs	r3, r0, #0
    e21e:	d000      	beq.n	e222 <m2m_wifi_cb+0x24a>
    e220:	e0a7      	b.n	e372 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    e222:	4b42      	ldr	r3, [pc, #264]	; (e32c <m2m_wifi_cb+0x354>)
    e224:	681b      	ldr	r3, [r3, #0]
    e226:	2b00      	cmp	r3, #0
    e228:	d100      	bne.n	e22c <m2m_wifi_cb+0x254>
    e22a:	e0a2      	b.n	e372 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    e22c:	4b3f      	ldr	r3, [pc, #252]	; (e32c <m2m_wifi_cb+0x354>)
    e22e:	681b      	ldr	r3, [r3, #0]
    e230:	22a8      	movs	r2, #168	; 0xa8
    e232:	18ba      	adds	r2, r7, r2
    e234:	0011      	movs	r1, r2
    e236:	2004      	movs	r0, #4
    e238:	4798      	blx	r3
}
    e23a:	e09a      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    e23c:	1dfb      	adds	r3, r7, #7
    e23e:	781b      	ldrb	r3, [r3, #0]
    e240:	2b65      	cmp	r3, #101	; 0x65
    e242:	d116      	bne.n	e272 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    e244:	23a8      	movs	r3, #168	; 0xa8
    e246:	18f9      	adds	r1, r7, r3
    e248:	6838      	ldr	r0, [r7, #0]
    e24a:	2300      	movs	r3, #0
    e24c:	2204      	movs	r2, #4
    e24e:	4c36      	ldr	r4, [pc, #216]	; (e328 <m2m_wifi_cb+0x350>)
    e250:	47a0      	blx	r4
    e252:	1e03      	subs	r3, r0, #0
    e254:	d000      	beq.n	e258 <m2m_wifi_cb+0x280>
    e256:	e08c      	b.n	e372 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    e258:	4b34      	ldr	r3, [pc, #208]	; (e32c <m2m_wifi_cb+0x354>)
    e25a:	681b      	ldr	r3, [r3, #0]
    e25c:	2b00      	cmp	r3, #0
    e25e:	d100      	bne.n	e262 <m2m_wifi_cb+0x28a>
    e260:	e087      	b.n	e372 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    e262:	4b32      	ldr	r3, [pc, #200]	; (e32c <m2m_wifi_cb+0x354>)
    e264:	681b      	ldr	r3, [r3, #0]
    e266:	22a8      	movs	r2, #168	; 0xa8
    e268:	18ba      	adds	r2, r7, r2
    e26a:	0011      	movs	r1, r2
    e26c:	2065      	movs	r0, #101	; 0x65
    e26e:	4798      	blx	r3
}
    e270:	e07f      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    e272:	1dfb      	adds	r3, r7, #7
    e274:	781b      	ldrb	r3, [r3, #0]
    e276:	2b09      	cmp	r3, #9
    e278:	d116      	bne.n	e2a8 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    e27a:	230c      	movs	r3, #12
    e27c:	18f9      	adds	r1, r7, r3
    e27e:	6838      	ldr	r0, [r7, #0]
    e280:	2301      	movs	r3, #1
    e282:	2264      	movs	r2, #100	; 0x64
    e284:	4c28      	ldr	r4, [pc, #160]	; (e328 <m2m_wifi_cb+0x350>)
    e286:	47a0      	blx	r4
    e288:	1e03      	subs	r3, r0, #0
    e28a:	d000      	beq.n	e28e <m2m_wifi_cb+0x2b6>
    e28c:	e071      	b.n	e372 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    e28e:	4b27      	ldr	r3, [pc, #156]	; (e32c <m2m_wifi_cb+0x354>)
    e290:	681b      	ldr	r3, [r3, #0]
    e292:	2b00      	cmp	r3, #0
    e294:	d100      	bne.n	e298 <m2m_wifi_cb+0x2c0>
    e296:	e06c      	b.n	e372 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    e298:	4b24      	ldr	r3, [pc, #144]	; (e32c <m2m_wifi_cb+0x354>)
    e29a:	681b      	ldr	r3, [r3, #0]
    e29c:	220c      	movs	r2, #12
    e29e:	18ba      	adds	r2, r7, r2
    e2a0:	0011      	movs	r1, r2
    e2a2:	2009      	movs	r0, #9
    e2a4:	4798      	blx	r3
}
    e2a6:	e064      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    e2a8:	1dfb      	adds	r3, r7, #7
    e2aa:	781b      	ldrb	r3, [r3, #0]
    e2ac:	2b2a      	cmp	r3, #42	; 0x2a
    e2ae:	d114      	bne.n	e2da <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    e2b0:	2378      	movs	r3, #120	; 0x78
    e2b2:	18f9      	adds	r1, r7, r3
    e2b4:	6838      	ldr	r0, [r7, #0]
    e2b6:	2301      	movs	r3, #1
    e2b8:	2204      	movs	r2, #4
    e2ba:	4c1b      	ldr	r4, [pc, #108]	; (e328 <m2m_wifi_cb+0x350>)
    e2bc:	47a0      	blx	r4
    e2be:	1e03      	subs	r3, r0, #0
    e2c0:	d157      	bne.n	e372 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    e2c2:	4b1a      	ldr	r3, [pc, #104]	; (e32c <m2m_wifi_cb+0x354>)
    e2c4:	681b      	ldr	r3, [r3, #0]
    e2c6:	2b00      	cmp	r3, #0
    e2c8:	d053      	beq.n	e372 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    e2ca:	4b18      	ldr	r3, [pc, #96]	; (e32c <m2m_wifi_cb+0x354>)
    e2cc:	681b      	ldr	r3, [r3, #0]
    e2ce:	2278      	movs	r2, #120	; 0x78
    e2d0:	18ba      	adds	r2, r7, r2
    e2d2:	0011      	movs	r1, r2
    e2d4:	202a      	movs	r0, #42	; 0x2a
    e2d6:	4798      	blx	r3
}
    e2d8:	e04b      	b.n	e372 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    e2da:	1dfb      	adds	r3, r7, #7
    e2dc:	781b      	ldrb	r3, [r3, #0]
    e2de:	2b20      	cmp	r3, #32
    e2e0:	d134      	bne.n	e34c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    e2e2:	2370      	movs	r3, #112	; 0x70
    e2e4:	18f9      	adds	r1, r7, r3
    e2e6:	6838      	ldr	r0, [r7, #0]
    e2e8:	2300      	movs	r3, #0
    e2ea:	2208      	movs	r2, #8
    e2ec:	4c0e      	ldr	r4, [pc, #56]	; (e328 <m2m_wifi_cb+0x350>)
    e2ee:	47a0      	blx	r4
    e2f0:	1e03      	subs	r3, r0, #0
    e2f2:	d13e      	bne.n	e372 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    e2f4:	683b      	ldr	r3, [r7, #0]
    e2f6:	3308      	adds	r3, #8
    e2f8:	0018      	movs	r0, r3
    e2fa:	2370      	movs	r3, #112	; 0x70
    e2fc:	18fb      	adds	r3, r7, r3
    e2fe:	6819      	ldr	r1, [r3, #0]
    e300:	2370      	movs	r3, #112	; 0x70
    e302:	18fb      	adds	r3, r7, r3
    e304:	889a      	ldrh	r2, [r3, #4]
    e306:	2301      	movs	r3, #1
    e308:	4c07      	ldr	r4, [pc, #28]	; (e328 <m2m_wifi_cb+0x350>)
    e30a:	47a0      	blx	r4
    e30c:	1e03      	subs	r3, r0, #0
    e30e:	d130      	bne.n	e372 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
    e310:	4b06      	ldr	r3, [pc, #24]	; (e32c <m2m_wifi_cb+0x354>)
    e312:	681b      	ldr	r3, [r3, #0]
    e314:	2b00      	cmp	r3, #0
    e316:	d02c      	beq.n	e372 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    e318:	4b04      	ldr	r3, [pc, #16]	; (e32c <m2m_wifi_cb+0x354>)
    e31a:	681b      	ldr	r3, [r3, #0]
    e31c:	2270      	movs	r2, #112	; 0x70
    e31e:	18ba      	adds	r2, r7, r2
    e320:	0011      	movs	r1, r2
    e322:	2020      	movs	r0, #32
    e324:	4798      	blx	r3
}
    e326:	e024      	b.n	e372 <m2m_wifi_cb+0x39a>
    e328:	0000dd9d 	.word	0x0000dd9d
    e32c:	20003d34 	.word	0x20003d34
    e330:	0000d221 	.word	0x0000d221
    e334:	00024938 	.word	0x00024938
    e338:	0000a4ed 	.word	0x0000a4ed
    e33c:	00024944 	.word	0x00024944
    e340:	00024964 	.word	0x00024964
    e344:	20003d31 	.word	0x20003d31
    e348:	20003d30 	.word	0x20003d30
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    e34c:	2324      	movs	r3, #36	; 0x24
    e34e:	33ff      	adds	r3, #255	; 0xff
    e350:	001a      	movs	r2, r3
    e352:	490a      	ldr	r1, [pc, #40]	; (e37c <m2m_wifi_cb+0x3a4>)
    e354:	4b0a      	ldr	r3, [pc, #40]	; (e380 <m2m_wifi_cb+0x3a8>)
    e356:	0018      	movs	r0, r3
    e358:	4b0a      	ldr	r3, [pc, #40]	; (e384 <m2m_wifi_cb+0x3ac>)
    e35a:	4798      	blx	r3
    e35c:	1dfb      	adds	r3, r7, #7
    e35e:	781a      	ldrb	r2, [r3, #0]
    e360:	4b09      	ldr	r3, [pc, #36]	; (e388 <m2m_wifi_cb+0x3b0>)
    e362:	0011      	movs	r1, r2
    e364:	0018      	movs	r0, r3
    e366:	4b07      	ldr	r3, [pc, #28]	; (e384 <m2m_wifi_cb+0x3ac>)
    e368:	4798      	blx	r3
    e36a:	4b08      	ldr	r3, [pc, #32]	; (e38c <m2m_wifi_cb+0x3b4>)
    e36c:	0018      	movs	r0, r3
    e36e:	4b05      	ldr	r3, [pc, #20]	; (e384 <m2m_wifi_cb+0x3ac>)
    e370:	4798      	blx	r3
}
    e372:	46c0      	nop			; (mov r8, r8)
    e374:	46bd      	mov	sp, r7
    e376:	b02d      	add	sp, #180	; 0xb4
    e378:	bd90      	pop	{r4, r7, pc}
    e37a:	46c0      	nop			; (mov r8, r8)
    e37c:	00024d04 	.word	0x00024d04
    e380:	00024968 	.word	0x00024968
    e384:	0000a4ed 	.word	0x0000a4ed
    e388:	0002497c 	.word	0x0002497c
    e38c:	00024964 	.word	0x00024964

0000e390 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    e390:	b590      	push	{r4, r7, lr}
    e392:	b091      	sub	sp, #68	; 0x44
    e394:	af02      	add	r7, sp, #8
    e396:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    e398:	2337      	movs	r3, #55	; 0x37
    e39a:	18fb      	adds	r3, r7, r3
    e39c:	2200      	movs	r2, #0
    e39e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    e3a0:	230b      	movs	r3, #11
    e3a2:	18fb      	adds	r3, r7, r3
    e3a4:	2201      	movs	r2, #1
    e3a6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    e3a8:	687b      	ldr	r3, [r7, #4]
    e3aa:	2b00      	cmp	r3, #0
    e3ac:	d104      	bne.n	e3b8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    e3ae:	2337      	movs	r3, #55	; 0x37
    e3b0:	18fb      	adds	r3, r7, r3
    e3b2:	22f4      	movs	r2, #244	; 0xf4
    e3b4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    e3b6:	e0b3      	b.n	e520 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    e3b8:	687b      	ldr	r3, [r7, #4]
    e3ba:	681a      	ldr	r2, [r3, #0]
    e3bc:	4b5c      	ldr	r3, [pc, #368]	; (e530 <m2m_wifi_init+0x1a0>)
    e3be:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    e3c0:	4b5c      	ldr	r3, [pc, #368]	; (e534 <m2m_wifi_init+0x1a4>)
    e3c2:	2200      	movs	r2, #0
    e3c4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    e3c6:	2337      	movs	r3, #55	; 0x37
    e3c8:	18fc      	adds	r4, r7, r3
    e3ca:	230b      	movs	r3, #11
    e3cc:	18fb      	adds	r3, r7, r3
    e3ce:	0018      	movs	r0, r3
    e3d0:	4b59      	ldr	r3, [pc, #356]	; (e538 <m2m_wifi_init+0x1a8>)
    e3d2:	4798      	blx	r3
    e3d4:	0003      	movs	r3, r0
    e3d6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    e3d8:	2337      	movs	r3, #55	; 0x37
    e3da:	18fb      	adds	r3, r7, r3
    e3dc:	781b      	ldrb	r3, [r3, #0]
    e3de:	b25b      	sxtb	r3, r3
    e3e0:	2b00      	cmp	r3, #0
    e3e2:	d000      	beq.n	e3e6 <m2m_wifi_init+0x56>
    e3e4:	e099      	b.n	e51a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    e3e6:	2337      	movs	r3, #55	; 0x37
    e3e8:	18fc      	adds	r4, r7, r3
    e3ea:	2000      	movs	r0, #0
    e3ec:	4b53      	ldr	r3, [pc, #332]	; (e53c <m2m_wifi_init+0x1ac>)
    e3ee:	4798      	blx	r3
    e3f0:	0003      	movs	r3, r0
    e3f2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    e3f4:	2337      	movs	r3, #55	; 0x37
    e3f6:	18fb      	adds	r3, r7, r3
    e3f8:	781b      	ldrb	r3, [r3, #0]
    e3fa:	b25b      	sxtb	r3, r3
    e3fc:	2b00      	cmp	r3, #0
    e3fe:	d000      	beq.n	e402 <m2m_wifi_init+0x72>
    e400:	e086      	b.n	e510 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    e402:	4b4f      	ldr	r3, [pc, #316]	; (e540 <m2m_wifi_init+0x1b0>)
    e404:	0019      	movs	r1, r3
    e406:	2001      	movs	r0, #1
    e408:	4b4e      	ldr	r3, [pc, #312]	; (e544 <m2m_wifi_init+0x1b4>)
    e40a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    e40c:	2337      	movs	r3, #55	; 0x37
    e40e:	18fc      	adds	r4, r7, r3
    e410:	230c      	movs	r3, #12
    e412:	18fb      	adds	r3, r7, r3
    e414:	0018      	movs	r0, r3
    e416:	4b4c      	ldr	r3, [pc, #304]	; (e548 <m2m_wifi_init+0x1b8>)
    e418:	4798      	blx	r3
    e41a:	0003      	movs	r3, r0
    e41c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    e41e:	4b4b      	ldr	r3, [pc, #300]	; (e54c <m2m_wifi_init+0x1bc>)
    e420:	0018      	movs	r0, r3
    e422:	4b4b      	ldr	r3, [pc, #300]	; (e550 <m2m_wifi_init+0x1c0>)
    e424:	4798      	blx	r3
    e426:	230c      	movs	r3, #12
    e428:	18fb      	adds	r3, r7, r3
    e42a:	791b      	ldrb	r3, [r3, #4]
    e42c:	0019      	movs	r1, r3
    e42e:	230c      	movs	r3, #12
    e430:	18fb      	adds	r3, r7, r3
    e432:	795b      	ldrb	r3, [r3, #5]
    e434:	001a      	movs	r2, r3
    e436:	230c      	movs	r3, #12
    e438:	18fb      	adds	r3, r7, r3
    e43a:	799b      	ldrb	r3, [r3, #6]
    e43c:	001c      	movs	r4, r3
    e43e:	230c      	movs	r3, #12
    e440:	18fb      	adds	r3, r7, r3
    e442:	8c1b      	ldrh	r3, [r3, #32]
    e444:	4843      	ldr	r0, [pc, #268]	; (e554 <m2m_wifi_init+0x1c4>)
    e446:	9300      	str	r3, [sp, #0]
    e448:	0023      	movs	r3, r4
    e44a:	4c41      	ldr	r4, [pc, #260]	; (e550 <m2m_wifi_init+0x1c0>)
    e44c:	47a0      	blx	r4
    e44e:	4b42      	ldr	r3, [pc, #264]	; (e558 <m2m_wifi_init+0x1c8>)
    e450:	0018      	movs	r0, r3
    e452:	4b3f      	ldr	r3, [pc, #252]	; (e550 <m2m_wifi_init+0x1c0>)
    e454:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    e456:	4b3d      	ldr	r3, [pc, #244]	; (e54c <m2m_wifi_init+0x1bc>)
    e458:	0018      	movs	r0, r3
    e45a:	4b3d      	ldr	r3, [pc, #244]	; (e550 <m2m_wifi_init+0x1c0>)
    e45c:	4798      	blx	r3
    e45e:	230c      	movs	r3, #12
    e460:	18fb      	adds	r3, r7, r3
    e462:	3316      	adds	r3, #22
    e464:	001a      	movs	r2, r3
    e466:	230c      	movs	r3, #12
    e468:	18fb      	adds	r3, r7, r3
    e46a:	330a      	adds	r3, #10
    e46c:	0019      	movs	r1, r3
    e46e:	4b3b      	ldr	r3, [pc, #236]	; (e55c <m2m_wifi_init+0x1cc>)
    e470:	0018      	movs	r0, r3
    e472:	4b37      	ldr	r3, [pc, #220]	; (e550 <m2m_wifi_init+0x1c0>)
    e474:	4798      	blx	r3
    e476:	4b38      	ldr	r3, [pc, #224]	; (e558 <m2m_wifi_init+0x1c8>)
    e478:	0018      	movs	r0, r3
    e47a:	4b35      	ldr	r3, [pc, #212]	; (e550 <m2m_wifi_init+0x1c0>)
    e47c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    e47e:	4b33      	ldr	r3, [pc, #204]	; (e54c <m2m_wifi_init+0x1bc>)
    e480:	0018      	movs	r0, r3
    e482:	4b33      	ldr	r3, [pc, #204]	; (e550 <m2m_wifi_init+0x1c0>)
    e484:	4798      	blx	r3
    e486:	230c      	movs	r3, #12
    e488:	18fb      	adds	r3, r7, r3
    e48a:	79db      	ldrb	r3, [r3, #7]
    e48c:	0019      	movs	r1, r3
    e48e:	230c      	movs	r3, #12
    e490:	18fb      	adds	r3, r7, r3
    e492:	7a1b      	ldrb	r3, [r3, #8]
    e494:	001a      	movs	r2, r3
    e496:	230c      	movs	r3, #12
    e498:	18fb      	adds	r3, r7, r3
    e49a:	7a5b      	ldrb	r3, [r3, #9]
    e49c:	4830      	ldr	r0, [pc, #192]	; (e560 <m2m_wifi_init+0x1d0>)
    e49e:	4c2c      	ldr	r4, [pc, #176]	; (e550 <m2m_wifi_init+0x1c0>)
    e4a0:	47a0      	blx	r4
    e4a2:	4b2d      	ldr	r3, [pc, #180]	; (e558 <m2m_wifi_init+0x1c8>)
    e4a4:	0018      	movs	r0, r3
    e4a6:	4b2a      	ldr	r3, [pc, #168]	; (e550 <m2m_wifi_init+0x1c0>)
    e4a8:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    e4aa:	4b28      	ldr	r3, [pc, #160]	; (e54c <m2m_wifi_init+0x1bc>)
    e4ac:	0018      	movs	r0, r3
    e4ae:	4b28      	ldr	r3, [pc, #160]	; (e550 <m2m_wifi_init+0x1c0>)
    e4b0:	4798      	blx	r3
    e4b2:	482c      	ldr	r0, [pc, #176]	; (e564 <m2m_wifi_init+0x1d4>)
    e4b4:	2304      	movs	r3, #4
    e4b6:	2205      	movs	r2, #5
    e4b8:	2113      	movs	r1, #19
    e4ba:	4c25      	ldr	r4, [pc, #148]	; (e550 <m2m_wifi_init+0x1c0>)
    e4bc:	47a0      	blx	r4
    e4be:	4b26      	ldr	r3, [pc, #152]	; (e558 <m2m_wifi_init+0x1c8>)
    e4c0:	0018      	movs	r0, r3
    e4c2:	4b23      	ldr	r3, [pc, #140]	; (e550 <m2m_wifi_init+0x1c0>)
    e4c4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    e4c6:	4b21      	ldr	r3, [pc, #132]	; (e54c <m2m_wifi_init+0x1bc>)
    e4c8:	0018      	movs	r0, r3
    e4ca:	4b21      	ldr	r3, [pc, #132]	; (e550 <m2m_wifi_init+0x1c0>)
    e4cc:	4798      	blx	r3
    e4ce:	4a26      	ldr	r2, [pc, #152]	; (e568 <m2m_wifi_init+0x1d8>)
    e4d0:	4926      	ldr	r1, [pc, #152]	; (e56c <m2m_wifi_init+0x1dc>)
    e4d2:	4b27      	ldr	r3, [pc, #156]	; (e570 <m2m_wifi_init+0x1e0>)
    e4d4:	0018      	movs	r0, r3
    e4d6:	4b1e      	ldr	r3, [pc, #120]	; (e550 <m2m_wifi_init+0x1c0>)
    e4d8:	4798      	blx	r3
    e4da:	4b1f      	ldr	r3, [pc, #124]	; (e558 <m2m_wifi_init+0x1c8>)
    e4dc:	0018      	movs	r0, r3
    e4de:	4b1c      	ldr	r3, [pc, #112]	; (e550 <m2m_wifi_init+0x1c0>)
    e4e0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    e4e2:	2337      	movs	r3, #55	; 0x37
    e4e4:	18fb      	adds	r3, r7, r3
    e4e6:	781b      	ldrb	r3, [r3, #0]
    e4e8:	b25b      	sxtb	r3, r3
    e4ea:	330d      	adds	r3, #13
    e4ec:	d117      	bne.n	e51e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    e4ee:	23e8      	movs	r3, #232	; 0xe8
    e4f0:	33ff      	adds	r3, #255	; 0xff
    e4f2:	001a      	movs	r2, r3
    e4f4:	491f      	ldr	r1, [pc, #124]	; (e574 <m2m_wifi_init+0x1e4>)
    e4f6:	4b20      	ldr	r3, [pc, #128]	; (e578 <m2m_wifi_init+0x1e8>)
    e4f8:	0018      	movs	r0, r3
    e4fa:	4b15      	ldr	r3, [pc, #84]	; (e550 <m2m_wifi_init+0x1c0>)
    e4fc:	4798      	blx	r3
    e4fe:	4b1f      	ldr	r3, [pc, #124]	; (e57c <m2m_wifi_init+0x1ec>)
    e500:	0018      	movs	r0, r3
    e502:	4b13      	ldr	r3, [pc, #76]	; (e550 <m2m_wifi_init+0x1c0>)
    e504:	4798      	blx	r3
    e506:	4b14      	ldr	r3, [pc, #80]	; (e558 <m2m_wifi_init+0x1c8>)
    e508:	0018      	movs	r0, r3
    e50a:	4b11      	ldr	r3, [pc, #68]	; (e550 <m2m_wifi_init+0x1c0>)
    e50c:	4798      	blx	r3
	}

	goto _EXIT0;
    e50e:	e006      	b.n	e51e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    e510:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    e512:	2000      	movs	r0, #0
    e514:	4b1a      	ldr	r3, [pc, #104]	; (e580 <m2m_wifi_init+0x1f0>)
    e516:	4798      	blx	r3
    e518:	e002      	b.n	e520 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    e51a:	46c0      	nop			; (mov r8, r8)
    e51c:	e000      	b.n	e520 <m2m_wifi_init+0x190>
	goto _EXIT0;
    e51e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    e520:	2337      	movs	r3, #55	; 0x37
    e522:	18fb      	adds	r3, r7, r3
    e524:	781b      	ldrb	r3, [r3, #0]
    e526:	b25b      	sxtb	r3, r3
}
    e528:	0018      	movs	r0, r3
    e52a:	46bd      	mov	sp, r7
    e52c:	b00f      	add	sp, #60	; 0x3c
    e52e:	bd90      	pop	{r4, r7, pc}
    e530:	20003d34 	.word	0x20003d34
    e534:	20003d31 	.word	0x20003d31
    e538:	0000f6b5 	.word	0x0000f6b5
    e53c:	0000d439 	.word	0x0000d439
    e540:	0000dfd9 	.word	0x0000dfd9
    e544:	0000df1d 	.word	0x0000df1d
    e548:	0000f4e9 	.word	0x0000f4e9
    e54c:	00024938 	.word	0x00024938
    e550:	0000a4ed 	.word	0x0000a4ed
    e554:	00024adc 	.word	0x00024adc
    e558:	00024964 	.word	0x00024964
    e55c:	00024b04 	.word	0x00024b04
    e560:	00024b20 	.word	0x00024b20
    e564:	00024b44 	.word	0x00024b44
    e568:	00024b5c 	.word	0x00024b5c
    e56c:	00024b68 	.word	0x00024b68
    e570:	00024b74 	.word	0x00024b74
    e574:	00024d10 	.word	0x00024d10
    e578:	00024968 	.word	0x00024968
    e57c:	00024b8c 	.word	0x00024b8c
    e580:	0000f845 	.word	0x0000f845

0000e584 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    e584:	b580      	push	{r7, lr}
    e586:	b082      	sub	sp, #8
    e588:	af00      	add	r7, sp, #0
    e58a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    e58c:	4b03      	ldr	r3, [pc, #12]	; (e59c <m2m_wifi_handle_events+0x18>)
    e58e:	4798      	blx	r3
    e590:	0003      	movs	r3, r0
}
    e592:	0018      	movs	r0, r3
    e594:	46bd      	mov	sp, r7
    e596:	b002      	add	sp, #8
    e598:	bd80      	pop	{r7, pc}
    e59a:	46c0      	nop			; (mov r8, r8)
    e59c:	0000dcfd 	.word	0x0000dcfd

0000e5a0 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    e5a0:	b590      	push	{r4, r7, lr}
    e5a2:	b087      	sub	sp, #28
    e5a4:	af02      	add	r7, sp, #8
    e5a6:	60f8      	str	r0, [r7, #12]
    e5a8:	0008      	movs	r0, r1
    e5aa:	0011      	movs	r1, r2
    e5ac:	607b      	str	r3, [r7, #4]
    e5ae:	230b      	movs	r3, #11
    e5b0:	18fb      	adds	r3, r7, r3
    e5b2:	1c02      	adds	r2, r0, #0
    e5b4:	701a      	strb	r2, [r3, #0]
    e5b6:	230a      	movs	r3, #10
    e5b8:	18fb      	adds	r3, r7, r3
    e5ba:	1c0a      	adds	r2, r1, #0
    e5bc:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    e5be:	687c      	ldr	r4, [r7, #4]
    e5c0:	230a      	movs	r3, #10
    e5c2:	18fb      	adds	r3, r7, r3
    e5c4:	781a      	ldrb	r2, [r3, #0]
    e5c6:	230b      	movs	r3, #11
    e5c8:	18fb      	adds	r3, r7, r3
    e5ca:	7819      	ldrb	r1, [r3, #0]
    e5cc:	68f8      	ldr	r0, [r7, #12]
    e5ce:	2300      	movs	r3, #0
    e5d0:	9301      	str	r3, [sp, #4]
    e5d2:	2320      	movs	r3, #32
    e5d4:	18fb      	adds	r3, r7, r3
    e5d6:	881b      	ldrh	r3, [r3, #0]
    e5d8:	9300      	str	r3, [sp, #0]
    e5da:	0023      	movs	r3, r4
    e5dc:	4c03      	ldr	r4, [pc, #12]	; (e5ec <m2m_wifi_connect+0x4c>)
    e5de:	47a0      	blx	r4
    e5e0:	0003      	movs	r3, r0
}
    e5e2:	0018      	movs	r0, r3
    e5e4:	46bd      	mov	sp, r7
    e5e6:	b005      	add	sp, #20
    e5e8:	bd90      	pop	{r4, r7, pc}
    e5ea:	46c0      	nop			; (mov r8, r8)
    e5ec:	0000e5f1 	.word	0x0000e5f1

0000e5f0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    e5f0:	b5b0      	push	{r4, r5, r7, lr}
    e5f2:	b0aa      	sub	sp, #168	; 0xa8
    e5f4:	af04      	add	r7, sp, #16
    e5f6:	60f8      	str	r0, [r7, #12]
    e5f8:	0008      	movs	r0, r1
    e5fa:	0011      	movs	r1, r2
    e5fc:	607b      	str	r3, [r7, #4]
    e5fe:	230b      	movs	r3, #11
    e600:	18fb      	adds	r3, r7, r3
    e602:	1c02      	adds	r2, r0, #0
    e604:	701a      	strb	r2, [r3, #0]
    e606:	230a      	movs	r3, #10
    e608:	18fb      	adds	r3, r7, r3
    e60a:	1c0a      	adds	r2, r1, #0
    e60c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    e60e:	2397      	movs	r3, #151	; 0x97
    e610:	18fb      	adds	r3, r7, r3
    e612:	2200      	movs	r2, #0
    e614:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    e616:	230a      	movs	r3, #10
    e618:	18fb      	adds	r3, r7, r3
    e61a:	781b      	ldrb	r3, [r3, #0]
    e61c:	2b01      	cmp	r3, #1
    e61e:	d100      	bne.n	e622 <m2m_wifi_connect_sc+0x32>
    e620:	e085      	b.n	e72e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
    e622:	687b      	ldr	r3, [r7, #4]
    e624:	2b00      	cmp	r3, #0
    e626:	d112      	bne.n	e64e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
    e628:	4ad8      	ldr	r2, [pc, #864]	; (e98c <m2m_wifi_connect_sc+0x39c>)
    e62a:	49d9      	ldr	r1, [pc, #868]	; (e990 <m2m_wifi_connect_sc+0x3a0>)
    e62c:	4bd9      	ldr	r3, [pc, #868]	; (e994 <m2m_wifi_connect_sc+0x3a4>)
    e62e:	0018      	movs	r0, r3
    e630:	4bd9      	ldr	r3, [pc, #868]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e632:	4798      	blx	r3
    e634:	4bd9      	ldr	r3, [pc, #868]	; (e99c <m2m_wifi_connect_sc+0x3ac>)
    e636:	0018      	movs	r0, r3
    e638:	4bd7      	ldr	r3, [pc, #860]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e63a:	4798      	blx	r3
    e63c:	4bd8      	ldr	r3, [pc, #864]	; (e9a0 <m2m_wifi_connect_sc+0x3b0>)
    e63e:	0018      	movs	r0, r3
    e640:	4bd5      	ldr	r3, [pc, #852]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e642:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    e644:	2397      	movs	r3, #151	; 0x97
    e646:	18fb      	adds	r3, r7, r3
    e648:	22f4      	movs	r2, #244	; 0xf4
    e64a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    e64c:	e1f9      	b.n	ea42 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    e64e:	230a      	movs	r3, #10
    e650:	18fb      	adds	r3, r7, r3
    e652:	781b      	ldrb	r3, [r3, #0]
    e654:	2b02      	cmp	r3, #2
    e656:	d16a      	bne.n	e72e <m2m_wifi_connect_sc+0x13e>
    e658:	687b      	ldr	r3, [r7, #4]
    e65a:	0018      	movs	r0, r3
    e65c:	4bd1      	ldr	r3, [pc, #836]	; (e9a4 <m2m_wifi_connect_sc+0x3b4>)
    e65e:	4798      	blx	r3
    e660:	0003      	movs	r3, r0
    e662:	2b40      	cmp	r3, #64	; 0x40
    e664:	d163      	bne.n	e72e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
    e666:	2396      	movs	r3, #150	; 0x96
    e668:	18fb      	adds	r3, r7, r3
    e66a:	2200      	movs	r2, #0
    e66c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    e66e:	687b      	ldr	r3, [r7, #4]
    e670:	2290      	movs	r2, #144	; 0x90
    e672:	18ba      	adds	r2, r7, r2
    e674:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    e676:	e055      	b.n	e724 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    e678:	2396      	movs	r3, #150	; 0x96
    e67a:	18fb      	adds	r3, r7, r3
    e67c:	781b      	ldrb	r3, [r3, #0]
    e67e:	2290      	movs	r2, #144	; 0x90
    e680:	18ba      	adds	r2, r7, r2
    e682:	6812      	ldr	r2, [r2, #0]
    e684:	18d3      	adds	r3, r2, r3
    e686:	781b      	ldrb	r3, [r3, #0]
    e688:	2b2f      	cmp	r3, #47	; 0x2f
    e68a:	d931      	bls.n	e6f0 <m2m_wifi_connect_sc+0x100>
    e68c:	2396      	movs	r3, #150	; 0x96
    e68e:	18fb      	adds	r3, r7, r3
    e690:	781b      	ldrb	r3, [r3, #0]
    e692:	2290      	movs	r2, #144	; 0x90
    e694:	18ba      	adds	r2, r7, r2
    e696:	6812      	ldr	r2, [r2, #0]
    e698:	18d3      	adds	r3, r2, r3
    e69a:	781b      	ldrb	r3, [r3, #0]
    e69c:	2b39      	cmp	r3, #57	; 0x39
    e69e:	d909      	bls.n	e6b4 <m2m_wifi_connect_sc+0xc4>
    e6a0:	2396      	movs	r3, #150	; 0x96
    e6a2:	18fb      	adds	r3, r7, r3
    e6a4:	781b      	ldrb	r3, [r3, #0]
    e6a6:	2290      	movs	r2, #144	; 0x90
    e6a8:	18ba      	adds	r2, r7, r2
    e6aa:	6812      	ldr	r2, [r2, #0]
    e6ac:	18d3      	adds	r3, r2, r3
    e6ae:	781b      	ldrb	r3, [r3, #0]
    e6b0:	2b40      	cmp	r3, #64	; 0x40
    e6b2:	d91d      	bls.n	e6f0 <m2m_wifi_connect_sc+0x100>
    e6b4:	2396      	movs	r3, #150	; 0x96
    e6b6:	18fb      	adds	r3, r7, r3
    e6b8:	781b      	ldrb	r3, [r3, #0]
    e6ba:	2290      	movs	r2, #144	; 0x90
    e6bc:	18ba      	adds	r2, r7, r2
    e6be:	6812      	ldr	r2, [r2, #0]
    e6c0:	18d3      	adds	r3, r2, r3
    e6c2:	781b      	ldrb	r3, [r3, #0]
    e6c4:	2b46      	cmp	r3, #70	; 0x46
    e6c6:	d909      	bls.n	e6dc <m2m_wifi_connect_sc+0xec>
    e6c8:	2396      	movs	r3, #150	; 0x96
    e6ca:	18fb      	adds	r3, r7, r3
    e6cc:	781b      	ldrb	r3, [r3, #0]
    e6ce:	2290      	movs	r2, #144	; 0x90
    e6d0:	18ba      	adds	r2, r7, r2
    e6d2:	6812      	ldr	r2, [r2, #0]
    e6d4:	18d3      	adds	r3, r2, r3
    e6d6:	781b      	ldrb	r3, [r3, #0]
    e6d8:	2b60      	cmp	r3, #96	; 0x60
    e6da:	d909      	bls.n	e6f0 <m2m_wifi_connect_sc+0x100>
    e6dc:	2396      	movs	r3, #150	; 0x96
    e6de:	18fb      	adds	r3, r7, r3
    e6e0:	781b      	ldrb	r3, [r3, #0]
    e6e2:	2290      	movs	r2, #144	; 0x90
    e6e4:	18ba      	adds	r2, r7, r2
    e6e6:	6812      	ldr	r2, [r2, #0]
    e6e8:	18d3      	adds	r3, r2, r3
    e6ea:	781b      	ldrb	r3, [r3, #0]
    e6ec:	2b66      	cmp	r3, #102	; 0x66
    e6ee:	d912      	bls.n	e716 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
    e6f0:	4aad      	ldr	r2, [pc, #692]	; (e9a8 <m2m_wifi_connect_sc+0x3b8>)
    e6f2:	49a7      	ldr	r1, [pc, #668]	; (e990 <m2m_wifi_connect_sc+0x3a0>)
    e6f4:	4ba7      	ldr	r3, [pc, #668]	; (e994 <m2m_wifi_connect_sc+0x3a4>)
    e6f6:	0018      	movs	r0, r3
    e6f8:	4ba7      	ldr	r3, [pc, #668]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e6fa:	4798      	blx	r3
    e6fc:	4bab      	ldr	r3, [pc, #684]	; (e9ac <m2m_wifi_connect_sc+0x3bc>)
    e6fe:	0018      	movs	r0, r3
    e700:	4ba5      	ldr	r3, [pc, #660]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e702:	4798      	blx	r3
    e704:	4ba6      	ldr	r3, [pc, #664]	; (e9a0 <m2m_wifi_connect_sc+0x3b0>)
    e706:	0018      	movs	r0, r3
    e708:	4ba3      	ldr	r3, [pc, #652]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e70a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    e70c:	2397      	movs	r3, #151	; 0x97
    e70e:	18fb      	adds	r3, r7, r3
    e710:	22f4      	movs	r2, #244	; 0xf4
    e712:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    e714:	e195      	b.n	ea42 <m2m_wifi_connect_sc+0x452>
				}
				i++;
    e716:	2396      	movs	r3, #150	; 0x96
    e718:	18fb      	adds	r3, r7, r3
    e71a:	781a      	ldrb	r2, [r3, #0]
    e71c:	2396      	movs	r3, #150	; 0x96
    e71e:	18fb      	adds	r3, r7, r3
    e720:	3201      	adds	r2, #1
    e722:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    e724:	2396      	movs	r3, #150	; 0x96
    e726:	18fb      	adds	r3, r7, r3
    e728:	781b      	ldrb	r3, [r3, #0]
    e72a:	2b3f      	cmp	r3, #63	; 0x3f
    e72c:	d9a4      	bls.n	e678 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    e72e:	230b      	movs	r3, #11
    e730:	18fb      	adds	r3, r7, r3
    e732:	781b      	ldrb	r3, [r3, #0]
    e734:	2b00      	cmp	r3, #0
    e736:	d004      	beq.n	e742 <m2m_wifi_connect_sc+0x152>
    e738:	230b      	movs	r3, #11
    e73a:	18fb      	adds	r3, r7, r3
    e73c:	781b      	ldrb	r3, [r3, #0]
    e73e:	2b20      	cmp	r3, #32
    e740:	d913      	bls.n	e76a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
    e742:	238c      	movs	r3, #140	; 0x8c
    e744:	009a      	lsls	r2, r3, #2
    e746:	4992      	ldr	r1, [pc, #584]	; (e990 <m2m_wifi_connect_sc+0x3a0>)
    e748:	4b92      	ldr	r3, [pc, #584]	; (e994 <m2m_wifi_connect_sc+0x3a4>)
    e74a:	0018      	movs	r0, r3
    e74c:	4b92      	ldr	r3, [pc, #584]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e74e:	4798      	blx	r3
    e750:	4b97      	ldr	r3, [pc, #604]	; (e9b0 <m2m_wifi_connect_sc+0x3c0>)
    e752:	0018      	movs	r0, r3
    e754:	4b90      	ldr	r3, [pc, #576]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e756:	4798      	blx	r3
    e758:	4b91      	ldr	r3, [pc, #580]	; (e9a0 <m2m_wifi_connect_sc+0x3b0>)
    e75a:	0018      	movs	r0, r3
    e75c:	4b8e      	ldr	r3, [pc, #568]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e75e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    e760:	2397      	movs	r3, #151	; 0x97
    e762:	18fb      	adds	r3, r7, r3
    e764:	22f4      	movs	r2, #244	; 0xf4
    e766:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    e768:	e16b      	b.n	ea42 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    e76a:	23a8      	movs	r3, #168	; 0xa8
    e76c:	18fb      	adds	r3, r7, r3
    e76e:	881b      	ldrh	r3, [r3, #0]
    e770:	2b00      	cmp	r3, #0
    e772:	d004      	beq.n	e77e <m2m_wifi_connect_sc+0x18e>
    e774:	23a8      	movs	r3, #168	; 0xa8
    e776:	18fb      	adds	r3, r7, r3
    e778:	881b      	ldrh	r3, [r3, #0]
    e77a:	2b0e      	cmp	r3, #14
    e77c:	d917      	bls.n	e7ae <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    e77e:	23a8      	movs	r3, #168	; 0xa8
    e780:	18fb      	adds	r3, r7, r3
    e782:	881b      	ldrh	r3, [r3, #0]
    e784:	2bff      	cmp	r3, #255	; 0xff
    e786:	d012      	beq.n	e7ae <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
    e788:	4a8a      	ldr	r2, [pc, #552]	; (e9b4 <m2m_wifi_connect_sc+0x3c4>)
    e78a:	4981      	ldr	r1, [pc, #516]	; (e990 <m2m_wifi_connect_sc+0x3a0>)
    e78c:	4b81      	ldr	r3, [pc, #516]	; (e994 <m2m_wifi_connect_sc+0x3a4>)
    e78e:	0018      	movs	r0, r3
    e790:	4b81      	ldr	r3, [pc, #516]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e792:	4798      	blx	r3
    e794:	4b88      	ldr	r3, [pc, #544]	; (e9b8 <m2m_wifi_connect_sc+0x3c8>)
    e796:	0018      	movs	r0, r3
    e798:	4b7f      	ldr	r3, [pc, #508]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e79a:	4798      	blx	r3
    e79c:	4b80      	ldr	r3, [pc, #512]	; (e9a0 <m2m_wifi_connect_sc+0x3b0>)
    e79e:	0018      	movs	r0, r3
    e7a0:	4b7d      	ldr	r3, [pc, #500]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e7a2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    e7a4:	2397      	movs	r3, #151	; 0x97
    e7a6:	18fb      	adds	r3, r7, r3
    e7a8:	22f4      	movs	r2, #244	; 0xf4
    e7aa:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    e7ac:	e149      	b.n	ea42 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    e7ae:	230b      	movs	r3, #11
    e7b0:	18fb      	adds	r3, r7, r3
    e7b2:	781a      	ldrb	r2, [r3, #0]
    e7b4:	68f9      	ldr	r1, [r7, #12]
    e7b6:	2314      	movs	r3, #20
    e7b8:	18fb      	adds	r3, r7, r3
    e7ba:	3346      	adds	r3, #70	; 0x46
    e7bc:	0018      	movs	r0, r3
    e7be:	4b7f      	ldr	r3, [pc, #508]	; (e9bc <m2m_wifi_connect_sc+0x3cc>)
    e7c0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    e7c2:	230b      	movs	r3, #11
    e7c4:	18fb      	adds	r3, r7, r3
    e7c6:	781b      	ldrb	r3, [r3, #0]
    e7c8:	2214      	movs	r2, #20
    e7ca:	18ba      	adds	r2, r7, r2
    e7cc:	2146      	movs	r1, #70	; 0x46
    e7ce:	18d3      	adds	r3, r2, r3
    e7d0:	185b      	adds	r3, r3, r1
    e7d2:	2200      	movs	r2, #0
    e7d4:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    e7d6:	2314      	movs	r3, #20
    e7d8:	18fb      	adds	r3, r7, r3
    e7da:	22a8      	movs	r2, #168	; 0xa8
    e7dc:	18ba      	adds	r2, r7, r2
    e7de:	2144      	movs	r1, #68	; 0x44
    e7e0:	8812      	ldrh	r2, [r2, #0]
    e7e2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    e7e4:	23ac      	movs	r3, #172	; 0xac
    e7e6:	18fb      	adds	r3, r7, r3
    e7e8:	781b      	ldrb	r3, [r3, #0]
    e7ea:	1e5a      	subs	r2, r3, #1
    e7ec:	4193      	sbcs	r3, r2
    e7ee:	b2db      	uxtb	r3, r3
    e7f0:	0019      	movs	r1, r3
    e7f2:	2314      	movs	r3, #20
    e7f4:	18fb      	adds	r3, r7, r3
    e7f6:	2267      	movs	r2, #103	; 0x67
    e7f8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    e7fa:	2314      	movs	r3, #20
    e7fc:	18fb      	adds	r3, r7, r3
    e7fe:	228c      	movs	r2, #140	; 0x8c
    e800:	18ba      	adds	r2, r7, r2
    e802:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    e804:	238c      	movs	r3, #140	; 0x8c
    e806:	18fb      	adds	r3, r7, r3
    e808:	681b      	ldr	r3, [r3, #0]
    e80a:	220a      	movs	r2, #10
    e80c:	18ba      	adds	r2, r7, r2
    e80e:	2141      	movs	r1, #65	; 0x41
    e810:	7812      	ldrb	r2, [r2, #0]
    e812:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    e814:	230a      	movs	r3, #10
    e816:	18fb      	adds	r3, r7, r3
    e818:	781b      	ldrb	r3, [r3, #0]
    e81a:	2b03      	cmp	r3, #3
    e81c:	d000      	beq.n	e820 <m2m_wifi_connect_sc+0x230>
    e81e:	e07d      	b.n	e91c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    e820:	687b      	ldr	r3, [r7, #4]
    e822:	2288      	movs	r2, #136	; 0x88
    e824:	18ba      	adds	r2, r7, r2
    e826:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    e828:	238c      	movs	r3, #140	; 0x8c
    e82a:	18fb      	adds	r3, r7, r3
    e82c:	681b      	ldr	r3, [r3, #0]
    e82e:	2284      	movs	r2, #132	; 0x84
    e830:	18ba      	adds	r2, r7, r2
    e832:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    e834:	2388      	movs	r3, #136	; 0x88
    e836:	18fb      	adds	r3, r7, r3
    e838:	681b      	ldr	r3, [r3, #0]
    e83a:	781b      	ldrb	r3, [r3, #0]
    e83c:	3b01      	subs	r3, #1
    e83e:	b2da      	uxtb	r2, r3
    e840:	2384      	movs	r3, #132	; 0x84
    e842:	18fb      	adds	r3, r7, r3
    e844:	681b      	ldr	r3, [r3, #0]
    e846:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    e848:	2384      	movs	r3, #132	; 0x84
    e84a:	18fb      	adds	r3, r7, r3
    e84c:	681b      	ldr	r3, [r3, #0]
    e84e:	781b      	ldrb	r3, [r3, #0]
    e850:	2b03      	cmp	r3, #3
    e852:	d919      	bls.n	e888 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    e854:	2394      	movs	r3, #148	; 0x94
    e856:	009a      	lsls	r2, r3, #2
    e858:	494d      	ldr	r1, [pc, #308]	; (e990 <m2m_wifi_connect_sc+0x3a0>)
    e85a:	4b4e      	ldr	r3, [pc, #312]	; (e994 <m2m_wifi_connect_sc+0x3a4>)
    e85c:	0018      	movs	r0, r3
    e85e:	4b4e      	ldr	r3, [pc, #312]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e860:	4798      	blx	r3
    e862:	2384      	movs	r3, #132	; 0x84
    e864:	18fb      	adds	r3, r7, r3
    e866:	681b      	ldr	r3, [r3, #0]
    e868:	781b      	ldrb	r3, [r3, #0]
    e86a:	001a      	movs	r2, r3
    e86c:	4b54      	ldr	r3, [pc, #336]	; (e9c0 <m2m_wifi_connect_sc+0x3d0>)
    e86e:	0011      	movs	r1, r2
    e870:	0018      	movs	r0, r3
    e872:	4b49      	ldr	r3, [pc, #292]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e874:	4798      	blx	r3
    e876:	4b4a      	ldr	r3, [pc, #296]	; (e9a0 <m2m_wifi_connect_sc+0x3b0>)
    e878:	0018      	movs	r0, r3
    e87a:	4b47      	ldr	r3, [pc, #284]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e87c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    e87e:	2397      	movs	r3, #151	; 0x97
    e880:	18fb      	adds	r3, r7, r3
    e882:	22f4      	movs	r2, #244	; 0xf4
    e884:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    e886:	e0dc      	b.n	ea42 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    e888:	2388      	movs	r3, #136	; 0x88
    e88a:	18fb      	adds	r3, r7, r3
    e88c:	681b      	ldr	r3, [r3, #0]
    e88e:	785b      	ldrb	r3, [r3, #1]
    e890:	3b01      	subs	r3, #1
    e892:	b2da      	uxtb	r2, r3
    e894:	2384      	movs	r3, #132	; 0x84
    e896:	18fb      	adds	r3, r7, r3
    e898:	681b      	ldr	r3, [r3, #0]
    e89a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    e89c:	2384      	movs	r3, #132	; 0x84
    e89e:	18fb      	adds	r3, r7, r3
    e8a0:	681b      	ldr	r3, [r3, #0]
    e8a2:	785b      	ldrb	r3, [r3, #1]
    e8a4:	2b0a      	cmp	r3, #10
    e8a6:	d01e      	beq.n	e8e6 <m2m_wifi_connect_sc+0x2f6>
    e8a8:	2384      	movs	r3, #132	; 0x84
    e8aa:	18fb      	adds	r3, r7, r3
    e8ac:	681b      	ldr	r3, [r3, #0]
    e8ae:	785b      	ldrb	r3, [r3, #1]
    e8b0:	2b1a      	cmp	r3, #26
    e8b2:	d018      	beq.n	e8e6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    e8b4:	4a43      	ldr	r2, [pc, #268]	; (e9c4 <m2m_wifi_connect_sc+0x3d4>)
    e8b6:	4936      	ldr	r1, [pc, #216]	; (e990 <m2m_wifi_connect_sc+0x3a0>)
    e8b8:	4b36      	ldr	r3, [pc, #216]	; (e994 <m2m_wifi_connect_sc+0x3a4>)
    e8ba:	0018      	movs	r0, r3
    e8bc:	4b36      	ldr	r3, [pc, #216]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e8be:	4798      	blx	r3
    e8c0:	2384      	movs	r3, #132	; 0x84
    e8c2:	18fb      	adds	r3, r7, r3
    e8c4:	681b      	ldr	r3, [r3, #0]
    e8c6:	785b      	ldrb	r3, [r3, #1]
    e8c8:	001a      	movs	r2, r3
    e8ca:	4b3f      	ldr	r3, [pc, #252]	; (e9c8 <m2m_wifi_connect_sc+0x3d8>)
    e8cc:	0011      	movs	r1, r2
    e8ce:	0018      	movs	r0, r3
    e8d0:	4b31      	ldr	r3, [pc, #196]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e8d2:	4798      	blx	r3
    e8d4:	4b32      	ldr	r3, [pc, #200]	; (e9a0 <m2m_wifi_connect_sc+0x3b0>)
    e8d6:	0018      	movs	r0, r3
    e8d8:	4b2f      	ldr	r3, [pc, #188]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e8da:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    e8dc:	2397      	movs	r3, #151	; 0x97
    e8de:	18fb      	adds	r3, r7, r3
    e8e0:	22f4      	movs	r2, #244	; 0xf4
    e8e2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    e8e4:	e0ad      	b.n	ea42 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    e8e6:	2384      	movs	r3, #132	; 0x84
    e8e8:	18fb      	adds	r3, r7, r3
    e8ea:	681b      	ldr	r3, [r3, #0]
    e8ec:	1c98      	adds	r0, r3, #2
    e8ee:	2388      	movs	r3, #136	; 0x88
    e8f0:	18fb      	adds	r3, r7, r3
    e8f2:	681b      	ldr	r3, [r3, #0]
    e8f4:	1c99      	adds	r1, r3, #2
    e8f6:	2388      	movs	r3, #136	; 0x88
    e8f8:	18fb      	adds	r3, r7, r3
    e8fa:	681b      	ldr	r3, [r3, #0]
    e8fc:	785b      	ldrb	r3, [r3, #1]
    e8fe:	001a      	movs	r2, r3
    e900:	4b2e      	ldr	r3, [pc, #184]	; (e9bc <m2m_wifi_connect_sc+0x3cc>)
    e902:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    e904:	2388      	movs	r3, #136	; 0x88
    e906:	18fb      	adds	r3, r7, r3
    e908:	681b      	ldr	r3, [r3, #0]
    e90a:	785b      	ldrb	r3, [r3, #1]
    e90c:	001a      	movs	r2, r3
    e90e:	2384      	movs	r3, #132	; 0x84
    e910:	18fb      	adds	r3, r7, r3
    e912:	681b      	ldr	r3, [r3, #0]
    e914:	189b      	adds	r3, r3, r2
    e916:	2200      	movs	r2, #0
    e918:	709a      	strb	r2, [r3, #2]
    e91a:	e081      	b.n	ea20 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    e91c:	230a      	movs	r3, #10
    e91e:	18fb      	adds	r3, r7, r3
    e920:	781b      	ldrb	r3, [r3, #0]
    e922:	2b02      	cmp	r3, #2
    e924:	d156      	bne.n	e9d4 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    e926:	2382      	movs	r3, #130	; 0x82
    e928:	18fc      	adds	r4, r7, r3
    e92a:	687b      	ldr	r3, [r7, #4]
    e92c:	0018      	movs	r0, r3
    e92e:	4b1d      	ldr	r3, [pc, #116]	; (e9a4 <m2m_wifi_connect_sc+0x3b4>)
    e930:	4798      	blx	r3
    e932:	0003      	movs	r3, r0
    e934:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    e936:	2382      	movs	r3, #130	; 0x82
    e938:	18fb      	adds	r3, r7, r3
    e93a:	881b      	ldrh	r3, [r3, #0]
    e93c:	2b00      	cmp	r3, #0
    e93e:	d004      	beq.n	e94a <m2m_wifi_connect_sc+0x35a>
    e940:	2382      	movs	r3, #130	; 0x82
    e942:	18fb      	adds	r3, r7, r3
    e944:	881b      	ldrh	r3, [r3, #0]
    e946:	2b40      	cmp	r3, #64	; 0x40
    e948:	d912      	bls.n	e970 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
    e94a:	4a20      	ldr	r2, [pc, #128]	; (e9cc <m2m_wifi_connect_sc+0x3dc>)
    e94c:	4910      	ldr	r1, [pc, #64]	; (e990 <m2m_wifi_connect_sc+0x3a0>)
    e94e:	4b11      	ldr	r3, [pc, #68]	; (e994 <m2m_wifi_connect_sc+0x3a4>)
    e950:	0018      	movs	r0, r3
    e952:	4b11      	ldr	r3, [pc, #68]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e954:	4798      	blx	r3
    e956:	4b1e      	ldr	r3, [pc, #120]	; (e9d0 <m2m_wifi_connect_sc+0x3e0>)
    e958:	0018      	movs	r0, r3
    e95a:	4b0f      	ldr	r3, [pc, #60]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e95c:	4798      	blx	r3
    e95e:	4b10      	ldr	r3, [pc, #64]	; (e9a0 <m2m_wifi_connect_sc+0x3b0>)
    e960:	0018      	movs	r0, r3
    e962:	4b0d      	ldr	r3, [pc, #52]	; (e998 <m2m_wifi_connect_sc+0x3a8>)
    e964:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    e966:	2397      	movs	r3, #151	; 0x97
    e968:	18fb      	adds	r3, r7, r3
    e96a:	22f4      	movs	r2, #244	; 0xf4
    e96c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    e96e:	e068      	b.n	ea42 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    e970:	238c      	movs	r3, #140	; 0x8c
    e972:	18fb      	adds	r3, r7, r3
    e974:	6818      	ldr	r0, [r3, #0]
    e976:	2382      	movs	r3, #130	; 0x82
    e978:	18fb      	adds	r3, r7, r3
    e97a:	881b      	ldrh	r3, [r3, #0]
    e97c:	3301      	adds	r3, #1
    e97e:	001a      	movs	r2, r3
    e980:	687b      	ldr	r3, [r7, #4]
    e982:	0019      	movs	r1, r3
    e984:	4b0d      	ldr	r3, [pc, #52]	; (e9bc <m2m_wifi_connect_sc+0x3cc>)
    e986:	4798      	blx	r3
    e988:	e04a      	b.n	ea20 <m2m_wifi_connect_sc+0x430>
    e98a:	46c0      	nop			; (mov r8, r8)
    e98c:	0000021a 	.word	0x0000021a
    e990:	00024d20 	.word	0x00024d20
    e994:	00024968 	.word	0x00024968
    e998:	0000a4ed 	.word	0x0000a4ed
    e99c:	00024ba8 	.word	0x00024ba8
    e9a0:	00024964 	.word	0x00024964
    e9a4:	0000d25f 	.word	0x0000d25f
    e9a8:	00000226 	.word	0x00000226
    e9ac:	00024bbc 	.word	0x00024bbc
    e9b0:	00024bcc 	.word	0x00024bcc
    e9b4:	00000239 	.word	0x00000239
    e9b8:	00024be0 	.word	0x00024be0
    e9bc:	0000d1e5 	.word	0x0000d1e5
    e9c0:	00024bec 	.word	0x00024bec
    e9c4:	00000257 	.word	0x00000257
    e9c8:	00024c08 	.word	0x00024c08
    e9cc:	00000266 	.word	0x00000266
    e9d0:	00024c24 	.word	0x00024c24
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    e9d4:	230a      	movs	r3, #10
    e9d6:	18fb      	adds	r3, r7, r3
    e9d8:	781b      	ldrb	r3, [r3, #0]
    e9da:	2b04      	cmp	r3, #4
    e9dc:	d108      	bne.n	e9f0 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    e9de:	238c      	movs	r3, #140	; 0x8c
    e9e0:	18fb      	adds	r3, r7, r3
    e9e2:	681b      	ldr	r3, [r3, #0]
    e9e4:	6879      	ldr	r1, [r7, #4]
    e9e6:	223e      	movs	r2, #62	; 0x3e
    e9e8:	0018      	movs	r0, r3
    e9ea:	4b1a      	ldr	r3, [pc, #104]	; (ea54 <m2m_wifi_connect_sc+0x464>)
    e9ec:	4798      	blx	r3
    e9ee:	e017      	b.n	ea20 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    e9f0:	230a      	movs	r3, #10
    e9f2:	18fb      	adds	r3, r7, r3
    e9f4:	781b      	ldrb	r3, [r3, #0]
    e9f6:	2b01      	cmp	r3, #1
    e9f8:	d012      	beq.n	ea20 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    e9fa:	4a17      	ldr	r2, [pc, #92]	; (ea58 <m2m_wifi_connect_sc+0x468>)
    e9fc:	4917      	ldr	r1, [pc, #92]	; (ea5c <m2m_wifi_connect_sc+0x46c>)
    e9fe:	4b18      	ldr	r3, [pc, #96]	; (ea60 <m2m_wifi_connect_sc+0x470>)
    ea00:	0018      	movs	r0, r3
    ea02:	4b18      	ldr	r3, [pc, #96]	; (ea64 <m2m_wifi_connect_sc+0x474>)
    ea04:	4798      	blx	r3
    ea06:	4b18      	ldr	r3, [pc, #96]	; (ea68 <m2m_wifi_connect_sc+0x478>)
    ea08:	0018      	movs	r0, r3
    ea0a:	4b16      	ldr	r3, [pc, #88]	; (ea64 <m2m_wifi_connect_sc+0x474>)
    ea0c:	4798      	blx	r3
    ea0e:	4b17      	ldr	r3, [pc, #92]	; (ea6c <m2m_wifi_connect_sc+0x47c>)
    ea10:	0018      	movs	r0, r3
    ea12:	4b14      	ldr	r3, [pc, #80]	; (ea64 <m2m_wifi_connect_sc+0x474>)
    ea14:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    ea16:	2397      	movs	r3, #151	; 0x97
    ea18:	18fb      	adds	r3, r7, r3
    ea1a:	22f4      	movs	r2, #244	; 0xf4
    ea1c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    ea1e:	e010      	b.n	ea42 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    ea20:	2397      	movs	r3, #151	; 0x97
    ea22:	18fc      	adds	r4, r7, r3
    ea24:	2314      	movs	r3, #20
    ea26:	18fa      	adds	r2, r7, r3
    ea28:	2300      	movs	r3, #0
    ea2a:	9302      	str	r3, [sp, #8]
    ea2c:	2300      	movs	r3, #0
    ea2e:	9301      	str	r3, [sp, #4]
    ea30:	2300      	movs	r3, #0
    ea32:	9300      	str	r3, [sp, #0]
    ea34:	236c      	movs	r3, #108	; 0x6c
    ea36:	2128      	movs	r1, #40	; 0x28
    ea38:	2001      	movs	r0, #1
    ea3a:	4d0d      	ldr	r5, [pc, #52]	; (ea70 <m2m_wifi_connect_sc+0x480>)
    ea3c:	47a8      	blx	r5
    ea3e:	0003      	movs	r3, r0
    ea40:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    ea42:	2397      	movs	r3, #151	; 0x97
    ea44:	18fb      	adds	r3, r7, r3
    ea46:	781b      	ldrb	r3, [r3, #0]
    ea48:	b25b      	sxtb	r3, r3
}
    ea4a:	0018      	movs	r0, r3
    ea4c:	46bd      	mov	sp, r7
    ea4e:	b026      	add	sp, #152	; 0x98
    ea50:	bdb0      	pop	{r4, r5, r7, pc}
    ea52:	46c0      	nop			; (mov r8, r8)
    ea54:	0000d1e5 	.word	0x0000d1e5
    ea58:	00000276 	.word	0x00000276
    ea5c:	00024d20 	.word	0x00024d20
    ea60:	00024968 	.word	0x00024968
    ea64:	0000a4ed 	.word	0x0000a4ed
    ea68:	00024c40 	.word	0x00024c40
    ea6c:	00024964 	.word	0x00024964
    ea70:	0000d481 	.word	0x0000d481

0000ea74 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    ea74:	b580      	push	{r7, lr}
    ea76:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    ea78:	2300      	movs	r3, #0
}
    ea7a:	0018      	movs	r0, r3
    ea7c:	46bd      	mov	sp, r7
    ea7e:	bd80      	pop	{r7, pc}

0000ea80 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    ea80:	b590      	push	{r4, r7, lr}
    ea82:	b087      	sub	sp, #28
    ea84:	af00      	add	r7, sp, #0
    ea86:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    ea88:	2317      	movs	r3, #23
    ea8a:	18fb      	adds	r3, r7, r3
    ea8c:	2200      	movs	r2, #0
    ea8e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    ea90:	687b      	ldr	r3, [r7, #4]
    ea92:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    ea94:	693b      	ldr	r3, [r7, #16]
    ea96:	2280      	movs	r2, #128	; 0x80
    ea98:	0052      	lsls	r2, r2, #1
    ea9a:	4313      	orrs	r3, r2
    ea9c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    ea9e:	693a      	ldr	r2, [r7, #16]
    eaa0:	23a5      	movs	r3, #165	; 0xa5
    eaa2:	015b      	lsls	r3, r3, #5
    eaa4:	0011      	movs	r1, r2
    eaa6:	0018      	movs	r0, r3
    eaa8:	4b12      	ldr	r3, [pc, #72]	; (eaf4 <chip_apply_conf+0x74>)
    eaaa:	4798      	blx	r3
		if(val32 != 0) {		
    eaac:	693b      	ldr	r3, [r7, #16]
    eaae:	2b00      	cmp	r3, #0
    eab0:	d018      	beq.n	eae4 <chip_apply_conf+0x64>
			uint32 reg = 0;
    eab2:	2300      	movs	r3, #0
    eab4:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    eab6:	2317      	movs	r3, #23
    eab8:	18fc      	adds	r4, r7, r3
    eaba:	230c      	movs	r3, #12
    eabc:	18fa      	adds	r2, r7, r3
    eabe:	23a5      	movs	r3, #165	; 0xa5
    eac0:	015b      	lsls	r3, r3, #5
    eac2:	0011      	movs	r1, r2
    eac4:	0018      	movs	r0, r3
    eac6:	4b0c      	ldr	r3, [pc, #48]	; (eaf8 <chip_apply_conf+0x78>)
    eac8:	4798      	blx	r3
    eaca:	0003      	movs	r3, r0
    eacc:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    eace:	2317      	movs	r3, #23
    ead0:	18fb      	adds	r3, r7, r3
    ead2:	781b      	ldrb	r3, [r3, #0]
    ead4:	b25b      	sxtb	r3, r3
    ead6:	2b00      	cmp	r3, #0
    ead8:	d1e1      	bne.n	ea9e <chip_apply_conf+0x1e>
				if(reg == val32)
    eada:	68fa      	ldr	r2, [r7, #12]
    eadc:	693b      	ldr	r3, [r7, #16]
    eade:	429a      	cmp	r2, r3
    eae0:	d002      	beq.n	eae8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    eae2:	e7dc      	b.n	ea9e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    eae4:	46c0      	nop			; (mov r8, r8)
    eae6:	e000      	b.n	eaea <chip_apply_conf+0x6a>
					break;
    eae8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    eaea:	2300      	movs	r3, #0
}
    eaec:	0018      	movs	r0, r3
    eaee:	46bd      	mov	sp, r7
    eaf0:	b007      	add	sp, #28
    eaf2:	bd90      	pop	{r4, r7, pc}
    eaf4:	0000f2d5 	.word	0x0000f2d5
    eaf8:	0000f2b1 	.word	0x0000f2b1

0000eafc <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    eafc:	b590      	push	{r4, r7, lr}
    eafe:	b083      	sub	sp, #12
    eb00:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    eb02:	2300      	movs	r3, #0
    eb04:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    eb06:	1dfb      	adds	r3, r7, #7
    eb08:	2200      	movs	r2, #0
    eb0a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    eb0c:	1dfc      	adds	r4, r7, #7
    eb0e:	003b      	movs	r3, r7
    eb10:	4a24      	ldr	r2, [pc, #144]	; (eba4 <enable_interrupts+0xa8>)
    eb12:	0019      	movs	r1, r3
    eb14:	0010      	movs	r0, r2
    eb16:	4b24      	ldr	r3, [pc, #144]	; (eba8 <enable_interrupts+0xac>)
    eb18:	4798      	blx	r3
    eb1a:	0003      	movs	r3, r0
    eb1c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    eb1e:	1dfb      	adds	r3, r7, #7
    eb20:	781b      	ldrb	r3, [r3, #0]
    eb22:	b25b      	sxtb	r3, r3
    eb24:	2b00      	cmp	r3, #0
    eb26:	d131      	bne.n	eb8c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    eb28:	683b      	ldr	r3, [r7, #0]
    eb2a:	2280      	movs	r2, #128	; 0x80
    eb2c:	0052      	lsls	r2, r2, #1
    eb2e:	4313      	orrs	r3, r2
    eb30:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    eb32:	683b      	ldr	r3, [r7, #0]
    eb34:	1dfc      	adds	r4, r7, #7
    eb36:	4a1b      	ldr	r2, [pc, #108]	; (eba4 <enable_interrupts+0xa8>)
    eb38:	0019      	movs	r1, r3
    eb3a:	0010      	movs	r0, r2
    eb3c:	4b1b      	ldr	r3, [pc, #108]	; (ebac <enable_interrupts+0xb0>)
    eb3e:	4798      	blx	r3
    eb40:	0003      	movs	r3, r0
    eb42:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    eb44:	1dfb      	adds	r3, r7, #7
    eb46:	781b      	ldrb	r3, [r3, #0]
    eb48:	b25b      	sxtb	r3, r3
    eb4a:	2b00      	cmp	r3, #0
    eb4c:	d120      	bne.n	eb90 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    eb4e:	1dfc      	adds	r4, r7, #7
    eb50:	003a      	movs	r2, r7
    eb52:	23d0      	movs	r3, #208	; 0xd0
    eb54:	015b      	lsls	r3, r3, #5
    eb56:	0011      	movs	r1, r2
    eb58:	0018      	movs	r0, r3
    eb5a:	4b13      	ldr	r3, [pc, #76]	; (eba8 <enable_interrupts+0xac>)
    eb5c:	4798      	blx	r3
    eb5e:	0003      	movs	r3, r0
    eb60:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    eb62:	1dfb      	adds	r3, r7, #7
    eb64:	781b      	ldrb	r3, [r3, #0]
    eb66:	b25b      	sxtb	r3, r3
    eb68:	2b00      	cmp	r3, #0
    eb6a:	d113      	bne.n	eb94 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    eb6c:	683b      	ldr	r3, [r7, #0]
    eb6e:	2280      	movs	r2, #128	; 0x80
    eb70:	0252      	lsls	r2, r2, #9
    eb72:	4313      	orrs	r3, r2
    eb74:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    eb76:	683a      	ldr	r2, [r7, #0]
    eb78:	1dfc      	adds	r4, r7, #7
    eb7a:	23d0      	movs	r3, #208	; 0xd0
    eb7c:	015b      	lsls	r3, r3, #5
    eb7e:	0011      	movs	r1, r2
    eb80:	0018      	movs	r0, r3
    eb82:	4b0a      	ldr	r3, [pc, #40]	; (ebac <enable_interrupts+0xb0>)
    eb84:	4798      	blx	r3
    eb86:	0003      	movs	r3, r0
    eb88:	7023      	strb	r3, [r4, #0]
    eb8a:	e004      	b.n	eb96 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    eb8c:	46c0      	nop			; (mov r8, r8)
    eb8e:	e002      	b.n	eb96 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    eb90:	46c0      	nop			; (mov r8, r8)
    eb92:	e000      	b.n	eb96 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    eb94:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    eb96:	1dfb      	adds	r3, r7, #7
    eb98:	781b      	ldrb	r3, [r3, #0]
    eb9a:	b25b      	sxtb	r3, r3
}
    eb9c:	0018      	movs	r0, r3
    eb9e:	46bd      	mov	sp, r7
    eba0:	b003      	add	sp, #12
    eba2:	bd90      	pop	{r4, r7, pc}
    eba4:	00001408 	.word	0x00001408
    eba8:	0000f2b1 	.word	0x0000f2b1
    ebac:	0000f2d5 	.word	0x0000f2d5

0000ebb0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    ebb0:	b580      	push	{r7, lr}
    ebb2:	b082      	sub	sp, #8
    ebb4:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    ebb6:	4b32      	ldr	r3, [pc, #200]	; (ec80 <nmi_get_chipid+0xd0>)
    ebb8:	681b      	ldr	r3, [r3, #0]
    ebba:	2b00      	cmp	r3, #0
    ebbc:	d159      	bne.n	ec72 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    ebbe:	4a30      	ldr	r2, [pc, #192]	; (ec80 <nmi_get_chipid+0xd0>)
    ebc0:	2380      	movs	r3, #128	; 0x80
    ebc2:	015b      	lsls	r3, r3, #5
    ebc4:	0011      	movs	r1, r2
    ebc6:	0018      	movs	r0, r3
    ebc8:	4b2e      	ldr	r3, [pc, #184]	; (ec84 <nmi_get_chipid+0xd4>)
    ebca:	4798      	blx	r3
    ebcc:	1e03      	subs	r3, r0, #0
    ebce:	d004      	beq.n	ebda <nmi_get_chipid+0x2a>
			chipid = 0;
    ebd0:	4b2b      	ldr	r3, [pc, #172]	; (ec80 <nmi_get_chipid+0xd0>)
    ebd2:	2200      	movs	r2, #0
    ebd4:	601a      	str	r2, [r3, #0]
			return 0;
    ebd6:	2300      	movs	r3, #0
    ebd8:	e04d      	b.n	ec76 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    ebda:	1d3b      	adds	r3, r7, #4
    ebdc:	4a2a      	ldr	r2, [pc, #168]	; (ec88 <nmi_get_chipid+0xd8>)
    ebde:	0019      	movs	r1, r3
    ebe0:	0010      	movs	r0, r2
    ebe2:	4b28      	ldr	r3, [pc, #160]	; (ec84 <nmi_get_chipid+0xd4>)
    ebe4:	4798      	blx	r3
    ebe6:	1e03      	subs	r3, r0, #0
    ebe8:	d004      	beq.n	ebf4 <nmi_get_chipid+0x44>
			chipid = 0;
    ebea:	4b25      	ldr	r3, [pc, #148]	; (ec80 <nmi_get_chipid+0xd0>)
    ebec:	2200      	movs	r2, #0
    ebee:	601a      	str	r2, [r3, #0]
			return 0;
    ebf0:	2300      	movs	r3, #0
    ebf2:	e040      	b.n	ec76 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    ebf4:	4b22      	ldr	r3, [pc, #136]	; (ec80 <nmi_get_chipid+0xd0>)
    ebf6:	681b      	ldr	r3, [r3, #0]
    ebf8:	4a24      	ldr	r2, [pc, #144]	; (ec8c <nmi_get_chipid+0xdc>)
    ebfa:	4293      	cmp	r3, r2
    ebfc:	d106      	bne.n	ec0c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    ebfe:	687b      	ldr	r3, [r7, #4]
    ec00:	2b01      	cmp	r3, #1
    ec02:	d029      	beq.n	ec58 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    ec04:	4b1e      	ldr	r3, [pc, #120]	; (ec80 <nmi_get_chipid+0xd0>)
    ec06:	4a22      	ldr	r2, [pc, #136]	; (ec90 <nmi_get_chipid+0xe0>)
    ec08:	601a      	str	r2, [r3, #0]
    ec0a:	e025      	b.n	ec58 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    ec0c:	4b1c      	ldr	r3, [pc, #112]	; (ec80 <nmi_get_chipid+0xd0>)
    ec0e:	681b      	ldr	r3, [r3, #0]
    ec10:	4a20      	ldr	r2, [pc, #128]	; (ec94 <nmi_get_chipid+0xe4>)
    ec12:	4293      	cmp	r3, r2
    ec14:	d10d      	bne.n	ec32 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    ec16:	687b      	ldr	r3, [r7, #4]
    ec18:	2b03      	cmp	r3, #3
    ec1a:	d01d      	beq.n	ec58 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    ec1c:	687b      	ldr	r3, [r7, #4]
    ec1e:	2b04      	cmp	r3, #4
    ec20:	d103      	bne.n	ec2a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    ec22:	4b17      	ldr	r3, [pc, #92]	; (ec80 <nmi_get_chipid+0xd0>)
    ec24:	4a1c      	ldr	r2, [pc, #112]	; (ec98 <nmi_get_chipid+0xe8>)
    ec26:	601a      	str	r2, [r3, #0]
    ec28:	e016      	b.n	ec58 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    ec2a:	4b15      	ldr	r3, [pc, #84]	; (ec80 <nmi_get_chipid+0xd0>)
    ec2c:	4a1b      	ldr	r2, [pc, #108]	; (ec9c <nmi_get_chipid+0xec>)
    ec2e:	601a      	str	r2, [r3, #0]
    ec30:	e012      	b.n	ec58 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    ec32:	4b13      	ldr	r3, [pc, #76]	; (ec80 <nmi_get_chipid+0xd0>)
    ec34:	681b      	ldr	r3, [r3, #0]
    ec36:	4a1a      	ldr	r2, [pc, #104]	; (eca0 <nmi_get_chipid+0xf0>)
    ec38:	4293      	cmp	r3, r2
    ec3a:	d10d      	bne.n	ec58 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    ec3c:	4a10      	ldr	r2, [pc, #64]	; (ec80 <nmi_get_chipid+0xd0>)
    ec3e:	23ec      	movs	r3, #236	; 0xec
    ec40:	039b      	lsls	r3, r3, #14
    ec42:	0011      	movs	r1, r2
    ec44:	0018      	movs	r0, r3
    ec46:	4b0f      	ldr	r3, [pc, #60]	; (ec84 <nmi_get_chipid+0xd4>)
    ec48:	4798      	blx	r3
    ec4a:	1e03      	subs	r3, r0, #0
    ec4c:	d004      	beq.n	ec58 <nmi_get_chipid+0xa8>
			chipid = 0;
    ec4e:	4b0c      	ldr	r3, [pc, #48]	; (ec80 <nmi_get_chipid+0xd0>)
    ec50:	2200      	movs	r2, #0
    ec52:	601a      	str	r2, [r3, #0]
			return 0;
    ec54:	2300      	movs	r3, #0
    ec56:	e00e      	b.n	ec76 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    ec58:	4b09      	ldr	r3, [pc, #36]	; (ec80 <nmi_get_chipid+0xd0>)
    ec5a:	681b      	ldr	r3, [r3, #0]
    ec5c:	4a11      	ldr	r2, [pc, #68]	; (eca4 <nmi_get_chipid+0xf4>)
    ec5e:	401a      	ands	r2, r3
    ec60:	4b07      	ldr	r3, [pc, #28]	; (ec80 <nmi_get_chipid+0xd0>)
    ec62:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    ec64:	4b06      	ldr	r3, [pc, #24]	; (ec80 <nmi_get_chipid+0xd0>)
    ec66:	681b      	ldr	r3, [r3, #0]
    ec68:	22a0      	movs	r2, #160	; 0xa0
    ec6a:	02d2      	lsls	r2, r2, #11
    ec6c:	431a      	orrs	r2, r3
    ec6e:	4b04      	ldr	r3, [pc, #16]	; (ec80 <nmi_get_chipid+0xd0>)
    ec70:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    ec72:	4b03      	ldr	r3, [pc, #12]	; (ec80 <nmi_get_chipid+0xd0>)
    ec74:	681b      	ldr	r3, [r3, #0]
}
    ec76:	0018      	movs	r0, r3
    ec78:	46bd      	mov	sp, r7
    ec7a:	b002      	add	sp, #8
    ec7c:	bd80      	pop	{r7, pc}
    ec7e:	46c0      	nop			; (mov r8, r8)
    ec80:	20003d38 	.word	0x20003d38
    ec84:	0000f2b1 	.word	0x0000f2b1
    ec88:	000013f4 	.word	0x000013f4
    ec8c:	001002a0 	.word	0x001002a0
    ec90:	001002a1 	.word	0x001002a1
    ec94:	001002b0 	.word	0x001002b0
    ec98:	001002b1 	.word	0x001002b1
    ec9c:	001002b2 	.word	0x001002b2
    eca0:	001000f0 	.word	0x001000f0
    eca4:	fff0ffff 	.word	0xfff0ffff

0000eca8 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    eca8:	b590      	push	{r4, r7, lr}
    ecaa:	b083      	sub	sp, #12
    ecac:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    ecae:	1dfb      	adds	r3, r7, #7
    ecb0:	2200      	movs	r2, #0
    ecb2:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    ecb4:	1dfc      	adds	r4, r7, #7
    ecb6:	003b      	movs	r3, r7
    ecb8:	0019      	movs	r1, r3
    ecba:	2010      	movs	r0, #16
    ecbc:	4b2e      	ldr	r3, [pc, #184]	; (ed78 <chip_sleep+0xd0>)
    ecbe:	4798      	blx	r3
    ecc0:	0003      	movs	r3, r0
    ecc2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    ecc4:	1dfb      	adds	r3, r7, #7
    ecc6:	781b      	ldrb	r3, [r3, #0]
    ecc8:	b25b      	sxtb	r3, r3
    ecca:	2b00      	cmp	r3, #0
    eccc:	d145      	bne.n	ed5a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    ecce:	683b      	ldr	r3, [r7, #0]
    ecd0:	2201      	movs	r2, #1
    ecd2:	4013      	ands	r3, r2
    ecd4:	d000      	beq.n	ecd8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    ecd6:	e7ed      	b.n	ecb4 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    ecd8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    ecda:	1dfc      	adds	r4, r7, #7
    ecdc:	003b      	movs	r3, r7
    ecde:	0019      	movs	r1, r3
    ece0:	2001      	movs	r0, #1
    ece2:	4b25      	ldr	r3, [pc, #148]	; (ed78 <chip_sleep+0xd0>)
    ece4:	4798      	blx	r3
    ece6:	0003      	movs	r3, r0
    ece8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    ecea:	1dfb      	adds	r3, r7, #7
    ecec:	781b      	ldrb	r3, [r3, #0]
    ecee:	b25b      	sxtb	r3, r3
    ecf0:	2b00      	cmp	r3, #0
    ecf2:	d134      	bne.n	ed5e <chip_sleep+0xb6>
	if(reg & NBIT1)
    ecf4:	683b      	ldr	r3, [r7, #0]
    ecf6:	2202      	movs	r2, #2
    ecf8:	4013      	ands	r3, r2
    ecfa:	d010      	beq.n	ed1e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    ecfc:	683b      	ldr	r3, [r7, #0]
    ecfe:	2202      	movs	r2, #2
    ed00:	4393      	bics	r3, r2
    ed02:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    ed04:	683b      	ldr	r3, [r7, #0]
    ed06:	1dfc      	adds	r4, r7, #7
    ed08:	0019      	movs	r1, r3
    ed0a:	2001      	movs	r0, #1
    ed0c:	4b1b      	ldr	r3, [pc, #108]	; (ed7c <chip_sleep+0xd4>)
    ed0e:	4798      	blx	r3
    ed10:	0003      	movs	r3, r0
    ed12:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    ed14:	1dfb      	adds	r3, r7, #7
    ed16:	781b      	ldrb	r3, [r3, #0]
    ed18:	b25b      	sxtb	r3, r3
    ed1a:	2b00      	cmp	r3, #0
    ed1c:	d121      	bne.n	ed62 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    ed1e:	1dfc      	adds	r4, r7, #7
    ed20:	003b      	movs	r3, r7
    ed22:	0019      	movs	r1, r3
    ed24:	200b      	movs	r0, #11
    ed26:	4b14      	ldr	r3, [pc, #80]	; (ed78 <chip_sleep+0xd0>)
    ed28:	4798      	blx	r3
    ed2a:	0003      	movs	r3, r0
    ed2c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    ed2e:	1dfb      	adds	r3, r7, #7
    ed30:	781b      	ldrb	r3, [r3, #0]
    ed32:	b25b      	sxtb	r3, r3
    ed34:	2b00      	cmp	r3, #0
    ed36:	d116      	bne.n	ed66 <chip_sleep+0xbe>
	if(reg & NBIT0)
    ed38:	683b      	ldr	r3, [r7, #0]
    ed3a:	2201      	movs	r2, #1
    ed3c:	4013      	ands	r3, r2
    ed3e:	d013      	beq.n	ed68 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    ed40:	683b      	ldr	r3, [r7, #0]
    ed42:	2201      	movs	r2, #1
    ed44:	4393      	bics	r3, r2
    ed46:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    ed48:	683b      	ldr	r3, [r7, #0]
    ed4a:	1dfc      	adds	r4, r7, #7
    ed4c:	0019      	movs	r1, r3
    ed4e:	200b      	movs	r0, #11
    ed50:	4b0a      	ldr	r3, [pc, #40]	; (ed7c <chip_sleep+0xd4>)
    ed52:	4798      	blx	r3
    ed54:	0003      	movs	r3, r0
    ed56:	7023      	strb	r3, [r4, #0]
    ed58:	e006      	b.n	ed68 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    ed5a:	46c0      	nop			; (mov r8, r8)
    ed5c:	e004      	b.n	ed68 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    ed5e:	46c0      	nop			; (mov r8, r8)
    ed60:	e002      	b.n	ed68 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    ed62:	46c0      	nop			; (mov r8, r8)
    ed64:	e000      	b.n	ed68 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    ed66:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    ed68:	1dfb      	adds	r3, r7, #7
    ed6a:	781b      	ldrb	r3, [r3, #0]
    ed6c:	b25b      	sxtb	r3, r3
}
    ed6e:	0018      	movs	r0, r3
    ed70:	46bd      	mov	sp, r7
    ed72:	b003      	add	sp, #12
    ed74:	bd90      	pop	{r4, r7, pc}
    ed76:	46c0      	nop			; (mov r8, r8)
    ed78:	0000f2b1 	.word	0x0000f2b1
    ed7c:	0000f2d5 	.word	0x0000f2d5

0000ed80 <chip_wake>:
sint8 chip_wake(void)
{
    ed80:	b590      	push	{r4, r7, lr}
    ed82:	b085      	sub	sp, #20
    ed84:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    ed86:	230f      	movs	r3, #15
    ed88:	18fb      	adds	r3, r7, r3
    ed8a:	2200      	movs	r2, #0
    ed8c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    ed8e:	2300      	movs	r3, #0
    ed90:	607b      	str	r3, [r7, #4]
    ed92:	2300      	movs	r3, #0
    ed94:	603b      	str	r3, [r7, #0]
    ed96:	2300      	movs	r3, #0
    ed98:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    ed9a:	230f      	movs	r3, #15
    ed9c:	18fc      	adds	r4, r7, r3
    ed9e:	1d3b      	adds	r3, r7, #4
    eda0:	0019      	movs	r1, r3
    eda2:	200b      	movs	r0, #11
    eda4:	4b4e      	ldr	r3, [pc, #312]	; (eee0 <chip_wake+0x160>)
    eda6:	4798      	blx	r3
    eda8:	0003      	movs	r3, r0
    edaa:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    edac:	230f      	movs	r3, #15
    edae:	18fb      	adds	r3, r7, r3
    edb0:	781b      	ldrb	r3, [r3, #0]
    edb2:	b25b      	sxtb	r3, r3
    edb4:	2b00      	cmp	r3, #0
    edb6:	d000      	beq.n	edba <chip_wake+0x3a>
    edb8:	e082      	b.n	eec0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
    edba:	687b      	ldr	r3, [r7, #4]
    edbc:	2201      	movs	r2, #1
    edbe:	4013      	ands	r3, r2
    edc0:	d111      	bne.n	ede6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    edc2:	687b      	ldr	r3, [r7, #4]
    edc4:	2201      	movs	r2, #1
    edc6:	4313      	orrs	r3, r2
    edc8:	220f      	movs	r2, #15
    edca:	18bc      	adds	r4, r7, r2
    edcc:	0019      	movs	r1, r3
    edce:	200b      	movs	r0, #11
    edd0:	4b44      	ldr	r3, [pc, #272]	; (eee4 <chip_wake+0x164>)
    edd2:	4798      	blx	r3
    edd4:	0003      	movs	r3, r0
    edd6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    edd8:	230f      	movs	r3, #15
    edda:	18fb      	adds	r3, r7, r3
    eddc:	781b      	ldrb	r3, [r3, #0]
    edde:	b25b      	sxtb	r3, r3
    ede0:	2b00      	cmp	r3, #0
    ede2:	d000      	beq.n	ede6 <chip_wake+0x66>
    ede4:	e06e      	b.n	eec4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    ede6:	230f      	movs	r3, #15
    ede8:	18fc      	adds	r4, r7, r3
    edea:	1d3b      	adds	r3, r7, #4
    edec:	0019      	movs	r1, r3
    edee:	2001      	movs	r0, #1
    edf0:	4b3b      	ldr	r3, [pc, #236]	; (eee0 <chip_wake+0x160>)
    edf2:	4798      	blx	r3
    edf4:	0003      	movs	r3, r0
    edf6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    edf8:	230f      	movs	r3, #15
    edfa:	18fb      	adds	r3, r7, r3
    edfc:	781b      	ldrb	r3, [r3, #0]
    edfe:	b25b      	sxtb	r3, r3
    ee00:	2b00      	cmp	r3, #0
    ee02:	d161      	bne.n	eec8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    ee04:	687b      	ldr	r3, [r7, #4]
    ee06:	2202      	movs	r2, #2
    ee08:	4013      	ands	r3, r2
    ee0a:	d110      	bne.n	ee2e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    ee0c:	687b      	ldr	r3, [r7, #4]
    ee0e:	2202      	movs	r2, #2
    ee10:	4313      	orrs	r3, r2
    ee12:	220f      	movs	r2, #15
    ee14:	18bc      	adds	r4, r7, r2
    ee16:	0019      	movs	r1, r3
    ee18:	2001      	movs	r0, #1
    ee1a:	4b32      	ldr	r3, [pc, #200]	; (eee4 <chip_wake+0x164>)
    ee1c:	4798      	blx	r3
    ee1e:	0003      	movs	r3, r0
    ee20:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    ee22:	230f      	movs	r3, #15
    ee24:	18fb      	adds	r3, r7, r3
    ee26:	781b      	ldrb	r3, [r3, #0]
    ee28:	b25b      	sxtb	r3, r3
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	d14e      	bne.n	eecc <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    ee2e:	230f      	movs	r3, #15
    ee30:	18fc      	adds	r4, r7, r3
    ee32:	003b      	movs	r3, r7
    ee34:	0019      	movs	r1, r3
    ee36:	200f      	movs	r0, #15
    ee38:	4b29      	ldr	r3, [pc, #164]	; (eee0 <chip_wake+0x160>)
    ee3a:	4798      	blx	r3
    ee3c:	0003      	movs	r3, r0
    ee3e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    ee40:	230f      	movs	r3, #15
    ee42:	18fb      	adds	r3, r7, r3
    ee44:	781b      	ldrb	r3, [r3, #0]
    ee46:	b25b      	sxtb	r3, r3
    ee48:	2b00      	cmp	r3, #0
    ee4a:	d014      	beq.n	ee76 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    ee4c:	23a8      	movs	r3, #168	; 0xa8
    ee4e:	005a      	lsls	r2, r3, #1
    ee50:	4925      	ldr	r1, [pc, #148]	; (eee8 <chip_wake+0x168>)
    ee52:	4b26      	ldr	r3, [pc, #152]	; (eeec <chip_wake+0x16c>)
    ee54:	0018      	movs	r0, r3
    ee56:	4b26      	ldr	r3, [pc, #152]	; (eef0 <chip_wake+0x170>)
    ee58:	4798      	blx	r3
    ee5a:	230f      	movs	r3, #15
    ee5c:	18fb      	adds	r3, r7, r3
    ee5e:	2100      	movs	r1, #0
    ee60:	5659      	ldrsb	r1, [r3, r1]
    ee62:	683a      	ldr	r2, [r7, #0]
    ee64:	4b23      	ldr	r3, [pc, #140]	; (eef4 <chip_wake+0x174>)
    ee66:	0018      	movs	r0, r3
    ee68:	4b21      	ldr	r3, [pc, #132]	; (eef0 <chip_wake+0x170>)
    ee6a:	4798      	blx	r3
    ee6c:	4b22      	ldr	r3, [pc, #136]	; (eef8 <chip_wake+0x178>)
    ee6e:	0018      	movs	r0, r3
    ee70:	4b1f      	ldr	r3, [pc, #124]	; (eef0 <chip_wake+0x170>)
    ee72:	4798      	blx	r3
			goto _WAKE_EXIT;
    ee74:	e02b      	b.n	eece <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
    ee76:	683b      	ldr	r3, [r7, #0]
    ee78:	2204      	movs	r2, #4
    ee7a:	4013      	ands	r3, r2
    ee7c:	d11c      	bne.n	eeb8 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
    ee7e:	2002      	movs	r0, #2
    ee80:	4b1e      	ldr	r3, [pc, #120]	; (eefc <chip_wake+0x17c>)
    ee82:	4798      	blx	r3
		trials++;
    ee84:	68bb      	ldr	r3, [r7, #8]
    ee86:	3301      	adds	r3, #1
    ee88:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    ee8a:	68bb      	ldr	r3, [r7, #8]
    ee8c:	2b04      	cmp	r3, #4
    ee8e:	d9ce      	bls.n	ee2e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
    ee90:	23ad      	movs	r3, #173	; 0xad
    ee92:	005a      	lsls	r2, r3, #1
    ee94:	4914      	ldr	r1, [pc, #80]	; (eee8 <chip_wake+0x168>)
    ee96:	4b15      	ldr	r3, [pc, #84]	; (eeec <chip_wake+0x16c>)
    ee98:	0018      	movs	r0, r3
    ee9a:	4b15      	ldr	r3, [pc, #84]	; (eef0 <chip_wake+0x170>)
    ee9c:	4798      	blx	r3
    ee9e:	4b18      	ldr	r3, [pc, #96]	; (ef00 <chip_wake+0x180>)
    eea0:	0018      	movs	r0, r3
    eea2:	4b13      	ldr	r3, [pc, #76]	; (eef0 <chip_wake+0x170>)
    eea4:	4798      	blx	r3
    eea6:	4b14      	ldr	r3, [pc, #80]	; (eef8 <chip_wake+0x178>)
    eea8:	0018      	movs	r0, r3
    eeaa:	4b11      	ldr	r3, [pc, #68]	; (eef0 <chip_wake+0x170>)
    eeac:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    eeae:	230f      	movs	r3, #15
    eeb0:	18fb      	adds	r3, r7, r3
    eeb2:	22fc      	movs	r2, #252	; 0xfc
    eeb4:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    eeb6:	e00a      	b.n	eece <chip_wake+0x14e>
			break;
    eeb8:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    eeba:	4b12      	ldr	r3, [pc, #72]	; (ef04 <chip_wake+0x184>)
    eebc:	4798      	blx	r3
    eebe:	e006      	b.n	eece <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    eec0:	46c0      	nop			; (mov r8, r8)
    eec2:	e004      	b.n	eece <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    eec4:	46c0      	nop			; (mov r8, r8)
    eec6:	e002      	b.n	eece <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    eec8:	46c0      	nop			; (mov r8, r8)
    eeca:	e000      	b.n	eece <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    eecc:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    eece:	230f      	movs	r3, #15
    eed0:	18fb      	adds	r3, r7, r3
    eed2:	781b      	ldrb	r3, [r3, #0]
    eed4:	b25b      	sxtb	r3, r3
}
    eed6:	0018      	movs	r0, r3
    eed8:	46bd      	mov	sp, r7
    eeda:	b005      	add	sp, #20
    eedc:	bd90      	pop	{r4, r7, pc}
    eede:	46c0      	nop			; (mov r8, r8)
    eee0:	0000f2b1 	.word	0x0000f2b1
    eee4:	0000f2d5 	.word	0x0000f2d5
    eee8:	00024dc0 	.word	0x00024dc0
    eeec:	00024d34 	.word	0x00024d34
    eef0:	0000a4ed 	.word	0x0000a4ed
    eef4:	00024d48 	.word	0x00024d48
    eef8:	00024d60 	.word	0x00024d60
    eefc:	0000c941 	.word	0x0000c941
    ef00:	00024d64 	.word	0x00024d64
    ef04:	0000f271 	.word	0x0000f271

0000ef08 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    ef08:	b580      	push	{r7, lr}
    ef0a:	b088      	sub	sp, #32
    ef0c:	af00      	add	r7, sp, #0
    ef0e:	0002      	movs	r2, r0
    ef10:	1dfb      	adds	r3, r7, #7
    ef12:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    ef14:	2313      	movs	r3, #19
    ef16:	18fb      	adds	r3, r7, r3
    ef18:	2200      	movs	r2, #0
    ef1a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    ef1c:	2300      	movs	r3, #0
    ef1e:	61fb      	str	r3, [r7, #28]
    ef20:	2300      	movs	r3, #0
    ef22:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    ef24:	2300      	movs	r3, #0
    ef26:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    ef28:	4b4a      	ldr	r3, [pc, #296]	; (f054 <wait_for_bootrom+0x14c>)
    ef2a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
    ef2c:	2300      	movs	r3, #0
    ef2e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    ef30:	4b49      	ldr	r3, [pc, #292]	; (f058 <wait_for_bootrom+0x150>)
    ef32:	0018      	movs	r0, r3
    ef34:	4b49      	ldr	r3, [pc, #292]	; (f05c <wait_for_bootrom+0x154>)
    ef36:	4798      	blx	r3
    ef38:	0003      	movs	r3, r0
    ef3a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    ef3c:	69fb      	ldr	r3, [r7, #28]
    ef3e:	2b00      	cmp	r3, #0
    ef40:	db03      	blt.n	ef4a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    ef42:	2001      	movs	r0, #1
    ef44:	4b46      	ldr	r3, [pc, #280]	; (f060 <wait_for_bootrom+0x158>)
    ef46:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    ef48:	e7f2      	b.n	ef30 <wait_for_bootrom+0x28>
			break;
    ef4a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    ef4c:	4b45      	ldr	r3, [pc, #276]	; (f064 <wait_for_bootrom+0x15c>)
    ef4e:	0018      	movs	r0, r3
    ef50:	4b42      	ldr	r3, [pc, #264]	; (f05c <wait_for_bootrom+0x154>)
    ef52:	4798      	blx	r3
    ef54:	0003      	movs	r3, r0
    ef56:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    ef58:	69fb      	ldr	r3, [r7, #28]
    ef5a:	2201      	movs	r2, #1
    ef5c:	4013      	ands	r3, r2
    ef5e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    ef60:	69fb      	ldr	r3, [r7, #28]
    ef62:	2b00      	cmp	r3, #0
    ef64:	d112      	bne.n	ef8c <wait_for_bootrom+0x84>
	{
		reg = 0;
    ef66:	2300      	movs	r3, #0
    ef68:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    ef6a:	e00b      	b.n	ef84 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    ef6c:	2001      	movs	r0, #1
    ef6e:	4b3c      	ldr	r3, [pc, #240]	; (f060 <wait_for_bootrom+0x158>)
    ef70:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    ef72:	4b3d      	ldr	r3, [pc, #244]	; (f068 <wait_for_bootrom+0x160>)
    ef74:	0018      	movs	r0, r3
    ef76:	4b39      	ldr	r3, [pc, #228]	; (f05c <wait_for_bootrom+0x154>)
    ef78:	4798      	blx	r3
    ef7a:	0003      	movs	r3, r0
    ef7c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    ef7e:	69bb      	ldr	r3, [r7, #24]
    ef80:	3301      	adds	r3, #1
    ef82:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    ef84:	69fb      	ldr	r3, [r7, #28]
    ef86:	4a39      	ldr	r2, [pc, #228]	; (f06c <wait_for_bootrom+0x164>)
    ef88:	4293      	cmp	r3, r2
    ef8a:	d1ef      	bne.n	ef6c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    ef8c:	1dfb      	adds	r3, r7, #7
    ef8e:	781b      	ldrb	r3, [r3, #0]
    ef90:	2b02      	cmp	r3, #2
    ef92:	d10d      	bne.n	efb0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    ef94:	4a36      	ldr	r2, [pc, #216]	; (f070 <wait_for_bootrom+0x168>)
    ef96:	4b37      	ldr	r3, [pc, #220]	; (f074 <wait_for_bootrom+0x16c>)
    ef98:	0011      	movs	r1, r2
    ef9a:	0018      	movs	r0, r3
    ef9c:	4b36      	ldr	r3, [pc, #216]	; (f078 <wait_for_bootrom+0x170>)
    ef9e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    efa0:	2380      	movs	r3, #128	; 0x80
    efa2:	035b      	lsls	r3, r3, #13
    efa4:	4a35      	ldr	r2, [pc, #212]	; (f07c <wait_for_bootrom+0x174>)
    efa6:	0019      	movs	r1, r3
    efa8:	0010      	movs	r0, r2
    efaa:	4b33      	ldr	r3, [pc, #204]	; (f078 <wait_for_bootrom+0x170>)
    efac:	4798      	blx	r3
    efae:	e022      	b.n	eff6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    efb0:	1dfb      	adds	r3, r7, #7
    efb2:	781b      	ldrb	r3, [r3, #0]
    efb4:	2b03      	cmp	r3, #3
    efb6:	d10b      	bne.n	efd0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    efb8:	4a2d      	ldr	r2, [pc, #180]	; (f070 <wait_for_bootrom+0x168>)
    efba:	4b2e      	ldr	r3, [pc, #184]	; (f074 <wait_for_bootrom+0x16c>)
    efbc:	0011      	movs	r1, r2
    efbe:	0018      	movs	r0, r3
    efc0:	4b2d      	ldr	r3, [pc, #180]	; (f078 <wait_for_bootrom+0x170>)
    efc2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    efc4:	4b2d      	ldr	r3, [pc, #180]	; (f07c <wait_for_bootrom+0x174>)
    efc6:	2100      	movs	r1, #0
    efc8:	0018      	movs	r0, r3
    efca:	4b2b      	ldr	r3, [pc, #172]	; (f078 <wait_for_bootrom+0x170>)
    efcc:	4798      	blx	r3
    efce:	e012      	b.n	eff6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    efd0:	1dfb      	adds	r3, r7, #7
    efd2:	781b      	ldrb	r3, [r3, #0]
    efd4:	2b04      	cmp	r3, #4
    efd6:	d108      	bne.n	efea <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    efd8:	2380      	movs	r3, #128	; 0x80
    efda:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    efdc:	68fb      	ldr	r3, [r7, #12]
    efde:	4a27      	ldr	r2, [pc, #156]	; (f07c <wait_for_bootrom+0x174>)
    efe0:	0019      	movs	r1, r3
    efe2:	0010      	movs	r0, r2
    efe4:	4b24      	ldr	r3, [pc, #144]	; (f078 <wait_for_bootrom+0x170>)
    efe6:	4798      	blx	r3
    efe8:	e005      	b.n	eff6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    efea:	68fb      	ldr	r3, [r7, #12]
    efec:	4a23      	ldr	r2, [pc, #140]	; (f07c <wait_for_bootrom+0x174>)
    efee:	0019      	movs	r1, r3
    eff0:	0010      	movs	r0, r2
    eff2:	4b21      	ldr	r3, [pc, #132]	; (f078 <wait_for_bootrom+0x170>)
    eff4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    eff6:	4b22      	ldr	r3, [pc, #136]	; (f080 <wait_for_bootrom+0x178>)
    eff8:	4798      	blx	r3
    effa:	0003      	movs	r3, r0
    effc:	051b      	lsls	r3, r3, #20
    effe:	0d1b      	lsrs	r3, r3, #20
    f000:	4a20      	ldr	r2, [pc, #128]	; (f084 <wait_for_bootrom+0x17c>)
    f002:	4293      	cmp	r3, r2
    f004:	d906      	bls.n	f014 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    f006:	697b      	ldr	r3, [r7, #20]
    f008:	2202      	movs	r2, #2
    f00a:	4313      	orrs	r3, r2
    f00c:	0018      	movs	r0, r3
    f00e:	4b1e      	ldr	r3, [pc, #120]	; (f088 <wait_for_bootrom+0x180>)
    f010:	4798      	blx	r3
    f012:	e003      	b.n	f01c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    f014:	697b      	ldr	r3, [r7, #20]
    f016:	0018      	movs	r0, r3
    f018:	4b1b      	ldr	r3, [pc, #108]	; (f088 <wait_for_bootrom+0x180>)
    f01a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    f01c:	4b1b      	ldr	r3, [pc, #108]	; (f08c <wait_for_bootrom+0x184>)
    f01e:	0018      	movs	r0, r3
    f020:	4b1b      	ldr	r3, [pc, #108]	; (f090 <wait_for_bootrom+0x188>)
    f022:	4798      	blx	r3
    f024:	68fa      	ldr	r2, [r7, #12]
    f026:	4b1b      	ldr	r3, [pc, #108]	; (f094 <wait_for_bootrom+0x18c>)
    f028:	0011      	movs	r1, r2
    f02a:	0018      	movs	r0, r3
    f02c:	4b18      	ldr	r3, [pc, #96]	; (f090 <wait_for_bootrom+0x188>)
    f02e:	4798      	blx	r3
    f030:	4b19      	ldr	r3, [pc, #100]	; (f098 <wait_for_bootrom+0x190>)
    f032:	0018      	movs	r0, r3
    f034:	4b16      	ldr	r3, [pc, #88]	; (f090 <wait_for_bootrom+0x188>)
    f036:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    f038:	4a18      	ldr	r2, [pc, #96]	; (f09c <wait_for_bootrom+0x194>)
    f03a:	4b0b      	ldr	r3, [pc, #44]	; (f068 <wait_for_bootrom+0x160>)
    f03c:	0011      	movs	r1, r2
    f03e:	0018      	movs	r0, r3
    f040:	4b0d      	ldr	r3, [pc, #52]	; (f078 <wait_for_bootrom+0x170>)
    f042:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    f044:	2313      	movs	r3, #19
    f046:	18fb      	adds	r3, r7, r3
    f048:	781b      	ldrb	r3, [r3, #0]
    f04a:	b25b      	sxtb	r3, r3
}
    f04c:	0018      	movs	r0, r3
    f04e:	46bd      	mov	sp, r7
    f050:	b008      	add	sp, #32
    f052:	bd80      	pop	{r7, pc}
    f054:	13301354 	.word	0x13301354
    f058:	00001014 	.word	0x00001014
    f05c:	0000f291 	.word	0x0000f291
    f060:	0000c941 	.word	0x0000c941
    f064:	000207bc 	.word	0x000207bc
    f068:	000c000c 	.word	0x000c000c
    f06c:	10add09e 	.word	0x10add09e
    f070:	3c1cd57d 	.word	0x3c1cd57d
    f074:	000207ac 	.word	0x000207ac
    f078:	0000f2d5 	.word	0x0000f2d5
    f07c:	0000108c 	.word	0x0000108c
    f080:	0000ebb1 	.word	0x0000ebb1
    f084:	0000039f 	.word	0x0000039f
    f088:	0000ea81 	.word	0x0000ea81
    f08c:	00024d80 	.word	0x00024d80
    f090:	0000a4ed 	.word	0x0000a4ed
    f094:	00024d8c 	.word	0x00024d8c
    f098:	00024d60 	.word	0x00024d60
    f09c:	ef522f61 	.word	0xef522f61

0000f0a0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    f0a0:	b580      	push	{r7, lr}
    f0a2:	b088      	sub	sp, #32
    f0a4:	af00      	add	r7, sp, #0
    f0a6:	0002      	movs	r2, r0
    f0a8:	1dfb      	adds	r3, r7, #7
    f0aa:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    f0ac:	231f      	movs	r3, #31
    f0ae:	18fb      	adds	r3, r7, r3
    f0b0:	2200      	movs	r2, #0
    f0b2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    f0b4:	2300      	movs	r3, #0
    f0b6:	61bb      	str	r3, [r7, #24]
    f0b8:	2300      	movs	r3, #0
    f0ba:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    f0bc:	2301      	movs	r3, #1
    f0be:	425b      	negs	r3, r3
    f0c0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    f0c2:	4b1d      	ldr	r3, [pc, #116]	; (f138 <wait_for_firmware_start+0x98>)
    f0c4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    f0c6:	4b1d      	ldr	r3, [pc, #116]	; (f13c <wait_for_firmware_start+0x9c>)
    f0c8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    f0ca:	1dfb      	adds	r3, r7, #7
    f0cc:	781b      	ldrb	r3, [r3, #0]
    f0ce:	2b02      	cmp	r3, #2
    f0d0:	d003      	beq.n	f0da <wait_for_firmware_start+0x3a>
    f0d2:	1dfb      	adds	r3, r7, #7
    f0d4:	781b      	ldrb	r3, [r3, #0]
    f0d6:	2b03      	cmp	r3, #3
    f0d8:	d119      	bne.n	f10e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    f0da:	4b19      	ldr	r3, [pc, #100]	; (f140 <wait_for_firmware_start+0xa0>)
    f0dc:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    f0de:	4b19      	ldr	r3, [pc, #100]	; (f144 <wait_for_firmware_start+0xa4>)
    f0e0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    f0e2:	e014      	b.n	f10e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    f0e4:	2002      	movs	r0, #2
    f0e6:	4b18      	ldr	r3, [pc, #96]	; (f148 <wait_for_firmware_start+0xa8>)
    f0e8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    f0ea:	68fb      	ldr	r3, [r7, #12]
    f0ec:	0018      	movs	r0, r3
    f0ee:	4b17      	ldr	r3, [pc, #92]	; (f14c <wait_for_firmware_start+0xac>)
    f0f0:	4798      	blx	r3
    f0f2:	0003      	movs	r3, r0
    f0f4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    f0f6:	697b      	ldr	r3, [r7, #20]
    f0f8:	3301      	adds	r3, #1
    f0fa:	617b      	str	r3, [r7, #20]
    f0fc:	697a      	ldr	r2, [r7, #20]
    f0fe:	693b      	ldr	r3, [r7, #16]
    f100:	429a      	cmp	r2, r3
    f102:	d304      	bcc.n	f10e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    f104:	231f      	movs	r3, #31
    f106:	18fb      	adds	r3, r7, r3
    f108:	22fb      	movs	r2, #251	; 0xfb
    f10a:	701a      	strb	r2, [r3, #0]
			goto ERR;
    f10c:	e00c      	b.n	f128 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    f10e:	68ba      	ldr	r2, [r7, #8]
    f110:	69bb      	ldr	r3, [r7, #24]
    f112:	429a      	cmp	r2, r3
    f114:	d1e6      	bne.n	f0e4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    f116:	68bb      	ldr	r3, [r7, #8]
    f118:	4a08      	ldr	r2, [pc, #32]	; (f13c <wait_for_firmware_start+0x9c>)
    f11a:	4293      	cmp	r3, r2
    f11c:	d104      	bne.n	f128 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    f11e:	4b06      	ldr	r3, [pc, #24]	; (f138 <wait_for_firmware_start+0x98>)
    f120:	2100      	movs	r1, #0
    f122:	0018      	movs	r0, r3
    f124:	4b0a      	ldr	r3, [pc, #40]	; (f150 <wait_for_firmware_start+0xb0>)
    f126:	4798      	blx	r3
	}
ERR:
	return ret;
    f128:	231f      	movs	r3, #31
    f12a:	18fb      	adds	r3, r7, r3
    f12c:	781b      	ldrb	r3, [r3, #0]
    f12e:	b25b      	sxtb	r3, r3
}
    f130:	0018      	movs	r0, r3
    f132:	46bd      	mov	sp, r7
    f134:	b008      	add	sp, #32
    f136:	bd80      	pop	{r7, pc}
    f138:	0000108c 	.word	0x0000108c
    f13c:	02532636 	.word	0x02532636
    f140:	000207ac 	.word	0x000207ac
    f144:	d75dc1c3 	.word	0xd75dc1c3
    f148:	0000c941 	.word	0x0000c941
    f14c:	0000f291 	.word	0x0000f291
    f150:	0000f2d5 	.word	0x0000f2d5

0000f154 <chip_deinit>:

sint8 chip_deinit(void)
{
    f154:	b590      	push	{r4, r7, lr}
    f156:	b083      	sub	sp, #12
    f158:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    f15a:	2300      	movs	r3, #0
    f15c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    f15e:	1dfc      	adds	r4, r7, #7
    f160:	003a      	movs	r2, r7
    f162:	23a0      	movs	r3, #160	; 0xa0
    f164:	015b      	lsls	r3, r3, #5
    f166:	0011      	movs	r1, r2
    f168:	0018      	movs	r0, r3
    f16a:	4b20      	ldr	r3, [pc, #128]	; (f1ec <chip_deinit+0x98>)
    f16c:	4798      	blx	r3
    f16e:	0003      	movs	r3, r0
    f170:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    f172:	1dfb      	adds	r3, r7, #7
    f174:	781b      	ldrb	r3, [r3, #0]
    f176:	b25b      	sxtb	r3, r3
    f178:	2b00      	cmp	r3, #0
    f17a:	d00e      	beq.n	f19a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
    f17c:	4a1c      	ldr	r2, [pc, #112]	; (f1f0 <chip_deinit+0x9c>)
    f17e:	491d      	ldr	r1, [pc, #116]	; (f1f4 <chip_deinit+0xa0>)
    f180:	4b1d      	ldr	r3, [pc, #116]	; (f1f8 <chip_deinit+0xa4>)
    f182:	0018      	movs	r0, r3
    f184:	4b1d      	ldr	r3, [pc, #116]	; (f1fc <chip_deinit+0xa8>)
    f186:	4798      	blx	r3
    f188:	4b1d      	ldr	r3, [pc, #116]	; (f200 <chip_deinit+0xac>)
    f18a:	0018      	movs	r0, r3
    f18c:	4b1b      	ldr	r3, [pc, #108]	; (f1fc <chip_deinit+0xa8>)
    f18e:	4798      	blx	r3
    f190:	4b1c      	ldr	r3, [pc, #112]	; (f204 <chip_deinit+0xb0>)
    f192:	0018      	movs	r0, r3
    f194:	4b19      	ldr	r3, [pc, #100]	; (f1fc <chip_deinit+0xa8>)
    f196:	4798      	blx	r3
		goto ERR1;
    f198:	e021      	b.n	f1de <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
    f19a:	683b      	ldr	r3, [r7, #0]
    f19c:	4a1a      	ldr	r2, [pc, #104]	; (f208 <chip_deinit+0xb4>)
    f19e:	4013      	ands	r3, r2
    f1a0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    f1a2:	683a      	ldr	r2, [r7, #0]
    f1a4:	1dfc      	adds	r4, r7, #7
    f1a6:	23a0      	movs	r3, #160	; 0xa0
    f1a8:	015b      	lsls	r3, r3, #5
    f1aa:	0011      	movs	r1, r2
    f1ac:	0018      	movs	r0, r3
    f1ae:	4b17      	ldr	r3, [pc, #92]	; (f20c <chip_deinit+0xb8>)
    f1b0:	4798      	blx	r3
    f1b2:	0003      	movs	r3, r0
    f1b4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    f1b6:	1dfb      	adds	r3, r7, #7
    f1b8:	781b      	ldrb	r3, [r3, #0]
    f1ba:	b25b      	sxtb	r3, r3
    f1bc:	2b00      	cmp	r3, #0
    f1be:	d00e      	beq.n	f1de <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
    f1c0:	4a13      	ldr	r2, [pc, #76]	; (f210 <chip_deinit+0xbc>)
    f1c2:	490c      	ldr	r1, [pc, #48]	; (f1f4 <chip_deinit+0xa0>)
    f1c4:	4b0c      	ldr	r3, [pc, #48]	; (f1f8 <chip_deinit+0xa4>)
    f1c6:	0018      	movs	r0, r3
    f1c8:	4b0c      	ldr	r3, [pc, #48]	; (f1fc <chip_deinit+0xa8>)
    f1ca:	4798      	blx	r3
    f1cc:	4b0c      	ldr	r3, [pc, #48]	; (f200 <chip_deinit+0xac>)
    f1ce:	0018      	movs	r0, r3
    f1d0:	4b0a      	ldr	r3, [pc, #40]	; (f1fc <chip_deinit+0xa8>)
    f1d2:	4798      	blx	r3
    f1d4:	4b0b      	ldr	r3, [pc, #44]	; (f204 <chip_deinit+0xb0>)
    f1d6:	0018      	movs	r0, r3
    f1d8:	4b08      	ldr	r3, [pc, #32]	; (f1fc <chip_deinit+0xa8>)
    f1da:	4798      	blx	r3
		goto ERR1;
    f1dc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    f1de:	1dfb      	adds	r3, r7, #7
    f1e0:	781b      	ldrb	r3, [r3, #0]
    f1e2:	b25b      	sxtb	r3, r3
}
    f1e4:	0018      	movs	r0, r3
    f1e6:	46bd      	mov	sp, r7
    f1e8:	b003      	add	sp, #12
    f1ea:	bd90      	pop	{r4, r7, pc}
    f1ec:	0000f2b1 	.word	0x0000f2b1
    f1f0:	00000201 	.word	0x00000201
    f1f4:	00024dcc 	.word	0x00024dcc
    f1f8:	00024d34 	.word	0x00024d34
    f1fc:	0000a4ed 	.word	0x0000a4ed
    f200:	00024da4 	.word	0x00024da4
    f204:	00024d60 	.word	0x00024d60
    f208:	fffffbff 	.word	0xfffffbff
    f20c:	0000f2d5 	.word	0x0000f2d5
    f210:	00000207 	.word	0x00000207

0000f214 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    f214:	b590      	push	{r4, r7, lr}
    f216:	b085      	sub	sp, #20
    f218:	af00      	add	r7, sp, #0
    f21a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    f21c:	230f      	movs	r3, #15
    f21e:	18fb      	adds	r3, r7, r3
    f220:	2200      	movs	r2, #0
    f222:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    f224:	230f      	movs	r3, #15
    f226:	18fc      	adds	r4, r7, r3
    f228:	687b      	ldr	r3, [r7, #4]
    f22a:	0018      	movs	r0, r3
    f22c:	4b05      	ldr	r3, [pc, #20]	; (f244 <nm_bus_iface_init+0x30>)
    f22e:	4798      	blx	r3
    f230:	0003      	movs	r3, r0
    f232:	7023      	strb	r3, [r4, #0]
	return ret;
    f234:	230f      	movs	r3, #15
    f236:	18fb      	adds	r3, r7, r3
    f238:	781b      	ldrb	r3, [r3, #0]
    f23a:	b25b      	sxtb	r3, r3
}
    f23c:	0018      	movs	r0, r3
    f23e:	46bd      	mov	sp, r7
    f240:	b005      	add	sp, #20
    f242:	bd90      	pop	{r4, r7, pc}
    f244:	0000cffd 	.word	0x0000cffd

0000f248 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    f248:	b590      	push	{r4, r7, lr}
    f24a:	b083      	sub	sp, #12
    f24c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    f24e:	1dfb      	adds	r3, r7, #7
    f250:	2200      	movs	r2, #0
    f252:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    f254:	1dfc      	adds	r4, r7, #7
    f256:	4b05      	ldr	r3, [pc, #20]	; (f26c <nm_bus_iface_deinit+0x24>)
    f258:	4798      	blx	r3
    f25a:	0003      	movs	r3, r0
    f25c:	7023      	strb	r3, [r4, #0]

	return ret;
    f25e:	1dfb      	adds	r3, r7, #7
    f260:	781b      	ldrb	r3, [r3, #0]
    f262:	b25b      	sxtb	r3, r3
}
    f264:	0018      	movs	r0, r3
    f266:	46bd      	mov	sp, r7
    f268:	b003      	add	sp, #12
    f26a:	bd90      	pop	{r4, r7, pc}
    f26c:	0000d175 	.word	0x0000d175

0000f270 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    f270:	b580      	push	{r7, lr}
    f272:	b082      	sub	sp, #8
    f274:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    f276:	1dfb      	adds	r3, r7, #7
    f278:	2200      	movs	r2, #0
    f27a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    f27c:	4b03      	ldr	r3, [pc, #12]	; (f28c <nm_bus_reset+0x1c>)
    f27e:	4798      	blx	r3
    f280:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    f282:	0018      	movs	r0, r3
    f284:	46bd      	mov	sp, r7
    f286:	b002      	add	sp, #8
    f288:	bd80      	pop	{r7, pc}
    f28a:	46c0      	nop			; (mov r8, r8)
    f28c:	0001109d 	.word	0x0001109d

0000f290 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    f290:	b580      	push	{r7, lr}
    f292:	b082      	sub	sp, #8
    f294:	af00      	add	r7, sp, #0
    f296:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    f298:	687b      	ldr	r3, [r7, #4]
    f29a:	0018      	movs	r0, r3
    f29c:	4b03      	ldr	r3, [pc, #12]	; (f2ac <nm_read_reg+0x1c>)
    f29e:	4798      	blx	r3
    f2a0:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    f2a2:	0018      	movs	r0, r3
    f2a4:	46bd      	mov	sp, r7
    f2a6:	b002      	add	sp, #8
    f2a8:	bd80      	pop	{r7, pc}
    f2aa:	46c0      	nop			; (mov r8, r8)
    f2ac:	00011231 	.word	0x00011231

0000f2b0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    f2b0:	b580      	push	{r7, lr}
    f2b2:	b082      	sub	sp, #8
    f2b4:	af00      	add	r7, sp, #0
    f2b6:	6078      	str	r0, [r7, #4]
    f2b8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    f2ba:	683a      	ldr	r2, [r7, #0]
    f2bc:	687b      	ldr	r3, [r7, #4]
    f2be:	0011      	movs	r1, r2
    f2c0:	0018      	movs	r0, r3
    f2c2:	4b03      	ldr	r3, [pc, #12]	; (f2d0 <nm_read_reg_with_ret+0x20>)
    f2c4:	4798      	blx	r3
    f2c6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    f2c8:	0018      	movs	r0, r3
    f2ca:	46bd      	mov	sp, r7
    f2cc:	b002      	add	sp, #8
    f2ce:	bd80      	pop	{r7, pc}
    f2d0:	00011255 	.word	0x00011255

0000f2d4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    f2d4:	b580      	push	{r7, lr}
    f2d6:	b082      	sub	sp, #8
    f2d8:	af00      	add	r7, sp, #0
    f2da:	6078      	str	r0, [r7, #4]
    f2dc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    f2de:	683a      	ldr	r2, [r7, #0]
    f2e0:	687b      	ldr	r3, [r7, #4]
    f2e2:	0011      	movs	r1, r2
    f2e4:	0018      	movs	r0, r3
    f2e6:	4b03      	ldr	r3, [pc, #12]	; (f2f4 <nm_write_reg+0x20>)
    f2e8:	4798      	blx	r3
    f2ea:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    f2ec:	0018      	movs	r0, r3
    f2ee:	46bd      	mov	sp, r7
    f2f0:	b002      	add	sp, #8
    f2f2:	bd80      	pop	{r7, pc}
    f2f4:	000112a5 	.word	0x000112a5

0000f2f8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    f2f8:	b580      	push	{r7, lr}
    f2fa:	b084      	sub	sp, #16
    f2fc:	af00      	add	r7, sp, #0
    f2fe:	60f8      	str	r0, [r7, #12]
    f300:	60b9      	str	r1, [r7, #8]
    f302:	1dbb      	adds	r3, r7, #6
    f304:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    f306:	1dbb      	adds	r3, r7, #6
    f308:	881a      	ldrh	r2, [r3, #0]
    f30a:	68b9      	ldr	r1, [r7, #8]
    f30c:	68fb      	ldr	r3, [r7, #12]
    f30e:	0018      	movs	r0, r3
    f310:	4b03      	ldr	r3, [pc, #12]	; (f320 <p_nm_read_block+0x28>)
    f312:	4798      	blx	r3
    f314:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    f316:	0018      	movs	r0, r3
    f318:	46bd      	mov	sp, r7
    f31a:	b004      	add	sp, #16
    f31c:	bd80      	pop	{r7, pc}
    f31e:	46c0      	nop			; (mov r8, r8)
    f320:	000112f5 	.word	0x000112f5

0000f324 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    f324:	b580      	push	{r7, lr}
    f326:	b086      	sub	sp, #24
    f328:	af00      	add	r7, sp, #0
    f32a:	60f8      	str	r0, [r7, #12]
    f32c:	60b9      	str	r1, [r7, #8]
    f32e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    f330:	4b2d      	ldr	r3, [pc, #180]	; (f3e8 <nm_read_block+0xc4>)
    f332:	881a      	ldrh	r2, [r3, #0]
    f334:	2310      	movs	r3, #16
    f336:	18fb      	adds	r3, r7, r3
    f338:	3a08      	subs	r2, #8
    f33a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    f33c:	2300      	movs	r3, #0
    f33e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    f340:	2313      	movs	r3, #19
    f342:	18fb      	adds	r3, r7, r3
    f344:	2200      	movs	r2, #0
    f346:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    f348:	2310      	movs	r3, #16
    f34a:	18fb      	adds	r3, r7, r3
    f34c:	881a      	ldrh	r2, [r3, #0]
    f34e:	687b      	ldr	r3, [r7, #4]
    f350:	429a      	cmp	r2, r3
    f352:	d313      	bcc.n	f37c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    f354:	68ba      	ldr	r2, [r7, #8]
    f356:	697b      	ldr	r3, [r7, #20]
    f358:	18d1      	adds	r1, r2, r3
    f35a:	687b      	ldr	r3, [r7, #4]
    f35c:	b29a      	uxth	r2, r3
    f35e:	68fb      	ldr	r3, [r7, #12]
    f360:	0018      	movs	r0, r3
    f362:	4b22      	ldr	r3, [pc, #136]	; (f3ec <nm_read_block+0xc8>)
    f364:	4798      	blx	r3
    f366:	0003      	movs	r3, r0
    f368:	b2da      	uxtb	r2, r3
    f36a:	2313      	movs	r3, #19
    f36c:	18fb      	adds	r3, r7, r3
    f36e:	781b      	ldrb	r3, [r3, #0]
    f370:	18d3      	adds	r3, r2, r3
    f372:	b2da      	uxtb	r2, r3
    f374:	2313      	movs	r3, #19
    f376:	18fb      	adds	r3, r7, r3
    f378:	701a      	strb	r2, [r3, #0]
			break;
    f37a:	e02d      	b.n	f3d8 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    f37c:	68ba      	ldr	r2, [r7, #8]
    f37e:	697b      	ldr	r3, [r7, #20]
    f380:	18d1      	adds	r1, r2, r3
    f382:	2310      	movs	r3, #16
    f384:	18fb      	adds	r3, r7, r3
    f386:	881a      	ldrh	r2, [r3, #0]
    f388:	68fb      	ldr	r3, [r7, #12]
    f38a:	0018      	movs	r0, r3
    f38c:	4b17      	ldr	r3, [pc, #92]	; (f3ec <nm_read_block+0xc8>)
    f38e:	4798      	blx	r3
    f390:	0003      	movs	r3, r0
    f392:	b2da      	uxtb	r2, r3
    f394:	2313      	movs	r3, #19
    f396:	18fb      	adds	r3, r7, r3
    f398:	781b      	ldrb	r3, [r3, #0]
    f39a:	18d3      	adds	r3, r2, r3
    f39c:	b2da      	uxtb	r2, r3
    f39e:	2313      	movs	r3, #19
    f3a0:	18fb      	adds	r3, r7, r3
    f3a2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    f3a4:	2313      	movs	r3, #19
    f3a6:	18fb      	adds	r3, r7, r3
    f3a8:	781b      	ldrb	r3, [r3, #0]
    f3aa:	b25b      	sxtb	r3, r3
    f3ac:	2b00      	cmp	r3, #0
    f3ae:	d112      	bne.n	f3d6 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    f3b0:	2310      	movs	r3, #16
    f3b2:	18fb      	adds	r3, r7, r3
    f3b4:	881b      	ldrh	r3, [r3, #0]
    f3b6:	687a      	ldr	r2, [r7, #4]
    f3b8:	1ad3      	subs	r3, r2, r3
    f3ba:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    f3bc:	2310      	movs	r3, #16
    f3be:	18fb      	adds	r3, r7, r3
    f3c0:	881b      	ldrh	r3, [r3, #0]
    f3c2:	697a      	ldr	r2, [r7, #20]
    f3c4:	18d3      	adds	r3, r2, r3
    f3c6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    f3c8:	2310      	movs	r3, #16
    f3ca:	18fb      	adds	r3, r7, r3
    f3cc:	881b      	ldrh	r3, [r3, #0]
    f3ce:	68fa      	ldr	r2, [r7, #12]
    f3d0:	18d3      	adds	r3, r2, r3
    f3d2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    f3d4:	e7b8      	b.n	f348 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    f3d6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    f3d8:	2313      	movs	r3, #19
    f3da:	18fb      	adds	r3, r7, r3
    f3dc:	781b      	ldrb	r3, [r3, #0]
    f3de:	b25b      	sxtb	r3, r3
}
    f3e0:	0018      	movs	r0, r3
    f3e2:	46bd      	mov	sp, r7
    f3e4:	b006      	add	sp, #24
    f3e6:	bd80      	pop	{r7, pc}
    f3e8:	20000120 	.word	0x20000120
    f3ec:	0000f2f9 	.word	0x0000f2f9

0000f3f0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    f3f0:	b580      	push	{r7, lr}
    f3f2:	b084      	sub	sp, #16
    f3f4:	af00      	add	r7, sp, #0
    f3f6:	60f8      	str	r0, [r7, #12]
    f3f8:	60b9      	str	r1, [r7, #8]
    f3fa:	1dbb      	adds	r3, r7, #6
    f3fc:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    f3fe:	1dbb      	adds	r3, r7, #6
    f400:	881a      	ldrh	r2, [r3, #0]
    f402:	68b9      	ldr	r1, [r7, #8]
    f404:	68fb      	ldr	r3, [r7, #12]
    f406:	0018      	movs	r0, r3
    f408:	4b03      	ldr	r3, [pc, #12]	; (f418 <p_nm_write_block+0x28>)
    f40a:	4798      	blx	r3
    f40c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    f40e:	0018      	movs	r0, r3
    f410:	46bd      	mov	sp, r7
    f412:	b004      	add	sp, #16
    f414:	bd80      	pop	{r7, pc}
    f416:	46c0      	nop			; (mov r8, r8)
    f418:	0001134d 	.word	0x0001134d

0000f41c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    f41c:	b580      	push	{r7, lr}
    f41e:	b086      	sub	sp, #24
    f420:	af00      	add	r7, sp, #0
    f422:	60f8      	str	r0, [r7, #12]
    f424:	60b9      	str	r1, [r7, #8]
    f426:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    f428:	4b2d      	ldr	r3, [pc, #180]	; (f4e0 <nm_write_block+0xc4>)
    f42a:	881a      	ldrh	r2, [r3, #0]
    f42c:	2310      	movs	r3, #16
    f42e:	18fb      	adds	r3, r7, r3
    f430:	3a08      	subs	r2, #8
    f432:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    f434:	2300      	movs	r3, #0
    f436:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    f438:	2313      	movs	r3, #19
    f43a:	18fb      	adds	r3, r7, r3
    f43c:	2200      	movs	r2, #0
    f43e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    f440:	2310      	movs	r3, #16
    f442:	18fb      	adds	r3, r7, r3
    f444:	881a      	ldrh	r2, [r3, #0]
    f446:	687b      	ldr	r3, [r7, #4]
    f448:	429a      	cmp	r2, r3
    f44a:	d313      	bcc.n	f474 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    f44c:	68ba      	ldr	r2, [r7, #8]
    f44e:	697b      	ldr	r3, [r7, #20]
    f450:	18d1      	adds	r1, r2, r3
    f452:	687b      	ldr	r3, [r7, #4]
    f454:	b29a      	uxth	r2, r3
    f456:	68fb      	ldr	r3, [r7, #12]
    f458:	0018      	movs	r0, r3
    f45a:	4b22      	ldr	r3, [pc, #136]	; (f4e4 <nm_write_block+0xc8>)
    f45c:	4798      	blx	r3
    f45e:	0003      	movs	r3, r0
    f460:	b2da      	uxtb	r2, r3
    f462:	2313      	movs	r3, #19
    f464:	18fb      	adds	r3, r7, r3
    f466:	781b      	ldrb	r3, [r3, #0]
    f468:	18d3      	adds	r3, r2, r3
    f46a:	b2da      	uxtb	r2, r3
    f46c:	2313      	movs	r3, #19
    f46e:	18fb      	adds	r3, r7, r3
    f470:	701a      	strb	r2, [r3, #0]
			break;
    f472:	e02d      	b.n	f4d0 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    f474:	68ba      	ldr	r2, [r7, #8]
    f476:	697b      	ldr	r3, [r7, #20]
    f478:	18d1      	adds	r1, r2, r3
    f47a:	2310      	movs	r3, #16
    f47c:	18fb      	adds	r3, r7, r3
    f47e:	881a      	ldrh	r2, [r3, #0]
    f480:	68fb      	ldr	r3, [r7, #12]
    f482:	0018      	movs	r0, r3
    f484:	4b17      	ldr	r3, [pc, #92]	; (f4e4 <nm_write_block+0xc8>)
    f486:	4798      	blx	r3
    f488:	0003      	movs	r3, r0
    f48a:	b2da      	uxtb	r2, r3
    f48c:	2313      	movs	r3, #19
    f48e:	18fb      	adds	r3, r7, r3
    f490:	781b      	ldrb	r3, [r3, #0]
    f492:	18d3      	adds	r3, r2, r3
    f494:	b2da      	uxtb	r2, r3
    f496:	2313      	movs	r3, #19
    f498:	18fb      	adds	r3, r7, r3
    f49a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    f49c:	2313      	movs	r3, #19
    f49e:	18fb      	adds	r3, r7, r3
    f4a0:	781b      	ldrb	r3, [r3, #0]
    f4a2:	b25b      	sxtb	r3, r3
    f4a4:	2b00      	cmp	r3, #0
    f4a6:	d112      	bne.n	f4ce <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    f4a8:	2310      	movs	r3, #16
    f4aa:	18fb      	adds	r3, r7, r3
    f4ac:	881b      	ldrh	r3, [r3, #0]
    f4ae:	687a      	ldr	r2, [r7, #4]
    f4b0:	1ad3      	subs	r3, r2, r3
    f4b2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    f4b4:	2310      	movs	r3, #16
    f4b6:	18fb      	adds	r3, r7, r3
    f4b8:	881b      	ldrh	r3, [r3, #0]
    f4ba:	697a      	ldr	r2, [r7, #20]
    f4bc:	18d3      	adds	r3, r2, r3
    f4be:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    f4c0:	2310      	movs	r3, #16
    f4c2:	18fb      	adds	r3, r7, r3
    f4c4:	881b      	ldrh	r3, [r3, #0]
    f4c6:	68fa      	ldr	r2, [r7, #12]
    f4c8:	18d3      	adds	r3, r2, r3
    f4ca:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    f4cc:	e7b8      	b.n	f440 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    f4ce:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    f4d0:	2313      	movs	r3, #19
    f4d2:	18fb      	adds	r3, r7, r3
    f4d4:	781b      	ldrb	r3, [r3, #0]
    f4d6:	b25b      	sxtb	r3, r3
}
    f4d8:	0018      	movs	r0, r3
    f4da:	46bd      	mov	sp, r7
    f4dc:	b006      	add	sp, #24
    f4de:	bd80      	pop	{r7, pc}
    f4e0:	20000120 	.word	0x20000120
    f4e4:	0000f3f1 	.word	0x0000f3f1

0000f4e8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    f4e8:	b590      	push	{r4, r7, lr}
    f4ea:	b089      	sub	sp, #36	; 0x24
    f4ec:	af00      	add	r7, sp, #0
    f4ee:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    f4f0:	2300      	movs	r3, #0
    f4f2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    f4f4:	231f      	movs	r3, #31
    f4f6:	18fb      	adds	r3, r7, r3
    f4f8:	2200      	movs	r2, #0
    f4fa:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    f4fc:	230c      	movs	r3, #12
    f4fe:	18fb      	adds	r3, r7, r3
    f500:	0018      	movs	r0, r3
    f502:	2308      	movs	r3, #8
    f504:	001a      	movs	r2, r3
    f506:	2100      	movs	r1, #0
    f508:	4b64      	ldr	r3, [pc, #400]	; (f69c <nm_get_firmware_full_info+0x1b4>)
    f50a:	4798      	blx	r3
	if (pstrRev != NULL)
    f50c:	687b      	ldr	r3, [r7, #4]
    f50e:	2b00      	cmp	r3, #0
    f510:	d100      	bne.n	f514 <nm_get_firmware_full_info+0x2c>
    f512:	e0ba      	b.n	f68a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    f514:	687b      	ldr	r3, [r7, #4]
    f516:	2228      	movs	r2, #40	; 0x28
    f518:	2100      	movs	r1, #0
    f51a:	0018      	movs	r0, r3
    f51c:	4b60      	ldr	r3, [pc, #384]	; (f6a0 <nm_get_firmware_full_info+0x1b8>)
    f51e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    f520:	231f      	movs	r3, #31
    f522:	18fc      	adds	r4, r7, r3
    f524:	2314      	movs	r3, #20
    f526:	18fb      	adds	r3, r7, r3
    f528:	4a5e      	ldr	r2, [pc, #376]	; (f6a4 <nm_get_firmware_full_info+0x1bc>)
    f52a:	0019      	movs	r1, r3
    f52c:	0010      	movs	r0, r2
    f52e:	4b5e      	ldr	r3, [pc, #376]	; (f6a8 <nm_get_firmware_full_info+0x1c0>)
    f530:	4798      	blx	r3
    f532:	0003      	movs	r3, r0
    f534:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    f536:	231f      	movs	r3, #31
    f538:	18fb      	adds	r3, r7, r3
    f53a:	781b      	ldrb	r3, [r3, #0]
    f53c:	b25b      	sxtb	r3, r3
    f53e:	2b00      	cmp	r3, #0
    f540:	d000      	beq.n	f544 <nm_get_firmware_full_info+0x5c>
    f542:	e0a2      	b.n	f68a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    f544:	697b      	ldr	r3, [r7, #20]
    f546:	2b00      	cmp	r3, #0
    f548:	d100      	bne.n	f54c <nm_get_firmware_full_info+0x64>
    f54a:	e09a      	b.n	f682 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    f54c:	697b      	ldr	r3, [r7, #20]
    f54e:	22c0      	movs	r2, #192	; 0xc0
    f550:	0292      	lsls	r2, r2, #10
    f552:	4313      	orrs	r3, r2
    f554:	221f      	movs	r2, #31
    f556:	18bc      	adds	r4, r7, r2
    f558:	220c      	movs	r2, #12
    f55a:	18b9      	adds	r1, r7, r2
    f55c:	2208      	movs	r2, #8
    f55e:	0018      	movs	r0, r3
    f560:	4b52      	ldr	r3, [pc, #328]	; (f6ac <nm_get_firmware_full_info+0x1c4>)
    f562:	4798      	blx	r3
    f564:	0003      	movs	r3, r0
    f566:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    f568:	231f      	movs	r3, #31
    f56a:	18fb      	adds	r3, r7, r3
    f56c:	781b      	ldrb	r3, [r3, #0]
    f56e:	b25b      	sxtb	r3, r3
    f570:	2b00      	cmp	r3, #0
    f572:	d000      	beq.n	f576 <nm_get_firmware_full_info+0x8e>
    f574:	e089      	b.n	f68a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    f576:	230c      	movs	r3, #12
    f578:	18fb      	adds	r3, r7, r3
    f57a:	685b      	ldr	r3, [r3, #4]
    f57c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    f57e:	697b      	ldr	r3, [r7, #20]
    f580:	041b      	lsls	r3, r3, #16
    f582:	0c1b      	lsrs	r3, r3, #16
    f584:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    f586:	697b      	ldr	r3, [r7, #20]
    f588:	2b00      	cmp	r3, #0
    f58a:	d100      	bne.n	f58e <nm_get_firmware_full_info+0xa6>
    f58c:	e074      	b.n	f678 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    f58e:	697b      	ldr	r3, [r7, #20]
    f590:	22c0      	movs	r2, #192	; 0xc0
    f592:	0292      	lsls	r2, r2, #10
    f594:	4313      	orrs	r3, r2
    f596:	221f      	movs	r2, #31
    f598:	18bc      	adds	r4, r7, r2
    f59a:	6879      	ldr	r1, [r7, #4]
    f59c:	2228      	movs	r2, #40	; 0x28
    f59e:	0018      	movs	r0, r3
    f5a0:	4b42      	ldr	r3, [pc, #264]	; (f6ac <nm_get_firmware_full_info+0x1c4>)
    f5a2:	4798      	blx	r3
    f5a4:	0003      	movs	r3, r0
    f5a6:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    f5a8:	231f      	movs	r3, #31
    f5aa:	18fb      	adds	r3, r7, r3
    f5ac:	781b      	ldrb	r3, [r3, #0]
    f5ae:	b25b      	sxtb	r3, r3
    f5b0:	2b00      	cmp	r3, #0
    f5b2:	d16a      	bne.n	f68a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    f5b4:	687b      	ldr	r3, [r7, #4]
    f5b6:	791b      	ldrb	r3, [r3, #4]
    f5b8:	021b      	lsls	r3, r3, #8
    f5ba:	b21a      	sxth	r2, r3
    f5bc:	687b      	ldr	r3, [r7, #4]
    f5be:	795b      	ldrb	r3, [r3, #5]
    f5c0:	011b      	lsls	r3, r3, #4
    f5c2:	b21b      	sxth	r3, r3
    f5c4:	21ff      	movs	r1, #255	; 0xff
    f5c6:	400b      	ands	r3, r1
    f5c8:	b21b      	sxth	r3, r3
    f5ca:	4313      	orrs	r3, r2
    f5cc:	b21a      	sxth	r2, r3
    f5ce:	687b      	ldr	r3, [r7, #4]
    f5d0:	799b      	ldrb	r3, [r3, #6]
    f5d2:	b21b      	sxth	r3, r3
    f5d4:	210f      	movs	r1, #15
    f5d6:	400b      	ands	r3, r1
    f5d8:	b21b      	sxth	r3, r3
    f5da:	4313      	orrs	r3, r2
    f5dc:	b21a      	sxth	r2, r3
    f5de:	231c      	movs	r3, #28
    f5e0:	18fb      	adds	r3, r7, r3
    f5e2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    f5e4:	231a      	movs	r3, #26
    f5e6:	18fb      	adds	r3, r7, r3
    f5e8:	4a31      	ldr	r2, [pc, #196]	; (f6b0 <nm_get_firmware_full_info+0x1c8>)
    f5ea:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    f5ec:	687b      	ldr	r3, [r7, #4]
    f5ee:	79db      	ldrb	r3, [r3, #7]
    f5f0:	021b      	lsls	r3, r3, #8
    f5f2:	b21a      	sxth	r2, r3
    f5f4:	687b      	ldr	r3, [r7, #4]
    f5f6:	7a1b      	ldrb	r3, [r3, #8]
    f5f8:	011b      	lsls	r3, r3, #4
    f5fa:	b21b      	sxth	r3, r3
    f5fc:	21ff      	movs	r1, #255	; 0xff
    f5fe:	400b      	ands	r3, r1
    f600:	b21b      	sxth	r3, r3
    f602:	4313      	orrs	r3, r2
    f604:	b21a      	sxth	r2, r3
    f606:	687b      	ldr	r3, [r7, #4]
    f608:	7a5b      	ldrb	r3, [r3, #9]
    f60a:	b21b      	sxth	r3, r3
    f60c:	210f      	movs	r1, #15
    f60e:	400b      	ands	r3, r1
    f610:	b21b      	sxth	r3, r3
    f612:	4313      	orrs	r3, r2
    f614:	b21a      	sxth	r2, r3
    f616:	2318      	movs	r3, #24
    f618:	18fb      	adds	r3, r7, r3
    f61a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    f61c:	231c      	movs	r3, #28
    f61e:	18fb      	adds	r3, r7, r3
    f620:	881b      	ldrh	r3, [r3, #0]
    f622:	2b00      	cmp	r3, #0
    f624:	d009      	beq.n	f63a <nm_get_firmware_full_info+0x152>
    f626:	2318      	movs	r3, #24
    f628:	18fb      	adds	r3, r7, r3
    f62a:	881b      	ldrh	r3, [r3, #0]
    f62c:	2b00      	cmp	r3, #0
    f62e:	d004      	beq.n	f63a <nm_get_firmware_full_info+0x152>
    f630:	2318      	movs	r3, #24
    f632:	18fb      	adds	r3, r7, r3
    f634:	881b      	ldrh	r3, [r3, #0]
    f636:	2b00      	cmp	r3, #0
    f638:	d104      	bne.n	f644 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    f63a:	231f      	movs	r3, #31
    f63c:	18fb      	adds	r3, r7, r3
    f63e:	22f4      	movs	r2, #244	; 0xf4
    f640:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    f642:	e022      	b.n	f68a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    f644:	231a      	movs	r3, #26
    f646:	18fa      	adds	r2, r7, r3
    f648:	2318      	movs	r3, #24
    f64a:	18fb      	adds	r3, r7, r3
    f64c:	8812      	ldrh	r2, [r2, #0]
    f64e:	881b      	ldrh	r3, [r3, #0]
    f650:	429a      	cmp	r2, r3
    f652:	d204      	bcs.n	f65e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    f654:	231f      	movs	r3, #31
    f656:	18fb      	adds	r3, r7, r3
    f658:	22f3      	movs	r2, #243	; 0xf3
    f65a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    f65c:	e015      	b.n	f68a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    f65e:	231a      	movs	r3, #26
    f660:	18fa      	adds	r2, r7, r3
    f662:	231c      	movs	r3, #28
    f664:	18fb      	adds	r3, r7, r3
    f666:	8812      	ldrh	r2, [r2, #0]
    f668:	881b      	ldrh	r3, [r3, #0]
    f66a:	429a      	cmp	r2, r3
    f66c:	d90d      	bls.n	f68a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    f66e:	231f      	movs	r3, #31
    f670:	18fb      	adds	r3, r7, r3
    f672:	22f3      	movs	r2, #243	; 0xf3
    f674:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    f676:	e008      	b.n	f68a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    f678:	231f      	movs	r3, #31
    f67a:	18fb      	adds	r3, r7, r3
    f67c:	22f4      	movs	r2, #244	; 0xf4
    f67e:	701a      	strb	r2, [r3, #0]
    f680:	e003      	b.n	f68a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    f682:	231f      	movs	r3, #31
    f684:	18fb      	adds	r3, r7, r3
    f686:	22f4      	movs	r2, #244	; 0xf4
    f688:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    f68a:	231f      	movs	r3, #31
    f68c:	18fb      	adds	r3, r7, r3
    f68e:	781b      	ldrb	r3, [r3, #0]
    f690:	b25b      	sxtb	r3, r3
}
    f692:	0018      	movs	r0, r3
    f694:	46bd      	mov	sp, r7
    f696:	b009      	add	sp, #36	; 0x24
    f698:	bd90      	pop	{r4, r7, pc}
    f69a:	46c0      	nop			; (mov r8, r8)
    f69c:	00020f1f 	.word	0x00020f1f
    f6a0:	0000d221 	.word	0x0000d221
    f6a4:	000c0008 	.word	0x000c0008
    f6a8:	0000f2b1 	.word	0x0000f2b1
    f6ac:	0000f325 	.word	0x0000f325
    f6b0:	00001354 	.word	0x00001354

0000f6b4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    f6b4:	b590      	push	{r4, r7, lr}
    f6b6:	b085      	sub	sp, #20
    f6b8:	af00      	add	r7, sp, #0
    f6ba:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    f6bc:	230f      	movs	r3, #15
    f6be:	18fb      	adds	r3, r7, r3
    f6c0:	2200      	movs	r2, #0
    f6c2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    f6c4:	687b      	ldr	r3, [r7, #4]
    f6c6:	2b00      	cmp	r3, #0
    f6c8:	d013      	beq.n	f6f2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    f6ca:	230e      	movs	r3, #14
    f6cc:	18fb      	adds	r3, r7, r3
    f6ce:	687a      	ldr	r2, [r7, #4]
    f6d0:	7812      	ldrb	r2, [r2, #0]
    f6d2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    f6d4:	230e      	movs	r3, #14
    f6d6:	18fb      	adds	r3, r7, r3
    f6d8:	781b      	ldrb	r3, [r3, #0]
    f6da:	2b00      	cmp	r3, #0
    f6dc:	d004      	beq.n	f6e8 <nm_drv_init+0x34>
    f6de:	230e      	movs	r3, #14
    f6e0:	18fb      	adds	r3, r7, r3
    f6e2:	781b      	ldrb	r3, [r3, #0]
    f6e4:	2b04      	cmp	r3, #4
    f6e6:	d908      	bls.n	f6fa <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    f6e8:	230e      	movs	r3, #14
    f6ea:	18fb      	adds	r3, r7, r3
    f6ec:	2201      	movs	r2, #1
    f6ee:	701a      	strb	r2, [r3, #0]
    f6f0:	e003      	b.n	f6fa <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    f6f2:	230e      	movs	r3, #14
    f6f4:	18fb      	adds	r3, r7, r3
    f6f6:	2201      	movs	r2, #1
    f6f8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    f6fa:	230f      	movs	r3, #15
    f6fc:	18fc      	adds	r4, r7, r3
    f6fe:	2000      	movs	r0, #0
    f700:	4b41      	ldr	r3, [pc, #260]	; (f808 <nm_drv_init+0x154>)
    f702:	4798      	blx	r3
    f704:	0003      	movs	r3, r0
    f706:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f708:	230f      	movs	r3, #15
    f70a:	18fb      	adds	r3, r7, r3
    f70c:	781b      	ldrb	r3, [r3, #0]
    f70e:	b25b      	sxtb	r3, r3
    f710:	2b00      	cmp	r3, #0
    f712:	d00f      	beq.n	f734 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    f714:	2390      	movs	r3, #144	; 0x90
    f716:	005a      	lsls	r2, r3, #1
    f718:	493c      	ldr	r1, [pc, #240]	; (f80c <nm_drv_init+0x158>)
    f71a:	4b3d      	ldr	r3, [pc, #244]	; (f810 <nm_drv_init+0x15c>)
    f71c:	0018      	movs	r0, r3
    f71e:	4b3d      	ldr	r3, [pc, #244]	; (f814 <nm_drv_init+0x160>)
    f720:	4798      	blx	r3
    f722:	4b3d      	ldr	r3, [pc, #244]	; (f818 <nm_drv_init+0x164>)
    f724:	0018      	movs	r0, r3
    f726:	4b3b      	ldr	r3, [pc, #236]	; (f814 <nm_drv_init+0x160>)
    f728:	4798      	blx	r3
    f72a:	4b3c      	ldr	r3, [pc, #240]	; (f81c <nm_drv_init+0x168>)
    f72c:	0018      	movs	r0, r3
    f72e:	4b39      	ldr	r3, [pc, #228]	; (f814 <nm_drv_init+0x160>)
    f730:	4798      	blx	r3
		goto ERR1;
    f732:	e061      	b.n	f7f8 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    f734:	4b3a      	ldr	r3, [pc, #232]	; (f820 <nm_drv_init+0x16c>)
    f736:	0018      	movs	r0, r3
    f738:	4b36      	ldr	r3, [pc, #216]	; (f814 <nm_drv_init+0x160>)
    f73a:	4798      	blx	r3
    f73c:	4b39      	ldr	r3, [pc, #228]	; (f824 <nm_drv_init+0x170>)
    f73e:	4798      	blx	r3
    f740:	0002      	movs	r2, r0
    f742:	4b39      	ldr	r3, [pc, #228]	; (f828 <nm_drv_init+0x174>)
    f744:	0011      	movs	r1, r2
    f746:	0018      	movs	r0, r3
    f748:	4b32      	ldr	r3, [pc, #200]	; (f814 <nm_drv_init+0x160>)
    f74a:	4798      	blx	r3
    f74c:	4b33      	ldr	r3, [pc, #204]	; (f81c <nm_drv_init+0x168>)
    f74e:	0018      	movs	r0, r3
    f750:	4b30      	ldr	r3, [pc, #192]	; (f814 <nm_drv_init+0x160>)
    f752:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    f754:	4b35      	ldr	r3, [pc, #212]	; (f82c <nm_drv_init+0x178>)
    f756:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    f758:	230f      	movs	r3, #15
    f75a:	18fc      	adds	r4, r7, r3
    f75c:	230e      	movs	r3, #14
    f75e:	18fb      	adds	r3, r7, r3
    f760:	781b      	ldrb	r3, [r3, #0]
    f762:	0018      	movs	r0, r3
    f764:	4b32      	ldr	r3, [pc, #200]	; (f830 <nm_drv_init+0x17c>)
    f766:	4798      	blx	r3
    f768:	0003      	movs	r3, r0
    f76a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f76c:	230f      	movs	r3, #15
    f76e:	18fb      	adds	r3, r7, r3
    f770:	781b      	ldrb	r3, [r3, #0]
    f772:	b25b      	sxtb	r3, r3
    f774:	2b00      	cmp	r3, #0
    f776:	d13a      	bne.n	f7ee <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    f778:	230f      	movs	r3, #15
    f77a:	18fc      	adds	r4, r7, r3
    f77c:	230e      	movs	r3, #14
    f77e:	18fb      	adds	r3, r7, r3
    f780:	781b      	ldrb	r3, [r3, #0]
    f782:	0018      	movs	r0, r3
    f784:	4b2b      	ldr	r3, [pc, #172]	; (f834 <nm_drv_init+0x180>)
    f786:	4798      	blx	r3
    f788:	0003      	movs	r3, r0
    f78a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f78c:	230f      	movs	r3, #15
    f78e:	18fb      	adds	r3, r7, r3
    f790:	781b      	ldrb	r3, [r3, #0]
    f792:	b25b      	sxtb	r3, r3
    f794:	2b00      	cmp	r3, #0
    f796:	d12c      	bne.n	f7f2 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    f798:	230e      	movs	r3, #14
    f79a:	18fb      	adds	r3, r7, r3
    f79c:	781b      	ldrb	r3, [r3, #0]
    f79e:	2b02      	cmp	r3, #2
    f7a0:	d02a      	beq.n	f7f8 <nm_drv_init+0x144>
    f7a2:	230e      	movs	r3, #14
    f7a4:	18fb      	adds	r3, r7, r3
    f7a6:	781b      	ldrb	r3, [r3, #0]
    f7a8:	2b03      	cmp	r3, #3
    f7aa:	d025      	beq.n	f7f8 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    f7ac:	230f      	movs	r3, #15
    f7ae:	18fc      	adds	r4, r7, r3
    f7b0:	4b21      	ldr	r3, [pc, #132]	; (f838 <nm_drv_init+0x184>)
    f7b2:	4798      	blx	r3
    f7b4:	0003      	movs	r3, r0
    f7b6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f7b8:	230f      	movs	r3, #15
    f7ba:	18fb      	adds	r3, r7, r3
    f7bc:	781b      	ldrb	r3, [r3, #0]
    f7be:	b25b      	sxtb	r3, r3
    f7c0:	2b00      	cmp	r3, #0
    f7c2:	d00f      	beq.n	f7e4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
    f7c4:	23a7      	movs	r3, #167	; 0xa7
    f7c6:	005a      	lsls	r2, r3, #1
    f7c8:	4910      	ldr	r1, [pc, #64]	; (f80c <nm_drv_init+0x158>)
    f7ca:	4b11      	ldr	r3, [pc, #68]	; (f810 <nm_drv_init+0x15c>)
    f7cc:	0018      	movs	r0, r3
    f7ce:	4b11      	ldr	r3, [pc, #68]	; (f814 <nm_drv_init+0x160>)
    f7d0:	4798      	blx	r3
    f7d2:	4b1a      	ldr	r3, [pc, #104]	; (f83c <nm_drv_init+0x188>)
    f7d4:	0018      	movs	r0, r3
    f7d6:	4b0f      	ldr	r3, [pc, #60]	; (f814 <nm_drv_init+0x160>)
    f7d8:	4798      	blx	r3
    f7da:	4b10      	ldr	r3, [pc, #64]	; (f81c <nm_drv_init+0x168>)
    f7dc:	0018      	movs	r0, r3
    f7de:	4b0d      	ldr	r3, [pc, #52]	; (f814 <nm_drv_init+0x160>)
    f7e0:	4798      	blx	r3
		goto ERR2;
    f7e2:	e007      	b.n	f7f4 <nm_drv_init+0x140>
	}
	return ret;
    f7e4:	230f      	movs	r3, #15
    f7e6:	18fb      	adds	r3, r7, r3
    f7e8:	781b      	ldrb	r3, [r3, #0]
    f7ea:	b25b      	sxtb	r3, r3
    f7ec:	e008      	b.n	f800 <nm_drv_init+0x14c>
		goto ERR2;
    f7ee:	46c0      	nop			; (mov r8, r8)
    f7f0:	e000      	b.n	f7f4 <nm_drv_init+0x140>
		goto ERR2;
    f7f2:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    f7f4:	4b12      	ldr	r3, [pc, #72]	; (f840 <nm_drv_init+0x18c>)
    f7f6:	4798      	blx	r3
ERR1:
	return ret;
    f7f8:	230f      	movs	r3, #15
    f7fa:	18fb      	adds	r3, r7, r3
    f7fc:	781b      	ldrb	r3, [r3, #0]
    f7fe:	b25b      	sxtb	r3, r3
}
    f800:	0018      	movs	r0, r3
    f802:	46bd      	mov	sp, r7
    f804:	b005      	add	sp, #20
    f806:	bd90      	pop	{r4, r7, pc}
    f808:	0000f215 	.word	0x0000f215
    f80c:	00024ea8 	.word	0x00024ea8
    f810:	00024dd8 	.word	0x00024dd8
    f814:	0000a4ed 	.word	0x0000a4ed
    f818:	00024dec 	.word	0x00024dec
    f81c:	00024e08 	.word	0x00024e08
    f820:	00024e0c 	.word	0x00024e0c
    f824:	0000ebb1 	.word	0x0000ebb1
    f828:	00024e18 	.word	0x00024e18
    f82c:	000110cd 	.word	0x000110cd
    f830:	0000ef09 	.word	0x0000ef09
    f834:	0000f0a1 	.word	0x0000f0a1
    f838:	0000eafd 	.word	0x0000eafd
    f83c:	00024e28 	.word	0x00024e28
    f840:	0000f249 	.word	0x0000f249

0000f844 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    f844:	b590      	push	{r4, r7, lr}
    f846:	b085      	sub	sp, #20
    f848:	af00      	add	r7, sp, #0
    f84a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    f84c:	230f      	movs	r3, #15
    f84e:	18fc      	adds	r4, r7, r3
    f850:	4b2e      	ldr	r3, [pc, #184]	; (f90c <nm_drv_deinit+0xc8>)
    f852:	4798      	blx	r3
    f854:	0003      	movs	r3, r0
    f856:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f858:	230f      	movs	r3, #15
    f85a:	18fb      	adds	r3, r7, r3
    f85c:	781b      	ldrb	r3, [r3, #0]
    f85e:	b25b      	sxtb	r3, r3
    f860:	2b00      	cmp	r3, #0
    f862:	d010      	beq.n	f886 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    f864:	2366      	movs	r3, #102	; 0x66
    f866:	33ff      	adds	r3, #255	; 0xff
    f868:	001a      	movs	r2, r3
    f86a:	4929      	ldr	r1, [pc, #164]	; (f910 <nm_drv_deinit+0xcc>)
    f86c:	4b29      	ldr	r3, [pc, #164]	; (f914 <nm_drv_deinit+0xd0>)
    f86e:	0018      	movs	r0, r3
    f870:	4b29      	ldr	r3, [pc, #164]	; (f918 <nm_drv_deinit+0xd4>)
    f872:	4798      	blx	r3
    f874:	4b29      	ldr	r3, [pc, #164]	; (f91c <nm_drv_deinit+0xd8>)
    f876:	0018      	movs	r0, r3
    f878:	4b27      	ldr	r3, [pc, #156]	; (f918 <nm_drv_deinit+0xd4>)
    f87a:	4798      	blx	r3
    f87c:	4b28      	ldr	r3, [pc, #160]	; (f920 <nm_drv_deinit+0xdc>)
    f87e:	0018      	movs	r0, r3
    f880:	4b25      	ldr	r3, [pc, #148]	; (f918 <nm_drv_deinit+0xd4>)
    f882:	4798      	blx	r3
		goto ERR1;
    f884:	e03a      	b.n	f8fc <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    f886:	230f      	movs	r3, #15
    f888:	18fc      	adds	r4, r7, r3
    f88a:	2000      	movs	r0, #0
    f88c:	4b25      	ldr	r3, [pc, #148]	; (f924 <nm_drv_deinit+0xe0>)
    f88e:	4798      	blx	r3
    f890:	0003      	movs	r3, r0
    f892:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f894:	230f      	movs	r3, #15
    f896:	18fb      	adds	r3, r7, r3
    f898:	781b      	ldrb	r3, [r3, #0]
    f89a:	b25b      	sxtb	r3, r3
    f89c:	2b00      	cmp	r3, #0
    f89e:	d00f      	beq.n	f8c0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    f8a0:	23b6      	movs	r3, #182	; 0xb6
    f8a2:	005a      	lsls	r2, r3, #1
    f8a4:	491a      	ldr	r1, [pc, #104]	; (f910 <nm_drv_deinit+0xcc>)
    f8a6:	4b1b      	ldr	r3, [pc, #108]	; (f914 <nm_drv_deinit+0xd0>)
    f8a8:	0018      	movs	r0, r3
    f8aa:	4b1b      	ldr	r3, [pc, #108]	; (f918 <nm_drv_deinit+0xd4>)
    f8ac:	4798      	blx	r3
    f8ae:	4b1e      	ldr	r3, [pc, #120]	; (f928 <nm_drv_deinit+0xe4>)
    f8b0:	0018      	movs	r0, r3
    f8b2:	4b19      	ldr	r3, [pc, #100]	; (f918 <nm_drv_deinit+0xd4>)
    f8b4:	4798      	blx	r3
    f8b6:	4b1a      	ldr	r3, [pc, #104]	; (f920 <nm_drv_deinit+0xdc>)
    f8b8:	0018      	movs	r0, r3
    f8ba:	4b17      	ldr	r3, [pc, #92]	; (f918 <nm_drv_deinit+0xd4>)
    f8bc:	4798      	blx	r3
		goto ERR1;
    f8be:	e01d      	b.n	f8fc <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
    f8c0:	230f      	movs	r3, #15
    f8c2:	18fc      	adds	r4, r7, r3
    f8c4:	4b19      	ldr	r3, [pc, #100]	; (f92c <nm_drv_deinit+0xe8>)
    f8c6:	4798      	blx	r3
    f8c8:	0003      	movs	r3, r0
    f8ca:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f8cc:	230f      	movs	r3, #15
    f8ce:	18fb      	adds	r3, r7, r3
    f8d0:	781b      	ldrb	r3, [r3, #0]
    f8d2:	b25b      	sxtb	r3, r3
    f8d4:	2b00      	cmp	r3, #0
    f8d6:	d00f      	beq.n	f8f8 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
    f8d8:	23b9      	movs	r3, #185	; 0xb9
    f8da:	005a      	lsls	r2, r3, #1
    f8dc:	490c      	ldr	r1, [pc, #48]	; (f910 <nm_drv_deinit+0xcc>)
    f8de:	4b0d      	ldr	r3, [pc, #52]	; (f914 <nm_drv_deinit+0xd0>)
    f8e0:	0018      	movs	r0, r3
    f8e2:	4b0d      	ldr	r3, [pc, #52]	; (f918 <nm_drv_deinit+0xd4>)
    f8e4:	4798      	blx	r3
    f8e6:	4b12      	ldr	r3, [pc, #72]	; (f930 <nm_drv_deinit+0xec>)
    f8e8:	0018      	movs	r0, r3
    f8ea:	4b0b      	ldr	r3, [pc, #44]	; (f918 <nm_drv_deinit+0xd4>)
    f8ec:	4798      	blx	r3
    f8ee:	4b0c      	ldr	r3, [pc, #48]	; (f920 <nm_drv_deinit+0xdc>)
    f8f0:	0018      	movs	r0, r3
    f8f2:	4b09      	ldr	r3, [pc, #36]	; (f918 <nm_drv_deinit+0xd4>)
    f8f4:	4798      	blx	r3
		goto ERR1;
    f8f6:	e001      	b.n	f8fc <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    f8f8:	4b0e      	ldr	r3, [pc, #56]	; (f934 <nm_drv_deinit+0xf0>)
    f8fa:	4798      	blx	r3
#endif

ERR1:
	return ret;
    f8fc:	230f      	movs	r3, #15
    f8fe:	18fb      	adds	r3, r7, r3
    f900:	781b      	ldrb	r3, [r3, #0]
    f902:	b25b      	sxtb	r3, r3
}
    f904:	0018      	movs	r0, r3
    f906:	46bd      	mov	sp, r7
    f908:	b005      	add	sp, #20
    f90a:	bd90      	pop	{r4, r7, pc}
    f90c:	0000f155 	.word	0x0000f155
    f910:	00024eb4 	.word	0x00024eb4
    f914:	00024dd8 	.word	0x00024dd8
    f918:	0000a4ed 	.word	0x0000a4ed
    f91c:	00024e48 	.word	0x00024e48
    f920:	00024e08 	.word	0x00024e08
    f924:	00012575 	.word	0x00012575
    f928:	00024e68 	.word	0x00024e68
    f92c:	0000f249 	.word	0x0000f249
    f930:	00024e8c 	.word	0x00024e8c
    f934:	00011219 	.word	0x00011219

0000f938 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    f938:	b580      	push	{r7, lr}
    f93a:	b086      	sub	sp, #24
    f93c:	af00      	add	r7, sp, #0
    f93e:	6078      	str	r0, [r7, #4]
    f940:	000a      	movs	r2, r1
    f942:	1cbb      	adds	r3, r7, #2
    f944:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    f946:	230c      	movs	r3, #12
    f948:	18fb      	adds	r3, r7, r3
    f94a:	2200      	movs	r2, #0
    f94c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    f94e:	230c      	movs	r3, #12
    f950:	18fb      	adds	r3, r7, r3
    f952:	687a      	ldr	r2, [r7, #4]
    f954:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    f956:	230c      	movs	r3, #12
    f958:	18fb      	adds	r3, r7, r3
    f95a:	1cba      	adds	r2, r7, #2
    f95c:	8812      	ldrh	r2, [r2, #0]
    f95e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    f960:	230c      	movs	r3, #12
    f962:	18fb      	adds	r3, r7, r3
    f964:	0019      	movs	r1, r3
    f966:	2003      	movs	r0, #3
    f968:	4b03      	ldr	r3, [pc, #12]	; (f978 <nmi_spi_read+0x40>)
    f96a:	4798      	blx	r3
    f96c:	0003      	movs	r3, r0
}
    f96e:	0018      	movs	r0, r3
    f970:	46bd      	mov	sp, r7
    f972:	b006      	add	sp, #24
    f974:	bd80      	pop	{r7, pc}
    f976:	46c0      	nop			; (mov r8, r8)
    f978:	0000d0e5 	.word	0x0000d0e5

0000f97c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    f97c:	b580      	push	{r7, lr}
    f97e:	b086      	sub	sp, #24
    f980:	af00      	add	r7, sp, #0
    f982:	6078      	str	r0, [r7, #4]
    f984:	000a      	movs	r2, r1
    f986:	1cbb      	adds	r3, r7, #2
    f988:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    f98a:	230c      	movs	r3, #12
    f98c:	18fb      	adds	r3, r7, r3
    f98e:	687a      	ldr	r2, [r7, #4]
    f990:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    f992:	230c      	movs	r3, #12
    f994:	18fb      	adds	r3, r7, r3
    f996:	2200      	movs	r2, #0
    f998:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    f99a:	230c      	movs	r3, #12
    f99c:	18fb      	adds	r3, r7, r3
    f99e:	1cba      	adds	r2, r7, #2
    f9a0:	8812      	ldrh	r2, [r2, #0]
    f9a2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    f9a4:	230c      	movs	r3, #12
    f9a6:	18fb      	adds	r3, r7, r3
    f9a8:	0019      	movs	r1, r3
    f9aa:	2003      	movs	r0, #3
    f9ac:	4b03      	ldr	r3, [pc, #12]	; (f9bc <nmi_spi_write+0x40>)
    f9ae:	4798      	blx	r3
    f9b0:	0003      	movs	r3, r0
}
    f9b2:	0018      	movs	r0, r3
    f9b4:	46bd      	mov	sp, r7
    f9b6:	b006      	add	sp, #24
    f9b8:	bd80      	pop	{r7, pc}
    f9ba:	46c0      	nop			; (mov r8, r8)
    f9bc:	0000d0e5 	.word	0x0000d0e5

0000f9c0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
    f9c0:	b580      	push	{r7, lr}
    f9c2:	b088      	sub	sp, #32
    f9c4:	af00      	add	r7, sp, #0
    f9c6:	60f8      	str	r0, [r7, #12]
    f9c8:	60b9      	str	r1, [r7, #8]
    f9ca:	1dbb      	adds	r3, r7, #6
    f9cc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
    f9ce:	2314      	movs	r3, #20
    f9d0:	18fb      	adds	r3, r7, r3
    f9d2:	68fa      	ldr	r2, [r7, #12]
    f9d4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
    f9d6:	2314      	movs	r3, #20
    f9d8:	18fb      	adds	r3, r7, r3
    f9da:	68ba      	ldr	r2, [r7, #8]
    f9dc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    f9de:	2314      	movs	r3, #20
    f9e0:	18fb      	adds	r3, r7, r3
    f9e2:	1dba      	adds	r2, r7, #6
    f9e4:	8812      	ldrh	r2, [r2, #0]
    f9e6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
    f9e8:	2314      	movs	r3, #20
    f9ea:	18fb      	adds	r3, r7, r3
    f9ec:	0019      	movs	r1, r3
    f9ee:	2003      	movs	r0, #3
    f9f0:	4b03      	ldr	r3, [pc, #12]	; (fa00 <nmi_spi_rw+0x40>)
    f9f2:	4798      	blx	r3
    f9f4:	0003      	movs	r3, r0
}
    f9f6:	0018      	movs	r0, r3
    f9f8:	46bd      	mov	sp, r7
    f9fa:	b008      	add	sp, #32
    f9fc:	bd80      	pop	{r7, pc}
    f9fe:	46c0      	nop			; (mov r8, r8)
    fa00:	0000d0e5 	.word	0x0000d0e5

0000fa04 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    fa04:	b580      	push	{r7, lr}
    fa06:	b082      	sub	sp, #8
    fa08:	af00      	add	r7, sp, #0
    fa0a:	0002      	movs	r2, r0
    fa0c:	1dfb      	adds	r3, r7, #7
    fa0e:	701a      	strb	r2, [r3, #0]
    fa10:	1dbb      	adds	r3, r7, #6
    fa12:	1c0a      	adds	r2, r1, #0
    fa14:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    fa16:	1dfb      	adds	r3, r7, #7
    fa18:	781b      	ldrb	r3, [r3, #0]
    fa1a:	005a      	lsls	r2, r3, #1
    fa1c:	1dbb      	adds	r3, r7, #6
    fa1e:	781b      	ldrb	r3, [r3, #0]
    fa20:	4053      	eors	r3, r2
    fa22:	4a03      	ldr	r2, [pc, #12]	; (fa30 <crc7_byte+0x2c>)
    fa24:	5cd3      	ldrb	r3, [r2, r3]
}
    fa26:	0018      	movs	r0, r3
    fa28:	46bd      	mov	sp, r7
    fa2a:	b002      	add	sp, #8
    fa2c:	bd80      	pop	{r7, pc}
    fa2e:	46c0      	nop			; (mov r8, r8)
    fa30:	00024ec4 	.word	0x00024ec4

0000fa34 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    fa34:	b590      	push	{r4, r7, lr}
    fa36:	b085      	sub	sp, #20
    fa38:	af00      	add	r7, sp, #0
    fa3a:	60b9      	str	r1, [r7, #8]
    fa3c:	607a      	str	r2, [r7, #4]
    fa3e:	230f      	movs	r3, #15
    fa40:	18fb      	adds	r3, r7, r3
    fa42:	1c02      	adds	r2, r0, #0
    fa44:	701a      	strb	r2, [r3, #0]
	while (len--)
    fa46:	e00e      	b.n	fa66 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    fa48:	68bb      	ldr	r3, [r7, #8]
    fa4a:	1c5a      	adds	r2, r3, #1
    fa4c:	60ba      	str	r2, [r7, #8]
    fa4e:	781a      	ldrb	r2, [r3, #0]
    fa50:	230f      	movs	r3, #15
    fa52:	18fc      	adds	r4, r7, r3
    fa54:	230f      	movs	r3, #15
    fa56:	18fb      	adds	r3, r7, r3
    fa58:	781b      	ldrb	r3, [r3, #0]
    fa5a:	0011      	movs	r1, r2
    fa5c:	0018      	movs	r0, r3
    fa5e:	4b08      	ldr	r3, [pc, #32]	; (fa80 <crc7+0x4c>)
    fa60:	4798      	blx	r3
    fa62:	0003      	movs	r3, r0
    fa64:	7023      	strb	r3, [r4, #0]
	while (len--)
    fa66:	687b      	ldr	r3, [r7, #4]
    fa68:	1e5a      	subs	r2, r3, #1
    fa6a:	607a      	str	r2, [r7, #4]
    fa6c:	2b00      	cmp	r3, #0
    fa6e:	d1eb      	bne.n	fa48 <crc7+0x14>
	return crc;
    fa70:	230f      	movs	r3, #15
    fa72:	18fb      	adds	r3, r7, r3
    fa74:	781b      	ldrb	r3, [r3, #0]
}
    fa76:	0018      	movs	r0, r3
    fa78:	46bd      	mov	sp, r7
    fa7a:	b005      	add	sp, #20
    fa7c:	bd90      	pop	{r4, r7, pc}
    fa7e:	46c0      	nop			; (mov r8, r8)
    fa80:	0000fa05 	.word	0x0000fa05

0000fa84 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    fa84:	b590      	push	{r4, r7, lr}
    fa86:	b089      	sub	sp, #36	; 0x24
    fa88:	af00      	add	r7, sp, #0
    fa8a:	60b9      	str	r1, [r7, #8]
    fa8c:	607a      	str	r2, [r7, #4]
    fa8e:	603b      	str	r3, [r7, #0]
    fa90:	230f      	movs	r3, #15
    fa92:	18fb      	adds	r3, r7, r3
    fa94:	1c02      	adds	r2, r0, #0
    fa96:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    fa98:	231f      	movs	r3, #31
    fa9a:	18fb      	adds	r3, r7, r3
    fa9c:	2205      	movs	r2, #5
    fa9e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    faa0:	231e      	movs	r3, #30
    faa2:	18fb      	adds	r3, r7, r3
    faa4:	2201      	movs	r2, #1
    faa6:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    faa8:	2314      	movs	r3, #20
    faaa:	18fb      	adds	r3, r7, r3
    faac:	220f      	movs	r2, #15
    faae:	18ba      	adds	r2, r7, r2
    fab0:	7812      	ldrb	r2, [r2, #0]
    fab2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    fab4:	230f      	movs	r3, #15
    fab6:	18fb      	adds	r3, r7, r3
    fab8:	781b      	ldrb	r3, [r3, #0]
    faba:	3bc1      	subs	r3, #193	; 0xc1
    fabc:	2b0e      	cmp	r3, #14
    fabe:	d900      	bls.n	fac2 <spi_cmd+0x3e>
    fac0:	e11b      	b.n	fcfa <spi_cmd+0x276>
    fac2:	009a      	lsls	r2, r3, #2
    fac4:	4bb6      	ldr	r3, [pc, #728]	; (fda0 <spi_cmd+0x31c>)
    fac6:	18d3      	adds	r3, r2, r3
    fac8:	681b      	ldr	r3, [r3, #0]
    faca:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    facc:	68bb      	ldr	r3, [r7, #8]
    face:	0c1b      	lsrs	r3, r3, #16
    fad0:	b2da      	uxtb	r2, r3
    fad2:	2314      	movs	r3, #20
    fad4:	18fb      	adds	r3, r7, r3
    fad6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    fad8:	68bb      	ldr	r3, [r7, #8]
    fada:	0a1b      	lsrs	r3, r3, #8
    fadc:	b2da      	uxtb	r2, r3
    fade:	2314      	movs	r3, #20
    fae0:	18fb      	adds	r3, r7, r3
    fae2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    fae4:	68bb      	ldr	r3, [r7, #8]
    fae6:	b2da      	uxtb	r2, r3
    fae8:	2314      	movs	r3, #20
    faea:	18fb      	adds	r3, r7, r3
    faec:	70da      	strb	r2, [r3, #3]
		len = 5;
    faee:	231f      	movs	r3, #31
    faf0:	18fb      	adds	r3, r7, r3
    faf2:	2205      	movs	r2, #5
    faf4:	701a      	strb	r2, [r3, #0]
		break;
    faf6:	e105      	b.n	fd04 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    faf8:	68bb      	ldr	r3, [r7, #8]
    fafa:	0a1b      	lsrs	r3, r3, #8
    fafc:	b2da      	uxtb	r2, r3
    fafe:	2314      	movs	r3, #20
    fb00:	18fb      	adds	r3, r7, r3
    fb02:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    fb04:	2330      	movs	r3, #48	; 0x30
    fb06:	18fb      	adds	r3, r7, r3
    fb08:	781b      	ldrb	r3, [r3, #0]
    fb0a:	2b00      	cmp	r3, #0
    fb0c:	d009      	beq.n	fb22 <spi_cmd+0x9e>
    fb0e:	2314      	movs	r3, #20
    fb10:	18fb      	adds	r3, r7, r3
    fb12:	785b      	ldrb	r3, [r3, #1]
    fb14:	2280      	movs	r2, #128	; 0x80
    fb16:	4252      	negs	r2, r2
    fb18:	4313      	orrs	r3, r2
    fb1a:	b2da      	uxtb	r2, r3
    fb1c:	2314      	movs	r3, #20
    fb1e:	18fb      	adds	r3, r7, r3
    fb20:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    fb22:	68bb      	ldr	r3, [r7, #8]
    fb24:	b2da      	uxtb	r2, r3
    fb26:	2314      	movs	r3, #20
    fb28:	18fb      	adds	r3, r7, r3
    fb2a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    fb2c:	2314      	movs	r3, #20
    fb2e:	18fb      	adds	r3, r7, r3
    fb30:	2200      	movs	r2, #0
    fb32:	70da      	strb	r2, [r3, #3]
		len = 5;
    fb34:	231f      	movs	r3, #31
    fb36:	18fb      	adds	r3, r7, r3
    fb38:	2205      	movs	r2, #5
    fb3a:	701a      	strb	r2, [r3, #0]
		break;
    fb3c:	e0e2      	b.n	fd04 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    fb3e:	2314      	movs	r3, #20
    fb40:	18fb      	adds	r3, r7, r3
    fb42:	2200      	movs	r2, #0
    fb44:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    fb46:	2314      	movs	r3, #20
    fb48:	18fb      	adds	r3, r7, r3
    fb4a:	2200      	movs	r2, #0
    fb4c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    fb4e:	2314      	movs	r3, #20
    fb50:	18fb      	adds	r3, r7, r3
    fb52:	2200      	movs	r2, #0
    fb54:	70da      	strb	r2, [r3, #3]
		len = 5;
    fb56:	231f      	movs	r3, #31
    fb58:	18fb      	adds	r3, r7, r3
    fb5a:	2205      	movs	r2, #5
    fb5c:	701a      	strb	r2, [r3, #0]
		break;
    fb5e:	e0d1      	b.n	fd04 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    fb60:	2314      	movs	r3, #20
    fb62:	18fb      	adds	r3, r7, r3
    fb64:	2200      	movs	r2, #0
    fb66:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    fb68:	2314      	movs	r3, #20
    fb6a:	18fb      	adds	r3, r7, r3
    fb6c:	2200      	movs	r2, #0
    fb6e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    fb70:	2314      	movs	r3, #20
    fb72:	18fb      	adds	r3, r7, r3
    fb74:	2200      	movs	r2, #0
    fb76:	70da      	strb	r2, [r3, #3]
		len = 5;
    fb78:	231f      	movs	r3, #31
    fb7a:	18fb      	adds	r3, r7, r3
    fb7c:	2205      	movs	r2, #5
    fb7e:	701a      	strb	r2, [r3, #0]
		break;
    fb80:	e0c0      	b.n	fd04 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    fb82:	2314      	movs	r3, #20
    fb84:	18fb      	adds	r3, r7, r3
    fb86:	22ff      	movs	r2, #255	; 0xff
    fb88:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    fb8a:	2314      	movs	r3, #20
    fb8c:	18fb      	adds	r3, r7, r3
    fb8e:	22ff      	movs	r2, #255	; 0xff
    fb90:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    fb92:	2314      	movs	r3, #20
    fb94:	18fb      	adds	r3, r7, r3
    fb96:	22ff      	movs	r2, #255	; 0xff
    fb98:	70da      	strb	r2, [r3, #3]
		len = 5;
    fb9a:	231f      	movs	r3, #31
    fb9c:	18fb      	adds	r3, r7, r3
    fb9e:	2205      	movs	r2, #5
    fba0:	701a      	strb	r2, [r3, #0]
		break;
    fba2:	e0af      	b.n	fd04 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    fba4:	68bb      	ldr	r3, [r7, #8]
    fba6:	0c1b      	lsrs	r3, r3, #16
    fba8:	b2da      	uxtb	r2, r3
    fbaa:	2314      	movs	r3, #20
    fbac:	18fb      	adds	r3, r7, r3
    fbae:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    fbb0:	68bb      	ldr	r3, [r7, #8]
    fbb2:	0a1b      	lsrs	r3, r3, #8
    fbb4:	b2da      	uxtb	r2, r3
    fbb6:	2314      	movs	r3, #20
    fbb8:	18fb      	adds	r3, r7, r3
    fbba:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    fbbc:	68bb      	ldr	r3, [r7, #8]
    fbbe:	b2da      	uxtb	r2, r3
    fbc0:	2314      	movs	r3, #20
    fbc2:	18fb      	adds	r3, r7, r3
    fbc4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    fbc6:	683b      	ldr	r3, [r7, #0]
    fbc8:	0a1b      	lsrs	r3, r3, #8
    fbca:	b2da      	uxtb	r2, r3
    fbcc:	2314      	movs	r3, #20
    fbce:	18fb      	adds	r3, r7, r3
    fbd0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    fbd2:	683b      	ldr	r3, [r7, #0]
    fbd4:	b2da      	uxtb	r2, r3
    fbd6:	2314      	movs	r3, #20
    fbd8:	18fb      	adds	r3, r7, r3
    fbda:	715a      	strb	r2, [r3, #5]
		len = 7;
    fbdc:	231f      	movs	r3, #31
    fbde:	18fb      	adds	r3, r7, r3
    fbe0:	2207      	movs	r2, #7
    fbe2:	701a      	strb	r2, [r3, #0]
		break;
    fbe4:	e08e      	b.n	fd04 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    fbe6:	68bb      	ldr	r3, [r7, #8]
    fbe8:	0c1b      	lsrs	r3, r3, #16
    fbea:	b2da      	uxtb	r2, r3
    fbec:	2314      	movs	r3, #20
    fbee:	18fb      	adds	r3, r7, r3
    fbf0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    fbf2:	68bb      	ldr	r3, [r7, #8]
    fbf4:	0a1b      	lsrs	r3, r3, #8
    fbf6:	b2da      	uxtb	r2, r3
    fbf8:	2314      	movs	r3, #20
    fbfa:	18fb      	adds	r3, r7, r3
    fbfc:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    fbfe:	68bb      	ldr	r3, [r7, #8]
    fc00:	b2da      	uxtb	r2, r3
    fc02:	2314      	movs	r3, #20
    fc04:	18fb      	adds	r3, r7, r3
    fc06:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    fc08:	683b      	ldr	r3, [r7, #0]
    fc0a:	0c1b      	lsrs	r3, r3, #16
    fc0c:	b2da      	uxtb	r2, r3
    fc0e:	2314      	movs	r3, #20
    fc10:	18fb      	adds	r3, r7, r3
    fc12:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    fc14:	683b      	ldr	r3, [r7, #0]
    fc16:	0a1b      	lsrs	r3, r3, #8
    fc18:	b2da      	uxtb	r2, r3
    fc1a:	2314      	movs	r3, #20
    fc1c:	18fb      	adds	r3, r7, r3
    fc1e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    fc20:	683b      	ldr	r3, [r7, #0]
    fc22:	b2da      	uxtb	r2, r3
    fc24:	2314      	movs	r3, #20
    fc26:	18fb      	adds	r3, r7, r3
    fc28:	719a      	strb	r2, [r3, #6]
		len = 8;
    fc2a:	231f      	movs	r3, #31
    fc2c:	18fb      	adds	r3, r7, r3
    fc2e:	2208      	movs	r2, #8
    fc30:	701a      	strb	r2, [r3, #0]
		break;
    fc32:	e067      	b.n	fd04 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    fc34:	68bb      	ldr	r3, [r7, #8]
    fc36:	0a1b      	lsrs	r3, r3, #8
    fc38:	b2da      	uxtb	r2, r3
    fc3a:	2314      	movs	r3, #20
    fc3c:	18fb      	adds	r3, r7, r3
    fc3e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    fc40:	2330      	movs	r3, #48	; 0x30
    fc42:	18fb      	adds	r3, r7, r3
    fc44:	781b      	ldrb	r3, [r3, #0]
    fc46:	2b00      	cmp	r3, #0
    fc48:	d009      	beq.n	fc5e <spi_cmd+0x1da>
    fc4a:	2314      	movs	r3, #20
    fc4c:	18fb      	adds	r3, r7, r3
    fc4e:	785b      	ldrb	r3, [r3, #1]
    fc50:	2280      	movs	r2, #128	; 0x80
    fc52:	4252      	negs	r2, r2
    fc54:	4313      	orrs	r3, r2
    fc56:	b2da      	uxtb	r2, r3
    fc58:	2314      	movs	r3, #20
    fc5a:	18fb      	adds	r3, r7, r3
    fc5c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    fc5e:	68bb      	ldr	r3, [r7, #8]
    fc60:	b2da      	uxtb	r2, r3
    fc62:	2314      	movs	r3, #20
    fc64:	18fb      	adds	r3, r7, r3
    fc66:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    fc68:	687b      	ldr	r3, [r7, #4]
    fc6a:	0e1b      	lsrs	r3, r3, #24
    fc6c:	b2da      	uxtb	r2, r3
    fc6e:	2314      	movs	r3, #20
    fc70:	18fb      	adds	r3, r7, r3
    fc72:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    fc74:	687b      	ldr	r3, [r7, #4]
    fc76:	0c1b      	lsrs	r3, r3, #16
    fc78:	b2da      	uxtb	r2, r3
    fc7a:	2314      	movs	r3, #20
    fc7c:	18fb      	adds	r3, r7, r3
    fc7e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    fc80:	687b      	ldr	r3, [r7, #4]
    fc82:	0a1b      	lsrs	r3, r3, #8
    fc84:	b2da      	uxtb	r2, r3
    fc86:	2314      	movs	r3, #20
    fc88:	18fb      	adds	r3, r7, r3
    fc8a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    fc8c:	687b      	ldr	r3, [r7, #4]
    fc8e:	b2da      	uxtb	r2, r3
    fc90:	2314      	movs	r3, #20
    fc92:	18fb      	adds	r3, r7, r3
    fc94:	719a      	strb	r2, [r3, #6]
		len = 8;
    fc96:	231f      	movs	r3, #31
    fc98:	18fb      	adds	r3, r7, r3
    fc9a:	2208      	movs	r2, #8
    fc9c:	701a      	strb	r2, [r3, #0]
		break;
    fc9e:	e031      	b.n	fd04 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    fca0:	68bb      	ldr	r3, [r7, #8]
    fca2:	0c1b      	lsrs	r3, r3, #16
    fca4:	b2da      	uxtb	r2, r3
    fca6:	2314      	movs	r3, #20
    fca8:	18fb      	adds	r3, r7, r3
    fcaa:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    fcac:	68bb      	ldr	r3, [r7, #8]
    fcae:	0a1b      	lsrs	r3, r3, #8
    fcb0:	b2da      	uxtb	r2, r3
    fcb2:	2314      	movs	r3, #20
    fcb4:	18fb      	adds	r3, r7, r3
    fcb6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    fcb8:	68bb      	ldr	r3, [r7, #8]
    fcba:	b2da      	uxtb	r2, r3
    fcbc:	2314      	movs	r3, #20
    fcbe:	18fb      	adds	r3, r7, r3
    fcc0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    fcc2:	687b      	ldr	r3, [r7, #4]
    fcc4:	0e1b      	lsrs	r3, r3, #24
    fcc6:	b2da      	uxtb	r2, r3
    fcc8:	2314      	movs	r3, #20
    fcca:	18fb      	adds	r3, r7, r3
    fccc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    fcce:	687b      	ldr	r3, [r7, #4]
    fcd0:	0c1b      	lsrs	r3, r3, #16
    fcd2:	b2da      	uxtb	r2, r3
    fcd4:	2314      	movs	r3, #20
    fcd6:	18fb      	adds	r3, r7, r3
    fcd8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    fcda:	687b      	ldr	r3, [r7, #4]
    fcdc:	0a1b      	lsrs	r3, r3, #8
    fcde:	b2da      	uxtb	r2, r3
    fce0:	2314      	movs	r3, #20
    fce2:	18fb      	adds	r3, r7, r3
    fce4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    fce6:	687b      	ldr	r3, [r7, #4]
    fce8:	b2da      	uxtb	r2, r3
    fcea:	2314      	movs	r3, #20
    fcec:	18fb      	adds	r3, r7, r3
    fcee:	71da      	strb	r2, [r3, #7]
		len = 9;
    fcf0:	231f      	movs	r3, #31
    fcf2:	18fb      	adds	r3, r7, r3
    fcf4:	2209      	movs	r2, #9
    fcf6:	701a      	strb	r2, [r3, #0]
		break;
    fcf8:	e004      	b.n	fd04 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    fcfa:	231e      	movs	r3, #30
    fcfc:	18fb      	adds	r3, r7, r3
    fcfe:	2200      	movs	r2, #0
    fd00:	701a      	strb	r2, [r3, #0]
		break;
    fd02:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    fd04:	231e      	movs	r3, #30
    fd06:	18fb      	adds	r3, r7, r3
    fd08:	781b      	ldrb	r3, [r3, #0]
    fd0a:	b25b      	sxtb	r3, r3
    fd0c:	2b00      	cmp	r3, #0
    fd0e:	d03f      	beq.n	fd90 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    fd10:	4b24      	ldr	r3, [pc, #144]	; (fda4 <spi_cmd+0x320>)
    fd12:	781b      	ldrb	r3, [r3, #0]
    fd14:	2b00      	cmp	r3, #0
    fd16:	d115      	bne.n	fd44 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    fd18:	231f      	movs	r3, #31
    fd1a:	18fb      	adds	r3, r7, r3
    fd1c:	781b      	ldrb	r3, [r3, #0]
    fd1e:	1e5c      	subs	r4, r3, #1
    fd20:	231f      	movs	r3, #31
    fd22:	18fb      	adds	r3, r7, r3
    fd24:	781b      	ldrb	r3, [r3, #0]
    fd26:	3b01      	subs	r3, #1
    fd28:	001a      	movs	r2, r3
    fd2a:	2314      	movs	r3, #20
    fd2c:	18fb      	adds	r3, r7, r3
    fd2e:	0019      	movs	r1, r3
    fd30:	207f      	movs	r0, #127	; 0x7f
    fd32:	4b1d      	ldr	r3, [pc, #116]	; (fda8 <spi_cmd+0x324>)
    fd34:	4798      	blx	r3
    fd36:	0003      	movs	r3, r0
    fd38:	18db      	adds	r3, r3, r3
    fd3a:	b2da      	uxtb	r2, r3
    fd3c:	2314      	movs	r3, #20
    fd3e:	18fb      	adds	r3, r7, r3
    fd40:	551a      	strb	r2, [r3, r4]
    fd42:	e006      	b.n	fd52 <spi_cmd+0x2ce>
		else
			len-=1;
    fd44:	231f      	movs	r3, #31
    fd46:	18fb      	adds	r3, r7, r3
    fd48:	221f      	movs	r2, #31
    fd4a:	18ba      	adds	r2, r7, r2
    fd4c:	7812      	ldrb	r2, [r2, #0]
    fd4e:	3a01      	subs	r2, #1
    fd50:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    fd52:	231f      	movs	r3, #31
    fd54:	18fb      	adds	r3, r7, r3
    fd56:	781b      	ldrb	r3, [r3, #0]
    fd58:	b29a      	uxth	r2, r3
    fd5a:	2314      	movs	r3, #20
    fd5c:	18fb      	adds	r3, r7, r3
    fd5e:	0011      	movs	r1, r2
    fd60:	0018      	movs	r0, r3
    fd62:	4b12      	ldr	r3, [pc, #72]	; (fdac <spi_cmd+0x328>)
    fd64:	4798      	blx	r3
    fd66:	1e03      	subs	r3, r0, #0
    fd68:	d012      	beq.n	fd90 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    fd6a:	2390      	movs	r3, #144	; 0x90
    fd6c:	005a      	lsls	r2, r3, #1
    fd6e:	4910      	ldr	r1, [pc, #64]	; (fdb0 <spi_cmd+0x32c>)
    fd70:	4b10      	ldr	r3, [pc, #64]	; (fdb4 <spi_cmd+0x330>)
    fd72:	0018      	movs	r0, r3
    fd74:	4b10      	ldr	r3, [pc, #64]	; (fdb8 <spi_cmd+0x334>)
    fd76:	4798      	blx	r3
    fd78:	4b10      	ldr	r3, [pc, #64]	; (fdbc <spi_cmd+0x338>)
    fd7a:	0018      	movs	r0, r3
    fd7c:	4b0e      	ldr	r3, [pc, #56]	; (fdb8 <spi_cmd+0x334>)
    fd7e:	4798      	blx	r3
    fd80:	4b0f      	ldr	r3, [pc, #60]	; (fdc0 <spi_cmd+0x33c>)
    fd82:	0018      	movs	r0, r3
    fd84:	4b0c      	ldr	r3, [pc, #48]	; (fdb8 <spi_cmd+0x334>)
    fd86:	4798      	blx	r3
			result = N_FAIL;
    fd88:	231e      	movs	r3, #30
    fd8a:	18fb      	adds	r3, r7, r3
    fd8c:	2200      	movs	r2, #0
    fd8e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    fd90:	231e      	movs	r3, #30
    fd92:	18fb      	adds	r3, r7, r3
    fd94:	781b      	ldrb	r3, [r3, #0]
    fd96:	b25b      	sxtb	r3, r3
}
    fd98:	0018      	movs	r0, r3
    fd9a:	46bd      	mov	sp, r7
    fd9c:	b009      	add	sp, #36	; 0x24
    fd9e:	bd90      	pop	{r4, r7, pc}
    fda0:	0002553c 	.word	0x0002553c
    fda4:	20003d3c 	.word	0x20003d3c
    fda8:	0000fa35 	.word	0x0000fa35
    fdac:	0000f97d 	.word	0x0000f97d
    fdb0:	000255b4 	.word	0x000255b4
    fdb4:	00024fc4 	.word	0x00024fc4
    fdb8:	0000a4ed 	.word	0x0000a4ed
    fdbc:	00024fd8 	.word	0x00024fd8
    fdc0:	00025004 	.word	0x00025004

0000fdc4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    fdc4:	b590      	push	{r4, r7, lr}
    fdc6:	b085      	sub	sp, #20
    fdc8:	af00      	add	r7, sp, #0
    fdca:	0002      	movs	r2, r0
    fdcc:	1dfb      	adds	r3, r7, #7
    fdce:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    fdd0:	230e      	movs	r3, #14
    fdd2:	18fb      	adds	r3, r7, r3
    fdd4:	2201      	movs	r2, #1
    fdd6:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    fdd8:	4b32      	ldr	r3, [pc, #200]	; (fea4 <spi_data_rsp+0xe0>)
    fdda:	781b      	ldrb	r3, [r3, #0]
    fddc:	2b00      	cmp	r3, #0
    fdde:	d104      	bne.n	fdea <spi_data_rsp+0x26>
		len = 2;
    fde0:	230f      	movs	r3, #15
    fde2:	18fb      	adds	r3, r7, r3
    fde4:	2202      	movs	r2, #2
    fde6:	701a      	strb	r2, [r3, #0]
    fde8:	e003      	b.n	fdf2 <spi_data_rsp+0x2e>
	else
		len = 3;
    fdea:	230f      	movs	r3, #15
    fdec:	18fb      	adds	r3, r7, r3
    fdee:	2203      	movs	r2, #3
    fdf0:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    fdf2:	230f      	movs	r3, #15
    fdf4:	18fb      	adds	r3, r7, r3
    fdf6:	781b      	ldrb	r3, [r3, #0]
    fdf8:	b29a      	uxth	r2, r3
    fdfa:	2308      	movs	r3, #8
    fdfc:	18fb      	adds	r3, r7, r3
    fdfe:	0011      	movs	r1, r2
    fe00:	0018      	movs	r0, r3
    fe02:	4b29      	ldr	r3, [pc, #164]	; (fea8 <spi_data_rsp+0xe4>)
    fe04:	4798      	blx	r3
    fe06:	1e03      	subs	r3, r0, #0
    fe08:	d013      	beq.n	fe32 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    fe0a:	239a      	movs	r3, #154	; 0x9a
    fe0c:	005a      	lsls	r2, r3, #1
    fe0e:	4927      	ldr	r1, [pc, #156]	; (feac <spi_data_rsp+0xe8>)
    fe10:	4b27      	ldr	r3, [pc, #156]	; (feb0 <spi_data_rsp+0xec>)
    fe12:	0018      	movs	r0, r3
    fe14:	4b27      	ldr	r3, [pc, #156]	; (feb4 <spi_data_rsp+0xf0>)
    fe16:	4798      	blx	r3
    fe18:	4b27      	ldr	r3, [pc, #156]	; (feb8 <spi_data_rsp+0xf4>)
    fe1a:	0018      	movs	r0, r3
    fe1c:	4b25      	ldr	r3, [pc, #148]	; (feb4 <spi_data_rsp+0xf0>)
    fe1e:	4798      	blx	r3
    fe20:	4b26      	ldr	r3, [pc, #152]	; (febc <spi_data_rsp+0xf8>)
    fe22:	0018      	movs	r0, r3
    fe24:	4b23      	ldr	r3, [pc, #140]	; (feb4 <spi_data_rsp+0xf0>)
    fe26:	4798      	blx	r3
		result = N_FAIL;
    fe28:	230e      	movs	r3, #14
    fe2a:	18fb      	adds	r3, r7, r3
    fe2c:	2200      	movs	r2, #0
    fe2e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    fe30:	e030      	b.n	fe94 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    fe32:	230f      	movs	r3, #15
    fe34:	18fb      	adds	r3, r7, r3
    fe36:	781b      	ldrb	r3, [r3, #0]
    fe38:	3b01      	subs	r3, #1
    fe3a:	2208      	movs	r2, #8
    fe3c:	18ba      	adds	r2, r7, r2
    fe3e:	5cd3      	ldrb	r3, [r2, r3]
    fe40:	2b00      	cmp	r3, #0
    fe42:	d108      	bne.n	fe56 <spi_data_rsp+0x92>
    fe44:	230f      	movs	r3, #15
    fe46:	18fb      	adds	r3, r7, r3
    fe48:	781b      	ldrb	r3, [r3, #0]
    fe4a:	3b02      	subs	r3, #2
    fe4c:	2208      	movs	r2, #8
    fe4e:	18ba      	adds	r2, r7, r2
    fe50:	5cd3      	ldrb	r3, [r2, r3]
    fe52:	2bc3      	cmp	r3, #195	; 0xc3
    fe54:	d01e      	beq.n	fe94 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    fe56:	233c      	movs	r3, #60	; 0x3c
    fe58:	33ff      	adds	r3, #255	; 0xff
    fe5a:	001a      	movs	r2, r3
    fe5c:	4913      	ldr	r1, [pc, #76]	; (feac <spi_data_rsp+0xe8>)
    fe5e:	4b14      	ldr	r3, [pc, #80]	; (feb0 <spi_data_rsp+0xec>)
    fe60:	0018      	movs	r0, r3
    fe62:	4b14      	ldr	r3, [pc, #80]	; (feb4 <spi_data_rsp+0xf0>)
    fe64:	4798      	blx	r3
    fe66:	2308      	movs	r3, #8
    fe68:	18fb      	adds	r3, r7, r3
    fe6a:	781b      	ldrb	r3, [r3, #0]
    fe6c:	0019      	movs	r1, r3
    fe6e:	2308      	movs	r3, #8
    fe70:	18fb      	adds	r3, r7, r3
    fe72:	785b      	ldrb	r3, [r3, #1]
    fe74:	001a      	movs	r2, r3
    fe76:	2308      	movs	r3, #8
    fe78:	18fb      	adds	r3, r7, r3
    fe7a:	789b      	ldrb	r3, [r3, #2]
    fe7c:	4810      	ldr	r0, [pc, #64]	; (fec0 <spi_data_rsp+0xfc>)
    fe7e:	4c0d      	ldr	r4, [pc, #52]	; (feb4 <spi_data_rsp+0xf0>)
    fe80:	47a0      	blx	r4
    fe82:	4b0e      	ldr	r3, [pc, #56]	; (febc <spi_data_rsp+0xf8>)
    fe84:	0018      	movs	r0, r3
    fe86:	4b0b      	ldr	r3, [pc, #44]	; (feb4 <spi_data_rsp+0xf0>)
    fe88:	4798      	blx	r3
		result = N_FAIL;
    fe8a:	230e      	movs	r3, #14
    fe8c:	18fb      	adds	r3, r7, r3
    fe8e:	2200      	movs	r2, #0
    fe90:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    fe92:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    fe94:	230e      	movs	r3, #14
    fe96:	18fb      	adds	r3, r7, r3
    fe98:	781b      	ldrb	r3, [r3, #0]
    fe9a:	b25b      	sxtb	r3, r3
}
    fe9c:	0018      	movs	r0, r3
    fe9e:	46bd      	mov	sp, r7
    fea0:	b005      	add	sp, #20
    fea2:	bd90      	pop	{r4, r7, pc}
    fea4:	20003d3c 	.word	0x20003d3c
    fea8:	0000f939 	.word	0x0000f939
    feac:	000255bc 	.word	0x000255bc
    feb0:	00024fc4 	.word	0x00024fc4
    feb4:	0000a4ed 	.word	0x0000a4ed
    feb8:	00025008 	.word	0x00025008
    febc:	00025004 	.word	0x00025004
    fec0:	00025028 	.word	0x00025028

0000fec4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    fec4:	b580      	push	{r7, lr}
    fec6:	b084      	sub	sp, #16
    fec8:	af00      	add	r7, sp, #0
    feca:	0002      	movs	r2, r0
    fecc:	1dfb      	adds	r3, r7, #7
    fece:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    fed0:	230f      	movs	r3, #15
    fed2:	18fb      	adds	r3, r7, r3
    fed4:	2201      	movs	r2, #1
    fed6:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    fed8:	1dfb      	adds	r3, r7, #7
    feda:	781b      	ldrb	r3, [r3, #0]
    fedc:	2bcf      	cmp	r3, #207	; 0xcf
    fede:	d007      	beq.n	fef0 <spi_cmd_rsp+0x2c>
    fee0:	1dfb      	adds	r3, r7, #7
    fee2:	781b      	ldrb	r3, [r3, #0]
    fee4:	2bc5      	cmp	r3, #197	; 0xc5
    fee6:	d003      	beq.n	fef0 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    fee8:	1dfb      	adds	r3, r7, #7
    feea:	781b      	ldrb	r3, [r3, #0]
    feec:	2bc6      	cmp	r3, #198	; 0xc6
    feee:	d10c      	bne.n	ff0a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    fef0:	230d      	movs	r3, #13
    fef2:	18fb      	adds	r3, r7, r3
    fef4:	2101      	movs	r1, #1
    fef6:	0018      	movs	r0, r3
    fef8:	4b3b      	ldr	r3, [pc, #236]	; (ffe8 <spi_cmd_rsp+0x124>)
    fefa:	4798      	blx	r3
    fefc:	1e03      	subs	r3, r0, #0
    fefe:	d004      	beq.n	ff0a <spi_cmd_rsp+0x46>
			result = N_FAIL;
    ff00:	230f      	movs	r3, #15
    ff02:	18fb      	adds	r3, r7, r3
    ff04:	2200      	movs	r2, #0
    ff06:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    ff08:	e065      	b.n	ffd6 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    ff0a:	230e      	movs	r3, #14
    ff0c:	18fb      	adds	r3, r7, r3
    ff0e:	220a      	movs	r2, #10
    ff10:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    ff12:	230d      	movs	r3, #13
    ff14:	18fb      	adds	r3, r7, r3
    ff16:	2101      	movs	r1, #1
    ff18:	0018      	movs	r0, r3
    ff1a:	4b33      	ldr	r3, [pc, #204]	; (ffe8 <spi_cmd_rsp+0x124>)
    ff1c:	4798      	blx	r3
    ff1e:	1e03      	subs	r3, r0, #0
    ff20:	d014      	beq.n	ff4c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    ff22:	235c      	movs	r3, #92	; 0x5c
    ff24:	33ff      	adds	r3, #255	; 0xff
    ff26:	001a      	movs	r2, r3
    ff28:	4930      	ldr	r1, [pc, #192]	; (ffec <spi_cmd_rsp+0x128>)
    ff2a:	4b31      	ldr	r3, [pc, #196]	; (fff0 <spi_cmd_rsp+0x12c>)
    ff2c:	0018      	movs	r0, r3
    ff2e:	4b31      	ldr	r3, [pc, #196]	; (fff4 <spi_cmd_rsp+0x130>)
    ff30:	4798      	blx	r3
    ff32:	4b31      	ldr	r3, [pc, #196]	; (fff8 <spi_cmd_rsp+0x134>)
    ff34:	0018      	movs	r0, r3
    ff36:	4b2f      	ldr	r3, [pc, #188]	; (fff4 <spi_cmd_rsp+0x130>)
    ff38:	4798      	blx	r3
    ff3a:	4b30      	ldr	r3, [pc, #192]	; (fffc <spi_cmd_rsp+0x138>)
    ff3c:	0018      	movs	r0, r3
    ff3e:	4b2d      	ldr	r3, [pc, #180]	; (fff4 <spi_cmd_rsp+0x130>)
    ff40:	4798      	blx	r3
			result = N_FAIL;
    ff42:	230f      	movs	r3, #15
    ff44:	18fb      	adds	r3, r7, r3
    ff46:	2200      	movs	r2, #0
    ff48:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    ff4a:	e044      	b.n	ffd6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    ff4c:	230d      	movs	r3, #13
    ff4e:	18fb      	adds	r3, r7, r3
    ff50:	781b      	ldrb	r3, [r3, #0]
    ff52:	1dfa      	adds	r2, r7, #7
    ff54:	7812      	ldrb	r2, [r2, #0]
    ff56:	429a      	cmp	r2, r3
    ff58:	d00b      	beq.n	ff72 <spi_cmd_rsp+0xae>
    ff5a:	230e      	movs	r3, #14
    ff5c:	18fb      	adds	r3, r7, r3
    ff5e:	781b      	ldrb	r3, [r3, #0]
    ff60:	b25b      	sxtb	r3, r3
    ff62:	b2da      	uxtb	r2, r3
    ff64:	3a01      	subs	r2, #1
    ff66:	b2d1      	uxtb	r1, r2
    ff68:	220e      	movs	r2, #14
    ff6a:	18ba      	adds	r2, r7, r2
    ff6c:	7011      	strb	r1, [r2, #0]
    ff6e:	2b00      	cmp	r3, #0
    ff70:	dccf      	bgt.n	ff12 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    ff72:	230e      	movs	r3, #14
    ff74:	18fb      	adds	r3, r7, r3
    ff76:	220a      	movs	r2, #10
    ff78:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    ff7a:	230d      	movs	r3, #13
    ff7c:	18fb      	adds	r3, r7, r3
    ff7e:	2101      	movs	r1, #1
    ff80:	0018      	movs	r0, r3
    ff82:	4b19      	ldr	r3, [pc, #100]	; (ffe8 <spi_cmd_rsp+0x124>)
    ff84:	4798      	blx	r3
    ff86:	1e03      	subs	r3, r0, #0
    ff88:	d014      	beq.n	ffb4 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    ff8a:	236a      	movs	r3, #106	; 0x6a
    ff8c:	33ff      	adds	r3, #255	; 0xff
    ff8e:	001a      	movs	r2, r3
    ff90:	4916      	ldr	r1, [pc, #88]	; (ffec <spi_cmd_rsp+0x128>)
    ff92:	4b17      	ldr	r3, [pc, #92]	; (fff0 <spi_cmd_rsp+0x12c>)
    ff94:	0018      	movs	r0, r3
    ff96:	4b17      	ldr	r3, [pc, #92]	; (fff4 <spi_cmd_rsp+0x130>)
    ff98:	4798      	blx	r3
    ff9a:	4b17      	ldr	r3, [pc, #92]	; (fff8 <spi_cmd_rsp+0x134>)
    ff9c:	0018      	movs	r0, r3
    ff9e:	4b15      	ldr	r3, [pc, #84]	; (fff4 <spi_cmd_rsp+0x130>)
    ffa0:	4798      	blx	r3
    ffa2:	4b16      	ldr	r3, [pc, #88]	; (fffc <spi_cmd_rsp+0x138>)
    ffa4:	0018      	movs	r0, r3
    ffa6:	4b13      	ldr	r3, [pc, #76]	; (fff4 <spi_cmd_rsp+0x130>)
    ffa8:	4798      	blx	r3
			result = N_FAIL;
    ffaa:	230f      	movs	r3, #15
    ffac:	18fb      	adds	r3, r7, r3
    ffae:	2200      	movs	r2, #0
    ffb0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    ffb2:	e010      	b.n	ffd6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    ffb4:	230d      	movs	r3, #13
    ffb6:	18fb      	adds	r3, r7, r3
    ffb8:	781b      	ldrb	r3, [r3, #0]
    ffba:	2b00      	cmp	r3, #0
    ffbc:	d00b      	beq.n	ffd6 <spi_cmd_rsp+0x112>
    ffbe:	230e      	movs	r3, #14
    ffc0:	18fb      	adds	r3, r7, r3
    ffc2:	781b      	ldrb	r3, [r3, #0]
    ffc4:	b25b      	sxtb	r3, r3
    ffc6:	b2da      	uxtb	r2, r3
    ffc8:	3a01      	subs	r2, #1
    ffca:	b2d1      	uxtb	r1, r2
    ffcc:	220e      	movs	r2, #14
    ffce:	18ba      	adds	r2, r7, r2
    ffd0:	7011      	strb	r1, [r2, #0]
    ffd2:	2b00      	cmp	r3, #0
    ffd4:	dcd1      	bgt.n	ff7a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
    ffd6:	230f      	movs	r3, #15
    ffd8:	18fb      	adds	r3, r7, r3
    ffda:	781b      	ldrb	r3, [r3, #0]
    ffdc:	b25b      	sxtb	r3, r3
}
    ffde:	0018      	movs	r0, r3
    ffe0:	46bd      	mov	sp, r7
    ffe2:	b004      	add	sp, #16
    ffe4:	bd80      	pop	{r7, pc}
    ffe6:	46c0      	nop			; (mov r8, r8)
    ffe8:	0000f939 	.word	0x0000f939
    ffec:	000255cc 	.word	0x000255cc
    fff0:	00024fc4 	.word	0x00024fc4
    fff4:	0000a4ed 	.word	0x0000a4ed
    fff8:	00025058 	.word	0x00025058
    fffc:	00025004 	.word	0x00025004

00010000 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   10000:	b590      	push	{r4, r7, lr}
   10002:	b09f      	sub	sp, #124	; 0x7c
   10004:	af00      	add	r7, sp, #0
   10006:	60b9      	str	r1, [r7, #8]
   10008:	607a      	str	r2, [r7, #4]
   1000a:	603b      	str	r3, [r7, #0]
   1000c:	230f      	movs	r3, #15
   1000e:	18fb      	adds	r3, r7, r3
   10010:	1c02      	adds	r2, r0, #0
   10012:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   10014:	2300      	movs	r3, #0
   10016:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   10018:	2301      	movs	r3, #1
   1001a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   1001c:	2338      	movs	r3, #56	; 0x38
   1001e:	18fb      	adds	r3, r7, r3
   10020:	220f      	movs	r2, #15
   10022:	18ba      	adds	r2, r7, r2
   10024:	7812      	ldrb	r2, [r2, #0]
   10026:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   10028:	230f      	movs	r3, #15
   1002a:	18fb      	adds	r3, r7, r3
   1002c:	781b      	ldrb	r3, [r3, #0]
   1002e:	3bc1      	subs	r3, #193	; 0xc1
   10030:	2b0e      	cmp	r3, #14
   10032:	d900      	bls.n	10036 <spi_cmd_complete+0x36>
   10034:	e103      	b.n	1023e <spi_cmd_complete+0x23e>
   10036:	009a      	lsls	r2, r3, #2
   10038:	4bd1      	ldr	r3, [pc, #836]	; (10380 <spi_cmd_complete+0x380>)
   1003a:	18d3      	adds	r3, r2, r3
   1003c:	681b      	ldr	r3, [r3, #0]
   1003e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   10040:	68bb      	ldr	r3, [r7, #8]
   10042:	0c1b      	lsrs	r3, r3, #16
   10044:	b2da      	uxtb	r2, r3
   10046:	2338      	movs	r3, #56	; 0x38
   10048:	18fb      	adds	r3, r7, r3
   1004a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1004c:	68bb      	ldr	r3, [r7, #8]
   1004e:	0a1b      	lsrs	r3, r3, #8
   10050:	b2da      	uxtb	r2, r3
   10052:	2338      	movs	r3, #56	; 0x38
   10054:	18fb      	adds	r3, r7, r3
   10056:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   10058:	68bb      	ldr	r3, [r7, #8]
   1005a:	b2da      	uxtb	r2, r3
   1005c:	2338      	movs	r3, #56	; 0x38
   1005e:	18fb      	adds	r3, r7, r3
   10060:	70da      	strb	r2, [r3, #3]
		len = 5;
   10062:	2305      	movs	r3, #5
   10064:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   10066:	e0ed      	b.n	10244 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   10068:	68bb      	ldr	r3, [r7, #8]
   1006a:	0a1b      	lsrs	r3, r3, #8
   1006c:	b2da      	uxtb	r2, r3
   1006e:	2338      	movs	r3, #56	; 0x38
   10070:	18fb      	adds	r3, r7, r3
   10072:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   10074:	2388      	movs	r3, #136	; 0x88
   10076:	18fb      	adds	r3, r7, r3
   10078:	781b      	ldrb	r3, [r3, #0]
   1007a:	2b01      	cmp	r3, #1
   1007c:	d109      	bne.n	10092 <spi_cmd_complete+0x92>
   1007e:	2338      	movs	r3, #56	; 0x38
   10080:	18fb      	adds	r3, r7, r3
   10082:	785b      	ldrb	r3, [r3, #1]
   10084:	2280      	movs	r2, #128	; 0x80
   10086:	4252      	negs	r2, r2
   10088:	4313      	orrs	r3, r2
   1008a:	b2da      	uxtb	r2, r3
   1008c:	2338      	movs	r3, #56	; 0x38
   1008e:	18fb      	adds	r3, r7, r3
   10090:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   10092:	68bb      	ldr	r3, [r7, #8]
   10094:	b2da      	uxtb	r2, r3
   10096:	2338      	movs	r3, #56	; 0x38
   10098:	18fb      	adds	r3, r7, r3
   1009a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   1009c:	2338      	movs	r3, #56	; 0x38
   1009e:	18fb      	adds	r3, r7, r3
   100a0:	2200      	movs	r2, #0
   100a2:	70da      	strb	r2, [r3, #3]
		len = 5;
   100a4:	2305      	movs	r3, #5
   100a6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   100a8:	e0cc      	b.n	10244 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   100aa:	2338      	movs	r3, #56	; 0x38
   100ac:	18fb      	adds	r3, r7, r3
   100ae:	2200      	movs	r2, #0
   100b0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   100b2:	2338      	movs	r3, #56	; 0x38
   100b4:	18fb      	adds	r3, r7, r3
   100b6:	2200      	movs	r2, #0
   100b8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   100ba:	2338      	movs	r3, #56	; 0x38
   100bc:	18fb      	adds	r3, r7, r3
   100be:	2200      	movs	r2, #0
   100c0:	70da      	strb	r2, [r3, #3]
		len = 5;
   100c2:	2305      	movs	r3, #5
   100c4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   100c6:	e0bd      	b.n	10244 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   100c8:	2338      	movs	r3, #56	; 0x38
   100ca:	18fb      	adds	r3, r7, r3
   100cc:	2200      	movs	r2, #0
   100ce:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   100d0:	2338      	movs	r3, #56	; 0x38
   100d2:	18fb      	adds	r3, r7, r3
   100d4:	2200      	movs	r2, #0
   100d6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   100d8:	2338      	movs	r3, #56	; 0x38
   100da:	18fb      	adds	r3, r7, r3
   100dc:	2200      	movs	r2, #0
   100de:	70da      	strb	r2, [r3, #3]
		len = 5;
   100e0:	2305      	movs	r3, #5
   100e2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   100e4:	e0ae      	b.n	10244 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   100e6:	2338      	movs	r3, #56	; 0x38
   100e8:	18fb      	adds	r3, r7, r3
   100ea:	22ff      	movs	r2, #255	; 0xff
   100ec:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   100ee:	2338      	movs	r3, #56	; 0x38
   100f0:	18fb      	adds	r3, r7, r3
   100f2:	22ff      	movs	r2, #255	; 0xff
   100f4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   100f6:	2338      	movs	r3, #56	; 0x38
   100f8:	18fb      	adds	r3, r7, r3
   100fa:	22ff      	movs	r2, #255	; 0xff
   100fc:	70da      	strb	r2, [r3, #3]
		len = 5;
   100fe:	2305      	movs	r3, #5
   10100:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   10102:	e09f      	b.n	10244 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   10104:	68bb      	ldr	r3, [r7, #8]
   10106:	0c1b      	lsrs	r3, r3, #16
   10108:	b2da      	uxtb	r2, r3
   1010a:	2338      	movs	r3, #56	; 0x38
   1010c:	18fb      	adds	r3, r7, r3
   1010e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   10110:	68bb      	ldr	r3, [r7, #8]
   10112:	0a1b      	lsrs	r3, r3, #8
   10114:	b2da      	uxtb	r2, r3
   10116:	2338      	movs	r3, #56	; 0x38
   10118:	18fb      	adds	r3, r7, r3
   1011a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1011c:	68bb      	ldr	r3, [r7, #8]
   1011e:	b2da      	uxtb	r2, r3
   10120:	2338      	movs	r3, #56	; 0x38
   10122:	18fb      	adds	r3, r7, r3
   10124:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   10126:	683b      	ldr	r3, [r7, #0]
   10128:	0a1b      	lsrs	r3, r3, #8
   1012a:	b2da      	uxtb	r2, r3
   1012c:	2338      	movs	r3, #56	; 0x38
   1012e:	18fb      	adds	r3, r7, r3
   10130:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   10132:	683b      	ldr	r3, [r7, #0]
   10134:	b2da      	uxtb	r2, r3
   10136:	2338      	movs	r3, #56	; 0x38
   10138:	18fb      	adds	r3, r7, r3
   1013a:	715a      	strb	r2, [r3, #5]
		len = 7;
   1013c:	2307      	movs	r3, #7
   1013e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   10140:	e080      	b.n	10244 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   10142:	68bb      	ldr	r3, [r7, #8]
   10144:	0c1b      	lsrs	r3, r3, #16
   10146:	b2da      	uxtb	r2, r3
   10148:	2338      	movs	r3, #56	; 0x38
   1014a:	18fb      	adds	r3, r7, r3
   1014c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1014e:	68bb      	ldr	r3, [r7, #8]
   10150:	0a1b      	lsrs	r3, r3, #8
   10152:	b2da      	uxtb	r2, r3
   10154:	2338      	movs	r3, #56	; 0x38
   10156:	18fb      	adds	r3, r7, r3
   10158:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1015a:	68bb      	ldr	r3, [r7, #8]
   1015c:	b2da      	uxtb	r2, r3
   1015e:	2338      	movs	r3, #56	; 0x38
   10160:	18fb      	adds	r3, r7, r3
   10162:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   10164:	683b      	ldr	r3, [r7, #0]
   10166:	0c1b      	lsrs	r3, r3, #16
   10168:	b2da      	uxtb	r2, r3
   1016a:	2338      	movs	r3, #56	; 0x38
   1016c:	18fb      	adds	r3, r7, r3
   1016e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   10170:	683b      	ldr	r3, [r7, #0]
   10172:	0a1b      	lsrs	r3, r3, #8
   10174:	b2da      	uxtb	r2, r3
   10176:	2338      	movs	r3, #56	; 0x38
   10178:	18fb      	adds	r3, r7, r3
   1017a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   1017c:	683b      	ldr	r3, [r7, #0]
   1017e:	b2da      	uxtb	r2, r3
   10180:	2338      	movs	r3, #56	; 0x38
   10182:	18fb      	adds	r3, r7, r3
   10184:	719a      	strb	r2, [r3, #6]
		len = 8;
   10186:	2308      	movs	r3, #8
   10188:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   1018a:	e05b      	b.n	10244 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   1018c:	68bb      	ldr	r3, [r7, #8]
   1018e:	0a1b      	lsrs	r3, r3, #8
   10190:	b2da      	uxtb	r2, r3
   10192:	2338      	movs	r3, #56	; 0x38
   10194:	18fb      	adds	r3, r7, r3
   10196:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   10198:	2388      	movs	r3, #136	; 0x88
   1019a:	18fb      	adds	r3, r7, r3
   1019c:	781b      	ldrb	r3, [r3, #0]
   1019e:	2b01      	cmp	r3, #1
   101a0:	d109      	bne.n	101b6 <spi_cmd_complete+0x1b6>
   101a2:	2338      	movs	r3, #56	; 0x38
   101a4:	18fb      	adds	r3, r7, r3
   101a6:	785b      	ldrb	r3, [r3, #1]
   101a8:	2280      	movs	r2, #128	; 0x80
   101aa:	4252      	negs	r2, r2
   101ac:	4313      	orrs	r3, r2
   101ae:	b2da      	uxtb	r2, r3
   101b0:	2338      	movs	r3, #56	; 0x38
   101b2:	18fb      	adds	r3, r7, r3
   101b4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   101b6:	68bb      	ldr	r3, [r7, #8]
   101b8:	b2da      	uxtb	r2, r3
   101ba:	2338      	movs	r3, #56	; 0x38
   101bc:	18fb      	adds	r3, r7, r3
   101be:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   101c0:	687b      	ldr	r3, [r7, #4]
   101c2:	78da      	ldrb	r2, [r3, #3]
   101c4:	2338      	movs	r3, #56	; 0x38
   101c6:	18fb      	adds	r3, r7, r3
   101c8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   101ca:	687b      	ldr	r3, [r7, #4]
   101cc:	789a      	ldrb	r2, [r3, #2]
   101ce:	2338      	movs	r3, #56	; 0x38
   101d0:	18fb      	adds	r3, r7, r3
   101d2:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   101d4:	687b      	ldr	r3, [r7, #4]
   101d6:	785a      	ldrb	r2, [r3, #1]
   101d8:	2338      	movs	r3, #56	; 0x38
   101da:	18fb      	adds	r3, r7, r3
   101dc:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   101de:	687b      	ldr	r3, [r7, #4]
   101e0:	781a      	ldrb	r2, [r3, #0]
   101e2:	2338      	movs	r3, #56	; 0x38
   101e4:	18fb      	adds	r3, r7, r3
   101e6:	719a      	strb	r2, [r3, #6]
		len = 8;
   101e8:	2308      	movs	r3, #8
   101ea:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   101ec:	e02a      	b.n	10244 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   101ee:	68bb      	ldr	r3, [r7, #8]
   101f0:	0c1b      	lsrs	r3, r3, #16
   101f2:	b2da      	uxtb	r2, r3
   101f4:	2338      	movs	r3, #56	; 0x38
   101f6:	18fb      	adds	r3, r7, r3
   101f8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   101fa:	68bb      	ldr	r3, [r7, #8]
   101fc:	0a1b      	lsrs	r3, r3, #8
   101fe:	b2da      	uxtb	r2, r3
   10200:	2338      	movs	r3, #56	; 0x38
   10202:	18fb      	adds	r3, r7, r3
   10204:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   10206:	68bb      	ldr	r3, [r7, #8]
   10208:	b2da      	uxtb	r2, r3
   1020a:	2338      	movs	r3, #56	; 0x38
   1020c:	18fb      	adds	r3, r7, r3
   1020e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   10210:	687b      	ldr	r3, [r7, #4]
   10212:	78da      	ldrb	r2, [r3, #3]
   10214:	2338      	movs	r3, #56	; 0x38
   10216:	18fb      	adds	r3, r7, r3
   10218:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   1021a:	687b      	ldr	r3, [r7, #4]
   1021c:	789a      	ldrb	r2, [r3, #2]
   1021e:	2338      	movs	r3, #56	; 0x38
   10220:	18fb      	adds	r3, r7, r3
   10222:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   10224:	687b      	ldr	r3, [r7, #4]
   10226:	785a      	ldrb	r2, [r3, #1]
   10228:	2338      	movs	r3, #56	; 0x38
   1022a:	18fb      	adds	r3, r7, r3
   1022c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   1022e:	687b      	ldr	r3, [r7, #4]
   10230:	781a      	ldrb	r2, [r3, #0]
   10232:	2338      	movs	r3, #56	; 0x38
   10234:	18fb      	adds	r3, r7, r3
   10236:	71da      	strb	r2, [r3, #7]
		len = 9;
   10238:	2309      	movs	r3, #9
   1023a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   1023c:	e002      	b.n	10244 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   1023e:	2300      	movs	r3, #0
   10240:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   10242:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   10244:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10246:	2b01      	cmp	r3, #1
   10248:	d001      	beq.n	1024e <spi_cmd_complete+0x24e>
		return result;
   1024a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1024c:	e33a      	b.n	108c4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   1024e:	4b4d      	ldr	r3, [pc, #308]	; (10384 <spi_cmd_complete+0x384>)
   10250:	781b      	ldrb	r3, [r3, #0]
   10252:	2b00      	cmp	r3, #0
   10254:	d111      	bne.n	1027a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   10256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   10258:	1e5c      	subs	r4, r3, #1
   1025a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1025c:	3b01      	subs	r3, #1
   1025e:	001a      	movs	r2, r3
   10260:	2338      	movs	r3, #56	; 0x38
   10262:	18fb      	adds	r3, r7, r3
   10264:	0019      	movs	r1, r3
   10266:	207f      	movs	r0, #127	; 0x7f
   10268:	4b47      	ldr	r3, [pc, #284]	; (10388 <spi_cmd_complete+0x388>)
   1026a:	4798      	blx	r3
   1026c:	0003      	movs	r3, r0
   1026e:	18db      	adds	r3, r3, r3
   10270:	b2da      	uxtb	r2, r3
   10272:	2338      	movs	r3, #56	; 0x38
   10274:	18fb      	adds	r3, r7, r3
   10276:	551a      	strb	r2, [r3, r4]
   10278:	e002      	b.n	10280 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   1027a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1027c:	3b01      	subs	r3, #1
   1027e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   10280:	230f      	movs	r3, #15
   10282:	18fb      	adds	r3, r7, r3
   10284:	781b      	ldrb	r3, [r3, #0]
   10286:	2bcf      	cmp	r3, #207	; 0xcf
   10288:	d009      	beq.n	1029e <spi_cmd_complete+0x29e>
   1028a:	230f      	movs	r3, #15
   1028c:	18fb      	adds	r3, r7, r3
   1028e:	781b      	ldrb	r3, [r3, #0]
   10290:	2bc5      	cmp	r3, #197	; 0xc5
   10292:	d004      	beq.n	1029e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   10294:	230f      	movs	r3, #15
   10296:	18fb      	adds	r3, r7, r3
   10298:	781b      	ldrb	r3, [r3, #0]
   1029a:	2bc6      	cmp	r3, #198	; 0xc6
   1029c:	d103      	bne.n	102a6 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   1029e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   102a0:	3306      	adds	r3, #6
   102a2:	673b      	str	r3, [r7, #112]	; 0x70
   102a4:	e018      	b.n	102d8 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   102a6:	230f      	movs	r3, #15
   102a8:	18fb      	adds	r3, r7, r3
   102aa:	781b      	ldrb	r3, [r3, #0]
   102ac:	2bc4      	cmp	r3, #196	; 0xc4
   102ae:	d004      	beq.n	102ba <spi_cmd_complete+0x2ba>
   102b0:	230f      	movs	r3, #15
   102b2:	18fb      	adds	r3, r7, r3
   102b4:	781b      	ldrb	r3, [r3, #0]
   102b6:	2bca      	cmp	r3, #202	; 0xca
   102b8:	d10b      	bne.n	102d2 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   102ba:	4b32      	ldr	r3, [pc, #200]	; (10384 <spi_cmd_complete+0x384>)
   102bc:	781b      	ldrb	r3, [r3, #0]
   102be:	2b00      	cmp	r3, #0
   102c0:	d103      	bne.n	102ca <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   102c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   102c4:	330c      	adds	r3, #12
   102c6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   102c8:	e006      	b.n	102d8 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   102ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   102cc:	330a      	adds	r3, #10
   102ce:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   102d0:	e002      	b.n	102d8 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   102d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   102d4:	3305      	adds	r3, #5
   102d6:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   102d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   102da:	2b20      	cmp	r3, #32
   102dc:	d914      	bls.n	10308 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   102de:	23f7      	movs	r3, #247	; 0xf7
   102e0:	005a      	lsls	r2, r3, #1
   102e2:	492a      	ldr	r1, [pc, #168]	; (1038c <spi_cmd_complete+0x38c>)
   102e4:	4b2a      	ldr	r3, [pc, #168]	; (10390 <spi_cmd_complete+0x390>)
   102e6:	0018      	movs	r0, r3
   102e8:	4b2a      	ldr	r3, [pc, #168]	; (10394 <spi_cmd_complete+0x394>)
   102ea:	4798      	blx	r3
   102ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
   102ee:	4b2a      	ldr	r3, [pc, #168]	; (10398 <spi_cmd_complete+0x398>)
   102f0:	2220      	movs	r2, #32
   102f2:	0018      	movs	r0, r3
   102f4:	4b27      	ldr	r3, [pc, #156]	; (10394 <spi_cmd_complete+0x394>)
   102f6:	4798      	blx	r3
   102f8:	4b28      	ldr	r3, [pc, #160]	; (1039c <spi_cmd_complete+0x39c>)
   102fa:	0018      	movs	r0, r3
   102fc:	4b25      	ldr	r3, [pc, #148]	; (10394 <spi_cmd_complete+0x394>)
   102fe:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   10300:	2300      	movs	r3, #0
   10302:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   10304:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10306:	e2dd      	b.n	108c4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   10308:	2377      	movs	r3, #119	; 0x77
   1030a:	18fb      	adds	r3, r7, r3
   1030c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1030e:	701a      	strb	r2, [r3, #0]
   10310:	e00d      	b.n	1032e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   10312:	2377      	movs	r3, #119	; 0x77
   10314:	18fb      	adds	r3, r7, r3
   10316:	781b      	ldrb	r3, [r3, #0]
   10318:	2238      	movs	r2, #56	; 0x38
   1031a:	18ba      	adds	r2, r7, r2
   1031c:	2100      	movs	r1, #0
   1031e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   10320:	2377      	movs	r3, #119	; 0x77
   10322:	18fb      	adds	r3, r7, r3
   10324:	781a      	ldrb	r2, [r3, #0]
   10326:	2377      	movs	r3, #119	; 0x77
   10328:	18fb      	adds	r3, r7, r3
   1032a:	3201      	adds	r2, #1
   1032c:	701a      	strb	r2, [r3, #0]
   1032e:	2377      	movs	r3, #119	; 0x77
   10330:	18fb      	adds	r3, r7, r3
   10332:	781a      	ldrb	r2, [r3, #0]
   10334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   10336:	429a      	cmp	r2, r3
   10338:	d3eb      	bcc.n	10312 <spi_cmd_complete+0x312>
	}
	rix = len;
   1033a:	2376      	movs	r3, #118	; 0x76
   1033c:	18fb      	adds	r3, r7, r3
   1033e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   10340:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   10342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   10344:	b29a      	uxth	r2, r3
   10346:	2318      	movs	r3, #24
   10348:	18f9      	adds	r1, r7, r3
   1034a:	2338      	movs	r3, #56	; 0x38
   1034c:	18fb      	adds	r3, r7, r3
   1034e:	0018      	movs	r0, r3
   10350:	4b13      	ldr	r3, [pc, #76]	; (103a0 <spi_cmd_complete+0x3a0>)
   10352:	4798      	blx	r3
   10354:	1e03      	subs	r3, r0, #0
   10356:	d027      	beq.n	103a8 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   10358:	23fa      	movs	r3, #250	; 0xfa
   1035a:	33ff      	adds	r3, #255	; 0xff
   1035c:	001a      	movs	r2, r3
   1035e:	490b      	ldr	r1, [pc, #44]	; (1038c <spi_cmd_complete+0x38c>)
   10360:	4b0b      	ldr	r3, [pc, #44]	; (10390 <spi_cmd_complete+0x390>)
   10362:	0018      	movs	r0, r3
   10364:	4b0b      	ldr	r3, [pc, #44]	; (10394 <spi_cmd_complete+0x394>)
   10366:	4798      	blx	r3
   10368:	4b0e      	ldr	r3, [pc, #56]	; (103a4 <spi_cmd_complete+0x3a4>)
   1036a:	0018      	movs	r0, r3
   1036c:	4b09      	ldr	r3, [pc, #36]	; (10394 <spi_cmd_complete+0x394>)
   1036e:	4798      	blx	r3
   10370:	4b0a      	ldr	r3, [pc, #40]	; (1039c <spi_cmd_complete+0x39c>)
   10372:	0018      	movs	r0, r3
   10374:	4b07      	ldr	r3, [pc, #28]	; (10394 <spi_cmd_complete+0x394>)
   10376:	4798      	blx	r3
		result = N_FAIL;
   10378:	2300      	movs	r3, #0
   1037a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   1037c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1037e:	e2a1      	b.n	108c4 <spi_cmd_complete+0x8c4>
   10380:	00025578 	.word	0x00025578
   10384:	20003d3c 	.word	0x20003d3c
   10388:	0000fa35 	.word	0x0000fa35
   1038c:	000255d8 	.word	0x000255d8
   10390:	00024fc4 	.word	0x00024fc4
   10394:	0000a4ed 	.word	0x0000a4ed
   10398:	0002508c 	.word	0x0002508c
   1039c:	00025004 	.word	0x00025004
   103a0:	0000f9c1 	.word	0x0000f9c1
   103a4:	00024fd8 	.word	0x00024fd8
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   103a8:	230f      	movs	r3, #15
   103aa:	18fb      	adds	r3, r7, r3
   103ac:	781b      	ldrb	r3, [r3, #0]
   103ae:	2bcf      	cmp	r3, #207	; 0xcf
   103b0:	d009      	beq.n	103c6 <spi_cmd_complete+0x3c6>
   103b2:	230f      	movs	r3, #15
   103b4:	18fb      	adds	r3, r7, r3
   103b6:	781b      	ldrb	r3, [r3, #0]
   103b8:	2bc5      	cmp	r3, #197	; 0xc5
   103ba:	d004      	beq.n	103c6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   103bc:	230f      	movs	r3, #15
   103be:	18fb      	adds	r3, r7, r3
   103c0:	781b      	ldrb	r3, [r3, #0]
   103c2:	2bc6      	cmp	r3, #198	; 0xc6
   103c4:	d106      	bne.n	103d4 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   103c6:	2376      	movs	r3, #118	; 0x76
   103c8:	18fb      	adds	r3, r7, r3
   103ca:	781a      	ldrb	r2, [r3, #0]
   103cc:	2376      	movs	r3, #118	; 0x76
   103ce:	18fb      	adds	r3, r7, r3
   103d0:	3201      	adds	r2, #1
   103d2:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   103d4:	2376      	movs	r3, #118	; 0x76
   103d6:	18fb      	adds	r3, r7, r3
   103d8:	781b      	ldrb	r3, [r3, #0]
   103da:	2276      	movs	r2, #118	; 0x76
   103dc:	18ba      	adds	r2, r7, r2
   103de:	1c59      	adds	r1, r3, #1
   103e0:	7011      	strb	r1, [r2, #0]
   103e2:	001a      	movs	r2, r3
   103e4:	2318      	movs	r3, #24
   103e6:	18fb      	adds	r3, r7, r3
   103e8:	5c9a      	ldrb	r2, [r3, r2]
   103ea:	2317      	movs	r3, #23
   103ec:	18fb      	adds	r3, r7, r3
   103ee:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   103f0:	2317      	movs	r3, #23
   103f2:	18fb      	adds	r3, r7, r3
   103f4:	781b      	ldrb	r3, [r3, #0]
   103f6:	220f      	movs	r2, #15
   103f8:	18ba      	adds	r2, r7, r2
   103fa:	7812      	ldrb	r2, [r2, #0]
   103fc:	429a      	cmp	r2, r3
   103fe:	d018      	beq.n	10432 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   10400:	4add      	ldr	r2, [pc, #884]	; (10778 <spi_cmd_complete+0x778>)
   10402:	49de      	ldr	r1, [pc, #888]	; (1077c <spi_cmd_complete+0x77c>)
   10404:	4bde      	ldr	r3, [pc, #888]	; (10780 <spi_cmd_complete+0x780>)
   10406:	0018      	movs	r0, r3
   10408:	4bde      	ldr	r3, [pc, #888]	; (10784 <spi_cmd_complete+0x784>)
   1040a:	4798      	blx	r3
   1040c:	230f      	movs	r3, #15
   1040e:	18fb      	adds	r3, r7, r3
   10410:	7819      	ldrb	r1, [r3, #0]
   10412:	2317      	movs	r3, #23
   10414:	18fb      	adds	r3, r7, r3
   10416:	781b      	ldrb	r3, [r3, #0]
   10418:	001a      	movs	r2, r3
   1041a:	4bdb      	ldr	r3, [pc, #876]	; (10788 <spi_cmd_complete+0x788>)
   1041c:	0018      	movs	r0, r3
   1041e:	4bd9      	ldr	r3, [pc, #868]	; (10784 <spi_cmd_complete+0x784>)
   10420:	4798      	blx	r3
   10422:	4bda      	ldr	r3, [pc, #872]	; (1078c <spi_cmd_complete+0x78c>)
   10424:	0018      	movs	r0, r3
   10426:	4bd7      	ldr	r3, [pc, #860]	; (10784 <spi_cmd_complete+0x784>)
   10428:	4798      	blx	r3
		result = N_FAIL;
   1042a:	2300      	movs	r3, #0
   1042c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   1042e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10430:	e248      	b.n	108c4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   10432:	2376      	movs	r3, #118	; 0x76
   10434:	18fb      	adds	r3, r7, r3
   10436:	781b      	ldrb	r3, [r3, #0]
   10438:	2276      	movs	r2, #118	; 0x76
   1043a:	18ba      	adds	r2, r7, r2
   1043c:	1c59      	adds	r1, r3, #1
   1043e:	7011      	strb	r1, [r2, #0]
   10440:	001a      	movs	r2, r3
   10442:	2318      	movs	r3, #24
   10444:	18fb      	adds	r3, r7, r3
   10446:	5c9a      	ldrb	r2, [r3, r2]
   10448:	2317      	movs	r3, #23
   1044a:	18fb      	adds	r3, r7, r3
   1044c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   1044e:	2317      	movs	r3, #23
   10450:	18fb      	adds	r3, r7, r3
   10452:	781b      	ldrb	r3, [r3, #0]
   10454:	2b00      	cmp	r3, #0
   10456:	d016      	beq.n	10486 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   10458:	4acd      	ldr	r2, [pc, #820]	; (10790 <spi_cmd_complete+0x790>)
   1045a:	49c8      	ldr	r1, [pc, #800]	; (1077c <spi_cmd_complete+0x77c>)
   1045c:	4bc8      	ldr	r3, [pc, #800]	; (10780 <spi_cmd_complete+0x780>)
   1045e:	0018      	movs	r0, r3
   10460:	4bc8      	ldr	r3, [pc, #800]	; (10784 <spi_cmd_complete+0x784>)
   10462:	4798      	blx	r3
   10464:	2317      	movs	r3, #23
   10466:	18fb      	adds	r3, r7, r3
   10468:	781b      	ldrb	r3, [r3, #0]
   1046a:	001a      	movs	r2, r3
   1046c:	4bc9      	ldr	r3, [pc, #804]	; (10794 <spi_cmd_complete+0x794>)
   1046e:	0011      	movs	r1, r2
   10470:	0018      	movs	r0, r3
   10472:	4bc4      	ldr	r3, [pc, #784]	; (10784 <spi_cmd_complete+0x784>)
   10474:	4798      	blx	r3
   10476:	4bc5      	ldr	r3, [pc, #788]	; (1078c <spi_cmd_complete+0x78c>)
   10478:	0018      	movs	r0, r3
   1047a:	4bc2      	ldr	r3, [pc, #776]	; (10784 <spi_cmd_complete+0x784>)
   1047c:	4798      	blx	r3
		result = N_FAIL;
   1047e:	2300      	movs	r3, #0
   10480:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   10482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10484:	e21e      	b.n	108c4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   10486:	230f      	movs	r3, #15
   10488:	18fb      	adds	r3, r7, r3
   1048a:	781b      	ldrb	r3, [r3, #0]
   1048c:	2bc4      	cmp	r3, #196	; 0xc4
   1048e:	d00f      	beq.n	104b0 <spi_cmd_complete+0x4b0>
   10490:	230f      	movs	r3, #15
   10492:	18fb      	adds	r3, r7, r3
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	2bca      	cmp	r3, #202	; 0xca
   10498:	d00a      	beq.n	104b0 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1049a:	230f      	movs	r3, #15
   1049c:	18fb      	adds	r3, r7, r3
   1049e:	781b      	ldrb	r3, [r3, #0]
   104a0:	2bc2      	cmp	r3, #194	; 0xc2
   104a2:	d005      	beq.n	104b0 <spi_cmd_complete+0x4b0>
   104a4:	230f      	movs	r3, #15
   104a6:	18fb      	adds	r3, r7, r3
   104a8:	781b      	ldrb	r3, [r3, #0]
   104aa:	2bc8      	cmp	r3, #200	; 0xc8
   104ac:	d000      	beq.n	104b0 <spi_cmd_complete+0x4b0>
   104ae:	e208      	b.n	108c2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   104b0:	230a      	movs	r3, #10
   104b2:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   104b4:	2376      	movs	r3, #118	; 0x76
   104b6:	18fb      	adds	r3, r7, r3
   104b8:	781a      	ldrb	r2, [r3, #0]
   104ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   104bc:	429a      	cmp	r2, r3
   104be:	d218      	bcs.n	104f2 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   104c0:	2376      	movs	r3, #118	; 0x76
   104c2:	18fb      	adds	r3, r7, r3
   104c4:	781b      	ldrb	r3, [r3, #0]
   104c6:	2276      	movs	r2, #118	; 0x76
   104c8:	18ba      	adds	r2, r7, r2
   104ca:	1c59      	adds	r1, r3, #1
   104cc:	7011      	strb	r1, [r2, #0]
   104ce:	001a      	movs	r2, r3
   104d0:	2318      	movs	r3, #24
   104d2:	18fb      	adds	r3, r7, r3
   104d4:	5c9a      	ldrb	r2, [r3, r2]
   104d6:	2317      	movs	r3, #23
   104d8:	18fb      	adds	r3, r7, r3
   104da:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   104dc:	2317      	movs	r3, #23
   104de:	18fb      	adds	r3, r7, r3
   104e0:	781b      	ldrb	r3, [r3, #0]
   104e2:	091b      	lsrs	r3, r3, #4
   104e4:	b2db      	uxtb	r3, r3
   104e6:	001a      	movs	r2, r3
   104e8:	230f      	movs	r3, #15
   104ea:	4013      	ands	r3, r2
   104ec:	2b0f      	cmp	r3, #15
   104ee:	d103      	bne.n	104f8 <spi_cmd_complete+0x4f8>
					break;
   104f0:	e007      	b.n	10502 <spi_cmd_complete+0x502>
					retry = 0;
   104f2:	2300      	movs	r3, #0
   104f4:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   104f6:	e004      	b.n	10502 <spi_cmd_complete+0x502>
			} while (retry--);
   104f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   104fa:	1e5a      	subs	r2, r3, #1
   104fc:	667a      	str	r2, [r7, #100]	; 0x64
   104fe:	2b00      	cmp	r3, #0
   10500:	d1d8      	bne.n	104b4 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   10502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   10504:	2b00      	cmp	r3, #0
   10506:	dc18      	bgt.n	1053a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   10508:	2395      	movs	r3, #149	; 0x95
   1050a:	009a      	lsls	r2, r3, #2
   1050c:	499b      	ldr	r1, [pc, #620]	; (1077c <spi_cmd_complete+0x77c>)
   1050e:	4b9c      	ldr	r3, [pc, #624]	; (10780 <spi_cmd_complete+0x780>)
   10510:	0018      	movs	r0, r3
   10512:	4b9c      	ldr	r3, [pc, #624]	; (10784 <spi_cmd_complete+0x784>)
   10514:	4798      	blx	r3
   10516:	2317      	movs	r3, #23
   10518:	18fb      	adds	r3, r7, r3
   1051a:	781b      	ldrb	r3, [r3, #0]
   1051c:	001a      	movs	r2, r3
   1051e:	4b9e      	ldr	r3, [pc, #632]	; (10798 <spi_cmd_complete+0x798>)
   10520:	0011      	movs	r1, r2
   10522:	0018      	movs	r0, r3
   10524:	4b97      	ldr	r3, [pc, #604]	; (10784 <spi_cmd_complete+0x784>)
   10526:	4798      	blx	r3
   10528:	4b98      	ldr	r3, [pc, #608]	; (1078c <spi_cmd_complete+0x78c>)
   1052a:	0018      	movs	r0, r3
   1052c:	4b95      	ldr	r3, [pc, #596]	; (10784 <spi_cmd_complete+0x784>)
   1052e:	4798      	blx	r3
				result = N_RESET;
   10530:	2301      	movs	r3, #1
   10532:	425b      	negs	r3, r3
   10534:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   10536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10538:	e1c4      	b.n	108c4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1053a:	230f      	movs	r3, #15
   1053c:	18fb      	adds	r3, r7, r3
   1053e:	781b      	ldrb	r3, [r3, #0]
   10540:	2bc4      	cmp	r3, #196	; 0xc4
   10542:	d005      	beq.n	10550 <spi_cmd_complete+0x550>
   10544:	230f      	movs	r3, #15
   10546:	18fb      	adds	r3, r7, r3
   10548:	781b      	ldrb	r3, [r3, #0]
   1054a:	2bca      	cmp	r3, #202	; 0xca
   1054c:	d000      	beq.n	10550 <spi_cmd_complete+0x550>
   1054e:	e08e      	b.n	1066e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   10550:	2376      	movs	r3, #118	; 0x76
   10552:	18fb      	adds	r3, r7, r3
   10554:	781b      	ldrb	r3, [r3, #0]
   10556:	3303      	adds	r3, #3
   10558:	001a      	movs	r2, r3
   1055a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1055c:	429a      	cmp	r2, r3
   1055e:	d23c      	bcs.n	105da <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   10560:	2376      	movs	r3, #118	; 0x76
   10562:	18fb      	adds	r3, r7, r3
   10564:	781b      	ldrb	r3, [r3, #0]
   10566:	2276      	movs	r2, #118	; 0x76
   10568:	18ba      	adds	r2, r7, r2
   1056a:	1c59      	adds	r1, r3, #1
   1056c:	7011      	strb	r1, [r2, #0]
   1056e:	001a      	movs	r2, r3
   10570:	2318      	movs	r3, #24
   10572:	18fb      	adds	r3, r7, r3
   10574:	5c9a      	ldrb	r2, [r3, r2]
   10576:	687b      	ldr	r3, [r7, #4]
   10578:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   1057a:	687b      	ldr	r3, [r7, #4]
   1057c:	1c5a      	adds	r2, r3, #1
   1057e:	2376      	movs	r3, #118	; 0x76
   10580:	18fb      	adds	r3, r7, r3
   10582:	781b      	ldrb	r3, [r3, #0]
   10584:	2176      	movs	r1, #118	; 0x76
   10586:	1879      	adds	r1, r7, r1
   10588:	1c58      	adds	r0, r3, #1
   1058a:	7008      	strb	r0, [r1, #0]
   1058c:	0019      	movs	r1, r3
   1058e:	2318      	movs	r3, #24
   10590:	18fb      	adds	r3, r7, r3
   10592:	5c5b      	ldrb	r3, [r3, r1]
   10594:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   10596:	687b      	ldr	r3, [r7, #4]
   10598:	1c9a      	adds	r2, r3, #2
   1059a:	2376      	movs	r3, #118	; 0x76
   1059c:	18fb      	adds	r3, r7, r3
   1059e:	781b      	ldrb	r3, [r3, #0]
   105a0:	2176      	movs	r1, #118	; 0x76
   105a2:	1879      	adds	r1, r7, r1
   105a4:	1c58      	adds	r0, r3, #1
   105a6:	7008      	strb	r0, [r1, #0]
   105a8:	0019      	movs	r1, r3
   105aa:	2318      	movs	r3, #24
   105ac:	18fb      	adds	r3, r7, r3
   105ae:	5c5b      	ldrb	r3, [r3, r1]
   105b0:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   105b2:	687b      	ldr	r3, [r7, #4]
   105b4:	1cda      	adds	r2, r3, #3
   105b6:	2376      	movs	r3, #118	; 0x76
   105b8:	18fb      	adds	r3, r7, r3
   105ba:	781b      	ldrb	r3, [r3, #0]
   105bc:	2176      	movs	r1, #118	; 0x76
   105be:	1879      	adds	r1, r7, r1
   105c0:	1c58      	adds	r0, r3, #1
   105c2:	7008      	strb	r0, [r1, #0]
   105c4:	0019      	movs	r1, r3
   105c6:	2318      	movs	r3, #24
   105c8:	18fb      	adds	r3, r7, r3
   105ca:	5c5b      	ldrb	r3, [r3, r1]
   105cc:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   105ce:	4b73      	ldr	r3, [pc, #460]	; (1079c <spi_cmd_complete+0x79c>)
   105d0:	781b      	ldrb	r3, [r3, #0]
   105d2:	2b00      	cmp	r3, #0
   105d4:	d000      	beq.n	105d8 <spi_cmd_complete+0x5d8>
   105d6:	e174      	b.n	108c2 <spi_cmd_complete+0x8c2>
   105d8:	e011      	b.n	105fe <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   105da:	4a71      	ldr	r2, [pc, #452]	; (107a0 <spi_cmd_complete+0x7a0>)
   105dc:	4967      	ldr	r1, [pc, #412]	; (1077c <spi_cmd_complete+0x77c>)
   105de:	4b68      	ldr	r3, [pc, #416]	; (10780 <spi_cmd_complete+0x780>)
   105e0:	0018      	movs	r0, r3
   105e2:	4b68      	ldr	r3, [pc, #416]	; (10784 <spi_cmd_complete+0x784>)
   105e4:	4798      	blx	r3
   105e6:	4b6f      	ldr	r3, [pc, #444]	; (107a4 <spi_cmd_complete+0x7a4>)
   105e8:	0018      	movs	r0, r3
   105ea:	4b66      	ldr	r3, [pc, #408]	; (10784 <spi_cmd_complete+0x784>)
   105ec:	4798      	blx	r3
   105ee:	4b67      	ldr	r3, [pc, #412]	; (1078c <spi_cmd_complete+0x78c>)
   105f0:	0018      	movs	r0, r3
   105f2:	4b64      	ldr	r3, [pc, #400]	; (10784 <spi_cmd_complete+0x784>)
   105f4:	4798      	blx	r3
					result = N_FAIL;
   105f6:	2300      	movs	r3, #0
   105f8:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   105fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   105fc:	e162      	b.n	108c4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   105fe:	2376      	movs	r3, #118	; 0x76
   10600:	18fb      	adds	r3, r7, r3
   10602:	781b      	ldrb	r3, [r3, #0]
   10604:	3301      	adds	r3, #1
   10606:	001a      	movs	r2, r3
   10608:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1060a:	429a      	cmp	r2, r3
   1060c:	d21c      	bcs.n	10648 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   1060e:	2376      	movs	r3, #118	; 0x76
   10610:	18fb      	adds	r3, r7, r3
   10612:	781b      	ldrb	r3, [r3, #0]
   10614:	2276      	movs	r2, #118	; 0x76
   10616:	18ba      	adds	r2, r7, r2
   10618:	1c59      	adds	r1, r3, #1
   1061a:	7011      	strb	r1, [r2, #0]
   1061c:	001a      	movs	r2, r3
   1061e:	2318      	movs	r3, #24
   10620:	18fb      	adds	r3, r7, r3
   10622:	5c9a      	ldrb	r2, [r3, r2]
   10624:	2314      	movs	r3, #20
   10626:	18fb      	adds	r3, r7, r3
   10628:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   1062a:	2376      	movs	r3, #118	; 0x76
   1062c:	18fb      	adds	r3, r7, r3
   1062e:	781b      	ldrb	r3, [r3, #0]
   10630:	2276      	movs	r2, #118	; 0x76
   10632:	18ba      	adds	r2, r7, r2
   10634:	1c59      	adds	r1, r3, #1
   10636:	7011      	strb	r1, [r2, #0]
   10638:	001a      	movs	r2, r3
   1063a:	2318      	movs	r3, #24
   1063c:	18fb      	adds	r3, r7, r3
   1063e:	5c9a      	ldrb	r2, [r3, r2]
   10640:	2314      	movs	r3, #20
   10642:	18fb      	adds	r3, r7, r3
   10644:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   10646:	e13c      	b.n	108c2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   10648:	239c      	movs	r3, #156	; 0x9c
   1064a:	009a      	lsls	r2, r3, #2
   1064c:	494b      	ldr	r1, [pc, #300]	; (1077c <spi_cmd_complete+0x77c>)
   1064e:	4b4c      	ldr	r3, [pc, #304]	; (10780 <spi_cmd_complete+0x780>)
   10650:	0018      	movs	r0, r3
   10652:	4b4c      	ldr	r3, [pc, #304]	; (10784 <spi_cmd_complete+0x784>)
   10654:	4798      	blx	r3
   10656:	4b54      	ldr	r3, [pc, #336]	; (107a8 <spi_cmd_complete+0x7a8>)
   10658:	0018      	movs	r0, r3
   1065a:	4b4a      	ldr	r3, [pc, #296]	; (10784 <spi_cmd_complete+0x784>)
   1065c:	4798      	blx	r3
   1065e:	4b4b      	ldr	r3, [pc, #300]	; (1078c <spi_cmd_complete+0x78c>)
   10660:	0018      	movs	r0, r3
   10662:	4b48      	ldr	r3, [pc, #288]	; (10784 <spi_cmd_complete+0x784>)
   10664:	4798      	blx	r3
						result = N_FAIL;
   10666:	2300      	movs	r3, #0
   10668:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   1066a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1066c:	e12a      	b.n	108c4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1066e:	230f      	movs	r3, #15
   10670:	18fb      	adds	r3, r7, r3
   10672:	781b      	ldrb	r3, [r3, #0]
   10674:	2bc2      	cmp	r3, #194	; 0xc2
   10676:	d005      	beq.n	10684 <spi_cmd_complete+0x684>
   10678:	230f      	movs	r3, #15
   1067a:	18fb      	adds	r3, r7, r3
   1067c:	781b      	ldrb	r3, [r3, #0]
   1067e:	2bc8      	cmp	r3, #200	; 0xc8
   10680:	d000      	beq.n	10684 <spi_cmd_complete+0x684>
   10682:	e11e      	b.n	108c2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   10684:	2300      	movs	r3, #0
   10686:	663b      	str	r3, [r7, #96]	; 0x60
   10688:	e011      	b.n	106ae <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   1068a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1068c:	1c5a      	adds	r2, r3, #1
   1068e:	663a      	str	r2, [r7, #96]	; 0x60
   10690:	001a      	movs	r2, r3
   10692:	687b      	ldr	r3, [r7, #4]
   10694:	189a      	adds	r2, r3, r2
   10696:	2376      	movs	r3, #118	; 0x76
   10698:	18fb      	adds	r3, r7, r3
   1069a:	781b      	ldrb	r3, [r3, #0]
   1069c:	2176      	movs	r1, #118	; 0x76
   1069e:	1879      	adds	r1, r7, r1
   106a0:	1c58      	adds	r0, r3, #1
   106a2:	7008      	strb	r0, [r1, #0]
   106a4:	0019      	movs	r1, r3
   106a6:	2318      	movs	r3, #24
   106a8:	18fb      	adds	r3, r7, r3
   106aa:	5c5b      	ldrb	r3, [r3, r1]
   106ac:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   106ae:	2376      	movs	r3, #118	; 0x76
   106b0:	18fb      	adds	r3, r7, r3
   106b2:	781a      	ldrb	r2, [r3, #0]
   106b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   106b6:	429a      	cmp	r2, r3
   106b8:	d203      	bcs.n	106c2 <spi_cmd_complete+0x6c2>
   106ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   106bc:	683b      	ldr	r3, [r7, #0]
   106be:	429a      	cmp	r2, r3
   106c0:	d3e3      	bcc.n	1068a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   106c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   106c4:	683a      	ldr	r2, [r7, #0]
   106c6:	1ad3      	subs	r3, r2, r3
   106c8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   106ca:	683b      	ldr	r3, [r7, #0]
   106cc:	2b00      	cmp	r3, #0
   106ce:	d100      	bne.n	106d2 <spi_cmd_complete+0x6d2>
   106d0:	e0f1      	b.n	108b6 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   106d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   106d4:	2280      	movs	r2, #128	; 0x80
   106d6:	0192      	lsls	r2, r2, #6
   106d8:	1ad3      	subs	r3, r2, r3
   106da:	001a      	movs	r2, r3
   106dc:	683b      	ldr	r3, [r7, #0]
   106de:	429a      	cmp	r2, r3
   106e0:	d302      	bcc.n	106e8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   106e2:	683b      	ldr	r3, [r7, #0]
   106e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   106e6:	e004      	b.n	106f2 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   106e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   106ea:	2280      	movs	r2, #128	; 0x80
   106ec:	0192      	lsls	r2, r2, #6
   106ee:	1ad3      	subs	r3, r2, r3
   106f0:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   106f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   106f4:	687a      	ldr	r2, [r7, #4]
   106f6:	18d3      	adds	r3, r2, r3
   106f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   106fa:	b292      	uxth	r2, r2
   106fc:	0011      	movs	r1, r2
   106fe:	0018      	movs	r0, r3
   10700:	4b2a      	ldr	r3, [pc, #168]	; (107ac <spi_cmd_complete+0x7ac>)
   10702:	4798      	blx	r3
   10704:	1e03      	subs	r3, r0, #0
   10706:	d010      	beq.n	1072a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   10708:	4a29      	ldr	r2, [pc, #164]	; (107b0 <spi_cmd_complete+0x7b0>)
   1070a:	491c      	ldr	r1, [pc, #112]	; (1077c <spi_cmd_complete+0x77c>)
   1070c:	4b1c      	ldr	r3, [pc, #112]	; (10780 <spi_cmd_complete+0x780>)
   1070e:	0018      	movs	r0, r3
   10710:	4b1c      	ldr	r3, [pc, #112]	; (10784 <spi_cmd_complete+0x784>)
   10712:	4798      	blx	r3
   10714:	4b27      	ldr	r3, [pc, #156]	; (107b4 <spi_cmd_complete+0x7b4>)
   10716:	0018      	movs	r0, r3
   10718:	4b1a      	ldr	r3, [pc, #104]	; (10784 <spi_cmd_complete+0x784>)
   1071a:	4798      	blx	r3
   1071c:	4b1b      	ldr	r3, [pc, #108]	; (1078c <spi_cmd_complete+0x78c>)
   1071e:	0018      	movs	r0, r3
   10720:	4b18      	ldr	r3, [pc, #96]	; (10784 <spi_cmd_complete+0x784>)
   10722:	4798      	blx	r3
						result = N_FAIL;
   10724:	2300      	movs	r3, #0
   10726:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   10728:	e0cb      	b.n	108c2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   1072a:	4b1c      	ldr	r3, [pc, #112]	; (1079c <spi_cmd_complete+0x79c>)
   1072c:	781b      	ldrb	r3, [r3, #0]
   1072e:	2b00      	cmp	r3, #0
   10730:	d119      	bne.n	10766 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   10732:	2314      	movs	r3, #20
   10734:	18fb      	adds	r3, r7, r3
   10736:	2102      	movs	r1, #2
   10738:	0018      	movs	r0, r3
   1073a:	4b1c      	ldr	r3, [pc, #112]	; (107ac <spi_cmd_complete+0x7ac>)
   1073c:	4798      	blx	r3
   1073e:	1e03      	subs	r3, r0, #0
   10740:	d011      	beq.n	10766 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   10742:	23a6      	movs	r3, #166	; 0xa6
   10744:	009a      	lsls	r2, r3, #2
   10746:	490d      	ldr	r1, [pc, #52]	; (1077c <spi_cmd_complete+0x77c>)
   10748:	4b0d      	ldr	r3, [pc, #52]	; (10780 <spi_cmd_complete+0x780>)
   1074a:	0018      	movs	r0, r3
   1074c:	4b0d      	ldr	r3, [pc, #52]	; (10784 <spi_cmd_complete+0x784>)
   1074e:	4798      	blx	r3
   10750:	4b19      	ldr	r3, [pc, #100]	; (107b8 <spi_cmd_complete+0x7b8>)
   10752:	0018      	movs	r0, r3
   10754:	4b0b      	ldr	r3, [pc, #44]	; (10784 <spi_cmd_complete+0x784>)
   10756:	4798      	blx	r3
   10758:	4b0c      	ldr	r3, [pc, #48]	; (1078c <spi_cmd_complete+0x78c>)
   1075a:	0018      	movs	r0, r3
   1075c:	4b09      	ldr	r3, [pc, #36]	; (10784 <spi_cmd_complete+0x784>)
   1075e:	4798      	blx	r3
							result = N_FAIL;
   10760:	2300      	movs	r3, #0
   10762:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   10764:	e0ad      	b.n	108c2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   10766:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   10768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1076a:	18d3      	adds	r3, r2, r3
   1076c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   1076e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   10770:	683a      	ldr	r2, [r7, #0]
   10772:	1ad3      	subs	r3, r2, r3
   10774:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   10776:	e09e      	b.n	108b6 <spi_cmd_complete+0x8b6>
   10778:	0000022f 	.word	0x0000022f
   1077c:	000255d8 	.word	0x000255d8
   10780:	00024fc4 	.word	0x00024fc4
   10784:	0000a4ed 	.word	0x0000a4ed
   10788:	000250bc 	.word	0x000250bc
   1078c:	00025004 	.word	0x00025004
   10790:	00000239 	.word	0x00000239
   10794:	000250f8 	.word	0x000250f8
   10798:	0002512c 	.word	0x0002512c
   1079c:	20003d3c 	.word	0x20003d3c
   107a0:	00000263 	.word	0x00000263
   107a4:	0002515c 	.word	0x0002515c
   107a8:	0002518c 	.word	0x0002518c
   107ac:	0000f939 	.word	0x0000f939
   107b0:	0000028e 	.word	0x0000028e
   107b4:	000251bc 	.word	0x000251bc
   107b8:	000251f0 	.word	0x000251f0
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   107bc:	683a      	ldr	r2, [r7, #0]
   107be:	2380      	movs	r3, #128	; 0x80
   107c0:	019b      	lsls	r3, r3, #6
   107c2:	429a      	cmp	r2, r3
   107c4:	d802      	bhi.n	107cc <spi_cmd_complete+0x7cc>
						nbytes = sz;
   107c6:	683b      	ldr	r3, [r7, #0]
   107c8:	65bb      	str	r3, [r7, #88]	; 0x58
   107ca:	e002      	b.n	107d2 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   107cc:	2380      	movs	r3, #128	; 0x80
   107ce:	019b      	lsls	r3, r3, #6
   107d0:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   107d2:	230a      	movs	r3, #10
   107d4:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   107d6:	2317      	movs	r3, #23
   107d8:	18fb      	adds	r3, r7, r3
   107da:	2101      	movs	r1, #1
   107dc:	0018      	movs	r0, r3
   107de:	4b3b      	ldr	r3, [pc, #236]	; (108cc <spi_cmd_complete+0x8cc>)
   107e0:	4798      	blx	r3
   107e2:	1e03      	subs	r3, r0, #0
   107e4:	d011      	beq.n	1080a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   107e6:	23ae      	movs	r3, #174	; 0xae
   107e8:	009a      	lsls	r2, r3, #2
   107ea:	4939      	ldr	r1, [pc, #228]	; (108d0 <spi_cmd_complete+0x8d0>)
   107ec:	4b39      	ldr	r3, [pc, #228]	; (108d4 <spi_cmd_complete+0x8d4>)
   107ee:	0018      	movs	r0, r3
   107f0:	4b39      	ldr	r3, [pc, #228]	; (108d8 <spi_cmd_complete+0x8d8>)
   107f2:	4798      	blx	r3
   107f4:	4b39      	ldr	r3, [pc, #228]	; (108dc <spi_cmd_complete+0x8dc>)
   107f6:	0018      	movs	r0, r3
   107f8:	4b37      	ldr	r3, [pc, #220]	; (108d8 <spi_cmd_complete+0x8d8>)
   107fa:	4798      	blx	r3
   107fc:	4b38      	ldr	r3, [pc, #224]	; (108e0 <spi_cmd_complete+0x8e0>)
   107fe:	0018      	movs	r0, r3
   10800:	4b35      	ldr	r3, [pc, #212]	; (108d8 <spi_cmd_complete+0x8d8>)
   10802:	4798      	blx	r3
							result = N_FAIL;
   10804:	2300      	movs	r3, #0
   10806:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   10808:	e010      	b.n	1082c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   1080a:	2317      	movs	r3, #23
   1080c:	18fb      	adds	r3, r7, r3
   1080e:	781b      	ldrb	r3, [r3, #0]
   10810:	091b      	lsrs	r3, r3, #4
   10812:	b2db      	uxtb	r3, r3
   10814:	001a      	movs	r2, r3
   10816:	230f      	movs	r3, #15
   10818:	4013      	ands	r3, r2
   1081a:	2b0f      	cmp	r3, #15
   1081c:	d005      	beq.n	1082a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   1081e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   10820:	1e5a      	subs	r2, r3, #1
   10822:	667a      	str	r2, [r7, #100]	; 0x64
   10824:	2b00      	cmp	r3, #0
   10826:	d1d6      	bne.n	107d6 <spi_cmd_complete+0x7d6>
   10828:	e000      	b.n	1082c <spi_cmd_complete+0x82c>
							break;
   1082a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   1082c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1082e:	2b00      	cmp	r3, #0
   10830:	d046      	beq.n	108c0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   10832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   10834:	687a      	ldr	r2, [r7, #4]
   10836:	18d3      	adds	r3, r2, r3
   10838:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1083a:	b292      	uxth	r2, r2
   1083c:	0011      	movs	r1, r2
   1083e:	0018      	movs	r0, r3
   10840:	4b22      	ldr	r3, [pc, #136]	; (108cc <spi_cmd_complete+0x8cc>)
   10842:	4798      	blx	r3
   10844:	1e03      	subs	r3, r0, #0
   10846:	d011      	beq.n	1086c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   10848:	23b2      	movs	r3, #178	; 0xb2
   1084a:	009a      	lsls	r2, r3, #2
   1084c:	4920      	ldr	r1, [pc, #128]	; (108d0 <spi_cmd_complete+0x8d0>)
   1084e:	4b21      	ldr	r3, [pc, #132]	; (108d4 <spi_cmd_complete+0x8d4>)
   10850:	0018      	movs	r0, r3
   10852:	4b21      	ldr	r3, [pc, #132]	; (108d8 <spi_cmd_complete+0x8d8>)
   10854:	4798      	blx	r3
   10856:	4b23      	ldr	r3, [pc, #140]	; (108e4 <spi_cmd_complete+0x8e4>)
   10858:	0018      	movs	r0, r3
   1085a:	4b1f      	ldr	r3, [pc, #124]	; (108d8 <spi_cmd_complete+0x8d8>)
   1085c:	4798      	blx	r3
   1085e:	4b20      	ldr	r3, [pc, #128]	; (108e0 <spi_cmd_complete+0x8e0>)
   10860:	0018      	movs	r0, r3
   10862:	4b1d      	ldr	r3, [pc, #116]	; (108d8 <spi_cmd_complete+0x8d8>)
   10864:	4798      	blx	r3
						result = N_FAIL;
   10866:	2300      	movs	r3, #0
   10868:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   1086a:	e02a      	b.n	108c2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   1086c:	4b1e      	ldr	r3, [pc, #120]	; (108e8 <spi_cmd_complete+0x8e8>)
   1086e:	781b      	ldrb	r3, [r3, #0]
   10870:	2b00      	cmp	r3, #0
   10872:	d118      	bne.n	108a6 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   10874:	2314      	movs	r3, #20
   10876:	18fb      	adds	r3, r7, r3
   10878:	2102      	movs	r1, #2
   1087a:	0018      	movs	r0, r3
   1087c:	4b13      	ldr	r3, [pc, #76]	; (108cc <spi_cmd_complete+0x8cc>)
   1087e:	4798      	blx	r3
   10880:	1e03      	subs	r3, r0, #0
   10882:	d010      	beq.n	108a6 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   10884:	4a19      	ldr	r2, [pc, #100]	; (108ec <spi_cmd_complete+0x8ec>)
   10886:	4912      	ldr	r1, [pc, #72]	; (108d0 <spi_cmd_complete+0x8d0>)
   10888:	4b12      	ldr	r3, [pc, #72]	; (108d4 <spi_cmd_complete+0x8d4>)
   1088a:	0018      	movs	r0, r3
   1088c:	4b12      	ldr	r3, [pc, #72]	; (108d8 <spi_cmd_complete+0x8d8>)
   1088e:	4798      	blx	r3
   10890:	4b17      	ldr	r3, [pc, #92]	; (108f0 <spi_cmd_complete+0x8f0>)
   10892:	0018      	movs	r0, r3
   10894:	4b10      	ldr	r3, [pc, #64]	; (108d8 <spi_cmd_complete+0x8d8>)
   10896:	4798      	blx	r3
   10898:	4b11      	ldr	r3, [pc, #68]	; (108e0 <spi_cmd_complete+0x8e0>)
   1089a:	0018      	movs	r0, r3
   1089c:	4b0e      	ldr	r3, [pc, #56]	; (108d8 <spi_cmd_complete+0x8d8>)
   1089e:	4798      	blx	r3
							result = N_FAIL;
   108a0:	2300      	movs	r3, #0
   108a2:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   108a4:	e00d      	b.n	108c2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   108a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   108a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   108aa:	18d3      	adds	r3, r2, r3
   108ac:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   108ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   108b0:	683a      	ldr	r2, [r7, #0]
   108b2:	1ad3      	subs	r3, r2, r3
   108b4:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   108b6:	683b      	ldr	r3, [r7, #0]
   108b8:	2b00      	cmp	r3, #0
   108ba:	d000      	beq.n	108be <spi_cmd_complete+0x8be>
   108bc:	e77e      	b.n	107bc <spi_cmd_complete+0x7bc>
   108be:	e000      	b.n	108c2 <spi_cmd_complete+0x8c2>
						break;
   108c0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   108c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   108c4:	0018      	movs	r0, r3
   108c6:	46bd      	mov	sp, r7
   108c8:	b01f      	add	sp, #124	; 0x7c
   108ca:	bd90      	pop	{r4, r7, pc}
   108cc:	0000f939 	.word	0x0000f939
   108d0:	000255d8 	.word	0x000255d8
   108d4:	00024fc4 	.word	0x00024fc4
   108d8:	0000a4ed 	.word	0x0000a4ed
   108dc:	00025228 	.word	0x00025228
   108e0:	00025004 	.word	0x00025004
   108e4:	000251bc 	.word	0x000251bc
   108e8:	20003d3c 	.word	0x20003d3c
   108ec:	000002d2 	.word	0x000002d2
   108f0:	000251f0 	.word	0x000251f0

000108f4 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   108f4:	b580      	push	{r7, lr}
   108f6:	b086      	sub	sp, #24
   108f8:	af00      	add	r7, sp, #0
   108fa:	6078      	str	r0, [r7, #4]
   108fc:	000a      	movs	r2, r1
   108fe:	1cbb      	adds	r3, r7, #2
   10900:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   10902:	2313      	movs	r3, #19
   10904:	18fb      	adds	r3, r7, r3
   10906:	2201      	movs	r2, #1
   10908:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   1090a:	230c      	movs	r3, #12
   1090c:	18fb      	adds	r3, r7, r3
   1090e:	2200      	movs	r2, #0
   10910:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   10912:	2316      	movs	r3, #22
   10914:	18fb      	adds	r3, r7, r3
   10916:	2200      	movs	r2, #0
   10918:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   1091a:	1cbb      	adds	r3, r7, #2
   1091c:	881a      	ldrh	r2, [r3, #0]
   1091e:	2380      	movs	r3, #128	; 0x80
   10920:	019b      	lsls	r3, r3, #6
   10922:	429a      	cmp	r2, r3
   10924:	d805      	bhi.n	10932 <spi_data_write+0x3e>
			nbytes = sz;
   10926:	2314      	movs	r3, #20
   10928:	18fb      	adds	r3, r7, r3
   1092a:	1cba      	adds	r2, r7, #2
   1092c:	8812      	ldrh	r2, [r2, #0]
   1092e:	801a      	strh	r2, [r3, #0]
   10930:	e004      	b.n	1093c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   10932:	2314      	movs	r3, #20
   10934:	18fb      	adds	r3, r7, r3
   10936:	2280      	movs	r2, #128	; 0x80
   10938:	0192      	lsls	r2, r2, #6
   1093a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   1093c:	2311      	movs	r3, #17
   1093e:	18fb      	adds	r3, r7, r3
   10940:	22f0      	movs	r2, #240	; 0xf0
   10942:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   10944:	2316      	movs	r3, #22
   10946:	18fb      	adds	r3, r7, r3
   10948:	2200      	movs	r2, #0
   1094a:	5e9b      	ldrsh	r3, [r3, r2]
   1094c:	2b00      	cmp	r3, #0
   1094e:	d10f      	bne.n	10970 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   10950:	1cbb      	adds	r3, r7, #2
   10952:	881a      	ldrh	r2, [r3, #0]
   10954:	2380      	movs	r3, #128	; 0x80
   10956:	019b      	lsls	r3, r3, #6
   10958:	429a      	cmp	r2, r3
   1095a:	d804      	bhi.n	10966 <spi_data_write+0x72>
				order = 0x3;
   1095c:	2312      	movs	r3, #18
   1095e:	18fb      	adds	r3, r7, r3
   10960:	2203      	movs	r2, #3
   10962:	701a      	strb	r2, [r3, #0]
   10964:	e013      	b.n	1098e <spi_data_write+0x9a>
			else
				order = 0x1;
   10966:	2312      	movs	r3, #18
   10968:	18fb      	adds	r3, r7, r3
   1096a:	2201      	movs	r2, #1
   1096c:	701a      	strb	r2, [r3, #0]
   1096e:	e00e      	b.n	1098e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   10970:	1cbb      	adds	r3, r7, #2
   10972:	881a      	ldrh	r2, [r3, #0]
   10974:	2380      	movs	r3, #128	; 0x80
   10976:	019b      	lsls	r3, r3, #6
   10978:	429a      	cmp	r2, r3
   1097a:	d804      	bhi.n	10986 <spi_data_write+0x92>
				order = 0x3;
   1097c:	2312      	movs	r3, #18
   1097e:	18fb      	adds	r3, r7, r3
   10980:	2203      	movs	r2, #3
   10982:	701a      	strb	r2, [r3, #0]
   10984:	e003      	b.n	1098e <spi_data_write+0x9a>
			else
				order = 0x2;
   10986:	2312      	movs	r3, #18
   10988:	18fb      	adds	r3, r7, r3
   1098a:	2202      	movs	r2, #2
   1098c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   1098e:	2311      	movs	r3, #17
   10990:	18fb      	adds	r3, r7, r3
   10992:	781a      	ldrb	r2, [r3, #0]
   10994:	2312      	movs	r3, #18
   10996:	18fb      	adds	r3, r7, r3
   10998:	781b      	ldrb	r3, [r3, #0]
   1099a:	4313      	orrs	r3, r2
   1099c:	b2da      	uxtb	r2, r3
   1099e:	2311      	movs	r3, #17
   109a0:	18fb      	adds	r3, r7, r3
   109a2:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   109a4:	2311      	movs	r3, #17
   109a6:	18fb      	adds	r3, r7, r3
   109a8:	2101      	movs	r1, #1
   109aa:	0018      	movs	r0, r3
   109ac:	4b3c      	ldr	r3, [pc, #240]	; (10aa0 <spi_data_write+0x1ac>)
   109ae:	4798      	blx	r3
   109b0:	1e03      	subs	r3, r0, #0
   109b2:	d012      	beq.n	109da <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   109b4:	4a3b      	ldr	r2, [pc, #236]	; (10aa4 <spi_data_write+0x1b0>)
   109b6:	493c      	ldr	r1, [pc, #240]	; (10aa8 <spi_data_write+0x1b4>)
   109b8:	4b3c      	ldr	r3, [pc, #240]	; (10aac <spi_data_write+0x1b8>)
   109ba:	0018      	movs	r0, r3
   109bc:	4b3c      	ldr	r3, [pc, #240]	; (10ab0 <spi_data_write+0x1bc>)
   109be:	4798      	blx	r3
   109c0:	4b3c      	ldr	r3, [pc, #240]	; (10ab4 <spi_data_write+0x1c0>)
   109c2:	0018      	movs	r0, r3
   109c4:	4b3a      	ldr	r3, [pc, #232]	; (10ab0 <spi_data_write+0x1bc>)
   109c6:	4798      	blx	r3
   109c8:	4b3b      	ldr	r3, [pc, #236]	; (10ab8 <spi_data_write+0x1c4>)
   109ca:	0018      	movs	r0, r3
   109cc:	4b38      	ldr	r3, [pc, #224]	; (10ab0 <spi_data_write+0x1bc>)
   109ce:	4798      	blx	r3
			result = N_FAIL;
   109d0:	2313      	movs	r3, #19
   109d2:	18fb      	adds	r3, r7, r3
   109d4:	2200      	movs	r2, #0
   109d6:	701a      	strb	r2, [r3, #0]
			break;
   109d8:	e059      	b.n	10a8e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   109da:	2316      	movs	r3, #22
   109dc:	18fb      	adds	r3, r7, r3
   109de:	2200      	movs	r2, #0
   109e0:	5e9b      	ldrsh	r3, [r3, r2]
   109e2:	687a      	ldr	r2, [r7, #4]
   109e4:	18d2      	adds	r2, r2, r3
   109e6:	2314      	movs	r3, #20
   109e8:	18fb      	adds	r3, r7, r3
   109ea:	881b      	ldrh	r3, [r3, #0]
   109ec:	0019      	movs	r1, r3
   109ee:	0010      	movs	r0, r2
   109f0:	4b2b      	ldr	r3, [pc, #172]	; (10aa0 <spi_data_write+0x1ac>)
   109f2:	4798      	blx	r3
   109f4:	1e03      	subs	r3, r0, #0
   109f6:	d012      	beq.n	10a1e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   109f8:	4a30      	ldr	r2, [pc, #192]	; (10abc <spi_data_write+0x1c8>)
   109fa:	492b      	ldr	r1, [pc, #172]	; (10aa8 <spi_data_write+0x1b4>)
   109fc:	4b2b      	ldr	r3, [pc, #172]	; (10aac <spi_data_write+0x1b8>)
   109fe:	0018      	movs	r0, r3
   10a00:	4b2b      	ldr	r3, [pc, #172]	; (10ab0 <spi_data_write+0x1bc>)
   10a02:	4798      	blx	r3
   10a04:	4b2e      	ldr	r3, [pc, #184]	; (10ac0 <spi_data_write+0x1cc>)
   10a06:	0018      	movs	r0, r3
   10a08:	4b29      	ldr	r3, [pc, #164]	; (10ab0 <spi_data_write+0x1bc>)
   10a0a:	4798      	blx	r3
   10a0c:	4b2a      	ldr	r3, [pc, #168]	; (10ab8 <spi_data_write+0x1c4>)
   10a0e:	0018      	movs	r0, r3
   10a10:	4b27      	ldr	r3, [pc, #156]	; (10ab0 <spi_data_write+0x1bc>)
   10a12:	4798      	blx	r3
			result = N_FAIL;
   10a14:	2313      	movs	r3, #19
   10a16:	18fb      	adds	r3, r7, r3
   10a18:	2200      	movs	r2, #0
   10a1a:	701a      	strb	r2, [r3, #0]
			break;
   10a1c:	e037      	b.n	10a8e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   10a1e:	4b29      	ldr	r3, [pc, #164]	; (10ac4 <spi_data_write+0x1d0>)
   10a20:	781b      	ldrb	r3, [r3, #0]
   10a22:	2b00      	cmp	r3, #0
   10a24:	d11b      	bne.n	10a5e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   10a26:	230c      	movs	r3, #12
   10a28:	18fb      	adds	r3, r7, r3
   10a2a:	2102      	movs	r1, #2
   10a2c:	0018      	movs	r0, r3
   10a2e:	4b1c      	ldr	r3, [pc, #112]	; (10aa0 <spi_data_write+0x1ac>)
   10a30:	4798      	blx	r3
   10a32:	1e03      	subs	r3, r0, #0
   10a34:	d013      	beq.n	10a5e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   10a36:	23d7      	movs	r3, #215	; 0xd7
   10a38:	009a      	lsls	r2, r3, #2
   10a3a:	491b      	ldr	r1, [pc, #108]	; (10aa8 <spi_data_write+0x1b4>)
   10a3c:	4b1b      	ldr	r3, [pc, #108]	; (10aac <spi_data_write+0x1b8>)
   10a3e:	0018      	movs	r0, r3
   10a40:	4b1b      	ldr	r3, [pc, #108]	; (10ab0 <spi_data_write+0x1bc>)
   10a42:	4798      	blx	r3
   10a44:	4b20      	ldr	r3, [pc, #128]	; (10ac8 <spi_data_write+0x1d4>)
   10a46:	0018      	movs	r0, r3
   10a48:	4b19      	ldr	r3, [pc, #100]	; (10ab0 <spi_data_write+0x1bc>)
   10a4a:	4798      	blx	r3
   10a4c:	4b1a      	ldr	r3, [pc, #104]	; (10ab8 <spi_data_write+0x1c4>)
   10a4e:	0018      	movs	r0, r3
   10a50:	4b17      	ldr	r3, [pc, #92]	; (10ab0 <spi_data_write+0x1bc>)
   10a52:	4798      	blx	r3
				result = N_FAIL;
   10a54:	2313      	movs	r3, #19
   10a56:	18fb      	adds	r3, r7, r3
   10a58:	2200      	movs	r2, #0
   10a5a:	701a      	strb	r2, [r3, #0]
				break;
   10a5c:	e017      	b.n	10a8e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   10a5e:	2316      	movs	r3, #22
   10a60:	18fb      	adds	r3, r7, r3
   10a62:	881a      	ldrh	r2, [r3, #0]
   10a64:	2314      	movs	r3, #20
   10a66:	18fb      	adds	r3, r7, r3
   10a68:	881b      	ldrh	r3, [r3, #0]
   10a6a:	18d3      	adds	r3, r2, r3
   10a6c:	b29a      	uxth	r2, r3
   10a6e:	2316      	movs	r3, #22
   10a70:	18fb      	adds	r3, r7, r3
   10a72:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   10a74:	1cbb      	adds	r3, r7, #2
   10a76:	1cb9      	adds	r1, r7, #2
   10a78:	2214      	movs	r2, #20
   10a7a:	18ba      	adds	r2, r7, r2
   10a7c:	8809      	ldrh	r1, [r1, #0]
   10a7e:	8812      	ldrh	r2, [r2, #0]
   10a80:	1a8a      	subs	r2, r1, r2
   10a82:	801a      	strh	r2, [r3, #0]
	} while (sz);
   10a84:	1cbb      	adds	r3, r7, #2
   10a86:	881b      	ldrh	r3, [r3, #0]
   10a88:	2b00      	cmp	r3, #0
   10a8a:	d000      	beq.n	10a8e <spi_data_write+0x19a>
   10a8c:	e745      	b.n	1091a <spi_data_write+0x26>


	return result;
   10a8e:	2313      	movs	r3, #19
   10a90:	18fb      	adds	r3, r7, r3
   10a92:	781b      	ldrb	r3, [r3, #0]
   10a94:	b25b      	sxtb	r3, r3
}
   10a96:	0018      	movs	r0, r3
   10a98:	46bd      	mov	sp, r7
   10a9a:	b006      	add	sp, #24
   10a9c:	bd80      	pop	{r7, pc}
   10a9e:	46c0      	nop			; (mov r8, r8)
   10aa0:	0000f97d 	.word	0x0000f97d
   10aa4:	00000349 	.word	0x00000349
   10aa8:	000255ec 	.word	0x000255ec
   10aac:	00024fc4 	.word	0x00024fc4
   10ab0:	0000a4ed 	.word	0x0000a4ed
   10ab4:	0002528c 	.word	0x0002528c
   10ab8:	00025004 	.word	0x00025004
   10abc:	00000352 	.word	0x00000352
   10ac0:	000252c4 	.word	0x000252c4
   10ac4:	20003d3c 	.word	0x20003d3c
   10ac8:	000252f8 	.word	0x000252f8

00010acc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   10acc:	b590      	push	{r4, r7, lr}
   10ace:	b087      	sub	sp, #28
   10ad0:	af02      	add	r7, sp, #8
   10ad2:	6078      	str	r0, [r7, #4]
   10ad4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   10ad6:	230f      	movs	r3, #15
   10ad8:	18fb      	adds	r3, r7, r3
   10ada:	220a      	movs	r2, #10
   10adc:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   10ade:	230c      	movs	r3, #12
   10ae0:	18fb      	adds	r3, r7, r3
   10ae2:	2201      	movs	r2, #1
   10ae4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   10ae6:	230e      	movs	r3, #14
   10ae8:	18fb      	adds	r3, r7, r3
   10aea:	22c9      	movs	r2, #201	; 0xc9
   10aec:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   10aee:	230d      	movs	r3, #13
   10af0:	18fb      	adds	r3, r7, r3
   10af2:	2200      	movs	r2, #0
   10af4:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   10af6:	687b      	ldr	r3, [r7, #4]
   10af8:	2b30      	cmp	r3, #48	; 0x30
   10afa:	d808      	bhi.n	10b0e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   10afc:	230e      	movs	r3, #14
   10afe:	18fb      	adds	r3, r7, r3
   10b00:	22c3      	movs	r2, #195	; 0xc3
   10b02:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   10b04:	230d      	movs	r3, #13
   10b06:	18fb      	adds	r3, r7, r3
   10b08:	2201      	movs	r2, #1
   10b0a:	701a      	strb	r2, [r3, #0]
   10b0c:	e007      	b.n	10b1e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   10b0e:	230e      	movs	r3, #14
   10b10:	18fb      	adds	r3, r7, r3
   10b12:	22c9      	movs	r2, #201	; 0xc9
   10b14:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   10b16:	230d      	movs	r3, #13
   10b18:	18fb      	adds	r3, r7, r3
   10b1a:	2200      	movs	r2, #0
   10b1c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   10b1e:	003a      	movs	r2, r7
   10b20:	6879      	ldr	r1, [r7, #4]
   10b22:	230e      	movs	r3, #14
   10b24:	18fb      	adds	r3, r7, r3
   10b26:	7818      	ldrb	r0, [r3, #0]
   10b28:	230d      	movs	r3, #13
   10b2a:	18fb      	adds	r3, r7, r3
   10b2c:	781b      	ldrb	r3, [r3, #0]
   10b2e:	9300      	str	r3, [sp, #0]
   10b30:	2304      	movs	r3, #4
   10b32:	4c2e      	ldr	r4, [pc, #184]	; (10bec <spi_write_reg+0x120>)
   10b34:	47a0      	blx	r4
   10b36:	0002      	movs	r2, r0
   10b38:	230c      	movs	r3, #12
   10b3a:	18fb      	adds	r3, r7, r3
   10b3c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   10b3e:	230c      	movs	r3, #12
   10b40:	18fb      	adds	r3, r7, r3
   10b42:	781b      	ldrb	r3, [r3, #0]
   10b44:	b25b      	sxtb	r3, r3
   10b46:	2b01      	cmp	r3, #1
   10b48:	d010      	beq.n	10b6c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   10b4a:	4a29      	ldr	r2, [pc, #164]	; (10bf0 <spi_write_reg+0x124>)
   10b4c:	4929      	ldr	r1, [pc, #164]	; (10bf4 <spi_write_reg+0x128>)
   10b4e:	4b2a      	ldr	r3, [pc, #168]	; (10bf8 <spi_write_reg+0x12c>)
   10b50:	0018      	movs	r0, r3
   10b52:	4b2a      	ldr	r3, [pc, #168]	; (10bfc <spi_write_reg+0x130>)
   10b54:	4798      	blx	r3
   10b56:	687a      	ldr	r2, [r7, #4]
   10b58:	4b29      	ldr	r3, [pc, #164]	; (10c00 <spi_write_reg+0x134>)
   10b5a:	0011      	movs	r1, r2
   10b5c:	0018      	movs	r0, r3
   10b5e:	4b27      	ldr	r3, [pc, #156]	; (10bfc <spi_write_reg+0x130>)
   10b60:	4798      	blx	r3
   10b62:	4b28      	ldr	r3, [pc, #160]	; (10c04 <spi_write_reg+0x138>)
   10b64:	0018      	movs	r0, r3
   10b66:	4b25      	ldr	r3, [pc, #148]	; (10bfc <spi_write_reg+0x130>)
   10b68:	4798      	blx	r3
		goto _FAIL_;
   10b6a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   10b6c:	230c      	movs	r3, #12
   10b6e:	18fb      	adds	r3, r7, r3
   10b70:	781b      	ldrb	r3, [r3, #0]
   10b72:	b25b      	sxtb	r3, r3
   10b74:	2b01      	cmp	r3, #1
   10b76:	d030      	beq.n	10bda <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   10b78:	2001      	movs	r0, #1
   10b7a:	4b23      	ldr	r3, [pc, #140]	; (10c08 <spi_write_reg+0x13c>)
   10b7c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   10b7e:	2300      	movs	r3, #0
   10b80:	9300      	str	r3, [sp, #0]
   10b82:	2300      	movs	r3, #0
   10b84:	2200      	movs	r2, #0
   10b86:	2100      	movs	r1, #0
   10b88:	20cf      	movs	r0, #207	; 0xcf
   10b8a:	4c20      	ldr	r4, [pc, #128]	; (10c0c <spi_write_reg+0x140>)
   10b8c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   10b8e:	20cf      	movs	r0, #207	; 0xcf
   10b90:	4b1f      	ldr	r3, [pc, #124]	; (10c10 <spi_write_reg+0x144>)
   10b92:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   10b94:	23ea      	movs	r3, #234	; 0xea
   10b96:	009a      	lsls	r2, r3, #2
   10b98:	4916      	ldr	r1, [pc, #88]	; (10bf4 <spi_write_reg+0x128>)
   10b9a:	4b17      	ldr	r3, [pc, #92]	; (10bf8 <spi_write_reg+0x12c>)
   10b9c:	0018      	movs	r0, r3
   10b9e:	4b17      	ldr	r3, [pc, #92]	; (10bfc <spi_write_reg+0x130>)
   10ba0:	4798      	blx	r3
   10ba2:	230f      	movs	r3, #15
   10ba4:	18fb      	adds	r3, r7, r3
   10ba6:	7819      	ldrb	r1, [r3, #0]
   10ba8:	683b      	ldr	r3, [r7, #0]
   10baa:	687a      	ldr	r2, [r7, #4]
   10bac:	4819      	ldr	r0, [pc, #100]	; (10c14 <spi_write_reg+0x148>)
   10bae:	4c13      	ldr	r4, [pc, #76]	; (10bfc <spi_write_reg+0x130>)
   10bb0:	47a0      	blx	r4
   10bb2:	4b14      	ldr	r3, [pc, #80]	; (10c04 <spi_write_reg+0x138>)
   10bb4:	0018      	movs	r0, r3
   10bb6:	4b11      	ldr	r3, [pc, #68]	; (10bfc <spi_write_reg+0x130>)
   10bb8:	4798      	blx	r3
		nm_bsp_sleep(1);
   10bba:	2001      	movs	r0, #1
   10bbc:	4b12      	ldr	r3, [pc, #72]	; (10c08 <spi_write_reg+0x13c>)
   10bbe:	4798      	blx	r3
		retry--;
   10bc0:	230f      	movs	r3, #15
   10bc2:	18fb      	adds	r3, r7, r3
   10bc4:	781a      	ldrb	r2, [r3, #0]
   10bc6:	230f      	movs	r3, #15
   10bc8:	18fb      	adds	r3, r7, r3
   10bca:	3a01      	subs	r2, #1
   10bcc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   10bce:	230f      	movs	r3, #15
   10bd0:	18fb      	adds	r3, r7, r3
   10bd2:	781b      	ldrb	r3, [r3, #0]
   10bd4:	2b00      	cmp	r3, #0
   10bd6:	d000      	beq.n	10bda <spi_write_reg+0x10e>
   10bd8:	e78d      	b.n	10af6 <spi_write_reg+0x2a>
	}

	return result;
   10bda:	230c      	movs	r3, #12
   10bdc:	18fb      	adds	r3, r7, r3
   10bde:	781b      	ldrb	r3, [r3, #0]
   10be0:	b25b      	sxtb	r3, r3
}
   10be2:	0018      	movs	r0, r3
   10be4:	46bd      	mov	sp, r7
   10be6:	b005      	add	sp, #20
   10be8:	bd90      	pop	{r4, r7, pc}
   10bea:	46c0      	nop			; (mov r8, r8)
   10bec:	00010001 	.word	0x00010001
   10bf0:	0000039d 	.word	0x0000039d
   10bf4:	000255fc 	.word	0x000255fc
   10bf8:	00024fc4 	.word	0x00024fc4
   10bfc:	0000a4ed 	.word	0x0000a4ed
   10c00:	00025330 	.word	0x00025330
   10c04:	00025004 	.word	0x00025004
   10c08:	0000c941 	.word	0x0000c941
   10c0c:	0000fa85 	.word	0x0000fa85
   10c10:	0000fec5 	.word	0x0000fec5
   10c14:	0002535c 	.word	0x0002535c

00010c18 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   10c18:	b590      	push	{r4, r7, lr}
   10c1a:	b089      	sub	sp, #36	; 0x24
   10c1c:	af02      	add	r7, sp, #8
   10c1e:	60f8      	str	r0, [r7, #12]
   10c20:	60b9      	str	r1, [r7, #8]
   10c22:	1dbb      	adds	r3, r7, #6
   10c24:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   10c26:	2316      	movs	r3, #22
   10c28:	18fb      	adds	r3, r7, r3
   10c2a:	220a      	movs	r2, #10
   10c2c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   10c2e:	2315      	movs	r3, #21
   10c30:	18fb      	adds	r3, r7, r3
   10c32:	22c7      	movs	r2, #199	; 0xc7
   10c34:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   10c36:	1dbb      	adds	r3, r7, #6
   10c38:	881a      	ldrh	r2, [r3, #0]
   10c3a:	68f9      	ldr	r1, [r7, #12]
   10c3c:	2315      	movs	r3, #21
   10c3e:	18fb      	adds	r3, r7, r3
   10c40:	7818      	ldrb	r0, [r3, #0]
   10c42:	2300      	movs	r3, #0
   10c44:	9300      	str	r3, [sp, #0]
   10c46:	0013      	movs	r3, r2
   10c48:	2200      	movs	r2, #0
   10c4a:	4c4d      	ldr	r4, [pc, #308]	; (10d80 <nm_spi_write+0x168>)
   10c4c:	47a0      	blx	r4
   10c4e:	0002      	movs	r2, r0
   10c50:	2317      	movs	r3, #23
   10c52:	18fb      	adds	r3, r7, r3
   10c54:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   10c56:	2317      	movs	r3, #23
   10c58:	18fb      	adds	r3, r7, r3
   10c5a:	781b      	ldrb	r3, [r3, #0]
   10c5c:	b25b      	sxtb	r3, r3
   10c5e:	2b01      	cmp	r3, #1
   10c60:	d010      	beq.n	10c84 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   10c62:	4a48      	ldr	r2, [pc, #288]	; (10d84 <nm_spi_write+0x16c>)
   10c64:	4948      	ldr	r1, [pc, #288]	; (10d88 <nm_spi_write+0x170>)
   10c66:	4b49      	ldr	r3, [pc, #292]	; (10d8c <nm_spi_write+0x174>)
   10c68:	0018      	movs	r0, r3
   10c6a:	4b49      	ldr	r3, [pc, #292]	; (10d90 <nm_spi_write+0x178>)
   10c6c:	4798      	blx	r3
   10c6e:	68fa      	ldr	r2, [r7, #12]
   10c70:	4b48      	ldr	r3, [pc, #288]	; (10d94 <nm_spi_write+0x17c>)
   10c72:	0011      	movs	r1, r2
   10c74:	0018      	movs	r0, r3
   10c76:	4b46      	ldr	r3, [pc, #280]	; (10d90 <nm_spi_write+0x178>)
   10c78:	4798      	blx	r3
   10c7a:	4b47      	ldr	r3, [pc, #284]	; (10d98 <nm_spi_write+0x180>)
   10c7c:	0018      	movs	r0, r3
   10c7e:	4b44      	ldr	r3, [pc, #272]	; (10d90 <nm_spi_write+0x178>)
   10c80:	4798      	blx	r3
		goto _FAIL_;
   10c82:	e03e      	b.n	10d02 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   10c84:	2317      	movs	r3, #23
   10c86:	18fc      	adds	r4, r7, r3
   10c88:	1dbb      	adds	r3, r7, #6
   10c8a:	881a      	ldrh	r2, [r3, #0]
   10c8c:	68bb      	ldr	r3, [r7, #8]
   10c8e:	0011      	movs	r1, r2
   10c90:	0018      	movs	r0, r3
   10c92:	4b42      	ldr	r3, [pc, #264]	; (10d9c <nm_spi_write+0x184>)
   10c94:	4798      	blx	r3
   10c96:	0003      	movs	r3, r0
   10c98:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   10c9a:	2317      	movs	r3, #23
   10c9c:	18fb      	adds	r3, r7, r3
   10c9e:	781b      	ldrb	r3, [r3, #0]
   10ca0:	b25b      	sxtb	r3, r3
   10ca2:	2b01      	cmp	r3, #1
   10ca4:	d00e      	beq.n	10cc4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   10ca6:	4a3e      	ldr	r2, [pc, #248]	; (10da0 <nm_spi_write+0x188>)
   10ca8:	4937      	ldr	r1, [pc, #220]	; (10d88 <nm_spi_write+0x170>)
   10caa:	4b38      	ldr	r3, [pc, #224]	; (10d8c <nm_spi_write+0x174>)
   10cac:	0018      	movs	r0, r3
   10cae:	4b38      	ldr	r3, [pc, #224]	; (10d90 <nm_spi_write+0x178>)
   10cb0:	4798      	blx	r3
   10cb2:	4b3c      	ldr	r3, [pc, #240]	; (10da4 <nm_spi_write+0x18c>)
   10cb4:	0018      	movs	r0, r3
   10cb6:	4b36      	ldr	r3, [pc, #216]	; (10d90 <nm_spi_write+0x178>)
   10cb8:	4798      	blx	r3
   10cba:	4b37      	ldr	r3, [pc, #220]	; (10d98 <nm_spi_write+0x180>)
   10cbc:	0018      	movs	r0, r3
   10cbe:	4b34      	ldr	r3, [pc, #208]	; (10d90 <nm_spi_write+0x178>)
   10cc0:	4798      	blx	r3
		goto _FAIL_;
   10cc2:	e01e      	b.n	10d02 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   10cc4:	2317      	movs	r3, #23
   10cc6:	18fc      	adds	r4, r7, r3
   10cc8:	2315      	movs	r3, #21
   10cca:	18fb      	adds	r3, r7, r3
   10ccc:	781b      	ldrb	r3, [r3, #0]
   10cce:	0018      	movs	r0, r3
   10cd0:	4b35      	ldr	r3, [pc, #212]	; (10da8 <nm_spi_write+0x190>)
   10cd2:	4798      	blx	r3
   10cd4:	0003      	movs	r3, r0
   10cd6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   10cd8:	2317      	movs	r3, #23
   10cda:	18fb      	adds	r3, r7, r3
   10cdc:	781b      	ldrb	r3, [r3, #0]
   10cde:	b25b      	sxtb	r3, r3
   10ce0:	2b01      	cmp	r3, #1
   10ce2:	d00e      	beq.n	10d02 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   10ce4:	4a31      	ldr	r2, [pc, #196]	; (10dac <nm_spi_write+0x194>)
   10ce6:	4928      	ldr	r1, [pc, #160]	; (10d88 <nm_spi_write+0x170>)
   10ce8:	4b28      	ldr	r3, [pc, #160]	; (10d8c <nm_spi_write+0x174>)
   10cea:	0018      	movs	r0, r3
   10cec:	4b28      	ldr	r3, [pc, #160]	; (10d90 <nm_spi_write+0x178>)
   10cee:	4798      	blx	r3
   10cf0:	4b2c      	ldr	r3, [pc, #176]	; (10da4 <nm_spi_write+0x18c>)
   10cf2:	0018      	movs	r0, r3
   10cf4:	4b26      	ldr	r3, [pc, #152]	; (10d90 <nm_spi_write+0x178>)
   10cf6:	4798      	blx	r3
   10cf8:	4b27      	ldr	r3, [pc, #156]	; (10d98 <nm_spi_write+0x180>)
   10cfa:	0018      	movs	r0, r3
   10cfc:	4b24      	ldr	r3, [pc, #144]	; (10d90 <nm_spi_write+0x178>)
   10cfe:	4798      	blx	r3
		goto _FAIL_;
   10d00:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   10d02:	2317      	movs	r3, #23
   10d04:	18fb      	adds	r3, r7, r3
   10d06:	781b      	ldrb	r3, [r3, #0]
   10d08:	b25b      	sxtb	r3, r3
   10d0a:	2b01      	cmp	r3, #1
   10d0c:	d030      	beq.n	10d70 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   10d0e:	2001      	movs	r0, #1
   10d10:	4b27      	ldr	r3, [pc, #156]	; (10db0 <nm_spi_write+0x198>)
   10d12:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   10d14:	2300      	movs	r3, #0
   10d16:	9300      	str	r3, [sp, #0]
   10d18:	2300      	movs	r3, #0
   10d1a:	2200      	movs	r2, #0
   10d1c:	2100      	movs	r1, #0
   10d1e:	20cf      	movs	r0, #207	; 0xcf
   10d20:	4c24      	ldr	r4, [pc, #144]	; (10db4 <nm_spi_write+0x19c>)
   10d22:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   10d24:	20cf      	movs	r0, #207	; 0xcf
   10d26:	4b24      	ldr	r3, [pc, #144]	; (10db8 <nm_spi_write+0x1a0>)
   10d28:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   10d2a:	4a24      	ldr	r2, [pc, #144]	; (10dbc <nm_spi_write+0x1a4>)
   10d2c:	4916      	ldr	r1, [pc, #88]	; (10d88 <nm_spi_write+0x170>)
   10d2e:	4b17      	ldr	r3, [pc, #92]	; (10d8c <nm_spi_write+0x174>)
   10d30:	0018      	movs	r0, r3
   10d32:	4b17      	ldr	r3, [pc, #92]	; (10d90 <nm_spi_write+0x178>)
   10d34:	4798      	blx	r3
   10d36:	2316      	movs	r3, #22
   10d38:	18fb      	adds	r3, r7, r3
   10d3a:	7819      	ldrb	r1, [r3, #0]
   10d3c:	1dbb      	adds	r3, r7, #6
   10d3e:	881b      	ldrh	r3, [r3, #0]
   10d40:	68fa      	ldr	r2, [r7, #12]
   10d42:	481f      	ldr	r0, [pc, #124]	; (10dc0 <nm_spi_write+0x1a8>)
   10d44:	4c12      	ldr	r4, [pc, #72]	; (10d90 <nm_spi_write+0x178>)
   10d46:	47a0      	blx	r4
   10d48:	4b13      	ldr	r3, [pc, #76]	; (10d98 <nm_spi_write+0x180>)
   10d4a:	0018      	movs	r0, r3
   10d4c:	4b10      	ldr	r3, [pc, #64]	; (10d90 <nm_spi_write+0x178>)
   10d4e:	4798      	blx	r3
		nm_bsp_sleep(1);
   10d50:	2001      	movs	r0, #1
   10d52:	4b17      	ldr	r3, [pc, #92]	; (10db0 <nm_spi_write+0x198>)
   10d54:	4798      	blx	r3
		retry--;
   10d56:	2316      	movs	r3, #22
   10d58:	18fb      	adds	r3, r7, r3
   10d5a:	781a      	ldrb	r2, [r3, #0]
   10d5c:	2316      	movs	r3, #22
   10d5e:	18fb      	adds	r3, r7, r3
   10d60:	3a01      	subs	r2, #1
   10d62:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   10d64:	2316      	movs	r3, #22
   10d66:	18fb      	adds	r3, r7, r3
   10d68:	781b      	ldrb	r3, [r3, #0]
   10d6a:	2b00      	cmp	r3, #0
   10d6c:	d000      	beq.n	10d70 <nm_spi_write+0x158>
   10d6e:	e762      	b.n	10c36 <nm_spi_write+0x1e>
	}


	return result;
   10d70:	2317      	movs	r3, #23
   10d72:	18fb      	adds	r3, r7, r3
   10d74:	781b      	ldrb	r3, [r3, #0]
   10d76:	b25b      	sxtb	r3, r3
}
   10d78:	0018      	movs	r0, r3
   10d7a:	46bd      	mov	sp, r7
   10d7c:	b007      	add	sp, #28
   10d7e:	bd90      	pop	{r4, r7, pc}
   10d80:	00010001 	.word	0x00010001
   10d84:	000003cf 	.word	0x000003cf
   10d88:	0002560c 	.word	0x0002560c
   10d8c:	00024fc4 	.word	0x00024fc4
   10d90:	0000a4ed 	.word	0x0000a4ed
   10d94:	00025378 	.word	0x00025378
   10d98:	00025004 	.word	0x00025004
   10d9c:	000108f5 	.word	0x000108f5
   10da0:	000003d9 	.word	0x000003d9
   10da4:	000253a8 	.word	0x000253a8
   10da8:	0000fdc5 	.word	0x0000fdc5
   10dac:	000003e1 	.word	0x000003e1
   10db0:	0000c941 	.word	0x0000c941
   10db4:	0000fa85 	.word	0x0000fa85
   10db8:	0000fec5 	.word	0x0000fec5
   10dbc:	000003eb 	.word	0x000003eb
   10dc0:	000253d0 	.word	0x000253d0

00010dc4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   10dc4:	b590      	push	{r4, r7, lr}
   10dc6:	b087      	sub	sp, #28
   10dc8:	af02      	add	r7, sp, #8
   10dca:	6078      	str	r0, [r7, #4]
   10dcc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   10dce:	230f      	movs	r3, #15
   10dd0:	18fb      	adds	r3, r7, r3
   10dd2:	220a      	movs	r2, #10
   10dd4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   10dd6:	230c      	movs	r3, #12
   10dd8:	18fb      	adds	r3, r7, r3
   10dda:	2201      	movs	r2, #1
   10ddc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   10dde:	230e      	movs	r3, #14
   10de0:	18fb      	adds	r3, r7, r3
   10de2:	22ca      	movs	r2, #202	; 0xca
   10de4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   10de6:	230d      	movs	r3, #13
   10de8:	18fb      	adds	r3, r7, r3
   10dea:	2200      	movs	r2, #0
   10dec:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   10dee:	687b      	ldr	r3, [r7, #4]
   10df0:	2bff      	cmp	r3, #255	; 0xff
   10df2:	d808      	bhi.n	10e06 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   10df4:	230e      	movs	r3, #14
   10df6:	18fb      	adds	r3, r7, r3
   10df8:	22c4      	movs	r2, #196	; 0xc4
   10dfa:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   10dfc:	230d      	movs	r3, #13
   10dfe:	18fb      	adds	r3, r7, r3
   10e00:	2201      	movs	r2, #1
   10e02:	701a      	strb	r2, [r3, #0]
   10e04:	e007      	b.n	10e16 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   10e06:	230e      	movs	r3, #14
   10e08:	18fb      	adds	r3, r7, r3
   10e0a:	22ca      	movs	r2, #202	; 0xca
   10e0c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   10e0e:	230d      	movs	r3, #13
   10e10:	18fb      	adds	r3, r7, r3
   10e12:	2200      	movs	r2, #0
   10e14:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   10e16:	2308      	movs	r3, #8
   10e18:	18fa      	adds	r2, r7, r3
   10e1a:	6879      	ldr	r1, [r7, #4]
   10e1c:	230e      	movs	r3, #14
   10e1e:	18fb      	adds	r3, r7, r3
   10e20:	7818      	ldrb	r0, [r3, #0]
   10e22:	230d      	movs	r3, #13
   10e24:	18fb      	adds	r3, r7, r3
   10e26:	781b      	ldrb	r3, [r3, #0]
   10e28:	9300      	str	r3, [sp, #0]
   10e2a:	2304      	movs	r3, #4
   10e2c:	4c37      	ldr	r4, [pc, #220]	; (10f0c <spi_read_reg+0x148>)
   10e2e:	47a0      	blx	r4
   10e30:	0002      	movs	r2, r0
   10e32:	230c      	movs	r3, #12
   10e34:	18fb      	adds	r3, r7, r3
   10e36:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   10e38:	230c      	movs	r3, #12
   10e3a:	18fb      	adds	r3, r7, r3
   10e3c:	781b      	ldrb	r3, [r3, #0]
   10e3e:	b25b      	sxtb	r3, r3
   10e40:	2b01      	cmp	r3, #1
   10e42:	d010      	beq.n	10e66 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   10e44:	4a32      	ldr	r2, [pc, #200]	; (10f10 <spi_read_reg+0x14c>)
   10e46:	4933      	ldr	r1, [pc, #204]	; (10f14 <spi_read_reg+0x150>)
   10e48:	4b33      	ldr	r3, [pc, #204]	; (10f18 <spi_read_reg+0x154>)
   10e4a:	0018      	movs	r0, r3
   10e4c:	4b33      	ldr	r3, [pc, #204]	; (10f1c <spi_read_reg+0x158>)
   10e4e:	4798      	blx	r3
   10e50:	687a      	ldr	r2, [r7, #4]
   10e52:	4b33      	ldr	r3, [pc, #204]	; (10f20 <spi_read_reg+0x15c>)
   10e54:	0011      	movs	r1, r2
   10e56:	0018      	movs	r0, r3
   10e58:	4b30      	ldr	r3, [pc, #192]	; (10f1c <spi_read_reg+0x158>)
   10e5a:	4798      	blx	r3
   10e5c:	4b31      	ldr	r3, [pc, #196]	; (10f24 <spi_read_reg+0x160>)
   10e5e:	0018      	movs	r0, r3
   10e60:	4b2e      	ldr	r3, [pc, #184]	; (10f1c <spi_read_reg+0x158>)
   10e62:	4798      	blx	r3
		goto _FAIL_;
   10e64:	e014      	b.n	10e90 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   10e66:	2308      	movs	r3, #8
   10e68:	18fb      	adds	r3, r7, r3
   10e6a:	781b      	ldrb	r3, [r3, #0]
   10e6c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   10e6e:	2308      	movs	r3, #8
   10e70:	18fb      	adds	r3, r7, r3
   10e72:	785b      	ldrb	r3, [r3, #1]
   10e74:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   10e76:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   10e78:	2308      	movs	r3, #8
   10e7a:	18fb      	adds	r3, r7, r3
   10e7c:	789b      	ldrb	r3, [r3, #2]
   10e7e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   10e80:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   10e82:	2308      	movs	r3, #8
   10e84:	18fb      	adds	r3, r7, r3
   10e86:	78db      	ldrb	r3, [r3, #3]
   10e88:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   10e8a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   10e8c:	683b      	ldr	r3, [r7, #0]
   10e8e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   10e90:	230c      	movs	r3, #12
   10e92:	18fb      	adds	r3, r7, r3
   10e94:	781b      	ldrb	r3, [r3, #0]
   10e96:	b25b      	sxtb	r3, r3
   10e98:	2b01      	cmp	r3, #1
   10e9a:	d02f      	beq.n	10efc <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   10e9c:	2001      	movs	r0, #1
   10e9e:	4b22      	ldr	r3, [pc, #136]	; (10f28 <spi_read_reg+0x164>)
   10ea0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   10ea2:	2300      	movs	r3, #0
   10ea4:	9300      	str	r3, [sp, #0]
   10ea6:	2300      	movs	r3, #0
   10ea8:	2200      	movs	r2, #0
   10eaa:	2100      	movs	r1, #0
   10eac:	20cf      	movs	r0, #207	; 0xcf
   10eae:	4c1f      	ldr	r4, [pc, #124]	; (10f2c <spi_read_reg+0x168>)
   10eb0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   10eb2:	20cf      	movs	r0, #207	; 0xcf
   10eb4:	4b1e      	ldr	r3, [pc, #120]	; (10f30 <spi_read_reg+0x16c>)
   10eb6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   10eb8:	4a1e      	ldr	r2, [pc, #120]	; (10f34 <spi_read_reg+0x170>)
   10eba:	4916      	ldr	r1, [pc, #88]	; (10f14 <spi_read_reg+0x150>)
   10ebc:	4b16      	ldr	r3, [pc, #88]	; (10f18 <spi_read_reg+0x154>)
   10ebe:	0018      	movs	r0, r3
   10ec0:	4b16      	ldr	r3, [pc, #88]	; (10f1c <spi_read_reg+0x158>)
   10ec2:	4798      	blx	r3
   10ec4:	230f      	movs	r3, #15
   10ec6:	18fb      	adds	r3, r7, r3
   10ec8:	7819      	ldrb	r1, [r3, #0]
   10eca:	687a      	ldr	r2, [r7, #4]
   10ecc:	4b1a      	ldr	r3, [pc, #104]	; (10f38 <spi_read_reg+0x174>)
   10ece:	0018      	movs	r0, r3
   10ed0:	4b12      	ldr	r3, [pc, #72]	; (10f1c <spi_read_reg+0x158>)
   10ed2:	4798      	blx	r3
   10ed4:	4b13      	ldr	r3, [pc, #76]	; (10f24 <spi_read_reg+0x160>)
   10ed6:	0018      	movs	r0, r3
   10ed8:	4b10      	ldr	r3, [pc, #64]	; (10f1c <spi_read_reg+0x158>)
   10eda:	4798      	blx	r3
		nm_bsp_sleep(1);
   10edc:	2001      	movs	r0, #1
   10ede:	4b12      	ldr	r3, [pc, #72]	; (10f28 <spi_read_reg+0x164>)
   10ee0:	4798      	blx	r3
		retry--;
   10ee2:	230f      	movs	r3, #15
   10ee4:	18fb      	adds	r3, r7, r3
   10ee6:	781a      	ldrb	r2, [r3, #0]
   10ee8:	230f      	movs	r3, #15
   10eea:	18fb      	adds	r3, r7, r3
   10eec:	3a01      	subs	r2, #1
   10eee:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   10ef0:	230f      	movs	r3, #15
   10ef2:	18fb      	adds	r3, r7, r3
   10ef4:	781b      	ldrb	r3, [r3, #0]
   10ef6:	2b00      	cmp	r3, #0
   10ef8:	d000      	beq.n	10efc <spi_read_reg+0x138>
   10efa:	e778      	b.n	10dee <spi_read_reg+0x2a>
	}
		
	return result;
   10efc:	230c      	movs	r3, #12
   10efe:	18fb      	adds	r3, r7, r3
   10f00:	781b      	ldrb	r3, [r3, #0]
   10f02:	b25b      	sxtb	r3, r3
}
   10f04:	0018      	movs	r0, r3
   10f06:	46bd      	mov	sp, r7
   10f08:	b005      	add	sp, #20
   10f0a:	bd90      	pop	{r4, r7, pc}
   10f0c:	00010001 	.word	0x00010001
   10f10:	00000423 	.word	0x00000423
   10f14:	0002561c 	.word	0x0002561c
   10f18:	00024fc4 	.word	0x00024fc4
   10f1c:	0000a4ed 	.word	0x0000a4ed
   10f20:	000253ec 	.word	0x000253ec
   10f24:	00025004 	.word	0x00025004
   10f28:	0000c941 	.word	0x0000c941
   10f2c:	0000fa85 	.word	0x0000fa85
   10f30:	0000fec5 	.word	0x0000fec5
   10f34:	00000435 	.word	0x00000435
   10f38:	00025418 	.word	0x00025418

00010f3c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   10f3c:	b590      	push	{r4, r7, lr}
   10f3e:	b089      	sub	sp, #36	; 0x24
   10f40:	af02      	add	r7, sp, #8
   10f42:	60f8      	str	r0, [r7, #12]
   10f44:	60b9      	str	r1, [r7, #8]
   10f46:	1dbb      	adds	r3, r7, #6
   10f48:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   10f4a:	2316      	movs	r3, #22
   10f4c:	18fb      	adds	r3, r7, r3
   10f4e:	22c8      	movs	r2, #200	; 0xc8
   10f50:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   10f52:	2317      	movs	r3, #23
   10f54:	18fb      	adds	r3, r7, r3
   10f56:	220a      	movs	r2, #10
   10f58:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   10f5a:	1dbb      	adds	r3, r7, #6
   10f5c:	881c      	ldrh	r4, [r3, #0]
   10f5e:	68ba      	ldr	r2, [r7, #8]
   10f60:	68f9      	ldr	r1, [r7, #12]
   10f62:	2316      	movs	r3, #22
   10f64:	18fb      	adds	r3, r7, r3
   10f66:	7818      	ldrb	r0, [r3, #0]
   10f68:	2300      	movs	r3, #0
   10f6a:	9300      	str	r3, [sp, #0]
   10f6c:	0023      	movs	r3, r4
   10f6e:	4c2e      	ldr	r4, [pc, #184]	; (11028 <nm_spi_read+0xec>)
   10f70:	47a0      	blx	r4
   10f72:	0002      	movs	r2, r0
   10f74:	2315      	movs	r3, #21
   10f76:	18fb      	adds	r3, r7, r3
   10f78:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   10f7a:	2315      	movs	r3, #21
   10f7c:	18fb      	adds	r3, r7, r3
   10f7e:	781b      	ldrb	r3, [r3, #0]
   10f80:	b25b      	sxtb	r3, r3
   10f82:	2b01      	cmp	r3, #1
   10f84:	d010      	beq.n	10fa8 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   10f86:	4a29      	ldr	r2, [pc, #164]	; (1102c <nm_spi_read+0xf0>)
   10f88:	4929      	ldr	r1, [pc, #164]	; (11030 <nm_spi_read+0xf4>)
   10f8a:	4b2a      	ldr	r3, [pc, #168]	; (11034 <nm_spi_read+0xf8>)
   10f8c:	0018      	movs	r0, r3
   10f8e:	4b2a      	ldr	r3, [pc, #168]	; (11038 <nm_spi_read+0xfc>)
   10f90:	4798      	blx	r3
   10f92:	68fa      	ldr	r2, [r7, #12]
   10f94:	4b29      	ldr	r3, [pc, #164]	; (1103c <nm_spi_read+0x100>)
   10f96:	0011      	movs	r1, r2
   10f98:	0018      	movs	r0, r3
   10f9a:	4b27      	ldr	r3, [pc, #156]	; (11038 <nm_spi_read+0xfc>)
   10f9c:	4798      	blx	r3
   10f9e:	4b28      	ldr	r3, [pc, #160]	; (11040 <nm_spi_read+0x104>)
   10fa0:	0018      	movs	r0, r3
   10fa2:	4b25      	ldr	r3, [pc, #148]	; (11038 <nm_spi_read+0xfc>)
   10fa4:	4798      	blx	r3
		goto _FAIL_;
   10fa6:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   10fa8:	2315      	movs	r3, #21
   10faa:	18fb      	adds	r3, r7, r3
   10fac:	781b      	ldrb	r3, [r3, #0]
   10fae:	b25b      	sxtb	r3, r3
   10fb0:	2b01      	cmp	r3, #1
   10fb2:	d030      	beq.n	11016 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   10fb4:	2001      	movs	r0, #1
   10fb6:	4b23      	ldr	r3, [pc, #140]	; (11044 <nm_spi_read+0x108>)
   10fb8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   10fba:	2300      	movs	r3, #0
   10fbc:	9300      	str	r3, [sp, #0]
   10fbe:	2300      	movs	r3, #0
   10fc0:	2200      	movs	r2, #0
   10fc2:	2100      	movs	r1, #0
   10fc4:	20cf      	movs	r0, #207	; 0xcf
   10fc6:	4c20      	ldr	r4, [pc, #128]	; (11048 <nm_spi_read+0x10c>)
   10fc8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   10fca:	20cf      	movs	r0, #207	; 0xcf
   10fcc:	4b1f      	ldr	r3, [pc, #124]	; (1104c <nm_spi_read+0x110>)
   10fce:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   10fd0:	4a1f      	ldr	r2, [pc, #124]	; (11050 <nm_spi_read+0x114>)
   10fd2:	4917      	ldr	r1, [pc, #92]	; (11030 <nm_spi_read+0xf4>)
   10fd4:	4b17      	ldr	r3, [pc, #92]	; (11034 <nm_spi_read+0xf8>)
   10fd6:	0018      	movs	r0, r3
   10fd8:	4b17      	ldr	r3, [pc, #92]	; (11038 <nm_spi_read+0xfc>)
   10fda:	4798      	blx	r3
   10fdc:	2317      	movs	r3, #23
   10fde:	18fb      	adds	r3, r7, r3
   10fe0:	7819      	ldrb	r1, [r3, #0]
   10fe2:	1dbb      	adds	r3, r7, #6
   10fe4:	881b      	ldrh	r3, [r3, #0]
   10fe6:	68fa      	ldr	r2, [r7, #12]
   10fe8:	481a      	ldr	r0, [pc, #104]	; (11054 <nm_spi_read+0x118>)
   10fea:	4c13      	ldr	r4, [pc, #76]	; (11038 <nm_spi_read+0xfc>)
   10fec:	47a0      	blx	r4
   10fee:	4b14      	ldr	r3, [pc, #80]	; (11040 <nm_spi_read+0x104>)
   10ff0:	0018      	movs	r0, r3
   10ff2:	4b11      	ldr	r3, [pc, #68]	; (11038 <nm_spi_read+0xfc>)
   10ff4:	4798      	blx	r3
		nm_bsp_sleep(1);
   10ff6:	2001      	movs	r0, #1
   10ff8:	4b12      	ldr	r3, [pc, #72]	; (11044 <nm_spi_read+0x108>)
   10ffa:	4798      	blx	r3
		retry--;
   10ffc:	2317      	movs	r3, #23
   10ffe:	18fb      	adds	r3, r7, r3
   11000:	781a      	ldrb	r2, [r3, #0]
   11002:	2317      	movs	r3, #23
   11004:	18fb      	adds	r3, r7, r3
   11006:	3a01      	subs	r2, #1
   11008:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   1100a:	2317      	movs	r3, #23
   1100c:	18fb      	adds	r3, r7, r3
   1100e:	781b      	ldrb	r3, [r3, #0]
   11010:	2b00      	cmp	r3, #0
   11012:	d000      	beq.n	11016 <nm_spi_read+0xda>
   11014:	e7a1      	b.n	10f5a <nm_spi_read+0x1e>
	}

	return result;
   11016:	2315      	movs	r3, #21
   11018:	18fb      	adds	r3, r7, r3
   1101a:	781b      	ldrb	r3, [r3, #0]
   1101c:	b25b      	sxtb	r3, r3
}
   1101e:	0018      	movs	r0, r3
   11020:	46bd      	mov	sp, r7
   11022:	b007      	add	sp, #28
   11024:	bd90      	pop	{r4, r7, pc}
   11026:	46c0      	nop			; (mov r8, r8)
   11028:	00010001 	.word	0x00010001
   1102c:	00000472 	.word	0x00000472
   11030:	0002562c 	.word	0x0002562c
   11034:	00024fc4 	.word	0x00024fc4
   11038:	0000a4ed 	.word	0x0000a4ed
   1103c:	00025430 	.word	0x00025430
   11040:	00025004 	.word	0x00025004
   11044:	0000c941 	.word	0x0000c941
   11048:	0000fa85 	.word	0x0000fa85
   1104c:	0000fec5 	.word	0x0000fec5
   11050:	0000047d 	.word	0x0000047d
   11054:	000253d0 	.word	0x000253d0

00011058 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   11058:	b580      	push	{r7, lr}
   1105a:	b082      	sub	sp, #8
   1105c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   1105e:	4b0c      	ldr	r3, [pc, #48]	; (11090 <spi_init_pkt_sz+0x38>)
   11060:	0018      	movs	r0, r3
   11062:	4b0c      	ldr	r3, [pc, #48]	; (11094 <spi_init_pkt_sz+0x3c>)
   11064:	4798      	blx	r3
   11066:	0003      	movs	r3, r0
   11068:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   1106a:	687b      	ldr	r3, [r7, #4]
   1106c:	2270      	movs	r2, #112	; 0x70
   1106e:	4393      	bics	r3, r2
   11070:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   11072:	687b      	ldr	r3, [r7, #4]
   11074:	2250      	movs	r2, #80	; 0x50
   11076:	4313      	orrs	r3, r2
   11078:	607b      	str	r3, [r7, #4]
   1107a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   1107c:	687b      	ldr	r3, [r7, #4]
   1107e:	4a04      	ldr	r2, [pc, #16]	; (11090 <spi_init_pkt_sz+0x38>)
   11080:	0019      	movs	r1, r3
   11082:	0010      	movs	r0, r2
   11084:	4b04      	ldr	r3, [pc, #16]	; (11098 <spi_init_pkt_sz+0x40>)
   11086:	4798      	blx	r3
}
   11088:	46c0      	nop			; (mov r8, r8)
   1108a:	46bd      	mov	sp, r7
   1108c:	b002      	add	sp, #8
   1108e:	bd80      	pop	{r7, pc}
   11090:	0000e824 	.word	0x0000e824
   11094:	00011231 	.word	0x00011231
   11098:	000112a5 	.word	0x000112a5

0001109c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   1109c:	b590      	push	{r4, r7, lr}
   1109e:	b083      	sub	sp, #12
   110a0:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   110a2:	2300      	movs	r3, #0
   110a4:	9300      	str	r3, [sp, #0]
   110a6:	2300      	movs	r3, #0
   110a8:	2200      	movs	r2, #0
   110aa:	2100      	movs	r1, #0
   110ac:	20cf      	movs	r0, #207	; 0xcf
   110ae:	4c05      	ldr	r4, [pc, #20]	; (110c4 <nm_spi_reset+0x28>)
   110b0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   110b2:	20cf      	movs	r0, #207	; 0xcf
   110b4:	4b04      	ldr	r3, [pc, #16]	; (110c8 <nm_spi_reset+0x2c>)
   110b6:	4798      	blx	r3
	return M2M_SUCCESS;
   110b8:	2300      	movs	r3, #0
}
   110ba:	0018      	movs	r0, r3
   110bc:	46bd      	mov	sp, r7
   110be:	b001      	add	sp, #4
   110c0:	bd90      	pop	{r4, r7, pc}
   110c2:	46c0      	nop			; (mov r8, r8)
   110c4:	0000fa85 	.word	0x0000fa85
   110c8:	0000fec5 	.word	0x0000fec5

000110cc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   110cc:	b580      	push	{r7, lr}
   110ce:	b082      	sub	sp, #8
   110d0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   110d2:	2300      	movs	r3, #0
   110d4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   110d6:	4b40      	ldr	r3, [pc, #256]	; (111d8 <nm_spi_init+0x10c>)
   110d8:	2200      	movs	r2, #0
   110da:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   110dc:	003b      	movs	r3, r7
   110de:	4a3f      	ldr	r2, [pc, #252]	; (111dc <nm_spi_init+0x110>)
   110e0:	0019      	movs	r1, r3
   110e2:	0010      	movs	r0, r2
   110e4:	4b3e      	ldr	r3, [pc, #248]	; (111e0 <nm_spi_init+0x114>)
   110e6:	4798      	blx	r3
   110e8:	1e03      	subs	r3, r0, #0
   110ea:	d129      	bne.n	11140 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   110ec:	4b3a      	ldr	r3, [pc, #232]	; (111d8 <nm_spi_init+0x10c>)
   110ee:	2201      	movs	r2, #1
   110f0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   110f2:	2398      	movs	r3, #152	; 0x98
   110f4:	00da      	lsls	r2, r3, #3
   110f6:	493b      	ldr	r1, [pc, #236]	; (111e4 <nm_spi_init+0x118>)
   110f8:	4b3b      	ldr	r3, [pc, #236]	; (111e8 <nm_spi_init+0x11c>)
   110fa:	0018      	movs	r0, r3
   110fc:	4b3b      	ldr	r3, [pc, #236]	; (111ec <nm_spi_init+0x120>)
   110fe:	4798      	blx	r3
   11100:	4b3b      	ldr	r3, [pc, #236]	; (111f0 <nm_spi_init+0x124>)
   11102:	0018      	movs	r0, r3
   11104:	4b39      	ldr	r3, [pc, #228]	; (111ec <nm_spi_init+0x120>)
   11106:	4798      	blx	r3
   11108:	4b3a      	ldr	r3, [pc, #232]	; (111f4 <nm_spi_init+0x128>)
   1110a:	0018      	movs	r0, r3
   1110c:	4b37      	ldr	r3, [pc, #220]	; (111ec <nm_spi_init+0x120>)
   1110e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   11110:	003b      	movs	r3, r7
   11112:	4a32      	ldr	r2, [pc, #200]	; (111dc <nm_spi_init+0x110>)
   11114:	0019      	movs	r1, r3
   11116:	0010      	movs	r0, r2
   11118:	4b31      	ldr	r3, [pc, #196]	; (111e0 <nm_spi_init+0x114>)
   1111a:	4798      	blx	r3
   1111c:	1e03      	subs	r3, r0, #0
   1111e:	d10f      	bne.n	11140 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   11120:	4a35      	ldr	r2, [pc, #212]	; (111f8 <nm_spi_init+0x12c>)
   11122:	4930      	ldr	r1, [pc, #192]	; (111e4 <nm_spi_init+0x118>)
   11124:	4b30      	ldr	r3, [pc, #192]	; (111e8 <nm_spi_init+0x11c>)
   11126:	0018      	movs	r0, r3
   11128:	4b30      	ldr	r3, [pc, #192]	; (111ec <nm_spi_init+0x120>)
   1112a:	4798      	blx	r3
   1112c:	4b33      	ldr	r3, [pc, #204]	; (111fc <nm_spi_init+0x130>)
   1112e:	0018      	movs	r0, r3
   11130:	4b2e      	ldr	r3, [pc, #184]	; (111ec <nm_spi_init+0x120>)
   11132:	4798      	blx	r3
   11134:	4b2f      	ldr	r3, [pc, #188]	; (111f4 <nm_spi_init+0x128>)
   11136:	0018      	movs	r0, r3
   11138:	4b2c      	ldr	r3, [pc, #176]	; (111ec <nm_spi_init+0x120>)
   1113a:	4798      	blx	r3
			return 0;
   1113c:	2300      	movs	r3, #0
   1113e:	e047      	b.n	111d0 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   11140:	4b25      	ldr	r3, [pc, #148]	; (111d8 <nm_spi_init+0x10c>)
   11142:	781b      	ldrb	r3, [r3, #0]
   11144:	2b00      	cmp	r3, #0
   11146:	d126      	bne.n	11196 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   11148:	683b      	ldr	r3, [r7, #0]
   1114a:	220c      	movs	r2, #12
   1114c:	4393      	bics	r3, r2
   1114e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   11150:	683b      	ldr	r3, [r7, #0]
   11152:	2270      	movs	r2, #112	; 0x70
   11154:	4393      	bics	r3, r2
   11156:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   11158:	683b      	ldr	r3, [r7, #0]
   1115a:	2250      	movs	r2, #80	; 0x50
   1115c:	4313      	orrs	r3, r2
   1115e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   11160:	683b      	ldr	r3, [r7, #0]
   11162:	4a1e      	ldr	r2, [pc, #120]	; (111dc <nm_spi_init+0x110>)
   11164:	0019      	movs	r1, r3
   11166:	0010      	movs	r0, r2
   11168:	4b25      	ldr	r3, [pc, #148]	; (11200 <nm_spi_init+0x134>)
   1116a:	4798      	blx	r3
   1116c:	1e03      	subs	r3, r0, #0
   1116e:	d10f      	bne.n	11190 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   11170:	4a24      	ldr	r2, [pc, #144]	; (11204 <nm_spi_init+0x138>)
   11172:	491c      	ldr	r1, [pc, #112]	; (111e4 <nm_spi_init+0x118>)
   11174:	4b1c      	ldr	r3, [pc, #112]	; (111e8 <nm_spi_init+0x11c>)
   11176:	0018      	movs	r0, r3
   11178:	4b1c      	ldr	r3, [pc, #112]	; (111ec <nm_spi_init+0x120>)
   1117a:	4798      	blx	r3
   1117c:	4b22      	ldr	r3, [pc, #136]	; (11208 <nm_spi_init+0x13c>)
   1117e:	0018      	movs	r0, r3
   11180:	4b1a      	ldr	r3, [pc, #104]	; (111ec <nm_spi_init+0x120>)
   11182:	4798      	blx	r3
   11184:	4b1b      	ldr	r3, [pc, #108]	; (111f4 <nm_spi_init+0x128>)
   11186:	0018      	movs	r0, r3
   11188:	4b18      	ldr	r3, [pc, #96]	; (111ec <nm_spi_init+0x120>)
   1118a:	4798      	blx	r3
			return 0;
   1118c:	2300      	movs	r3, #0
   1118e:	e01f      	b.n	111d0 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   11190:	4b11      	ldr	r3, [pc, #68]	; (111d8 <nm_spi_init+0x10c>)
   11192:	2201      	movs	r2, #1
   11194:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   11196:	1d3a      	adds	r2, r7, #4
   11198:	2380      	movs	r3, #128	; 0x80
   1119a:	015b      	lsls	r3, r3, #5
   1119c:	0011      	movs	r1, r2
   1119e:	0018      	movs	r0, r3
   111a0:	4b0f      	ldr	r3, [pc, #60]	; (111e0 <nm_spi_init+0x114>)
   111a2:	4798      	blx	r3
   111a4:	1e03      	subs	r3, r0, #0
   111a6:	d110      	bne.n	111ca <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   111a8:	4a18      	ldr	r2, [pc, #96]	; (1120c <nm_spi_init+0x140>)
   111aa:	490e      	ldr	r1, [pc, #56]	; (111e4 <nm_spi_init+0x118>)
   111ac:	4b0e      	ldr	r3, [pc, #56]	; (111e8 <nm_spi_init+0x11c>)
   111ae:	0018      	movs	r0, r3
   111b0:	4b0e      	ldr	r3, [pc, #56]	; (111ec <nm_spi_init+0x120>)
   111b2:	4798      	blx	r3
   111b4:	4b16      	ldr	r3, [pc, #88]	; (11210 <nm_spi_init+0x144>)
   111b6:	0018      	movs	r0, r3
   111b8:	4b0c      	ldr	r3, [pc, #48]	; (111ec <nm_spi_init+0x120>)
   111ba:	4798      	blx	r3
   111bc:	4b0d      	ldr	r3, [pc, #52]	; (111f4 <nm_spi_init+0x128>)
   111be:	0018      	movs	r0, r3
   111c0:	4b0a      	ldr	r3, [pc, #40]	; (111ec <nm_spi_init+0x120>)
   111c2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   111c4:	2306      	movs	r3, #6
   111c6:	425b      	negs	r3, r3
   111c8:	e002      	b.n	111d0 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   111ca:	4b12      	ldr	r3, [pc, #72]	; (11214 <nm_spi_init+0x148>)
   111cc:	4798      	blx	r3


	return M2M_SUCCESS;
   111ce:	2300      	movs	r3, #0
}
   111d0:	0018      	movs	r0, r3
   111d2:	46bd      	mov	sp, r7
   111d4:	b002      	add	sp, #8
   111d6:	bd80      	pop	{r7, pc}
   111d8:	20003d3c 	.word	0x20003d3c
   111dc:	0000e824 	.word	0x0000e824
   111e0:	00010dc5 	.word	0x00010dc5
   111e4:	00025638 	.word	0x00025638
   111e8:	00024fc4 	.word	0x00024fc4
   111ec:	0000a4ed 	.word	0x0000a4ed
   111f0:	00025460 	.word	0x00025460
   111f4:	00025004 	.word	0x00025004
   111f8:	000004c3 	.word	0x000004c3
   111fc:	000254b0 	.word	0x000254b0
   11200:	00010acd 	.word	0x00010acd
   11204:	000004cd 	.word	0x000004cd
   11208:	000254e0 	.word	0x000254e0
   1120c:	000004d7 	.word	0x000004d7
   11210:	00025514 	.word	0x00025514
   11214:	00011059 	.word	0x00011059

00011218 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   11218:	b580      	push	{r7, lr}
   1121a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   1121c:	4b03      	ldr	r3, [pc, #12]	; (1122c <nm_spi_deinit+0x14>)
   1121e:	2200      	movs	r2, #0
   11220:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   11222:	2300      	movs	r3, #0
}
   11224:	0018      	movs	r0, r3
   11226:	46bd      	mov	sp, r7
   11228:	bd80      	pop	{r7, pc}
   1122a:	46c0      	nop			; (mov r8, r8)
   1122c:	20003d3c 	.word	0x20003d3c

00011230 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   11230:	b580      	push	{r7, lr}
   11232:	b084      	sub	sp, #16
   11234:	af00      	add	r7, sp, #0
   11236:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   11238:	230c      	movs	r3, #12
   1123a:	18fa      	adds	r2, r7, r3
   1123c:	687b      	ldr	r3, [r7, #4]
   1123e:	0011      	movs	r1, r2
   11240:	0018      	movs	r0, r3
   11242:	4b03      	ldr	r3, [pc, #12]	; (11250 <nm_spi_read_reg+0x20>)
   11244:	4798      	blx	r3

	return u32Val;
   11246:	68fb      	ldr	r3, [r7, #12]
}
   11248:	0018      	movs	r0, r3
   1124a:	46bd      	mov	sp, r7
   1124c:	b004      	add	sp, #16
   1124e:	bd80      	pop	{r7, pc}
   11250:	00010dc5 	.word	0x00010dc5

00011254 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   11254:	b590      	push	{r4, r7, lr}
   11256:	b085      	sub	sp, #20
   11258:	af00      	add	r7, sp, #0
   1125a:	6078      	str	r0, [r7, #4]
   1125c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   1125e:	230f      	movs	r3, #15
   11260:	18fc      	adds	r4, r7, r3
   11262:	683a      	ldr	r2, [r7, #0]
   11264:	687b      	ldr	r3, [r7, #4]
   11266:	0011      	movs	r1, r2
   11268:	0018      	movs	r0, r3
   1126a:	4b0d      	ldr	r3, [pc, #52]	; (112a0 <nm_spi_read_reg_with_ret+0x4c>)
   1126c:	4798      	blx	r3
   1126e:	0003      	movs	r3, r0
   11270:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   11272:	230f      	movs	r3, #15
   11274:	18fb      	adds	r3, r7, r3
   11276:	781b      	ldrb	r3, [r3, #0]
   11278:	b25b      	sxtb	r3, r3
   1127a:	2b01      	cmp	r3, #1
   1127c:	d104      	bne.n	11288 <nm_spi_read_reg_with_ret+0x34>
   1127e:	230f      	movs	r3, #15
   11280:	18fb      	adds	r3, r7, r3
   11282:	2200      	movs	r2, #0
   11284:	701a      	strb	r2, [r3, #0]
   11286:	e003      	b.n	11290 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   11288:	230f      	movs	r3, #15
   1128a:	18fb      	adds	r3, r7, r3
   1128c:	22fa      	movs	r2, #250	; 0xfa
   1128e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   11290:	230f      	movs	r3, #15
   11292:	18fb      	adds	r3, r7, r3
   11294:	781b      	ldrb	r3, [r3, #0]
   11296:	b25b      	sxtb	r3, r3
}
   11298:	0018      	movs	r0, r3
   1129a:	46bd      	mov	sp, r7
   1129c:	b005      	add	sp, #20
   1129e:	bd90      	pop	{r4, r7, pc}
   112a0:	00010dc5 	.word	0x00010dc5

000112a4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   112a4:	b590      	push	{r4, r7, lr}
   112a6:	b085      	sub	sp, #20
   112a8:	af00      	add	r7, sp, #0
   112aa:	6078      	str	r0, [r7, #4]
   112ac:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   112ae:	230f      	movs	r3, #15
   112b0:	18fc      	adds	r4, r7, r3
   112b2:	683a      	ldr	r2, [r7, #0]
   112b4:	687b      	ldr	r3, [r7, #4]
   112b6:	0011      	movs	r1, r2
   112b8:	0018      	movs	r0, r3
   112ba:	4b0d      	ldr	r3, [pc, #52]	; (112f0 <nm_spi_write_reg+0x4c>)
   112bc:	4798      	blx	r3
   112be:	0003      	movs	r3, r0
   112c0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   112c2:	230f      	movs	r3, #15
   112c4:	18fb      	adds	r3, r7, r3
   112c6:	781b      	ldrb	r3, [r3, #0]
   112c8:	b25b      	sxtb	r3, r3
   112ca:	2b01      	cmp	r3, #1
   112cc:	d104      	bne.n	112d8 <nm_spi_write_reg+0x34>
   112ce:	230f      	movs	r3, #15
   112d0:	18fb      	adds	r3, r7, r3
   112d2:	2200      	movs	r2, #0
   112d4:	701a      	strb	r2, [r3, #0]
   112d6:	e003      	b.n	112e0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   112d8:	230f      	movs	r3, #15
   112da:	18fb      	adds	r3, r7, r3
   112dc:	22fa      	movs	r2, #250	; 0xfa
   112de:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   112e0:	230f      	movs	r3, #15
   112e2:	18fb      	adds	r3, r7, r3
   112e4:	781b      	ldrb	r3, [r3, #0]
   112e6:	b25b      	sxtb	r3, r3
}
   112e8:	0018      	movs	r0, r3
   112ea:	46bd      	mov	sp, r7
   112ec:	b005      	add	sp, #20
   112ee:	bd90      	pop	{r4, r7, pc}
   112f0:	00010acd 	.word	0x00010acd

000112f4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   112f4:	b590      	push	{r4, r7, lr}
   112f6:	b087      	sub	sp, #28
   112f8:	af00      	add	r7, sp, #0
   112fa:	60f8      	str	r0, [r7, #12]
   112fc:	60b9      	str	r1, [r7, #8]
   112fe:	1dbb      	adds	r3, r7, #6
   11300:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   11302:	2317      	movs	r3, #23
   11304:	18fc      	adds	r4, r7, r3
   11306:	1dbb      	adds	r3, r7, #6
   11308:	881a      	ldrh	r2, [r3, #0]
   1130a:	68b9      	ldr	r1, [r7, #8]
   1130c:	68fb      	ldr	r3, [r7, #12]
   1130e:	0018      	movs	r0, r3
   11310:	4b0d      	ldr	r3, [pc, #52]	; (11348 <nm_spi_read_block+0x54>)
   11312:	4798      	blx	r3
   11314:	0003      	movs	r3, r0
   11316:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   11318:	2317      	movs	r3, #23
   1131a:	18fb      	adds	r3, r7, r3
   1131c:	781b      	ldrb	r3, [r3, #0]
   1131e:	b25b      	sxtb	r3, r3
   11320:	2b01      	cmp	r3, #1
   11322:	d104      	bne.n	1132e <nm_spi_read_block+0x3a>
   11324:	2317      	movs	r3, #23
   11326:	18fb      	adds	r3, r7, r3
   11328:	2200      	movs	r2, #0
   1132a:	701a      	strb	r2, [r3, #0]
   1132c:	e003      	b.n	11336 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   1132e:	2317      	movs	r3, #23
   11330:	18fb      	adds	r3, r7, r3
   11332:	22fa      	movs	r2, #250	; 0xfa
   11334:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   11336:	2317      	movs	r3, #23
   11338:	18fb      	adds	r3, r7, r3
   1133a:	781b      	ldrb	r3, [r3, #0]
   1133c:	b25b      	sxtb	r3, r3
}
   1133e:	0018      	movs	r0, r3
   11340:	46bd      	mov	sp, r7
   11342:	b007      	add	sp, #28
   11344:	bd90      	pop	{r4, r7, pc}
   11346:	46c0      	nop			; (mov r8, r8)
   11348:	00010f3d 	.word	0x00010f3d

0001134c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1134c:	b590      	push	{r4, r7, lr}
   1134e:	b087      	sub	sp, #28
   11350:	af00      	add	r7, sp, #0
   11352:	60f8      	str	r0, [r7, #12]
   11354:	60b9      	str	r1, [r7, #8]
   11356:	1dbb      	adds	r3, r7, #6
   11358:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   1135a:	2317      	movs	r3, #23
   1135c:	18fc      	adds	r4, r7, r3
   1135e:	1dbb      	adds	r3, r7, #6
   11360:	881a      	ldrh	r2, [r3, #0]
   11362:	68b9      	ldr	r1, [r7, #8]
   11364:	68fb      	ldr	r3, [r7, #12]
   11366:	0018      	movs	r0, r3
   11368:	4b0d      	ldr	r3, [pc, #52]	; (113a0 <nm_spi_write_block+0x54>)
   1136a:	4798      	blx	r3
   1136c:	0003      	movs	r3, r0
   1136e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   11370:	2317      	movs	r3, #23
   11372:	18fb      	adds	r3, r7, r3
   11374:	781b      	ldrb	r3, [r3, #0]
   11376:	b25b      	sxtb	r3, r3
   11378:	2b01      	cmp	r3, #1
   1137a:	d104      	bne.n	11386 <nm_spi_write_block+0x3a>
   1137c:	2317      	movs	r3, #23
   1137e:	18fb      	adds	r3, r7, r3
   11380:	2200      	movs	r2, #0
   11382:	701a      	strb	r2, [r3, #0]
   11384:	e003      	b.n	1138e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   11386:	2317      	movs	r3, #23
   11388:	18fb      	adds	r3, r7, r3
   1138a:	22fa      	movs	r2, #250	; 0xfa
   1138c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   1138e:	2317      	movs	r3, #23
   11390:	18fb      	adds	r3, r7, r3
   11392:	781b      	ldrb	r3, [r3, #0]
   11394:	b25b      	sxtb	r3, r3
}
   11396:	0018      	movs	r0, r3
   11398:	46bd      	mov	sp, r7
   1139a:	b007      	add	sp, #28
   1139c:	bd90      	pop	{r4, r7, pc}
   1139e:	46c0      	nop			; (mov r8, r8)
   113a0:	00010c19 	.word	0x00010c19

000113a4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   113a4:	b590      	push	{r4, r7, lr}
   113a6:	b089      	sub	sp, #36	; 0x24
   113a8:	af00      	add	r7, sp, #0
   113aa:	60b9      	str	r1, [r7, #8]
   113ac:	0011      	movs	r1, r2
   113ae:	607b      	str	r3, [r7, #4]
   113b0:	230f      	movs	r3, #15
   113b2:	18fb      	adds	r3, r7, r3
   113b4:	1c02      	adds	r2, r0, #0
   113b6:	701a      	strb	r2, [r3, #0]
   113b8:	230e      	movs	r3, #14
   113ba:	18fb      	adds	r3, r7, r3
   113bc:	1c0a      	adds	r2, r1, #0
   113be:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   113c0:	2330      	movs	r3, #48	; 0x30
   113c2:	18fb      	adds	r3, r7, r3
   113c4:	881b      	ldrh	r3, [r3, #0]
   113c6:	2b00      	cmp	r3, #0
   113c8:	d100      	bne.n	113cc <Socket_ReadSocketData+0x28>
   113ca:	e0d7      	b.n	1157c <Socket_ReadSocketData+0x1d8>
   113cc:	230f      	movs	r3, #15
   113ce:	18fb      	adds	r3, r7, r3
   113d0:	2200      	movs	r2, #0
   113d2:	569a      	ldrsb	r2, [r3, r2]
   113d4:	4b6b      	ldr	r3, [pc, #428]	; (11584 <Socket_ReadSocketData+0x1e0>)
   113d6:	0112      	lsls	r2, r2, #4
   113d8:	58d3      	ldr	r3, [r2, r3]
   113da:	2b00      	cmp	r3, #0
   113dc:	d100      	bne.n	113e0 <Socket_ReadSocketData+0x3c>
   113de:	e0cd      	b.n	1157c <Socket_ReadSocketData+0x1d8>
   113e0:	230f      	movs	r3, #15
   113e2:	18fb      	adds	r3, r7, r3
   113e4:	781b      	ldrb	r3, [r3, #0]
   113e6:	b25b      	sxtb	r3, r3
   113e8:	4a66      	ldr	r2, [pc, #408]	; (11584 <Socket_ReadSocketData+0x1e0>)
   113ea:	011b      	lsls	r3, r3, #4
   113ec:	18d3      	adds	r3, r2, r3
   113ee:	3304      	adds	r3, #4
   113f0:	881b      	ldrh	r3, [r3, #0]
   113f2:	b29b      	uxth	r3, r3
   113f4:	2b00      	cmp	r3, #0
   113f6:	d100      	bne.n	113fa <Socket_ReadSocketData+0x56>
   113f8:	e0c0      	b.n	1157c <Socket_ReadSocketData+0x1d8>
   113fa:	230f      	movs	r3, #15
   113fc:	18fb      	adds	r3, r7, r3
   113fe:	781b      	ldrb	r3, [r3, #0]
   11400:	b25b      	sxtb	r3, r3
   11402:	4a60      	ldr	r2, [pc, #384]	; (11584 <Socket_ReadSocketData+0x1e0>)
   11404:	011b      	lsls	r3, r3, #4
   11406:	18d3      	adds	r3, r2, r3
   11408:	330a      	adds	r3, #10
   1140a:	781b      	ldrb	r3, [r3, #0]
   1140c:	b2db      	uxtb	r3, r3
   1140e:	2b01      	cmp	r3, #1
   11410:	d000      	beq.n	11414 <Socket_ReadSocketData+0x70>
   11412:	e0b3      	b.n	1157c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   11414:	687b      	ldr	r3, [r7, #4]
   11416:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   11418:	68bb      	ldr	r3, [r7, #8]
   1141a:	2230      	movs	r2, #48	; 0x30
   1141c:	18ba      	adds	r2, r7, r2
   1141e:	8812      	ldrh	r2, [r2, #0]
   11420:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   11422:	2319      	movs	r3, #25
   11424:	18fb      	adds	r3, r7, r3
   11426:	2201      	movs	r2, #1
   11428:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   1142a:	231a      	movs	r3, #26
   1142c:	18fb      	adds	r3, r7, r3
   1142e:	2230      	movs	r2, #48	; 0x30
   11430:	18ba      	adds	r2, r7, r2
   11432:	8812      	ldrh	r2, [r2, #0]
   11434:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   11436:	230f      	movs	r3, #15
   11438:	18fb      	adds	r3, r7, r3
   1143a:	781b      	ldrb	r3, [r3, #0]
   1143c:	b25b      	sxtb	r3, r3
   1143e:	4a51      	ldr	r2, [pc, #324]	; (11584 <Socket_ReadSocketData+0x1e0>)
   11440:	011b      	lsls	r3, r3, #4
   11442:	18d3      	adds	r3, r2, r3
   11444:	3304      	adds	r3, #4
   11446:	881b      	ldrh	r3, [r3, #0]
   11448:	b29b      	uxth	r3, r3
   1144a:	221a      	movs	r2, #26
   1144c:	18ba      	adds	r2, r7, r2
   1144e:	8812      	ldrh	r2, [r2, #0]
   11450:	1ad3      	subs	r3, r2, r3
   11452:	b29a      	uxth	r2, r3
   11454:	2316      	movs	r3, #22
   11456:	18fb      	adds	r3, r7, r3
   11458:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   1145a:	2316      	movs	r3, #22
   1145c:	18fb      	adds	r3, r7, r3
   1145e:	2200      	movs	r2, #0
   11460:	5e9b      	ldrsh	r3, [r3, r2]
   11462:	2b00      	cmp	r3, #0
   11464:	dd0f      	ble.n	11486 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   11466:	2319      	movs	r3, #25
   11468:	18fb      	adds	r3, r7, r3
   1146a:	2200      	movs	r2, #0
   1146c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   1146e:	230f      	movs	r3, #15
   11470:	18fb      	adds	r3, r7, r3
   11472:	2200      	movs	r2, #0
   11474:	569a      	ldrsb	r2, [r3, r2]
   11476:	231a      	movs	r3, #26
   11478:	18fb      	adds	r3, r7, r3
   1147a:	4942      	ldr	r1, [pc, #264]	; (11584 <Socket_ReadSocketData+0x1e0>)
   1147c:	0112      	lsls	r2, r2, #4
   1147e:	188a      	adds	r2, r1, r2
   11480:	3204      	adds	r2, #4
   11482:	8812      	ldrh	r2, [r2, #0]
   11484:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   11486:	230f      	movs	r3, #15
   11488:	18fb      	adds	r3, r7, r3
   1148a:	2200      	movs	r2, #0
   1148c:	569a      	ldrsb	r2, [r3, r2]
   1148e:	4b3d      	ldr	r3, [pc, #244]	; (11584 <Socket_ReadSocketData+0x1e0>)
   11490:	0112      	lsls	r2, r2, #4
   11492:	58d1      	ldr	r1, [r2, r3]
   11494:	2319      	movs	r3, #25
   11496:	18fb      	adds	r3, r7, r3
   11498:	781c      	ldrb	r4, [r3, #0]
   1149a:	231a      	movs	r3, #26
   1149c:	18fb      	adds	r3, r7, r3
   1149e:	881a      	ldrh	r2, [r3, #0]
   114a0:	69f8      	ldr	r0, [r7, #28]
   114a2:	0023      	movs	r3, r4
   114a4:	4c38      	ldr	r4, [pc, #224]	; (11588 <Socket_ReadSocketData+0x1e4>)
   114a6:	47a0      	blx	r4
   114a8:	1e03      	subs	r3, r0, #0
   114aa:	d14f      	bne.n	1154c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   114ac:	230f      	movs	r3, #15
   114ae:	18fb      	adds	r3, r7, r3
   114b0:	2200      	movs	r2, #0
   114b2:	569a      	ldrsb	r2, [r3, r2]
   114b4:	4b33      	ldr	r3, [pc, #204]	; (11584 <Socket_ReadSocketData+0x1e0>)
   114b6:	0112      	lsls	r2, r2, #4
   114b8:	58d2      	ldr	r2, [r2, r3]
   114ba:	68bb      	ldr	r3, [r7, #8]
   114bc:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   114be:	231a      	movs	r3, #26
   114c0:	18fb      	adds	r3, r7, r3
   114c2:	2200      	movs	r2, #0
   114c4:	5e9a      	ldrsh	r2, [r3, r2]
   114c6:	68bb      	ldr	r3, [r7, #8]
   114c8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   114ca:	68bb      	ldr	r3, [r7, #8]
   114cc:	88da      	ldrh	r2, [r3, #6]
   114ce:	231a      	movs	r3, #26
   114d0:	18fb      	adds	r3, r7, r3
   114d2:	881b      	ldrh	r3, [r3, #0]
   114d4:	1ad3      	subs	r3, r2, r3
   114d6:	b29a      	uxth	r2, r3
   114d8:	68bb      	ldr	r3, [r7, #8]
   114da:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   114dc:	4b2b      	ldr	r3, [pc, #172]	; (1158c <Socket_ReadSocketData+0x1e8>)
   114de:	681b      	ldr	r3, [r3, #0]
   114e0:	2b00      	cmp	r3, #0
   114e2:	d00b      	beq.n	114fc <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   114e4:	4b29      	ldr	r3, [pc, #164]	; (1158c <Socket_ReadSocketData+0x1e8>)
   114e6:	681b      	ldr	r3, [r3, #0]
   114e8:	68bc      	ldr	r4, [r7, #8]
   114ea:	220e      	movs	r2, #14
   114ec:	18ba      	adds	r2, r7, r2
   114ee:	7811      	ldrb	r1, [r2, #0]
   114f0:	220f      	movs	r2, #15
   114f2:	18ba      	adds	r2, r7, r2
   114f4:	2000      	movs	r0, #0
   114f6:	5610      	ldrsb	r0, [r2, r0]
   114f8:	0022      	movs	r2, r4
   114fa:	4798      	blx	r3

				u16ReadCount -= u16Read;
   114fc:	2330      	movs	r3, #48	; 0x30
   114fe:	18f9      	adds	r1, r7, r3
   11500:	2330      	movs	r3, #48	; 0x30
   11502:	18fa      	adds	r2, r7, r3
   11504:	231a      	movs	r3, #26
   11506:	18fb      	adds	r3, r7, r3
   11508:	8812      	ldrh	r2, [r2, #0]
   1150a:	881b      	ldrh	r3, [r3, #0]
   1150c:	1ad3      	subs	r3, r2, r3
   1150e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   11510:	231a      	movs	r3, #26
   11512:	18fb      	adds	r3, r7, r3
   11514:	881b      	ldrh	r3, [r3, #0]
   11516:	69fa      	ldr	r2, [r7, #28]
   11518:	18d3      	adds	r3, r2, r3
   1151a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   1151c:	230f      	movs	r3, #15
   1151e:	18fb      	adds	r3, r7, r3
   11520:	781b      	ldrb	r3, [r3, #0]
   11522:	b25b      	sxtb	r3, r3
   11524:	4a17      	ldr	r2, [pc, #92]	; (11584 <Socket_ReadSocketData+0x1e0>)
   11526:	011b      	lsls	r3, r3, #4
   11528:	18d3      	adds	r3, r2, r3
   1152a:	330a      	adds	r3, #10
   1152c:	781b      	ldrb	r3, [r3, #0]
   1152e:	b2db      	uxtb	r3, r3
   11530:	2b00      	cmp	r3, #0
   11532:	d11c      	bne.n	1156e <Socket_ReadSocketData+0x1ca>
   11534:	2330      	movs	r3, #48	; 0x30
   11536:	18fb      	adds	r3, r7, r3
   11538:	881b      	ldrh	r3, [r3, #0]
   1153a:	2b00      	cmp	r3, #0
   1153c:	d017      	beq.n	1156e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1153e:	2301      	movs	r3, #1
   11540:	2200      	movs	r2, #0
   11542:	2100      	movs	r1, #0
   11544:	2000      	movs	r0, #0
   11546:	4c10      	ldr	r4, [pc, #64]	; (11588 <Socket_ReadSocketData+0x1e4>)
   11548:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   1154a:	e017      	b.n	1157c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   1154c:	4b10      	ldr	r3, [pc, #64]	; (11590 <Socket_ReadSocketData+0x1ec>)
   1154e:	0018      	movs	r0, r3
   11550:	4b10      	ldr	r3, [pc, #64]	; (11594 <Socket_ReadSocketData+0x1f0>)
   11552:	4798      	blx	r3
   11554:	2330      	movs	r3, #48	; 0x30
   11556:	18fb      	adds	r3, r7, r3
   11558:	881a      	ldrh	r2, [r3, #0]
   1155a:	4b0f      	ldr	r3, [pc, #60]	; (11598 <Socket_ReadSocketData+0x1f4>)
   1155c:	0011      	movs	r1, r2
   1155e:	0018      	movs	r0, r3
   11560:	4b0c      	ldr	r3, [pc, #48]	; (11594 <Socket_ReadSocketData+0x1f0>)
   11562:	4798      	blx	r3
   11564:	4b0d      	ldr	r3, [pc, #52]	; (1159c <Socket_ReadSocketData+0x1f8>)
   11566:	0018      	movs	r0, r3
   11568:	4b0a      	ldr	r3, [pc, #40]	; (11594 <Socket_ReadSocketData+0x1f0>)
   1156a:	4798      	blx	r3
				break;
   1156c:	e006      	b.n	1157c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   1156e:	2330      	movs	r3, #48	; 0x30
   11570:	18fb      	adds	r3, r7, r3
   11572:	881b      	ldrh	r3, [r3, #0]
   11574:	2b00      	cmp	r3, #0
   11576:	d000      	beq.n	1157a <Socket_ReadSocketData+0x1d6>
   11578:	e753      	b.n	11422 <Socket_ReadSocketData+0x7e>
	}
}
   1157a:	e7ff      	b.n	1157c <Socket_ReadSocketData+0x1d8>
   1157c:	46c0      	nop			; (mov r8, r8)
   1157e:	46bd      	mov	sp, r7
   11580:	b009      	add	sp, #36	; 0x24
   11582:	bd90      	pop	{r4, r7, pc}
   11584:	20005544 	.word	0x20005544
   11588:	0000dd9d 	.word	0x0000dd9d
   1158c:	200055f4 	.word	0x200055f4
   11590:	00025644 	.word	0x00025644
   11594:	0000a4ed 	.word	0x0000a4ed
   11598:	00025650 	.word	0x00025650
   1159c:	00025664 	.word	0x00025664

000115a0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   115a0:	b590      	push	{r4, r7, lr}
   115a2:	b0bb      	sub	sp, #236	; 0xec
   115a4:	af02      	add	r7, sp, #8
   115a6:	603a      	str	r2, [r7, #0]
   115a8:	1dfb      	adds	r3, r7, #7
   115aa:	1c02      	adds	r2, r0, #0
   115ac:	701a      	strb	r2, [r3, #0]
   115ae:	1d3b      	adds	r3, r7, #4
   115b0:	1c0a      	adds	r2, r1, #0
   115b2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   115b4:	1dfb      	adds	r3, r7, #7
   115b6:	781b      	ldrb	r3, [r3, #0]
   115b8:	2b41      	cmp	r3, #65	; 0x41
   115ba:	d003      	beq.n	115c4 <m2m_ip_cb+0x24>
   115bc:	1dfb      	adds	r3, r7, #7
   115be:	781b      	ldrb	r3, [r3, #0]
   115c0:	2b54      	cmp	r3, #84	; 0x54
   115c2:	d120      	bne.n	11606 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   115c4:	23cc      	movs	r3, #204	; 0xcc
   115c6:	18f9      	adds	r1, r7, r3
   115c8:	6838      	ldr	r0, [r7, #0]
   115ca:	2300      	movs	r3, #0
   115cc:	2204      	movs	r2, #4
   115ce:	4c98      	ldr	r4, [pc, #608]	; (11830 <m2m_ip_cb+0x290>)
   115d0:	47a0      	blx	r4
   115d2:	1e03      	subs	r3, r0, #0
   115d4:	d000      	beq.n	115d8 <m2m_ip_cb+0x38>
   115d6:	e275      	b.n	11ac4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   115d8:	23cc      	movs	r3, #204	; 0xcc
   115da:	18fb      	adds	r3, r7, r3
   115dc:	2201      	movs	r2, #1
   115de:	569a      	ldrsb	r2, [r3, r2]
   115e0:	23c8      	movs	r3, #200	; 0xc8
   115e2:	18fb      	adds	r3, r7, r3
   115e4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   115e6:	4b93      	ldr	r3, [pc, #588]	; (11834 <m2m_ip_cb+0x294>)
   115e8:	681b      	ldr	r3, [r3, #0]
   115ea:	2b00      	cmp	r3, #0
   115ec:	d100      	bne.n	115f0 <m2m_ip_cb+0x50>
   115ee:	e269      	b.n	11ac4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   115f0:	4b90      	ldr	r3, [pc, #576]	; (11834 <m2m_ip_cb+0x294>)
   115f2:	681b      	ldr	r3, [r3, #0]
   115f4:	22cc      	movs	r2, #204	; 0xcc
   115f6:	18ba      	adds	r2, r7, r2
   115f8:	2000      	movs	r0, #0
   115fa:	5610      	ldrsb	r0, [r2, r0]
   115fc:	22c8      	movs	r2, #200	; 0xc8
   115fe:	18ba      	adds	r2, r7, r2
   11600:	2101      	movs	r1, #1
   11602:	4798      	blx	r3
	{
   11604:	e25e      	b.n	11ac4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   11606:	1dfb      	adds	r3, r7, #7
   11608:	781b      	ldrb	r3, [r3, #0]
   1160a:	2b42      	cmp	r3, #66	; 0x42
   1160c:	d120      	bne.n	11650 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   1160e:	23c4      	movs	r3, #196	; 0xc4
   11610:	18f9      	adds	r1, r7, r3
   11612:	6838      	ldr	r0, [r7, #0]
   11614:	2300      	movs	r3, #0
   11616:	2204      	movs	r2, #4
   11618:	4c85      	ldr	r4, [pc, #532]	; (11830 <m2m_ip_cb+0x290>)
   1161a:	47a0      	blx	r4
   1161c:	1e03      	subs	r3, r0, #0
   1161e:	d000      	beq.n	11622 <m2m_ip_cb+0x82>
   11620:	e257      	b.n	11ad2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   11622:	23c4      	movs	r3, #196	; 0xc4
   11624:	18fb      	adds	r3, r7, r3
   11626:	2201      	movs	r2, #1
   11628:	569a      	ldrsb	r2, [r3, r2]
   1162a:	23c0      	movs	r3, #192	; 0xc0
   1162c:	18fb      	adds	r3, r7, r3
   1162e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   11630:	4b80      	ldr	r3, [pc, #512]	; (11834 <m2m_ip_cb+0x294>)
   11632:	681b      	ldr	r3, [r3, #0]
   11634:	2b00      	cmp	r3, #0
   11636:	d100      	bne.n	1163a <m2m_ip_cb+0x9a>
   11638:	e24b      	b.n	11ad2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   1163a:	4b7e      	ldr	r3, [pc, #504]	; (11834 <m2m_ip_cb+0x294>)
   1163c:	681b      	ldr	r3, [r3, #0]
   1163e:	22c4      	movs	r2, #196	; 0xc4
   11640:	18ba      	adds	r2, r7, r2
   11642:	2000      	movs	r0, #0
   11644:	5610      	ldrsb	r0, [r2, r0]
   11646:	22c0      	movs	r2, #192	; 0xc0
   11648:	18ba      	adds	r2, r7, r2
   1164a:	2102      	movs	r1, #2
   1164c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   1164e:	e240      	b.n	11ad2 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   11650:	1dfb      	adds	r3, r7, #7
   11652:	781b      	ldrb	r3, [r3, #0]
   11654:	2b43      	cmp	r3, #67	; 0x43
   11656:	d000      	beq.n	1165a <m2m_ip_cb+0xba>
   11658:	e086      	b.n	11768 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   1165a:	23b4      	movs	r3, #180	; 0xb4
   1165c:	18f9      	adds	r1, r7, r3
   1165e:	6838      	ldr	r0, [r7, #0]
   11660:	2300      	movs	r3, #0
   11662:	220c      	movs	r2, #12
   11664:	4c72      	ldr	r4, [pc, #456]	; (11830 <m2m_ip_cb+0x290>)
   11666:	47a0      	blx	r4
   11668:	1e03      	subs	r3, r0, #0
   1166a:	d000      	beq.n	1166e <m2m_ip_cb+0xce>
   1166c:	e231      	b.n	11ad2 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   1166e:	23b4      	movs	r3, #180	; 0xb4
   11670:	18fb      	adds	r3, r7, r3
   11672:	7a5b      	ldrb	r3, [r3, #9]
   11674:	b25b      	sxtb	r3, r3
   11676:	2b00      	cmp	r3, #0
   11678:	db4f      	blt.n	1171a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   1167a:	23b4      	movs	r3, #180	; 0xb4
   1167c:	18fb      	adds	r3, r7, r3
   1167e:	7a5b      	ldrb	r3, [r3, #9]
   11680:	b25b      	sxtb	r3, r3
   11682:	0018      	movs	r0, r3
   11684:	23b4      	movs	r3, #180	; 0xb4
   11686:	18fb      	adds	r3, r7, r3
   11688:	7a1b      	ldrb	r3, [r3, #8]
   1168a:	b25b      	sxtb	r3, r3
   1168c:	4a6a      	ldr	r2, [pc, #424]	; (11838 <m2m_ip_cb+0x298>)
   1168e:	011b      	lsls	r3, r3, #4
   11690:	18d3      	adds	r3, r2, r3
   11692:	330b      	adds	r3, #11
   11694:	781b      	ldrb	r3, [r3, #0]
   11696:	b2d9      	uxtb	r1, r3
   11698:	4a67      	ldr	r2, [pc, #412]	; (11838 <m2m_ip_cb+0x298>)
   1169a:	0103      	lsls	r3, r0, #4
   1169c:	18d3      	adds	r3, r2, r3
   1169e:	330b      	adds	r3, #11
   116a0:	1c0a      	adds	r2, r1, #0
   116a2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   116a4:	23b4      	movs	r3, #180	; 0xb4
   116a6:	18fb      	adds	r3, r7, r3
   116a8:	7a5b      	ldrb	r3, [r3, #9]
   116aa:	b25b      	sxtb	r3, r3
   116ac:	4a62      	ldr	r2, [pc, #392]	; (11838 <m2m_ip_cb+0x298>)
   116ae:	011b      	lsls	r3, r3, #4
   116b0:	18d3      	adds	r3, r2, r3
   116b2:	330a      	adds	r3, #10
   116b4:	2201      	movs	r2, #1
   116b6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   116b8:	23b4      	movs	r3, #180	; 0xb4
   116ba:	18fb      	adds	r3, r7, r3
   116bc:	7a5b      	ldrb	r3, [r3, #9]
   116be:	b25b      	sxtb	r3, r3
   116c0:	0018      	movs	r0, r3
   116c2:	23b4      	movs	r3, #180	; 0xb4
   116c4:	18fb      	adds	r3, r7, r3
   116c6:	895b      	ldrh	r3, [r3, #10]
   116c8:	3b08      	subs	r3, #8
   116ca:	b299      	uxth	r1, r3
   116cc:	4a5a      	ldr	r2, [pc, #360]	; (11838 <m2m_ip_cb+0x298>)
   116ce:	0103      	lsls	r3, r0, #4
   116d0:	18d3      	adds	r3, r2, r3
   116d2:	3308      	adds	r3, #8
   116d4:	1c0a      	adds	r2, r1, #0
   116d6:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   116d8:	4b58      	ldr	r3, [pc, #352]	; (1183c <m2m_ip_cb+0x29c>)
   116da:	881b      	ldrh	r3, [r3, #0]
   116dc:	b29b      	uxth	r3, r3
   116de:	3301      	adds	r3, #1
   116e0:	b29a      	uxth	r2, r3
   116e2:	4b56      	ldr	r3, [pc, #344]	; (1183c <m2m_ip_cb+0x29c>)
   116e4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   116e6:	4b55      	ldr	r3, [pc, #340]	; (1183c <m2m_ip_cb+0x29c>)
   116e8:	881b      	ldrh	r3, [r3, #0]
   116ea:	b29b      	uxth	r3, r3
   116ec:	2b00      	cmp	r3, #0
   116ee:	d106      	bne.n	116fe <m2m_ip_cb+0x15e>
					++gu16SessionID;
   116f0:	4b52      	ldr	r3, [pc, #328]	; (1183c <m2m_ip_cb+0x29c>)
   116f2:	881b      	ldrh	r3, [r3, #0]
   116f4:	b29b      	uxth	r3, r3
   116f6:	3301      	adds	r3, #1
   116f8:	b29a      	uxth	r2, r3
   116fa:	4b50      	ldr	r3, [pc, #320]	; (1183c <m2m_ip_cb+0x29c>)
   116fc:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   116fe:	23b4      	movs	r3, #180	; 0xb4
   11700:	18fb      	adds	r3, r7, r3
   11702:	7a5b      	ldrb	r3, [r3, #9]
   11704:	b25b      	sxtb	r3, r3
   11706:	0018      	movs	r0, r3
   11708:	4b4c      	ldr	r3, [pc, #304]	; (1183c <m2m_ip_cb+0x29c>)
   1170a:	881b      	ldrh	r3, [r3, #0]
   1170c:	b299      	uxth	r1, r3
   1170e:	4a4a      	ldr	r2, [pc, #296]	; (11838 <m2m_ip_cb+0x298>)
   11710:	0103      	lsls	r3, r0, #4
   11712:	18d3      	adds	r3, r2, r3
   11714:	3306      	adds	r3, #6
   11716:	1c0a      	adds	r2, r1, #0
   11718:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   1171a:	23b4      	movs	r3, #180	; 0xb4
   1171c:	18fb      	adds	r3, r7, r3
   1171e:	2209      	movs	r2, #9
   11720:	569a      	ldrsb	r2, [r3, r2]
   11722:	23a0      	movs	r3, #160	; 0xa0
   11724:	18fb      	adds	r3, r7, r3
   11726:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   11728:	23a0      	movs	r3, #160	; 0xa0
   1172a:	18fb      	adds	r3, r7, r3
   1172c:	2202      	movs	r2, #2
   1172e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   11730:	23b4      	movs	r3, #180	; 0xb4
   11732:	18fb      	adds	r3, r7, r3
   11734:	885a      	ldrh	r2, [r3, #2]
   11736:	23a0      	movs	r3, #160	; 0xa0
   11738:	18fb      	adds	r3, r7, r3
   1173a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   1173c:	23b4      	movs	r3, #180	; 0xb4
   1173e:	18fb      	adds	r3, r7, r3
   11740:	685a      	ldr	r2, [r3, #4]
   11742:	23a0      	movs	r3, #160	; 0xa0
   11744:	18fb      	adds	r3, r7, r3
   11746:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   11748:	4b3a      	ldr	r3, [pc, #232]	; (11834 <m2m_ip_cb+0x294>)
   1174a:	681b      	ldr	r3, [r3, #0]
   1174c:	2b00      	cmp	r3, #0
   1174e:	d100      	bne.n	11752 <m2m_ip_cb+0x1b2>
   11750:	e1bf      	b.n	11ad2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   11752:	4b38      	ldr	r3, [pc, #224]	; (11834 <m2m_ip_cb+0x294>)
   11754:	681b      	ldr	r3, [r3, #0]
   11756:	22b4      	movs	r2, #180	; 0xb4
   11758:	18ba      	adds	r2, r7, r2
   1175a:	2008      	movs	r0, #8
   1175c:	5610      	ldrsb	r0, [r2, r0]
   1175e:	22a0      	movs	r2, #160	; 0xa0
   11760:	18ba      	adds	r2, r7, r2
   11762:	2104      	movs	r1, #4
   11764:	4798      	blx	r3
}
   11766:	e1b4      	b.n	11ad2 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   11768:	1dfb      	adds	r3, r7, #7
   1176a:	781b      	ldrb	r3, [r3, #0]
   1176c:	2b44      	cmp	r3, #68	; 0x44
   1176e:	d003      	beq.n	11778 <m2m_ip_cb+0x1d8>
   11770:	1dfb      	adds	r3, r7, #7
   11772:	781b      	ldrb	r3, [r3, #0]
   11774:	2b4b      	cmp	r3, #75	; 0x4b
   11776:	d13d      	bne.n	117f4 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   11778:	239c      	movs	r3, #156	; 0x9c
   1177a:	18f9      	adds	r1, r7, r3
   1177c:	6838      	ldr	r0, [r7, #0]
   1177e:	2300      	movs	r3, #0
   11780:	2204      	movs	r2, #4
   11782:	4c2b      	ldr	r4, [pc, #172]	; (11830 <m2m_ip_cb+0x290>)
   11784:	47a0      	blx	r4
   11786:	1e03      	subs	r3, r0, #0
   11788:	d000      	beq.n	1178c <m2m_ip_cb+0x1ec>
   1178a:	e19d      	b.n	11ac8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   1178c:	239c      	movs	r3, #156	; 0x9c
   1178e:	18fb      	adds	r3, r7, r3
   11790:	2200      	movs	r2, #0
   11792:	569a      	ldrsb	r2, [r3, r2]
   11794:	2398      	movs	r3, #152	; 0x98
   11796:	18fb      	adds	r3, r7, r3
   11798:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   1179a:	239c      	movs	r3, #156	; 0x9c
   1179c:	18fb      	adds	r3, r7, r3
   1179e:	2201      	movs	r2, #1
   117a0:	569a      	ldrsb	r2, [r3, r2]
   117a2:	2398      	movs	r3, #152	; 0x98
   117a4:	18fb      	adds	r3, r7, r3
   117a6:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   117a8:	239c      	movs	r3, #156	; 0x9c
   117aa:	18fb      	adds	r3, r7, r3
   117ac:	785b      	ldrb	r3, [r3, #1]
   117ae:	b25b      	sxtb	r3, r3
   117b0:	2b00      	cmp	r3, #0
   117b2:	d10f      	bne.n	117d4 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   117b4:	239c      	movs	r3, #156	; 0x9c
   117b6:	18fb      	adds	r3, r7, r3
   117b8:	781b      	ldrb	r3, [r3, #0]
   117ba:	b25b      	sxtb	r3, r3
   117bc:	0018      	movs	r0, r3
   117be:	239c      	movs	r3, #156	; 0x9c
   117c0:	18fb      	adds	r3, r7, r3
   117c2:	885b      	ldrh	r3, [r3, #2]
   117c4:	3b08      	subs	r3, #8
   117c6:	b299      	uxth	r1, r3
   117c8:	4a1b      	ldr	r2, [pc, #108]	; (11838 <m2m_ip_cb+0x298>)
   117ca:	0103      	lsls	r3, r0, #4
   117cc:	18d3      	adds	r3, r2, r3
   117ce:	3308      	adds	r3, #8
   117d0:	1c0a      	adds	r2, r1, #0
   117d2:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   117d4:	4b17      	ldr	r3, [pc, #92]	; (11834 <m2m_ip_cb+0x294>)
   117d6:	681b      	ldr	r3, [r3, #0]
   117d8:	2b00      	cmp	r3, #0
   117da:	d100      	bne.n	117de <m2m_ip_cb+0x23e>
   117dc:	e174      	b.n	11ac8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   117de:	4b15      	ldr	r3, [pc, #84]	; (11834 <m2m_ip_cb+0x294>)
   117e0:	681b      	ldr	r3, [r3, #0]
   117e2:	229c      	movs	r2, #156	; 0x9c
   117e4:	18ba      	adds	r2, r7, r2
   117e6:	2000      	movs	r0, #0
   117e8:	5610      	ldrsb	r0, [r2, r0]
   117ea:	2298      	movs	r2, #152	; 0x98
   117ec:	18ba      	adds	r2, r7, r2
   117ee:	2105      	movs	r1, #5
   117f0:	4798      	blx	r3
	{
   117f2:	e169      	b.n	11ac8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   117f4:	1dfb      	adds	r3, r7, #7
   117f6:	781b      	ldrb	r3, [r3, #0]
   117f8:	2b4a      	cmp	r3, #74	; 0x4a
   117fa:	d123      	bne.n	11844 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   117fc:	230c      	movs	r3, #12
   117fe:	18f9      	adds	r1, r7, r3
   11800:	6838      	ldr	r0, [r7, #0]
   11802:	2300      	movs	r3, #0
   11804:	2244      	movs	r2, #68	; 0x44
   11806:	4c0a      	ldr	r4, [pc, #40]	; (11830 <m2m_ip_cb+0x290>)
   11808:	47a0      	blx	r4
   1180a:	1e03      	subs	r3, r0, #0
   1180c:	d000      	beq.n	11810 <m2m_ip_cb+0x270>
   1180e:	e160      	b.n	11ad2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   11810:	4b0b      	ldr	r3, [pc, #44]	; (11840 <m2m_ip_cb+0x2a0>)
   11812:	681b      	ldr	r3, [r3, #0]
   11814:	2b00      	cmp	r3, #0
   11816:	d100      	bne.n	1181a <m2m_ip_cb+0x27a>
   11818:	e15b      	b.n	11ad2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   1181a:	4b09      	ldr	r3, [pc, #36]	; (11840 <m2m_ip_cb+0x2a0>)
   1181c:	681a      	ldr	r2, [r3, #0]
   1181e:	230c      	movs	r3, #12
   11820:	18fb      	adds	r3, r7, r3
   11822:	6c19      	ldr	r1, [r3, #64]	; 0x40
   11824:	230c      	movs	r3, #12
   11826:	18fb      	adds	r3, r7, r3
   11828:	0018      	movs	r0, r3
   1182a:	4790      	blx	r2
}
   1182c:	e151      	b.n	11ad2 <m2m_ip_cb+0x532>
   1182e:	46c0      	nop			; (mov r8, r8)
   11830:	0000dd9d 	.word	0x0000dd9d
   11834:	200055f4 	.word	0x200055f4
   11838:	20005544 	.word	0x20005544
   1183c:	20003d3e 	.word	0x20003d3e
   11840:	200055fc 	.word	0x200055fc
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   11844:	1dfb      	adds	r3, r7, #7
   11846:	781b      	ldrb	r3, [r3, #0]
   11848:	2b46      	cmp	r3, #70	; 0x46
   1184a:	d008      	beq.n	1185e <m2m_ip_cb+0x2be>
   1184c:	1dfb      	adds	r3, r7, #7
   1184e:	781b      	ldrb	r3, [r3, #0]
   11850:	2b48      	cmp	r3, #72	; 0x48
   11852:	d004      	beq.n	1185e <m2m_ip_cb+0x2be>
   11854:	1dfb      	adds	r3, r7, #7
   11856:	781b      	ldrb	r3, [r3, #0]
   11858:	2b4d      	cmp	r3, #77	; 0x4d
   1185a:	d000      	beq.n	1185e <m2m_ip_cb+0x2be>
   1185c:	e0b4      	b.n	119c8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   1185e:	23df      	movs	r3, #223	; 0xdf
   11860:	18fb      	adds	r3, r7, r3
   11862:	2206      	movs	r2, #6
   11864:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   11866:	1dfb      	adds	r3, r7, #7
   11868:	781b      	ldrb	r3, [r3, #0]
   1186a:	2b48      	cmp	r3, #72	; 0x48
   1186c:	d103      	bne.n	11876 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   1186e:	23df      	movs	r3, #223	; 0xdf
   11870:	18fb      	adds	r3, r7, r3
   11872:	2209      	movs	r2, #9
   11874:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   11876:	23d8      	movs	r3, #216	; 0xd8
   11878:	18fb      	adds	r3, r7, r3
   1187a:	2210      	movs	r2, #16
   1187c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   1187e:	23d8      	movs	r3, #216	; 0xd8
   11880:	18fb      	adds	r3, r7, r3
   11882:	881a      	ldrh	r2, [r3, #0]
   11884:	2388      	movs	r3, #136	; 0x88
   11886:	18f9      	adds	r1, r7, r3
   11888:	6838      	ldr	r0, [r7, #0]
   1188a:	2300      	movs	r3, #0
   1188c:	4c93      	ldr	r4, [pc, #588]	; (11adc <m2m_ip_cb+0x53c>)
   1188e:	47a0      	blx	r4
   11890:	1e03      	subs	r3, r0, #0
   11892:	d000      	beq.n	11896 <m2m_ip_cb+0x2f6>
   11894:	e11a      	b.n	11acc <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   11896:	23d6      	movs	r3, #214	; 0xd6
   11898:	18fb      	adds	r3, r7, r3
   1189a:	2200      	movs	r2, #0
   1189c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   1189e:	23d5      	movs	r3, #213	; 0xd5
   118a0:	18fb      	adds	r3, r7, r3
   118a2:	2288      	movs	r2, #136	; 0x88
   118a4:	18ba      	adds	r2, r7, r2
   118a6:	7b12      	ldrb	r2, [r2, #12]
   118a8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   118aa:	23d6      	movs	r3, #214	; 0xd6
   118ac:	18fb      	adds	r3, r7, r3
   118ae:	2288      	movs	r2, #136	; 0x88
   118b0:	18ba      	adds	r2, r7, r2
   118b2:	89d2      	ldrh	r2, [r2, #14]
   118b4:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   118b6:	23d5      	movs	r3, #213	; 0xd5
   118b8:	18fb      	adds	r3, r7, r3
   118ba:	781b      	ldrb	r3, [r3, #0]
   118bc:	b25b      	sxtb	r3, r3
   118be:	4a88      	ldr	r2, [pc, #544]	; (11ae0 <m2m_ip_cb+0x540>)
   118c0:	011b      	lsls	r3, r3, #4
   118c2:	18d3      	adds	r3, r2, r3
   118c4:	330c      	adds	r3, #12
   118c6:	2200      	movs	r2, #0
   118c8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   118ca:	23d2      	movs	r3, #210	; 0xd2
   118cc:	18fb      	adds	r3, r7, r3
   118ce:	2288      	movs	r2, #136	; 0x88
   118d0:	18ba      	adds	r2, r7, r2
   118d2:	8912      	ldrh	r2, [r2, #8]
   118d4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   118d6:	23d0      	movs	r3, #208	; 0xd0
   118d8:	18fb      	adds	r3, r7, r3
   118da:	2288      	movs	r2, #136	; 0x88
   118dc:	18ba      	adds	r2, r7, r2
   118de:	8952      	ldrh	r2, [r2, #10]
   118e0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   118e2:	2388      	movs	r3, #136	; 0x88
   118e4:	18fb      	adds	r3, r7, r3
   118e6:	885a      	ldrh	r2, [r3, #2]
   118e8:	2370      	movs	r3, #112	; 0x70
   118ea:	18fb      	adds	r3, r7, r3
   118ec:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   118ee:	2388      	movs	r3, #136	; 0x88
   118f0:	18fb      	adds	r3, r7, r3
   118f2:	685a      	ldr	r2, [r3, #4]
   118f4:	2370      	movs	r3, #112	; 0x70
   118f6:	18fb      	adds	r3, r7, r3
   118f8:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   118fa:	23d5      	movs	r3, #213	; 0xd5
   118fc:	18fb      	adds	r3, r7, r3
   118fe:	781b      	ldrb	r3, [r3, #0]
   11900:	b25b      	sxtb	r3, r3
   11902:	4a77      	ldr	r2, [pc, #476]	; (11ae0 <m2m_ip_cb+0x540>)
   11904:	011b      	lsls	r3, r3, #4
   11906:	18d3      	adds	r3, r2, r3
   11908:	3306      	adds	r3, #6
   1190a:	881b      	ldrh	r3, [r3, #0]
   1190c:	b29b      	uxth	r3, r3
   1190e:	22d6      	movs	r2, #214	; 0xd6
   11910:	18ba      	adds	r2, r7, r2
   11912:	8812      	ldrh	r2, [r2, #0]
   11914:	429a      	cmp	r2, r3
   11916:	d148      	bne.n	119aa <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   11918:	23d2      	movs	r3, #210	; 0xd2
   1191a:	18fb      	adds	r3, r7, r3
   1191c:	2200      	movs	r2, #0
   1191e:	5e9b      	ldrsh	r3, [r3, r2]
   11920:	2b00      	cmp	r3, #0
   11922:	dd25      	ble.n	11970 <m2m_ip_cb+0x3d0>
   11924:	23d2      	movs	r3, #210	; 0xd2
   11926:	18fb      	adds	r3, r7, r3
   11928:	2200      	movs	r2, #0
   1192a:	5e9a      	ldrsh	r2, [r3, r2]
   1192c:	1d3b      	adds	r3, r7, #4
   1192e:	881b      	ldrh	r3, [r3, #0]
   11930:	429a      	cmp	r2, r3
   11932:	da1d      	bge.n	11970 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   11934:	23d0      	movs	r3, #208	; 0xd0
   11936:	18fb      	adds	r3, r7, r3
   11938:	881b      	ldrh	r3, [r3, #0]
   1193a:	683a      	ldr	r2, [r7, #0]
   1193c:	18d3      	adds	r3, r2, r3
   1193e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   11940:	23d8      	movs	r3, #216	; 0xd8
   11942:	18fb      	adds	r3, r7, r3
   11944:	22d2      	movs	r2, #210	; 0xd2
   11946:	18ba      	adds	r2, r7, r2
   11948:	8812      	ldrh	r2, [r2, #0]
   1194a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   1194c:	683c      	ldr	r4, [r7, #0]
   1194e:	23df      	movs	r3, #223	; 0xdf
   11950:	18fb      	adds	r3, r7, r3
   11952:	781a      	ldrb	r2, [r3, #0]
   11954:	2370      	movs	r3, #112	; 0x70
   11956:	18f9      	adds	r1, r7, r3
   11958:	23d5      	movs	r3, #213	; 0xd5
   1195a:	18fb      	adds	r3, r7, r3
   1195c:	2000      	movs	r0, #0
   1195e:	5618      	ldrsb	r0, [r3, r0]
   11960:	23d8      	movs	r3, #216	; 0xd8
   11962:	18fb      	adds	r3, r7, r3
   11964:	881b      	ldrh	r3, [r3, #0]
   11966:	9300      	str	r3, [sp, #0]
   11968:	0023      	movs	r3, r4
   1196a:	4c5e      	ldr	r4, [pc, #376]	; (11ae4 <m2m_ip_cb+0x544>)
   1196c:	47a0      	blx	r4
	{
   1196e:	e0ad      	b.n	11acc <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   11970:	2370      	movs	r3, #112	; 0x70
   11972:	18fb      	adds	r3, r7, r3
   11974:	22d2      	movs	r2, #210	; 0xd2
   11976:	18ba      	adds	r2, r7, r2
   11978:	8812      	ldrh	r2, [r2, #0]
   1197a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   1197c:	2370      	movs	r3, #112	; 0x70
   1197e:	18fb      	adds	r3, r7, r3
   11980:	2200      	movs	r2, #0
   11982:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   11984:	4b58      	ldr	r3, [pc, #352]	; (11ae8 <m2m_ip_cb+0x548>)
   11986:	681b      	ldr	r3, [r3, #0]
   11988:	2b00      	cmp	r3, #0
   1198a:	d100      	bne.n	1198e <m2m_ip_cb+0x3ee>
   1198c:	e09e      	b.n	11acc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   1198e:	4b56      	ldr	r3, [pc, #344]	; (11ae8 <m2m_ip_cb+0x548>)
   11990:	681b      	ldr	r3, [r3, #0]
   11992:	2270      	movs	r2, #112	; 0x70
   11994:	18bc      	adds	r4, r7, r2
   11996:	22df      	movs	r2, #223	; 0xdf
   11998:	18ba      	adds	r2, r7, r2
   1199a:	7811      	ldrb	r1, [r2, #0]
   1199c:	22d5      	movs	r2, #213	; 0xd5
   1199e:	18ba      	adds	r2, r7, r2
   119a0:	2000      	movs	r0, #0
   119a2:	5610      	ldrsb	r0, [r2, r0]
   119a4:	0022      	movs	r2, r4
   119a6:	4798      	blx	r3
	{
   119a8:	e090      	b.n	11acc <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   119aa:	23d8      	movs	r3, #216	; 0xd8
   119ac:	18fa      	adds	r2, r7, r3
   119ae:	1d3b      	adds	r3, r7, #4
   119b0:	8812      	ldrh	r2, [r2, #0]
   119b2:	881b      	ldrh	r3, [r3, #0]
   119b4:	429a      	cmp	r2, r3
   119b6:	d300      	bcc.n	119ba <m2m_ip_cb+0x41a>
   119b8:	e088      	b.n	11acc <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   119ba:	2301      	movs	r3, #1
   119bc:	2200      	movs	r2, #0
   119be:	2100      	movs	r1, #0
   119c0:	2000      	movs	r0, #0
   119c2:	4c46      	ldr	r4, [pc, #280]	; (11adc <m2m_ip_cb+0x53c>)
   119c4:	47a0      	blx	r4
	{
   119c6:	e081      	b.n	11acc <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   119c8:	1dfb      	adds	r3, r7, #7
   119ca:	781b      	ldrb	r3, [r3, #0]
   119cc:	2b45      	cmp	r3, #69	; 0x45
   119ce:	d007      	beq.n	119e0 <m2m_ip_cb+0x440>
   119d0:	1dfb      	adds	r3, r7, #7
   119d2:	781b      	ldrb	r3, [r3, #0]
   119d4:	2b47      	cmp	r3, #71	; 0x47
   119d6:	d003      	beq.n	119e0 <m2m_ip_cb+0x440>
   119d8:	1dfb      	adds	r3, r7, #7
   119da:	781b      	ldrb	r3, [r3, #0]
   119dc:	2b4c      	cmp	r3, #76	; 0x4c
   119de:	d14c      	bne.n	11a7a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   119e0:	23de      	movs	r3, #222	; 0xde
   119e2:	18fb      	adds	r3, r7, r3
   119e4:	2207      	movs	r2, #7
   119e6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   119e8:	1dfb      	adds	r3, r7, #7
   119ea:	781b      	ldrb	r3, [r3, #0]
   119ec:	2b47      	cmp	r3, #71	; 0x47
   119ee:	d103      	bne.n	119f8 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   119f0:	23de      	movs	r3, #222	; 0xde
   119f2:	18fb      	adds	r3, r7, r3
   119f4:	2208      	movs	r2, #8
   119f6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   119f8:	2364      	movs	r3, #100	; 0x64
   119fa:	18f9      	adds	r1, r7, r3
   119fc:	6838      	ldr	r0, [r7, #0]
   119fe:	2300      	movs	r3, #0
   11a00:	2208      	movs	r2, #8
   11a02:	4c36      	ldr	r4, [pc, #216]	; (11adc <m2m_ip_cb+0x53c>)
   11a04:	47a0      	blx	r4
   11a06:	1e03      	subs	r3, r0, #0
   11a08:	d162      	bne.n	11ad0 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   11a0a:	23dc      	movs	r3, #220	; 0xdc
   11a0c:	18fb      	adds	r3, r7, r3
   11a0e:	2200      	movs	r2, #0
   11a10:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   11a12:	23db      	movs	r3, #219	; 0xdb
   11a14:	18fb      	adds	r3, r7, r3
   11a16:	2264      	movs	r2, #100	; 0x64
   11a18:	18ba      	adds	r2, r7, r2
   11a1a:	7812      	ldrb	r2, [r2, #0]
   11a1c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   11a1e:	23dc      	movs	r3, #220	; 0xdc
   11a20:	18fb      	adds	r3, r7, r3
   11a22:	2264      	movs	r2, #100	; 0x64
   11a24:	18ba      	adds	r2, r7, r2
   11a26:	8892      	ldrh	r2, [r2, #4]
   11a28:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   11a2a:	2364      	movs	r3, #100	; 0x64
   11a2c:	18fb      	adds	r3, r7, r3
   11a2e:	2202      	movs	r2, #2
   11a30:	5e9a      	ldrsh	r2, [r3, r2]
   11a32:	236e      	movs	r3, #110	; 0x6e
   11a34:	18fb      	adds	r3, r7, r3
   11a36:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   11a38:	23db      	movs	r3, #219	; 0xdb
   11a3a:	18fb      	adds	r3, r7, r3
   11a3c:	781b      	ldrb	r3, [r3, #0]
   11a3e:	b25b      	sxtb	r3, r3
   11a40:	4a27      	ldr	r2, [pc, #156]	; (11ae0 <m2m_ip_cb+0x540>)
   11a42:	011b      	lsls	r3, r3, #4
   11a44:	18d3      	adds	r3, r2, r3
   11a46:	3306      	adds	r3, #6
   11a48:	881b      	ldrh	r3, [r3, #0]
   11a4a:	b29b      	uxth	r3, r3
   11a4c:	22dc      	movs	r2, #220	; 0xdc
   11a4e:	18ba      	adds	r2, r7, r2
   11a50:	8812      	ldrh	r2, [r2, #0]
   11a52:	429a      	cmp	r2, r3
   11a54:	d13c      	bne.n	11ad0 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   11a56:	4b24      	ldr	r3, [pc, #144]	; (11ae8 <m2m_ip_cb+0x548>)
   11a58:	681b      	ldr	r3, [r3, #0]
   11a5a:	2b00      	cmp	r3, #0
   11a5c:	d038      	beq.n	11ad0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   11a5e:	4b22      	ldr	r3, [pc, #136]	; (11ae8 <m2m_ip_cb+0x548>)
   11a60:	681b      	ldr	r3, [r3, #0]
   11a62:	226e      	movs	r2, #110	; 0x6e
   11a64:	18bc      	adds	r4, r7, r2
   11a66:	22de      	movs	r2, #222	; 0xde
   11a68:	18ba      	adds	r2, r7, r2
   11a6a:	7811      	ldrb	r1, [r2, #0]
   11a6c:	22db      	movs	r2, #219	; 0xdb
   11a6e:	18ba      	adds	r2, r7, r2
   11a70:	2000      	movs	r0, #0
   11a72:	5610      	ldrsb	r0, [r2, r0]
   11a74:	0022      	movs	r2, r4
   11a76:	4798      	blx	r3
	{
   11a78:	e02a      	b.n	11ad0 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   11a7a:	1dfb      	adds	r3, r7, #7
   11a7c:	781b      	ldrb	r3, [r3, #0]
   11a7e:	2b52      	cmp	r3, #82	; 0x52
   11a80:	d127      	bne.n	11ad2 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   11a82:	2350      	movs	r3, #80	; 0x50
   11a84:	18f9      	adds	r1, r7, r3
   11a86:	6838      	ldr	r0, [r7, #0]
   11a88:	2301      	movs	r3, #1
   11a8a:	2214      	movs	r2, #20
   11a8c:	4c13      	ldr	r4, [pc, #76]	; (11adc <m2m_ip_cb+0x53c>)
   11a8e:	47a0      	blx	r4
   11a90:	1e03      	subs	r3, r0, #0
   11a92:	d11e      	bne.n	11ad2 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   11a94:	2350      	movs	r3, #80	; 0x50
   11a96:	18fb      	adds	r3, r7, r3
   11a98:	685b      	ldr	r3, [r3, #4]
   11a9a:	001a      	movs	r2, r3
   11a9c:	4b13      	ldr	r3, [pc, #76]	; (11aec <m2m_ip_cb+0x54c>)
   11a9e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   11aa0:	4b12      	ldr	r3, [pc, #72]	; (11aec <m2m_ip_cb+0x54c>)
   11aa2:	681b      	ldr	r3, [r3, #0]
   11aa4:	2b00      	cmp	r3, #0
   11aa6:	d014      	beq.n	11ad2 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   11aa8:	4b10      	ldr	r3, [pc, #64]	; (11aec <m2m_ip_cb+0x54c>)
   11aaa:	681c      	ldr	r4, [r3, #0]
   11aac:	2350      	movs	r3, #80	; 0x50
   11aae:	18fb      	adds	r3, r7, r3
   11ab0:	6818      	ldr	r0, [r3, #0]
   11ab2:	2350      	movs	r3, #80	; 0x50
   11ab4:	18fb      	adds	r3, r7, r3
   11ab6:	6899      	ldr	r1, [r3, #8]
   11ab8:	2350      	movs	r3, #80	; 0x50
   11aba:	18fb      	adds	r3, r7, r3
   11abc:	7c1b      	ldrb	r3, [r3, #16]
   11abe:	001a      	movs	r2, r3
   11ac0:	47a0      	blx	r4
}
   11ac2:	e006      	b.n	11ad2 <m2m_ip_cb+0x532>
	{
   11ac4:	46c0      	nop			; (mov r8, r8)
   11ac6:	e004      	b.n	11ad2 <m2m_ip_cb+0x532>
	{
   11ac8:	46c0      	nop			; (mov r8, r8)
   11aca:	e002      	b.n	11ad2 <m2m_ip_cb+0x532>
	{
   11acc:	46c0      	nop			; (mov r8, r8)
   11ace:	e000      	b.n	11ad2 <m2m_ip_cb+0x532>
	{
   11ad0:	46c0      	nop			; (mov r8, r8)
}
   11ad2:	46c0      	nop			; (mov r8, r8)
   11ad4:	46bd      	mov	sp, r7
   11ad6:	b039      	add	sp, #228	; 0xe4
   11ad8:	bd90      	pop	{r4, r7, pc}
   11ada:	46c0      	nop			; (mov r8, r8)
   11adc:	0000dd9d 	.word	0x0000dd9d
   11ae0:	20005544 	.word	0x20005544
   11ae4:	000113a5 	.word	0x000113a5
   11ae8:	200055f4 	.word	0x200055f4
   11aec:	200055f8 	.word	0x200055f8

00011af0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   11af0:	b580      	push	{r7, lr}
   11af2:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   11af4:	4b0c      	ldr	r3, [pc, #48]	; (11b28 <socketInit+0x38>)
   11af6:	781b      	ldrb	r3, [r3, #0]
   11af8:	b2db      	uxtb	r3, r3
   11afa:	2b00      	cmp	r3, #0
   11afc:	d110      	bne.n	11b20 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   11afe:	4b0b      	ldr	r3, [pc, #44]	; (11b2c <socketInit+0x3c>)
   11b00:	22b0      	movs	r2, #176	; 0xb0
   11b02:	2100      	movs	r1, #0
   11b04:	0018      	movs	r0, r3
   11b06:	4b0a      	ldr	r3, [pc, #40]	; (11b30 <socketInit+0x40>)
   11b08:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   11b0a:	4b0a      	ldr	r3, [pc, #40]	; (11b34 <socketInit+0x44>)
   11b0c:	0019      	movs	r1, r3
   11b0e:	2002      	movs	r0, #2
   11b10:	4b09      	ldr	r3, [pc, #36]	; (11b38 <socketInit+0x48>)
   11b12:	4798      	blx	r3
		gbSocketInit	= 1;
   11b14:	4b04      	ldr	r3, [pc, #16]	; (11b28 <socketInit+0x38>)
   11b16:	2201      	movs	r2, #1
   11b18:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   11b1a:	4b08      	ldr	r3, [pc, #32]	; (11b3c <socketInit+0x4c>)
   11b1c:	2200      	movs	r2, #0
   11b1e:	801a      	strh	r2, [r3, #0]
	}
}
   11b20:	46c0      	nop			; (mov r8, r8)
   11b22:	46bd      	mov	sp, r7
   11b24:	bd80      	pop	{r7, pc}
   11b26:	46c0      	nop			; (mov r8, r8)
   11b28:	20003d40 	.word	0x20003d40
   11b2c:	20005544 	.word	0x20005544
   11b30:	0000d221 	.word	0x0000d221
   11b34:	000115a1 	.word	0x000115a1
   11b38:	0000df1d 	.word	0x0000df1d
   11b3c:	20003d3e 	.word	0x20003d3e

00011b40 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   11b40:	b580      	push	{r7, lr}
   11b42:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   11b44:	4b0a      	ldr	r3, [pc, #40]	; (11b70 <socketDeinit+0x30>)
   11b46:	22b0      	movs	r2, #176	; 0xb0
   11b48:	2100      	movs	r1, #0
   11b4a:	0018      	movs	r0, r3
   11b4c:	4b09      	ldr	r3, [pc, #36]	; (11b74 <socketDeinit+0x34>)
   11b4e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   11b50:	2100      	movs	r1, #0
   11b52:	2002      	movs	r0, #2
   11b54:	4b08      	ldr	r3, [pc, #32]	; (11b78 <socketDeinit+0x38>)
   11b56:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   11b58:	4b08      	ldr	r3, [pc, #32]	; (11b7c <socketDeinit+0x3c>)
   11b5a:	2200      	movs	r2, #0
   11b5c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   11b5e:	4b08      	ldr	r3, [pc, #32]	; (11b80 <socketDeinit+0x40>)
   11b60:	2200      	movs	r2, #0
   11b62:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   11b64:	4b07      	ldr	r3, [pc, #28]	; (11b84 <socketDeinit+0x44>)
   11b66:	2200      	movs	r2, #0
   11b68:	701a      	strb	r2, [r3, #0]
}
   11b6a:	46c0      	nop			; (mov r8, r8)
   11b6c:	46bd      	mov	sp, r7
   11b6e:	bd80      	pop	{r7, pc}
   11b70:	20005544 	.word	0x20005544
   11b74:	0000d221 	.word	0x0000d221
   11b78:	0000df1d 	.word	0x0000df1d
   11b7c:	200055f4 	.word	0x200055f4
   11b80:	200055fc 	.word	0x200055fc
   11b84:	20003d40 	.word	0x20003d40

00011b88 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   11b88:	b580      	push	{r7, lr}
   11b8a:	b082      	sub	sp, #8
   11b8c:	af00      	add	r7, sp, #0
   11b8e:	6078      	str	r0, [r7, #4]
   11b90:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   11b92:	4b05      	ldr	r3, [pc, #20]	; (11ba8 <registerSocketCallback+0x20>)
   11b94:	687a      	ldr	r2, [r7, #4]
   11b96:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   11b98:	4b04      	ldr	r3, [pc, #16]	; (11bac <registerSocketCallback+0x24>)
   11b9a:	683a      	ldr	r2, [r7, #0]
   11b9c:	601a      	str	r2, [r3, #0]
}
   11b9e:	46c0      	nop			; (mov r8, r8)
   11ba0:	46bd      	mov	sp, r7
   11ba2:	b002      	add	sp, #8
   11ba4:	bd80      	pop	{r7, pc}
   11ba6:	46c0      	nop			; (mov r8, r8)
   11ba8:	200055f4 	.word	0x200055f4
   11bac:	200055fc 	.word	0x200055fc

00011bb0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   11bb0:	b590      	push	{r4, r7, lr}
   11bb2:	b08d      	sub	sp, #52	; 0x34
   11bb4:	af04      	add	r7, sp, #16
   11bb6:	0004      	movs	r4, r0
   11bb8:	0008      	movs	r0, r1
   11bba:	0011      	movs	r1, r2
   11bbc:	1dbb      	adds	r3, r7, #6
   11bbe:	1c22      	adds	r2, r4, #0
   11bc0:	801a      	strh	r2, [r3, #0]
   11bc2:	1d7b      	adds	r3, r7, #5
   11bc4:	1c02      	adds	r2, r0, #0
   11bc6:	701a      	strb	r2, [r3, #0]
   11bc8:	1d3b      	adds	r3, r7, #4
   11bca:	1c0a      	adds	r2, r1, #0
   11bcc:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   11bce:	231f      	movs	r3, #31
   11bd0:	18fb      	adds	r3, r7, r3
   11bd2:	22ff      	movs	r2, #255	; 0xff
   11bd4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   11bd6:	1dbb      	adds	r3, r7, #6
   11bd8:	881b      	ldrh	r3, [r3, #0]
   11bda:	2b02      	cmp	r3, #2
   11bdc:	d000      	beq.n	11be0 <socket+0x30>
   11bde:	e0ce      	b.n	11d7e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   11be0:	1d7b      	adds	r3, r7, #5
   11be2:	781b      	ldrb	r3, [r3, #0]
   11be4:	2b01      	cmp	r3, #1
   11be6:	d135      	bne.n	11c54 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   11be8:	231e      	movs	r3, #30
   11bea:	18fb      	adds	r3, r7, r3
   11bec:	2200      	movs	r2, #0
   11bee:	701a      	strb	r2, [r3, #0]
   11bf0:	e02a      	b.n	11c48 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   11bf2:	2317      	movs	r3, #23
   11bf4:	18fb      	adds	r3, r7, r3
   11bf6:	4a66      	ldr	r2, [pc, #408]	; (11d90 <socket+0x1e0>)
   11bf8:	7812      	ldrb	r2, [r2, #0]
   11bfa:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   11bfc:	4b64      	ldr	r3, [pc, #400]	; (11d90 <socket+0x1e0>)
   11bfe:	781b      	ldrb	r3, [r3, #0]
   11c00:	b2db      	uxtb	r3, r3
   11c02:	011a      	lsls	r2, r3, #4
   11c04:	4b63      	ldr	r3, [pc, #396]	; (11d94 <socket+0x1e4>)
   11c06:	18d3      	adds	r3, r2, r3
   11c08:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   11c0a:	4b61      	ldr	r3, [pc, #388]	; (11d90 <socket+0x1e0>)
   11c0c:	781b      	ldrb	r3, [r3, #0]
   11c0e:	b2db      	uxtb	r3, r3
   11c10:	1c5a      	adds	r2, r3, #1
   11c12:	4b61      	ldr	r3, [pc, #388]	; (11d98 <socket+0x1e8>)
   11c14:	2107      	movs	r1, #7
   11c16:	0010      	movs	r0, r2
   11c18:	4798      	blx	r3
   11c1a:	000b      	movs	r3, r1
   11c1c:	b2da      	uxtb	r2, r3
   11c1e:	4b5c      	ldr	r3, [pc, #368]	; (11d90 <socket+0x1e0>)
   11c20:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   11c22:	69bb      	ldr	r3, [r7, #24]
   11c24:	7a9b      	ldrb	r3, [r3, #10]
   11c26:	b2db      	uxtb	r3, r3
   11c28:	2b00      	cmp	r3, #0
   11c2a:	d106      	bne.n	11c3a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   11c2c:	231f      	movs	r3, #31
   11c2e:	18fb      	adds	r3, r7, r3
   11c30:	2217      	movs	r2, #23
   11c32:	18ba      	adds	r2, r7, r2
   11c34:	7812      	ldrb	r2, [r2, #0]
   11c36:	701a      	strb	r2, [r3, #0]
					break;
   11c38:	e04c      	b.n	11cd4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   11c3a:	231e      	movs	r3, #30
   11c3c:	18fb      	adds	r3, r7, r3
   11c3e:	781a      	ldrb	r2, [r3, #0]
   11c40:	231e      	movs	r3, #30
   11c42:	18fb      	adds	r3, r7, r3
   11c44:	3201      	adds	r2, #1
   11c46:	701a      	strb	r2, [r3, #0]
   11c48:	231e      	movs	r3, #30
   11c4a:	18fb      	adds	r3, r7, r3
   11c4c:	781b      	ldrb	r3, [r3, #0]
   11c4e:	2b06      	cmp	r3, #6
   11c50:	d9cf      	bls.n	11bf2 <socket+0x42>
   11c52:	e03f      	b.n	11cd4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   11c54:	1d7b      	adds	r3, r7, #5
   11c56:	781b      	ldrb	r3, [r3, #0]
   11c58:	2b02      	cmp	r3, #2
   11c5a:	d13b      	bne.n	11cd4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   11c5c:	4b4f      	ldr	r3, [pc, #316]	; (11d9c <socket+0x1ec>)
   11c5e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   11c60:	231e      	movs	r3, #30
   11c62:	18fb      	adds	r3, r7, r3
   11c64:	2200      	movs	r2, #0
   11c66:	701a      	strb	r2, [r3, #0]
   11c68:	e02f      	b.n	11cca <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   11c6a:	2317      	movs	r3, #23
   11c6c:	18fb      	adds	r3, r7, r3
   11c6e:	4a4c      	ldr	r2, [pc, #304]	; (11da0 <socket+0x1f0>)
   11c70:	7812      	ldrb	r2, [r2, #0]
   11c72:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   11c74:	4b4a      	ldr	r3, [pc, #296]	; (11da0 <socket+0x1f0>)
   11c76:	781b      	ldrb	r3, [r3, #0]
   11c78:	b2db      	uxtb	r3, r3
   11c7a:	011b      	lsls	r3, r3, #4
   11c7c:	693a      	ldr	r2, [r7, #16]
   11c7e:	18d3      	adds	r3, r2, r3
   11c80:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   11c82:	4b47      	ldr	r3, [pc, #284]	; (11da0 <socket+0x1f0>)
   11c84:	781b      	ldrb	r3, [r3, #0]
   11c86:	b2db      	uxtb	r3, r3
   11c88:	3301      	adds	r3, #1
   11c8a:	4a46      	ldr	r2, [pc, #280]	; (11da4 <socket+0x1f4>)
   11c8c:	4013      	ands	r3, r2
   11c8e:	d504      	bpl.n	11c9a <socket+0xea>
   11c90:	3b01      	subs	r3, #1
   11c92:	2204      	movs	r2, #4
   11c94:	4252      	negs	r2, r2
   11c96:	4313      	orrs	r3, r2
   11c98:	3301      	adds	r3, #1
   11c9a:	b2da      	uxtb	r2, r3
   11c9c:	4b40      	ldr	r3, [pc, #256]	; (11da0 <socket+0x1f0>)
   11c9e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   11ca0:	69bb      	ldr	r3, [r7, #24]
   11ca2:	7a9b      	ldrb	r3, [r3, #10]
   11ca4:	b2db      	uxtb	r3, r3
   11ca6:	2b00      	cmp	r3, #0
   11ca8:	d108      	bne.n	11cbc <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   11caa:	2317      	movs	r3, #23
   11cac:	18fb      	adds	r3, r7, r3
   11cae:	781b      	ldrb	r3, [r3, #0]
   11cb0:	3307      	adds	r3, #7
   11cb2:	b2da      	uxtb	r2, r3
   11cb4:	231f      	movs	r3, #31
   11cb6:	18fb      	adds	r3, r7, r3
   11cb8:	701a      	strb	r2, [r3, #0]
					break;
   11cba:	e00b      	b.n	11cd4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   11cbc:	231e      	movs	r3, #30
   11cbe:	18fb      	adds	r3, r7, r3
   11cc0:	781a      	ldrb	r2, [r3, #0]
   11cc2:	231e      	movs	r3, #30
   11cc4:	18fb      	adds	r3, r7, r3
   11cc6:	3201      	adds	r2, #1
   11cc8:	701a      	strb	r2, [r3, #0]
   11cca:	231e      	movs	r3, #30
   11ccc:	18fb      	adds	r3, r7, r3
   11cce:	781b      	ldrb	r3, [r3, #0]
   11cd0:	2b03      	cmp	r3, #3
   11cd2:	d9ca      	bls.n	11c6a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   11cd4:	231f      	movs	r3, #31
   11cd6:	18fb      	adds	r3, r7, r3
   11cd8:	781b      	ldrb	r3, [r3, #0]
   11cda:	2b7f      	cmp	r3, #127	; 0x7f
   11cdc:	d84f      	bhi.n	11d7e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   11cde:	69bb      	ldr	r3, [r7, #24]
   11ce0:	2210      	movs	r2, #16
   11ce2:	2100      	movs	r1, #0
   11ce4:	0018      	movs	r0, r3
   11ce6:	4b30      	ldr	r3, [pc, #192]	; (11da8 <socket+0x1f8>)
   11ce8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   11cea:	69bb      	ldr	r3, [r7, #24]
   11cec:	2201      	movs	r2, #1
   11cee:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   11cf0:	4b2e      	ldr	r3, [pc, #184]	; (11dac <socket+0x1fc>)
   11cf2:	881b      	ldrh	r3, [r3, #0]
   11cf4:	b29b      	uxth	r3, r3
   11cf6:	3301      	adds	r3, #1
   11cf8:	b29a      	uxth	r2, r3
   11cfa:	4b2c      	ldr	r3, [pc, #176]	; (11dac <socket+0x1fc>)
   11cfc:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   11cfe:	4b2b      	ldr	r3, [pc, #172]	; (11dac <socket+0x1fc>)
   11d00:	881b      	ldrh	r3, [r3, #0]
   11d02:	b29b      	uxth	r3, r3
   11d04:	2b00      	cmp	r3, #0
   11d06:	d106      	bne.n	11d16 <socket+0x166>
				++gu16SessionID;
   11d08:	4b28      	ldr	r3, [pc, #160]	; (11dac <socket+0x1fc>)
   11d0a:	881b      	ldrh	r3, [r3, #0]
   11d0c:	b29b      	uxth	r3, r3
   11d0e:	3301      	adds	r3, #1
   11d10:	b29a      	uxth	r2, r3
   11d12:	4b26      	ldr	r3, [pc, #152]	; (11dac <socket+0x1fc>)
   11d14:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   11d16:	4b25      	ldr	r3, [pc, #148]	; (11dac <socket+0x1fc>)
   11d18:	881b      	ldrh	r3, [r3, #0]
   11d1a:	b29a      	uxth	r2, r3
   11d1c:	69bb      	ldr	r3, [r7, #24]
   11d1e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   11d20:	4b23      	ldr	r3, [pc, #140]	; (11db0 <socket+0x200>)
   11d22:	0018      	movs	r0, r3
   11d24:	4b23      	ldr	r3, [pc, #140]	; (11db4 <socket+0x204>)
   11d26:	4798      	blx	r3
   11d28:	231f      	movs	r3, #31
   11d2a:	18fb      	adds	r3, r7, r3
   11d2c:	2100      	movs	r1, #0
   11d2e:	5659      	ldrsb	r1, [r3, r1]
   11d30:	4b1e      	ldr	r3, [pc, #120]	; (11dac <socket+0x1fc>)
   11d32:	881b      	ldrh	r3, [r3, #0]
   11d34:	b29b      	uxth	r3, r3
   11d36:	001a      	movs	r2, r3
   11d38:	4b1f      	ldr	r3, [pc, #124]	; (11db8 <socket+0x208>)
   11d3a:	0018      	movs	r0, r3
   11d3c:	4b1d      	ldr	r3, [pc, #116]	; (11db4 <socket+0x204>)
   11d3e:	4798      	blx	r3
   11d40:	4b1e      	ldr	r3, [pc, #120]	; (11dbc <socket+0x20c>)
   11d42:	0018      	movs	r0, r3
   11d44:	4b1b      	ldr	r3, [pc, #108]	; (11db4 <socket+0x204>)
   11d46:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   11d48:	1d3b      	adds	r3, r7, #4
   11d4a:	781b      	ldrb	r3, [r3, #0]
   11d4c:	2201      	movs	r2, #1
   11d4e:	4013      	ands	r3, r2
   11d50:	d015      	beq.n	11d7e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   11d52:	230c      	movs	r3, #12
   11d54:	18fb      	adds	r3, r7, r3
   11d56:	221f      	movs	r2, #31
   11d58:	18ba      	adds	r2, r7, r2
   11d5a:	7812      	ldrb	r2, [r2, #0]
   11d5c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   11d5e:	69bb      	ldr	r3, [r7, #24]
   11d60:	2221      	movs	r2, #33	; 0x21
   11d62:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   11d64:	230c      	movs	r3, #12
   11d66:	18fa      	adds	r2, r7, r3
   11d68:	2300      	movs	r3, #0
   11d6a:	9302      	str	r3, [sp, #8]
   11d6c:	2300      	movs	r3, #0
   11d6e:	9301      	str	r3, [sp, #4]
   11d70:	2300      	movs	r3, #0
   11d72:	9300      	str	r3, [sp, #0]
   11d74:	2304      	movs	r3, #4
   11d76:	2150      	movs	r1, #80	; 0x50
   11d78:	2002      	movs	r0, #2
   11d7a:	4c11      	ldr	r4, [pc, #68]	; (11dc0 <socket+0x210>)
   11d7c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   11d7e:	231f      	movs	r3, #31
   11d80:	18fb      	adds	r3, r7, r3
   11d82:	781b      	ldrb	r3, [r3, #0]
   11d84:	b25b      	sxtb	r3, r3
}
   11d86:	0018      	movs	r0, r3
   11d88:	46bd      	mov	sp, r7
   11d8a:	b009      	add	sp, #36	; 0x24
   11d8c:	bd90      	pop	{r4, r7, pc}
   11d8e:	46c0      	nop			; (mov r8, r8)
   11d90:	20003d41 	.word	0x20003d41
   11d94:	20005544 	.word	0x20005544
   11d98:	0001f225 	.word	0x0001f225
   11d9c:	200055b4 	.word	0x200055b4
   11da0:	20003d42 	.word	0x20003d42
   11da4:	80000003 	.word	0x80000003
   11da8:	0000d221 	.word	0x0000d221
   11dac:	20003d3e 	.word	0x20003d3e
   11db0:	00025644 	.word	0x00025644
   11db4:	0000a4ed 	.word	0x0000a4ed
   11db8:	00025668 	.word	0x00025668
   11dbc:	00025664 	.word	0x00025664
   11dc0:	0000d481 	.word	0x0000d481

00011dc4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   11dc4:	b5b0      	push	{r4, r5, r7, lr}
   11dc6:	b08a      	sub	sp, #40	; 0x28
   11dc8:	af04      	add	r7, sp, #16
   11dca:	6039      	str	r1, [r7, #0]
   11dcc:	0011      	movs	r1, r2
   11dce:	1dfb      	adds	r3, r7, #7
   11dd0:	1c02      	adds	r2, r0, #0
   11dd2:	701a      	strb	r2, [r3, #0]
   11dd4:	1dbb      	adds	r3, r7, #6
   11dd6:	1c0a      	adds	r2, r1, #0
   11dd8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   11dda:	2317      	movs	r3, #23
   11ddc:	18fb      	adds	r3, r7, r3
   11dde:	22fa      	movs	r2, #250	; 0xfa
   11de0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   11de2:	1dfb      	adds	r3, r7, #7
   11de4:	781b      	ldrb	r3, [r3, #0]
   11de6:	2b7f      	cmp	r3, #127	; 0x7f
   11de8:	d867      	bhi.n	11eba <connect+0xf6>
   11dea:	683b      	ldr	r3, [r7, #0]
   11dec:	2b00      	cmp	r3, #0
   11dee:	d064      	beq.n	11eba <connect+0xf6>
   11df0:	1dfb      	adds	r3, r7, #7
   11df2:	781b      	ldrb	r3, [r3, #0]
   11df4:	b25b      	sxtb	r3, r3
   11df6:	4a35      	ldr	r2, [pc, #212]	; (11ecc <connect+0x108>)
   11df8:	011b      	lsls	r3, r3, #4
   11dfa:	18d3      	adds	r3, r2, r3
   11dfc:	330a      	adds	r3, #10
   11dfe:	781b      	ldrb	r3, [r3, #0]
   11e00:	b2db      	uxtb	r3, r3
   11e02:	2b01      	cmp	r3, #1
   11e04:	d159      	bne.n	11eba <connect+0xf6>
   11e06:	1dbb      	adds	r3, r7, #6
   11e08:	781b      	ldrb	r3, [r3, #0]
   11e0a:	2b00      	cmp	r3, #0
   11e0c:	d055      	beq.n	11eba <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   11e0e:	2316      	movs	r3, #22
   11e10:	18fb      	adds	r3, r7, r3
   11e12:	2244      	movs	r2, #68	; 0x44
   11e14:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   11e16:	1dfb      	adds	r3, r7, #7
   11e18:	781b      	ldrb	r3, [r3, #0]
   11e1a:	b25b      	sxtb	r3, r3
   11e1c:	4a2b      	ldr	r2, [pc, #172]	; (11ecc <connect+0x108>)
   11e1e:	011b      	lsls	r3, r3, #4
   11e20:	18d3      	adds	r3, r2, r3
   11e22:	330b      	adds	r3, #11
   11e24:	781b      	ldrb	r3, [r3, #0]
   11e26:	b2db      	uxtb	r3, r3
   11e28:	001a      	movs	r2, r3
   11e2a:	2301      	movs	r3, #1
   11e2c:	4013      	ands	r3, r2
   11e2e:	d00f      	beq.n	11e50 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   11e30:	2316      	movs	r3, #22
   11e32:	18fb      	adds	r3, r7, r3
   11e34:	224b      	movs	r2, #75	; 0x4b
   11e36:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   11e38:	1dfb      	adds	r3, r7, #7
   11e3a:	781b      	ldrb	r3, [r3, #0]
   11e3c:	b25b      	sxtb	r3, r3
   11e3e:	4a23      	ldr	r2, [pc, #140]	; (11ecc <connect+0x108>)
   11e40:	011b      	lsls	r3, r3, #4
   11e42:	18d3      	adds	r3, r2, r3
   11e44:	330b      	adds	r3, #11
   11e46:	781b      	ldrb	r3, [r3, #0]
   11e48:	b2da      	uxtb	r2, r3
   11e4a:	2308      	movs	r3, #8
   11e4c:	18fb      	adds	r3, r7, r3
   11e4e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   11e50:	2308      	movs	r3, #8
   11e52:	18fb      	adds	r3, r7, r3
   11e54:	1dfa      	adds	r2, r7, #7
   11e56:	7812      	ldrb	r2, [r2, #0]
   11e58:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   11e5a:	6839      	ldr	r1, [r7, #0]
   11e5c:	2308      	movs	r3, #8
   11e5e:	18fb      	adds	r3, r7, r3
   11e60:	2208      	movs	r2, #8
   11e62:	0018      	movs	r0, r3
   11e64:	4b1a      	ldr	r3, [pc, #104]	; (11ed0 <connect+0x10c>)
   11e66:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   11e68:	1dfb      	adds	r3, r7, #7
   11e6a:	781b      	ldrb	r3, [r3, #0]
   11e6c:	b25b      	sxtb	r3, r3
   11e6e:	4a17      	ldr	r2, [pc, #92]	; (11ecc <connect+0x108>)
   11e70:	011b      	lsls	r3, r3, #4
   11e72:	18d3      	adds	r3, r2, r3
   11e74:	3306      	adds	r3, #6
   11e76:	881b      	ldrh	r3, [r3, #0]
   11e78:	b29a      	uxth	r2, r3
   11e7a:	2308      	movs	r3, #8
   11e7c:	18fb      	adds	r3, r7, r3
   11e7e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   11e80:	2317      	movs	r3, #23
   11e82:	18fc      	adds	r4, r7, r3
   11e84:	2308      	movs	r3, #8
   11e86:	18fa      	adds	r2, r7, r3
   11e88:	2316      	movs	r3, #22
   11e8a:	18fb      	adds	r3, r7, r3
   11e8c:	7819      	ldrb	r1, [r3, #0]
   11e8e:	2300      	movs	r3, #0
   11e90:	9302      	str	r3, [sp, #8]
   11e92:	2300      	movs	r3, #0
   11e94:	9301      	str	r3, [sp, #4]
   11e96:	2300      	movs	r3, #0
   11e98:	9300      	str	r3, [sp, #0]
   11e9a:	230c      	movs	r3, #12
   11e9c:	2002      	movs	r0, #2
   11e9e:	4d0d      	ldr	r5, [pc, #52]	; (11ed4 <connect+0x110>)
   11ea0:	47a8      	blx	r5
   11ea2:	0003      	movs	r3, r0
   11ea4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   11ea6:	2317      	movs	r3, #23
   11ea8:	18fb      	adds	r3, r7, r3
   11eaa:	781b      	ldrb	r3, [r3, #0]
   11eac:	b25b      	sxtb	r3, r3
   11eae:	2b00      	cmp	r3, #0
   11eb0:	d003      	beq.n	11eba <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   11eb2:	2317      	movs	r3, #23
   11eb4:	18fb      	adds	r3, r7, r3
   11eb6:	22f7      	movs	r2, #247	; 0xf7
   11eb8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   11eba:	2317      	movs	r3, #23
   11ebc:	18fb      	adds	r3, r7, r3
   11ebe:	781b      	ldrb	r3, [r3, #0]
   11ec0:	b25b      	sxtb	r3, r3
}
   11ec2:	0018      	movs	r0, r3
   11ec4:	46bd      	mov	sp, r7
   11ec6:	b006      	add	sp, #24
   11ec8:	bdb0      	pop	{r4, r5, r7, pc}
   11eca:	46c0      	nop			; (mov r8, r8)
   11ecc:	20005544 	.word	0x20005544
   11ed0:	0000d1e5 	.word	0x0000d1e5
   11ed4:	0000d481 	.word	0x0000d481

00011ed8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   11ed8:	b590      	push	{r4, r7, lr}
   11eda:	b08f      	sub	sp, #60	; 0x3c
   11edc:	af04      	add	r7, sp, #16
   11ede:	0004      	movs	r4, r0
   11ee0:	60b9      	str	r1, [r7, #8]
   11ee2:	0010      	movs	r0, r2
   11ee4:	0019      	movs	r1, r3
   11ee6:	230f      	movs	r3, #15
   11ee8:	18fb      	adds	r3, r7, r3
   11eea:	1c22      	adds	r2, r4, #0
   11eec:	701a      	strb	r2, [r3, #0]
   11eee:	230c      	movs	r3, #12
   11ef0:	18fb      	adds	r3, r7, r3
   11ef2:	1c02      	adds	r2, r0, #0
   11ef4:	801a      	strh	r2, [r3, #0]
   11ef6:	1dbb      	adds	r3, r7, #6
   11ef8:	1c0a      	adds	r2, r1, #0
   11efa:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   11efc:	2326      	movs	r3, #38	; 0x26
   11efe:	18fb      	adds	r3, r7, r3
   11f00:	2206      	movs	r2, #6
   11f02:	4252      	negs	r2, r2
   11f04:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   11f06:	230f      	movs	r3, #15
   11f08:	18fb      	adds	r3, r7, r3
   11f0a:	781b      	ldrb	r3, [r3, #0]
   11f0c:	2b7f      	cmp	r3, #127	; 0x7f
   11f0e:	d900      	bls.n	11f12 <send+0x3a>
   11f10:	e087      	b.n	12022 <send+0x14a>
   11f12:	68bb      	ldr	r3, [r7, #8]
   11f14:	2b00      	cmp	r3, #0
   11f16:	d100      	bne.n	11f1a <send+0x42>
   11f18:	e083      	b.n	12022 <send+0x14a>
   11f1a:	230c      	movs	r3, #12
   11f1c:	18fb      	adds	r3, r7, r3
   11f1e:	881a      	ldrh	r2, [r3, #0]
   11f20:	23af      	movs	r3, #175	; 0xaf
   11f22:	00db      	lsls	r3, r3, #3
   11f24:	429a      	cmp	r2, r3
   11f26:	d900      	bls.n	11f2a <send+0x52>
   11f28:	e07b      	b.n	12022 <send+0x14a>
   11f2a:	230f      	movs	r3, #15
   11f2c:	18fb      	adds	r3, r7, r3
   11f2e:	781b      	ldrb	r3, [r3, #0]
   11f30:	b25b      	sxtb	r3, r3
   11f32:	4a40      	ldr	r2, [pc, #256]	; (12034 <send+0x15c>)
   11f34:	011b      	lsls	r3, r3, #4
   11f36:	18d3      	adds	r3, r2, r3
   11f38:	330a      	adds	r3, #10
   11f3a:	781b      	ldrb	r3, [r3, #0]
   11f3c:	b2db      	uxtb	r3, r3
   11f3e:	2b01      	cmp	r3, #1
   11f40:	d16f      	bne.n	12022 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   11f42:	2323      	movs	r3, #35	; 0x23
   11f44:	18fb      	adds	r3, r7, r3
   11f46:	2245      	movs	r2, #69	; 0x45
   11f48:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   11f4a:	2324      	movs	r3, #36	; 0x24
   11f4c:	18fb      	adds	r3, r7, r3
   11f4e:	2250      	movs	r2, #80	; 0x50
   11f50:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   11f52:	2310      	movs	r3, #16
   11f54:	18fb      	adds	r3, r7, r3
   11f56:	220f      	movs	r2, #15
   11f58:	18ba      	adds	r2, r7, r2
   11f5a:	7812      	ldrb	r2, [r2, #0]
   11f5c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   11f5e:	2310      	movs	r3, #16
   11f60:	18fb      	adds	r3, r7, r3
   11f62:	220c      	movs	r2, #12
   11f64:	18ba      	adds	r2, r7, r2
   11f66:	8812      	ldrh	r2, [r2, #0]
   11f68:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   11f6a:	230f      	movs	r3, #15
   11f6c:	18fb      	adds	r3, r7, r3
   11f6e:	781b      	ldrb	r3, [r3, #0]
   11f70:	b25b      	sxtb	r3, r3
   11f72:	4a30      	ldr	r2, [pc, #192]	; (12034 <send+0x15c>)
   11f74:	011b      	lsls	r3, r3, #4
   11f76:	18d3      	adds	r3, r2, r3
   11f78:	3306      	adds	r3, #6
   11f7a:	881b      	ldrh	r3, [r3, #0]
   11f7c:	b29a      	uxth	r2, r3
   11f7e:	2310      	movs	r3, #16
   11f80:	18fb      	adds	r3, r7, r3
   11f82:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   11f84:	230f      	movs	r3, #15
   11f86:	18fb      	adds	r3, r7, r3
   11f88:	781b      	ldrb	r3, [r3, #0]
   11f8a:	b25b      	sxtb	r3, r3
   11f8c:	2b06      	cmp	r3, #6
   11f8e:	dd03      	ble.n	11f98 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   11f90:	2324      	movs	r3, #36	; 0x24
   11f92:	18fb      	adds	r3, r7, r3
   11f94:	2244      	movs	r2, #68	; 0x44
   11f96:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   11f98:	230f      	movs	r3, #15
   11f9a:	18fb      	adds	r3, r7, r3
   11f9c:	781b      	ldrb	r3, [r3, #0]
   11f9e:	b25b      	sxtb	r3, r3
   11fa0:	4a24      	ldr	r2, [pc, #144]	; (12034 <send+0x15c>)
   11fa2:	011b      	lsls	r3, r3, #4
   11fa4:	18d3      	adds	r3, r2, r3
   11fa6:	330b      	adds	r3, #11
   11fa8:	781b      	ldrb	r3, [r3, #0]
   11faa:	b2db      	uxtb	r3, r3
   11fac:	001a      	movs	r2, r3
   11fae:	2301      	movs	r3, #1
   11fb0:	4013      	ands	r3, r2
   11fb2:	d00f      	beq.n	11fd4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   11fb4:	2323      	movs	r3, #35	; 0x23
   11fb6:	18fb      	adds	r3, r7, r3
   11fb8:	224c      	movs	r2, #76	; 0x4c
   11fba:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   11fbc:	230f      	movs	r3, #15
   11fbe:	18fb      	adds	r3, r7, r3
   11fc0:	2200      	movs	r2, #0
   11fc2:	569a      	ldrsb	r2, [r3, r2]
   11fc4:	2324      	movs	r3, #36	; 0x24
   11fc6:	18fb      	adds	r3, r7, r3
   11fc8:	491a      	ldr	r1, [pc, #104]	; (12034 <send+0x15c>)
   11fca:	0112      	lsls	r2, r2, #4
   11fcc:	188a      	adds	r2, r1, r2
   11fce:	3208      	adds	r2, #8
   11fd0:	8812      	ldrh	r2, [r2, #0]
   11fd2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   11fd4:	2323      	movs	r3, #35	; 0x23
   11fd6:	18fb      	adds	r3, r7, r3
   11fd8:	781b      	ldrb	r3, [r3, #0]
   11fda:	2280      	movs	r2, #128	; 0x80
   11fdc:	4252      	negs	r2, r2
   11fde:	4313      	orrs	r3, r2
   11fe0:	b2d9      	uxtb	r1, r3
   11fe2:	2310      	movs	r3, #16
   11fe4:	18fa      	adds	r2, r7, r3
   11fe6:	2324      	movs	r3, #36	; 0x24
   11fe8:	18fb      	adds	r3, r7, r3
   11fea:	881b      	ldrh	r3, [r3, #0]
   11fec:	9302      	str	r3, [sp, #8]
   11fee:	230c      	movs	r3, #12
   11ff0:	18fb      	adds	r3, r7, r3
   11ff2:	881b      	ldrh	r3, [r3, #0]
   11ff4:	9301      	str	r3, [sp, #4]
   11ff6:	68bb      	ldr	r3, [r7, #8]
   11ff8:	9300      	str	r3, [sp, #0]
   11ffa:	2310      	movs	r3, #16
   11ffc:	2002      	movs	r0, #2
   11ffe:	4c0e      	ldr	r4, [pc, #56]	; (12038 <send+0x160>)
   12000:	47a0      	blx	r4
   12002:	0003      	movs	r3, r0
   12004:	001a      	movs	r2, r3
   12006:	2326      	movs	r3, #38	; 0x26
   12008:	18fb      	adds	r3, r7, r3
   1200a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   1200c:	2326      	movs	r3, #38	; 0x26
   1200e:	18fb      	adds	r3, r7, r3
   12010:	2200      	movs	r2, #0
   12012:	5e9b      	ldrsh	r3, [r3, r2]
   12014:	2b00      	cmp	r3, #0
   12016:	d004      	beq.n	12022 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   12018:	2326      	movs	r3, #38	; 0x26
   1201a:	18fb      	adds	r3, r7, r3
   1201c:	220e      	movs	r2, #14
   1201e:	4252      	negs	r2, r2
   12020:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   12022:	2326      	movs	r3, #38	; 0x26
   12024:	18fb      	adds	r3, r7, r3
   12026:	2200      	movs	r2, #0
   12028:	5e9b      	ldrsh	r3, [r3, r2]
}
   1202a:	0018      	movs	r0, r3
   1202c:	46bd      	mov	sp, r7
   1202e:	b00b      	add	sp, #44	; 0x2c
   12030:	bd90      	pop	{r4, r7, pc}
   12032:	46c0      	nop			; (mov r8, r8)
   12034:	20005544 	.word	0x20005544
   12038:	0000d481 	.word	0x0000d481

0001203c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   1203c:	b590      	push	{r4, r7, lr}
   1203e:	b08d      	sub	sp, #52	; 0x34
   12040:	af04      	add	r7, sp, #16
   12042:	60b9      	str	r1, [r7, #8]
   12044:	0011      	movs	r1, r2
   12046:	607b      	str	r3, [r7, #4]
   12048:	230f      	movs	r3, #15
   1204a:	18fb      	adds	r3, r7, r3
   1204c:	1c02      	adds	r2, r0, #0
   1204e:	701a      	strb	r2, [r3, #0]
   12050:	230c      	movs	r3, #12
   12052:	18fb      	adds	r3, r7, r3
   12054:	1c0a      	adds	r2, r1, #0
   12056:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   12058:	231e      	movs	r3, #30
   1205a:	18fb      	adds	r3, r7, r3
   1205c:	2206      	movs	r2, #6
   1205e:	4252      	negs	r2, r2
   12060:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   12062:	230f      	movs	r3, #15
   12064:	18fb      	adds	r3, r7, r3
   12066:	781b      	ldrb	r3, [r3, #0]
   12068:	2b7f      	cmp	r3, #127	; 0x7f
   1206a:	d900      	bls.n	1206e <recv+0x32>
   1206c:	e099      	b.n	121a2 <recv+0x166>
   1206e:	68bb      	ldr	r3, [r7, #8]
   12070:	2b00      	cmp	r3, #0
   12072:	d100      	bne.n	12076 <recv+0x3a>
   12074:	e095      	b.n	121a2 <recv+0x166>
   12076:	230c      	movs	r3, #12
   12078:	18fb      	adds	r3, r7, r3
   1207a:	881b      	ldrh	r3, [r3, #0]
   1207c:	2b00      	cmp	r3, #0
   1207e:	d100      	bne.n	12082 <recv+0x46>
   12080:	e08f      	b.n	121a2 <recv+0x166>
   12082:	230f      	movs	r3, #15
   12084:	18fb      	adds	r3, r7, r3
   12086:	781b      	ldrb	r3, [r3, #0]
   12088:	b25b      	sxtb	r3, r3
   1208a:	4a4a      	ldr	r2, [pc, #296]	; (121b4 <recv+0x178>)
   1208c:	011b      	lsls	r3, r3, #4
   1208e:	18d3      	adds	r3, r2, r3
   12090:	330a      	adds	r3, #10
   12092:	781b      	ldrb	r3, [r3, #0]
   12094:	b2db      	uxtb	r3, r3
   12096:	2b01      	cmp	r3, #1
   12098:	d000      	beq.n	1209c <recv+0x60>
   1209a:	e082      	b.n	121a2 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   1209c:	231e      	movs	r3, #30
   1209e:	18fb      	adds	r3, r7, r3
   120a0:	2200      	movs	r2, #0
   120a2:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   120a4:	230f      	movs	r3, #15
   120a6:	18fb      	adds	r3, r7, r3
   120a8:	2200      	movs	r2, #0
   120aa:	569a      	ldrsb	r2, [r3, r2]
   120ac:	4b41      	ldr	r3, [pc, #260]	; (121b4 <recv+0x178>)
   120ae:	0112      	lsls	r2, r2, #4
   120b0:	68b9      	ldr	r1, [r7, #8]
   120b2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   120b4:	230f      	movs	r3, #15
   120b6:	18fb      	adds	r3, r7, r3
   120b8:	781b      	ldrb	r3, [r3, #0]
   120ba:	b25b      	sxtb	r3, r3
   120bc:	4a3d      	ldr	r2, [pc, #244]	; (121b4 <recv+0x178>)
   120be:	011b      	lsls	r3, r3, #4
   120c0:	18d3      	adds	r3, r2, r3
   120c2:	3304      	adds	r3, #4
   120c4:	220c      	movs	r2, #12
   120c6:	18ba      	adds	r2, r7, r2
   120c8:	8812      	ldrh	r2, [r2, #0]
   120ca:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   120cc:	230f      	movs	r3, #15
   120ce:	18fb      	adds	r3, r7, r3
   120d0:	781b      	ldrb	r3, [r3, #0]
   120d2:	b25b      	sxtb	r3, r3
   120d4:	4a37      	ldr	r2, [pc, #220]	; (121b4 <recv+0x178>)
   120d6:	011b      	lsls	r3, r3, #4
   120d8:	18d3      	adds	r3, r2, r3
   120da:	330c      	adds	r3, #12
   120dc:	781b      	ldrb	r3, [r3, #0]
   120de:	b2db      	uxtb	r3, r3
   120e0:	2b00      	cmp	r3, #0
   120e2:	d15e      	bne.n	121a2 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   120e4:	231d      	movs	r3, #29
   120e6:	18fb      	adds	r3, r7, r3
   120e8:	2246      	movs	r2, #70	; 0x46
   120ea:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   120ec:	230f      	movs	r3, #15
   120ee:	18fb      	adds	r3, r7, r3
   120f0:	781b      	ldrb	r3, [r3, #0]
   120f2:	b25b      	sxtb	r3, r3
   120f4:	4a2f      	ldr	r2, [pc, #188]	; (121b4 <recv+0x178>)
   120f6:	011b      	lsls	r3, r3, #4
   120f8:	18d3      	adds	r3, r2, r3
   120fa:	330c      	adds	r3, #12
   120fc:	2201      	movs	r2, #1
   120fe:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   12100:	230f      	movs	r3, #15
   12102:	18fb      	adds	r3, r7, r3
   12104:	781b      	ldrb	r3, [r3, #0]
   12106:	b25b      	sxtb	r3, r3
   12108:	4a2a      	ldr	r2, [pc, #168]	; (121b4 <recv+0x178>)
   1210a:	011b      	lsls	r3, r3, #4
   1210c:	18d3      	adds	r3, r2, r3
   1210e:	330b      	adds	r3, #11
   12110:	781b      	ldrb	r3, [r3, #0]
   12112:	b2db      	uxtb	r3, r3
   12114:	001a      	movs	r2, r3
   12116:	2301      	movs	r3, #1
   12118:	4013      	ands	r3, r2
   1211a:	d003      	beq.n	12124 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   1211c:	231d      	movs	r3, #29
   1211e:	18fb      	adds	r3, r7, r3
   12120:	224d      	movs	r2, #77	; 0x4d
   12122:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   12124:	687b      	ldr	r3, [r7, #4]
   12126:	2b00      	cmp	r3, #0
   12128:	d105      	bne.n	12136 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   1212a:	2314      	movs	r3, #20
   1212c:	18fb      	adds	r3, r7, r3
   1212e:	2201      	movs	r2, #1
   12130:	4252      	negs	r2, r2
   12132:	601a      	str	r2, [r3, #0]
   12134:	e003      	b.n	1213e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   12136:	2314      	movs	r3, #20
   12138:	18fb      	adds	r3, r7, r3
   1213a:	687a      	ldr	r2, [r7, #4]
   1213c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   1213e:	2314      	movs	r3, #20
   12140:	18fb      	adds	r3, r7, r3
   12142:	220f      	movs	r2, #15
   12144:	18ba      	adds	r2, r7, r2
   12146:	7812      	ldrb	r2, [r2, #0]
   12148:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   1214a:	230f      	movs	r3, #15
   1214c:	18fb      	adds	r3, r7, r3
   1214e:	781b      	ldrb	r3, [r3, #0]
   12150:	b25b      	sxtb	r3, r3
   12152:	4a18      	ldr	r2, [pc, #96]	; (121b4 <recv+0x178>)
   12154:	011b      	lsls	r3, r3, #4
   12156:	18d3      	adds	r3, r2, r3
   12158:	3306      	adds	r3, #6
   1215a:	881b      	ldrh	r3, [r3, #0]
   1215c:	b29a      	uxth	r2, r3
   1215e:	2314      	movs	r3, #20
   12160:	18fb      	adds	r3, r7, r3
   12162:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   12164:	2314      	movs	r3, #20
   12166:	18fa      	adds	r2, r7, r3
   12168:	231d      	movs	r3, #29
   1216a:	18fb      	adds	r3, r7, r3
   1216c:	7819      	ldrb	r1, [r3, #0]
   1216e:	2300      	movs	r3, #0
   12170:	9302      	str	r3, [sp, #8]
   12172:	2300      	movs	r3, #0
   12174:	9301      	str	r3, [sp, #4]
   12176:	2300      	movs	r3, #0
   12178:	9300      	str	r3, [sp, #0]
   1217a:	2308      	movs	r3, #8
   1217c:	2002      	movs	r0, #2
   1217e:	4c0e      	ldr	r4, [pc, #56]	; (121b8 <recv+0x17c>)
   12180:	47a0      	blx	r4
   12182:	0003      	movs	r3, r0
   12184:	001a      	movs	r2, r3
   12186:	231e      	movs	r3, #30
   12188:	18fb      	adds	r3, r7, r3
   1218a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   1218c:	231e      	movs	r3, #30
   1218e:	18fb      	adds	r3, r7, r3
   12190:	2200      	movs	r2, #0
   12192:	5e9b      	ldrsh	r3, [r3, r2]
   12194:	2b00      	cmp	r3, #0
   12196:	d004      	beq.n	121a2 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   12198:	231e      	movs	r3, #30
   1219a:	18fb      	adds	r3, r7, r3
   1219c:	220e      	movs	r2, #14
   1219e:	4252      	negs	r2, r2
   121a0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   121a2:	231e      	movs	r3, #30
   121a4:	18fb      	adds	r3, r7, r3
   121a6:	2200      	movs	r2, #0
   121a8:	5e9b      	ldrsh	r3, [r3, r2]
}
   121aa:	0018      	movs	r0, r3
   121ac:	46bd      	mov	sp, r7
   121ae:	b009      	add	sp, #36	; 0x24
   121b0:	bd90      	pop	{r4, r7, pc}
   121b2:	46c0      	nop			; (mov r8, r8)
   121b4:	20005544 	.word	0x20005544
   121b8:	0000d481 	.word	0x0000d481

000121bc <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   121bc:	b5b0      	push	{r4, r5, r7, lr}
   121be:	b088      	sub	sp, #32
   121c0:	af04      	add	r7, sp, #16
   121c2:	0002      	movs	r2, r0
   121c4:	1dfb      	adds	r3, r7, #7
   121c6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   121c8:	230f      	movs	r3, #15
   121ca:	18fb      	adds	r3, r7, r3
   121cc:	22fa      	movs	r2, #250	; 0xfa
   121ce:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   121d0:	4b43      	ldr	r3, [pc, #268]	; (122e0 <close+0x124>)
   121d2:	0018      	movs	r0, r3
   121d4:	4b43      	ldr	r3, [pc, #268]	; (122e4 <close+0x128>)
   121d6:	4798      	blx	r3
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	2200      	movs	r2, #0
   121dc:	569a      	ldrsb	r2, [r3, r2]
   121de:	4b42      	ldr	r3, [pc, #264]	; (122e8 <close+0x12c>)
   121e0:	0011      	movs	r1, r2
   121e2:	0018      	movs	r0, r3
   121e4:	4b3f      	ldr	r3, [pc, #252]	; (122e4 <close+0x128>)
   121e6:	4798      	blx	r3
   121e8:	4b40      	ldr	r3, [pc, #256]	; (122ec <close+0x130>)
   121ea:	0018      	movs	r0, r3
   121ec:	4b3d      	ldr	r3, [pc, #244]	; (122e4 <close+0x128>)
   121ee:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   121f0:	1dfb      	adds	r3, r7, #7
   121f2:	781b      	ldrb	r3, [r3, #0]
   121f4:	2b7f      	cmp	r3, #127	; 0x7f
   121f6:	d86a      	bhi.n	122ce <close+0x112>
   121f8:	1dfb      	adds	r3, r7, #7
   121fa:	781b      	ldrb	r3, [r3, #0]
   121fc:	b25b      	sxtb	r3, r3
   121fe:	4a3c      	ldr	r2, [pc, #240]	; (122f0 <close+0x134>)
   12200:	011b      	lsls	r3, r3, #4
   12202:	18d3      	adds	r3, r2, r3
   12204:	330a      	adds	r3, #10
   12206:	781b      	ldrb	r3, [r3, #0]
   12208:	b2db      	uxtb	r3, r3
   1220a:	2b01      	cmp	r3, #1
   1220c:	d15f      	bne.n	122ce <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   1220e:	230e      	movs	r3, #14
   12210:	18fb      	adds	r3, r7, r3
   12212:	2249      	movs	r2, #73	; 0x49
   12214:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   12216:	2308      	movs	r3, #8
   12218:	18fb      	adds	r3, r7, r3
   1221a:	1dfa      	adds	r2, r7, #7
   1221c:	7812      	ldrb	r2, [r2, #0]
   1221e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   12220:	1dfb      	adds	r3, r7, #7
   12222:	781b      	ldrb	r3, [r3, #0]
   12224:	b25b      	sxtb	r3, r3
   12226:	4a32      	ldr	r2, [pc, #200]	; (122f0 <close+0x134>)
   12228:	011b      	lsls	r3, r3, #4
   1222a:	18d3      	adds	r3, r2, r3
   1222c:	3306      	adds	r3, #6
   1222e:	881b      	ldrh	r3, [r3, #0]
   12230:	b29a      	uxth	r2, r3
   12232:	2308      	movs	r3, #8
   12234:	18fb      	adds	r3, r7, r3
   12236:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   12238:	1dfb      	adds	r3, r7, #7
   1223a:	781b      	ldrb	r3, [r3, #0]
   1223c:	b25b      	sxtb	r3, r3
   1223e:	4a2c      	ldr	r2, [pc, #176]	; (122f0 <close+0x134>)
   12240:	011b      	lsls	r3, r3, #4
   12242:	18d3      	adds	r3, r2, r3
   12244:	330a      	adds	r3, #10
   12246:	2200      	movs	r2, #0
   12248:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   1224a:	1dfb      	adds	r3, r7, #7
   1224c:	781b      	ldrb	r3, [r3, #0]
   1224e:	b25b      	sxtb	r3, r3
   12250:	4a27      	ldr	r2, [pc, #156]	; (122f0 <close+0x134>)
   12252:	011b      	lsls	r3, r3, #4
   12254:	18d3      	adds	r3, r2, r3
   12256:	3306      	adds	r3, #6
   12258:	2200      	movs	r2, #0
   1225a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1225c:	1dfb      	adds	r3, r7, #7
   1225e:	781b      	ldrb	r3, [r3, #0]
   12260:	b25b      	sxtb	r3, r3
   12262:	4a23      	ldr	r2, [pc, #140]	; (122f0 <close+0x134>)
   12264:	011b      	lsls	r3, r3, #4
   12266:	18d3      	adds	r3, r2, r3
   12268:	330b      	adds	r3, #11
   1226a:	781b      	ldrb	r3, [r3, #0]
   1226c:	b2db      	uxtb	r3, r3
   1226e:	001a      	movs	r2, r3
   12270:	2301      	movs	r3, #1
   12272:	4013      	ands	r3, r2
   12274:	d003      	beq.n	1227e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   12276:	230e      	movs	r3, #14
   12278:	18fb      	adds	r3, r7, r3
   1227a:	224e      	movs	r2, #78	; 0x4e
   1227c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   1227e:	230f      	movs	r3, #15
   12280:	18fc      	adds	r4, r7, r3
   12282:	2308      	movs	r3, #8
   12284:	18fa      	adds	r2, r7, r3
   12286:	230e      	movs	r3, #14
   12288:	18fb      	adds	r3, r7, r3
   1228a:	7819      	ldrb	r1, [r3, #0]
   1228c:	2300      	movs	r3, #0
   1228e:	9302      	str	r3, [sp, #8]
   12290:	2300      	movs	r3, #0
   12292:	9301      	str	r3, [sp, #4]
   12294:	2300      	movs	r3, #0
   12296:	9300      	str	r3, [sp, #0]
   12298:	2304      	movs	r3, #4
   1229a:	2002      	movs	r0, #2
   1229c:	4d15      	ldr	r5, [pc, #84]	; (122f4 <close+0x138>)
   1229e:	47a8      	blx	r5
   122a0:	0003      	movs	r3, r0
   122a2:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   122a4:	230f      	movs	r3, #15
   122a6:	18fb      	adds	r3, r7, r3
   122a8:	781b      	ldrb	r3, [r3, #0]
   122aa:	b25b      	sxtb	r3, r3
   122ac:	2b00      	cmp	r3, #0
   122ae:	d003      	beq.n	122b8 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   122b0:	230f      	movs	r3, #15
   122b2:	18fb      	adds	r3, r7, r3
   122b4:	22f7      	movs	r2, #247	; 0xf7
   122b6:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   122b8:	1dfb      	adds	r3, r7, #7
   122ba:	781b      	ldrb	r3, [r3, #0]
   122bc:	b25b      	sxtb	r3, r3
   122be:	011a      	lsls	r2, r3, #4
   122c0:	4b0b      	ldr	r3, [pc, #44]	; (122f0 <close+0x134>)
   122c2:	18d3      	adds	r3, r2, r3
   122c4:	2210      	movs	r2, #16
   122c6:	2100      	movs	r1, #0
   122c8:	0018      	movs	r0, r3
   122ca:	4b0b      	ldr	r3, [pc, #44]	; (122f8 <close+0x13c>)
   122cc:	4798      	blx	r3
	}
	return s8Ret;
   122ce:	230f      	movs	r3, #15
   122d0:	18fb      	adds	r3, r7, r3
   122d2:	781b      	ldrb	r3, [r3, #0]
   122d4:	b25b      	sxtb	r3, r3
}
   122d6:	0018      	movs	r0, r3
   122d8:	46bd      	mov	sp, r7
   122da:	b004      	add	sp, #16
   122dc:	bdb0      	pop	{r4, r5, r7, pc}
   122de:	46c0      	nop			; (mov r8, r8)
   122e0:	00025644 	.word	0x00025644
   122e4:	0000a4ed 	.word	0x0000a4ed
   122e8:	00025684 	.word	0x00025684
   122ec:	00025664 	.word	0x00025664
   122f0:	20005544 	.word	0x20005544
   122f4:	0000d481 	.word	0x0000d481
   122f8:	0000d221 	.word	0x0000d221

000122fc <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b086      	sub	sp, #24
   12300:	af00      	add	r7, sp, #0
   12302:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   12304:	2300      	movs	r3, #0
   12306:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   12308:	2317      	movs	r3, #23
   1230a:	18fb      	adds	r3, r7, r3
   1230c:	2200      	movs	r2, #0
   1230e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   12310:	2316      	movs	r3, #22
   12312:	18fb      	adds	r3, r7, r3
   12314:	2200      	movs	r2, #0
   12316:	701a      	strb	r2, [r3, #0]
   12318:	e060      	b.n	123dc <nmi_inet_addr+0xe0>
	{
		j = 0;
   1231a:	2315      	movs	r3, #21
   1231c:	18fb      	adds	r3, r7, r3
   1231e:	2200      	movs	r2, #0
   12320:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   12322:	2314      	movs	r3, #20
   12324:	18fb      	adds	r3, r7, r3
   12326:	687a      	ldr	r2, [r7, #4]
   12328:	7812      	ldrb	r2, [r2, #0]
   1232a:	701a      	strb	r2, [r3, #0]
			++j;
   1232c:	2315      	movs	r3, #21
   1232e:	18fb      	adds	r3, r7, r3
   12330:	2215      	movs	r2, #21
   12332:	18ba      	adds	r2, r7, r2
   12334:	7812      	ldrb	r2, [r2, #0]
   12336:	3201      	adds	r2, #1
   12338:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   1233a:	2315      	movs	r3, #21
   1233c:	18fb      	adds	r3, r7, r3
   1233e:	781b      	ldrb	r3, [r3, #0]
   12340:	2b04      	cmp	r3, #4
   12342:	d901      	bls.n	12348 <nmi_inet_addr+0x4c>
			{
				return 0;
   12344:	2300      	movs	r3, #0
   12346:	e057      	b.n	123f8 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   12348:	2314      	movs	r3, #20
   1234a:	18fb      	adds	r3, r7, r3
   1234c:	781b      	ldrb	r3, [r3, #0]
   1234e:	2b2e      	cmp	r3, #46	; 0x2e
   12350:	d004      	beq.n	1235c <nmi_inet_addr+0x60>
   12352:	2314      	movs	r3, #20
   12354:	18fb      	adds	r3, r7, r3
   12356:	781b      	ldrb	r3, [r3, #0]
   12358:	2b00      	cmp	r3, #0
   1235a:	d10d      	bne.n	12378 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   1235c:	2316      	movs	r3, #22
   1235e:	18fb      	adds	r3, r7, r3
   12360:	781b      	ldrb	r3, [r3, #0]
   12362:	220c      	movs	r2, #12
   12364:	18ba      	adds	r2, r7, r2
   12366:	2117      	movs	r1, #23
   12368:	1879      	adds	r1, r7, r1
   1236a:	7809      	ldrb	r1, [r1, #0]
   1236c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   1236e:	2317      	movs	r3, #23
   12370:	18fb      	adds	r3, r7, r3
   12372:	2200      	movs	r2, #0
   12374:	701a      	strb	r2, [r3, #0]
   12376:	e01d      	b.n	123b4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   12378:	2314      	movs	r3, #20
   1237a:	18fb      	adds	r3, r7, r3
   1237c:	781b      	ldrb	r3, [r3, #0]
   1237e:	2b2f      	cmp	r3, #47	; 0x2f
   12380:	d916      	bls.n	123b0 <nmi_inet_addr+0xb4>
   12382:	2314      	movs	r3, #20
   12384:	18fb      	adds	r3, r7, r3
   12386:	781b      	ldrb	r3, [r3, #0]
   12388:	2b39      	cmp	r3, #57	; 0x39
   1238a:	d811      	bhi.n	123b0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   1238c:	2317      	movs	r3, #23
   1238e:	18fb      	adds	r3, r7, r3
   12390:	781b      	ldrb	r3, [r3, #0]
   12392:	1c1a      	adds	r2, r3, #0
   12394:	0092      	lsls	r2, r2, #2
   12396:	18d3      	adds	r3, r2, r3
   12398:	18db      	adds	r3, r3, r3
   1239a:	b2da      	uxtb	r2, r3
   1239c:	2314      	movs	r3, #20
   1239e:	18fb      	adds	r3, r7, r3
   123a0:	781b      	ldrb	r3, [r3, #0]
   123a2:	18d3      	adds	r3, r2, r3
   123a4:	b2da      	uxtb	r2, r3
   123a6:	2317      	movs	r3, #23
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	3a30      	subs	r2, #48	; 0x30
   123ac:	701a      	strb	r2, [r3, #0]
   123ae:	e001      	b.n	123b4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   123b0:	2300      	movs	r3, #0
   123b2:	e021      	b.n	123f8 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   123b4:	687b      	ldr	r3, [r7, #4]
   123b6:	3301      	adds	r3, #1
   123b8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   123ba:	2314      	movs	r3, #20
   123bc:	18fb      	adds	r3, r7, r3
   123be:	781b      	ldrb	r3, [r3, #0]
   123c0:	2b2e      	cmp	r3, #46	; 0x2e
   123c2:	d004      	beq.n	123ce <nmi_inet_addr+0xd2>
   123c4:	2314      	movs	r3, #20
   123c6:	18fb      	adds	r3, r7, r3
   123c8:	781b      	ldrb	r3, [r3, #0]
   123ca:	2b00      	cmp	r3, #0
   123cc:	d1a9      	bne.n	12322 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   123ce:	2316      	movs	r3, #22
   123d0:	18fb      	adds	r3, r7, r3
   123d2:	2216      	movs	r2, #22
   123d4:	18ba      	adds	r2, r7, r2
   123d6:	7812      	ldrb	r2, [r2, #0]
   123d8:	3201      	adds	r2, #1
   123da:	701a      	strb	r2, [r3, #0]
   123dc:	2316      	movs	r3, #22
   123de:	18fb      	adds	r3, r7, r3
   123e0:	781b      	ldrb	r3, [r3, #0]
   123e2:	2b03      	cmp	r3, #3
   123e4:	d999      	bls.n	1231a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   123e6:	230c      	movs	r3, #12
   123e8:	18f9      	adds	r1, r7, r3
   123ea:	2310      	movs	r3, #16
   123ec:	18fb      	adds	r3, r7, r3
   123ee:	2204      	movs	r2, #4
   123f0:	0018      	movs	r0, r3
   123f2:	4b03      	ldr	r3, [pc, #12]	; (12400 <nmi_inet_addr+0x104>)
   123f4:	4798      	blx	r3
	return u32IP;
   123f6:	693b      	ldr	r3, [r7, #16]
}
   123f8:	0018      	movs	r0, r3
   123fa:	46bd      	mov	sp, r7
   123fc:	b006      	add	sp, #24
   123fe:	bd80      	pop	{r7, pc}
   12400:	0000d1e5 	.word	0x0000d1e5

00012404 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   12404:	b5b0      	push	{r4, r5, r7, lr}
   12406:	b088      	sub	sp, #32
   12408:	af04      	add	r7, sp, #16
   1240a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   1240c:	230f      	movs	r3, #15
   1240e:	18fb      	adds	r3, r7, r3
   12410:	22fa      	movs	r2, #250	; 0xfa
   12412:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   12414:	687b      	ldr	r3, [r7, #4]
   12416:	0018      	movs	r0, r3
   12418:	4b14      	ldr	r3, [pc, #80]	; (1246c <gethostbyname+0x68>)
   1241a:	4798      	blx	r3
   1241c:	0003      	movs	r3, r0
   1241e:	001a      	movs	r2, r3
   12420:	230e      	movs	r3, #14
   12422:	18fb      	adds	r3, r7, r3
   12424:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   12426:	230e      	movs	r3, #14
   12428:	18fb      	adds	r3, r7, r3
   1242a:	781b      	ldrb	r3, [r3, #0]
   1242c:	2b40      	cmp	r3, #64	; 0x40
   1242e:	d815      	bhi.n	1245c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   12430:	230e      	movs	r3, #14
   12432:	18fb      	adds	r3, r7, r3
   12434:	781b      	ldrb	r3, [r3, #0]
   12436:	b29b      	uxth	r3, r3
   12438:	3301      	adds	r3, #1
   1243a:	b299      	uxth	r1, r3
   1243c:	230f      	movs	r3, #15
   1243e:	18fc      	adds	r4, r7, r3
   12440:	687a      	ldr	r2, [r7, #4]
   12442:	2300      	movs	r3, #0
   12444:	9302      	str	r3, [sp, #8]
   12446:	2300      	movs	r3, #0
   12448:	9301      	str	r3, [sp, #4]
   1244a:	2300      	movs	r3, #0
   1244c:	9300      	str	r3, [sp, #0]
   1244e:	000b      	movs	r3, r1
   12450:	214a      	movs	r1, #74	; 0x4a
   12452:	2002      	movs	r0, #2
   12454:	4d06      	ldr	r5, [pc, #24]	; (12470 <gethostbyname+0x6c>)
   12456:	47a8      	blx	r5
   12458:	0003      	movs	r3, r0
   1245a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   1245c:	230f      	movs	r3, #15
   1245e:	18fb      	adds	r3, r7, r3
   12460:	781b      	ldrb	r3, [r3, #0]
   12462:	b25b      	sxtb	r3, r3
}
   12464:	0018      	movs	r0, r3
   12466:	46bd      	mov	sp, r7
   12468:	b004      	add	sp, #16
   1246a:	bdb0      	pop	{r4, r5, r7, pc}
   1246c:	0000d25f 	.word	0x0000d25f
   12470:	0000d481 	.word	0x0000d481

00012474 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   12474:	b580      	push	{r7, lr}
   12476:	b082      	sub	sp, #8
   12478:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   1247a:	003b      	movs	r3, r7
   1247c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   1247e:	687b      	ldr	r3, [r7, #4]
   12480:	22b9      	movs	r2, #185	; 0xb9
   12482:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   12484:	4b13      	ldr	r3, [pc, #76]	; (124d4 <spi_flash_enter_low_power_mode+0x60>)
   12486:	2100      	movs	r1, #0
   12488:	0018      	movs	r0, r3
   1248a:	4b13      	ldr	r3, [pc, #76]	; (124d8 <spi_flash_enter_low_power_mode+0x64>)
   1248c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   1248e:	687b      	ldr	r3, [r7, #4]
   12490:	781b      	ldrb	r3, [r3, #0]
   12492:	001a      	movs	r2, r3
   12494:	4b11      	ldr	r3, [pc, #68]	; (124dc <spi_flash_enter_low_power_mode+0x68>)
   12496:	0011      	movs	r1, r2
   12498:	0018      	movs	r0, r3
   1249a:	4b0f      	ldr	r3, [pc, #60]	; (124d8 <spi_flash_enter_low_power_mode+0x64>)
   1249c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   1249e:	4b10      	ldr	r3, [pc, #64]	; (124e0 <spi_flash_enter_low_power_mode+0x6c>)
   124a0:	2101      	movs	r1, #1
   124a2:	0018      	movs	r0, r3
   124a4:	4b0c      	ldr	r3, [pc, #48]	; (124d8 <spi_flash_enter_low_power_mode+0x64>)
   124a6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   124a8:	4b0e      	ldr	r3, [pc, #56]	; (124e4 <spi_flash_enter_low_power_mode+0x70>)
   124aa:	2100      	movs	r1, #0
   124ac:	0018      	movs	r0, r3
   124ae:	4b0a      	ldr	r3, [pc, #40]	; (124d8 <spi_flash_enter_low_power_mode+0x64>)
   124b0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   124b2:	4b0d      	ldr	r3, [pc, #52]	; (124e8 <spi_flash_enter_low_power_mode+0x74>)
   124b4:	2181      	movs	r1, #129	; 0x81
   124b6:	0018      	movs	r0, r3
   124b8:	4b07      	ldr	r3, [pc, #28]	; (124d8 <spi_flash_enter_low_power_mode+0x64>)
   124ba:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   124bc:	46c0      	nop			; (mov r8, r8)
   124be:	4b0b      	ldr	r3, [pc, #44]	; (124ec <spi_flash_enter_low_power_mode+0x78>)
   124c0:	0018      	movs	r0, r3
   124c2:	4b0b      	ldr	r3, [pc, #44]	; (124f0 <spi_flash_enter_low_power_mode+0x7c>)
   124c4:	4798      	blx	r3
   124c6:	0003      	movs	r3, r0
   124c8:	2b01      	cmp	r3, #1
   124ca:	d1f8      	bne.n	124be <spi_flash_enter_low_power_mode+0x4a>
}
   124cc:	46c0      	nop			; (mov r8, r8)
   124ce:	46bd      	mov	sp, r7
   124d0:	b002      	add	sp, #8
   124d2:	bd80      	pop	{r7, pc}
   124d4:	00010208 	.word	0x00010208
   124d8:	0000f2d5 	.word	0x0000f2d5
   124dc:	0001020c 	.word	0x0001020c
   124e0:	00010214 	.word	0x00010214
   124e4:	0001021c 	.word	0x0001021c
   124e8:	00010204 	.word	0x00010204
   124ec:	00010218 	.word	0x00010218
   124f0:	0000f291 	.word	0x0000f291

000124f4 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   124f4:	b580      	push	{r7, lr}
   124f6:	b082      	sub	sp, #8
   124f8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   124fa:	003b      	movs	r3, r7
   124fc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   124fe:	687b      	ldr	r3, [r7, #4]
   12500:	22ab      	movs	r2, #171	; 0xab
   12502:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   12504:	4b13      	ldr	r3, [pc, #76]	; (12554 <spi_flash_leave_low_power_mode+0x60>)
   12506:	2100      	movs	r1, #0
   12508:	0018      	movs	r0, r3
   1250a:	4b13      	ldr	r3, [pc, #76]	; (12558 <spi_flash_leave_low_power_mode+0x64>)
   1250c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   1250e:	687b      	ldr	r3, [r7, #4]
   12510:	781b      	ldrb	r3, [r3, #0]
   12512:	001a      	movs	r2, r3
   12514:	4b11      	ldr	r3, [pc, #68]	; (1255c <spi_flash_leave_low_power_mode+0x68>)
   12516:	0011      	movs	r1, r2
   12518:	0018      	movs	r0, r3
   1251a:	4b0f      	ldr	r3, [pc, #60]	; (12558 <spi_flash_leave_low_power_mode+0x64>)
   1251c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   1251e:	4b10      	ldr	r3, [pc, #64]	; (12560 <spi_flash_leave_low_power_mode+0x6c>)
   12520:	2101      	movs	r1, #1
   12522:	0018      	movs	r0, r3
   12524:	4b0c      	ldr	r3, [pc, #48]	; (12558 <spi_flash_leave_low_power_mode+0x64>)
   12526:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   12528:	4b0e      	ldr	r3, [pc, #56]	; (12564 <spi_flash_leave_low_power_mode+0x70>)
   1252a:	2100      	movs	r1, #0
   1252c:	0018      	movs	r0, r3
   1252e:	4b0a      	ldr	r3, [pc, #40]	; (12558 <spi_flash_leave_low_power_mode+0x64>)
   12530:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   12532:	4b0d      	ldr	r3, [pc, #52]	; (12568 <spi_flash_leave_low_power_mode+0x74>)
   12534:	2181      	movs	r1, #129	; 0x81
   12536:	0018      	movs	r0, r3
   12538:	4b07      	ldr	r3, [pc, #28]	; (12558 <spi_flash_leave_low_power_mode+0x64>)
   1253a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   1253c:	46c0      	nop			; (mov r8, r8)
   1253e:	4b0b      	ldr	r3, [pc, #44]	; (1256c <spi_flash_leave_low_power_mode+0x78>)
   12540:	0018      	movs	r0, r3
   12542:	4b0b      	ldr	r3, [pc, #44]	; (12570 <spi_flash_leave_low_power_mode+0x7c>)
   12544:	4798      	blx	r3
   12546:	0003      	movs	r3, r0
   12548:	2b01      	cmp	r3, #1
   1254a:	d1f8      	bne.n	1253e <spi_flash_leave_low_power_mode+0x4a>
}
   1254c:	46c0      	nop			; (mov r8, r8)
   1254e:	46bd      	mov	sp, r7
   12550:	b002      	add	sp, #8
   12552:	bd80      	pop	{r7, pc}
   12554:	00010208 	.word	0x00010208
   12558:	0000f2d5 	.word	0x0000f2d5
   1255c:	0001020c 	.word	0x0001020c
   12560:	00010214 	.word	0x00010214
   12564:	0001021c 	.word	0x0001021c
   12568:	00010204 	.word	0x00010204
   1256c:	00010218 	.word	0x00010218
   12570:	0000f291 	.word	0x0000f291

00012574 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   12574:	b590      	push	{r4, r7, lr}
   12576:	b085      	sub	sp, #20
   12578:	af00      	add	r7, sp, #0
   1257a:	0002      	movs	r2, r0
   1257c:	1dfb      	adds	r3, r7, #7
   1257e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   12580:	230f      	movs	r3, #15
   12582:	18fb      	adds	r3, r7, r3
   12584:	2200      	movs	r2, #0
   12586:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   12588:	4b24      	ldr	r3, [pc, #144]	; (1261c <spi_flash_enable+0xa8>)
   1258a:	4798      	blx	r3
   1258c:	0003      	movs	r3, r0
   1258e:	051b      	lsls	r3, r3, #20
   12590:	0d1b      	lsrs	r3, r3, #20
   12592:	4a23      	ldr	r2, [pc, #140]	; (12620 <spi_flash_enable+0xac>)
   12594:	4293      	cmp	r3, r2
   12596:	d938      	bls.n	1260a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   12598:	230f      	movs	r3, #15
   1259a:	18fc      	adds	r4, r7, r3
   1259c:	2308      	movs	r3, #8
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	4a20      	ldr	r2, [pc, #128]	; (12624 <spi_flash_enable+0xb0>)
   125a2:	0019      	movs	r1, r3
   125a4:	0010      	movs	r0, r2
   125a6:	4b20      	ldr	r3, [pc, #128]	; (12628 <spi_flash_enable+0xb4>)
   125a8:	4798      	blx	r3
   125aa:	0003      	movs	r3, r0
   125ac:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   125ae:	230f      	movs	r3, #15
   125b0:	18fb      	adds	r3, r7, r3
   125b2:	781b      	ldrb	r3, [r3, #0]
   125b4:	b25b      	sxtb	r3, r3
   125b6:	2b00      	cmp	r3, #0
   125b8:	d126      	bne.n	12608 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   125ba:	68bb      	ldr	r3, [r7, #8]
   125bc:	4a1b      	ldr	r2, [pc, #108]	; (1262c <spi_flash_enable+0xb8>)
   125be:	4013      	ands	r3, r2
   125c0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   125c2:	68bb      	ldr	r3, [r7, #8]
   125c4:	4a1a      	ldr	r2, [pc, #104]	; (12630 <spi_flash_enable+0xbc>)
   125c6:	4313      	orrs	r3, r2
   125c8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   125ca:	68bb      	ldr	r3, [r7, #8]
   125cc:	4a15      	ldr	r2, [pc, #84]	; (12624 <spi_flash_enable+0xb0>)
   125ce:	0019      	movs	r1, r3
   125d0:	0010      	movs	r0, r2
   125d2:	4b18      	ldr	r3, [pc, #96]	; (12634 <spi_flash_enable+0xc0>)
   125d4:	4798      	blx	r3
		if(enable) {
   125d6:	1dfb      	adds	r3, r7, #7
   125d8:	781b      	ldrb	r3, [r3, #0]
   125da:	2b00      	cmp	r3, #0
   125dc:	d002      	beq.n	125e4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   125de:	4b16      	ldr	r3, [pc, #88]	; (12638 <spi_flash_enable+0xc4>)
   125e0:	4798      	blx	r3
   125e2:	e001      	b.n	125e8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   125e4:	4b15      	ldr	r3, [pc, #84]	; (1263c <spi_flash_enable+0xc8>)
   125e6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   125e8:	68bb      	ldr	r3, [r7, #8]
   125ea:	4a10      	ldr	r2, [pc, #64]	; (1262c <spi_flash_enable+0xb8>)
   125ec:	4013      	ands	r3, r2
   125ee:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   125f0:	68bb      	ldr	r3, [r7, #8]
   125f2:	2280      	movs	r2, #128	; 0x80
   125f4:	0252      	lsls	r2, r2, #9
   125f6:	4313      	orrs	r3, r2
   125f8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   125fa:	68bb      	ldr	r3, [r7, #8]
   125fc:	4a09      	ldr	r2, [pc, #36]	; (12624 <spi_flash_enable+0xb0>)
   125fe:	0019      	movs	r1, r3
   12600:	0010      	movs	r0, r2
   12602:	4b0c      	ldr	r3, [pc, #48]	; (12634 <spi_flash_enable+0xc0>)
   12604:	4798      	blx	r3
   12606:	e000      	b.n	1260a <spi_flash_enable+0x96>
			goto ERR1;
   12608:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   1260a:	230f      	movs	r3, #15
   1260c:	18fb      	adds	r3, r7, r3
   1260e:	781b      	ldrb	r3, [r3, #0]
   12610:	b25b      	sxtb	r3, r3
}
   12612:	0018      	movs	r0, r3
   12614:	46bd      	mov	sp, r7
   12616:	b005      	add	sp, #20
   12618:	bd90      	pop	{r4, r7, pc}
   1261a:	46c0      	nop			; (mov r8, r8)
   1261c:	0000ebb1 	.word	0x0000ebb1
   12620:	0000039f 	.word	0x0000039f
   12624:	00001410 	.word	0x00001410
   12628:	0000f2b1 	.word	0x0000f2b1
   1262c:	f8888fff 	.word	0xf8888fff
   12630:	01111000 	.word	0x01111000
   12634:	0000f2d5 	.word	0x0000f2d5
   12638:	000124f5 	.word	0x000124f5
   1263c:	00012475 	.word	0x00012475

00012640 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   12640:	b580      	push	{r7, lr}
   12642:	b084      	sub	sp, #16
   12644:	af00      	add	r7, sp, #0
   12646:	0002      	movs	r2, r0
   12648:	1dfb      	adds	r3, r7, #7
   1264a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   1264c:	1dfb      	adds	r3, r7, #7
   1264e:	781b      	ldrb	r3, [r3, #0]
   12650:	2b00      	cmp	r3, #0
   12652:	d108      	bne.n	12666 <mem_test_unit_ready+0x26>
   12654:	1dfb      	adds	r3, r7, #7
   12656:	781a      	ldrb	r2, [r3, #0]
   12658:	4b08      	ldr	r3, [pc, #32]	; (1267c <mem_test_unit_ready+0x3c>)
   1265a:	0152      	lsls	r2, r2, #5
   1265c:	58d3      	ldr	r3, [r2, r3]
   1265e:	4798      	blx	r3
   12660:	0003      	movs	r3, r0
   12662:	001a      	movs	r2, r3
   12664:	e000      	b.n	12668 <mem_test_unit_ready+0x28>
   12666:	2201      	movs	r2, #1
  status =
   12668:	230f      	movs	r3, #15
   1266a:	18fb      	adds	r3, r7, r3
   1266c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   1266e:	230f      	movs	r3, #15
   12670:	18fb      	adds	r3, r7, r3
   12672:	781b      	ldrb	r3, [r3, #0]
}
   12674:	0018      	movs	r0, r3
   12676:	46bd      	mov	sp, r7
   12678:	b004      	add	sp, #16
   1267a:	bd80      	pop	{r7, pc}
   1267c:	00025710 	.word	0x00025710

00012680 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   12680:	b580      	push	{r7, lr}
   12682:	b084      	sub	sp, #16
   12684:	af00      	add	r7, sp, #0
   12686:	0002      	movs	r2, r0
   12688:	6039      	str	r1, [r7, #0]
   1268a:	1dfb      	adds	r3, r7, #7
   1268c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   1268e:	1dfb      	adds	r3, r7, #7
   12690:	781b      	ldrb	r3, [r3, #0]
   12692:	2b00      	cmp	r3, #0
   12694:	d10c      	bne.n	126b0 <mem_read_capacity+0x30>
   12696:	1dfb      	adds	r3, r7, #7
   12698:	781b      	ldrb	r3, [r3, #0]
   1269a:	4a0b      	ldr	r2, [pc, #44]	; (126c8 <mem_read_capacity+0x48>)
   1269c:	015b      	lsls	r3, r3, #5
   1269e:	18d3      	adds	r3, r2, r3
   126a0:	3304      	adds	r3, #4
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	683a      	ldr	r2, [r7, #0]
   126a6:	0010      	movs	r0, r2
   126a8:	4798      	blx	r3
   126aa:	0003      	movs	r3, r0
   126ac:	001a      	movs	r2, r3
   126ae:	e000      	b.n	126b2 <mem_read_capacity+0x32>
   126b0:	2201      	movs	r2, #1
  status =
   126b2:	230f      	movs	r3, #15
   126b4:	18fb      	adds	r3, r7, r3
   126b6:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   126b8:	230f      	movs	r3, #15
   126ba:	18fb      	adds	r3, r7, r3
   126bc:	781b      	ldrb	r3, [r3, #0]
}
   126be:	0018      	movs	r0, r3
   126c0:	46bd      	mov	sp, r7
   126c2:	b004      	add	sp, #16
   126c4:	bd80      	pop	{r7, pc}
   126c6:	46c0      	nop			; (mov r8, r8)
   126c8:	00025710 	.word	0x00025710

000126cc <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   126cc:	b580      	push	{r7, lr}
   126ce:	b084      	sub	sp, #16
   126d0:	af00      	add	r7, sp, #0
   126d2:	0002      	movs	r2, r0
   126d4:	1dfb      	adds	r3, r7, #7
   126d6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   126d8:	1dfb      	adds	r3, r7, #7
   126da:	781b      	ldrb	r3, [r3, #0]
   126dc:	425a      	negs	r2, r3
   126de:	4153      	adcs	r3, r2
   126e0:	b2da      	uxtb	r2, r3
  sector_size =
   126e2:	230f      	movs	r3, #15
   126e4:	18fb      	adds	r3, r7, r3
   126e6:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   126e8:	230f      	movs	r3, #15
   126ea:	18fb      	adds	r3, r7, r3
   126ec:	781b      	ldrb	r3, [r3, #0]
}
   126ee:	0018      	movs	r0, r3
   126f0:	46bd      	mov	sp, r7
   126f2:	b004      	add	sp, #16
   126f4:	bd80      	pop	{r7, pc}
	...

000126f8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   126f8:	b580      	push	{r7, lr}
   126fa:	b084      	sub	sp, #16
   126fc:	af00      	add	r7, sp, #0
   126fe:	0002      	movs	r2, r0
   12700:	1dfb      	adds	r3, r7, #7
   12702:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   12704:	1dfb      	adds	r3, r7, #7
   12706:	781b      	ldrb	r3, [r3, #0]
   12708:	2b00      	cmp	r3, #0
   1270a:	d109      	bne.n	12720 <mem_wr_protect+0x28>
   1270c:	1dfb      	adds	r3, r7, #7
   1270e:	781b      	ldrb	r3, [r3, #0]
   12710:	4a0a      	ldr	r2, [pc, #40]	; (1273c <mem_wr_protect+0x44>)
   12712:	015b      	lsls	r3, r3, #5
   12714:	18d3      	adds	r3, r2, r3
   12716:	330c      	adds	r3, #12
   12718:	681b      	ldr	r3, [r3, #0]
   1271a:	4798      	blx	r3
   1271c:	1e03      	subs	r3, r0, #0
   1271e:	d001      	beq.n	12724 <mem_wr_protect+0x2c>
   12720:	2201      	movs	r2, #1
   12722:	e000      	b.n	12726 <mem_wr_protect+0x2e>
   12724:	2200      	movs	r2, #0
  wr_protect =
   12726:	230f      	movs	r3, #15
   12728:	18fb      	adds	r3, r7, r3
   1272a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   1272c:	230f      	movs	r3, #15
   1272e:	18fb      	adds	r3, r7, r3
   12730:	781b      	ldrb	r3, [r3, #0]
}
   12732:	0018      	movs	r0, r3
   12734:	46bd      	mov	sp, r7
   12736:	b004      	add	sp, #16
   12738:	bd80      	pop	{r7, pc}
   1273a:	46c0      	nop			; (mov r8, r8)
   1273c:	00025710 	.word	0x00025710

00012740 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   12740:	b580      	push	{r7, lr}
   12742:	b086      	sub	sp, #24
   12744:	af00      	add	r7, sp, #0
   12746:	60b9      	str	r1, [r7, #8]
   12748:	607a      	str	r2, [r7, #4]
   1274a:	230f      	movs	r3, #15
   1274c:	18fb      	adds	r3, r7, r3
   1274e:	1c02      	adds	r2, r0, #0
   12750:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   12752:	230f      	movs	r3, #15
   12754:	18fb      	adds	r3, r7, r3
   12756:	781b      	ldrb	r3, [r3, #0]
   12758:	2b00      	cmp	r3, #0
   1275a:	d10e      	bne.n	1277a <memory_2_ram+0x3a>
   1275c:	230f      	movs	r3, #15
   1275e:	18fb      	adds	r3, r7, r3
   12760:	781b      	ldrb	r3, [r3, #0]
   12762:	4a0b      	ldr	r2, [pc, #44]	; (12790 <memory_2_ram+0x50>)
   12764:	015b      	lsls	r3, r3, #5
   12766:	18d3      	adds	r3, r2, r3
   12768:	3314      	adds	r3, #20
   1276a:	681b      	ldr	r3, [r3, #0]
   1276c:	6879      	ldr	r1, [r7, #4]
   1276e:	68ba      	ldr	r2, [r7, #8]
   12770:	0010      	movs	r0, r2
   12772:	4798      	blx	r3
   12774:	0003      	movs	r3, r0
   12776:	001a      	movs	r2, r3
   12778:	e000      	b.n	1277c <memory_2_ram+0x3c>
   1277a:	2201      	movs	r2, #1
  status =
   1277c:	2317      	movs	r3, #23
   1277e:	18fb      	adds	r3, r7, r3
   12780:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   12782:	2317      	movs	r3, #23
   12784:	18fb      	adds	r3, r7, r3
   12786:	781b      	ldrb	r3, [r3, #0]
}
   12788:	0018      	movs	r0, r3
   1278a:	46bd      	mov	sp, r7
   1278c:	b006      	add	sp, #24
   1278e:	bd80      	pop	{r7, pc}
   12790:	00025710 	.word	0x00025710

00012794 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   12794:	b580      	push	{r7, lr}
   12796:	b086      	sub	sp, #24
   12798:	af00      	add	r7, sp, #0
   1279a:	60b9      	str	r1, [r7, #8]
   1279c:	607a      	str	r2, [r7, #4]
   1279e:	230f      	movs	r3, #15
   127a0:	18fb      	adds	r3, r7, r3
   127a2:	1c02      	adds	r2, r0, #0
   127a4:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   127a6:	230f      	movs	r3, #15
   127a8:	18fb      	adds	r3, r7, r3
   127aa:	781b      	ldrb	r3, [r3, #0]
   127ac:	2b00      	cmp	r3, #0
   127ae:	d10e      	bne.n	127ce <ram_2_memory+0x3a>
   127b0:	230f      	movs	r3, #15
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	781b      	ldrb	r3, [r3, #0]
   127b6:	4a0b      	ldr	r2, [pc, #44]	; (127e4 <ram_2_memory+0x50>)
   127b8:	015b      	lsls	r3, r3, #5
   127ba:	18d3      	adds	r3, r2, r3
   127bc:	3318      	adds	r3, #24
   127be:	681b      	ldr	r3, [r3, #0]
   127c0:	6879      	ldr	r1, [r7, #4]
   127c2:	68ba      	ldr	r2, [r7, #8]
   127c4:	0010      	movs	r0, r2
   127c6:	4798      	blx	r3
   127c8:	0003      	movs	r3, r0
   127ca:	001a      	movs	r2, r3
   127cc:	e000      	b.n	127d0 <ram_2_memory+0x3c>
   127ce:	2201      	movs	r2, #1
  status =
   127d0:	2317      	movs	r3, #23
   127d2:	18fb      	adds	r3, r7, r3
   127d4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   127d6:	2317      	movs	r3, #23
   127d8:	18fb      	adds	r3, r7, r3
   127da:	781b      	ldrb	r3, [r3, #0]
}
   127dc:	0018      	movs	r0, r3
   127de:	46bd      	mov	sp, r7
   127e0:	b006      	add	sp, #24
   127e2:	bd80      	pop	{r7, pc}
   127e4:	00025710 	.word	0x00025710

000127e8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   127e8:	b580      	push	{r7, lr}
   127ea:	b082      	sub	sp, #8
   127ec:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   127ee:	4b10      	ldr	r3, [pc, #64]	; (12830 <cpu_irq_enter_critical+0x48>)
   127f0:	681b      	ldr	r3, [r3, #0]
   127f2:	2b00      	cmp	r3, #0
   127f4:	d112      	bne.n	1281c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   127f6:	f3ef 8310 	mrs	r3, PRIMASK
   127fa:	607b      	str	r3, [r7, #4]
  return(result);
   127fc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   127fe:	2b00      	cmp	r3, #0
   12800:	d109      	bne.n	12816 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   12802:	b672      	cpsid	i
   12804:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   12808:	4b0a      	ldr	r3, [pc, #40]	; (12834 <cpu_irq_enter_critical+0x4c>)
   1280a:	2200      	movs	r2, #0
   1280c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   1280e:	4b0a      	ldr	r3, [pc, #40]	; (12838 <cpu_irq_enter_critical+0x50>)
   12810:	2201      	movs	r2, #1
   12812:	701a      	strb	r2, [r3, #0]
   12814:	e002      	b.n	1281c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   12816:	4b08      	ldr	r3, [pc, #32]	; (12838 <cpu_irq_enter_critical+0x50>)
   12818:	2200      	movs	r2, #0
   1281a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   1281c:	4b04      	ldr	r3, [pc, #16]	; (12830 <cpu_irq_enter_critical+0x48>)
   1281e:	681b      	ldr	r3, [r3, #0]
   12820:	1c5a      	adds	r2, r3, #1
   12822:	4b03      	ldr	r3, [pc, #12]	; (12830 <cpu_irq_enter_critical+0x48>)
   12824:	601a      	str	r2, [r3, #0]
}
   12826:	46c0      	nop			; (mov r8, r8)
   12828:	46bd      	mov	sp, r7
   1282a:	b002      	add	sp, #8
   1282c:	bd80      	pop	{r7, pc}
   1282e:	46c0      	nop			; (mov r8, r8)
   12830:	20003d44 	.word	0x20003d44
   12834:	20000122 	.word	0x20000122
   12838:	20003d48 	.word	0x20003d48

0001283c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   1283c:	b580      	push	{r7, lr}
   1283e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   12840:	4b0b      	ldr	r3, [pc, #44]	; (12870 <cpu_irq_leave_critical+0x34>)
   12842:	681b      	ldr	r3, [r3, #0]
   12844:	1e5a      	subs	r2, r3, #1
   12846:	4b0a      	ldr	r3, [pc, #40]	; (12870 <cpu_irq_leave_critical+0x34>)
   12848:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   1284a:	4b09      	ldr	r3, [pc, #36]	; (12870 <cpu_irq_leave_critical+0x34>)
   1284c:	681b      	ldr	r3, [r3, #0]
   1284e:	2b00      	cmp	r3, #0
   12850:	d10a      	bne.n	12868 <cpu_irq_leave_critical+0x2c>
   12852:	4b08      	ldr	r3, [pc, #32]	; (12874 <cpu_irq_leave_critical+0x38>)
   12854:	781b      	ldrb	r3, [r3, #0]
   12856:	b2db      	uxtb	r3, r3
   12858:	2b00      	cmp	r3, #0
   1285a:	d005      	beq.n	12868 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   1285c:	4b06      	ldr	r3, [pc, #24]	; (12878 <cpu_irq_leave_critical+0x3c>)
   1285e:	2201      	movs	r2, #1
   12860:	701a      	strb	r2, [r3, #0]
   12862:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   12866:	b662      	cpsie	i
	}
}
   12868:	46c0      	nop			; (mov r8, r8)
   1286a:	46bd      	mov	sp, r7
   1286c:	bd80      	pop	{r7, pc}
   1286e:	46c0      	nop			; (mov r8, r8)
   12870:	20003d44 	.word	0x20003d44
   12874:	20003d48 	.word	0x20003d48
   12878:	20000122 	.word	0x20000122

0001287c <system_pinmux_get_group_from_gpio_pin>:
{
   1287c:	b580      	push	{r7, lr}
   1287e:	b084      	sub	sp, #16
   12880:	af00      	add	r7, sp, #0
   12882:	0002      	movs	r2, r0
   12884:	1dfb      	adds	r3, r7, #7
   12886:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   12888:	230f      	movs	r3, #15
   1288a:	18fb      	adds	r3, r7, r3
   1288c:	1dfa      	adds	r2, r7, #7
   1288e:	7812      	ldrb	r2, [r2, #0]
   12890:	09d2      	lsrs	r2, r2, #7
   12892:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   12894:	230e      	movs	r3, #14
   12896:	18fb      	adds	r3, r7, r3
   12898:	1dfa      	adds	r2, r7, #7
   1289a:	7812      	ldrb	r2, [r2, #0]
   1289c:	0952      	lsrs	r2, r2, #5
   1289e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   128a0:	4b0d      	ldr	r3, [pc, #52]	; (128d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   128a2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   128a4:	230f      	movs	r3, #15
   128a6:	18fb      	adds	r3, r7, r3
   128a8:	781b      	ldrb	r3, [r3, #0]
   128aa:	2b00      	cmp	r3, #0
   128ac:	d10f      	bne.n	128ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   128ae:	230f      	movs	r3, #15
   128b0:	18fb      	adds	r3, r7, r3
   128b2:	781b      	ldrb	r3, [r3, #0]
   128b4:	009b      	lsls	r3, r3, #2
   128b6:	2210      	movs	r2, #16
   128b8:	4694      	mov	ip, r2
   128ba:	44bc      	add	ip, r7
   128bc:	4463      	add	r3, ip
   128be:	3b08      	subs	r3, #8
   128c0:	681a      	ldr	r2, [r3, #0]
   128c2:	230e      	movs	r3, #14
   128c4:	18fb      	adds	r3, r7, r3
   128c6:	781b      	ldrb	r3, [r3, #0]
   128c8:	01db      	lsls	r3, r3, #7
   128ca:	18d3      	adds	r3, r2, r3
   128cc:	e000      	b.n	128d0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   128ce:	2300      	movs	r3, #0
}
   128d0:	0018      	movs	r0, r3
   128d2:	46bd      	mov	sp, r7
   128d4:	b004      	add	sp, #16
   128d6:	bd80      	pop	{r7, pc}
   128d8:	41004400 	.word	0x41004400

000128dc <port_get_group_from_gpio_pin>:
{
   128dc:	b580      	push	{r7, lr}
   128de:	b082      	sub	sp, #8
   128e0:	af00      	add	r7, sp, #0
   128e2:	0002      	movs	r2, r0
   128e4:	1dfb      	adds	r3, r7, #7
   128e6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   128e8:	1dfb      	adds	r3, r7, #7
   128ea:	781b      	ldrb	r3, [r3, #0]
   128ec:	0018      	movs	r0, r3
   128ee:	4b03      	ldr	r3, [pc, #12]	; (128fc <port_get_group_from_gpio_pin+0x20>)
   128f0:	4798      	blx	r3
   128f2:	0003      	movs	r3, r0
}
   128f4:	0018      	movs	r0, r3
   128f6:	46bd      	mov	sp, r7
   128f8:	b002      	add	sp, #8
   128fa:	bd80      	pop	{r7, pc}
   128fc:	0001287d 	.word	0x0001287d

00012900 <port_get_config_defaults>:
{
   12900:	b580      	push	{r7, lr}
   12902:	b082      	sub	sp, #8
   12904:	af00      	add	r7, sp, #0
   12906:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   12908:	687b      	ldr	r3, [r7, #4]
   1290a:	2200      	movs	r2, #0
   1290c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1290e:	687b      	ldr	r3, [r7, #4]
   12910:	2201      	movs	r2, #1
   12912:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   12914:	687b      	ldr	r3, [r7, #4]
   12916:	2200      	movs	r2, #0
   12918:	709a      	strb	r2, [r3, #2]
}
   1291a:	46c0      	nop			; (mov r8, r8)
   1291c:	46bd      	mov	sp, r7
   1291e:	b002      	add	sp, #8
   12920:	bd80      	pop	{r7, pc}
	...

00012924 <port_pin_set_output_level>:
{
   12924:	b580      	push	{r7, lr}
   12926:	b084      	sub	sp, #16
   12928:	af00      	add	r7, sp, #0
   1292a:	0002      	movs	r2, r0
   1292c:	1dfb      	adds	r3, r7, #7
   1292e:	701a      	strb	r2, [r3, #0]
   12930:	1dbb      	adds	r3, r7, #6
   12932:	1c0a      	adds	r2, r1, #0
   12934:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   12936:	1dfb      	adds	r3, r7, #7
   12938:	781b      	ldrb	r3, [r3, #0]
   1293a:	0018      	movs	r0, r3
   1293c:	4b0d      	ldr	r3, [pc, #52]	; (12974 <port_pin_set_output_level+0x50>)
   1293e:	4798      	blx	r3
   12940:	0003      	movs	r3, r0
   12942:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12944:	1dfb      	adds	r3, r7, #7
   12946:	781b      	ldrb	r3, [r3, #0]
   12948:	221f      	movs	r2, #31
   1294a:	4013      	ands	r3, r2
   1294c:	2201      	movs	r2, #1
   1294e:	409a      	lsls	r2, r3
   12950:	0013      	movs	r3, r2
   12952:	60bb      	str	r3, [r7, #8]
	if (level) {
   12954:	1dbb      	adds	r3, r7, #6
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	2b00      	cmp	r3, #0
   1295a:	d003      	beq.n	12964 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1295c:	68fb      	ldr	r3, [r7, #12]
   1295e:	68ba      	ldr	r2, [r7, #8]
   12960:	619a      	str	r2, [r3, #24]
}
   12962:	e002      	b.n	1296a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   12964:	68fb      	ldr	r3, [r7, #12]
   12966:	68ba      	ldr	r2, [r7, #8]
   12968:	615a      	str	r2, [r3, #20]
}
   1296a:	46c0      	nop			; (mov r8, r8)
   1296c:	46bd      	mov	sp, r7
   1296e:	b004      	add	sp, #16
   12970:	bd80      	pop	{r7, pc}
   12972:	46c0      	nop			; (mov r8, r8)
   12974:	000128dd 	.word	0x000128dd

00012978 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   12978:	b580      	push	{r7, lr}
   1297a:	b082      	sub	sp, #8
   1297c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1297e:	1d3b      	adds	r3, r7, #4
   12980:	0018      	movs	r0, r3
   12982:	4b0e      	ldr	r3, [pc, #56]	; (129bc <system_board_init+0x44>)
   12984:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   12986:	1d3b      	adds	r3, r7, #4
   12988:	2201      	movs	r2, #1
   1298a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   1298c:	1d3b      	adds	r3, r7, #4
   1298e:	0019      	movs	r1, r3
   12990:	2017      	movs	r0, #23
   12992:	4b0b      	ldr	r3, [pc, #44]	; (129c0 <system_board_init+0x48>)
   12994:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   12996:	2101      	movs	r1, #1
   12998:	2017      	movs	r0, #23
   1299a:	4b0a      	ldr	r3, [pc, #40]	; (129c4 <system_board_init+0x4c>)
   1299c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1299e:	1d3b      	adds	r3, r7, #4
   129a0:	2200      	movs	r2, #0
   129a2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   129a4:	1d3b      	adds	r3, r7, #4
   129a6:	2201      	movs	r2, #1
   129a8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   129aa:	1d3b      	adds	r3, r7, #4
   129ac:	0019      	movs	r1, r3
   129ae:	2037      	movs	r0, #55	; 0x37
   129b0:	4b03      	ldr	r3, [pc, #12]	; (129c0 <system_board_init+0x48>)
   129b2:	4798      	blx	r3
}
   129b4:	46c0      	nop			; (mov r8, r8)
   129b6:	46bd      	mov	sp, r7
   129b8:	b002      	add	sp, #8
   129ba:	bd80      	pop	{r7, pc}
   129bc:	00012901 	.word	0x00012901
   129c0:	00012fed 	.word	0x00012fed
   129c4:	00012925 	.word	0x00012925

000129c8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   129c8:	b580      	push	{r7, lr}
   129ca:	b084      	sub	sp, #16
   129cc:	af00      	add	r7, sp, #0
   129ce:	0002      	movs	r2, r0
   129d0:	1dfb      	adds	r3, r7, #7
   129d2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   129d4:	230f      	movs	r3, #15
   129d6:	18fb      	adds	r3, r7, r3
   129d8:	1dfa      	adds	r2, r7, #7
   129da:	7812      	ldrb	r2, [r2, #0]
   129dc:	0952      	lsrs	r2, r2, #5
   129de:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   129e0:	230f      	movs	r3, #15
   129e2:	18fb      	adds	r3, r7, r3
   129e4:	781b      	ldrb	r3, [r3, #0]
   129e6:	2b00      	cmp	r3, #0
   129e8:	d10c      	bne.n	12a04 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   129ea:	4b09      	ldr	r3, [pc, #36]	; (12a10 <_extint_get_eic_from_channel+0x48>)
   129ec:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   129ee:	230f      	movs	r3, #15
   129f0:	18fb      	adds	r3, r7, r3
   129f2:	781b      	ldrb	r3, [r3, #0]
   129f4:	009b      	lsls	r3, r3, #2
   129f6:	2210      	movs	r2, #16
   129f8:	4694      	mov	ip, r2
   129fa:	44bc      	add	ip, r7
   129fc:	4463      	add	r3, ip
   129fe:	3b08      	subs	r3, #8
   12a00:	681b      	ldr	r3, [r3, #0]
   12a02:	e000      	b.n	12a06 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   12a04:	2300      	movs	r3, #0
	}
}
   12a06:	0018      	movs	r0, r3
   12a08:	46bd      	mov	sp, r7
   12a0a:	b004      	add	sp, #16
   12a0c:	bd80      	pop	{r7, pc}
   12a0e:	46c0      	nop			; (mov r8, r8)
   12a10:	40001800 	.word	0x40001800

00012a14 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   12a14:	b580      	push	{r7, lr}
   12a16:	b084      	sub	sp, #16
   12a18:	af00      	add	r7, sp, #0
   12a1a:	0002      	movs	r2, r0
   12a1c:	1dfb      	adds	r3, r7, #7
   12a1e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   12a20:	1dfb      	adds	r3, r7, #7
   12a22:	781b      	ldrb	r3, [r3, #0]
   12a24:	0018      	movs	r0, r3
   12a26:	4b0b      	ldr	r3, [pc, #44]	; (12a54 <extint_chan_is_detected+0x40>)
   12a28:	4798      	blx	r3
   12a2a:	0003      	movs	r3, r0
   12a2c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   12a2e:	1dfb      	adds	r3, r7, #7
   12a30:	781b      	ldrb	r3, [r3, #0]
   12a32:	221f      	movs	r2, #31
   12a34:	4013      	ands	r3, r2
   12a36:	2201      	movs	r2, #1
   12a38:	409a      	lsls	r2, r3
   12a3a:	0013      	movs	r3, r2
   12a3c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   12a3e:	68fb      	ldr	r3, [r7, #12]
   12a40:	691b      	ldr	r3, [r3, #16]
   12a42:	68ba      	ldr	r2, [r7, #8]
   12a44:	4013      	ands	r3, r2
   12a46:	1e5a      	subs	r2, r3, #1
   12a48:	4193      	sbcs	r3, r2
   12a4a:	b2db      	uxtb	r3, r3
}
   12a4c:	0018      	movs	r0, r3
   12a4e:	46bd      	mov	sp, r7
   12a50:	b004      	add	sp, #16
   12a52:	bd80      	pop	{r7, pc}
   12a54:	000129c9 	.word	0x000129c9

00012a58 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   12a58:	b580      	push	{r7, lr}
   12a5a:	b084      	sub	sp, #16
   12a5c:	af00      	add	r7, sp, #0
   12a5e:	0002      	movs	r2, r0
   12a60:	1dfb      	adds	r3, r7, #7
   12a62:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   12a64:	1dfb      	adds	r3, r7, #7
   12a66:	781b      	ldrb	r3, [r3, #0]
   12a68:	0018      	movs	r0, r3
   12a6a:	4b09      	ldr	r3, [pc, #36]	; (12a90 <extint_chan_clear_detected+0x38>)
   12a6c:	4798      	blx	r3
   12a6e:	0003      	movs	r3, r0
   12a70:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   12a72:	1dfb      	adds	r3, r7, #7
   12a74:	781b      	ldrb	r3, [r3, #0]
   12a76:	221f      	movs	r2, #31
   12a78:	4013      	ands	r3, r2
   12a7a:	2201      	movs	r2, #1
   12a7c:	409a      	lsls	r2, r3
   12a7e:	0013      	movs	r3, r2
   12a80:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   12a82:	68fb      	ldr	r3, [r7, #12]
   12a84:	68ba      	ldr	r2, [r7, #8]
   12a86:	611a      	str	r2, [r3, #16]
}
   12a88:	46c0      	nop			; (mov r8, r8)
   12a8a:	46bd      	mov	sp, r7
   12a8c:	b004      	add	sp, #16
   12a8e:	bd80      	pop	{r7, pc}
   12a90:	000129c9 	.word	0x000129c9

00012a94 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   12a94:	b580      	push	{r7, lr}
   12a96:	b082      	sub	sp, #8
   12a98:	af00      	add	r7, sp, #0
   12a9a:	6078      	str	r0, [r7, #4]
   12a9c:	0008      	movs	r0, r1
   12a9e:	0011      	movs	r1, r2
   12aa0:	1cfb      	adds	r3, r7, #3
   12aa2:	1c02      	adds	r2, r0, #0
   12aa4:	701a      	strb	r2, [r3, #0]
   12aa6:	1cbb      	adds	r3, r7, #2
   12aa8:	1c0a      	adds	r2, r1, #0
   12aaa:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   12aac:	1cbb      	adds	r3, r7, #2
   12aae:	781b      	ldrb	r3, [r3, #0]
   12ab0:	2b00      	cmp	r3, #0
   12ab2:	d001      	beq.n	12ab8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   12ab4:	2317      	movs	r3, #23
   12ab6:	e019      	b.n	12aec <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   12ab8:	1cfb      	adds	r3, r7, #3
   12aba:	781a      	ldrb	r2, [r3, #0]
   12abc:	4b0d      	ldr	r3, [pc, #52]	; (12af4 <extint_register_callback+0x60>)
   12abe:	0092      	lsls	r2, r2, #2
   12ac0:	58d3      	ldr	r3, [r2, r3]
   12ac2:	2b00      	cmp	r3, #0
   12ac4:	d107      	bne.n	12ad6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   12ac6:	1cfb      	adds	r3, r7, #3
   12ac8:	781a      	ldrb	r2, [r3, #0]
   12aca:	4b0a      	ldr	r3, [pc, #40]	; (12af4 <extint_register_callback+0x60>)
   12acc:	0092      	lsls	r2, r2, #2
   12ace:	6879      	ldr	r1, [r7, #4]
   12ad0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   12ad2:	2300      	movs	r3, #0
   12ad4:	e00a      	b.n	12aec <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   12ad6:	1cfb      	adds	r3, r7, #3
   12ad8:	781a      	ldrb	r2, [r3, #0]
   12ada:	4b06      	ldr	r3, [pc, #24]	; (12af4 <extint_register_callback+0x60>)
   12adc:	0092      	lsls	r2, r2, #2
   12ade:	58d2      	ldr	r2, [r2, r3]
   12ae0:	687b      	ldr	r3, [r7, #4]
   12ae2:	429a      	cmp	r2, r3
   12ae4:	d101      	bne.n	12aea <extint_register_callback+0x56>
		return STATUS_OK;
   12ae6:	2300      	movs	r3, #0
   12ae8:	e000      	b.n	12aec <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   12aea:	231d      	movs	r3, #29
}
   12aec:	0018      	movs	r0, r3
   12aee:	46bd      	mov	sp, r7
   12af0:	b002      	add	sp, #8
   12af2:	bd80      	pop	{r7, pc}
   12af4:	20005604 	.word	0x20005604

00012af8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   12af8:	b580      	push	{r7, lr}
   12afa:	b084      	sub	sp, #16
   12afc:	af00      	add	r7, sp, #0
   12afe:	0002      	movs	r2, r0
   12b00:	1dfb      	adds	r3, r7, #7
   12b02:	701a      	strb	r2, [r3, #0]
   12b04:	1dbb      	adds	r3, r7, #6
   12b06:	1c0a      	adds	r2, r1, #0
   12b08:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   12b0a:	1dbb      	adds	r3, r7, #6
   12b0c:	781b      	ldrb	r3, [r3, #0]
   12b0e:	2b00      	cmp	r3, #0
   12b10:	d10e      	bne.n	12b30 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   12b12:	1dfb      	adds	r3, r7, #7
   12b14:	781b      	ldrb	r3, [r3, #0]
   12b16:	0018      	movs	r0, r3
   12b18:	4b08      	ldr	r3, [pc, #32]	; (12b3c <extint_chan_enable_callback+0x44>)
   12b1a:	4798      	blx	r3
   12b1c:	0003      	movs	r3, r0
   12b1e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   12b20:	1dfb      	adds	r3, r7, #7
   12b22:	781b      	ldrb	r3, [r3, #0]
   12b24:	2201      	movs	r2, #1
   12b26:	409a      	lsls	r2, r3
   12b28:	68fb      	ldr	r3, [r7, #12]
   12b2a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   12b2c:	2300      	movs	r3, #0
   12b2e:	e000      	b.n	12b32 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   12b30:	2317      	movs	r3, #23
}
   12b32:	0018      	movs	r0, r3
   12b34:	46bd      	mov	sp, r7
   12b36:	b004      	add	sp, #16
   12b38:	bd80      	pop	{r7, pc}
   12b3a:	46c0      	nop			; (mov r8, r8)
   12b3c:	000129c9 	.word	0x000129c9

00012b40 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   12b40:	b580      	push	{r7, lr}
   12b42:	b084      	sub	sp, #16
   12b44:	af00      	add	r7, sp, #0
   12b46:	0002      	movs	r2, r0
   12b48:	1dfb      	adds	r3, r7, #7
   12b4a:	701a      	strb	r2, [r3, #0]
   12b4c:	1dbb      	adds	r3, r7, #6
   12b4e:	1c0a      	adds	r2, r1, #0
   12b50:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   12b52:	1dbb      	adds	r3, r7, #6
   12b54:	781b      	ldrb	r3, [r3, #0]
   12b56:	2b00      	cmp	r3, #0
   12b58:	d10e      	bne.n	12b78 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   12b5a:	1dfb      	adds	r3, r7, #7
   12b5c:	781b      	ldrb	r3, [r3, #0]
   12b5e:	0018      	movs	r0, r3
   12b60:	4b08      	ldr	r3, [pc, #32]	; (12b84 <extint_chan_disable_callback+0x44>)
   12b62:	4798      	blx	r3
   12b64:	0003      	movs	r3, r0
   12b66:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   12b68:	1dfb      	adds	r3, r7, #7
   12b6a:	781b      	ldrb	r3, [r3, #0]
   12b6c:	2201      	movs	r2, #1
   12b6e:	409a      	lsls	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   12b74:	2300      	movs	r3, #0
   12b76:	e000      	b.n	12b7a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   12b78:	2317      	movs	r3, #23
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	000129c9 	.word	0x000129c9

00012b88 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   12b88:	b580      	push	{r7, lr}
   12b8a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   12b8c:	4b15      	ldr	r3, [pc, #84]	; (12be4 <EIC_Handler+0x5c>)
   12b8e:	2200      	movs	r2, #0
   12b90:	701a      	strb	r2, [r3, #0]
   12b92:	e020      	b.n	12bd6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   12b94:	4b13      	ldr	r3, [pc, #76]	; (12be4 <EIC_Handler+0x5c>)
   12b96:	781b      	ldrb	r3, [r3, #0]
   12b98:	0018      	movs	r0, r3
   12b9a:	4b13      	ldr	r3, [pc, #76]	; (12be8 <EIC_Handler+0x60>)
   12b9c:	4798      	blx	r3
   12b9e:	1e03      	subs	r3, r0, #0
   12ba0:	d013      	beq.n	12bca <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   12ba2:	4b10      	ldr	r3, [pc, #64]	; (12be4 <EIC_Handler+0x5c>)
   12ba4:	781b      	ldrb	r3, [r3, #0]
   12ba6:	0018      	movs	r0, r3
   12ba8:	4b10      	ldr	r3, [pc, #64]	; (12bec <EIC_Handler+0x64>)
   12baa:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   12bac:	4b0d      	ldr	r3, [pc, #52]	; (12be4 <EIC_Handler+0x5c>)
   12bae:	781b      	ldrb	r3, [r3, #0]
   12bb0:	001a      	movs	r2, r3
   12bb2:	4b0f      	ldr	r3, [pc, #60]	; (12bf0 <EIC_Handler+0x68>)
   12bb4:	0092      	lsls	r2, r2, #2
   12bb6:	58d3      	ldr	r3, [r2, r3]
   12bb8:	2b00      	cmp	r3, #0
   12bba:	d006      	beq.n	12bca <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   12bbc:	4b09      	ldr	r3, [pc, #36]	; (12be4 <EIC_Handler+0x5c>)
   12bbe:	781b      	ldrb	r3, [r3, #0]
   12bc0:	001a      	movs	r2, r3
   12bc2:	4b0b      	ldr	r3, [pc, #44]	; (12bf0 <EIC_Handler+0x68>)
   12bc4:	0092      	lsls	r2, r2, #2
   12bc6:	58d3      	ldr	r3, [r2, r3]
   12bc8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   12bca:	4b06      	ldr	r3, [pc, #24]	; (12be4 <EIC_Handler+0x5c>)
   12bcc:	781b      	ldrb	r3, [r3, #0]
   12bce:	3301      	adds	r3, #1
   12bd0:	b2da      	uxtb	r2, r3
   12bd2:	4b04      	ldr	r3, [pc, #16]	; (12be4 <EIC_Handler+0x5c>)
   12bd4:	701a      	strb	r2, [r3, #0]
   12bd6:	4b03      	ldr	r3, [pc, #12]	; (12be4 <EIC_Handler+0x5c>)
   12bd8:	781b      	ldrb	r3, [r3, #0]
   12bda:	2b0f      	cmp	r3, #15
   12bdc:	d9da      	bls.n	12b94 <EIC_Handler+0xc>
			}
		}
	}
}
   12bde:	46c0      	nop			; (mov r8, r8)
   12be0:	46bd      	mov	sp, r7
   12be2:	bd80      	pop	{r7, pc}
   12be4:	20005600 	.word	0x20005600
   12be8:	00012a15 	.word	0x00012a15
   12bec:	00012a59 	.word	0x00012a59
   12bf0:	20005604 	.word	0x20005604

00012bf4 <system_gclk_chan_get_config_defaults>:
{
   12bf4:	b580      	push	{r7, lr}
   12bf6:	b082      	sub	sp, #8
   12bf8:	af00      	add	r7, sp, #0
   12bfa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   12bfc:	687b      	ldr	r3, [r7, #4]
   12bfe:	2200      	movs	r2, #0
   12c00:	701a      	strb	r2, [r3, #0]
}
   12c02:	46c0      	nop			; (mov r8, r8)
   12c04:	46bd      	mov	sp, r7
   12c06:	b002      	add	sp, #8
   12c08:	bd80      	pop	{r7, pc}
	...

00012c0c <system_apb_clock_set_mask>:
{
   12c0c:	b580      	push	{r7, lr}
   12c0e:	b082      	sub	sp, #8
   12c10:	af00      	add	r7, sp, #0
   12c12:	0002      	movs	r2, r0
   12c14:	6039      	str	r1, [r7, #0]
   12c16:	1dfb      	adds	r3, r7, #7
   12c18:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12c1a:	1dfb      	adds	r3, r7, #7
   12c1c:	781b      	ldrb	r3, [r3, #0]
   12c1e:	2b01      	cmp	r3, #1
   12c20:	d00a      	beq.n	12c38 <system_apb_clock_set_mask+0x2c>
   12c22:	2b02      	cmp	r3, #2
   12c24:	d00f      	beq.n	12c46 <system_apb_clock_set_mask+0x3a>
   12c26:	2b00      	cmp	r3, #0
   12c28:	d114      	bne.n	12c54 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   12c2a:	4b0e      	ldr	r3, [pc, #56]	; (12c64 <system_apb_clock_set_mask+0x58>)
   12c2c:	4a0d      	ldr	r2, [pc, #52]	; (12c64 <system_apb_clock_set_mask+0x58>)
   12c2e:	6991      	ldr	r1, [r2, #24]
   12c30:	683a      	ldr	r2, [r7, #0]
   12c32:	430a      	orrs	r2, r1
   12c34:	619a      	str	r2, [r3, #24]
			break;
   12c36:	e00f      	b.n	12c58 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   12c38:	4b0a      	ldr	r3, [pc, #40]	; (12c64 <system_apb_clock_set_mask+0x58>)
   12c3a:	4a0a      	ldr	r2, [pc, #40]	; (12c64 <system_apb_clock_set_mask+0x58>)
   12c3c:	69d1      	ldr	r1, [r2, #28]
   12c3e:	683a      	ldr	r2, [r7, #0]
   12c40:	430a      	orrs	r2, r1
   12c42:	61da      	str	r2, [r3, #28]
			break;
   12c44:	e008      	b.n	12c58 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   12c46:	4b07      	ldr	r3, [pc, #28]	; (12c64 <system_apb_clock_set_mask+0x58>)
   12c48:	4a06      	ldr	r2, [pc, #24]	; (12c64 <system_apb_clock_set_mask+0x58>)
   12c4a:	6a11      	ldr	r1, [r2, #32]
   12c4c:	683a      	ldr	r2, [r7, #0]
   12c4e:	430a      	orrs	r2, r1
   12c50:	621a      	str	r2, [r3, #32]
			break;
   12c52:	e001      	b.n	12c58 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   12c54:	2317      	movs	r3, #23
   12c56:	e000      	b.n	12c5a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   12c58:	2300      	movs	r3, #0
}
   12c5a:	0018      	movs	r0, r3
   12c5c:	46bd      	mov	sp, r7
   12c5e:	b002      	add	sp, #8
   12c60:	bd80      	pop	{r7, pc}
   12c62:	46c0      	nop			; (mov r8, r8)
   12c64:	40000400 	.word	0x40000400

00012c68 <system_pinmux_get_config_defaults>:
{
   12c68:	b580      	push	{r7, lr}
   12c6a:	b082      	sub	sp, #8
   12c6c:	af00      	add	r7, sp, #0
   12c6e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12c70:	687b      	ldr	r3, [r7, #4]
   12c72:	2280      	movs	r2, #128	; 0x80
   12c74:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12c76:	687b      	ldr	r3, [r7, #4]
   12c78:	2200      	movs	r2, #0
   12c7a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12c7c:	687b      	ldr	r3, [r7, #4]
   12c7e:	2201      	movs	r2, #1
   12c80:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   12c82:	687b      	ldr	r3, [r7, #4]
   12c84:	2200      	movs	r2, #0
   12c86:	70da      	strb	r2, [r3, #3]
}
   12c88:	46c0      	nop			; (mov r8, r8)
   12c8a:	46bd      	mov	sp, r7
   12c8c:	b002      	add	sp, #8
   12c8e:	bd80      	pop	{r7, pc}

00012c90 <system_interrupt_enable>:
{
   12c90:	b580      	push	{r7, lr}
   12c92:	b082      	sub	sp, #8
   12c94:	af00      	add	r7, sp, #0
   12c96:	0002      	movs	r2, r0
   12c98:	1dfb      	adds	r3, r7, #7
   12c9a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12c9c:	4b06      	ldr	r3, [pc, #24]	; (12cb8 <system_interrupt_enable+0x28>)
   12c9e:	1dfa      	adds	r2, r7, #7
   12ca0:	7812      	ldrb	r2, [r2, #0]
   12ca2:	0011      	movs	r1, r2
   12ca4:	221f      	movs	r2, #31
   12ca6:	400a      	ands	r2, r1
   12ca8:	2101      	movs	r1, #1
   12caa:	4091      	lsls	r1, r2
   12cac:	000a      	movs	r2, r1
   12cae:	601a      	str	r2, [r3, #0]
}
   12cb0:	46c0      	nop			; (mov r8, r8)
   12cb2:	46bd      	mov	sp, r7
   12cb4:	b002      	add	sp, #8
   12cb6:	bd80      	pop	{r7, pc}
   12cb8:	e000e100 	.word	0xe000e100

00012cbc <_extint_get_eic_from_channel>:
{
   12cbc:	b580      	push	{r7, lr}
   12cbe:	b084      	sub	sp, #16
   12cc0:	af00      	add	r7, sp, #0
   12cc2:	0002      	movs	r2, r0
   12cc4:	1dfb      	adds	r3, r7, #7
   12cc6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   12cc8:	230f      	movs	r3, #15
   12cca:	18fb      	adds	r3, r7, r3
   12ccc:	1dfa      	adds	r2, r7, #7
   12cce:	7812      	ldrb	r2, [r2, #0]
   12cd0:	0952      	lsrs	r2, r2, #5
   12cd2:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   12cd4:	230f      	movs	r3, #15
   12cd6:	18fb      	adds	r3, r7, r3
   12cd8:	781b      	ldrb	r3, [r3, #0]
   12cda:	2b00      	cmp	r3, #0
   12cdc:	d10c      	bne.n	12cf8 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12cde:	4b09      	ldr	r3, [pc, #36]	; (12d04 <_extint_get_eic_from_channel+0x48>)
   12ce0:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   12ce2:	230f      	movs	r3, #15
   12ce4:	18fb      	adds	r3, r7, r3
   12ce6:	781b      	ldrb	r3, [r3, #0]
   12ce8:	009b      	lsls	r3, r3, #2
   12cea:	2210      	movs	r2, #16
   12cec:	4694      	mov	ip, r2
   12cee:	44bc      	add	ip, r7
   12cf0:	4463      	add	r3, ip
   12cf2:	3b08      	subs	r3, #8
   12cf4:	681b      	ldr	r3, [r3, #0]
   12cf6:	e000      	b.n	12cfa <_extint_get_eic_from_channel+0x3e>
		return NULL;
   12cf8:	2300      	movs	r3, #0
}
   12cfa:	0018      	movs	r0, r3
   12cfc:	46bd      	mov	sp, r7
   12cfe:	b004      	add	sp, #16
   12d00:	bd80      	pop	{r7, pc}
   12d02:	46c0      	nop			; (mov r8, r8)
   12d04:	40001800 	.word	0x40001800

00012d08 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   12d08:	b580      	push	{r7, lr}
   12d0a:	b082      	sub	sp, #8
   12d0c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12d0e:	4b0f      	ldr	r3, [pc, #60]	; (12d4c <extint_is_syncing+0x44>)
   12d10:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12d12:	2300      	movs	r3, #0
   12d14:	607b      	str	r3, [r7, #4]
   12d16:	e011      	b.n	12d3c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   12d18:	687b      	ldr	r3, [r7, #4]
   12d1a:	009b      	lsls	r3, r3, #2
   12d1c:	2208      	movs	r2, #8
   12d1e:	4694      	mov	ip, r2
   12d20:	44bc      	add	ip, r7
   12d22:	4463      	add	r3, ip
   12d24:	3b08      	subs	r3, #8
   12d26:	681b      	ldr	r3, [r3, #0]
   12d28:	785b      	ldrb	r3, [r3, #1]
   12d2a:	b2db      	uxtb	r3, r3
   12d2c:	b25b      	sxtb	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	da01      	bge.n	12d36 <extint_is_syncing+0x2e>
			return true;
   12d32:	2301      	movs	r3, #1
   12d34:	e006      	b.n	12d44 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12d36:	687b      	ldr	r3, [r7, #4]
   12d38:	3301      	adds	r3, #1
   12d3a:	607b      	str	r3, [r7, #4]
   12d3c:	687b      	ldr	r3, [r7, #4]
   12d3e:	2b00      	cmp	r3, #0
   12d40:	d0ea      	beq.n	12d18 <extint_is_syncing+0x10>
		}
	}
	return false;
   12d42:	2300      	movs	r3, #0
}
   12d44:	0018      	movs	r0, r3
   12d46:	46bd      	mov	sp, r7
   12d48:	b002      	add	sp, #8
   12d4a:	bd80      	pop	{r7, pc}
   12d4c:	40001800 	.word	0x40001800

00012d50 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   12d50:	b580      	push	{r7, lr}
   12d52:	b084      	sub	sp, #16
   12d54:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12d56:	4b2d      	ldr	r3, [pc, #180]	; (12e0c <_system_extint_init+0xbc>)
   12d58:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   12d5a:	2140      	movs	r1, #64	; 0x40
   12d5c:	2000      	movs	r0, #0
   12d5e:	4b2c      	ldr	r3, [pc, #176]	; (12e10 <_system_extint_init+0xc0>)
   12d60:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12d62:	003b      	movs	r3, r7
   12d64:	0018      	movs	r0, r3
   12d66:	4b2b      	ldr	r3, [pc, #172]	; (12e14 <_system_extint_init+0xc4>)
   12d68:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   12d6a:	003b      	movs	r3, r7
   12d6c:	2200      	movs	r2, #0
   12d6e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   12d70:	003b      	movs	r3, r7
   12d72:	0019      	movs	r1, r3
   12d74:	2005      	movs	r0, #5
   12d76:	4b28      	ldr	r3, [pc, #160]	; (12e18 <_system_extint_init+0xc8>)
   12d78:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   12d7a:	2005      	movs	r0, #5
   12d7c:	4b27      	ldr	r3, [pc, #156]	; (12e1c <_system_extint_init+0xcc>)
   12d7e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12d80:	2300      	movs	r3, #0
   12d82:	60fb      	str	r3, [r7, #12]
   12d84:	e018      	b.n	12db8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   12d86:	68fb      	ldr	r3, [r7, #12]
   12d88:	009b      	lsls	r3, r3, #2
   12d8a:	2210      	movs	r2, #16
   12d8c:	4694      	mov	ip, r2
   12d8e:	44bc      	add	ip, r7
   12d90:	4463      	add	r3, ip
   12d92:	3b0c      	subs	r3, #12
   12d94:	681a      	ldr	r2, [r3, #0]
   12d96:	68fb      	ldr	r3, [r7, #12]
   12d98:	009b      	lsls	r3, r3, #2
   12d9a:	2110      	movs	r1, #16
   12d9c:	468c      	mov	ip, r1
   12d9e:	44bc      	add	ip, r7
   12da0:	4463      	add	r3, ip
   12da2:	3b0c      	subs	r3, #12
   12da4:	681b      	ldr	r3, [r3, #0]
   12da6:	781b      	ldrb	r3, [r3, #0]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2101      	movs	r1, #1
   12dac:	430b      	orrs	r3, r1
   12dae:	b2db      	uxtb	r3, r3
   12db0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12db2:	68fb      	ldr	r3, [r7, #12]
   12db4:	3301      	adds	r3, #1
   12db6:	60fb      	str	r3, [r7, #12]
   12db8:	68fb      	ldr	r3, [r7, #12]
   12dba:	2b00      	cmp	r3, #0
   12dbc:	d0e3      	beq.n	12d86 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   12dbe:	46c0      	nop			; (mov r8, r8)
   12dc0:	4b17      	ldr	r3, [pc, #92]	; (12e20 <_system_extint_init+0xd0>)
   12dc2:	4798      	blx	r3
   12dc4:	1e03      	subs	r3, r0, #0
   12dc6:	d1fb      	bne.n	12dc0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   12dc8:	230b      	movs	r3, #11
   12dca:	18fb      	adds	r3, r7, r3
   12dcc:	2200      	movs	r2, #0
   12dce:	701a      	strb	r2, [r3, #0]
   12dd0:	e00d      	b.n	12dee <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   12dd2:	230b      	movs	r3, #11
   12dd4:	18fb      	adds	r3, r7, r3
   12dd6:	781a      	ldrb	r2, [r3, #0]
   12dd8:	4b12      	ldr	r3, [pc, #72]	; (12e24 <_system_extint_init+0xd4>)
   12dda:	0092      	lsls	r2, r2, #2
   12ddc:	2100      	movs	r1, #0
   12dde:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   12de0:	230b      	movs	r3, #11
   12de2:	18fb      	adds	r3, r7, r3
   12de4:	781a      	ldrb	r2, [r3, #0]
   12de6:	230b      	movs	r3, #11
   12de8:	18fb      	adds	r3, r7, r3
   12dea:	3201      	adds	r2, #1
   12dec:	701a      	strb	r2, [r3, #0]
   12dee:	230b      	movs	r3, #11
   12df0:	18fb      	adds	r3, r7, r3
   12df2:	781b      	ldrb	r3, [r3, #0]
   12df4:	2b0f      	cmp	r3, #15
   12df6:	d9ec      	bls.n	12dd2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   12df8:	2004      	movs	r0, #4
   12dfa:	4b0b      	ldr	r3, [pc, #44]	; (12e28 <_system_extint_init+0xd8>)
   12dfc:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   12dfe:	4b0b      	ldr	r3, [pc, #44]	; (12e2c <_system_extint_init+0xdc>)
   12e00:	4798      	blx	r3
}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	46bd      	mov	sp, r7
   12e06:	b004      	add	sp, #16
   12e08:	bd80      	pop	{r7, pc}
   12e0a:	46c0      	nop			; (mov r8, r8)
   12e0c:	40001800 	.word	0x40001800
   12e10:	00012c0d 	.word	0x00012c0d
   12e14:	00012bf5 	.word	0x00012bf5
   12e18:	0001647d 	.word	0x0001647d
   12e1c:	000164c1 	.word	0x000164c1
   12e20:	00012d09 	.word	0x00012d09
   12e24:	20005604 	.word	0x20005604
   12e28:	00012c91 	.word	0x00012c91
   12e2c:	00012e31 	.word	0x00012e31

00012e30 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   12e30:	b580      	push	{r7, lr}
   12e32:	b082      	sub	sp, #8
   12e34:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12e36:	4b15      	ldr	r3, [pc, #84]	; (12e8c <_extint_enable+0x5c>)
   12e38:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12e3a:	2300      	movs	r3, #0
   12e3c:	607b      	str	r3, [r7, #4]
   12e3e:	e018      	b.n	12e72 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   12e40:	687b      	ldr	r3, [r7, #4]
   12e42:	009b      	lsls	r3, r3, #2
   12e44:	2208      	movs	r2, #8
   12e46:	4694      	mov	ip, r2
   12e48:	44bc      	add	ip, r7
   12e4a:	4463      	add	r3, ip
   12e4c:	3b08      	subs	r3, #8
   12e4e:	681a      	ldr	r2, [r3, #0]
   12e50:	687b      	ldr	r3, [r7, #4]
   12e52:	009b      	lsls	r3, r3, #2
   12e54:	2108      	movs	r1, #8
   12e56:	468c      	mov	ip, r1
   12e58:	44bc      	add	ip, r7
   12e5a:	4463      	add	r3, ip
   12e5c:	3b08      	subs	r3, #8
   12e5e:	681b      	ldr	r3, [r3, #0]
   12e60:	781b      	ldrb	r3, [r3, #0]
   12e62:	b2db      	uxtb	r3, r3
   12e64:	2102      	movs	r1, #2
   12e66:	430b      	orrs	r3, r1
   12e68:	b2db      	uxtb	r3, r3
   12e6a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12e6c:	687b      	ldr	r3, [r7, #4]
   12e6e:	3301      	adds	r3, #1
   12e70:	607b      	str	r3, [r7, #4]
   12e72:	687b      	ldr	r3, [r7, #4]
   12e74:	2b00      	cmp	r3, #0
   12e76:	d0e3      	beq.n	12e40 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   12e78:	46c0      	nop			; (mov r8, r8)
   12e7a:	4b05      	ldr	r3, [pc, #20]	; (12e90 <_extint_enable+0x60>)
   12e7c:	4798      	blx	r3
   12e7e:	1e03      	subs	r3, r0, #0
   12e80:	d1fb      	bne.n	12e7a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   12e82:	46c0      	nop			; (mov r8, r8)
   12e84:	46bd      	mov	sp, r7
   12e86:	b002      	add	sp, #8
   12e88:	bd80      	pop	{r7, pc}
   12e8a:	46c0      	nop			; (mov r8, r8)
   12e8c:	40001800 	.word	0x40001800
   12e90:	00012d09 	.word	0x00012d09

00012e94 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   12e94:	b580      	push	{r7, lr}
   12e96:	b082      	sub	sp, #8
   12e98:	af00      	add	r7, sp, #0
   12e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   12e9c:	687b      	ldr	r3, [r7, #4]
   12e9e:	2200      	movs	r2, #0
   12ea0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   12ea2:	687b      	ldr	r3, [r7, #4]
   12ea4:	2200      	movs	r2, #0
   12ea6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   12ea8:	687b      	ldr	r3, [r7, #4]
   12eaa:	2201      	movs	r2, #1
   12eac:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   12eae:	687b      	ldr	r3, [r7, #4]
   12eb0:	2201      	movs	r2, #1
   12eb2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   12eb4:	687b      	ldr	r3, [r7, #4]
   12eb6:	2200      	movs	r2, #0
   12eb8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   12eba:	687b      	ldr	r3, [r7, #4]
   12ebc:	2202      	movs	r2, #2
   12ebe:	72da      	strb	r2, [r3, #11]
}
   12ec0:	46c0      	nop			; (mov r8, r8)
   12ec2:	46bd      	mov	sp, r7
   12ec4:	b002      	add	sp, #8
   12ec6:	bd80      	pop	{r7, pc}

00012ec8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   12ec8:	b580      	push	{r7, lr}
   12eca:	b086      	sub	sp, #24
   12ecc:	af00      	add	r7, sp, #0
   12ece:	0002      	movs	r2, r0
   12ed0:	6039      	str	r1, [r7, #0]
   12ed2:	1dfb      	adds	r3, r7, #7
   12ed4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   12ed6:	2308      	movs	r3, #8
   12ed8:	18fb      	adds	r3, r7, r3
   12eda:	0018      	movs	r0, r3
   12edc:	4b36      	ldr	r3, [pc, #216]	; (12fb8 <extint_chan_set_config+0xf0>)
   12ede:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   12ee0:	683b      	ldr	r3, [r7, #0]
   12ee2:	685b      	ldr	r3, [r3, #4]
   12ee4:	b2da      	uxtb	r2, r3
   12ee6:	2308      	movs	r3, #8
   12ee8:	18fb      	adds	r3, r7, r3
   12eea:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12eec:	2308      	movs	r3, #8
   12eee:	18fb      	adds	r3, r7, r3
   12ef0:	2200      	movs	r2, #0
   12ef2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   12ef4:	683b      	ldr	r3, [r7, #0]
   12ef6:	7a1a      	ldrb	r2, [r3, #8]
   12ef8:	2308      	movs	r3, #8
   12efa:	18fb      	adds	r3, r7, r3
   12efc:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   12efe:	683b      	ldr	r3, [r7, #0]
   12f00:	681b      	ldr	r3, [r3, #0]
   12f02:	b2db      	uxtb	r3, r3
   12f04:	2208      	movs	r2, #8
   12f06:	18ba      	adds	r2, r7, r2
   12f08:	0011      	movs	r1, r2
   12f0a:	0018      	movs	r0, r3
   12f0c:	4b2b      	ldr	r3, [pc, #172]	; (12fbc <extint_chan_set_config+0xf4>)
   12f0e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   12f10:	1dfb      	adds	r3, r7, #7
   12f12:	781b      	ldrb	r3, [r3, #0]
   12f14:	0018      	movs	r0, r3
   12f16:	4b2a      	ldr	r3, [pc, #168]	; (12fc0 <extint_chan_set_config+0xf8>)
   12f18:	4798      	blx	r3
   12f1a:	0003      	movs	r3, r0
   12f1c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   12f1e:	1dfb      	adds	r3, r7, #7
   12f20:	781b      	ldrb	r3, [r3, #0]
   12f22:	2207      	movs	r2, #7
   12f24:	4013      	ands	r3, r2
   12f26:	009b      	lsls	r3, r3, #2
   12f28:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   12f2a:	683b      	ldr	r3, [r7, #0]
   12f2c:	7adb      	ldrb	r3, [r3, #11]
   12f2e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   12f30:	683b      	ldr	r3, [r7, #0]
   12f32:	7a9b      	ldrb	r3, [r3, #10]
   12f34:	2b00      	cmp	r3, #0
   12f36:	d003      	beq.n	12f40 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   12f38:	697b      	ldr	r3, [r7, #20]
   12f3a:	2208      	movs	r2, #8
   12f3c:	4313      	orrs	r3, r2
   12f3e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   12f40:	1dfb      	adds	r3, r7, #7
   12f42:	781b      	ldrb	r3, [r3, #0]
   12f44:	08db      	lsrs	r3, r3, #3
   12f46:	b2db      	uxtb	r3, r3
   12f48:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   12f4a:	1dfb      	adds	r3, r7, #7
   12f4c:	781b      	ldrb	r3, [r3, #0]
   12f4e:	08db      	lsrs	r3, r3, #3
   12f50:	b2db      	uxtb	r3, r3
   12f52:	001a      	movs	r2, r3
   12f54:	693b      	ldr	r3, [r7, #16]
   12f56:	3206      	adds	r2, #6
   12f58:	0092      	lsls	r2, r2, #2
   12f5a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   12f5c:	210f      	movs	r1, #15
   12f5e:	68fa      	ldr	r2, [r7, #12]
   12f60:	4091      	lsls	r1, r2
   12f62:	000a      	movs	r2, r1
   12f64:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   12f66:	401a      	ands	r2, r3
			(new_config << config_pos);
   12f68:	6979      	ldr	r1, [r7, #20]
   12f6a:	68fb      	ldr	r3, [r7, #12]
   12f6c:	4099      	lsls	r1, r3
   12f6e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   12f70:	431a      	orrs	r2, r3
   12f72:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   12f74:	693b      	ldr	r3, [r7, #16]
   12f76:	1d82      	adds	r2, r0, #6
   12f78:	0092      	lsls	r2, r2, #2
   12f7a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   12f7c:	683b      	ldr	r3, [r7, #0]
   12f7e:	7a5b      	ldrb	r3, [r3, #9]
   12f80:	2b00      	cmp	r3, #0
   12f82:	d00a      	beq.n	12f9a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   12f84:	693b      	ldr	r3, [r7, #16]
   12f86:	695a      	ldr	r2, [r3, #20]
   12f88:	1dfb      	adds	r3, r7, #7
   12f8a:	781b      	ldrb	r3, [r3, #0]
   12f8c:	2101      	movs	r1, #1
   12f8e:	4099      	lsls	r1, r3
   12f90:	000b      	movs	r3, r1
   12f92:	431a      	orrs	r2, r3
   12f94:	693b      	ldr	r3, [r7, #16]
   12f96:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   12f98:	e00a      	b.n	12fb0 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   12f9a:	693b      	ldr	r3, [r7, #16]
   12f9c:	695b      	ldr	r3, [r3, #20]
   12f9e:	1dfa      	adds	r2, r7, #7
   12fa0:	7812      	ldrb	r2, [r2, #0]
   12fa2:	2101      	movs	r1, #1
   12fa4:	4091      	lsls	r1, r2
   12fa6:	000a      	movs	r2, r1
   12fa8:	43d2      	mvns	r2, r2
   12faa:	401a      	ands	r2, r3
   12fac:	693b      	ldr	r3, [r7, #16]
   12fae:	615a      	str	r2, [r3, #20]
}
   12fb0:	46c0      	nop			; (mov r8, r8)
   12fb2:	46bd      	mov	sp, r7
   12fb4:	b006      	add	sp, #24
   12fb6:	bd80      	pop	{r7, pc}
   12fb8:	00012c69 	.word	0x00012c69
   12fbc:	000167dd 	.word	0x000167dd
   12fc0:	00012cbd 	.word	0x00012cbd

00012fc4 <system_pinmux_get_config_defaults>:
{
   12fc4:	b580      	push	{r7, lr}
   12fc6:	b082      	sub	sp, #8
   12fc8:	af00      	add	r7, sp, #0
   12fca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12fcc:	687b      	ldr	r3, [r7, #4]
   12fce:	2280      	movs	r2, #128	; 0x80
   12fd0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12fd2:	687b      	ldr	r3, [r7, #4]
   12fd4:	2200      	movs	r2, #0
   12fd6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12fd8:	687b      	ldr	r3, [r7, #4]
   12fda:	2201      	movs	r2, #1
   12fdc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   12fde:	687b      	ldr	r3, [r7, #4]
   12fe0:	2200      	movs	r2, #0
   12fe2:	70da      	strb	r2, [r3, #3]
}
   12fe4:	46c0      	nop			; (mov r8, r8)
   12fe6:	46bd      	mov	sp, r7
   12fe8:	b002      	add	sp, #8
   12fea:	bd80      	pop	{r7, pc}

00012fec <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   12fec:	b580      	push	{r7, lr}
   12fee:	b084      	sub	sp, #16
   12ff0:	af00      	add	r7, sp, #0
   12ff2:	0002      	movs	r2, r0
   12ff4:	6039      	str	r1, [r7, #0]
   12ff6:	1dfb      	adds	r3, r7, #7
   12ff8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   12ffa:	230c      	movs	r3, #12
   12ffc:	18fb      	adds	r3, r7, r3
   12ffe:	0018      	movs	r0, r3
   13000:	4b10      	ldr	r3, [pc, #64]	; (13044 <port_pin_set_config+0x58>)
   13002:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   13004:	230c      	movs	r3, #12
   13006:	18fb      	adds	r3, r7, r3
   13008:	2280      	movs	r2, #128	; 0x80
   1300a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   1300c:	683b      	ldr	r3, [r7, #0]
   1300e:	781a      	ldrb	r2, [r3, #0]
   13010:	230c      	movs	r3, #12
   13012:	18fb      	adds	r3, r7, r3
   13014:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   13016:	683b      	ldr	r3, [r7, #0]
   13018:	785a      	ldrb	r2, [r3, #1]
   1301a:	230c      	movs	r3, #12
   1301c:	18fb      	adds	r3, r7, r3
   1301e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   13020:	683b      	ldr	r3, [r7, #0]
   13022:	789a      	ldrb	r2, [r3, #2]
   13024:	230c      	movs	r3, #12
   13026:	18fb      	adds	r3, r7, r3
   13028:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1302a:	230c      	movs	r3, #12
   1302c:	18fa      	adds	r2, r7, r3
   1302e:	1dfb      	adds	r3, r7, #7
   13030:	781b      	ldrb	r3, [r3, #0]
   13032:	0011      	movs	r1, r2
   13034:	0018      	movs	r0, r3
   13036:	4b04      	ldr	r3, [pc, #16]	; (13048 <port_pin_set_config+0x5c>)
   13038:	4798      	blx	r3
}
   1303a:	46c0      	nop			; (mov r8, r8)
   1303c:	46bd      	mov	sp, r7
   1303e:	b004      	add	sp, #16
   13040:	bd80      	pop	{r7, pc}
   13042:	46c0      	nop			; (mov r8, r8)
   13044:	00012fc5 	.word	0x00012fc5
   13048:	000167dd 	.word	0x000167dd

0001304c <system_gclk_chan_get_config_defaults>:
{
   1304c:	b580      	push	{r7, lr}
   1304e:	b082      	sub	sp, #8
   13050:	af00      	add	r7, sp, #0
   13052:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13054:	687b      	ldr	r3, [r7, #4]
   13056:	2200      	movs	r2, #0
   13058:	701a      	strb	r2, [r3, #0]
}
   1305a:	46c0      	nop			; (mov r8, r8)
   1305c:	46bd      	mov	sp, r7
   1305e:	b002      	add	sp, #8
   13060:	bd80      	pop	{r7, pc}
	...

00013064 <system_apb_clock_set_mask>:
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	0002      	movs	r2, r0
   1306c:	6039      	str	r1, [r7, #0]
   1306e:	1dfb      	adds	r3, r7, #7
   13070:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13072:	1dfb      	adds	r3, r7, #7
   13074:	781b      	ldrb	r3, [r3, #0]
   13076:	2b01      	cmp	r3, #1
   13078:	d00a      	beq.n	13090 <system_apb_clock_set_mask+0x2c>
   1307a:	2b02      	cmp	r3, #2
   1307c:	d00f      	beq.n	1309e <system_apb_clock_set_mask+0x3a>
   1307e:	2b00      	cmp	r3, #0
   13080:	d114      	bne.n	130ac <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   13082:	4b0e      	ldr	r3, [pc, #56]	; (130bc <system_apb_clock_set_mask+0x58>)
   13084:	4a0d      	ldr	r2, [pc, #52]	; (130bc <system_apb_clock_set_mask+0x58>)
   13086:	6991      	ldr	r1, [r2, #24]
   13088:	683a      	ldr	r2, [r7, #0]
   1308a:	430a      	orrs	r2, r1
   1308c:	619a      	str	r2, [r3, #24]
			break;
   1308e:	e00f      	b.n	130b0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   13090:	4b0a      	ldr	r3, [pc, #40]	; (130bc <system_apb_clock_set_mask+0x58>)
   13092:	4a0a      	ldr	r2, [pc, #40]	; (130bc <system_apb_clock_set_mask+0x58>)
   13094:	69d1      	ldr	r1, [r2, #28]
   13096:	683a      	ldr	r2, [r7, #0]
   13098:	430a      	orrs	r2, r1
   1309a:	61da      	str	r2, [r3, #28]
			break;
   1309c:	e008      	b.n	130b0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1309e:	4b07      	ldr	r3, [pc, #28]	; (130bc <system_apb_clock_set_mask+0x58>)
   130a0:	4a06      	ldr	r2, [pc, #24]	; (130bc <system_apb_clock_set_mask+0x58>)
   130a2:	6a11      	ldr	r1, [r2, #32]
   130a4:	683a      	ldr	r2, [r7, #0]
   130a6:	430a      	orrs	r2, r1
   130a8:	621a      	str	r2, [r3, #32]
			break;
   130aa:	e001      	b.n	130b0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   130ac:	2317      	movs	r3, #23
   130ae:	e000      	b.n	130b2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   130b0:	2300      	movs	r3, #0
}
   130b2:	0018      	movs	r0, r3
   130b4:	46bd      	mov	sp, r7
   130b6:	b002      	add	sp, #8
   130b8:	bd80      	pop	{r7, pc}
   130ba:	46c0      	nop			; (mov r8, r8)
   130bc:	40000400 	.word	0x40000400

000130c0 <system_interrupt_enable>:
{
   130c0:	b580      	push	{r7, lr}
   130c2:	b082      	sub	sp, #8
   130c4:	af00      	add	r7, sp, #0
   130c6:	0002      	movs	r2, r0
   130c8:	1dfb      	adds	r3, r7, #7
   130ca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   130cc:	4b06      	ldr	r3, [pc, #24]	; (130e8 <system_interrupt_enable+0x28>)
   130ce:	1dfa      	adds	r2, r7, #7
   130d0:	7812      	ldrb	r2, [r2, #0]
   130d2:	0011      	movs	r1, r2
   130d4:	221f      	movs	r2, #31
   130d6:	400a      	ands	r2, r1
   130d8:	2101      	movs	r1, #1
   130da:	4091      	lsls	r1, r2
   130dc:	000a      	movs	r2, r1
   130de:	601a      	str	r2, [r3, #0]
}
   130e0:	46c0      	nop			; (mov r8, r8)
   130e2:	46bd      	mov	sp, r7
   130e4:	b002      	add	sp, #8
   130e6:	bd80      	pop	{r7, pc}
   130e8:	e000e100 	.word	0xe000e100

000130ec <system_interrupt_disable>:
{
   130ec:	b580      	push	{r7, lr}
   130ee:	b082      	sub	sp, #8
   130f0:	af00      	add	r7, sp, #0
   130f2:	0002      	movs	r2, r0
   130f4:	1dfb      	adds	r3, r7, #7
   130f6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   130f8:	4a07      	ldr	r2, [pc, #28]	; (13118 <system_interrupt_disable+0x2c>)
   130fa:	1dfb      	adds	r3, r7, #7
   130fc:	781b      	ldrb	r3, [r3, #0]
   130fe:	0019      	movs	r1, r3
   13100:	231f      	movs	r3, #31
   13102:	400b      	ands	r3, r1
   13104:	2101      	movs	r1, #1
   13106:	4099      	lsls	r1, r3
   13108:	000b      	movs	r3, r1
   1310a:	0019      	movs	r1, r3
   1310c:	2380      	movs	r3, #128	; 0x80
   1310e:	50d1      	str	r1, [r2, r3]
}
   13110:	46c0      	nop			; (mov r8, r8)
   13112:	46bd      	mov	sp, r7
   13114:	b002      	add	sp, #8
   13116:	bd80      	pop	{r7, pc}
   13118:	e000e100 	.word	0xe000e100

0001311c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   1311c:	b580      	push	{r7, lr}
   1311e:	b084      	sub	sp, #16
   13120:	af00      	add	r7, sp, #0
   13122:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	681b      	ldr	r3, [r3, #0]
   13128:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1312a:	68fb      	ldr	r3, [r7, #12]
   1312c:	7a9b      	ldrb	r3, [r3, #10]
   1312e:	b2db      	uxtb	r3, r3
   13130:	b25b      	sxtb	r3, r3
   13132:	2b00      	cmp	r3, #0
   13134:	da01      	bge.n	1313a <rtc_calendar_is_syncing+0x1e>
                return true;
   13136:	2301      	movs	r3, #1
   13138:	e000      	b.n	1313c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   1313a:	2300      	movs	r3, #0
}
   1313c:	0018      	movs	r0, r3
   1313e:	46bd      	mov	sp, r7
   13140:	b004      	add	sp, #16
   13142:	bd80      	pop	{r7, pc}

00013144 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   13144:	b580      	push	{r7, lr}
   13146:	b084      	sub	sp, #16
   13148:	af00      	add	r7, sp, #0
   1314a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	681b      	ldr	r3, [r3, #0]
   13150:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   13152:	2003      	movs	r0, #3
   13154:	4b0a      	ldr	r3, [pc, #40]	; (13180 <rtc_calendar_enable+0x3c>)
   13156:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   13158:	46c0      	nop			; (mov r8, r8)
   1315a:	687b      	ldr	r3, [r7, #4]
   1315c:	0018      	movs	r0, r3
   1315e:	4b09      	ldr	r3, [pc, #36]	; (13184 <rtc_calendar_enable+0x40>)
   13160:	4798      	blx	r3
   13162:	1e03      	subs	r3, r0, #0
   13164:	d1f9      	bne.n	1315a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   13166:	68fb      	ldr	r3, [r7, #12]
   13168:	881b      	ldrh	r3, [r3, #0]
   1316a:	b29b      	uxth	r3, r3
   1316c:	2202      	movs	r2, #2
   1316e:	4313      	orrs	r3, r2
   13170:	b29a      	uxth	r2, r3
   13172:	68fb      	ldr	r3, [r7, #12]
   13174:	801a      	strh	r2, [r3, #0]
}
   13176:	46c0      	nop			; (mov r8, r8)
   13178:	46bd      	mov	sp, r7
   1317a:	b004      	add	sp, #16
   1317c:	bd80      	pop	{r7, pc}
   1317e:	46c0      	nop			; (mov r8, r8)
   13180:	000130c1 	.word	0x000130c1
   13184:	0001311d 	.word	0x0001311d

00013188 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   13188:	b580      	push	{r7, lr}
   1318a:	b084      	sub	sp, #16
   1318c:	af00      	add	r7, sp, #0
   1318e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13190:	687b      	ldr	r3, [r7, #4]
   13192:	681b      	ldr	r3, [r3, #0]
   13194:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   13196:	2003      	movs	r0, #3
   13198:	4b0d      	ldr	r3, [pc, #52]	; (131d0 <rtc_calendar_disable+0x48>)
   1319a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   1319c:	46c0      	nop			; (mov r8, r8)
   1319e:	687b      	ldr	r3, [r7, #4]
   131a0:	0018      	movs	r0, r3
   131a2:	4b0c      	ldr	r3, [pc, #48]	; (131d4 <rtc_calendar_disable+0x4c>)
   131a4:	4798      	blx	r3
   131a6:	1e03      	subs	r3, r0, #0
   131a8:	d1f9      	bne.n	1319e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   131aa:	68fb      	ldr	r3, [r7, #12]
   131ac:	22c1      	movs	r2, #193	; 0xc1
   131ae:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   131b0:	68fb      	ldr	r3, [r7, #12]
   131b2:	22c1      	movs	r2, #193	; 0xc1
   131b4:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   131b6:	68fb      	ldr	r3, [r7, #12]
   131b8:	881b      	ldrh	r3, [r3, #0]
   131ba:	b29b      	uxth	r3, r3
   131bc:	2202      	movs	r2, #2
   131be:	4393      	bics	r3, r2
   131c0:	b29a      	uxth	r2, r3
   131c2:	68fb      	ldr	r3, [r7, #12]
   131c4:	801a      	strh	r2, [r3, #0]
}
   131c6:	46c0      	nop			; (mov r8, r8)
   131c8:	46bd      	mov	sp, r7
   131ca:	b004      	add	sp, #16
   131cc:	bd80      	pop	{r7, pc}
   131ce:	46c0      	nop			; (mov r8, r8)
   131d0:	000130ed 	.word	0x000130ed
   131d4:	0001311d 	.word	0x0001311d

000131d8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   131d8:	b580      	push	{r7, lr}
   131da:	b084      	sub	sp, #16
   131dc:	af00      	add	r7, sp, #0
   131de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   131e0:	687b      	ldr	r3, [r7, #4]
   131e2:	681b      	ldr	r3, [r3, #0]
   131e4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   131e6:	687b      	ldr	r3, [r7, #4]
   131e8:	0018      	movs	r0, r3
   131ea:	4b0d      	ldr	r3, [pc, #52]	; (13220 <rtc_calendar_reset+0x48>)
   131ec:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   131ee:	687b      	ldr	r3, [r7, #4]
   131f0:	2200      	movs	r2, #0
   131f2:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   131f4:	687b      	ldr	r3, [r7, #4]
   131f6:	2200      	movs	r2, #0
   131f8:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   131fa:	46c0      	nop			; (mov r8, r8)
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	0018      	movs	r0, r3
   13200:	4b08      	ldr	r3, [pc, #32]	; (13224 <rtc_calendar_reset+0x4c>)
   13202:	4798      	blx	r3
   13204:	1e03      	subs	r3, r0, #0
   13206:	d1f9      	bne.n	131fc <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   13208:	68fb      	ldr	r3, [r7, #12]
   1320a:	881b      	ldrh	r3, [r3, #0]
   1320c:	b29b      	uxth	r3, r3
   1320e:	2201      	movs	r2, #1
   13210:	4313      	orrs	r3, r2
   13212:	b29a      	uxth	r2, r3
   13214:	68fb      	ldr	r3, [r7, #12]
   13216:	801a      	strh	r2, [r3, #0]
}
   13218:	46c0      	nop			; (mov r8, r8)
   1321a:	46bd      	mov	sp, r7
   1321c:	b004      	add	sp, #16
   1321e:	bd80      	pop	{r7, pc}
   13220:	00013189 	.word	0x00013189
   13224:	0001311d 	.word	0x0001311d

00013228 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   13228:	b580      	push	{r7, lr}
   1322a:	b084      	sub	sp, #16
   1322c:	af00      	add	r7, sp, #0
   1322e:	6078      	str	r0, [r7, #4]
   13230:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   13232:	683b      	ldr	r3, [r7, #0]
   13234:	88db      	ldrh	r3, [r3, #6]
   13236:	001a      	movs	r2, r3
   13238:	687b      	ldr	r3, [r7, #4]
   1323a:	88db      	ldrh	r3, [r3, #6]
   1323c:	1ad3      	subs	r3, r2, r3
   1323e:	069b      	lsls	r3, r3, #26
   13240:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   13242:	683b      	ldr	r3, [r7, #0]
   13244:	795b      	ldrb	r3, [r3, #5]
   13246:	059b      	lsls	r3, r3, #22
   13248:	001a      	movs	r2, r3
   1324a:	68fb      	ldr	r3, [r7, #12]
   1324c:	4313      	orrs	r3, r2
   1324e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   13250:	683b      	ldr	r3, [r7, #0]
   13252:	791b      	ldrb	r3, [r3, #4]
   13254:	045b      	lsls	r3, r3, #17
   13256:	001a      	movs	r2, r3
   13258:	68fb      	ldr	r3, [r7, #12]
   1325a:	4313      	orrs	r3, r2
   1325c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   1325e:	683b      	ldr	r3, [r7, #0]
   13260:	789b      	ldrb	r3, [r3, #2]
   13262:	031b      	lsls	r3, r3, #12
   13264:	001a      	movs	r2, r3
   13266:	68fb      	ldr	r3, [r7, #12]
   13268:	4313      	orrs	r3, r2
   1326a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   1326c:	687b      	ldr	r3, [r7, #4]
   1326e:	791b      	ldrb	r3, [r3, #4]
   13270:	2201      	movs	r2, #1
   13272:	4053      	eors	r3, r2
   13274:	b2db      	uxtb	r3, r3
   13276:	2b00      	cmp	r3, #0
   13278:	d008      	beq.n	1328c <rtc_calendar_time_to_register_value+0x64>
   1327a:	683b      	ldr	r3, [r7, #0]
   1327c:	78db      	ldrb	r3, [r3, #3]
   1327e:	2b00      	cmp	r3, #0
   13280:	d004      	beq.n	1328c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   13282:	68fb      	ldr	r3, [r7, #12]
   13284:	2280      	movs	r2, #128	; 0x80
   13286:	0252      	lsls	r2, r2, #9
   13288:	4313      	orrs	r3, r2
   1328a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   1328c:	683b      	ldr	r3, [r7, #0]
   1328e:	785b      	ldrb	r3, [r3, #1]
   13290:	019b      	lsls	r3, r3, #6
   13292:	001a      	movs	r2, r3
   13294:	68fb      	ldr	r3, [r7, #12]
   13296:	4313      	orrs	r3, r2
   13298:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   1329a:	683b      	ldr	r3, [r7, #0]
   1329c:	781b      	ldrb	r3, [r3, #0]
   1329e:	001a      	movs	r2, r3
   132a0:	68fb      	ldr	r3, [r7, #12]
   132a2:	4313      	orrs	r3, r2
   132a4:	60fb      	str	r3, [r7, #12]

	return register_value;
   132a6:	68fb      	ldr	r3, [r7, #12]
}
   132a8:	0018      	movs	r0, r3
   132aa:	46bd      	mov	sp, r7
   132ac:	b004      	add	sp, #16
   132ae:	bd80      	pop	{r7, pc}

000132b0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   132bc:	68bb      	ldr	r3, [r7, #8]
   132be:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   132c0:	b29a      	uxth	r2, r3
   132c2:	68fb      	ldr	r3, [r7, #12]
   132c4:	88db      	ldrh	r3, [r3, #6]
   132c6:	18d3      	adds	r3, r2, r3
   132c8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   132ca:	687b      	ldr	r3, [r7, #4]
   132cc:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   132ce:	68bb      	ldr	r3, [r7, #8]
   132d0:	0d9b      	lsrs	r3, r3, #22
   132d2:	b2db      	uxtb	r3, r3
   132d4:	220f      	movs	r2, #15
   132d6:	4013      	ands	r3, r2
   132d8:	b2da      	uxtb	r2, r3
   132da:	687b      	ldr	r3, [r7, #4]
   132dc:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   132de:	68bb      	ldr	r3, [r7, #8]
   132e0:	0c5b      	lsrs	r3, r3, #17
   132e2:	b2db      	uxtb	r3, r3
   132e4:	221f      	movs	r2, #31
   132e6:	4013      	ands	r3, r2
   132e8:	b2da      	uxtb	r2, r3
   132ea:	687b      	ldr	r3, [r7, #4]
   132ec:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   132ee:	68fb      	ldr	r3, [r7, #12]
   132f0:	791b      	ldrb	r3, [r3, #4]
   132f2:	2b00      	cmp	r3, #0
   132f4:	d008      	beq.n	13308 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   132f6:	68bb      	ldr	r3, [r7, #8]
   132f8:	0b1b      	lsrs	r3, r3, #12
   132fa:	b2db      	uxtb	r3, r3
   132fc:	221f      	movs	r2, #31
   132fe:	4013      	ands	r3, r2
   13300:	b2da      	uxtb	r2, r3
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	709a      	strb	r2, [r3, #2]
   13306:	e010      	b.n	1332a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   13308:	68bb      	ldr	r3, [r7, #8]
   1330a:	0b1b      	lsrs	r3, r3, #12
   1330c:	b2db      	uxtb	r3, r3
   1330e:	220f      	movs	r2, #15
   13310:	4013      	ands	r3, r2
   13312:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   13318:	68ba      	ldr	r2, [r7, #8]
   1331a:	2380      	movs	r3, #128	; 0x80
   1331c:	025b      	lsls	r3, r3, #9
   1331e:	4013      	ands	r3, r2
   13320:	1e5a      	subs	r2, r3, #1
   13322:	4193      	sbcs	r3, r2
   13324:	b2da      	uxtb	r2, r3
   13326:	687b      	ldr	r3, [r7, #4]
   13328:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   1332a:	68bb      	ldr	r3, [r7, #8]
   1332c:	099b      	lsrs	r3, r3, #6
   1332e:	b2db      	uxtb	r3, r3
   13330:	223f      	movs	r2, #63	; 0x3f
   13332:	4013      	ands	r3, r2
   13334:	b2da      	uxtb	r2, r3
   13336:	687b      	ldr	r3, [r7, #4]
   13338:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   1333a:	68bb      	ldr	r3, [r7, #8]
   1333c:	b2db      	uxtb	r3, r3
   1333e:	223f      	movs	r2, #63	; 0x3f
   13340:	4013      	ands	r3, r2
   13342:	b2da      	uxtb	r2, r3
   13344:	687b      	ldr	r3, [r7, #4]
   13346:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   13348:	46c0      	nop			; (mov r8, r8)
   1334a:	46bd      	mov	sp, r7
   1334c:	b004      	add	sp, #16
   1334e:	bd80      	pop	{r7, pc}

00013350 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   13350:	b580      	push	{r7, lr}
   13352:	b084      	sub	sp, #16
   13354:	af00      	add	r7, sp, #0
   13356:	6078      	str	r0, [r7, #4]
   13358:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1335a:	687b      	ldr	r3, [r7, #4]
   1335c:	681b      	ldr	r3, [r3, #0]
   1335e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   13360:	683b      	ldr	r3, [r7, #0]
   13362:	881a      	ldrh	r2, [r3, #0]
   13364:	230e      	movs	r3, #14
   13366:	18fb      	adds	r3, r7, r3
   13368:	2108      	movs	r1, #8
   1336a:	430a      	orrs	r2, r1
   1336c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   1336e:	683b      	ldr	r3, [r7, #0]
   13370:	791b      	ldrb	r3, [r3, #4]
   13372:	2201      	movs	r2, #1
   13374:	4053      	eors	r3, r2
   13376:	b2db      	uxtb	r3, r3
   13378:	2b00      	cmp	r3, #0
   1337a:	d007      	beq.n	1338c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   1337c:	230e      	movs	r3, #14
   1337e:	18fb      	adds	r3, r7, r3
   13380:	220e      	movs	r2, #14
   13382:	18ba      	adds	r2, r7, r2
   13384:	8812      	ldrh	r2, [r2, #0]
   13386:	2140      	movs	r1, #64	; 0x40
   13388:	430a      	orrs	r2, r1
   1338a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   1338c:	683b      	ldr	r3, [r7, #0]
   1338e:	789b      	ldrb	r3, [r3, #2]
   13390:	2b00      	cmp	r3, #0
   13392:	d007      	beq.n	133a4 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   13394:	230e      	movs	r3, #14
   13396:	18fb      	adds	r3, r7, r3
   13398:	220e      	movs	r2, #14
   1339a:	18ba      	adds	r2, r7, r2
   1339c:	8812      	ldrh	r2, [r2, #0]
   1339e:	2180      	movs	r1, #128	; 0x80
   133a0:	430a      	orrs	r2, r1
   133a2:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   133a4:	68bb      	ldr	r3, [r7, #8]
   133a6:	220e      	movs	r2, #14
   133a8:	18ba      	adds	r2, r7, r2
   133aa:	8812      	ldrh	r2, [r2, #0]
   133ac:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   133ae:	683b      	ldr	r3, [r7, #0]
   133b0:	78db      	ldrb	r3, [r3, #3]
   133b2:	2b00      	cmp	r3, #0
   133b4:	d008      	beq.n	133c8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   133b6:	68bb      	ldr	r3, [r7, #8]
   133b8:	885b      	ldrh	r3, [r3, #2]
   133ba:	b29b      	uxth	r3, r3
   133bc:	2280      	movs	r2, #128	; 0x80
   133be:	01d2      	lsls	r2, r2, #7
   133c0:	4313      	orrs	r3, r2
   133c2:	b29a      	uxth	r2, r3
   133c4:	68bb      	ldr	r3, [r7, #8]
   133c6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   133c8:	230d      	movs	r3, #13
   133ca:	18fb      	adds	r3, r7, r3
   133cc:	2200      	movs	r2, #0
   133ce:	701a      	strb	r2, [r3, #0]
   133d0:	e017      	b.n	13402 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   133d2:	230d      	movs	r3, #13
   133d4:	18fb      	adds	r3, r7, r3
   133d6:	781a      	ldrb	r2, [r3, #0]
   133d8:	0013      	movs	r3, r2
   133da:	009b      	lsls	r3, r3, #2
   133dc:	189b      	adds	r3, r3, r2
   133de:	005b      	lsls	r3, r3, #1
   133e0:	3308      	adds	r3, #8
   133e2:	683a      	ldr	r2, [r7, #0]
   133e4:	18d1      	adds	r1, r2, r3
   133e6:	230d      	movs	r3, #13
   133e8:	18fb      	adds	r3, r7, r3
   133ea:	781a      	ldrb	r2, [r3, #0]
   133ec:	687b      	ldr	r3, [r7, #4]
   133ee:	0018      	movs	r0, r3
   133f0:	4b08      	ldr	r3, [pc, #32]	; (13414 <_rtc_calendar_set_config+0xc4>)
   133f2:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   133f4:	230d      	movs	r3, #13
   133f6:	18fb      	adds	r3, r7, r3
   133f8:	781a      	ldrb	r2, [r3, #0]
   133fa:	230d      	movs	r3, #13
   133fc:	18fb      	adds	r3, r7, r3
   133fe:	3201      	adds	r2, #1
   13400:	701a      	strb	r2, [r3, #0]
   13402:	230d      	movs	r3, #13
   13404:	18fb      	adds	r3, r7, r3
   13406:	781b      	ldrb	r3, [r3, #0]
   13408:	2b00      	cmp	r3, #0
   1340a:	d0e2      	beq.n	133d2 <_rtc_calendar_set_config+0x82>
	}
}
   1340c:	46c0      	nop			; (mov r8, r8)
   1340e:	46bd      	mov	sp, r7
   13410:	b004      	add	sp, #16
   13412:	bd80      	pop	{r7, pc}
   13414:	00013539 	.word	0x00013539

00013418 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   13418:	b580      	push	{r7, lr}
   1341a:	b086      	sub	sp, #24
   1341c:	af00      	add	r7, sp, #0
   1341e:	60f8      	str	r0, [r7, #12]
   13420:	60b9      	str	r1, [r7, #8]
   13422:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   13424:	68fb      	ldr	r3, [r7, #12]
   13426:	68ba      	ldr	r2, [r7, #8]
   13428:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   1342a:	2120      	movs	r1, #32
   1342c:	2000      	movs	r0, #0
   1342e:	4b18      	ldr	r3, [pc, #96]	; (13490 <rtc_calendar_init+0x78>)
   13430:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   13432:	2314      	movs	r3, #20
   13434:	18fb      	adds	r3, r7, r3
   13436:	0018      	movs	r0, r3
   13438:	4b16      	ldr	r3, [pc, #88]	; (13494 <rtc_calendar_init+0x7c>)
   1343a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1343c:	2314      	movs	r3, #20
   1343e:	18fb      	adds	r3, r7, r3
   13440:	2202      	movs	r2, #2
   13442:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   13444:	2314      	movs	r3, #20
   13446:	18fb      	adds	r3, r7, r3
   13448:	0019      	movs	r1, r3
   1344a:	2004      	movs	r0, #4
   1344c:	4b12      	ldr	r3, [pc, #72]	; (13498 <rtc_calendar_init+0x80>)
   1344e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   13450:	2004      	movs	r0, #4
   13452:	4b12      	ldr	r3, [pc, #72]	; (1349c <rtc_calendar_init+0x84>)
   13454:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   13456:	68fb      	ldr	r3, [r7, #12]
   13458:	0018      	movs	r0, r3
   1345a:	4b11      	ldr	r3, [pc, #68]	; (134a0 <rtc_calendar_init+0x88>)
   1345c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   1345e:	687b      	ldr	r3, [r7, #4]
   13460:	791a      	ldrb	r2, [r3, #4]
   13462:	68fb      	ldr	r3, [r7, #12]
   13464:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   13466:	687b      	ldr	r3, [r7, #4]
   13468:	78da      	ldrb	r2, [r3, #3]
   1346a:	68fb      	ldr	r3, [r7, #12]
   1346c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	88da      	ldrh	r2, [r3, #6]
   13472:	68fb      	ldr	r3, [r7, #12]
   13474:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   13476:	4b0b      	ldr	r3, [pc, #44]	; (134a4 <rtc_calendar_init+0x8c>)
   13478:	68fa      	ldr	r2, [r7, #12]
   1347a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   1347c:	687a      	ldr	r2, [r7, #4]
   1347e:	68fb      	ldr	r3, [r7, #12]
   13480:	0011      	movs	r1, r2
   13482:	0018      	movs	r0, r3
   13484:	4b08      	ldr	r3, [pc, #32]	; (134a8 <rtc_calendar_init+0x90>)
   13486:	4798      	blx	r3
}
   13488:	46c0      	nop			; (mov r8, r8)
   1348a:	46bd      	mov	sp, r7
   1348c:	b006      	add	sp, #24
   1348e:	bd80      	pop	{r7, pc}
   13490:	00013065 	.word	0x00013065
   13494:	0001304d 	.word	0x0001304d
   13498:	0001647d 	.word	0x0001647d
   1349c:	000164c1 	.word	0x000164c1
   134a0:	000131d9 	.word	0x000131d9
   134a4:	20005644 	.word	0x20005644
   134a8:	00013351 	.word	0x00013351

000134ac <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   134ac:	b580      	push	{r7, lr}
   134ae:	b084      	sub	sp, #16
   134b0:	af00      	add	r7, sp, #0
   134b2:	6078      	str	r0, [r7, #4]
   134b4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   134b6:	687b      	ldr	r3, [r7, #4]
   134b8:	681b      	ldr	r3, [r3, #0]
   134ba:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   134bc:	687b      	ldr	r3, [r7, #4]
   134be:	795b      	ldrb	r3, [r3, #5]
   134c0:	2201      	movs	r2, #1
   134c2:	4053      	eors	r3, r2
   134c4:	b2db      	uxtb	r3, r3
   134c6:	2b00      	cmp	r3, #0
   134c8:	d00a      	beq.n	134e0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   134ca:	68fb      	ldr	r3, [r7, #12]
   134cc:	4a16      	ldr	r2, [pc, #88]	; (13528 <rtc_calendar_get_time+0x7c>)
   134ce:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   134d0:	46c0      	nop			; (mov r8, r8)
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	0018      	movs	r0, r3
   134d6:	4b15      	ldr	r3, [pc, #84]	; (1352c <rtc_calendar_get_time+0x80>)
   134d8:	4798      	blx	r3
   134da:	1e03      	subs	r3, r0, #0
   134dc:	d1f9      	bne.n	134d2 <rtc_calendar_get_time+0x26>
   134de:	e016      	b.n	1350e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   134e0:	68fb      	ldr	r3, [r7, #12]
   134e2:	885b      	ldrh	r3, [r3, #2]
   134e4:	b29b      	uxth	r3, r3
   134e6:	001a      	movs	r2, r3
   134e8:	2380      	movs	r3, #128	; 0x80
   134ea:	01db      	lsls	r3, r3, #7
   134ec:	4013      	ands	r3, r2
   134ee:	d10e      	bne.n	1350e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   134f0:	68fb      	ldr	r3, [r7, #12]
   134f2:	885b      	ldrh	r3, [r3, #2]
   134f4:	b29b      	uxth	r3, r3
   134f6:	4a0e      	ldr	r2, [pc, #56]	; (13530 <rtc_calendar_get_time+0x84>)
   134f8:	4313      	orrs	r3, r2
   134fa:	b29a      	uxth	r2, r3
   134fc:	68fb      	ldr	r3, [r7, #12]
   134fe:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   13500:	46c0      	nop			; (mov r8, r8)
   13502:	687b      	ldr	r3, [r7, #4]
   13504:	0018      	movs	r0, r3
   13506:	4b09      	ldr	r3, [pc, #36]	; (1352c <rtc_calendar_get_time+0x80>)
   13508:	4798      	blx	r3
   1350a:	1e03      	subs	r3, r0, #0
   1350c:	d1f9      	bne.n	13502 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   1350e:	68fb      	ldr	r3, [r7, #12]
   13510:	691b      	ldr	r3, [r3, #16]
   13512:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   13514:	683a      	ldr	r2, [r7, #0]
   13516:	68b9      	ldr	r1, [r7, #8]
   13518:	687b      	ldr	r3, [r7, #4]
   1351a:	0018      	movs	r0, r3
   1351c:	4b05      	ldr	r3, [pc, #20]	; (13534 <rtc_calendar_get_time+0x88>)
   1351e:	4798      	blx	r3
}
   13520:	46c0      	nop			; (mov r8, r8)
   13522:	46bd      	mov	sp, r7
   13524:	b004      	add	sp, #16
   13526:	bd80      	pop	{r7, pc}
   13528:	ffff8000 	.word	0xffff8000
   1352c:	0001311d 	.word	0x0001311d
   13530:	ffffc000 	.word	0xffffc000
   13534:	000132b1 	.word	0x000132b1

00013538 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   13538:	b580      	push	{r7, lr}
   1353a:	b086      	sub	sp, #24
   1353c:	af00      	add	r7, sp, #0
   1353e:	60f8      	str	r0, [r7, #12]
   13540:	60b9      	str	r1, [r7, #8]
   13542:	1dfb      	adds	r3, r7, #7
   13544:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13546:	68fb      	ldr	r3, [r7, #12]
   13548:	681b      	ldr	r3, [r3, #0]
   1354a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   1354c:	1dfb      	adds	r3, r7, #7
   1354e:	781b      	ldrb	r3, [r3, #0]
   13550:	2b01      	cmp	r3, #1
   13552:	d901      	bls.n	13558 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   13554:	2317      	movs	r3, #23
   13556:	e021      	b.n	1359c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   13558:	68ba      	ldr	r2, [r7, #8]
   1355a:	68fb      	ldr	r3, [r7, #12]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b10      	ldr	r3, [pc, #64]	; (135a4 <rtc_calendar_set_alarm+0x6c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
   13566:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   13568:	46c0      	nop			; (mov r8, r8)
   1356a:	68fb      	ldr	r3, [r7, #12]
   1356c:	0018      	movs	r0, r3
   1356e:	4b0e      	ldr	r3, [pc, #56]	; (135a8 <rtc_calendar_set_alarm+0x70>)
   13570:	4798      	blx	r3
   13572:	1e03      	subs	r3, r0, #0
   13574:	d1f9      	bne.n	1356a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   13576:	1dfb      	adds	r3, r7, #7
   13578:	781a      	ldrb	r2, [r3, #0]
   1357a:	697b      	ldr	r3, [r7, #20]
   1357c:	3203      	adds	r2, #3
   1357e:	00d2      	lsls	r2, r2, #3
   13580:	6939      	ldr	r1, [r7, #16]
   13582:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   13584:	1dfb      	adds	r3, r7, #7
   13586:	781b      	ldrb	r3, [r3, #0]
   13588:	68ba      	ldr	r2, [r7, #8]
   1358a:	7a11      	ldrb	r1, [r2, #8]
   1358c:	697a      	ldr	r2, [r7, #20]
   1358e:	3303      	adds	r3, #3
   13590:	00db      	lsls	r3, r3, #3
   13592:	18d3      	adds	r3, r2, r3
   13594:	3304      	adds	r3, #4
   13596:	1c0a      	adds	r2, r1, #0
   13598:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1359a:	2300      	movs	r3, #0
}
   1359c:	0018      	movs	r0, r3
   1359e:	46bd      	mov	sp, r7
   135a0:	b006      	add	sp, #24
   135a2:	bd80      	pop	{r7, pc}
   135a4:	00013229 	.word	0x00013229
   135a8:	0001311d 	.word	0x0001311d

000135ac <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   135ac:	b580      	push	{r7, lr}
   135ae:	b086      	sub	sp, #24
   135b0:	af00      	add	r7, sp, #0
   135b2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   135b4:	4b28      	ldr	r3, [pc, #160]	; (13658 <_rtc_interrupt_handler+0xac>)
   135b6:	687a      	ldr	r2, [r7, #4]
   135b8:	0092      	lsls	r2, r2, #2
   135ba:	58d3      	ldr	r3, [r2, r3]
   135bc:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   135be:	697b      	ldr	r3, [r7, #20]
   135c0:	681b      	ldr	r3, [r3, #0]
   135c2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   135c4:	230e      	movs	r3, #14
   135c6:	18fb      	adds	r3, r7, r3
   135c8:	697a      	ldr	r2, [r7, #20]
   135ca:	8a52      	ldrh	r2, [r2, #18]
   135cc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135ce:	697b      	ldr	r3, [r7, #20]
   135d0:	8a1b      	ldrh	r3, [r3, #16]
   135d2:	b29a      	uxth	r2, r3
   135d4:	230e      	movs	r3, #14
   135d6:	18fb      	adds	r3, r7, r3
   135d8:	210e      	movs	r1, #14
   135da:	1879      	adds	r1, r7, r1
   135dc:	8809      	ldrh	r1, [r1, #0]
   135de:	400a      	ands	r2, r1
   135e0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   135e2:	693b      	ldr	r3, [r7, #16]
   135e4:	7a1b      	ldrb	r3, [r3, #8]
   135e6:	b2da      	uxtb	r2, r3
   135e8:	230c      	movs	r3, #12
   135ea:	18fb      	adds	r3, r7, r3
   135ec:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   135ee:	693b      	ldr	r3, [r7, #16]
   135f0:	79db      	ldrb	r3, [r3, #7]
   135f2:	b2db      	uxtb	r3, r3
   135f4:	b29a      	uxth	r2, r3
   135f6:	230c      	movs	r3, #12
   135f8:	18fb      	adds	r3, r7, r3
   135fa:	210c      	movs	r1, #12
   135fc:	1879      	adds	r1, r7, r1
   135fe:	8809      	ldrh	r1, [r1, #0]
   13600:	400a      	ands	r2, r1
   13602:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   13604:	230c      	movs	r3, #12
   13606:	18fb      	adds	r3, r7, r3
   13608:	881b      	ldrh	r3, [r3, #0]
   1360a:	2280      	movs	r2, #128	; 0x80
   1360c:	4013      	ands	r3, r2
   1360e:	d00c      	beq.n	1362a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   13610:	230e      	movs	r3, #14
   13612:	18fb      	adds	r3, r7, r3
   13614:	881b      	ldrh	r3, [r3, #0]
   13616:	2202      	movs	r2, #2
   13618:	4013      	ands	r3, r2
   1361a:	d002      	beq.n	13622 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	68db      	ldr	r3, [r3, #12]
   13620:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   13622:	693b      	ldr	r3, [r7, #16]
   13624:	2280      	movs	r2, #128	; 0x80
   13626:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   13628:	e011      	b.n	1364e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   1362a:	230c      	movs	r3, #12
   1362c:	18fb      	adds	r3, r7, r3
   1362e:	881b      	ldrh	r3, [r3, #0]
   13630:	2201      	movs	r2, #1
   13632:	4013      	ands	r3, r2
   13634:	d00b      	beq.n	1364e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   13636:	230e      	movs	r3, #14
   13638:	18fb      	adds	r3, r7, r3
   1363a:	881b      	ldrh	r3, [r3, #0]
   1363c:	2201      	movs	r2, #1
   1363e:	4013      	ands	r3, r2
   13640:	d002      	beq.n	13648 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   13642:	697b      	ldr	r3, [r7, #20]
   13644:	689b      	ldr	r3, [r3, #8]
   13646:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   13648:	693b      	ldr	r3, [r7, #16]
   1364a:	2201      	movs	r2, #1
   1364c:	721a      	strb	r2, [r3, #8]
}
   1364e:	46c0      	nop			; (mov r8, r8)
   13650:	46bd      	mov	sp, r7
   13652:	b006      	add	sp, #24
   13654:	bd80      	pop	{r7, pc}
   13656:	46c0      	nop			; (mov r8, r8)
   13658:	20005644 	.word	0x20005644

0001365c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1365c:	b580      	push	{r7, lr}
   1365e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   13660:	2000      	movs	r0, #0
   13662:	4b02      	ldr	r3, [pc, #8]	; (1366c <RTC_Handler+0x10>)
   13664:	4798      	blx	r3
}
   13666:	46c0      	nop			; (mov r8, r8)
   13668:	46bd      	mov	sp, r7
   1366a:	bd80      	pop	{r7, pc}
   1366c:	000135ad 	.word	0x000135ad

00013670 <system_gclk_chan_get_config_defaults>:
{
   13670:	b580      	push	{r7, lr}
   13672:	b082      	sub	sp, #8
   13674:	af00      	add	r7, sp, #0
   13676:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13678:	687b      	ldr	r3, [r7, #4]
   1367a:	2200      	movs	r2, #0
   1367c:	701a      	strb	r2, [r3, #0]
}
   1367e:	46c0      	nop			; (mov r8, r8)
   13680:	46bd      	mov	sp, r7
   13682:	b002      	add	sp, #8
   13684:	bd80      	pop	{r7, pc}

00013686 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   13686:	b5f0      	push	{r4, r5, r6, r7, lr}
   13688:	b08d      	sub	sp, #52	; 0x34
   1368a:	af00      	add	r7, sp, #0
   1368c:	60b8      	str	r0, [r7, #8]
   1368e:	60f9      	str	r1, [r7, #12]
   13690:	603a      	str	r2, [r7, #0]
   13692:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   13694:	2300      	movs	r3, #0
   13696:	2400      	movs	r4, #0
   13698:	623b      	str	r3, [r7, #32]
   1369a:	627c      	str	r4, [r7, #36]	; 0x24
   1369c:	2300      	movs	r3, #0
   1369e:	2400      	movs	r4, #0
   136a0:	61bb      	str	r3, [r7, #24]
   136a2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   136a4:	233f      	movs	r3, #63	; 0x3f
   136a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   136a8:	e053      	b.n	13752 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   136aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   136ac:	3b20      	subs	r3, #32
   136ae:	2b00      	cmp	r3, #0
   136b0:	db04      	blt.n	136bc <long_division+0x36>
   136b2:	2201      	movs	r2, #1
   136b4:	409a      	lsls	r2, r3
   136b6:	0013      	movs	r3, r2
   136b8:	617b      	str	r3, [r7, #20]
   136ba:	e00b      	b.n	136d4 <long_division+0x4e>
   136bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   136be:	2220      	movs	r2, #32
   136c0:	1ad3      	subs	r3, r2, r3
   136c2:	2201      	movs	r2, #1
   136c4:	40da      	lsrs	r2, r3
   136c6:	0013      	movs	r3, r2
   136c8:	2100      	movs	r1, #0
   136ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   136cc:	4091      	lsls	r1, r2
   136ce:	000a      	movs	r2, r1
   136d0:	4313      	orrs	r3, r2
   136d2:	617b      	str	r3, [r7, #20]
   136d4:	2201      	movs	r2, #1
   136d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   136d8:	409a      	lsls	r2, r3
   136da:	0013      	movs	r3, r2
   136dc:	613b      	str	r3, [r7, #16]

		r = r << 1;
   136de:	69bb      	ldr	r3, [r7, #24]
   136e0:	69fc      	ldr	r4, [r7, #28]
   136e2:	18db      	adds	r3, r3, r3
   136e4:	4164      	adcs	r4, r4
   136e6:	61bb      	str	r3, [r7, #24]
   136e8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   136ea:	68bb      	ldr	r3, [r7, #8]
   136ec:	693a      	ldr	r2, [r7, #16]
   136ee:	401a      	ands	r2, r3
   136f0:	0015      	movs	r5, r2
   136f2:	68fb      	ldr	r3, [r7, #12]
   136f4:	697a      	ldr	r2, [r7, #20]
   136f6:	401a      	ands	r2, r3
   136f8:	0016      	movs	r6, r2
   136fa:	002b      	movs	r3, r5
   136fc:	4333      	orrs	r3, r6
   136fe:	d007      	beq.n	13710 <long_division+0x8a>
			r |= 0x01;
   13700:	69bb      	ldr	r3, [r7, #24]
   13702:	2201      	movs	r2, #1
   13704:	4313      	orrs	r3, r2
   13706:	61bb      	str	r3, [r7, #24]
   13708:	69fb      	ldr	r3, [r7, #28]
   1370a:	2200      	movs	r2, #0
   1370c:	4313      	orrs	r3, r2
   1370e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   13710:	687a      	ldr	r2, [r7, #4]
   13712:	69fb      	ldr	r3, [r7, #28]
   13714:	429a      	cmp	r2, r3
   13716:	d819      	bhi.n	1374c <long_division+0xc6>
   13718:	687a      	ldr	r2, [r7, #4]
   1371a:	69fb      	ldr	r3, [r7, #28]
   1371c:	429a      	cmp	r2, r3
   1371e:	d103      	bne.n	13728 <long_division+0xa2>
   13720:	683a      	ldr	r2, [r7, #0]
   13722:	69bb      	ldr	r3, [r7, #24]
   13724:	429a      	cmp	r2, r3
   13726:	d811      	bhi.n	1374c <long_division+0xc6>
			r = r - d;
   13728:	69b9      	ldr	r1, [r7, #24]
   1372a:	69fa      	ldr	r2, [r7, #28]
   1372c:	683b      	ldr	r3, [r7, #0]
   1372e:	687c      	ldr	r4, [r7, #4]
   13730:	1ac9      	subs	r1, r1, r3
   13732:	41a2      	sbcs	r2, r4
   13734:	000b      	movs	r3, r1
   13736:	0014      	movs	r4, r2
   13738:	61bb      	str	r3, [r7, #24]
   1373a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1373c:	6a3a      	ldr	r2, [r7, #32]
   1373e:	693b      	ldr	r3, [r7, #16]
   13740:	4313      	orrs	r3, r2
   13742:	623b      	str	r3, [r7, #32]
   13744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13746:	697b      	ldr	r3, [r7, #20]
   13748:	4313      	orrs	r3, r2
   1374a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1374e:	3b01      	subs	r3, #1
   13750:	62fb      	str	r3, [r7, #44]	; 0x2c
   13752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13754:	2b00      	cmp	r3, #0
   13756:	daa8      	bge.n	136aa <long_division+0x24>
		}
	}

	return q;
   13758:	6a3b      	ldr	r3, [r7, #32]
   1375a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1375c:	0018      	movs	r0, r3
   1375e:	0021      	movs	r1, r4
   13760:	46bd      	mov	sp, r7
   13762:	b00d      	add	sp, #52	; 0x34
   13764:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013766 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   13766:	b580      	push	{r7, lr}
   13768:	b086      	sub	sp, #24
   1376a:	af00      	add	r7, sp, #0
   1376c:	60f8      	str	r0, [r7, #12]
   1376e:	60b9      	str	r1, [r7, #8]
   13770:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   13772:	2316      	movs	r3, #22
   13774:	18fb      	adds	r3, r7, r3
   13776:	2200      	movs	r2, #0
   13778:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1377a:	68bb      	ldr	r3, [r7, #8]
   1377c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1377e:	68bb      	ldr	r3, [r7, #8]
   13780:	085a      	lsrs	r2, r3, #1
   13782:	68fb      	ldr	r3, [r7, #12]
   13784:	429a      	cmp	r2, r3
   13786:	d201      	bcs.n	1378c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   13788:	2340      	movs	r3, #64	; 0x40
   1378a:	e026      	b.n	137da <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1378c:	68bb      	ldr	r3, [r7, #8]
   1378e:	085b      	lsrs	r3, r3, #1
   13790:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   13792:	e00a      	b.n	137aa <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   13794:	693a      	ldr	r2, [r7, #16]
   13796:	68fb      	ldr	r3, [r7, #12]
   13798:	1ad3      	subs	r3, r2, r3
   1379a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1379c:	2316      	movs	r3, #22
   1379e:	18fb      	adds	r3, r7, r3
   137a0:	881a      	ldrh	r2, [r3, #0]
   137a2:	2316      	movs	r3, #22
   137a4:	18fb      	adds	r3, r7, r3
   137a6:	3201      	adds	r2, #1
   137a8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   137aa:	693a      	ldr	r2, [r7, #16]
   137ac:	68fb      	ldr	r3, [r7, #12]
   137ae:	429a      	cmp	r2, r3
   137b0:	d2f0      	bcs.n	13794 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   137b2:	2316      	movs	r3, #22
   137b4:	18fb      	adds	r3, r7, r3
   137b6:	2216      	movs	r2, #22
   137b8:	18ba      	adds	r2, r7, r2
   137ba:	8812      	ldrh	r2, [r2, #0]
   137bc:	3a01      	subs	r2, #1
   137be:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   137c0:	2316      	movs	r3, #22
   137c2:	18fb      	adds	r3, r7, r3
   137c4:	881b      	ldrh	r3, [r3, #0]
   137c6:	2bff      	cmp	r3, #255	; 0xff
   137c8:	d901      	bls.n	137ce <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   137ca:	2340      	movs	r3, #64	; 0x40
   137cc:	e005      	b.n	137da <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   137ce:	687b      	ldr	r3, [r7, #4]
   137d0:	2216      	movs	r2, #22
   137d2:	18ba      	adds	r2, r7, r2
   137d4:	8812      	ldrh	r2, [r2, #0]
   137d6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   137d8:	2300      	movs	r3, #0
	}
}
   137da:	0018      	movs	r0, r3
   137dc:	46bd      	mov	sp, r7
   137de:	b006      	add	sp, #24
   137e0:	bd80      	pop	{r7, pc}
	...

000137e4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   137e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   137e6:	b0a1      	sub	sp, #132	; 0x84
   137e8:	af00      	add	r7, sp, #0
   137ea:	64f8      	str	r0, [r7, #76]	; 0x4c
   137ec:	64b9      	str	r1, [r7, #72]	; 0x48
   137ee:	647a      	str	r2, [r7, #68]	; 0x44
   137f0:	2243      	movs	r2, #67	; 0x43
   137f2:	18ba      	adds	r2, r7, r2
   137f4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   137f6:	2300      	movs	r3, #0
   137f8:	2400      	movs	r4, #0
   137fa:	673b      	str	r3, [r7, #112]	; 0x70
   137fc:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   137fe:	2300      	movs	r3, #0
   13800:	2400      	movs	r4, #0
   13802:	66bb      	str	r3, [r7, #104]	; 0x68
   13804:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   13806:	2300      	movs	r3, #0
   13808:	2400      	movs	r4, #0
   1380a:	67bb      	str	r3, [r7, #120]	; 0x78
   1380c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1380e:	2300      	movs	r3, #0
   13810:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   13812:	2358      	movs	r3, #88	; 0x58
   13814:	2240      	movs	r2, #64	; 0x40
   13816:	4694      	mov	ip, r2
   13818:	44bc      	add	ip, r7
   1381a:	4463      	add	r3, ip
   1381c:	781a      	ldrb	r2, [r3, #0]
   1381e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13820:	435a      	muls	r2, r3
   13822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13824:	429a      	cmp	r2, r3
   13826:	d901      	bls.n	1382c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   13828:	2340      	movs	r3, #64	; 0x40
   1382a:	e0b3      	b.n	13994 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1382c:	2343      	movs	r3, #67	; 0x43
   1382e:	18fb      	adds	r3, r7, r3
   13830:	781b      	ldrb	r3, [r3, #0]
   13832:	2b00      	cmp	r3, #0
   13834:	d13d      	bne.n	138b2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   13836:	2358      	movs	r3, #88	; 0x58
   13838:	2240      	movs	r2, #64	; 0x40
   1383a:	4694      	mov	ip, r2
   1383c:	44bc      	add	ip, r7
   1383e:	4463      	add	r3, ip
   13840:	781b      	ldrb	r3, [r3, #0]
   13842:	b2db      	uxtb	r3, r3
   13844:	613b      	str	r3, [r7, #16]
   13846:	2300      	movs	r3, #0
   13848:	617b      	str	r3, [r7, #20]
   1384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1384c:	60bb      	str	r3, [r7, #8]
   1384e:	2300      	movs	r3, #0
   13850:	60fb      	str	r3, [r7, #12]
   13852:	4c52      	ldr	r4, [pc, #328]	; (1399c <_sercom_get_async_baud_val+0x1b8>)
   13854:	68ba      	ldr	r2, [r7, #8]
   13856:	68fb      	ldr	r3, [r7, #12]
   13858:	6938      	ldr	r0, [r7, #16]
   1385a:	6979      	ldr	r1, [r7, #20]
   1385c:	47a0      	blx	r4
   1385e:	0003      	movs	r3, r0
   13860:	000c      	movs	r4, r1
   13862:	001b      	movs	r3, r3
   13864:	65fb      	str	r3, [r7, #92]	; 0x5c
   13866:	2300      	movs	r3, #0
   13868:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1386a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1386c:	603b      	str	r3, [r7, #0]
   1386e:	2300      	movs	r3, #0
   13870:	607b      	str	r3, [r7, #4]
   13872:	6db8      	ldr	r0, [r7, #88]	; 0x58
   13874:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   13876:	683a      	ldr	r2, [r7, #0]
   13878:	687b      	ldr	r3, [r7, #4]
   1387a:	4c49      	ldr	r4, [pc, #292]	; (139a0 <_sercom_get_async_baud_val+0x1bc>)
   1387c:	47a0      	blx	r4
   1387e:	0003      	movs	r3, r0
   13880:	000c      	movs	r4, r1
   13882:	673b      	str	r3, [r7, #112]	; 0x70
   13884:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   13886:	2100      	movs	r1, #0
   13888:	2201      	movs	r2, #1
   1388a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1388c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1388e:	1ac9      	subs	r1, r1, r3
   13890:	41a2      	sbcs	r2, r4
   13892:	000b      	movs	r3, r1
   13894:	0014      	movs	r4, r2
   13896:	66bb      	str	r3, [r7, #104]	; 0x68
   13898:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1389a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1389c:	0c1b      	lsrs	r3, r3, #16
   1389e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   138a0:	0416      	lsls	r6, r2, #16
   138a2:	431e      	orrs	r6, r3
   138a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   138a6:	041d      	lsls	r5, r3, #16
   138a8:	0033      	movs	r3, r6
   138aa:	67bb      	str	r3, [r7, #120]	; 0x78
   138ac:	2300      	movs	r3, #0
   138ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   138b0:	e06a      	b.n	13988 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   138b2:	2343      	movs	r3, #67	; 0x43
   138b4:	18fb      	adds	r3, r7, r3
   138b6:	781b      	ldrb	r3, [r3, #0]
   138b8:	2b01      	cmp	r3, #1
   138ba:	d165      	bne.n	13988 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   138bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   138be:	633b      	str	r3, [r7, #48]	; 0x30
   138c0:	2300      	movs	r3, #0
   138c2:	637b      	str	r3, [r7, #52]	; 0x34
   138c4:	2358      	movs	r3, #88	; 0x58
   138c6:	2240      	movs	r2, #64	; 0x40
   138c8:	4694      	mov	ip, r2
   138ca:	44bc      	add	ip, r7
   138cc:	4463      	add	r3, ip
   138ce:	781b      	ldrb	r3, [r3, #0]
   138d0:	b2db      	uxtb	r3, r3
   138d2:	62bb      	str	r3, [r7, #40]	; 0x28
   138d4:	2300      	movs	r3, #0
   138d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   138d8:	4c30      	ldr	r4, [pc, #192]	; (1399c <_sercom_get_async_baud_val+0x1b8>)
   138da:	6aba      	ldr	r2, [r7, #40]	; 0x28
   138dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   138de:	6b38      	ldr	r0, [r7, #48]	; 0x30
   138e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   138e2:	47a0      	blx	r4
   138e4:	0003      	movs	r3, r0
   138e6:	000c      	movs	r4, r1
   138e8:	65bb      	str	r3, [r7, #88]	; 0x58
   138ea:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   138ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   138ee:	623b      	str	r3, [r7, #32]
   138f0:	2300      	movs	r3, #0
   138f2:	627b      	str	r3, [r7, #36]	; 0x24
   138f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   138f6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   138f8:	001a      	movs	r2, r3
   138fa:	0023      	movs	r3, r4
   138fc:	6a38      	ldr	r0, [r7, #32]
   138fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
   13900:	4c27      	ldr	r4, [pc, #156]	; (139a0 <_sercom_get_async_baud_val+0x1bc>)
   13902:	47a0      	blx	r4
   13904:	0003      	movs	r3, r0
   13906:	000c      	movs	r4, r1
   13908:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1390a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1390c:	2380      	movs	r3, #128	; 0x80
   1390e:	019b      	lsls	r3, r3, #6
   13910:	429a      	cmp	r2, r3
   13912:	d901      	bls.n	13918 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   13914:	2340      	movs	r3, #64	; 0x40
   13916:	e03d      	b.n	13994 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   13918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1391a:	61bb      	str	r3, [r7, #24]
   1391c:	2300      	movs	r3, #0
   1391e:	61fb      	str	r3, [r7, #28]
   13920:	69b9      	ldr	r1, [r7, #24]
   13922:	69fa      	ldr	r2, [r7, #28]
   13924:	000b      	movs	r3, r1
   13926:	0f5b      	lsrs	r3, r3, #29
   13928:	0010      	movs	r0, r2
   1392a:	00c0      	lsls	r0, r0, #3
   1392c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1392e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   13930:	4318      	orrs	r0, r3
   13932:	63f8      	str	r0, [r7, #60]	; 0x3c
   13934:	000b      	movs	r3, r1
   13936:	00db      	lsls	r3, r3, #3
   13938:	63bb      	str	r3, [r7, #56]	; 0x38
   1393a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1393c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1393e:	001a      	movs	r2, r3
   13940:	0023      	movs	r3, r4
   13942:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   13944:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   13946:	4c16      	ldr	r4, [pc, #88]	; (139a0 <_sercom_get_async_baud_val+0x1bc>)
   13948:	47a0      	blx	r4
   1394a:	0003      	movs	r3, r0
   1394c:	000c      	movs	r4, r1
   1394e:	65bb      	str	r3, [r7, #88]	; 0x58
   13950:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   13952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13954:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   13956:	b2d9      	uxtb	r1, r3
   13958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1395a:	b2db      	uxtb	r3, r3
   1395c:	00db      	lsls	r3, r3, #3
   1395e:	b2da      	uxtb	r2, r3
   13960:	2317      	movs	r3, #23
   13962:	2040      	movs	r0, #64	; 0x40
   13964:	4684      	mov	ip, r0
   13966:	44bc      	add	ip, r7
   13968:	4463      	add	r3, ip
   1396a:	1a8a      	subs	r2, r1, r2
   1396c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1396e:	2317      	movs	r3, #23
   13970:	2240      	movs	r2, #64	; 0x40
   13972:	4694      	mov	ip, r2
   13974:	44bc      	add	ip, r7
   13976:	4463      	add	r3, ip
   13978:	781b      	ldrb	r3, [r3, #0]
   1397a:	035b      	lsls	r3, r3, #13
   1397c:	001a      	movs	r2, r3
   1397e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   13980:	4313      	orrs	r3, r2
   13982:	67bb      	str	r3, [r7, #120]	; 0x78
   13984:	2300      	movs	r3, #0
   13986:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   13988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1398a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1398c:	b29a      	uxth	r2, r3
   1398e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13990:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   13992:	2300      	movs	r3, #0
}
   13994:	0018      	movs	r0, r3
   13996:	46bd      	mov	sp, r7
   13998:	b021      	add	sp, #132	; 0x84
   1399a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1399c:	0001f231 	.word	0x0001f231
   139a0:	00013687 	.word	0x00013687

000139a4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   139a4:	b580      	push	{r7, lr}
   139a6:	b084      	sub	sp, #16
   139a8:	af00      	add	r7, sp, #0
   139aa:	0002      	movs	r2, r0
   139ac:	1dfb      	adds	r3, r7, #7
   139ae:	701a      	strb	r2, [r3, #0]
   139b0:	1dbb      	adds	r3, r7, #6
   139b2:	1c0a      	adds	r2, r1, #0
   139b4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   139b6:	4b1a      	ldr	r3, [pc, #104]	; (13a20 <sercom_set_gclk_generator+0x7c>)
   139b8:	781b      	ldrb	r3, [r3, #0]
   139ba:	2201      	movs	r2, #1
   139bc:	4053      	eors	r3, r2
   139be:	b2db      	uxtb	r3, r3
   139c0:	2b00      	cmp	r3, #0
   139c2:	d103      	bne.n	139cc <sercom_set_gclk_generator+0x28>
   139c4:	1dbb      	adds	r3, r7, #6
   139c6:	781b      	ldrb	r3, [r3, #0]
   139c8:	2b00      	cmp	r3, #0
   139ca:	d01b      	beq.n	13a04 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   139cc:	230c      	movs	r3, #12
   139ce:	18fb      	adds	r3, r7, r3
   139d0:	0018      	movs	r0, r3
   139d2:	4b14      	ldr	r3, [pc, #80]	; (13a24 <sercom_set_gclk_generator+0x80>)
   139d4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   139d6:	230c      	movs	r3, #12
   139d8:	18fb      	adds	r3, r7, r3
   139da:	1dfa      	adds	r2, r7, #7
   139dc:	7812      	ldrb	r2, [r2, #0]
   139de:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   139e0:	230c      	movs	r3, #12
   139e2:	18fb      	adds	r3, r7, r3
   139e4:	0019      	movs	r1, r3
   139e6:	2013      	movs	r0, #19
   139e8:	4b0f      	ldr	r3, [pc, #60]	; (13a28 <sercom_set_gclk_generator+0x84>)
   139ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   139ec:	2013      	movs	r0, #19
   139ee:	4b0f      	ldr	r3, [pc, #60]	; (13a2c <sercom_set_gclk_generator+0x88>)
   139f0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   139f2:	4b0b      	ldr	r3, [pc, #44]	; (13a20 <sercom_set_gclk_generator+0x7c>)
   139f4:	1dfa      	adds	r2, r7, #7
   139f6:	7812      	ldrb	r2, [r2, #0]
   139f8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   139fa:	4b09      	ldr	r3, [pc, #36]	; (13a20 <sercom_set_gclk_generator+0x7c>)
   139fc:	2201      	movs	r2, #1
   139fe:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   13a00:	2300      	movs	r3, #0
   13a02:	e008      	b.n	13a16 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   13a04:	4b06      	ldr	r3, [pc, #24]	; (13a20 <sercom_set_gclk_generator+0x7c>)
   13a06:	785b      	ldrb	r3, [r3, #1]
   13a08:	1dfa      	adds	r2, r7, #7
   13a0a:	7812      	ldrb	r2, [r2, #0]
   13a0c:	429a      	cmp	r2, r3
   13a0e:	d101      	bne.n	13a14 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   13a10:	2300      	movs	r3, #0
   13a12:	e000      	b.n	13a16 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   13a14:	231d      	movs	r3, #29
}
   13a16:	0018      	movs	r0, r3
   13a18:	46bd      	mov	sp, r7
   13a1a:	b004      	add	sp, #16
   13a1c:	bd80      	pop	{r7, pc}
   13a1e:	46c0      	nop			; (mov r8, r8)
   13a20:	20003d4c 	.word	0x20003d4c
   13a24:	00013671 	.word	0x00013671
   13a28:	0001647d 	.word	0x0001647d
   13a2c:	000164c1 	.word	0x000164c1

00013a30 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   13a30:	b580      	push	{r7, lr}
   13a32:	b082      	sub	sp, #8
   13a34:	af00      	add	r7, sp, #0
   13a36:	6078      	str	r0, [r7, #4]
   13a38:	000a      	movs	r2, r1
   13a3a:	1cfb      	adds	r3, r7, #3
   13a3c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   13a3e:	687b      	ldr	r3, [r7, #4]
   13a40:	4a4d      	ldr	r2, [pc, #308]	; (13b78 <_sercom_get_default_pad+0x148>)
   13a42:	4293      	cmp	r3, r2
   13a44:	d03f      	beq.n	13ac6 <_sercom_get_default_pad+0x96>
   13a46:	4a4c      	ldr	r2, [pc, #304]	; (13b78 <_sercom_get_default_pad+0x148>)
   13a48:	4293      	cmp	r3, r2
   13a4a:	d806      	bhi.n	13a5a <_sercom_get_default_pad+0x2a>
   13a4c:	4a4b      	ldr	r2, [pc, #300]	; (13b7c <_sercom_get_default_pad+0x14c>)
   13a4e:	4293      	cmp	r3, r2
   13a50:	d00f      	beq.n	13a72 <_sercom_get_default_pad+0x42>
   13a52:	4a4b      	ldr	r2, [pc, #300]	; (13b80 <_sercom_get_default_pad+0x150>)
   13a54:	4293      	cmp	r3, r2
   13a56:	d021      	beq.n	13a9c <_sercom_get_default_pad+0x6c>
   13a58:	e089      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13a5a:	4a4a      	ldr	r2, [pc, #296]	; (13b84 <_sercom_get_default_pad+0x154>)
   13a5c:	4293      	cmp	r3, r2
   13a5e:	d100      	bne.n	13a62 <_sercom_get_default_pad+0x32>
   13a60:	e05b      	b.n	13b1a <_sercom_get_default_pad+0xea>
   13a62:	4a49      	ldr	r2, [pc, #292]	; (13b88 <_sercom_get_default_pad+0x158>)
   13a64:	4293      	cmp	r3, r2
   13a66:	d100      	bne.n	13a6a <_sercom_get_default_pad+0x3a>
   13a68:	e06c      	b.n	13b44 <_sercom_get_default_pad+0x114>
   13a6a:	4a48      	ldr	r2, [pc, #288]	; (13b8c <_sercom_get_default_pad+0x15c>)
   13a6c:	4293      	cmp	r3, r2
   13a6e:	d03f      	beq.n	13af0 <_sercom_get_default_pad+0xc0>
   13a70:	e07d      	b.n	13b6e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   13a72:	1cfb      	adds	r3, r7, #3
   13a74:	781b      	ldrb	r3, [r3, #0]
   13a76:	2b01      	cmp	r3, #1
   13a78:	d00a      	beq.n	13a90 <_sercom_get_default_pad+0x60>
   13a7a:	dc02      	bgt.n	13a82 <_sercom_get_default_pad+0x52>
   13a7c:	2b00      	cmp	r3, #0
   13a7e:	d005      	beq.n	13a8c <_sercom_get_default_pad+0x5c>
   13a80:	e075      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13a82:	2b02      	cmp	r3, #2
   13a84:	d006      	beq.n	13a94 <_sercom_get_default_pad+0x64>
   13a86:	2b03      	cmp	r3, #3
   13a88:	d006      	beq.n	13a98 <_sercom_get_default_pad+0x68>
   13a8a:	e070      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13a8c:	4b40      	ldr	r3, [pc, #256]	; (13b90 <_sercom_get_default_pad+0x160>)
   13a8e:	e06f      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13a90:	4b40      	ldr	r3, [pc, #256]	; (13b94 <_sercom_get_default_pad+0x164>)
   13a92:	e06d      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13a94:	4b40      	ldr	r3, [pc, #256]	; (13b98 <_sercom_get_default_pad+0x168>)
   13a96:	e06b      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13a98:	4b40      	ldr	r3, [pc, #256]	; (13b9c <_sercom_get_default_pad+0x16c>)
   13a9a:	e069      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13a9c:	1cfb      	adds	r3, r7, #3
   13a9e:	781b      	ldrb	r3, [r3, #0]
   13aa0:	2b01      	cmp	r3, #1
   13aa2:	d00a      	beq.n	13aba <_sercom_get_default_pad+0x8a>
   13aa4:	dc02      	bgt.n	13aac <_sercom_get_default_pad+0x7c>
   13aa6:	2b00      	cmp	r3, #0
   13aa8:	d005      	beq.n	13ab6 <_sercom_get_default_pad+0x86>
   13aaa:	e060      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13aac:	2b02      	cmp	r3, #2
   13aae:	d006      	beq.n	13abe <_sercom_get_default_pad+0x8e>
   13ab0:	2b03      	cmp	r3, #3
   13ab2:	d006      	beq.n	13ac2 <_sercom_get_default_pad+0x92>
   13ab4:	e05b      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13ab6:	2303      	movs	r3, #3
   13ab8:	e05a      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13aba:	4b39      	ldr	r3, [pc, #228]	; (13ba0 <_sercom_get_default_pad+0x170>)
   13abc:	e058      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13abe:	4b39      	ldr	r3, [pc, #228]	; (13ba4 <_sercom_get_default_pad+0x174>)
   13ac0:	e056      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13ac2:	4b39      	ldr	r3, [pc, #228]	; (13ba8 <_sercom_get_default_pad+0x178>)
   13ac4:	e054      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13ac6:	1cfb      	adds	r3, r7, #3
   13ac8:	781b      	ldrb	r3, [r3, #0]
   13aca:	2b01      	cmp	r3, #1
   13acc:	d00a      	beq.n	13ae4 <_sercom_get_default_pad+0xb4>
   13ace:	dc02      	bgt.n	13ad6 <_sercom_get_default_pad+0xa6>
   13ad0:	2b00      	cmp	r3, #0
   13ad2:	d005      	beq.n	13ae0 <_sercom_get_default_pad+0xb0>
   13ad4:	e04b      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13ad6:	2b02      	cmp	r3, #2
   13ad8:	d006      	beq.n	13ae8 <_sercom_get_default_pad+0xb8>
   13ada:	2b03      	cmp	r3, #3
   13adc:	d006      	beq.n	13aec <_sercom_get_default_pad+0xbc>
   13ade:	e046      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13ae0:	4b32      	ldr	r3, [pc, #200]	; (13bac <_sercom_get_default_pad+0x17c>)
   13ae2:	e045      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13ae4:	4b32      	ldr	r3, [pc, #200]	; (13bb0 <_sercom_get_default_pad+0x180>)
   13ae6:	e043      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13ae8:	4b32      	ldr	r3, [pc, #200]	; (13bb4 <_sercom_get_default_pad+0x184>)
   13aea:	e041      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13aec:	4b32      	ldr	r3, [pc, #200]	; (13bb8 <_sercom_get_default_pad+0x188>)
   13aee:	e03f      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13af0:	1cfb      	adds	r3, r7, #3
   13af2:	781b      	ldrb	r3, [r3, #0]
   13af4:	2b01      	cmp	r3, #1
   13af6:	d00a      	beq.n	13b0e <_sercom_get_default_pad+0xde>
   13af8:	dc02      	bgt.n	13b00 <_sercom_get_default_pad+0xd0>
   13afa:	2b00      	cmp	r3, #0
   13afc:	d005      	beq.n	13b0a <_sercom_get_default_pad+0xda>
   13afe:	e036      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13b00:	2b02      	cmp	r3, #2
   13b02:	d006      	beq.n	13b12 <_sercom_get_default_pad+0xe2>
   13b04:	2b03      	cmp	r3, #3
   13b06:	d006      	beq.n	13b16 <_sercom_get_default_pad+0xe6>
   13b08:	e031      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13b0a:	4b2c      	ldr	r3, [pc, #176]	; (13bbc <_sercom_get_default_pad+0x18c>)
   13b0c:	e030      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13b0e:	4b2c      	ldr	r3, [pc, #176]	; (13bc0 <_sercom_get_default_pad+0x190>)
   13b10:	e02e      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13b12:	4b2c      	ldr	r3, [pc, #176]	; (13bc4 <_sercom_get_default_pad+0x194>)
   13b14:	e02c      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13b16:	4b2c      	ldr	r3, [pc, #176]	; (13bc8 <_sercom_get_default_pad+0x198>)
   13b18:	e02a      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13b1a:	1cfb      	adds	r3, r7, #3
   13b1c:	781b      	ldrb	r3, [r3, #0]
   13b1e:	2b01      	cmp	r3, #1
   13b20:	d00a      	beq.n	13b38 <_sercom_get_default_pad+0x108>
   13b22:	dc02      	bgt.n	13b2a <_sercom_get_default_pad+0xfa>
   13b24:	2b00      	cmp	r3, #0
   13b26:	d005      	beq.n	13b34 <_sercom_get_default_pad+0x104>
   13b28:	e021      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13b2a:	2b02      	cmp	r3, #2
   13b2c:	d006      	beq.n	13b3c <_sercom_get_default_pad+0x10c>
   13b2e:	2b03      	cmp	r3, #3
   13b30:	d006      	beq.n	13b40 <_sercom_get_default_pad+0x110>
   13b32:	e01c      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13b34:	4b25      	ldr	r3, [pc, #148]	; (13bcc <_sercom_get_default_pad+0x19c>)
   13b36:	e01b      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13b38:	4b25      	ldr	r3, [pc, #148]	; (13bd0 <_sercom_get_default_pad+0x1a0>)
   13b3a:	e019      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13b3c:	4b25      	ldr	r3, [pc, #148]	; (13bd4 <_sercom_get_default_pad+0x1a4>)
   13b3e:	e017      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13b40:	4b25      	ldr	r3, [pc, #148]	; (13bd8 <_sercom_get_default_pad+0x1a8>)
   13b42:	e015      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13b44:	1cfb      	adds	r3, r7, #3
   13b46:	781b      	ldrb	r3, [r3, #0]
   13b48:	2b01      	cmp	r3, #1
   13b4a:	d00a      	beq.n	13b62 <_sercom_get_default_pad+0x132>
   13b4c:	dc02      	bgt.n	13b54 <_sercom_get_default_pad+0x124>
   13b4e:	2b00      	cmp	r3, #0
   13b50:	d005      	beq.n	13b5e <_sercom_get_default_pad+0x12e>
   13b52:	e00c      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13b54:	2b02      	cmp	r3, #2
   13b56:	d006      	beq.n	13b66 <_sercom_get_default_pad+0x136>
   13b58:	2b03      	cmp	r3, #3
   13b5a:	d006      	beq.n	13b6a <_sercom_get_default_pad+0x13a>
   13b5c:	e007      	b.n	13b6e <_sercom_get_default_pad+0x13e>
   13b5e:	4b1f      	ldr	r3, [pc, #124]	; (13bdc <_sercom_get_default_pad+0x1ac>)
   13b60:	e006      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13b62:	4b1f      	ldr	r3, [pc, #124]	; (13be0 <_sercom_get_default_pad+0x1b0>)
   13b64:	e004      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13b66:	4b1f      	ldr	r3, [pc, #124]	; (13be4 <_sercom_get_default_pad+0x1b4>)
   13b68:	e002      	b.n	13b70 <_sercom_get_default_pad+0x140>
   13b6a:	4b1f      	ldr	r3, [pc, #124]	; (13be8 <_sercom_get_default_pad+0x1b8>)
   13b6c:	e000      	b.n	13b70 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   13b6e:	2300      	movs	r3, #0
}
   13b70:	0018      	movs	r0, r3
   13b72:	46bd      	mov	sp, r7
   13b74:	b002      	add	sp, #8
   13b76:	bd80      	pop	{r7, pc}
   13b78:	42001000 	.word	0x42001000
   13b7c:	42000800 	.word	0x42000800
   13b80:	42000c00 	.word	0x42000c00
   13b84:	42001800 	.word	0x42001800
   13b88:	42001c00 	.word	0x42001c00
   13b8c:	42001400 	.word	0x42001400
   13b90:	00040003 	.word	0x00040003
   13b94:	00050003 	.word	0x00050003
   13b98:	00060003 	.word	0x00060003
   13b9c:	00070003 	.word	0x00070003
   13ba0:	00010003 	.word	0x00010003
   13ba4:	001e0003 	.word	0x001e0003
   13ba8:	001f0003 	.word	0x001f0003
   13bac:	00080003 	.word	0x00080003
   13bb0:	00090003 	.word	0x00090003
   13bb4:	000a0003 	.word	0x000a0003
   13bb8:	000b0003 	.word	0x000b0003
   13bbc:	00100003 	.word	0x00100003
   13bc0:	00110003 	.word	0x00110003
   13bc4:	00120003 	.word	0x00120003
   13bc8:	00130003 	.word	0x00130003
   13bcc:	000c0003 	.word	0x000c0003
   13bd0:	000d0003 	.word	0x000d0003
   13bd4:	000e0003 	.word	0x000e0003
   13bd8:	000f0003 	.word	0x000f0003
   13bdc:	00160003 	.word	0x00160003
   13be0:	00170003 	.word	0x00170003
   13be4:	00180003 	.word	0x00180003
   13be8:	00190003 	.word	0x00190003

00013bec <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   13bec:	b590      	push	{r4, r7, lr}
   13bee:	b08b      	sub	sp, #44	; 0x2c
   13bf0:	af00      	add	r7, sp, #0
   13bf2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   13bf4:	230c      	movs	r3, #12
   13bf6:	18fb      	adds	r3, r7, r3
   13bf8:	4a0f      	ldr	r2, [pc, #60]	; (13c38 <_sercom_get_sercom_inst_index+0x4c>)
   13bfa:	ca13      	ldmia	r2!, {r0, r1, r4}
   13bfc:	c313      	stmia	r3!, {r0, r1, r4}
   13bfe:	ca13      	ldmia	r2!, {r0, r1, r4}
   13c00:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   13c02:	2300      	movs	r3, #0
   13c04:	627b      	str	r3, [r7, #36]	; 0x24
   13c06:	e00e      	b.n	13c26 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   13c08:	230c      	movs	r3, #12
   13c0a:	18fb      	adds	r3, r7, r3
   13c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13c0e:	0092      	lsls	r2, r2, #2
   13c10:	58d3      	ldr	r3, [r2, r3]
   13c12:	001a      	movs	r2, r3
   13c14:	687b      	ldr	r3, [r7, #4]
   13c16:	429a      	cmp	r2, r3
   13c18:	d102      	bne.n	13c20 <_sercom_get_sercom_inst_index+0x34>
			return i;
   13c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13c1c:	b2db      	uxtb	r3, r3
   13c1e:	e006      	b.n	13c2e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   13c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13c22:	3301      	adds	r3, #1
   13c24:	627b      	str	r3, [r7, #36]	; 0x24
   13c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13c28:	2b05      	cmp	r3, #5
   13c2a:	d9ed      	bls.n	13c08 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   13c2c:	2300      	movs	r3, #0
}
   13c2e:	0018      	movs	r0, r3
   13c30:	46bd      	mov	sp, r7
   13c32:	b00b      	add	sp, #44	; 0x2c
   13c34:	bd90      	pop	{r4, r7, pc}
   13c36:	46c0      	nop			; (mov r8, r8)
   13c38:	00025730 	.word	0x00025730

00013c3c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   13c3c:	b580      	push	{r7, lr}
   13c3e:	b082      	sub	sp, #8
   13c40:	af00      	add	r7, sp, #0
   13c42:	0002      	movs	r2, r0
   13c44:	1dfb      	adds	r3, r7, #7
   13c46:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   13c48:	46c0      	nop			; (mov r8, r8)
   13c4a:	46bd      	mov	sp, r7
   13c4c:	b002      	add	sp, #8
   13c4e:	bd80      	pop	{r7, pc}

00013c50 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   13c50:	b580      	push	{r7, lr}
   13c52:	b084      	sub	sp, #16
   13c54:	af00      	add	r7, sp, #0
   13c56:	0002      	movs	r2, r0
   13c58:	6039      	str	r1, [r7, #0]
   13c5a:	1dfb      	adds	r3, r7, #7
   13c5c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   13c5e:	4b13      	ldr	r3, [pc, #76]	; (13cac <_sercom_set_handler+0x5c>)
   13c60:	781b      	ldrb	r3, [r3, #0]
   13c62:	2201      	movs	r2, #1
   13c64:	4053      	eors	r3, r2
   13c66:	b2db      	uxtb	r3, r3
   13c68:	2b00      	cmp	r3, #0
   13c6a:	d015      	beq.n	13c98 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   13c6c:	2300      	movs	r3, #0
   13c6e:	60fb      	str	r3, [r7, #12]
   13c70:	e00c      	b.n	13c8c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   13c72:	4b0f      	ldr	r3, [pc, #60]	; (13cb0 <_sercom_set_handler+0x60>)
   13c74:	68fa      	ldr	r2, [r7, #12]
   13c76:	0092      	lsls	r2, r2, #2
   13c78:	490e      	ldr	r1, [pc, #56]	; (13cb4 <_sercom_set_handler+0x64>)
   13c7a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   13c7c:	4b0e      	ldr	r3, [pc, #56]	; (13cb8 <_sercom_set_handler+0x68>)
   13c7e:	68fa      	ldr	r2, [r7, #12]
   13c80:	0092      	lsls	r2, r2, #2
   13c82:	2100      	movs	r1, #0
   13c84:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   13c86:	68fb      	ldr	r3, [r7, #12]
   13c88:	3301      	adds	r3, #1
   13c8a:	60fb      	str	r3, [r7, #12]
   13c8c:	68fb      	ldr	r3, [r7, #12]
   13c8e:	2b05      	cmp	r3, #5
   13c90:	d9ef      	bls.n	13c72 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   13c92:	4b06      	ldr	r3, [pc, #24]	; (13cac <_sercom_set_handler+0x5c>)
   13c94:	2201      	movs	r2, #1
   13c96:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   13c98:	1dfb      	adds	r3, r7, #7
   13c9a:	781a      	ldrb	r2, [r3, #0]
   13c9c:	4b04      	ldr	r3, [pc, #16]	; (13cb0 <_sercom_set_handler+0x60>)
   13c9e:	0092      	lsls	r2, r2, #2
   13ca0:	6839      	ldr	r1, [r7, #0]
   13ca2:	50d1      	str	r1, [r2, r3]
}
   13ca4:	46c0      	nop			; (mov r8, r8)
   13ca6:	46bd      	mov	sp, r7
   13ca8:	b004      	add	sp, #16
   13caa:	bd80      	pop	{r7, pc}
   13cac:	20003d4e 	.word	0x20003d4e
   13cb0:	20003d50 	.word	0x20003d50
   13cb4:	00013c3d 	.word	0x00013c3d
   13cb8:	20005648 	.word	0x20005648

00013cbc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   13cbc:	b590      	push	{r4, r7, lr}
   13cbe:	b085      	sub	sp, #20
   13cc0:	af00      	add	r7, sp, #0
   13cc2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   13cc4:	2308      	movs	r3, #8
   13cc6:	18fb      	adds	r3, r7, r3
   13cc8:	4a0b      	ldr	r2, [pc, #44]	; (13cf8 <_sercom_get_interrupt_vector+0x3c>)
   13cca:	6811      	ldr	r1, [r2, #0]
   13ccc:	6019      	str	r1, [r3, #0]
   13cce:	8892      	ldrh	r2, [r2, #4]
   13cd0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   13cd2:	230f      	movs	r3, #15
   13cd4:	18fc      	adds	r4, r7, r3
   13cd6:	687b      	ldr	r3, [r7, #4]
   13cd8:	0018      	movs	r0, r3
   13cda:	4b08      	ldr	r3, [pc, #32]	; (13cfc <_sercom_get_interrupt_vector+0x40>)
   13cdc:	4798      	blx	r3
   13cde:	0003      	movs	r3, r0
   13ce0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   13ce2:	230f      	movs	r3, #15
   13ce4:	18fb      	adds	r3, r7, r3
   13ce6:	781b      	ldrb	r3, [r3, #0]
   13ce8:	2208      	movs	r2, #8
   13cea:	18ba      	adds	r2, r7, r2
   13cec:	5cd3      	ldrb	r3, [r2, r3]
   13cee:	b25b      	sxtb	r3, r3
}
   13cf0:	0018      	movs	r0, r3
   13cf2:	46bd      	mov	sp, r7
   13cf4:	b005      	add	sp, #20
   13cf6:	bd90      	pop	{r4, r7, pc}
   13cf8:	00025748 	.word	0x00025748
   13cfc:	00013bed 	.word	0x00013bed

00013d00 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   13d00:	b580      	push	{r7, lr}
   13d02:	af00      	add	r7, sp, #0
   13d04:	4b03      	ldr	r3, [pc, #12]	; (13d14 <SERCOM0_Handler+0x14>)
   13d06:	681b      	ldr	r3, [r3, #0]
   13d08:	2000      	movs	r0, #0
   13d0a:	4798      	blx	r3
   13d0c:	46c0      	nop			; (mov r8, r8)
   13d0e:	46bd      	mov	sp, r7
   13d10:	bd80      	pop	{r7, pc}
   13d12:	46c0      	nop			; (mov r8, r8)
   13d14:	20003d50 	.word	0x20003d50

00013d18 <SERCOM1_Handler>:
   13d18:	b580      	push	{r7, lr}
   13d1a:	af00      	add	r7, sp, #0
   13d1c:	4b03      	ldr	r3, [pc, #12]	; (13d2c <SERCOM1_Handler+0x14>)
   13d1e:	685b      	ldr	r3, [r3, #4]
   13d20:	2001      	movs	r0, #1
   13d22:	4798      	blx	r3
   13d24:	46c0      	nop			; (mov r8, r8)
   13d26:	46bd      	mov	sp, r7
   13d28:	bd80      	pop	{r7, pc}
   13d2a:	46c0      	nop			; (mov r8, r8)
   13d2c:	20003d50 	.word	0x20003d50

00013d30 <SERCOM2_Handler>:
   13d30:	b580      	push	{r7, lr}
   13d32:	af00      	add	r7, sp, #0
   13d34:	4b03      	ldr	r3, [pc, #12]	; (13d44 <SERCOM2_Handler+0x14>)
   13d36:	689b      	ldr	r3, [r3, #8]
   13d38:	2002      	movs	r0, #2
   13d3a:	4798      	blx	r3
   13d3c:	46c0      	nop			; (mov r8, r8)
   13d3e:	46bd      	mov	sp, r7
   13d40:	bd80      	pop	{r7, pc}
   13d42:	46c0      	nop			; (mov r8, r8)
   13d44:	20003d50 	.word	0x20003d50

00013d48 <SERCOM3_Handler>:
   13d48:	b580      	push	{r7, lr}
   13d4a:	af00      	add	r7, sp, #0
   13d4c:	4b03      	ldr	r3, [pc, #12]	; (13d5c <SERCOM3_Handler+0x14>)
   13d4e:	68db      	ldr	r3, [r3, #12]
   13d50:	2003      	movs	r0, #3
   13d52:	4798      	blx	r3
   13d54:	46c0      	nop			; (mov r8, r8)
   13d56:	46bd      	mov	sp, r7
   13d58:	bd80      	pop	{r7, pc}
   13d5a:	46c0      	nop			; (mov r8, r8)
   13d5c:	20003d50 	.word	0x20003d50

00013d60 <SERCOM4_Handler>:
   13d60:	b580      	push	{r7, lr}
   13d62:	af00      	add	r7, sp, #0
   13d64:	4b03      	ldr	r3, [pc, #12]	; (13d74 <SERCOM4_Handler+0x14>)
   13d66:	691b      	ldr	r3, [r3, #16]
   13d68:	2004      	movs	r0, #4
   13d6a:	4798      	blx	r3
   13d6c:	46c0      	nop			; (mov r8, r8)
   13d6e:	46bd      	mov	sp, r7
   13d70:	bd80      	pop	{r7, pc}
   13d72:	46c0      	nop			; (mov r8, r8)
   13d74:	20003d50 	.word	0x20003d50

00013d78 <SERCOM5_Handler>:
   13d78:	b580      	push	{r7, lr}
   13d7a:	af00      	add	r7, sp, #0
   13d7c:	4b03      	ldr	r3, [pc, #12]	; (13d8c <SERCOM5_Handler+0x14>)
   13d7e:	695b      	ldr	r3, [r3, #20]
   13d80:	2005      	movs	r0, #5
   13d82:	4798      	blx	r3
   13d84:	46c0      	nop			; (mov r8, r8)
   13d86:	46bd      	mov	sp, r7
   13d88:	bd80      	pop	{r7, pc}
   13d8a:	46c0      	nop			; (mov r8, r8)
   13d8c:	20003d50 	.word	0x20003d50

00013d90 <system_pinmux_get_config_defaults>:
{
   13d90:	b580      	push	{r7, lr}
   13d92:	b082      	sub	sp, #8
   13d94:	af00      	add	r7, sp, #0
   13d96:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   13d98:	687b      	ldr	r3, [r7, #4]
   13d9a:	2280      	movs	r2, #128	; 0x80
   13d9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13d9e:	687b      	ldr	r3, [r7, #4]
   13da0:	2200      	movs	r2, #0
   13da2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   13da4:	687b      	ldr	r3, [r7, #4]
   13da6:	2201      	movs	r2, #1
   13da8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   13daa:	687b      	ldr	r3, [r7, #4]
   13dac:	2200      	movs	r2, #0
   13dae:	70da      	strb	r2, [r3, #3]
}
   13db0:	46c0      	nop			; (mov r8, r8)
   13db2:	46bd      	mov	sp, r7
   13db4:	b002      	add	sp, #8
   13db6:	bd80      	pop	{r7, pc}

00013db8 <system_pinmux_get_group_from_gpio_pin>:
{
   13db8:	b580      	push	{r7, lr}
   13dba:	b084      	sub	sp, #16
   13dbc:	af00      	add	r7, sp, #0
   13dbe:	0002      	movs	r2, r0
   13dc0:	1dfb      	adds	r3, r7, #7
   13dc2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13dc4:	230f      	movs	r3, #15
   13dc6:	18fb      	adds	r3, r7, r3
   13dc8:	1dfa      	adds	r2, r7, #7
   13dca:	7812      	ldrb	r2, [r2, #0]
   13dcc:	09d2      	lsrs	r2, r2, #7
   13dce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13dd0:	230e      	movs	r3, #14
   13dd2:	18fb      	adds	r3, r7, r3
   13dd4:	1dfa      	adds	r2, r7, #7
   13dd6:	7812      	ldrb	r2, [r2, #0]
   13dd8:	0952      	lsrs	r2, r2, #5
   13dda:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13ddc:	4b0d      	ldr	r3, [pc, #52]	; (13e14 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13dde:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13de0:	230f      	movs	r3, #15
   13de2:	18fb      	adds	r3, r7, r3
   13de4:	781b      	ldrb	r3, [r3, #0]
   13de6:	2b00      	cmp	r3, #0
   13de8:	d10f      	bne.n	13e0a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13dea:	230f      	movs	r3, #15
   13dec:	18fb      	adds	r3, r7, r3
   13dee:	781b      	ldrb	r3, [r3, #0]
   13df0:	009b      	lsls	r3, r3, #2
   13df2:	2210      	movs	r2, #16
   13df4:	4694      	mov	ip, r2
   13df6:	44bc      	add	ip, r7
   13df8:	4463      	add	r3, ip
   13dfa:	3b08      	subs	r3, #8
   13dfc:	681a      	ldr	r2, [r3, #0]
   13dfe:	230e      	movs	r3, #14
   13e00:	18fb      	adds	r3, r7, r3
   13e02:	781b      	ldrb	r3, [r3, #0]
   13e04:	01db      	lsls	r3, r3, #7
   13e06:	18d3      	adds	r3, r2, r3
   13e08:	e000      	b.n	13e0c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13e0a:	2300      	movs	r3, #0
}
   13e0c:	0018      	movs	r0, r3
   13e0e:	46bd      	mov	sp, r7
   13e10:	b004      	add	sp, #16
   13e12:	bd80      	pop	{r7, pc}
   13e14:	41004400 	.word	0x41004400

00013e18 <port_get_group_from_gpio_pin>:
{
   13e18:	b580      	push	{r7, lr}
   13e1a:	b082      	sub	sp, #8
   13e1c:	af00      	add	r7, sp, #0
   13e1e:	0002      	movs	r2, r0
   13e20:	1dfb      	adds	r3, r7, #7
   13e22:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13e24:	1dfb      	adds	r3, r7, #7
   13e26:	781b      	ldrb	r3, [r3, #0]
   13e28:	0018      	movs	r0, r3
   13e2a:	4b03      	ldr	r3, [pc, #12]	; (13e38 <port_get_group_from_gpio_pin+0x20>)
   13e2c:	4798      	blx	r3
   13e2e:	0003      	movs	r3, r0
}
   13e30:	0018      	movs	r0, r3
   13e32:	46bd      	mov	sp, r7
   13e34:	b002      	add	sp, #8
   13e36:	bd80      	pop	{r7, pc}
   13e38:	00013db9 	.word	0x00013db9

00013e3c <port_pin_set_output_level>:
{
   13e3c:	b580      	push	{r7, lr}
   13e3e:	b084      	sub	sp, #16
   13e40:	af00      	add	r7, sp, #0
   13e42:	0002      	movs	r2, r0
   13e44:	1dfb      	adds	r3, r7, #7
   13e46:	701a      	strb	r2, [r3, #0]
   13e48:	1dbb      	adds	r3, r7, #6
   13e4a:	1c0a      	adds	r2, r1, #0
   13e4c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13e4e:	1dfb      	adds	r3, r7, #7
   13e50:	781b      	ldrb	r3, [r3, #0]
   13e52:	0018      	movs	r0, r3
   13e54:	4b0d      	ldr	r3, [pc, #52]	; (13e8c <port_pin_set_output_level+0x50>)
   13e56:	4798      	blx	r3
   13e58:	0003      	movs	r3, r0
   13e5a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13e5c:	1dfb      	adds	r3, r7, #7
   13e5e:	781b      	ldrb	r3, [r3, #0]
   13e60:	221f      	movs	r2, #31
   13e62:	4013      	ands	r3, r2
   13e64:	2201      	movs	r2, #1
   13e66:	409a      	lsls	r2, r3
   13e68:	0013      	movs	r3, r2
   13e6a:	60bb      	str	r3, [r7, #8]
	if (level) {
   13e6c:	1dbb      	adds	r3, r7, #6
   13e6e:	781b      	ldrb	r3, [r3, #0]
   13e70:	2b00      	cmp	r3, #0
   13e72:	d003      	beq.n	13e7c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   13e74:	68fb      	ldr	r3, [r7, #12]
   13e76:	68ba      	ldr	r2, [r7, #8]
   13e78:	619a      	str	r2, [r3, #24]
}
   13e7a:	e002      	b.n	13e82 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   13e7c:	68fb      	ldr	r3, [r7, #12]
   13e7e:	68ba      	ldr	r2, [r7, #8]
   13e80:	615a      	str	r2, [r3, #20]
}
   13e82:	46c0      	nop			; (mov r8, r8)
   13e84:	46bd      	mov	sp, r7
   13e86:	b004      	add	sp, #16
   13e88:	bd80      	pop	{r7, pc}
   13e8a:	46c0      	nop			; (mov r8, r8)
   13e8c:	00013e19 	.word	0x00013e19

00013e90 <system_gclk_chan_get_config_defaults>:
{
   13e90:	b580      	push	{r7, lr}
   13e92:	b082      	sub	sp, #8
   13e94:	af00      	add	r7, sp, #0
   13e96:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13e98:	687b      	ldr	r3, [r7, #4]
   13e9a:	2200      	movs	r2, #0
   13e9c:	701a      	strb	r2, [r3, #0]
}
   13e9e:	46c0      	nop			; (mov r8, r8)
   13ea0:	46bd      	mov	sp, r7
   13ea2:	b002      	add	sp, #8
   13ea4:	bd80      	pop	{r7, pc}
	...

00013ea8 <system_apb_clock_set_mask>:
{
   13ea8:	b580      	push	{r7, lr}
   13eaa:	b082      	sub	sp, #8
   13eac:	af00      	add	r7, sp, #0
   13eae:	0002      	movs	r2, r0
   13eb0:	6039      	str	r1, [r7, #0]
   13eb2:	1dfb      	adds	r3, r7, #7
   13eb4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13eb6:	1dfb      	adds	r3, r7, #7
   13eb8:	781b      	ldrb	r3, [r3, #0]
   13eba:	2b01      	cmp	r3, #1
   13ebc:	d00a      	beq.n	13ed4 <system_apb_clock_set_mask+0x2c>
   13ebe:	2b02      	cmp	r3, #2
   13ec0:	d00f      	beq.n	13ee2 <system_apb_clock_set_mask+0x3a>
   13ec2:	2b00      	cmp	r3, #0
   13ec4:	d114      	bne.n	13ef0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   13ec6:	4b0e      	ldr	r3, [pc, #56]	; (13f00 <system_apb_clock_set_mask+0x58>)
   13ec8:	4a0d      	ldr	r2, [pc, #52]	; (13f00 <system_apb_clock_set_mask+0x58>)
   13eca:	6991      	ldr	r1, [r2, #24]
   13ecc:	683a      	ldr	r2, [r7, #0]
   13ece:	430a      	orrs	r2, r1
   13ed0:	619a      	str	r2, [r3, #24]
			break;
   13ed2:	e00f      	b.n	13ef4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   13ed4:	4b0a      	ldr	r3, [pc, #40]	; (13f00 <system_apb_clock_set_mask+0x58>)
   13ed6:	4a0a      	ldr	r2, [pc, #40]	; (13f00 <system_apb_clock_set_mask+0x58>)
   13ed8:	69d1      	ldr	r1, [r2, #28]
   13eda:	683a      	ldr	r2, [r7, #0]
   13edc:	430a      	orrs	r2, r1
   13ede:	61da      	str	r2, [r3, #28]
			break;
   13ee0:	e008      	b.n	13ef4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   13ee2:	4b07      	ldr	r3, [pc, #28]	; (13f00 <system_apb_clock_set_mask+0x58>)
   13ee4:	4a06      	ldr	r2, [pc, #24]	; (13f00 <system_apb_clock_set_mask+0x58>)
   13ee6:	6a11      	ldr	r1, [r2, #32]
   13ee8:	683a      	ldr	r2, [r7, #0]
   13eea:	430a      	orrs	r2, r1
   13eec:	621a      	str	r2, [r3, #32]
			break;
   13eee:	e001      	b.n	13ef4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   13ef0:	2317      	movs	r3, #23
   13ef2:	e000      	b.n	13ef6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   13ef4:	2300      	movs	r3, #0
}
   13ef6:	0018      	movs	r0, r3
   13ef8:	46bd      	mov	sp, r7
   13efa:	b002      	add	sp, #8
   13efc:	bd80      	pop	{r7, pc}
   13efe:	46c0      	nop			; (mov r8, r8)
   13f00:	40000400 	.word	0x40000400

00013f04 <system_is_debugger_present>:
{
   13f04:	b580      	push	{r7, lr}
   13f06:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   13f08:	4b05      	ldr	r3, [pc, #20]	; (13f20 <system_is_debugger_present+0x1c>)
   13f0a:	789b      	ldrb	r3, [r3, #2]
   13f0c:	b2db      	uxtb	r3, r3
   13f0e:	001a      	movs	r2, r3
   13f10:	2302      	movs	r3, #2
   13f12:	4013      	ands	r3, r2
   13f14:	1e5a      	subs	r2, r3, #1
   13f16:	4193      	sbcs	r3, r2
   13f18:	b2db      	uxtb	r3, r3
}
   13f1a:	0018      	movs	r0, r3
   13f1c:	46bd      	mov	sp, r7
   13f1e:	bd80      	pop	{r7, pc}
   13f20:	41002000 	.word	0x41002000

00013f24 <system_interrupt_enable>:
{
   13f24:	b580      	push	{r7, lr}
   13f26:	b082      	sub	sp, #8
   13f28:	af00      	add	r7, sp, #0
   13f2a:	0002      	movs	r2, r0
   13f2c:	1dfb      	adds	r3, r7, #7
   13f2e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13f30:	4b06      	ldr	r3, [pc, #24]	; (13f4c <system_interrupt_enable+0x28>)
   13f32:	1dfa      	adds	r2, r7, #7
   13f34:	7812      	ldrb	r2, [r2, #0]
   13f36:	0011      	movs	r1, r2
   13f38:	221f      	movs	r2, #31
   13f3a:	400a      	ands	r2, r1
   13f3c:	2101      	movs	r1, #1
   13f3e:	4091      	lsls	r1, r2
   13f40:	000a      	movs	r2, r1
   13f42:	601a      	str	r2, [r3, #0]
}
   13f44:	46c0      	nop			; (mov r8, r8)
   13f46:	46bd      	mov	sp, r7
   13f48:	b002      	add	sp, #8
   13f4a:	bd80      	pop	{r7, pc}
   13f4c:	e000e100 	.word	0xe000e100

00013f50 <system_interrupt_disable>:
{
   13f50:	b580      	push	{r7, lr}
   13f52:	b082      	sub	sp, #8
   13f54:	af00      	add	r7, sp, #0
   13f56:	0002      	movs	r2, r0
   13f58:	1dfb      	adds	r3, r7, #7
   13f5a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13f5c:	4a07      	ldr	r2, [pc, #28]	; (13f7c <system_interrupt_disable+0x2c>)
   13f5e:	1dfb      	adds	r3, r7, #7
   13f60:	781b      	ldrb	r3, [r3, #0]
   13f62:	0019      	movs	r1, r3
   13f64:	231f      	movs	r3, #31
   13f66:	400b      	ands	r3, r1
   13f68:	2101      	movs	r1, #1
   13f6a:	4099      	lsls	r1, r3
   13f6c:	000b      	movs	r3, r1
   13f6e:	0019      	movs	r1, r3
   13f70:	2380      	movs	r3, #128	; 0x80
   13f72:	50d1      	str	r1, [r2, r3]
}
   13f74:	46c0      	nop			; (mov r8, r8)
   13f76:	46bd      	mov	sp, r7
   13f78:	b002      	add	sp, #8
   13f7a:	bd80      	pop	{r7, pc}
   13f7c:	e000e100 	.word	0xe000e100

00013f80 <spi_is_syncing>:
{
   13f80:	b580      	push	{r7, lr}
   13f82:	b084      	sub	sp, #16
   13f84:	af00      	add	r7, sp, #0
   13f86:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13f88:	687b      	ldr	r3, [r7, #4]
   13f8a:	681b      	ldr	r3, [r3, #0]
   13f8c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   13f8e:	68fb      	ldr	r3, [r7, #12]
   13f90:	69db      	ldr	r3, [r3, #28]
   13f92:	1e5a      	subs	r2, r3, #1
   13f94:	4193      	sbcs	r3, r2
   13f96:	b2db      	uxtb	r3, r3
}
   13f98:	0018      	movs	r0, r3
   13f9a:	46bd      	mov	sp, r7
   13f9c:	b004      	add	sp, #16
   13f9e:	bd80      	pop	{r7, pc}

00013fa0 <spi_enable>:
{
   13fa0:	b580      	push	{r7, lr}
   13fa2:	b084      	sub	sp, #16
   13fa4:	af00      	add	r7, sp, #0
   13fa6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13fa8:	687b      	ldr	r3, [r7, #4]
   13faa:	681b      	ldr	r3, [r3, #0]
   13fac:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   13fae:	687b      	ldr	r3, [r7, #4]
   13fb0:	681b      	ldr	r3, [r3, #0]
   13fb2:	0018      	movs	r0, r3
   13fb4:	4b0b      	ldr	r3, [pc, #44]	; (13fe4 <spi_enable+0x44>)
   13fb6:	4798      	blx	r3
   13fb8:	0003      	movs	r3, r0
   13fba:	0018      	movs	r0, r3
   13fbc:	4b0a      	ldr	r3, [pc, #40]	; (13fe8 <spi_enable+0x48>)
   13fbe:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   13fc0:	46c0      	nop			; (mov r8, r8)
   13fc2:	687b      	ldr	r3, [r7, #4]
   13fc4:	0018      	movs	r0, r3
   13fc6:	4b09      	ldr	r3, [pc, #36]	; (13fec <spi_enable+0x4c>)
   13fc8:	4798      	blx	r3
   13fca:	1e03      	subs	r3, r0, #0
   13fcc:	d1f9      	bne.n	13fc2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   13fce:	68fb      	ldr	r3, [r7, #12]
   13fd0:	681b      	ldr	r3, [r3, #0]
   13fd2:	2202      	movs	r2, #2
   13fd4:	431a      	orrs	r2, r3
   13fd6:	68fb      	ldr	r3, [r7, #12]
   13fd8:	601a      	str	r2, [r3, #0]
}
   13fda:	46c0      	nop			; (mov r8, r8)
   13fdc:	46bd      	mov	sp, r7
   13fde:	b004      	add	sp, #16
   13fe0:	bd80      	pop	{r7, pc}
   13fe2:	46c0      	nop			; (mov r8, r8)
   13fe4:	00013cbd 	.word	0x00013cbd
   13fe8:	00013f25 	.word	0x00013f25
   13fec:	00013f81 	.word	0x00013f81

00013ff0 <spi_disable>:
{
   13ff0:	b580      	push	{r7, lr}
   13ff2:	b084      	sub	sp, #16
   13ff4:	af00      	add	r7, sp, #0
   13ff6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13ff8:	687b      	ldr	r3, [r7, #4]
   13ffa:	681b      	ldr	r3, [r3, #0]
   13ffc:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   13ffe:	687b      	ldr	r3, [r7, #4]
   14000:	681b      	ldr	r3, [r3, #0]
   14002:	0018      	movs	r0, r3
   14004:	4b0e      	ldr	r3, [pc, #56]	; (14040 <spi_disable+0x50>)
   14006:	4798      	blx	r3
   14008:	0003      	movs	r3, r0
   1400a:	0018      	movs	r0, r3
   1400c:	4b0d      	ldr	r3, [pc, #52]	; (14044 <spi_disable+0x54>)
   1400e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   14010:	46c0      	nop			; (mov r8, r8)
   14012:	687b      	ldr	r3, [r7, #4]
   14014:	0018      	movs	r0, r3
   14016:	4b0c      	ldr	r3, [pc, #48]	; (14048 <spi_disable+0x58>)
   14018:	4798      	blx	r3
   1401a:	1e03      	subs	r3, r0, #0
   1401c:	d1f9      	bne.n	14012 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1401e:	68fb      	ldr	r3, [r7, #12]
   14020:	228f      	movs	r2, #143	; 0x8f
   14022:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   14024:	68fb      	ldr	r3, [r7, #12]
   14026:	228f      	movs	r2, #143	; 0x8f
   14028:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1402a:	68fb      	ldr	r3, [r7, #12]
   1402c:	681b      	ldr	r3, [r3, #0]
   1402e:	2202      	movs	r2, #2
   14030:	4393      	bics	r3, r2
   14032:	001a      	movs	r2, r3
   14034:	68fb      	ldr	r3, [r7, #12]
   14036:	601a      	str	r2, [r3, #0]
}
   14038:	46c0      	nop			; (mov r8, r8)
   1403a:	46bd      	mov	sp, r7
   1403c:	b004      	add	sp, #16
   1403e:	bd80      	pop	{r7, pc}
   14040:	00013cbd 	.word	0x00013cbd
   14044:	00013f51 	.word	0x00013f51
   14048:	00013f81 	.word	0x00013f81

0001404c <spi_is_write_complete>:
{
   1404c:	b580      	push	{r7, lr}
   1404e:	b084      	sub	sp, #16
   14050:	af00      	add	r7, sp, #0
   14052:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14054:	687b      	ldr	r3, [r7, #4]
   14056:	681b      	ldr	r3, [r3, #0]
   14058:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1405a:	68fb      	ldr	r3, [r7, #12]
   1405c:	7e1b      	ldrb	r3, [r3, #24]
   1405e:	b2db      	uxtb	r3, r3
   14060:	001a      	movs	r2, r3
   14062:	2302      	movs	r3, #2
   14064:	4013      	ands	r3, r2
   14066:	1e5a      	subs	r2, r3, #1
   14068:	4193      	sbcs	r3, r2
   1406a:	b2db      	uxtb	r3, r3
}
   1406c:	0018      	movs	r0, r3
   1406e:	46bd      	mov	sp, r7
   14070:	b004      	add	sp, #16
   14072:	bd80      	pop	{r7, pc}

00014074 <spi_is_ready_to_write>:
{
   14074:	b580      	push	{r7, lr}
   14076:	b084      	sub	sp, #16
   14078:	af00      	add	r7, sp, #0
   1407a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1407c:	687b      	ldr	r3, [r7, #4]
   1407e:	681b      	ldr	r3, [r3, #0]
   14080:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   14082:	68fb      	ldr	r3, [r7, #12]
   14084:	7e1b      	ldrb	r3, [r3, #24]
   14086:	b2db      	uxtb	r3, r3
   14088:	001a      	movs	r2, r3
   1408a:	2301      	movs	r3, #1
   1408c:	4013      	ands	r3, r2
   1408e:	1e5a      	subs	r2, r3, #1
   14090:	4193      	sbcs	r3, r2
   14092:	b2db      	uxtb	r3, r3
}
   14094:	0018      	movs	r0, r3
   14096:	46bd      	mov	sp, r7
   14098:	b004      	add	sp, #16
   1409a:	bd80      	pop	{r7, pc}

0001409c <spi_is_ready_to_read>:
{
   1409c:	b580      	push	{r7, lr}
   1409e:	b084      	sub	sp, #16
   140a0:	af00      	add	r7, sp, #0
   140a2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   140a4:	687b      	ldr	r3, [r7, #4]
   140a6:	681b      	ldr	r3, [r3, #0]
   140a8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   140aa:	68fb      	ldr	r3, [r7, #12]
   140ac:	7e1b      	ldrb	r3, [r3, #24]
   140ae:	b2db      	uxtb	r3, r3
   140b0:	001a      	movs	r2, r3
   140b2:	2304      	movs	r3, #4
   140b4:	4013      	ands	r3, r2
   140b6:	1e5a      	subs	r2, r3, #1
   140b8:	4193      	sbcs	r3, r2
   140ba:	b2db      	uxtb	r3, r3
}
   140bc:	0018      	movs	r0, r3
   140be:	46bd      	mov	sp, r7
   140c0:	b004      	add	sp, #16
   140c2:	bd80      	pop	{r7, pc}

000140c4 <spi_write>:
{
   140c4:	b580      	push	{r7, lr}
   140c6:	b084      	sub	sp, #16
   140c8:	af00      	add	r7, sp, #0
   140ca:	6078      	str	r0, [r7, #4]
   140cc:	000a      	movs	r2, r1
   140ce:	1cbb      	adds	r3, r7, #2
   140d0:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   140d2:	687b      	ldr	r3, [r7, #4]
   140d4:	681b      	ldr	r3, [r3, #0]
   140d6:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   140d8:	687b      	ldr	r3, [r7, #4]
   140da:	0018      	movs	r0, r3
   140dc:	4b0a      	ldr	r3, [pc, #40]	; (14108 <spi_write+0x44>)
   140de:	4798      	blx	r3
   140e0:	0003      	movs	r3, r0
   140e2:	001a      	movs	r2, r3
   140e4:	2301      	movs	r3, #1
   140e6:	4053      	eors	r3, r2
   140e8:	b2db      	uxtb	r3, r3
   140ea:	2b00      	cmp	r3, #0
   140ec:	d001      	beq.n	140f2 <spi_write+0x2e>
		return STATUS_BUSY;
   140ee:	2305      	movs	r3, #5
   140f0:	e006      	b.n	14100 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   140f2:	1cbb      	adds	r3, r7, #2
   140f4:	881b      	ldrh	r3, [r3, #0]
   140f6:	05db      	lsls	r3, r3, #23
   140f8:	0dda      	lsrs	r2, r3, #23
   140fa:	68fb      	ldr	r3, [r7, #12]
   140fc:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   140fe:	2300      	movs	r3, #0
}
   14100:	0018      	movs	r0, r3
   14102:	46bd      	mov	sp, r7
   14104:	b004      	add	sp, #16
   14106:	bd80      	pop	{r7, pc}
   14108:	00014075 	.word	0x00014075

0001410c <spi_read>:
{
   1410c:	b580      	push	{r7, lr}
   1410e:	b084      	sub	sp, #16
   14110:	af00      	add	r7, sp, #0
   14112:	6078      	str	r0, [r7, #4]
   14114:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14116:	687b      	ldr	r3, [r7, #4]
   14118:	681b      	ldr	r3, [r3, #0]
   1411a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   1411c:	687b      	ldr	r3, [r7, #4]
   1411e:	0018      	movs	r0, r3
   14120:	4b1b      	ldr	r3, [pc, #108]	; (14190 <spi_read+0x84>)
   14122:	4798      	blx	r3
   14124:	0003      	movs	r3, r0
   14126:	001a      	movs	r2, r3
   14128:	2301      	movs	r3, #1
   1412a:	4053      	eors	r3, r2
   1412c:	b2db      	uxtb	r3, r3
   1412e:	2b00      	cmp	r3, #0
   14130:	d001      	beq.n	14136 <spi_read+0x2a>
		return STATUS_ERR_IO;
   14132:	2310      	movs	r3, #16
   14134:	e027      	b.n	14186 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   14136:	230f      	movs	r3, #15
   14138:	18fb      	adds	r3, r7, r3
   1413a:	2200      	movs	r2, #0
   1413c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1413e:	68bb      	ldr	r3, [r7, #8]
   14140:	8b5b      	ldrh	r3, [r3, #26]
   14142:	b29b      	uxth	r3, r3
   14144:	001a      	movs	r2, r3
   14146:	2304      	movs	r3, #4
   14148:	4013      	ands	r3, r2
   1414a:	d006      	beq.n	1415a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1414c:	230f      	movs	r3, #15
   1414e:	18fb      	adds	r3, r7, r3
   14150:	221e      	movs	r2, #30
   14152:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   14154:	68bb      	ldr	r3, [r7, #8]
   14156:	2204      	movs	r2, #4
   14158:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1415a:	687b      	ldr	r3, [r7, #4]
   1415c:	799b      	ldrb	r3, [r3, #6]
   1415e:	2b01      	cmp	r3, #1
   14160:	d108      	bne.n	14174 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   14162:	68bb      	ldr	r3, [r7, #8]
   14164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14166:	b29b      	uxth	r3, r3
   14168:	05db      	lsls	r3, r3, #23
   1416a:	0ddb      	lsrs	r3, r3, #23
   1416c:	b29a      	uxth	r2, r3
   1416e:	683b      	ldr	r3, [r7, #0]
   14170:	801a      	strh	r2, [r3, #0]
   14172:	e005      	b.n	14180 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   14174:	68bb      	ldr	r3, [r7, #8]
   14176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14178:	b2db      	uxtb	r3, r3
   1417a:	b29a      	uxth	r2, r3
   1417c:	683b      	ldr	r3, [r7, #0]
   1417e:	801a      	strh	r2, [r3, #0]
	return retval;
   14180:	230f      	movs	r3, #15
   14182:	18fb      	adds	r3, r7, r3
   14184:	781b      	ldrb	r3, [r3, #0]
}
   14186:	0018      	movs	r0, r3
   14188:	46bd      	mov	sp, r7
   1418a:	b004      	add	sp, #16
   1418c:	bd80      	pop	{r7, pc}
   1418e:	46c0      	nop			; (mov r8, r8)
   14190:	0001409d 	.word	0x0001409d

00014194 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   14194:	b590      	push	{r4, r7, lr}
   14196:	b089      	sub	sp, #36	; 0x24
   14198:	af00      	add	r7, sp, #0
   1419a:	6078      	str	r0, [r7, #4]
   1419c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1419e:	230c      	movs	r3, #12
   141a0:	18fb      	adds	r3, r7, r3
   141a2:	2200      	movs	r2, #0
   141a4:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   141a6:	687b      	ldr	r3, [r7, #4]
   141a8:	681b      	ldr	r3, [r3, #0]
   141aa:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   141ac:	687b      	ldr	r3, [r7, #4]
   141ae:	0018      	movs	r0, r3
   141b0:	4b24      	ldr	r3, [pc, #144]	; (14244 <spi_set_baudrate+0xb0>)
   141b2:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   141b4:	46c0      	nop			; (mov r8, r8)
   141b6:	687b      	ldr	r3, [r7, #4]
   141b8:	0018      	movs	r0, r3
   141ba:	4b23      	ldr	r3, [pc, #140]	; (14248 <spi_set_baudrate+0xb4>)
   141bc:	4798      	blx	r3
   141be:	1e03      	subs	r3, r0, #0
   141c0:	d1f9      	bne.n	141b6 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   141c2:	687b      	ldr	r3, [r7, #4]
   141c4:	681b      	ldr	r3, [r3, #0]
   141c6:	0018      	movs	r0, r3
   141c8:	4b20      	ldr	r3, [pc, #128]	; (1424c <spi_set_baudrate+0xb8>)
   141ca:	4798      	blx	r3
   141cc:	0003      	movs	r3, r0
   141ce:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   141d0:	69bb      	ldr	r3, [r7, #24]
   141d2:	3314      	adds	r3, #20
   141d4:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   141d6:	697b      	ldr	r3, [r7, #20]
   141d8:	b2db      	uxtb	r3, r3
   141da:	0018      	movs	r0, r3
   141dc:	4b1c      	ldr	r3, [pc, #112]	; (14250 <spi_set_baudrate+0xbc>)
   141de:	4798      	blx	r3
   141e0:	0003      	movs	r3, r0
   141e2:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   141e4:	230f      	movs	r3, #15
   141e6:	18fc      	adds	r4, r7, r3
   141e8:	230c      	movs	r3, #12
   141ea:	18fa      	adds	r2, r7, r3
   141ec:	6939      	ldr	r1, [r7, #16]
   141ee:	683b      	ldr	r3, [r7, #0]
   141f0:	0018      	movs	r0, r3
   141f2:	4b18      	ldr	r3, [pc, #96]	; (14254 <spi_set_baudrate+0xc0>)
   141f4:	4798      	blx	r3
   141f6:	0003      	movs	r3, r0
   141f8:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   141fa:	230f      	movs	r3, #15
   141fc:	18fb      	adds	r3, r7, r3
   141fe:	781b      	ldrb	r3, [r3, #0]
   14200:	2b00      	cmp	r3, #0
   14202:	d001      	beq.n	14208 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   14204:	2317      	movs	r3, #23
   14206:	e018      	b.n	1423a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   14208:	230c      	movs	r3, #12
   1420a:	18fb      	adds	r3, r7, r3
   1420c:	881b      	ldrh	r3, [r3, #0]
   1420e:	b2da      	uxtb	r2, r3
   14210:	69fb      	ldr	r3, [r7, #28]
   14212:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   14214:	46c0      	nop			; (mov r8, r8)
   14216:	687b      	ldr	r3, [r7, #4]
   14218:	0018      	movs	r0, r3
   1421a:	4b0b      	ldr	r3, [pc, #44]	; (14248 <spi_set_baudrate+0xb4>)
   1421c:	4798      	blx	r3
   1421e:	1e03      	subs	r3, r0, #0
   14220:	d1f9      	bne.n	14216 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   14222:	687b      	ldr	r3, [r7, #4]
   14224:	0018      	movs	r0, r3
   14226:	4b0c      	ldr	r3, [pc, #48]	; (14258 <spi_set_baudrate+0xc4>)
   14228:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   1422a:	46c0      	nop			; (mov r8, r8)
   1422c:	687b      	ldr	r3, [r7, #4]
   1422e:	0018      	movs	r0, r3
   14230:	4b05      	ldr	r3, [pc, #20]	; (14248 <spi_set_baudrate+0xb4>)
   14232:	4798      	blx	r3
   14234:	1e03      	subs	r3, r0, #0
   14236:	d1f9      	bne.n	1422c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   14238:	2300      	movs	r3, #0
}
   1423a:	0018      	movs	r0, r3
   1423c:	46bd      	mov	sp, r7
   1423e:	b009      	add	sp, #36	; 0x24
   14240:	bd90      	pop	{r4, r7, pc}
   14242:	46c0      	nop			; (mov r8, r8)
   14244:	00013ff1 	.word	0x00013ff1
   14248:	00013f81 	.word	0x00013f81
   1424c:	00013bed 	.word	0x00013bed
   14250:	000165a1 	.word	0x000165a1
   14254:	00013767 	.word	0x00013767
   14258:	00013fa1 	.word	0x00013fa1

0001425c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   1425c:	b590      	push	{r4, r7, lr}
   1425e:	b093      	sub	sp, #76	; 0x4c
   14260:	af00      	add	r7, sp, #0
   14262:	6078      	str	r0, [r7, #4]
   14264:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   14266:	687b      	ldr	r3, [r7, #4]
   14268:	681b      	ldr	r3, [r3, #0]
   1426a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   1426c:	687b      	ldr	r3, [r7, #4]
   1426e:	681b      	ldr	r3, [r3, #0]
   14270:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   14272:	231c      	movs	r3, #28
   14274:	18fb      	adds	r3, r7, r3
   14276:	0018      	movs	r0, r3
   14278:	4b75      	ldr	r3, [pc, #468]	; (14450 <_spi_set_config+0x1f4>)
   1427a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1427c:	231c      	movs	r3, #28
   1427e:	18fb      	adds	r3, r7, r3
   14280:	2200      	movs	r2, #0
   14282:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   14284:	683b      	ldr	r3, [r7, #0]
   14286:	781b      	ldrb	r3, [r3, #0]
   14288:	2b00      	cmp	r3, #0
   1428a:	d103      	bne.n	14294 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1428c:	231c      	movs	r3, #28
   1428e:	18fb      	adds	r3, r7, r3
   14290:	2200      	movs	r2, #0
   14292:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   14294:	683b      	ldr	r3, [r7, #0]
   14296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   14298:	230c      	movs	r3, #12
   1429a:	18fb      	adds	r3, r7, r3
   1429c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   1429e:	683b      	ldr	r3, [r7, #0]
   142a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   142a2:	230c      	movs	r3, #12
   142a4:	18fb      	adds	r3, r7, r3
   142a6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   142a8:	683b      	ldr	r3, [r7, #0]
   142aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   142ac:	230c      	movs	r3, #12
   142ae:	18fb      	adds	r3, r7, r3
   142b0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   142b2:	683b      	ldr	r3, [r7, #0]
   142b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   142b6:	230c      	movs	r3, #12
   142b8:	18fb      	adds	r3, r7, r3
   142ba:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   142bc:	2347      	movs	r3, #71	; 0x47
   142be:	18fb      	adds	r3, r7, r3
   142c0:	2200      	movs	r2, #0
   142c2:	701a      	strb	r2, [r3, #0]
   142c4:	e02c      	b.n	14320 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   142c6:	2347      	movs	r3, #71	; 0x47
   142c8:	18fb      	adds	r3, r7, r3
   142ca:	781a      	ldrb	r2, [r3, #0]
   142cc:	230c      	movs	r3, #12
   142ce:	18fb      	adds	r3, r7, r3
   142d0:	0092      	lsls	r2, r2, #2
   142d2:	58d3      	ldr	r3, [r2, r3]
   142d4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   142d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   142d8:	2b00      	cmp	r3, #0
   142da:	d109      	bne.n	142f0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   142dc:	2347      	movs	r3, #71	; 0x47
   142de:	18fb      	adds	r3, r7, r3
   142e0:	781a      	ldrb	r2, [r3, #0]
   142e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   142e4:	0011      	movs	r1, r2
   142e6:	0018      	movs	r0, r3
   142e8:	4b5a      	ldr	r3, [pc, #360]	; (14454 <_spi_set_config+0x1f8>)
   142ea:	4798      	blx	r3
   142ec:	0003      	movs	r3, r0
   142ee:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   142f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   142f2:	3301      	adds	r3, #1
   142f4:	d00d      	beq.n	14312 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   142f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   142f8:	b2da      	uxtb	r2, r3
   142fa:	231c      	movs	r3, #28
   142fc:	18fb      	adds	r3, r7, r3
   142fe:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   14300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14302:	0c1b      	lsrs	r3, r3, #16
   14304:	b2db      	uxtb	r3, r3
   14306:	221c      	movs	r2, #28
   14308:	18ba      	adds	r2, r7, r2
   1430a:	0011      	movs	r1, r2
   1430c:	0018      	movs	r0, r3
   1430e:	4b52      	ldr	r3, [pc, #328]	; (14458 <_spi_set_config+0x1fc>)
   14310:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   14312:	2347      	movs	r3, #71	; 0x47
   14314:	18fb      	adds	r3, r7, r3
   14316:	781a      	ldrb	r2, [r3, #0]
   14318:	2347      	movs	r3, #71	; 0x47
   1431a:	18fb      	adds	r3, r7, r3
   1431c:	3201      	adds	r2, #1
   1431e:	701a      	strb	r2, [r3, #0]
   14320:	2347      	movs	r3, #71	; 0x47
   14322:	18fb      	adds	r3, r7, r3
   14324:	781b      	ldrb	r3, [r3, #0]
   14326:	2b03      	cmp	r3, #3
   14328:	d9cd      	bls.n	142c6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   1432a:	683b      	ldr	r3, [r7, #0]
   1432c:	781a      	ldrb	r2, [r3, #0]
   1432e:	687b      	ldr	r3, [r7, #4]
   14330:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   14332:	683b      	ldr	r3, [r7, #0]
   14334:	7c1a      	ldrb	r2, [r3, #16]
   14336:	687b      	ldr	r3, [r7, #4]
   14338:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   1433a:	683b      	ldr	r3, [r7, #0]
   1433c:	7c9a      	ldrb	r2, [r3, #18]
   1433e:	687b      	ldr	r3, [r7, #4]
   14340:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   14342:	683b      	ldr	r3, [r7, #0]
   14344:	7d1a      	ldrb	r2, [r3, #20]
   14346:	687b      	ldr	r3, [r7, #4]
   14348:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1434a:	230a      	movs	r3, #10
   1434c:	18fb      	adds	r3, r7, r3
   1434e:	2200      	movs	r2, #0
   14350:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   14352:	2300      	movs	r3, #0
   14354:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   14356:	2300      	movs	r3, #0
   14358:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   1435a:	683b      	ldr	r3, [r7, #0]
   1435c:	781b      	ldrb	r3, [r3, #0]
   1435e:	2b01      	cmp	r3, #1
   14360:	d129      	bne.n	143b6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14362:	687b      	ldr	r3, [r7, #4]
   14364:	681b      	ldr	r3, [r3, #0]
   14366:	0018      	movs	r0, r3
   14368:	4b3c      	ldr	r3, [pc, #240]	; (1445c <_spi_set_config+0x200>)
   1436a:	4798      	blx	r3
   1436c:	0003      	movs	r3, r0
   1436e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14372:	3314      	adds	r3, #20
   14374:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   14376:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14378:	b2db      	uxtb	r3, r3
   1437a:	0018      	movs	r0, r3
   1437c:	4b38      	ldr	r3, [pc, #224]	; (14460 <_spi_set_config+0x204>)
   1437e:	4798      	blx	r3
   14380:	0003      	movs	r3, r0
   14382:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   14384:	683b      	ldr	r3, [r7, #0]
   14386:	699b      	ldr	r3, [r3, #24]
   14388:	2223      	movs	r2, #35	; 0x23
   1438a:	18bc      	adds	r4, r7, r2
   1438c:	220a      	movs	r2, #10
   1438e:	18ba      	adds	r2, r7, r2
   14390:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14392:	0018      	movs	r0, r3
   14394:	4b33      	ldr	r3, [pc, #204]	; (14464 <_spi_set_config+0x208>)
   14396:	4798      	blx	r3
   14398:	0003      	movs	r3, r0
   1439a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   1439c:	2323      	movs	r3, #35	; 0x23
   1439e:	18fb      	adds	r3, r7, r3
   143a0:	781b      	ldrb	r3, [r3, #0]
   143a2:	2b00      	cmp	r3, #0
   143a4:	d001      	beq.n	143aa <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   143a6:	2317      	movs	r3, #23
   143a8:	e04e      	b.n	14448 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   143aa:	230a      	movs	r3, #10
   143ac:	18fb      	adds	r3, r7, r3
   143ae:	881b      	ldrh	r3, [r3, #0]
   143b0:	b2da      	uxtb	r2, r3
   143b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   143b4:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   143b6:	683b      	ldr	r3, [r7, #0]
   143b8:	685b      	ldr	r3, [r3, #4]
   143ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   143bc:	4313      	orrs	r3, r2
   143be:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   143c0:	683b      	ldr	r3, [r7, #0]
   143c2:	689b      	ldr	r3, [r3, #8]
   143c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   143c6:	4313      	orrs	r3, r2
   143c8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   143ca:	683b      	ldr	r3, [r7, #0]
   143cc:	68db      	ldr	r3, [r3, #12]
   143ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   143d0:	4313      	orrs	r3, r2
   143d2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   143d4:	683b      	ldr	r3, [r7, #0]
   143d6:	7c1b      	ldrb	r3, [r3, #16]
   143d8:	001a      	movs	r2, r3
   143da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   143dc:	4313      	orrs	r3, r2
   143de:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   143e0:	683b      	ldr	r3, [r7, #0]
   143e2:	7c5b      	ldrb	r3, [r3, #17]
   143e4:	2b00      	cmp	r3, #0
   143e6:	d103      	bne.n	143f0 <_spi_set_config+0x194>
   143e8:	4b1f      	ldr	r3, [pc, #124]	; (14468 <_spi_set_config+0x20c>)
   143ea:	4798      	blx	r3
   143ec:	1e03      	subs	r3, r0, #0
   143ee:	d003      	beq.n	143f8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   143f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   143f2:	2280      	movs	r2, #128	; 0x80
   143f4:	4313      	orrs	r3, r2
   143f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   143f8:	683b      	ldr	r3, [r7, #0]
   143fa:	7c9b      	ldrb	r3, [r3, #18]
   143fc:	2b00      	cmp	r3, #0
   143fe:	d004      	beq.n	1440a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   14400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14402:	2280      	movs	r2, #128	; 0x80
   14404:	0292      	lsls	r2, r2, #10
   14406:	4313      	orrs	r3, r2
   14408:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   1440a:	683b      	ldr	r3, [r7, #0]
   1440c:	7cdb      	ldrb	r3, [r3, #19]
   1440e:	2b00      	cmp	r3, #0
   14410:	d004      	beq.n	1441c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   14412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14414:	2280      	movs	r2, #128	; 0x80
   14416:	0092      	lsls	r2, r2, #2
   14418:	4313      	orrs	r3, r2
   1441a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   1441c:	683b      	ldr	r3, [r7, #0]
   1441e:	7d1b      	ldrb	r3, [r3, #20]
   14420:	2b00      	cmp	r3, #0
   14422:	d004      	beq.n	1442e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   14424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14426:	2280      	movs	r2, #128	; 0x80
   14428:	0192      	lsls	r2, r2, #6
   1442a:	4313      	orrs	r3, r2
   1442c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   1442e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14430:	681a      	ldr	r2, [r3, #0]
   14432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14434:	431a      	orrs	r2, r3
   14436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14438:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   1443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1443c:	685a      	ldr	r2, [r3, #4]
   1443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14440:	431a      	orrs	r2, r3
   14442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14444:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   14446:	2300      	movs	r3, #0
}
   14448:	0018      	movs	r0, r3
   1444a:	46bd      	mov	sp, r7
   1444c:	b013      	add	sp, #76	; 0x4c
   1444e:	bd90      	pop	{r4, r7, pc}
   14450:	00013d91 	.word	0x00013d91
   14454:	00013a31 	.word	0x00013a31
   14458:	000167dd 	.word	0x000167dd
   1445c:	00013bed 	.word	0x00013bed
   14460:	000165a1 	.word	0x000165a1
   14464:	00013767 	.word	0x00013767
   14468:	00013f05 	.word	0x00013f05

0001446c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   1446c:	b590      	push	{r4, r7, lr}
   1446e:	b08b      	sub	sp, #44	; 0x2c
   14470:	af00      	add	r7, sp, #0
   14472:	60f8      	str	r0, [r7, #12]
   14474:	60b9      	str	r1, [r7, #8]
   14476:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   14478:	68fb      	ldr	r3, [r7, #12]
   1447a:	68ba      	ldr	r2, [r7, #8]
   1447c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   1447e:	68fb      	ldr	r3, [r7, #12]
   14480:	681b      	ldr	r3, [r3, #0]
   14482:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   14484:	6a3b      	ldr	r3, [r7, #32]
   14486:	681b      	ldr	r3, [r3, #0]
   14488:	2202      	movs	r2, #2
   1448a:	4013      	ands	r3, r2
   1448c:	d001      	beq.n	14492 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   1448e:	231c      	movs	r3, #28
   14490:	e09c      	b.n	145cc <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   14492:	6a3b      	ldr	r3, [r7, #32]
   14494:	681b      	ldr	r3, [r3, #0]
   14496:	2201      	movs	r2, #1
   14498:	4013      	ands	r3, r2
   1449a:	d001      	beq.n	144a0 <spi_init+0x34>
		return STATUS_BUSY;
   1449c:	2305      	movs	r3, #5
   1449e:	e095      	b.n	145cc <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   144a0:	68fb      	ldr	r3, [r7, #12]
   144a2:	681b      	ldr	r3, [r3, #0]
   144a4:	0018      	movs	r0, r3
   144a6:	4b4b      	ldr	r3, [pc, #300]	; (145d4 <spi_init+0x168>)
   144a8:	4798      	blx	r3
   144aa:	0003      	movs	r3, r0
   144ac:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   144ae:	69fb      	ldr	r3, [r7, #28]
   144b0:	3302      	adds	r3, #2
   144b2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   144b4:	69fb      	ldr	r3, [r7, #28]
   144b6:	3314      	adds	r3, #20
   144b8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   144ba:	2201      	movs	r2, #1
   144bc:	69bb      	ldr	r3, [r7, #24]
   144be:	409a      	lsls	r2, r3
   144c0:	0013      	movs	r3, r2
   144c2:	0019      	movs	r1, r3
   144c4:	2002      	movs	r0, #2
   144c6:	4b44      	ldr	r3, [pc, #272]	; (145d8 <spi_init+0x16c>)
   144c8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   144ca:	2310      	movs	r3, #16
   144cc:	18fb      	adds	r3, r7, r3
   144ce:	0018      	movs	r0, r3
   144d0:	4b42      	ldr	r3, [pc, #264]	; (145dc <spi_init+0x170>)
   144d2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   144d4:	687b      	ldr	r3, [r7, #4]
   144d6:	2224      	movs	r2, #36	; 0x24
   144d8:	5c9a      	ldrb	r2, [r3, r2]
   144da:	2310      	movs	r3, #16
   144dc:	18fb      	adds	r3, r7, r3
   144de:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   144e0:	697b      	ldr	r3, [r7, #20]
   144e2:	b2db      	uxtb	r3, r3
   144e4:	2210      	movs	r2, #16
   144e6:	18ba      	adds	r2, r7, r2
   144e8:	0011      	movs	r1, r2
   144ea:	0018      	movs	r0, r3
   144ec:	4b3c      	ldr	r3, [pc, #240]	; (145e0 <spi_init+0x174>)
   144ee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   144f0:	697b      	ldr	r3, [r7, #20]
   144f2:	b2db      	uxtb	r3, r3
   144f4:	0018      	movs	r0, r3
   144f6:	4b3b      	ldr	r3, [pc, #236]	; (145e4 <spi_init+0x178>)
   144f8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   144fa:	687b      	ldr	r3, [r7, #4]
   144fc:	2224      	movs	r2, #36	; 0x24
   144fe:	5c9b      	ldrb	r3, [r3, r2]
   14500:	2100      	movs	r1, #0
   14502:	0018      	movs	r0, r3
   14504:	4b38      	ldr	r3, [pc, #224]	; (145e8 <spi_init+0x17c>)
   14506:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   14508:	687b      	ldr	r3, [r7, #4]
   1450a:	781b      	ldrb	r3, [r3, #0]
   1450c:	2b01      	cmp	r3, #1
   1450e:	d105      	bne.n	1451c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   14510:	6a3b      	ldr	r3, [r7, #32]
   14512:	681b      	ldr	r3, [r3, #0]
   14514:	220c      	movs	r2, #12
   14516:	431a      	orrs	r2, r3
   14518:	6a3b      	ldr	r3, [r7, #32]
   1451a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   1451c:	2327      	movs	r3, #39	; 0x27
   1451e:	18fb      	adds	r3, r7, r3
   14520:	2200      	movs	r2, #0
   14522:	701a      	strb	r2, [r3, #0]
   14524:	e010      	b.n	14548 <spi_init+0xdc>
		module->callback[i]        = NULL;
   14526:	2327      	movs	r3, #39	; 0x27
   14528:	18fb      	adds	r3, r7, r3
   1452a:	781b      	ldrb	r3, [r3, #0]
   1452c:	68fa      	ldr	r2, [r7, #12]
   1452e:	3302      	adds	r3, #2
   14530:	009b      	lsls	r3, r3, #2
   14532:	18d3      	adds	r3, r2, r3
   14534:	3304      	adds	r3, #4
   14536:	2200      	movs	r2, #0
   14538:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   1453a:	2327      	movs	r3, #39	; 0x27
   1453c:	18fb      	adds	r3, r7, r3
   1453e:	781a      	ldrb	r2, [r3, #0]
   14540:	2327      	movs	r3, #39	; 0x27
   14542:	18fb      	adds	r3, r7, r3
   14544:	3201      	adds	r2, #1
   14546:	701a      	strb	r2, [r3, #0]
   14548:	2327      	movs	r3, #39	; 0x27
   1454a:	18fb      	adds	r3, r7, r3
   1454c:	781b      	ldrb	r3, [r3, #0]
   1454e:	2b06      	cmp	r3, #6
   14550:	d9e9      	bls.n	14526 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   14552:	68fb      	ldr	r3, [r7, #12]
   14554:	2200      	movs	r2, #0
   14556:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   14558:	68fb      	ldr	r3, [r7, #12]
   1455a:	2200      	movs	r2, #0
   1455c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   1455e:	68fb      	ldr	r3, [r7, #12]
   14560:	2200      	movs	r2, #0
   14562:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   14564:	68fb      	ldr	r3, [r7, #12]
   14566:	2200      	movs	r2, #0
   14568:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   1456a:	68fb      	ldr	r3, [r7, #12]
   1456c:	2236      	movs	r2, #54	; 0x36
   1456e:	2100      	movs	r1, #0
   14570:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   14572:	68fb      	ldr	r3, [r7, #12]
   14574:	2237      	movs	r2, #55	; 0x37
   14576:	2100      	movs	r1, #0
   14578:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   1457a:	68fb      	ldr	r3, [r7, #12]
   1457c:	2238      	movs	r2, #56	; 0x38
   1457e:	2100      	movs	r1, #0
   14580:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   14582:	68fb      	ldr	r3, [r7, #12]
   14584:	2203      	movs	r2, #3
   14586:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   14588:	68fb      	ldr	r3, [r7, #12]
   1458a:	2200      	movs	r2, #0
   1458c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   1458e:	68fb      	ldr	r3, [r7, #12]
   14590:	681b      	ldr	r3, [r3, #0]
   14592:	2213      	movs	r2, #19
   14594:	18bc      	adds	r4, r7, r2
   14596:	0018      	movs	r0, r3
   14598:	4b0e      	ldr	r3, [pc, #56]	; (145d4 <spi_init+0x168>)
   1459a:	4798      	blx	r3
   1459c:	0003      	movs	r3, r0
   1459e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   145a0:	4a12      	ldr	r2, [pc, #72]	; (145ec <spi_init+0x180>)
   145a2:	2313      	movs	r3, #19
   145a4:	18fb      	adds	r3, r7, r3
   145a6:	781b      	ldrb	r3, [r3, #0]
   145a8:	0011      	movs	r1, r2
   145aa:	0018      	movs	r0, r3
   145ac:	4b10      	ldr	r3, [pc, #64]	; (145f0 <spi_init+0x184>)
   145ae:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   145b0:	2313      	movs	r3, #19
   145b2:	18fb      	adds	r3, r7, r3
   145b4:	781a      	ldrb	r2, [r3, #0]
   145b6:	4b0f      	ldr	r3, [pc, #60]	; (145f4 <spi_init+0x188>)
   145b8:	0092      	lsls	r2, r2, #2
   145ba:	68f9      	ldr	r1, [r7, #12]
   145bc:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   145be:	687a      	ldr	r2, [r7, #4]
   145c0:	68fb      	ldr	r3, [r7, #12]
   145c2:	0011      	movs	r1, r2
   145c4:	0018      	movs	r0, r3
   145c6:	4b0c      	ldr	r3, [pc, #48]	; (145f8 <spi_init+0x18c>)
   145c8:	4798      	blx	r3
   145ca:	0003      	movs	r3, r0
}
   145cc:	0018      	movs	r0, r3
   145ce:	46bd      	mov	sp, r7
   145d0:	b00b      	add	sp, #44	; 0x2c
   145d2:	bd90      	pop	{r4, r7, pc}
   145d4:	00013bed 	.word	0x00013bed
   145d8:	00013ea9 	.word	0x00013ea9
   145dc:	00013e91 	.word	0x00013e91
   145e0:	0001647d 	.word	0x0001647d
   145e4:	000164c1 	.word	0x000164c1
   145e8:	000139a5 	.word	0x000139a5
   145ec:	00014ac5 	.word	0x00014ac5
   145f0:	00013c51 	.word	0x00013c51
   145f4:	20005648 	.word	0x20005648
   145f8:	0001425d 	.word	0x0001425d

000145fc <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   145fc:	b590      	push	{r4, r7, lr}
   145fe:	b087      	sub	sp, #28
   14600:	af00      	add	r7, sp, #0
   14602:	60f8      	str	r0, [r7, #12]
   14604:	60b9      	str	r1, [r7, #8]
   14606:	0019      	movs	r1, r3
   14608:	1dbb      	adds	r3, r7, #6
   1460a:	801a      	strh	r2, [r3, #0]
   1460c:	1d3b      	adds	r3, r7, #4
   1460e:	1c0a      	adds	r2, r1, #0
   14610:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   14612:	68fb      	ldr	r3, [r7, #12]
   14614:	2238      	movs	r2, #56	; 0x38
   14616:	5c9b      	ldrb	r3, [r3, r2]
   14618:	b2db      	uxtb	r3, r3
   1461a:	2b05      	cmp	r3, #5
   1461c:	d101      	bne.n	14622 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1461e:	2305      	movs	r3, #5
   14620:	e07a      	b.n	14718 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   14622:	1dbb      	adds	r3, r7, #6
   14624:	881b      	ldrh	r3, [r3, #0]
   14626:	2b00      	cmp	r3, #0
   14628:	d101      	bne.n	1462e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   1462a:	2317      	movs	r3, #23
   1462c:	e074      	b.n	14718 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   1462e:	68fb      	ldr	r3, [r7, #12]
   14630:	79db      	ldrb	r3, [r3, #7]
   14632:	2201      	movs	r2, #1
   14634:	4053      	eors	r3, r2
   14636:	b2db      	uxtb	r3, r3
   14638:	2b00      	cmp	r3, #0
   1463a:	d001      	beq.n	14640 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   1463c:	231c      	movs	r3, #28
   1463e:	e06b      	b.n	14718 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   14640:	2316      	movs	r3, #22
   14642:	18fb      	adds	r3, r7, r3
   14644:	2200      	movs	r2, #0
   14646:	801a      	strh	r2, [r3, #0]

	while (length--) {
   14648:	e05e      	b.n	14708 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   1464a:	68fb      	ldr	r3, [r7, #12]
   1464c:	795b      	ldrb	r3, [r3, #5]
   1464e:	2b01      	cmp	r3, #1
   14650:	d112      	bne.n	14678 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   14652:	46c0      	nop			; (mov r8, r8)
   14654:	68fb      	ldr	r3, [r7, #12]
   14656:	0018      	movs	r0, r3
   14658:	4b31      	ldr	r3, [pc, #196]	; (14720 <spi_read_buffer_wait+0x124>)
   1465a:	4798      	blx	r3
   1465c:	0003      	movs	r3, r0
   1465e:	001a      	movs	r2, r3
   14660:	2301      	movs	r3, #1
   14662:	4053      	eors	r3, r2
   14664:	b2db      	uxtb	r3, r3
   14666:	2b00      	cmp	r3, #0
   14668:	d1f4      	bne.n	14654 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   1466a:	1d3b      	adds	r3, r7, #4
   1466c:	881a      	ldrh	r2, [r3, #0]
   1466e:	68fb      	ldr	r3, [r7, #12]
   14670:	0011      	movs	r1, r2
   14672:	0018      	movs	r0, r3
   14674:	4b2b      	ldr	r3, [pc, #172]	; (14724 <spi_read_buffer_wait+0x128>)
   14676:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   14678:	46c0      	nop			; (mov r8, r8)
   1467a:	68fb      	ldr	r3, [r7, #12]
   1467c:	0018      	movs	r0, r3
   1467e:	4b2a      	ldr	r3, [pc, #168]	; (14728 <spi_read_buffer_wait+0x12c>)
   14680:	4798      	blx	r3
   14682:	0003      	movs	r3, r0
   14684:	001a      	movs	r2, r3
   14686:	2301      	movs	r3, #1
   14688:	4053      	eors	r3, r2
   1468a:	b2db      	uxtb	r3, r3
   1468c:	2b00      	cmp	r3, #0
   1468e:	d1f4      	bne.n	1467a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   14690:	2312      	movs	r3, #18
   14692:	18fb      	adds	r3, r7, r3
   14694:	2200      	movs	r2, #0
   14696:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   14698:	2315      	movs	r3, #21
   1469a:	18fc      	adds	r4, r7, r3
   1469c:	2312      	movs	r3, #18
   1469e:	18fa      	adds	r2, r7, r3
   146a0:	68fb      	ldr	r3, [r7, #12]
   146a2:	0011      	movs	r1, r2
   146a4:	0018      	movs	r0, r3
   146a6:	4b21      	ldr	r3, [pc, #132]	; (1472c <spi_read_buffer_wait+0x130>)
   146a8:	4798      	blx	r3
   146aa:	0003      	movs	r3, r0
   146ac:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   146ae:	2315      	movs	r3, #21
   146b0:	18fb      	adds	r3, r7, r3
   146b2:	781b      	ldrb	r3, [r3, #0]
   146b4:	2b00      	cmp	r3, #0
   146b6:	d003      	beq.n	146c0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   146b8:	2315      	movs	r3, #21
   146ba:	18fb      	adds	r3, r7, r3
   146bc:	781b      	ldrb	r3, [r3, #0]
   146be:	e02b      	b.n	14718 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   146c0:	2316      	movs	r3, #22
   146c2:	18fb      	adds	r3, r7, r3
   146c4:	881b      	ldrh	r3, [r3, #0]
   146c6:	2216      	movs	r2, #22
   146c8:	18ba      	adds	r2, r7, r2
   146ca:	1c59      	adds	r1, r3, #1
   146cc:	8011      	strh	r1, [r2, #0]
   146ce:	001a      	movs	r2, r3
   146d0:	68bb      	ldr	r3, [r7, #8]
   146d2:	189b      	adds	r3, r3, r2
   146d4:	2212      	movs	r2, #18
   146d6:	18ba      	adds	r2, r7, r2
   146d8:	8812      	ldrh	r2, [r2, #0]
   146da:	b2d2      	uxtb	r2, r2
   146dc:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   146de:	68fb      	ldr	r3, [r7, #12]
   146e0:	799b      	ldrb	r3, [r3, #6]
   146e2:	2b01      	cmp	r3, #1
   146e4:	d110      	bne.n	14708 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   146e6:	2316      	movs	r3, #22
   146e8:	18fb      	adds	r3, r7, r3
   146ea:	881b      	ldrh	r3, [r3, #0]
   146ec:	2216      	movs	r2, #22
   146ee:	18ba      	adds	r2, r7, r2
   146f0:	1c59      	adds	r1, r3, #1
   146f2:	8011      	strh	r1, [r2, #0]
   146f4:	001a      	movs	r2, r3
   146f6:	68bb      	ldr	r3, [r7, #8]
   146f8:	189b      	adds	r3, r3, r2
   146fa:	2212      	movs	r2, #18
   146fc:	18ba      	adds	r2, r7, r2
   146fe:	8812      	ldrh	r2, [r2, #0]
   14700:	0a12      	lsrs	r2, r2, #8
   14702:	b292      	uxth	r2, r2
   14704:	b2d2      	uxtb	r2, r2
   14706:	701a      	strb	r2, [r3, #0]
	while (length--) {
   14708:	1dbb      	adds	r3, r7, #6
   1470a:	881b      	ldrh	r3, [r3, #0]
   1470c:	1dba      	adds	r2, r7, #6
   1470e:	1e59      	subs	r1, r3, #1
   14710:	8011      	strh	r1, [r2, #0]
   14712:	2b00      	cmp	r3, #0
   14714:	d199      	bne.n	1464a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   14716:	2300      	movs	r3, #0
}
   14718:	0018      	movs	r0, r3
   1471a:	46bd      	mov	sp, r7
   1471c:	b007      	add	sp, #28
   1471e:	bd90      	pop	{r4, r7, pc}
   14720:	00014075 	.word	0x00014075
   14724:	000140c5 	.word	0x000140c5
   14728:	0001409d 	.word	0x0001409d
   1472c:	0001410d 	.word	0x0001410d

00014730 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   14730:	b580      	push	{r7, lr}
   14732:	b086      	sub	sp, #24
   14734:	af00      	add	r7, sp, #0
   14736:	60f8      	str	r0, [r7, #12]
   14738:	60b9      	str	r1, [r7, #8]
   1473a:	1dfb      	adds	r3, r7, #7
   1473c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1473e:	68fb      	ldr	r3, [r7, #12]
   14740:	795b      	ldrb	r3, [r3, #5]
   14742:	2b01      	cmp	r3, #1
   14744:	d001      	beq.n	1474a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   14746:	2315      	movs	r3, #21
   14748:	e05c      	b.n	14804 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   1474a:	68fb      	ldr	r3, [r7, #12]
   1474c:	7a1b      	ldrb	r3, [r3, #8]
   1474e:	2201      	movs	r2, #1
   14750:	4053      	eors	r3, r2
   14752:	b2db      	uxtb	r3, r3
   14754:	2b00      	cmp	r3, #0
   14756:	d054      	beq.n	14802 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   14758:	1dfb      	adds	r3, r7, #7
   1475a:	781b      	ldrb	r3, [r3, #0]
   1475c:	2b00      	cmp	r3, #0
   1475e:	d04a      	beq.n	147f6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   14760:	68bb      	ldr	r3, [r7, #8]
   14762:	785b      	ldrb	r3, [r3, #1]
   14764:	2b00      	cmp	r3, #0
   14766:	d03f      	beq.n	147e8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   14768:	68fb      	ldr	r3, [r7, #12]
   1476a:	0018      	movs	r0, r3
   1476c:	4b27      	ldr	r3, [pc, #156]	; (1480c <spi_select_slave+0xdc>)
   1476e:	4798      	blx	r3
   14770:	0003      	movs	r3, r0
   14772:	001a      	movs	r2, r3
   14774:	2301      	movs	r3, #1
   14776:	4053      	eors	r3, r2
   14778:	b2db      	uxtb	r3, r3
   1477a:	2b00      	cmp	r3, #0
   1477c:	d007      	beq.n	1478e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   1477e:	68bb      	ldr	r3, [r7, #8]
   14780:	781b      	ldrb	r3, [r3, #0]
   14782:	2101      	movs	r1, #1
   14784:	0018      	movs	r0, r3
   14786:	4b22      	ldr	r3, [pc, #136]	; (14810 <spi_select_slave+0xe0>)
   14788:	4798      	blx	r3
					return STATUS_BUSY;
   1478a:	2305      	movs	r3, #5
   1478c:	e03a      	b.n	14804 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   1478e:	68bb      	ldr	r3, [r7, #8]
   14790:	781b      	ldrb	r3, [r3, #0]
   14792:	2100      	movs	r1, #0
   14794:	0018      	movs	r0, r3
   14796:	4b1e      	ldr	r3, [pc, #120]	; (14810 <spi_select_slave+0xe0>)
   14798:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   1479a:	68bb      	ldr	r3, [r7, #8]
   1479c:	789b      	ldrb	r3, [r3, #2]
   1479e:	b29a      	uxth	r2, r3
   147a0:	68fb      	ldr	r3, [r7, #12]
   147a2:	0011      	movs	r1, r2
   147a4:	0018      	movs	r0, r3
   147a6:	4b1b      	ldr	r3, [pc, #108]	; (14814 <spi_select_slave+0xe4>)
   147a8:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   147aa:	68fb      	ldr	r3, [r7, #12]
   147ac:	79db      	ldrb	r3, [r3, #7]
   147ae:	2201      	movs	r2, #1
   147b0:	4053      	eors	r3, r2
   147b2:	b2db      	uxtb	r3, r3
   147b4:	2b00      	cmp	r3, #0
   147b6:	d024      	beq.n	14802 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   147b8:	46c0      	nop			; (mov r8, r8)
   147ba:	68fb      	ldr	r3, [r7, #12]
   147bc:	0018      	movs	r0, r3
   147be:	4b16      	ldr	r3, [pc, #88]	; (14818 <spi_select_slave+0xe8>)
   147c0:	4798      	blx	r3
   147c2:	0003      	movs	r3, r0
   147c4:	001a      	movs	r2, r3
   147c6:	2301      	movs	r3, #1
   147c8:	4053      	eors	r3, r2
   147ca:	b2db      	uxtb	r3, r3
   147cc:	2b00      	cmp	r3, #0
   147ce:	d1f4      	bne.n	147ba <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   147d0:	2316      	movs	r3, #22
   147d2:	18fb      	adds	r3, r7, r3
   147d4:	2200      	movs	r2, #0
   147d6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   147d8:	2316      	movs	r3, #22
   147da:	18fa      	adds	r2, r7, r3
   147dc:	68fb      	ldr	r3, [r7, #12]
   147de:	0011      	movs	r1, r2
   147e0:	0018      	movs	r0, r3
   147e2:	4b0e      	ldr	r3, [pc, #56]	; (1481c <spi_select_slave+0xec>)
   147e4:	4798      	blx	r3
   147e6:	e00c      	b.n	14802 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   147e8:	68bb      	ldr	r3, [r7, #8]
   147ea:	781b      	ldrb	r3, [r3, #0]
   147ec:	2100      	movs	r1, #0
   147ee:	0018      	movs	r0, r3
   147f0:	4b07      	ldr	r3, [pc, #28]	; (14810 <spi_select_slave+0xe0>)
   147f2:	4798      	blx	r3
   147f4:	e005      	b.n	14802 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   147f6:	68bb      	ldr	r3, [r7, #8]
   147f8:	781b      	ldrb	r3, [r3, #0]
   147fa:	2101      	movs	r1, #1
   147fc:	0018      	movs	r0, r3
   147fe:	4b04      	ldr	r3, [pc, #16]	; (14810 <spi_select_slave+0xe0>)
   14800:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   14802:	2300      	movs	r3, #0
}
   14804:	0018      	movs	r0, r3
   14806:	46bd      	mov	sp, r7
   14808:	b006      	add	sp, #24
   1480a:	bd80      	pop	{r7, pc}
   1480c:	00014075 	.word	0x00014075
   14810:	00013e3d 	.word	0x00013e3d
   14814:	000140c5 	.word	0x000140c5
   14818:	0001409d 	.word	0x0001409d
   1481c:	0001410d 	.word	0x0001410d

00014820 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   14820:	b580      	push	{r7, lr}
   14822:	b086      	sub	sp, #24
   14824:	af00      	add	r7, sp, #0
   14826:	60f8      	str	r0, [r7, #12]
   14828:	60b9      	str	r1, [r7, #8]
   1482a:	1dbb      	adds	r3, r7, #6
   1482c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1482e:	68fb      	ldr	r3, [r7, #12]
   14830:	2238      	movs	r2, #56	; 0x38
   14832:	5c9b      	ldrb	r3, [r3, r2]
   14834:	b2db      	uxtb	r3, r3
   14836:	2b05      	cmp	r3, #5
   14838:	d101      	bne.n	1483e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1483a:	2305      	movs	r3, #5
   1483c:	e087      	b.n	1494e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   1483e:	1dbb      	adds	r3, r7, #6
   14840:	881b      	ldrh	r3, [r3, #0]
   14842:	2b00      	cmp	r3, #0
   14844:	d101      	bne.n	1484a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   14846:	2317      	movs	r3, #23
   14848:	e081      	b.n	1494e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   1484a:	2316      	movs	r3, #22
   1484c:	18fb      	adds	r3, r7, r3
   1484e:	2200      	movs	r2, #0
   14850:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   14852:	2314      	movs	r3, #20
   14854:	18fb      	adds	r3, r7, r3
   14856:	1dba      	adds	r2, r7, #6
   14858:	8812      	ldrh	r2, [r2, #0]
   1485a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   1485c:	e05f      	b.n	1491e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   1485e:	46c0      	nop			; (mov r8, r8)
   14860:	68fb      	ldr	r3, [r7, #12]
   14862:	0018      	movs	r0, r3
   14864:	4b3c      	ldr	r3, [pc, #240]	; (14958 <spi_write_buffer_wait+0x138>)
   14866:	4798      	blx	r3
   14868:	0003      	movs	r3, r0
   1486a:	001a      	movs	r2, r3
   1486c:	2301      	movs	r3, #1
   1486e:	4053      	eors	r3, r2
   14870:	b2db      	uxtb	r3, r3
   14872:	2b00      	cmp	r3, #0
   14874:	d1f4      	bne.n	14860 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   14876:	2316      	movs	r3, #22
   14878:	18fb      	adds	r3, r7, r3
   1487a:	881b      	ldrh	r3, [r3, #0]
   1487c:	2216      	movs	r2, #22
   1487e:	18ba      	adds	r2, r7, r2
   14880:	1c59      	adds	r1, r3, #1
   14882:	8011      	strh	r1, [r2, #0]
   14884:	001a      	movs	r2, r3
   14886:	68bb      	ldr	r3, [r7, #8]
   14888:	189b      	adds	r3, r3, r2
   1488a:	781a      	ldrb	r2, [r3, #0]
   1488c:	2312      	movs	r3, #18
   1488e:	18fb      	adds	r3, r7, r3
   14890:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14892:	68fb      	ldr	r3, [r7, #12]
   14894:	799b      	ldrb	r3, [r3, #6]
   14896:	2b01      	cmp	r3, #1
   14898:	d115      	bne.n	148c6 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   1489a:	2316      	movs	r3, #22
   1489c:	18fb      	adds	r3, r7, r3
   1489e:	881b      	ldrh	r3, [r3, #0]
   148a0:	2216      	movs	r2, #22
   148a2:	18ba      	adds	r2, r7, r2
   148a4:	1c59      	adds	r1, r3, #1
   148a6:	8011      	strh	r1, [r2, #0]
   148a8:	001a      	movs	r2, r3
   148aa:	68bb      	ldr	r3, [r7, #8]
   148ac:	189b      	adds	r3, r3, r2
   148ae:	781b      	ldrb	r3, [r3, #0]
   148b0:	021b      	lsls	r3, r3, #8
   148b2:	b21a      	sxth	r2, r3
   148b4:	2312      	movs	r3, #18
   148b6:	18fb      	adds	r3, r7, r3
   148b8:	2100      	movs	r1, #0
   148ba:	5e5b      	ldrsh	r3, [r3, r1]
   148bc:	4313      	orrs	r3, r2
   148be:	b21a      	sxth	r2, r3
   148c0:	2312      	movs	r3, #18
   148c2:	18fb      	adds	r3, r7, r3
   148c4:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   148c6:	2312      	movs	r3, #18
   148c8:	18fb      	adds	r3, r7, r3
   148ca:	881a      	ldrh	r2, [r3, #0]
   148cc:	68fb      	ldr	r3, [r7, #12]
   148ce:	0011      	movs	r1, r2
   148d0:	0018      	movs	r0, r3
   148d2:	4b22      	ldr	r3, [pc, #136]	; (1495c <spi_write_buffer_wait+0x13c>)
   148d4:	4798      	blx	r3

		if (module->receiver_enabled) {
   148d6:	68fb      	ldr	r3, [r7, #12]
   148d8:	79db      	ldrb	r3, [r3, #7]
   148da:	2214      	movs	r2, #20
   148dc:	18ba      	adds	r2, r7, r2
   148de:	2114      	movs	r1, #20
   148e0:	1879      	adds	r1, r7, r1
   148e2:	8809      	ldrh	r1, [r1, #0]
   148e4:	8011      	strh	r1, [r2, #0]
   148e6:	2b00      	cmp	r3, #0
   148e8:	d019      	beq.n	1491e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   148ea:	46c0      	nop			; (mov r8, r8)
   148ec:	68fb      	ldr	r3, [r7, #12]
   148ee:	0018      	movs	r0, r3
   148f0:	4b1b      	ldr	r3, [pc, #108]	; (14960 <spi_write_buffer_wait+0x140>)
   148f2:	4798      	blx	r3
   148f4:	0003      	movs	r3, r0
   148f6:	001a      	movs	r2, r3
   148f8:	2301      	movs	r3, #1
   148fa:	4053      	eors	r3, r2
   148fc:	b2db      	uxtb	r3, r3
   148fe:	2b00      	cmp	r3, #0
   14900:	d1f4      	bne.n	148ec <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   14902:	2310      	movs	r3, #16
   14904:	18fa      	adds	r2, r7, r3
   14906:	68fb      	ldr	r3, [r7, #12]
   14908:	0011      	movs	r1, r2
   1490a:	0018      	movs	r0, r3
   1490c:	4b15      	ldr	r3, [pc, #84]	; (14964 <spi_write_buffer_wait+0x144>)
   1490e:	4798      	blx	r3
			flush_length--;
   14910:	2314      	movs	r3, #20
   14912:	18fb      	adds	r3, r7, r3
   14914:	881a      	ldrh	r2, [r3, #0]
   14916:	2314      	movs	r3, #20
   14918:	18fb      	adds	r3, r7, r3
   1491a:	3a01      	subs	r2, #1
   1491c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   1491e:	1dbb      	adds	r3, r7, #6
   14920:	881b      	ldrh	r3, [r3, #0]
   14922:	1dba      	adds	r2, r7, #6
   14924:	1e59      	subs	r1, r3, #1
   14926:	8011      	strh	r1, [r2, #0]
   14928:	2b00      	cmp	r3, #0
   1492a:	d198      	bne.n	1485e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   1492c:	68fb      	ldr	r3, [r7, #12]
   1492e:	795b      	ldrb	r3, [r3, #5]
   14930:	2b01      	cmp	r3, #1
   14932:	d10b      	bne.n	1494c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   14934:	46c0      	nop			; (mov r8, r8)
   14936:	68fb      	ldr	r3, [r7, #12]
   14938:	0018      	movs	r0, r3
   1493a:	4b0b      	ldr	r3, [pc, #44]	; (14968 <spi_write_buffer_wait+0x148>)
   1493c:	4798      	blx	r3
   1493e:	0003      	movs	r3, r0
   14940:	001a      	movs	r2, r3
   14942:	2301      	movs	r3, #1
   14944:	4053      	eors	r3, r2
   14946:	b2db      	uxtb	r3, r3
   14948:	2b00      	cmp	r3, #0
   1494a:	d1f4      	bne.n	14936 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   1494c:	2300      	movs	r3, #0
}
   1494e:	0018      	movs	r0, r3
   14950:	46bd      	mov	sp, r7
   14952:	b006      	add	sp, #24
   14954:	bd80      	pop	{r7, pc}
   14956:	46c0      	nop			; (mov r8, r8)
   14958:	00014075 	.word	0x00014075
   1495c:	000140c5 	.word	0x000140c5
   14960:	0001409d 	.word	0x0001409d
   14964:	0001410d 	.word	0x0001410d
   14968:	0001404d 	.word	0x0001404d

0001496c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   1496c:	b580      	push	{r7, lr}
   1496e:	b084      	sub	sp, #16
   14970:	af00      	add	r7, sp, #0
   14972:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   14974:	687b      	ldr	r3, [r7, #4]
   14976:	681b      	ldr	r3, [r3, #0]
   14978:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1497a:	687b      	ldr	r3, [r7, #4]
   1497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1497e:	781b      	ldrb	r3, [r3, #0]
   14980:	b2da      	uxtb	r2, r3
   14982:	230e      	movs	r3, #14
   14984:	18fb      	adds	r3, r7, r3
   14986:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   14988:	687b      	ldr	r3, [r7, #4]
   1498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1498c:	1c5a      	adds	r2, r3, #1
   1498e:	687b      	ldr	r3, [r7, #4]
   14990:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14992:	687b      	ldr	r3, [r7, #4]
   14994:	799b      	ldrb	r3, [r3, #6]
   14996:	2b01      	cmp	r3, #1
   14998:	d113      	bne.n	149c2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1499a:	687b      	ldr	r3, [r7, #4]
   1499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1499e:	781b      	ldrb	r3, [r3, #0]
   149a0:	b2db      	uxtb	r3, r3
   149a2:	021b      	lsls	r3, r3, #8
   149a4:	b21a      	sxth	r2, r3
   149a6:	230e      	movs	r3, #14
   149a8:	18fb      	adds	r3, r7, r3
   149aa:	2100      	movs	r1, #0
   149ac:	5e5b      	ldrsh	r3, [r3, r1]
   149ae:	4313      	orrs	r3, r2
   149b0:	b21a      	sxth	r2, r3
   149b2:	230e      	movs	r3, #14
   149b4:	18fb      	adds	r3, r7, r3
   149b6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   149b8:	687b      	ldr	r3, [r7, #4]
   149ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   149bc:	1c5a      	adds	r2, r3, #1
   149be:	687b      	ldr	r3, [r7, #4]
   149c0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   149c2:	230e      	movs	r3, #14
   149c4:	18fb      	adds	r3, r7, r3
   149c6:	881b      	ldrh	r3, [r3, #0]
   149c8:	05db      	lsls	r3, r3, #23
   149ca:	0dda      	lsrs	r2, r3, #23
   149cc:	68bb      	ldr	r3, [r7, #8]
   149ce:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   149d0:	687b      	ldr	r3, [r7, #4]
   149d2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   149d4:	b29b      	uxth	r3, r3
   149d6:	3b01      	subs	r3, #1
   149d8:	b29a      	uxth	r2, r3
   149da:	687b      	ldr	r3, [r7, #4]
   149dc:	869a      	strh	r2, [r3, #52]	; 0x34
}
   149de:	46c0      	nop			; (mov r8, r8)
   149e0:	46bd      	mov	sp, r7
   149e2:	b004      	add	sp, #16
   149e4:	bd80      	pop	{r7, pc}
	...

000149e8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   149e8:	b580      	push	{r7, lr}
   149ea:	b084      	sub	sp, #16
   149ec:	af00      	add	r7, sp, #0
   149ee:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   149f0:	687b      	ldr	r3, [r7, #4]
   149f2:	681b      	ldr	r3, [r3, #0]
   149f4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   149f6:	4b08      	ldr	r3, [pc, #32]	; (14a18 <_spi_write_dummy+0x30>)
   149f8:	881b      	ldrh	r3, [r3, #0]
   149fa:	001a      	movs	r2, r3
   149fc:	68fb      	ldr	r3, [r7, #12]
   149fe:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   14a00:	687b      	ldr	r3, [r7, #4]
   14a02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   14a04:	b29b      	uxth	r3, r3
   14a06:	3b01      	subs	r3, #1
   14a08:	b29a      	uxth	r2, r3
   14a0a:	687b      	ldr	r3, [r7, #4]
   14a0c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   14a0e:	46c0      	nop			; (mov r8, r8)
   14a10:	46bd      	mov	sp, r7
   14a12:	b004      	add	sp, #16
   14a14:	bd80      	pop	{r7, pc}
   14a16:	46c0      	nop			; (mov r8, r8)
   14a18:	20005660 	.word	0x20005660

00014a1c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   14a1c:	b580      	push	{r7, lr}
   14a1e:	b084      	sub	sp, #16
   14a20:	af00      	add	r7, sp, #0
   14a22:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   14a24:	687b      	ldr	r3, [r7, #4]
   14a26:	681b      	ldr	r3, [r3, #0]
   14a28:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   14a2a:	230a      	movs	r3, #10
   14a2c:	18fb      	adds	r3, r7, r3
   14a2e:	2200      	movs	r2, #0
   14a30:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   14a32:	68fb      	ldr	r3, [r7, #12]
   14a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14a36:	230a      	movs	r3, #10
   14a38:	18fb      	adds	r3, r7, r3
   14a3a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   14a3c:	687b      	ldr	r3, [r7, #4]
   14a3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   14a40:	b29b      	uxth	r3, r3
   14a42:	3b01      	subs	r3, #1
   14a44:	b29a      	uxth	r2, r3
   14a46:	687b      	ldr	r3, [r7, #4]
   14a48:	865a      	strh	r2, [r3, #50]	; 0x32
}
   14a4a:	46c0      	nop			; (mov r8, r8)
   14a4c:	46bd      	mov	sp, r7
   14a4e:	b004      	add	sp, #16
   14a50:	bd80      	pop	{r7, pc}

00014a52 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   14a52:	b580      	push	{r7, lr}
   14a54:	b084      	sub	sp, #16
   14a56:	af00      	add	r7, sp, #0
   14a58:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   14a5a:	687b      	ldr	r3, [r7, #4]
   14a5c:	681b      	ldr	r3, [r3, #0]
   14a5e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   14a60:	68fb      	ldr	r3, [r7, #12]
   14a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14a64:	b29a      	uxth	r2, r3
   14a66:	230a      	movs	r3, #10
   14a68:	18fb      	adds	r3, r7, r3
   14a6a:	05d2      	lsls	r2, r2, #23
   14a6c:	0dd2      	lsrs	r2, r2, #23
   14a6e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   14a70:	687b      	ldr	r3, [r7, #4]
   14a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14a74:	220a      	movs	r2, #10
   14a76:	18ba      	adds	r2, r7, r2
   14a78:	8812      	ldrh	r2, [r2, #0]
   14a7a:	b2d2      	uxtb	r2, r2
   14a7c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   14a7e:	687b      	ldr	r3, [r7, #4]
   14a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14a82:	1c5a      	adds	r2, r3, #1
   14a84:	687b      	ldr	r3, [r7, #4]
   14a86:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14a88:	687b      	ldr	r3, [r7, #4]
   14a8a:	799b      	ldrb	r3, [r3, #6]
   14a8c:	2b01      	cmp	r3, #1
   14a8e:	d10d      	bne.n	14aac <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   14a90:	687b      	ldr	r3, [r7, #4]
   14a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14a94:	220a      	movs	r2, #10
   14a96:	18ba      	adds	r2, r7, r2
   14a98:	8812      	ldrh	r2, [r2, #0]
   14a9a:	0a12      	lsrs	r2, r2, #8
   14a9c:	b292      	uxth	r2, r2
   14a9e:	b2d2      	uxtb	r2, r2
   14aa0:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   14aa2:	687b      	ldr	r3, [r7, #4]
   14aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14aa6:	1c5a      	adds	r2, r3, #1
   14aa8:	687b      	ldr	r3, [r7, #4]
   14aaa:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   14aac:	687b      	ldr	r3, [r7, #4]
   14aae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   14ab0:	b29b      	uxth	r3, r3
   14ab2:	3b01      	subs	r3, #1
   14ab4:	b29a      	uxth	r2, r3
   14ab6:	687b      	ldr	r3, [r7, #4]
   14ab8:	861a      	strh	r2, [r3, #48]	; 0x30
}
   14aba:	46c0      	nop			; (mov r8, r8)
   14abc:	46bd      	mov	sp, r7
   14abe:	b004      	add	sp, #16
   14ac0:	bd80      	pop	{r7, pc}
	...

00014ac4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   14ac4:	b580      	push	{r7, lr}
   14ac6:	b086      	sub	sp, #24
   14ac8:	af00      	add	r7, sp, #0
   14aca:	0002      	movs	r2, r0
   14acc:	1dfb      	adds	r3, r7, #7
   14ace:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   14ad0:	1dfb      	adds	r3, r7, #7
   14ad2:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   14ad4:	4b96      	ldr	r3, [pc, #600]	; (14d30 <_spi_interrupt_handler+0x26c>)
   14ad6:	0092      	lsls	r2, r2, #2
   14ad8:	58d3      	ldr	r3, [r2, r3]
   14ada:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   14adc:	697b      	ldr	r3, [r7, #20]
   14ade:	681b      	ldr	r3, [r3, #0]
   14ae0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   14ae2:	697b      	ldr	r3, [r7, #20]
   14ae4:	2237      	movs	r2, #55	; 0x37
   14ae6:	5c9a      	ldrb	r2, [r3, r2]
   14ae8:	697b      	ldr	r3, [r7, #20]
   14aea:	2136      	movs	r1, #54	; 0x36
   14aec:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   14aee:	230f      	movs	r3, #15
   14af0:	18fb      	adds	r3, r7, r3
   14af2:	400a      	ands	r2, r1
   14af4:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   14af6:	693b      	ldr	r3, [r7, #16]
   14af8:	7e1b      	ldrb	r3, [r3, #24]
   14afa:	b2da      	uxtb	r2, r3
   14afc:	230c      	movs	r3, #12
   14afe:	18fb      	adds	r3, r7, r3
   14b00:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   14b02:	693b      	ldr	r3, [r7, #16]
   14b04:	7d9b      	ldrb	r3, [r3, #22]
   14b06:	b2db      	uxtb	r3, r3
   14b08:	b29a      	uxth	r2, r3
   14b0a:	230c      	movs	r3, #12
   14b0c:	18fb      	adds	r3, r7, r3
   14b0e:	210c      	movs	r1, #12
   14b10:	1879      	adds	r1, r7, r1
   14b12:	8809      	ldrh	r1, [r1, #0]
   14b14:	400a      	ands	r2, r1
   14b16:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   14b18:	230c      	movs	r3, #12
   14b1a:	18fb      	adds	r3, r7, r3
   14b1c:	881b      	ldrh	r3, [r3, #0]
   14b1e:	2201      	movs	r2, #1
   14b20:	4013      	ands	r3, r2
   14b22:	d038      	beq.n	14b96 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   14b24:	697b      	ldr	r3, [r7, #20]
   14b26:	795b      	ldrb	r3, [r3, #5]
   14b28:	2b01      	cmp	r3, #1
   14b2a:	d110      	bne.n	14b4e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   14b2c:	697b      	ldr	r3, [r7, #20]
   14b2e:	7a5b      	ldrb	r3, [r3, #9]
   14b30:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   14b32:	2b00      	cmp	r3, #0
   14b34:	d10b      	bne.n	14b4e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   14b36:	697b      	ldr	r3, [r7, #20]
   14b38:	0018      	movs	r0, r3
   14b3a:	4b7e      	ldr	r3, [pc, #504]	; (14d34 <_spi_interrupt_handler+0x270>)
   14b3c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   14b3e:	697b      	ldr	r3, [r7, #20]
   14b40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   14b42:	b29b      	uxth	r3, r3
   14b44:	2b00      	cmp	r3, #0
   14b46:	d102      	bne.n	14b4e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   14b48:	693b      	ldr	r3, [r7, #16]
   14b4a:	2201      	movs	r2, #1
   14b4c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   14b4e:	697b      	ldr	r3, [r7, #20]
   14b50:	795b      	ldrb	r3, [r3, #5]
		if (0
   14b52:	2b01      	cmp	r3, #1
   14b54:	d11f      	bne.n	14b96 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   14b56:	697b      	ldr	r3, [r7, #20]
   14b58:	7a5b      	ldrb	r3, [r3, #9]
   14b5a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   14b5c:	2b00      	cmp	r3, #0
   14b5e:	d01a      	beq.n	14b96 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   14b60:	697b      	ldr	r3, [r7, #20]
   14b62:	0018      	movs	r0, r3
   14b64:	4b74      	ldr	r3, [pc, #464]	; (14d38 <_spi_interrupt_handler+0x274>)
   14b66:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   14b68:	697b      	ldr	r3, [r7, #20]
   14b6a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   14b6c:	b29b      	uxth	r3, r3
   14b6e:	2b00      	cmp	r3, #0
   14b70:	d111      	bne.n	14b96 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   14b72:	693b      	ldr	r3, [r7, #16]
   14b74:	2201      	movs	r2, #1
   14b76:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   14b78:	697b      	ldr	r3, [r7, #20]
   14b7a:	7a5b      	ldrb	r3, [r3, #9]
   14b7c:	b2db      	uxtb	r3, r3
   14b7e:	2b01      	cmp	r3, #1
   14b80:	d109      	bne.n	14b96 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   14b82:	697b      	ldr	r3, [r7, #20]
   14b84:	79db      	ldrb	r3, [r3, #7]
   14b86:	2201      	movs	r2, #1
   14b88:	4053      	eors	r3, r2
   14b8a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   14b8c:	2b00      	cmp	r3, #0
   14b8e:	d002      	beq.n	14b96 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   14b90:	693b      	ldr	r3, [r7, #16]
   14b92:	2202      	movs	r2, #2
   14b94:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   14b96:	230c      	movs	r3, #12
   14b98:	18fb      	adds	r3, r7, r3
   14b9a:	881b      	ldrh	r3, [r3, #0]
   14b9c:	2204      	movs	r2, #4
   14b9e:	4013      	ands	r3, r2
   14ba0:	d100      	bne.n	14ba4 <_spi_interrupt_handler+0xe0>
   14ba2:	e07e      	b.n	14ca2 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   14ba4:	693b      	ldr	r3, [r7, #16]
   14ba6:	8b5b      	ldrh	r3, [r3, #26]
   14ba8:	b29b      	uxth	r3, r3
   14baa:	001a      	movs	r2, r3
   14bac:	2304      	movs	r3, #4
   14bae:	4013      	ands	r3, r2
   14bb0:	d022      	beq.n	14bf8 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   14bb2:	697b      	ldr	r3, [r7, #20]
   14bb4:	7a5b      	ldrb	r3, [r3, #9]
   14bb6:	b2db      	uxtb	r3, r3
   14bb8:	2b01      	cmp	r3, #1
   14bba:	d014      	beq.n	14be6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   14bbc:	697b      	ldr	r3, [r7, #20]
   14bbe:	2238      	movs	r2, #56	; 0x38
   14bc0:	211e      	movs	r1, #30
   14bc2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   14bc4:	697b      	ldr	r3, [r7, #20]
   14bc6:	2203      	movs	r2, #3
   14bc8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   14bca:	693b      	ldr	r3, [r7, #16]
   14bcc:	2205      	movs	r2, #5
   14bce:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   14bd0:	230f      	movs	r3, #15
   14bd2:	18fb      	adds	r3, r7, r3
   14bd4:	781b      	ldrb	r3, [r3, #0]
   14bd6:	2208      	movs	r2, #8
   14bd8:	4013      	ands	r3, r2
   14bda:	d004      	beq.n	14be6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   14bdc:	697b      	ldr	r3, [r7, #20]
   14bde:	699b      	ldr	r3, [r3, #24]
   14be0:	697a      	ldr	r2, [r7, #20]
   14be2:	0010      	movs	r0, r2
   14be4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   14be6:	693b      	ldr	r3, [r7, #16]
   14be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14bea:	230a      	movs	r3, #10
   14bec:	18fb      	adds	r3, r7, r3
   14bee:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   14bf0:	693b      	ldr	r3, [r7, #16]
   14bf2:	2204      	movs	r2, #4
   14bf4:	835a      	strh	r2, [r3, #26]
   14bf6:	e054      	b.n	14ca2 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   14bf8:	697b      	ldr	r3, [r7, #20]
   14bfa:	7a5b      	ldrb	r3, [r3, #9]
   14bfc:	b2db      	uxtb	r3, r3
   14bfe:	2b01      	cmp	r3, #1
   14c00:	d11e      	bne.n	14c40 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   14c02:	697b      	ldr	r3, [r7, #20]
   14c04:	0018      	movs	r0, r3
   14c06:	4b4d      	ldr	r3, [pc, #308]	; (14d3c <_spi_interrupt_handler+0x278>)
   14c08:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   14c0a:	697b      	ldr	r3, [r7, #20]
   14c0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   14c0e:	b29b      	uxth	r3, r3
   14c10:	2b00      	cmp	r3, #0
   14c12:	d146      	bne.n	14ca2 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   14c14:	693b      	ldr	r3, [r7, #16]
   14c16:	2204      	movs	r2, #4
   14c18:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   14c1a:	697b      	ldr	r3, [r7, #20]
   14c1c:	2238      	movs	r2, #56	; 0x38
   14c1e:	2100      	movs	r1, #0
   14c20:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   14c22:	697b      	ldr	r3, [r7, #20]
   14c24:	2203      	movs	r2, #3
   14c26:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   14c28:	230f      	movs	r3, #15
   14c2a:	18fb      	adds	r3, r7, r3
   14c2c:	781b      	ldrb	r3, [r3, #0]
   14c2e:	2201      	movs	r2, #1
   14c30:	4013      	ands	r3, r2
   14c32:	d036      	beq.n	14ca2 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   14c34:	697b      	ldr	r3, [r7, #20]
   14c36:	68db      	ldr	r3, [r3, #12]
   14c38:	697a      	ldr	r2, [r7, #20]
   14c3a:	0010      	movs	r0, r2
   14c3c:	4798      	blx	r3
   14c3e:	e030      	b.n	14ca2 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   14c40:	697b      	ldr	r3, [r7, #20]
   14c42:	0018      	movs	r0, r3
   14c44:	4b3e      	ldr	r3, [pc, #248]	; (14d40 <_spi_interrupt_handler+0x27c>)
   14c46:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   14c48:	697b      	ldr	r3, [r7, #20]
   14c4a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   14c4c:	b29b      	uxth	r3, r3
   14c4e:	2b00      	cmp	r3, #0
   14c50:	d127      	bne.n	14ca2 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   14c52:	697b      	ldr	r3, [r7, #20]
   14c54:	2238      	movs	r2, #56	; 0x38
   14c56:	2100      	movs	r1, #0
   14c58:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   14c5a:	693b      	ldr	r3, [r7, #16]
   14c5c:	2204      	movs	r2, #4
   14c5e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   14c60:	697b      	ldr	r3, [r7, #20]
   14c62:	7a5b      	ldrb	r3, [r3, #9]
   14c64:	b2db      	uxtb	r3, r3
   14c66:	2b02      	cmp	r3, #2
   14c68:	d10b      	bne.n	14c82 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   14c6a:	230f      	movs	r3, #15
   14c6c:	18fb      	adds	r3, r7, r3
   14c6e:	781b      	ldrb	r3, [r3, #0]
   14c70:	2204      	movs	r2, #4
   14c72:	4013      	ands	r3, r2
   14c74:	d015      	beq.n	14ca2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   14c76:	697b      	ldr	r3, [r7, #20]
   14c78:	695b      	ldr	r3, [r3, #20]
   14c7a:	697a      	ldr	r2, [r7, #20]
   14c7c:	0010      	movs	r0, r2
   14c7e:	4798      	blx	r3
   14c80:	e00f      	b.n	14ca2 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   14c82:	697b      	ldr	r3, [r7, #20]
   14c84:	7a5b      	ldrb	r3, [r3, #9]
   14c86:	b2db      	uxtb	r3, r3
   14c88:	2b00      	cmp	r3, #0
   14c8a:	d10a      	bne.n	14ca2 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   14c8c:	230f      	movs	r3, #15
   14c8e:	18fb      	adds	r3, r7, r3
   14c90:	781b      	ldrb	r3, [r3, #0]
   14c92:	2202      	movs	r2, #2
   14c94:	4013      	ands	r3, r2
   14c96:	d004      	beq.n	14ca2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   14c98:	697b      	ldr	r3, [r7, #20]
   14c9a:	691b      	ldr	r3, [r3, #16]
   14c9c:	697a      	ldr	r2, [r7, #20]
   14c9e:	0010      	movs	r0, r2
   14ca0:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   14ca2:	230c      	movs	r3, #12
   14ca4:	18fb      	adds	r3, r7, r3
   14ca6:	881b      	ldrh	r3, [r3, #0]
   14ca8:	2202      	movs	r2, #2
   14caa:	4013      	ands	r3, r2
   14cac:	d024      	beq.n	14cf8 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   14cae:	697b      	ldr	r3, [r7, #20]
   14cb0:	795b      	ldrb	r3, [r3, #5]
   14cb2:	2b01      	cmp	r3, #1
   14cb4:	d120      	bne.n	14cf8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   14cb6:	697b      	ldr	r3, [r7, #20]
   14cb8:	7a5b      	ldrb	r3, [r3, #9]
   14cba:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   14cbc:	2b01      	cmp	r3, #1
   14cbe:	d11b      	bne.n	14cf8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   14cc0:	697b      	ldr	r3, [r7, #20]
   14cc2:	79db      	ldrb	r3, [r3, #7]
   14cc4:	2201      	movs	r2, #1
   14cc6:	4053      	eors	r3, r2
   14cc8:	b2db      	uxtb	r3, r3
   14cca:	2b00      	cmp	r3, #0
   14ccc:	d014      	beq.n	14cf8 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   14cce:	693b      	ldr	r3, [r7, #16]
   14cd0:	2202      	movs	r2, #2
   14cd2:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   14cd4:	697b      	ldr	r3, [r7, #20]
   14cd6:	2203      	movs	r2, #3
   14cd8:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   14cda:	697b      	ldr	r3, [r7, #20]
   14cdc:	2238      	movs	r2, #56	; 0x38
   14cde:	2100      	movs	r1, #0
   14ce0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   14ce2:	230f      	movs	r3, #15
   14ce4:	18fb      	adds	r3, r7, r3
   14ce6:	781b      	ldrb	r3, [r3, #0]
   14ce8:	2201      	movs	r2, #1
   14cea:	4013      	ands	r3, r2
   14cec:	d004      	beq.n	14cf8 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   14cee:	697b      	ldr	r3, [r7, #20]
   14cf0:	68db      	ldr	r3, [r3, #12]
   14cf2:	697a      	ldr	r2, [r7, #20]
   14cf4:	0010      	movs	r0, r2
   14cf6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   14cf8:	230c      	movs	r3, #12
   14cfa:	18fb      	adds	r3, r7, r3
   14cfc:	881b      	ldrh	r3, [r3, #0]
   14cfe:	2280      	movs	r2, #128	; 0x80
   14d00:	4013      	ands	r3, r2
   14d02:	d010      	beq.n	14d26 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   14d04:	693b      	ldr	r3, [r7, #16]
   14d06:	2280      	movs	r2, #128	; 0x80
   14d08:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   14d0a:	693b      	ldr	r3, [r7, #16]
   14d0c:	2280      	movs	r2, #128	; 0x80
   14d0e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   14d10:	230f      	movs	r3, #15
   14d12:	18fb      	adds	r3, r7, r3
   14d14:	781b      	ldrb	r3, [r3, #0]
   14d16:	2240      	movs	r2, #64	; 0x40
   14d18:	4013      	ands	r3, r2
   14d1a:	d004      	beq.n	14d26 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   14d1c:	697b      	ldr	r3, [r7, #20]
   14d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14d20:	697a      	ldr	r2, [r7, #20]
   14d22:	0010      	movs	r0, r2
   14d24:	4798      	blx	r3
		}
	}
#  endif
}
   14d26:	46c0      	nop			; (mov r8, r8)
   14d28:	46bd      	mov	sp, r7
   14d2a:	b006      	add	sp, #24
   14d2c:	bd80      	pop	{r7, pc}
   14d2e:	46c0      	nop			; (mov r8, r8)
   14d30:	20005648 	.word	0x20005648
   14d34:	000149e9 	.word	0x000149e9
   14d38:	0001496d 	.word	0x0001496d
   14d3c:	00014a1d 	.word	0x00014a1d
   14d40:	00014a53 	.word	0x00014a53

00014d44 <system_gclk_chan_get_config_defaults>:
{
   14d44:	b580      	push	{r7, lr}
   14d46:	b082      	sub	sp, #8
   14d48:	af00      	add	r7, sp, #0
   14d4a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   14d4c:	687b      	ldr	r3, [r7, #4]
   14d4e:	2200      	movs	r2, #0
   14d50:	701a      	strb	r2, [r3, #0]
}
   14d52:	46c0      	nop			; (mov r8, r8)
   14d54:	46bd      	mov	sp, r7
   14d56:	b002      	add	sp, #8
   14d58:	bd80      	pop	{r7, pc}
	...

00014d5c <system_apb_clock_set_mask>:
{
   14d5c:	b580      	push	{r7, lr}
   14d5e:	b082      	sub	sp, #8
   14d60:	af00      	add	r7, sp, #0
   14d62:	0002      	movs	r2, r0
   14d64:	6039      	str	r1, [r7, #0]
   14d66:	1dfb      	adds	r3, r7, #7
   14d68:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   14d6a:	1dfb      	adds	r3, r7, #7
   14d6c:	781b      	ldrb	r3, [r3, #0]
   14d6e:	2b01      	cmp	r3, #1
   14d70:	d00a      	beq.n	14d88 <system_apb_clock_set_mask+0x2c>
   14d72:	2b02      	cmp	r3, #2
   14d74:	d00f      	beq.n	14d96 <system_apb_clock_set_mask+0x3a>
   14d76:	2b00      	cmp	r3, #0
   14d78:	d114      	bne.n	14da4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   14d7a:	4b0e      	ldr	r3, [pc, #56]	; (14db4 <system_apb_clock_set_mask+0x58>)
   14d7c:	4a0d      	ldr	r2, [pc, #52]	; (14db4 <system_apb_clock_set_mask+0x58>)
   14d7e:	6991      	ldr	r1, [r2, #24]
   14d80:	683a      	ldr	r2, [r7, #0]
   14d82:	430a      	orrs	r2, r1
   14d84:	619a      	str	r2, [r3, #24]
			break;
   14d86:	e00f      	b.n	14da8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   14d88:	4b0a      	ldr	r3, [pc, #40]	; (14db4 <system_apb_clock_set_mask+0x58>)
   14d8a:	4a0a      	ldr	r2, [pc, #40]	; (14db4 <system_apb_clock_set_mask+0x58>)
   14d8c:	69d1      	ldr	r1, [r2, #28]
   14d8e:	683a      	ldr	r2, [r7, #0]
   14d90:	430a      	orrs	r2, r1
   14d92:	61da      	str	r2, [r3, #28]
			break;
   14d94:	e008      	b.n	14da8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   14d96:	4b07      	ldr	r3, [pc, #28]	; (14db4 <system_apb_clock_set_mask+0x58>)
   14d98:	4a06      	ldr	r2, [pc, #24]	; (14db4 <system_apb_clock_set_mask+0x58>)
   14d9a:	6a11      	ldr	r1, [r2, #32]
   14d9c:	683a      	ldr	r2, [r7, #0]
   14d9e:	430a      	orrs	r2, r1
   14da0:	621a      	str	r2, [r3, #32]
			break;
   14da2:	e001      	b.n	14da8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   14da4:	2317      	movs	r3, #23
   14da6:	e000      	b.n	14daa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   14da8:	2300      	movs	r3, #0
}
   14daa:	0018      	movs	r0, r3
   14dac:	46bd      	mov	sp, r7
   14dae:	b002      	add	sp, #8
   14db0:	bd80      	pop	{r7, pc}
   14db2:	46c0      	nop			; (mov r8, r8)
   14db4:	40000400 	.word	0x40000400

00014db8 <system_pinmux_get_config_defaults>:
{
   14db8:	b580      	push	{r7, lr}
   14dba:	b082      	sub	sp, #8
   14dbc:	af00      	add	r7, sp, #0
   14dbe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   14dc0:	687b      	ldr	r3, [r7, #4]
   14dc2:	2280      	movs	r2, #128	; 0x80
   14dc4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14dc6:	687b      	ldr	r3, [r7, #4]
   14dc8:	2200      	movs	r2, #0
   14dca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   14dcc:	687b      	ldr	r3, [r7, #4]
   14dce:	2201      	movs	r2, #1
   14dd0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   14dd2:	687b      	ldr	r3, [r7, #4]
   14dd4:	2200      	movs	r2, #0
   14dd6:	70da      	strb	r2, [r3, #3]
}
   14dd8:	46c0      	nop			; (mov r8, r8)
   14dda:	46bd      	mov	sp, r7
   14ddc:	b002      	add	sp, #8
   14dde:	bd80      	pop	{r7, pc}

00014de0 <system_is_debugger_present>:
{
   14de0:	b580      	push	{r7, lr}
   14de2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   14de4:	4b05      	ldr	r3, [pc, #20]	; (14dfc <system_is_debugger_present+0x1c>)
   14de6:	789b      	ldrb	r3, [r3, #2]
   14de8:	b2db      	uxtb	r3, r3
   14dea:	001a      	movs	r2, r3
   14dec:	2302      	movs	r3, #2
   14dee:	4013      	ands	r3, r2
   14df0:	1e5a      	subs	r2, r3, #1
   14df2:	4193      	sbcs	r3, r2
   14df4:	b2db      	uxtb	r3, r3
}
   14df6:	0018      	movs	r0, r3
   14df8:	46bd      	mov	sp, r7
   14dfa:	bd80      	pop	{r7, pc}
   14dfc:	41002000 	.word	0x41002000

00014e00 <usart_is_syncing>:
{
   14e00:	b580      	push	{r7, lr}
   14e02:	b084      	sub	sp, #16
   14e04:	af00      	add	r7, sp, #0
   14e06:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   14e08:	687b      	ldr	r3, [r7, #4]
   14e0a:	681b      	ldr	r3, [r3, #0]
   14e0c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   14e0e:	68fb      	ldr	r3, [r7, #12]
   14e10:	69db      	ldr	r3, [r3, #28]
   14e12:	1e5a      	subs	r2, r3, #1
   14e14:	4193      	sbcs	r3, r2
   14e16:	b2db      	uxtb	r3, r3
}
   14e18:	0018      	movs	r0, r3
   14e1a:	46bd      	mov	sp, r7
   14e1c:	b004      	add	sp, #16
   14e1e:	bd80      	pop	{r7, pc}

00014e20 <_usart_wait_for_sync>:
{
   14e20:	b580      	push	{r7, lr}
   14e22:	b082      	sub	sp, #8
   14e24:	af00      	add	r7, sp, #0
   14e26:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   14e28:	46c0      	nop			; (mov r8, r8)
   14e2a:	687b      	ldr	r3, [r7, #4]
   14e2c:	0018      	movs	r0, r3
   14e2e:	4b04      	ldr	r3, [pc, #16]	; (14e40 <_usart_wait_for_sync+0x20>)
   14e30:	4798      	blx	r3
   14e32:	1e03      	subs	r3, r0, #0
   14e34:	d1f9      	bne.n	14e2a <_usart_wait_for_sync+0xa>
}
   14e36:	46c0      	nop			; (mov r8, r8)
   14e38:	46bd      	mov	sp, r7
   14e3a:	b002      	add	sp, #8
   14e3c:	bd80      	pop	{r7, pc}
   14e3e:	46c0      	nop			; (mov r8, r8)
   14e40:	00014e01 	.word	0x00014e01

00014e44 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   14e44:	b5b0      	push	{r4, r5, r7, lr}
   14e46:	b08c      	sub	sp, #48	; 0x30
   14e48:	af02      	add	r7, sp, #8
   14e4a:	6078      	str	r0, [r7, #4]
   14e4c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   14e4e:	687b      	ldr	r3, [r7, #4]
   14e50:	681b      	ldr	r3, [r3, #0]
   14e52:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14e54:	687b      	ldr	r3, [r7, #4]
   14e56:	681b      	ldr	r3, [r3, #0]
   14e58:	0018      	movs	r0, r3
   14e5a:	4bab      	ldr	r3, [pc, #684]	; (15108 <_usart_set_config+0x2c4>)
   14e5c:	4798      	blx	r3
   14e5e:	0003      	movs	r3, r0
   14e60:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14e62:	697b      	ldr	r3, [r7, #20]
   14e64:	3314      	adds	r3, #20
   14e66:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   14e68:	2300      	movs	r3, #0
   14e6a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   14e6c:	2300      	movs	r3, #0
   14e6e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   14e70:	230a      	movs	r3, #10
   14e72:	18fb      	adds	r3, r7, r3
   14e74:	2200      	movs	r2, #0
   14e76:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   14e78:	231f      	movs	r3, #31
   14e7a:	18fb      	adds	r3, r7, r3
   14e7c:	2200      	movs	r2, #0
   14e7e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   14e80:	231e      	movs	r3, #30
   14e82:	18fb      	adds	r3, r7, r3
   14e84:	2210      	movs	r2, #16
   14e86:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   14e88:	683b      	ldr	r3, [r7, #0]
   14e8a:	8a1b      	ldrh	r3, [r3, #16]
   14e8c:	2280      	movs	r2, #128	; 0x80
   14e8e:	01d2      	lsls	r2, r2, #7
   14e90:	4293      	cmp	r3, r2
   14e92:	d01c      	beq.n	14ece <_usart_set_config+0x8a>
   14e94:	2280      	movs	r2, #128	; 0x80
   14e96:	01d2      	lsls	r2, r2, #7
   14e98:	4293      	cmp	r3, r2
   14e9a:	dc06      	bgt.n	14eaa <_usart_set_config+0x66>
   14e9c:	2b00      	cmp	r3, #0
   14e9e:	d00d      	beq.n	14ebc <_usart_set_config+0x78>
   14ea0:	2280      	movs	r2, #128	; 0x80
   14ea2:	0192      	lsls	r2, r2, #6
   14ea4:	4293      	cmp	r3, r2
   14ea6:	d024      	beq.n	14ef2 <_usart_set_config+0xae>
   14ea8:	e035      	b.n	14f16 <_usart_set_config+0xd2>
   14eaa:	22c0      	movs	r2, #192	; 0xc0
   14eac:	01d2      	lsls	r2, r2, #7
   14eae:	4293      	cmp	r3, r2
   14eb0:	d028      	beq.n	14f04 <_usart_set_config+0xc0>
   14eb2:	2280      	movs	r2, #128	; 0x80
   14eb4:	0212      	lsls	r2, r2, #8
   14eb6:	4293      	cmp	r3, r2
   14eb8:	d012      	beq.n	14ee0 <_usart_set_config+0x9c>
   14eba:	e02c      	b.n	14f16 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   14ebc:	231f      	movs	r3, #31
   14ebe:	18fb      	adds	r3, r7, r3
   14ec0:	2200      	movs	r2, #0
   14ec2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   14ec4:	231e      	movs	r3, #30
   14ec6:	18fb      	adds	r3, r7, r3
   14ec8:	2210      	movs	r2, #16
   14eca:	701a      	strb	r2, [r3, #0]
			break;
   14ecc:	e023      	b.n	14f16 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   14ece:	231f      	movs	r3, #31
   14ed0:	18fb      	adds	r3, r7, r3
   14ed2:	2200      	movs	r2, #0
   14ed4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   14ed6:	231e      	movs	r3, #30
   14ed8:	18fb      	adds	r3, r7, r3
   14eda:	2208      	movs	r2, #8
   14edc:	701a      	strb	r2, [r3, #0]
			break;
   14ede:	e01a      	b.n	14f16 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   14ee0:	231f      	movs	r3, #31
   14ee2:	18fb      	adds	r3, r7, r3
   14ee4:	2200      	movs	r2, #0
   14ee6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   14ee8:	231e      	movs	r3, #30
   14eea:	18fb      	adds	r3, r7, r3
   14eec:	2203      	movs	r2, #3
   14eee:	701a      	strb	r2, [r3, #0]
			break;
   14ef0:	e011      	b.n	14f16 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   14ef2:	231f      	movs	r3, #31
   14ef4:	18fb      	adds	r3, r7, r3
   14ef6:	2201      	movs	r2, #1
   14ef8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   14efa:	231e      	movs	r3, #30
   14efc:	18fb      	adds	r3, r7, r3
   14efe:	2210      	movs	r2, #16
   14f00:	701a      	strb	r2, [r3, #0]
			break;
   14f02:	e008      	b.n	14f16 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   14f04:	231f      	movs	r3, #31
   14f06:	18fb      	adds	r3, r7, r3
   14f08:	2201      	movs	r2, #1
   14f0a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   14f0c:	231e      	movs	r3, #30
   14f0e:	18fb      	adds	r3, r7, r3
   14f10:	2208      	movs	r2, #8
   14f12:	701a      	strb	r2, [r3, #0]
			break;
   14f14:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   14f16:	683b      	ldr	r3, [r7, #0]
   14f18:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   14f1a:	683b      	ldr	r3, [r7, #0]
   14f1c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   14f1e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   14f20:	683b      	ldr	r3, [r7, #0]
   14f22:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   14f24:	4313      	orrs	r3, r2
		config->sample_rate |
   14f26:	683a      	ldr	r2, [r7, #0]
   14f28:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   14f2a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   14f2c:	683a      	ldr	r2, [r7, #0]
   14f2e:	7e12      	ldrb	r2, [r2, #24]
   14f30:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   14f32:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   14f34:	683a      	ldr	r2, [r7, #0]
   14f36:	2126      	movs	r1, #38	; 0x26
   14f38:	5c52      	ldrb	r2, [r2, r1]
   14f3a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   14f3c:	4313      	orrs	r3, r2
   14f3e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   14f40:	231d      	movs	r3, #29
   14f42:	18fb      	adds	r3, r7, r3
   14f44:	2200      	movs	r2, #0
   14f46:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   14f48:	683b      	ldr	r3, [r7, #0]
   14f4a:	685b      	ldr	r3, [r3, #4]
   14f4c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   14f4e:	68fb      	ldr	r3, [r7, #12]
   14f50:	2b00      	cmp	r3, #0
   14f52:	d01e      	beq.n	14f92 <_usart_set_config+0x14e>
   14f54:	2280      	movs	r2, #128	; 0x80
   14f56:	0552      	lsls	r2, r2, #21
   14f58:	4293      	cmp	r3, r2
   14f5a:	d14f      	bne.n	14ffc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   14f5c:	683b      	ldr	r3, [r7, #0]
   14f5e:	2227      	movs	r2, #39	; 0x27
   14f60:	5c9b      	ldrb	r3, [r3, r2]
   14f62:	2201      	movs	r2, #1
   14f64:	4053      	eors	r3, r2
   14f66:	b2db      	uxtb	r3, r3
   14f68:	2b00      	cmp	r3, #0
   14f6a:	d046      	beq.n	14ffa <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   14f6c:	683b      	ldr	r3, [r7, #0]
   14f6e:	6a1d      	ldr	r5, [r3, #32]
   14f70:	693b      	ldr	r3, [r7, #16]
   14f72:	b2db      	uxtb	r3, r3
   14f74:	0018      	movs	r0, r3
   14f76:	4b65      	ldr	r3, [pc, #404]	; (1510c <_usart_set_config+0x2c8>)
   14f78:	4798      	blx	r3
   14f7a:	0001      	movs	r1, r0
   14f7c:	231d      	movs	r3, #29
   14f7e:	18fc      	adds	r4, r7, r3
   14f80:	230a      	movs	r3, #10
   14f82:	18fb      	adds	r3, r7, r3
   14f84:	001a      	movs	r2, r3
   14f86:	0028      	movs	r0, r5
   14f88:	4b61      	ldr	r3, [pc, #388]	; (15110 <_usart_set_config+0x2cc>)
   14f8a:	4798      	blx	r3
   14f8c:	0003      	movs	r3, r0
   14f8e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   14f90:	e033      	b.n	14ffa <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   14f92:	683b      	ldr	r3, [r7, #0]
   14f94:	2227      	movs	r2, #39	; 0x27
   14f96:	5c9b      	ldrb	r3, [r3, r2]
   14f98:	2b00      	cmp	r3, #0
   14f9a:	d014      	beq.n	14fc6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   14f9c:	683b      	ldr	r3, [r7, #0]
   14f9e:	6a18      	ldr	r0, [r3, #32]
   14fa0:	683b      	ldr	r3, [r7, #0]
   14fa2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   14fa4:	231d      	movs	r3, #29
   14fa6:	18fc      	adds	r4, r7, r3
   14fa8:	231f      	movs	r3, #31
   14faa:	18fb      	adds	r3, r7, r3
   14fac:	781d      	ldrb	r5, [r3, #0]
   14fae:	230a      	movs	r3, #10
   14fb0:	18fa      	adds	r2, r7, r3
   14fb2:	231e      	movs	r3, #30
   14fb4:	18fb      	adds	r3, r7, r3
   14fb6:	781b      	ldrb	r3, [r3, #0]
   14fb8:	9300      	str	r3, [sp, #0]
   14fba:	002b      	movs	r3, r5
   14fbc:	4d55      	ldr	r5, [pc, #340]	; (15114 <_usart_set_config+0x2d0>)
   14fbe:	47a8      	blx	r5
   14fc0:	0003      	movs	r3, r0
   14fc2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   14fc4:	e01a      	b.n	14ffc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   14fc6:	683b      	ldr	r3, [r7, #0]
   14fc8:	6a1d      	ldr	r5, [r3, #32]
   14fca:	693b      	ldr	r3, [r7, #16]
   14fcc:	b2db      	uxtb	r3, r3
   14fce:	0018      	movs	r0, r3
   14fd0:	4b4e      	ldr	r3, [pc, #312]	; (1510c <_usart_set_config+0x2c8>)
   14fd2:	4798      	blx	r3
				status_code =
   14fd4:	231d      	movs	r3, #29
   14fd6:	18fc      	adds	r4, r7, r3
   14fd8:	231f      	movs	r3, #31
   14fda:	18fb      	adds	r3, r7, r3
   14fdc:	7819      	ldrb	r1, [r3, #0]
   14fde:	230a      	movs	r3, #10
   14fe0:	18fa      	adds	r2, r7, r3
   14fe2:	231e      	movs	r3, #30
   14fe4:	18fb      	adds	r3, r7, r3
   14fe6:	781b      	ldrb	r3, [r3, #0]
   14fe8:	9300      	str	r3, [sp, #0]
   14fea:	000b      	movs	r3, r1
   14fec:	0001      	movs	r1, r0
   14fee:	0028      	movs	r0, r5
   14ff0:	4d48      	ldr	r5, [pc, #288]	; (15114 <_usart_set_config+0x2d0>)
   14ff2:	47a8      	blx	r5
   14ff4:	0003      	movs	r3, r0
   14ff6:	7023      	strb	r3, [r4, #0]
			break;
   14ff8:	e000      	b.n	14ffc <_usart_set_config+0x1b8>
			break;
   14ffa:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   14ffc:	231d      	movs	r3, #29
   14ffe:	18fb      	adds	r3, r7, r3
   15000:	781b      	ldrb	r3, [r3, #0]
   15002:	2b00      	cmp	r3, #0
   15004:	d003      	beq.n	1500e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   15006:	231d      	movs	r3, #29
   15008:	18fb      	adds	r3, r7, r3
   1500a:	781b      	ldrb	r3, [r3, #0]
   1500c:	e077      	b.n	150fe <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   1500e:	683b      	ldr	r3, [r7, #0]
   15010:	7e5b      	ldrb	r3, [r3, #25]
   15012:	2b00      	cmp	r3, #0
   15014:	d003      	beq.n	1501e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   15016:	683b      	ldr	r3, [r7, #0]
   15018:	7e9a      	ldrb	r2, [r3, #26]
   1501a:	69bb      	ldr	r3, [r7, #24]
   1501c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1501e:	687b      	ldr	r3, [r7, #4]
   15020:	0018      	movs	r0, r3
   15022:	4b3d      	ldr	r3, [pc, #244]	; (15118 <_usart_set_config+0x2d4>)
   15024:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   15026:	230a      	movs	r3, #10
   15028:	18fb      	adds	r3, r7, r3
   1502a:	881a      	ldrh	r2, [r3, #0]
   1502c:	69bb      	ldr	r3, [r7, #24]
   1502e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   15030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15032:	68fb      	ldr	r3, [r7, #12]
   15034:	4313      	orrs	r3, r2
   15036:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   15038:	683b      	ldr	r3, [r7, #0]
   1503a:	2227      	movs	r2, #39	; 0x27
   1503c:	5c9b      	ldrb	r3, [r3, r2]
   1503e:	2201      	movs	r2, #1
   15040:	4053      	eors	r3, r2
   15042:	b2db      	uxtb	r3, r3
   15044:	2b00      	cmp	r3, #0
   15046:	d003      	beq.n	15050 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   15048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1504a:	2204      	movs	r2, #4
   1504c:	4313      	orrs	r3, r2
   1504e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   15050:	683b      	ldr	r3, [r7, #0]
   15052:	7e5b      	ldrb	r3, [r3, #25]
   15054:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   15056:	683b      	ldr	r3, [r7, #0]
   15058:	7f1b      	ldrb	r3, [r3, #28]
   1505a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1505c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1505e:	683b      	ldr	r3, [r7, #0]
   15060:	7f5b      	ldrb	r3, [r3, #29]
   15062:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   15064:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   15066:	683b      	ldr	r3, [r7, #0]
   15068:	2124      	movs	r1, #36	; 0x24
   1506a:	5c5b      	ldrb	r3, [r3, r1]
   1506c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1506e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   15070:	683b      	ldr	r3, [r7, #0]
   15072:	2125      	movs	r1, #37	; 0x25
   15074:	5c5b      	ldrb	r3, [r3, r1]
   15076:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   15078:	4313      	orrs	r3, r2
	ctrlb =  
   1507a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   1507c:	683b      	ldr	r3, [r7, #0]
   1507e:	7a9b      	ldrb	r3, [r3, #10]
   15080:	001a      	movs	r2, r3
   15082:	6a3b      	ldr	r3, [r7, #32]
   15084:	4313      	orrs	r3, r2
   15086:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   15088:	683b      	ldr	r3, [r7, #0]
   1508a:	7adb      	ldrb	r3, [r3, #11]
   1508c:	001a      	movs	r2, r3
   1508e:	6a3b      	ldr	r3, [r7, #32]
   15090:	4313      	orrs	r3, r2
   15092:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   15094:	683b      	ldr	r3, [r7, #0]
   15096:	891b      	ldrh	r3, [r3, #8]
   15098:	2bff      	cmp	r3, #255	; 0xff
   1509a:	d00b      	beq.n	150b4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   1509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1509e:	2280      	movs	r2, #128	; 0x80
   150a0:	0452      	lsls	r2, r2, #17
   150a2:	4313      	orrs	r3, r2
   150a4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   150a6:	683b      	ldr	r3, [r7, #0]
   150a8:	891b      	ldrh	r3, [r3, #8]
   150aa:	001a      	movs	r2, r3
   150ac:	6a3b      	ldr	r3, [r7, #32]
   150ae:	4313      	orrs	r3, r2
   150b0:	623b      	str	r3, [r7, #32]
   150b2:	e008      	b.n	150c6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   150b4:	683b      	ldr	r3, [r7, #0]
   150b6:	7edb      	ldrb	r3, [r3, #27]
   150b8:	2b00      	cmp	r3, #0
   150ba:	d004      	beq.n	150c6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   150bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   150be:	2280      	movs	r2, #128	; 0x80
   150c0:	04d2      	lsls	r2, r2, #19
   150c2:	4313      	orrs	r3, r2
   150c4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   150c6:	683b      	ldr	r3, [r7, #0]
   150c8:	222c      	movs	r2, #44	; 0x2c
   150ca:	5c9b      	ldrb	r3, [r3, r2]
   150cc:	2b00      	cmp	r3, #0
   150ce:	d103      	bne.n	150d8 <_usart_set_config+0x294>
   150d0:	4b12      	ldr	r3, [pc, #72]	; (1511c <_usart_set_config+0x2d8>)
   150d2:	4798      	blx	r3
   150d4:	1e03      	subs	r3, r0, #0
   150d6:	d003      	beq.n	150e0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   150d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   150da:	2280      	movs	r2, #128	; 0x80
   150dc:	4313      	orrs	r3, r2
   150de:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   150e0:	687b      	ldr	r3, [r7, #4]
   150e2:	0018      	movs	r0, r3
   150e4:	4b0c      	ldr	r3, [pc, #48]	; (15118 <_usart_set_config+0x2d4>)
   150e6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   150e8:	69bb      	ldr	r3, [r7, #24]
   150ea:	6a3a      	ldr	r2, [r7, #32]
   150ec:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   150ee:	687b      	ldr	r3, [r7, #4]
   150f0:	0018      	movs	r0, r3
   150f2:	4b09      	ldr	r3, [pc, #36]	; (15118 <_usart_set_config+0x2d4>)
   150f4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   150f6:	69bb      	ldr	r3, [r7, #24]
   150f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   150fa:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   150fc:	2300      	movs	r3, #0
}
   150fe:	0018      	movs	r0, r3
   15100:	46bd      	mov	sp, r7
   15102:	b00a      	add	sp, #40	; 0x28
   15104:	bdb0      	pop	{r4, r5, r7, pc}
   15106:	46c0      	nop			; (mov r8, r8)
   15108:	00013bed 	.word	0x00013bed
   1510c:	000165a1 	.word	0x000165a1
   15110:	00013767 	.word	0x00013767
   15114:	000137e5 	.word	0x000137e5
   15118:	00014e21 	.word	0x00014e21
   1511c:	00014de1 	.word	0x00014de1

00015120 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   15120:	b590      	push	{r4, r7, lr}
   15122:	b093      	sub	sp, #76	; 0x4c
   15124:	af00      	add	r7, sp, #0
   15126:	60f8      	str	r0, [r7, #12]
   15128:	60b9      	str	r1, [r7, #8]
   1512a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   1512c:	233b      	movs	r3, #59	; 0x3b
   1512e:	18fb      	adds	r3, r7, r3
   15130:	2200      	movs	r2, #0
   15132:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   15134:	68fb      	ldr	r3, [r7, #12]
   15136:	68ba      	ldr	r2, [r7, #8]
   15138:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1513a:	68fb      	ldr	r3, [r7, #12]
   1513c:	681b      	ldr	r3, [r3, #0]
   1513e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   15140:	68fb      	ldr	r3, [r7, #12]
   15142:	681b      	ldr	r3, [r3, #0]
   15144:	0018      	movs	r0, r3
   15146:	4b86      	ldr	r3, [pc, #536]	; (15360 <usart_init+0x240>)
   15148:	4798      	blx	r3
   1514a:	0003      	movs	r3, r0
   1514c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15150:	3302      	adds	r3, #2
   15152:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   15154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15156:	3314      	adds	r3, #20
   15158:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1515a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1515c:	681b      	ldr	r3, [r3, #0]
   1515e:	2201      	movs	r2, #1
   15160:	4013      	ands	r3, r2
   15162:	d001      	beq.n	15168 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   15164:	2305      	movs	r3, #5
   15166:	e0f6      	b.n	15356 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   15168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1516a:	681b      	ldr	r3, [r3, #0]
   1516c:	2202      	movs	r2, #2
   1516e:	4013      	ands	r3, r2
   15170:	d001      	beq.n	15176 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   15172:	231c      	movs	r3, #28
   15174:	e0ef      	b.n	15356 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   15176:	2201      	movs	r2, #1
   15178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1517a:	409a      	lsls	r2, r3
   1517c:	0013      	movs	r3, r2
   1517e:	0019      	movs	r1, r3
   15180:	2002      	movs	r0, #2
   15182:	4b78      	ldr	r3, [pc, #480]	; (15364 <usart_init+0x244>)
   15184:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   15186:	2324      	movs	r3, #36	; 0x24
   15188:	18fb      	adds	r3, r7, r3
   1518a:	0018      	movs	r0, r3
   1518c:	4b76      	ldr	r3, [pc, #472]	; (15368 <usart_init+0x248>)
   1518e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   15190:	687b      	ldr	r3, [r7, #4]
   15192:	222d      	movs	r2, #45	; 0x2d
   15194:	5c9a      	ldrb	r2, [r3, r2]
   15196:	2324      	movs	r3, #36	; 0x24
   15198:	18fb      	adds	r3, r7, r3
   1519a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1519e:	b2db      	uxtb	r3, r3
   151a0:	2224      	movs	r2, #36	; 0x24
   151a2:	18ba      	adds	r2, r7, r2
   151a4:	0011      	movs	r1, r2
   151a6:	0018      	movs	r0, r3
   151a8:	4b70      	ldr	r3, [pc, #448]	; (1536c <usart_init+0x24c>)
   151aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   151ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   151ae:	b2db      	uxtb	r3, r3
   151b0:	0018      	movs	r0, r3
   151b2:	4b6f      	ldr	r3, [pc, #444]	; (15370 <usart_init+0x250>)
   151b4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   151b6:	687b      	ldr	r3, [r7, #4]
   151b8:	222d      	movs	r2, #45	; 0x2d
   151ba:	5c9b      	ldrb	r3, [r3, r2]
   151bc:	2100      	movs	r1, #0
   151be:	0018      	movs	r0, r3
   151c0:	4b6c      	ldr	r3, [pc, #432]	; (15374 <usart_init+0x254>)
   151c2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   151c4:	687b      	ldr	r3, [r7, #4]
   151c6:	7ada      	ldrb	r2, [r3, #11]
   151c8:	68fb      	ldr	r3, [r7, #12]
   151ca:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   151cc:	687b      	ldr	r3, [r7, #4]
   151ce:	2224      	movs	r2, #36	; 0x24
   151d0:	5c9a      	ldrb	r2, [r3, r2]
   151d2:	68fb      	ldr	r3, [r7, #12]
   151d4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   151d6:	687b      	ldr	r3, [r7, #4]
   151d8:	2225      	movs	r2, #37	; 0x25
   151da:	5c9a      	ldrb	r2, [r3, r2]
   151dc:	68fb      	ldr	r3, [r7, #12]
   151de:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   151e0:	687b      	ldr	r3, [r7, #4]
   151e2:	7eda      	ldrb	r2, [r3, #27]
   151e4:	68fb      	ldr	r3, [r7, #12]
   151e6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   151e8:	687b      	ldr	r3, [r7, #4]
   151ea:	7f1a      	ldrb	r2, [r3, #28]
   151ec:	68fb      	ldr	r3, [r7, #12]
   151ee:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   151f0:	233b      	movs	r3, #59	; 0x3b
   151f2:	18fc      	adds	r4, r7, r3
   151f4:	687a      	ldr	r2, [r7, #4]
   151f6:	68fb      	ldr	r3, [r7, #12]
   151f8:	0011      	movs	r1, r2
   151fa:	0018      	movs	r0, r3
   151fc:	4b5e      	ldr	r3, [pc, #376]	; (15378 <usart_init+0x258>)
   151fe:	4798      	blx	r3
   15200:	0003      	movs	r3, r0
   15202:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   15204:	233b      	movs	r3, #59	; 0x3b
   15206:	18fb      	adds	r3, r7, r3
   15208:	781b      	ldrb	r3, [r3, #0]
   1520a:	2b00      	cmp	r3, #0
   1520c:	d003      	beq.n	15216 <usart_init+0xf6>
		return status_code;
   1520e:	233b      	movs	r3, #59	; 0x3b
   15210:	18fb      	adds	r3, r7, r3
   15212:	781b      	ldrb	r3, [r3, #0]
   15214:	e09f      	b.n	15356 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   15216:	2320      	movs	r3, #32
   15218:	18fb      	adds	r3, r7, r3
   1521a:	0018      	movs	r0, r3
   1521c:	4b57      	ldr	r3, [pc, #348]	; (1537c <usart_init+0x25c>)
   1521e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15220:	2320      	movs	r3, #32
   15222:	18fb      	adds	r3, r7, r3
   15224:	2200      	movs	r2, #0
   15226:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   15228:	2320      	movs	r3, #32
   1522a:	18fb      	adds	r3, r7, r3
   1522c:	2200      	movs	r2, #0
   1522e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   15230:	687b      	ldr	r3, [r7, #4]
   15232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   15234:	2310      	movs	r3, #16
   15236:	18fb      	adds	r3, r7, r3
   15238:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   1523a:	687b      	ldr	r3, [r7, #4]
   1523c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   1523e:	2310      	movs	r3, #16
   15240:	18fb      	adds	r3, r7, r3
   15242:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   15244:	687b      	ldr	r3, [r7, #4]
   15246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   15248:	2310      	movs	r3, #16
   1524a:	18fb      	adds	r3, r7, r3
   1524c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   1524e:	687b      	ldr	r3, [r7, #4]
   15250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   15252:	2310      	movs	r3, #16
   15254:	18fb      	adds	r3, r7, r3
   15256:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   15258:	2347      	movs	r3, #71	; 0x47
   1525a:	18fb      	adds	r3, r7, r3
   1525c:	2200      	movs	r2, #0
   1525e:	701a      	strb	r2, [r3, #0]
   15260:	e02c      	b.n	152bc <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   15262:	2347      	movs	r3, #71	; 0x47
   15264:	18fb      	adds	r3, r7, r3
   15266:	781a      	ldrb	r2, [r3, #0]
   15268:	2310      	movs	r3, #16
   1526a:	18fb      	adds	r3, r7, r3
   1526c:	0092      	lsls	r2, r2, #2
   1526e:	58d3      	ldr	r3, [r2, r3]
   15270:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   15272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15274:	2b00      	cmp	r3, #0
   15276:	d109      	bne.n	1528c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   15278:	2347      	movs	r3, #71	; 0x47
   1527a:	18fb      	adds	r3, r7, r3
   1527c:	781a      	ldrb	r2, [r3, #0]
   1527e:	68bb      	ldr	r3, [r7, #8]
   15280:	0011      	movs	r1, r2
   15282:	0018      	movs	r0, r3
   15284:	4b3e      	ldr	r3, [pc, #248]	; (15380 <usart_init+0x260>)
   15286:	4798      	blx	r3
   15288:	0003      	movs	r3, r0
   1528a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   1528c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1528e:	3301      	adds	r3, #1
   15290:	d00d      	beq.n	152ae <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   15292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15294:	b2da      	uxtb	r2, r3
   15296:	2320      	movs	r3, #32
   15298:	18fb      	adds	r3, r7, r3
   1529a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1529c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1529e:	0c1b      	lsrs	r3, r3, #16
   152a0:	b2db      	uxtb	r3, r3
   152a2:	2220      	movs	r2, #32
   152a4:	18ba      	adds	r2, r7, r2
   152a6:	0011      	movs	r1, r2
   152a8:	0018      	movs	r0, r3
   152aa:	4b36      	ldr	r3, [pc, #216]	; (15384 <usart_init+0x264>)
   152ac:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   152ae:	2347      	movs	r3, #71	; 0x47
   152b0:	18fb      	adds	r3, r7, r3
   152b2:	781a      	ldrb	r2, [r3, #0]
   152b4:	2347      	movs	r3, #71	; 0x47
   152b6:	18fb      	adds	r3, r7, r3
   152b8:	3201      	adds	r2, #1
   152ba:	701a      	strb	r2, [r3, #0]
   152bc:	2347      	movs	r3, #71	; 0x47
   152be:	18fb      	adds	r3, r7, r3
   152c0:	781b      	ldrb	r3, [r3, #0]
   152c2:	2b03      	cmp	r3, #3
   152c4:	d9cd      	bls.n	15262 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   152c6:	2300      	movs	r3, #0
   152c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   152ca:	e00a      	b.n	152e2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   152cc:	68fa      	ldr	r2, [r7, #12]
   152ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   152d0:	3302      	adds	r3, #2
   152d2:	009b      	lsls	r3, r3, #2
   152d4:	18d3      	adds	r3, r2, r3
   152d6:	3304      	adds	r3, #4
   152d8:	2200      	movs	r2, #0
   152da:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   152dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   152de:	3301      	adds	r3, #1
   152e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   152e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   152e4:	2b05      	cmp	r3, #5
   152e6:	d9f1      	bls.n	152cc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   152e8:	68fb      	ldr	r3, [r7, #12]
   152ea:	2200      	movs	r2, #0
   152ec:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   152ee:	68fb      	ldr	r3, [r7, #12]
   152f0:	2200      	movs	r2, #0
   152f2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   152f4:	68fb      	ldr	r3, [r7, #12]
   152f6:	2200      	movs	r2, #0
   152f8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   152fa:	68fb      	ldr	r3, [r7, #12]
   152fc:	2200      	movs	r2, #0
   152fe:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   15300:	68fb      	ldr	r3, [r7, #12]
   15302:	2230      	movs	r2, #48	; 0x30
   15304:	2100      	movs	r1, #0
   15306:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   15308:	68fb      	ldr	r3, [r7, #12]
   1530a:	2231      	movs	r2, #49	; 0x31
   1530c:	2100      	movs	r1, #0
   1530e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   15310:	68fb      	ldr	r3, [r7, #12]
   15312:	2232      	movs	r2, #50	; 0x32
   15314:	2100      	movs	r1, #0
   15316:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   15318:	68fb      	ldr	r3, [r7, #12]
   1531a:	2233      	movs	r2, #51	; 0x33
   1531c:	2100      	movs	r1, #0
   1531e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   15320:	68fb      	ldr	r3, [r7, #12]
   15322:	681b      	ldr	r3, [r3, #0]
   15324:	2227      	movs	r2, #39	; 0x27
   15326:	18bc      	adds	r4, r7, r2
   15328:	0018      	movs	r0, r3
   1532a:	4b0d      	ldr	r3, [pc, #52]	; (15360 <usart_init+0x240>)
   1532c:	4798      	blx	r3
   1532e:	0003      	movs	r3, r0
   15330:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   15332:	4a15      	ldr	r2, [pc, #84]	; (15388 <usart_init+0x268>)
   15334:	2327      	movs	r3, #39	; 0x27
   15336:	18fb      	adds	r3, r7, r3
   15338:	781b      	ldrb	r3, [r3, #0]
   1533a:	0011      	movs	r1, r2
   1533c:	0018      	movs	r0, r3
   1533e:	4b13      	ldr	r3, [pc, #76]	; (1538c <usart_init+0x26c>)
   15340:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   15342:	2327      	movs	r3, #39	; 0x27
   15344:	18fb      	adds	r3, r7, r3
   15346:	781a      	ldrb	r2, [r3, #0]
   15348:	4b11      	ldr	r3, [pc, #68]	; (15390 <usart_init+0x270>)
   1534a:	0092      	lsls	r2, r2, #2
   1534c:	68f9      	ldr	r1, [r7, #12]
   1534e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   15350:	233b      	movs	r3, #59	; 0x3b
   15352:	18fb      	adds	r3, r7, r3
   15354:	781b      	ldrb	r3, [r3, #0]
}
   15356:	0018      	movs	r0, r3
   15358:	46bd      	mov	sp, r7
   1535a:	b013      	add	sp, #76	; 0x4c
   1535c:	bd90      	pop	{r4, r7, pc}
   1535e:	46c0      	nop			; (mov r8, r8)
   15360:	00013bed 	.word	0x00013bed
   15364:	00014d5d 	.word	0x00014d5d
   15368:	00014d45 	.word	0x00014d45
   1536c:	0001647d 	.word	0x0001647d
   15370:	000164c1 	.word	0x000164c1
   15374:	000139a5 	.word	0x000139a5
   15378:	00014e45 	.word	0x00014e45
   1537c:	00014db9 	.word	0x00014db9
   15380:	00013a31 	.word	0x00013a31
   15384:	000167dd 	.word	0x000167dd
   15388:	000155fd 	.word	0x000155fd
   1538c:	00013c51 	.word	0x00013c51
   15390:	20005648 	.word	0x20005648

00015394 <system_interrupt_enter_critical_section>:
{
   15394:	b580      	push	{r7, lr}
   15396:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   15398:	4b02      	ldr	r3, [pc, #8]	; (153a4 <system_interrupt_enter_critical_section+0x10>)
   1539a:	4798      	blx	r3
}
   1539c:	46c0      	nop			; (mov r8, r8)
   1539e:	46bd      	mov	sp, r7
   153a0:	bd80      	pop	{r7, pc}
   153a2:	46c0      	nop			; (mov r8, r8)
   153a4:	000127e9 	.word	0x000127e9

000153a8 <system_interrupt_leave_critical_section>:
{
   153a8:	b580      	push	{r7, lr}
   153aa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   153ac:	4b02      	ldr	r3, [pc, #8]	; (153b8 <system_interrupt_leave_critical_section+0x10>)
   153ae:	4798      	blx	r3
}
   153b0:	46c0      	nop			; (mov r8, r8)
   153b2:	46bd      	mov	sp, r7
   153b4:	bd80      	pop	{r7, pc}
   153b6:	46c0      	nop			; (mov r8, r8)
   153b8:	0001283d 	.word	0x0001283d

000153bc <usart_is_syncing>:
{
   153bc:	b580      	push	{r7, lr}
   153be:	b084      	sub	sp, #16
   153c0:	af00      	add	r7, sp, #0
   153c2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   153c4:	687b      	ldr	r3, [r7, #4]
   153c6:	681b      	ldr	r3, [r3, #0]
   153c8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   153ca:	68fb      	ldr	r3, [r7, #12]
   153cc:	69db      	ldr	r3, [r3, #28]
   153ce:	1e5a      	subs	r2, r3, #1
   153d0:	4193      	sbcs	r3, r2
   153d2:	b2db      	uxtb	r3, r3
}
   153d4:	0018      	movs	r0, r3
   153d6:	46bd      	mov	sp, r7
   153d8:	b004      	add	sp, #16
   153da:	bd80      	pop	{r7, pc}

000153dc <_usart_wait_for_sync>:
{
   153dc:	b580      	push	{r7, lr}
   153de:	b082      	sub	sp, #8
   153e0:	af00      	add	r7, sp, #0
   153e2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   153e4:	46c0      	nop			; (mov r8, r8)
   153e6:	687b      	ldr	r3, [r7, #4]
   153e8:	0018      	movs	r0, r3
   153ea:	4b04      	ldr	r3, [pc, #16]	; (153fc <_usart_wait_for_sync+0x20>)
   153ec:	4798      	blx	r3
   153ee:	1e03      	subs	r3, r0, #0
   153f0:	d1f9      	bne.n	153e6 <_usart_wait_for_sync+0xa>
}
   153f2:	46c0      	nop			; (mov r8, r8)
   153f4:	46bd      	mov	sp, r7
   153f6:	b002      	add	sp, #8
   153f8:	bd80      	pop	{r7, pc}
   153fa:	46c0      	nop			; (mov r8, r8)
   153fc:	000153bd 	.word	0x000153bd

00015400 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   15400:	b580      	push	{r7, lr}
   15402:	b086      	sub	sp, #24
   15404:	af00      	add	r7, sp, #0
   15406:	60f8      	str	r0, [r7, #12]
   15408:	60b9      	str	r1, [r7, #8]
   1540a:	1dbb      	adds	r3, r7, #6
   1540c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1540e:	68fb      	ldr	r3, [r7, #12]
   15410:	681b      	ldr	r3, [r3, #0]
   15412:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   15414:	4b0f      	ldr	r3, [pc, #60]	; (15454 <_usart_write_buffer+0x54>)
   15416:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   15418:	68fb      	ldr	r3, [r7, #12]
   1541a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1541c:	b29b      	uxth	r3, r3
   1541e:	2b00      	cmp	r3, #0
   15420:	d003      	beq.n	1542a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   15422:	4b0d      	ldr	r3, [pc, #52]	; (15458 <_usart_write_buffer+0x58>)
   15424:	4798      	blx	r3
		return STATUS_BUSY;
   15426:	2305      	movs	r3, #5
   15428:	e010      	b.n	1544c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   1542a:	68fb      	ldr	r3, [r7, #12]
   1542c:	1dba      	adds	r2, r7, #6
   1542e:	8812      	ldrh	r2, [r2, #0]
   15430:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   15432:	4b09      	ldr	r3, [pc, #36]	; (15458 <_usart_write_buffer+0x58>)
   15434:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   15436:	68fb      	ldr	r3, [r7, #12]
   15438:	68ba      	ldr	r2, [r7, #8]
   1543a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   1543c:	68fb      	ldr	r3, [r7, #12]
   1543e:	2233      	movs	r2, #51	; 0x33
   15440:	2105      	movs	r1, #5
   15442:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   15444:	697b      	ldr	r3, [r7, #20]
   15446:	2201      	movs	r2, #1
   15448:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   1544a:	2300      	movs	r3, #0
}
   1544c:	0018      	movs	r0, r3
   1544e:	46bd      	mov	sp, r7
   15450:	b006      	add	sp, #24
   15452:	bd80      	pop	{r7, pc}
   15454:	00015395 	.word	0x00015395
   15458:	000153a9 	.word	0x000153a9

0001545c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1545c:	b580      	push	{r7, lr}
   1545e:	b086      	sub	sp, #24
   15460:	af00      	add	r7, sp, #0
   15462:	60f8      	str	r0, [r7, #12]
   15464:	60b9      	str	r1, [r7, #8]
   15466:	1dbb      	adds	r3, r7, #6
   15468:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1546a:	68fb      	ldr	r3, [r7, #12]
   1546c:	681b      	ldr	r3, [r3, #0]
   1546e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   15470:	4b16      	ldr	r3, [pc, #88]	; (154cc <_usart_read_buffer+0x70>)
   15472:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   15474:	68fb      	ldr	r3, [r7, #12]
   15476:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   15478:	b29b      	uxth	r3, r3
   1547a:	2b00      	cmp	r3, #0
   1547c:	d003      	beq.n	15486 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   1547e:	4b14      	ldr	r3, [pc, #80]	; (154d0 <_usart_read_buffer+0x74>)
   15480:	4798      	blx	r3
		return STATUS_BUSY;
   15482:	2305      	movs	r3, #5
   15484:	e01e      	b.n	154c4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   15486:	68fb      	ldr	r3, [r7, #12]
   15488:	1dba      	adds	r2, r7, #6
   1548a:	8812      	ldrh	r2, [r2, #0]
   1548c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   1548e:	4b10      	ldr	r3, [pc, #64]	; (154d0 <_usart_read_buffer+0x74>)
   15490:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   15492:	68fb      	ldr	r3, [r7, #12]
   15494:	68ba      	ldr	r2, [r7, #8]
   15496:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   15498:	68fb      	ldr	r3, [r7, #12]
   1549a:	2232      	movs	r2, #50	; 0x32
   1549c:	2105      	movs	r1, #5
   1549e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   154a0:	697b      	ldr	r3, [r7, #20]
   154a2:	2204      	movs	r2, #4
   154a4:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   154a6:	68fb      	ldr	r3, [r7, #12]
   154a8:	7a1b      	ldrb	r3, [r3, #8]
   154aa:	2b00      	cmp	r3, #0
   154ac:	d002      	beq.n	154b4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   154ae:	697b      	ldr	r3, [r7, #20]
   154b0:	2220      	movs	r2, #32
   154b2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   154b4:	68fb      	ldr	r3, [r7, #12]
   154b6:	7a5b      	ldrb	r3, [r3, #9]
   154b8:	2b00      	cmp	r3, #0
   154ba:	d002      	beq.n	154c2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   154bc:	697b      	ldr	r3, [r7, #20]
   154be:	2208      	movs	r2, #8
   154c0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   154c2:	2300      	movs	r3, #0
}
   154c4:	0018      	movs	r0, r3
   154c6:	46bd      	mov	sp, r7
   154c8:	b006      	add	sp, #24
   154ca:	bd80      	pop	{r7, pc}
   154cc:	00015395 	.word	0x00015395
   154d0:	000153a9 	.word	0x000153a9

000154d4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   154d4:	b580      	push	{r7, lr}
   154d6:	b084      	sub	sp, #16
   154d8:	af00      	add	r7, sp, #0
   154da:	60f8      	str	r0, [r7, #12]
   154dc:	60b9      	str	r1, [r7, #8]
   154de:	1dfb      	adds	r3, r7, #7
   154e0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   154e2:	1dfb      	adds	r3, r7, #7
   154e4:	781b      	ldrb	r3, [r3, #0]
   154e6:	68fa      	ldr	r2, [r7, #12]
   154e8:	3302      	adds	r3, #2
   154ea:	009b      	lsls	r3, r3, #2
   154ec:	18d3      	adds	r3, r2, r3
   154ee:	3304      	adds	r3, #4
   154f0:	68ba      	ldr	r2, [r7, #8]
   154f2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   154f4:	68fb      	ldr	r3, [r7, #12]
   154f6:	2230      	movs	r2, #48	; 0x30
   154f8:	5c9b      	ldrb	r3, [r3, r2]
   154fa:	b25a      	sxtb	r2, r3
   154fc:	1dfb      	adds	r3, r7, #7
   154fe:	781b      	ldrb	r3, [r3, #0]
   15500:	2101      	movs	r1, #1
   15502:	4099      	lsls	r1, r3
   15504:	000b      	movs	r3, r1
   15506:	b25b      	sxtb	r3, r3
   15508:	4313      	orrs	r3, r2
   1550a:	b25b      	sxtb	r3, r3
   1550c:	b2d9      	uxtb	r1, r3
   1550e:	68fb      	ldr	r3, [r7, #12]
   15510:	2230      	movs	r2, #48	; 0x30
   15512:	5499      	strb	r1, [r3, r2]
}
   15514:	46c0      	nop			; (mov r8, r8)
   15516:	46bd      	mov	sp, r7
   15518:	b004      	add	sp, #16
   1551a:	bd80      	pop	{r7, pc}

0001551c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1551c:	b580      	push	{r7, lr}
   1551e:	b084      	sub	sp, #16
   15520:	af00      	add	r7, sp, #0
   15522:	60f8      	str	r0, [r7, #12]
   15524:	60b9      	str	r1, [r7, #8]
   15526:	1dbb      	adds	r3, r7, #6
   15528:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   1552a:	1dbb      	adds	r3, r7, #6
   1552c:	881b      	ldrh	r3, [r3, #0]
   1552e:	2b00      	cmp	r3, #0
   15530:	d101      	bne.n	15536 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   15532:	2317      	movs	r3, #23
   15534:	e010      	b.n	15558 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   15536:	68fb      	ldr	r3, [r7, #12]
   15538:	79db      	ldrb	r3, [r3, #7]
   1553a:	2201      	movs	r2, #1
   1553c:	4053      	eors	r3, r2
   1553e:	b2db      	uxtb	r3, r3
   15540:	2b00      	cmp	r3, #0
   15542:	d001      	beq.n	15548 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   15544:	231c      	movs	r3, #28
   15546:	e007      	b.n	15558 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   15548:	1dbb      	adds	r3, r7, #6
   1554a:	881a      	ldrh	r2, [r3, #0]
   1554c:	68b9      	ldr	r1, [r7, #8]
   1554e:	68fb      	ldr	r3, [r7, #12]
   15550:	0018      	movs	r0, r3
   15552:	4b03      	ldr	r3, [pc, #12]	; (15560 <usart_write_buffer_job+0x44>)
   15554:	4798      	blx	r3
   15556:	0003      	movs	r3, r0
}
   15558:	0018      	movs	r0, r3
   1555a:	46bd      	mov	sp, r7
   1555c:	b004      	add	sp, #16
   1555e:	bd80      	pop	{r7, pc}
   15560:	00015401 	.word	0x00015401

00015564 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   15564:	b580      	push	{r7, lr}
   15566:	b084      	sub	sp, #16
   15568:	af00      	add	r7, sp, #0
   1556a:	60f8      	str	r0, [r7, #12]
   1556c:	60b9      	str	r1, [r7, #8]
   1556e:	1dbb      	adds	r3, r7, #6
   15570:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   15572:	1dbb      	adds	r3, r7, #6
   15574:	881b      	ldrh	r3, [r3, #0]
   15576:	2b00      	cmp	r3, #0
   15578:	d101      	bne.n	1557e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   1557a:	2317      	movs	r3, #23
   1557c:	e010      	b.n	155a0 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   1557e:	68fb      	ldr	r3, [r7, #12]
   15580:	799b      	ldrb	r3, [r3, #6]
   15582:	2201      	movs	r2, #1
   15584:	4053      	eors	r3, r2
   15586:	b2db      	uxtb	r3, r3
   15588:	2b00      	cmp	r3, #0
   1558a:	d001      	beq.n	15590 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   1558c:	231c      	movs	r3, #28
   1558e:	e007      	b.n	155a0 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   15590:	1dbb      	adds	r3, r7, #6
   15592:	881a      	ldrh	r2, [r3, #0]
   15594:	68b9      	ldr	r1, [r7, #8]
   15596:	68fb      	ldr	r3, [r7, #12]
   15598:	0018      	movs	r0, r3
   1559a:	4b03      	ldr	r3, [pc, #12]	; (155a8 <usart_read_buffer_job+0x44>)
   1559c:	4798      	blx	r3
   1559e:	0003      	movs	r3, r0
}
   155a0:	0018      	movs	r0, r3
   155a2:	46bd      	mov	sp, r7
   155a4:	b004      	add	sp, #16
   155a6:	bd80      	pop	{r7, pc}
   155a8:	0001545d 	.word	0x0001545d

000155ac <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   155ac:	b580      	push	{r7, lr}
   155ae:	b084      	sub	sp, #16
   155b0:	af00      	add	r7, sp, #0
   155b2:	6078      	str	r0, [r7, #4]
   155b4:	000a      	movs	r2, r1
   155b6:	1cfb      	adds	r3, r7, #3
   155b8:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   155ba:	1cfb      	adds	r3, r7, #3
   155bc:	781b      	ldrb	r3, [r3, #0]
   155be:	2b00      	cmp	r3, #0
   155c0:	d002      	beq.n	155c8 <usart_get_job_status+0x1c>
   155c2:	2b01      	cmp	r3, #1
   155c4:	d007      	beq.n	155d6 <usart_get_job_status+0x2a>
   155c6:	e00d      	b.n	155e4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   155c8:	230f      	movs	r3, #15
   155ca:	18fb      	adds	r3, r7, r3
   155cc:	687a      	ldr	r2, [r7, #4]
   155ce:	2132      	movs	r1, #50	; 0x32
   155d0:	5c52      	ldrb	r2, [r2, r1]
   155d2:	701a      	strb	r2, [r3, #0]
			break;
   155d4:	e00b      	b.n	155ee <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   155d6:	230f      	movs	r3, #15
   155d8:	18fb      	adds	r3, r7, r3
   155da:	687a      	ldr	r2, [r7, #4]
   155dc:	2133      	movs	r1, #51	; 0x33
   155de:	5c52      	ldrb	r2, [r2, r1]
   155e0:	701a      	strb	r2, [r3, #0]
			break;
   155e2:	e004      	b.n	155ee <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   155e4:	230f      	movs	r3, #15
   155e6:	18fb      	adds	r3, r7, r3
   155e8:	2217      	movs	r2, #23
   155ea:	701a      	strb	r2, [r3, #0]
			break;
   155ec:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   155ee:	230f      	movs	r3, #15
   155f0:	18fb      	adds	r3, r7, r3
   155f2:	781b      	ldrb	r3, [r3, #0]
}
   155f4:	0018      	movs	r0, r3
   155f6:	46bd      	mov	sp, r7
   155f8:	b004      	add	sp, #16
   155fa:	bd80      	pop	{r7, pc}

000155fc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   155fc:	b580      	push	{r7, lr}
   155fe:	b088      	sub	sp, #32
   15600:	af00      	add	r7, sp, #0
   15602:	0002      	movs	r2, r0
   15604:	1dfb      	adds	r3, r7, #7
   15606:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   15608:	1dfb      	adds	r3, r7, #7
   1560a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   1560c:	4ba3      	ldr	r3, [pc, #652]	; (1589c <_usart_interrupt_handler+0x2a0>)
   1560e:	0092      	lsls	r2, r2, #2
   15610:	58d3      	ldr	r3, [r2, r3]
   15612:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   15614:	69bb      	ldr	r3, [r7, #24]
   15616:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   15618:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   1561a:	69bb      	ldr	r3, [r7, #24]
   1561c:	0018      	movs	r0, r3
   1561e:	4ba0      	ldr	r3, [pc, #640]	; (158a0 <_usart_interrupt_handler+0x2a4>)
   15620:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   15622:	697b      	ldr	r3, [r7, #20]
   15624:	7e1b      	ldrb	r3, [r3, #24]
   15626:	b2da      	uxtb	r2, r3
   15628:	2312      	movs	r3, #18
   1562a:	18fb      	adds	r3, r7, r3
   1562c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   1562e:	697b      	ldr	r3, [r7, #20]
   15630:	7d9b      	ldrb	r3, [r3, #22]
   15632:	b2db      	uxtb	r3, r3
   15634:	b29a      	uxth	r2, r3
   15636:	2312      	movs	r3, #18
   15638:	18fb      	adds	r3, r7, r3
   1563a:	2112      	movs	r1, #18
   1563c:	1879      	adds	r1, r7, r1
   1563e:	8809      	ldrh	r1, [r1, #0]
   15640:	400a      	ands	r2, r1
   15642:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   15644:	69bb      	ldr	r3, [r7, #24]
   15646:	2230      	movs	r2, #48	; 0x30
   15648:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   1564a:	69ba      	ldr	r2, [r7, #24]
   1564c:	2131      	movs	r1, #49	; 0x31
   1564e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   15650:	4013      	ands	r3, r2
   15652:	b2da      	uxtb	r2, r3
   15654:	2310      	movs	r3, #16
   15656:	18fb      	adds	r3, r7, r3
   15658:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1565a:	2312      	movs	r3, #18
   1565c:	18fb      	adds	r3, r7, r3
   1565e:	881b      	ldrh	r3, [r3, #0]
   15660:	2201      	movs	r2, #1
   15662:	4013      	ands	r3, r2
   15664:	d044      	beq.n	156f0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   15666:	69bb      	ldr	r3, [r7, #24]
   15668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1566a:	b29b      	uxth	r3, r3
   1566c:	2b00      	cmp	r3, #0
   1566e:	d03c      	beq.n	156ea <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   15670:	69bb      	ldr	r3, [r7, #24]
   15672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15674:	781b      	ldrb	r3, [r3, #0]
   15676:	b2da      	uxtb	r2, r3
   15678:	231c      	movs	r3, #28
   1567a:	18fb      	adds	r3, r7, r3
   1567c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1567e:	69bb      	ldr	r3, [r7, #24]
   15680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15682:	1c5a      	adds	r2, r3, #1
   15684:	69bb      	ldr	r3, [r7, #24]
   15686:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   15688:	69bb      	ldr	r3, [r7, #24]
   1568a:	795b      	ldrb	r3, [r3, #5]
   1568c:	2b01      	cmp	r3, #1
   1568e:	d113      	bne.n	156b8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   15690:	69bb      	ldr	r3, [r7, #24]
   15692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15694:	781b      	ldrb	r3, [r3, #0]
   15696:	b2db      	uxtb	r3, r3
   15698:	021b      	lsls	r3, r3, #8
   1569a:	b21a      	sxth	r2, r3
   1569c:	231c      	movs	r3, #28
   1569e:	18fb      	adds	r3, r7, r3
   156a0:	2100      	movs	r1, #0
   156a2:	5e5b      	ldrsh	r3, [r3, r1]
   156a4:	4313      	orrs	r3, r2
   156a6:	b21a      	sxth	r2, r3
   156a8:	231c      	movs	r3, #28
   156aa:	18fb      	adds	r3, r7, r3
   156ac:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   156ae:	69bb      	ldr	r3, [r7, #24]
   156b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   156b2:	1c5a      	adds	r2, r3, #1
   156b4:	69bb      	ldr	r3, [r7, #24]
   156b6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   156b8:	231c      	movs	r3, #28
   156ba:	18fb      	adds	r3, r7, r3
   156bc:	881b      	ldrh	r3, [r3, #0]
   156be:	05db      	lsls	r3, r3, #23
   156c0:	0ddb      	lsrs	r3, r3, #23
   156c2:	b29a      	uxth	r2, r3
   156c4:	697b      	ldr	r3, [r7, #20]
   156c6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   156c8:	69bb      	ldr	r3, [r7, #24]
   156ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   156cc:	b29b      	uxth	r3, r3
   156ce:	3b01      	subs	r3, #1
   156d0:	b29b      	uxth	r3, r3
   156d2:	69ba      	ldr	r2, [r7, #24]
   156d4:	1c19      	adds	r1, r3, #0
   156d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   156d8:	2b00      	cmp	r3, #0
   156da:	d109      	bne.n	156f0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   156dc:	697b      	ldr	r3, [r7, #20]
   156de:	2201      	movs	r2, #1
   156e0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   156e2:	697b      	ldr	r3, [r7, #20]
   156e4:	2202      	movs	r2, #2
   156e6:	759a      	strb	r2, [r3, #22]
   156e8:	e002      	b.n	156f0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   156ea:	697b      	ldr	r3, [r7, #20]
   156ec:	2201      	movs	r2, #1
   156ee:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   156f0:	2312      	movs	r3, #18
   156f2:	18fb      	adds	r3, r7, r3
   156f4:	881b      	ldrh	r3, [r3, #0]
   156f6:	2202      	movs	r2, #2
   156f8:	4013      	ands	r3, r2
   156fa:	d011      	beq.n	15720 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   156fc:	697b      	ldr	r3, [r7, #20]
   156fe:	2202      	movs	r2, #2
   15700:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   15702:	69bb      	ldr	r3, [r7, #24]
   15704:	2233      	movs	r2, #51	; 0x33
   15706:	2100      	movs	r1, #0
   15708:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   1570a:	2310      	movs	r3, #16
   1570c:	18fb      	adds	r3, r7, r3
   1570e:	881b      	ldrh	r3, [r3, #0]
   15710:	2201      	movs	r2, #1
   15712:	4013      	ands	r3, r2
   15714:	d004      	beq.n	15720 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   15716:	69bb      	ldr	r3, [r7, #24]
   15718:	68db      	ldr	r3, [r3, #12]
   1571a:	69ba      	ldr	r2, [r7, #24]
   1571c:	0010      	movs	r0, r2
   1571e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   15720:	2312      	movs	r3, #18
   15722:	18fb      	adds	r3, r7, r3
   15724:	881b      	ldrh	r3, [r3, #0]
   15726:	2204      	movs	r2, #4
   15728:	4013      	ands	r3, r2
   1572a:	d100      	bne.n	1572e <_usart_interrupt_handler+0x132>
   1572c:	e0bd      	b.n	158aa <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   1572e:	69bb      	ldr	r3, [r7, #24]
   15730:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   15732:	b29b      	uxth	r3, r3
   15734:	2b00      	cmp	r3, #0
   15736:	d100      	bne.n	1573a <_usart_interrupt_handler+0x13e>
   15738:	e0b4      	b.n	158a4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1573a:	697b      	ldr	r3, [r7, #20]
   1573c:	8b5b      	ldrh	r3, [r3, #26]
   1573e:	b29b      	uxth	r3, r3
   15740:	b2da      	uxtb	r2, r3
   15742:	231f      	movs	r3, #31
   15744:	18fb      	adds	r3, r7, r3
   15746:	213f      	movs	r1, #63	; 0x3f
   15748:	400a      	ands	r2, r1
   1574a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   1574c:	231f      	movs	r3, #31
   1574e:	18fb      	adds	r3, r7, r3
   15750:	781b      	ldrb	r3, [r3, #0]
   15752:	2208      	movs	r2, #8
   15754:	4013      	ands	r3, r2
   15756:	d007      	beq.n	15768 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   15758:	231f      	movs	r3, #31
   1575a:	18fb      	adds	r3, r7, r3
   1575c:	221f      	movs	r2, #31
   1575e:	18ba      	adds	r2, r7, r2
   15760:	7812      	ldrb	r2, [r2, #0]
   15762:	2108      	movs	r1, #8
   15764:	438a      	bics	r2, r1
   15766:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   15768:	231f      	movs	r3, #31
   1576a:	18fb      	adds	r3, r7, r3
   1576c:	781b      	ldrb	r3, [r3, #0]
   1576e:	2b00      	cmp	r3, #0
   15770:	d050      	beq.n	15814 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   15772:	231f      	movs	r3, #31
   15774:	18fb      	adds	r3, r7, r3
   15776:	781b      	ldrb	r3, [r3, #0]
   15778:	2202      	movs	r2, #2
   1577a:	4013      	ands	r3, r2
   1577c:	d007      	beq.n	1578e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1577e:	69bb      	ldr	r3, [r7, #24]
   15780:	2232      	movs	r2, #50	; 0x32
   15782:	211a      	movs	r1, #26
   15784:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   15786:	697b      	ldr	r3, [r7, #20]
   15788:	2202      	movs	r2, #2
   1578a:	835a      	strh	r2, [r3, #26]
   1578c:	e036      	b.n	157fc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1578e:	231f      	movs	r3, #31
   15790:	18fb      	adds	r3, r7, r3
   15792:	781b      	ldrb	r3, [r3, #0]
   15794:	2204      	movs	r2, #4
   15796:	4013      	ands	r3, r2
   15798:	d007      	beq.n	157aa <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   1579a:	69bb      	ldr	r3, [r7, #24]
   1579c:	2232      	movs	r2, #50	; 0x32
   1579e:	211e      	movs	r1, #30
   157a0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   157a2:	697b      	ldr	r3, [r7, #20]
   157a4:	2204      	movs	r2, #4
   157a6:	835a      	strh	r2, [r3, #26]
   157a8:	e028      	b.n	157fc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   157aa:	231f      	movs	r3, #31
   157ac:	18fb      	adds	r3, r7, r3
   157ae:	781b      	ldrb	r3, [r3, #0]
   157b0:	2201      	movs	r2, #1
   157b2:	4013      	ands	r3, r2
   157b4:	d007      	beq.n	157c6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   157b6:	69bb      	ldr	r3, [r7, #24]
   157b8:	2232      	movs	r2, #50	; 0x32
   157ba:	2113      	movs	r1, #19
   157bc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   157be:	697b      	ldr	r3, [r7, #20]
   157c0:	2201      	movs	r2, #1
   157c2:	835a      	strh	r2, [r3, #26]
   157c4:	e01a      	b.n	157fc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   157c6:	231f      	movs	r3, #31
   157c8:	18fb      	adds	r3, r7, r3
   157ca:	781b      	ldrb	r3, [r3, #0]
   157cc:	2210      	movs	r2, #16
   157ce:	4013      	ands	r3, r2
   157d0:	d007      	beq.n	157e2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   157d2:	69bb      	ldr	r3, [r7, #24]
   157d4:	2232      	movs	r2, #50	; 0x32
   157d6:	2142      	movs	r1, #66	; 0x42
   157d8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   157da:	697b      	ldr	r3, [r7, #20]
   157dc:	2210      	movs	r2, #16
   157de:	835a      	strh	r2, [r3, #26]
   157e0:	e00c      	b.n	157fc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   157e2:	231f      	movs	r3, #31
   157e4:	18fb      	adds	r3, r7, r3
   157e6:	781b      	ldrb	r3, [r3, #0]
   157e8:	2220      	movs	r2, #32
   157ea:	4013      	ands	r3, r2
   157ec:	d006      	beq.n	157fc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   157ee:	69bb      	ldr	r3, [r7, #24]
   157f0:	2232      	movs	r2, #50	; 0x32
   157f2:	2141      	movs	r1, #65	; 0x41
   157f4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   157f6:	697b      	ldr	r3, [r7, #20]
   157f8:	2220      	movs	r2, #32
   157fa:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   157fc:	2310      	movs	r3, #16
   157fe:	18fb      	adds	r3, r7, r3
   15800:	881b      	ldrh	r3, [r3, #0]
   15802:	2204      	movs	r2, #4
   15804:	4013      	ands	r3, r2
				if (callback_status
   15806:	d050      	beq.n	158aa <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   15808:	69bb      	ldr	r3, [r7, #24]
   1580a:	695b      	ldr	r3, [r3, #20]
   1580c:	69ba      	ldr	r2, [r7, #24]
   1580e:	0010      	movs	r0, r2
   15810:	4798      	blx	r3
   15812:	e04a      	b.n	158aa <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   15814:	697b      	ldr	r3, [r7, #20]
   15816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   15818:	b29a      	uxth	r2, r3
   1581a:	230e      	movs	r3, #14
   1581c:	18fb      	adds	r3, r7, r3
   1581e:	05d2      	lsls	r2, r2, #23
   15820:	0dd2      	lsrs	r2, r2, #23
   15822:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   15824:	69bb      	ldr	r3, [r7, #24]
   15826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15828:	220e      	movs	r2, #14
   1582a:	18ba      	adds	r2, r7, r2
   1582c:	8812      	ldrh	r2, [r2, #0]
   1582e:	b2d2      	uxtb	r2, r2
   15830:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   15832:	69bb      	ldr	r3, [r7, #24]
   15834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15836:	1c5a      	adds	r2, r3, #1
   15838:	69bb      	ldr	r3, [r7, #24]
   1583a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1583c:	69bb      	ldr	r3, [r7, #24]
   1583e:	795b      	ldrb	r3, [r3, #5]
   15840:	2b01      	cmp	r3, #1
   15842:	d10d      	bne.n	15860 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   15844:	69bb      	ldr	r3, [r7, #24]
   15846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15848:	220e      	movs	r2, #14
   1584a:	18ba      	adds	r2, r7, r2
   1584c:	8812      	ldrh	r2, [r2, #0]
   1584e:	0a12      	lsrs	r2, r2, #8
   15850:	b292      	uxth	r2, r2
   15852:	b2d2      	uxtb	r2, r2
   15854:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   15856:	69bb      	ldr	r3, [r7, #24]
   15858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1585a:	1c5a      	adds	r2, r3, #1
   1585c:	69bb      	ldr	r3, [r7, #24]
   1585e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   15860:	69bb      	ldr	r3, [r7, #24]
   15862:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   15864:	b29b      	uxth	r3, r3
   15866:	3b01      	subs	r3, #1
   15868:	b29b      	uxth	r3, r3
   1586a:	69ba      	ldr	r2, [r7, #24]
   1586c:	1c19      	adds	r1, r3, #0
   1586e:	8591      	strh	r1, [r2, #44]	; 0x2c
   15870:	2b00      	cmp	r3, #0
   15872:	d11a      	bne.n	158aa <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   15874:	697b      	ldr	r3, [r7, #20]
   15876:	2204      	movs	r2, #4
   15878:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   1587a:	69bb      	ldr	r3, [r7, #24]
   1587c:	2232      	movs	r2, #50	; 0x32
   1587e:	2100      	movs	r1, #0
   15880:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   15882:	2310      	movs	r3, #16
   15884:	18fb      	adds	r3, r7, r3
   15886:	881b      	ldrh	r3, [r3, #0]
   15888:	2202      	movs	r2, #2
   1588a:	4013      	ands	r3, r2
					if (callback_status
   1588c:	d00d      	beq.n	158aa <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1588e:	69bb      	ldr	r3, [r7, #24]
   15890:	691b      	ldr	r3, [r3, #16]
   15892:	69ba      	ldr	r2, [r7, #24]
   15894:	0010      	movs	r0, r2
   15896:	4798      	blx	r3
   15898:	e007      	b.n	158aa <_usart_interrupt_handler+0x2ae>
   1589a:	46c0      	nop			; (mov r8, r8)
   1589c:	20005648 	.word	0x20005648
   158a0:	000153dd 	.word	0x000153dd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   158a4:	697b      	ldr	r3, [r7, #20]
   158a6:	2204      	movs	r2, #4
   158a8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   158aa:	2312      	movs	r3, #18
   158ac:	18fb      	adds	r3, r7, r3
   158ae:	881b      	ldrh	r3, [r3, #0]
   158b0:	2210      	movs	r2, #16
   158b2:	4013      	ands	r3, r2
   158b4:	d010      	beq.n	158d8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   158b6:	697b      	ldr	r3, [r7, #20]
   158b8:	2210      	movs	r2, #16
   158ba:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   158bc:	697b      	ldr	r3, [r7, #20]
   158be:	2210      	movs	r2, #16
   158c0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   158c2:	2310      	movs	r3, #16
   158c4:	18fb      	adds	r3, r7, r3
   158c6:	881b      	ldrh	r3, [r3, #0]
   158c8:	2210      	movs	r2, #16
   158ca:	4013      	ands	r3, r2
   158cc:	d004      	beq.n	158d8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   158ce:	69bb      	ldr	r3, [r7, #24]
   158d0:	69db      	ldr	r3, [r3, #28]
   158d2:	69ba      	ldr	r2, [r7, #24]
   158d4:	0010      	movs	r0, r2
   158d6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   158d8:	2312      	movs	r3, #18
   158da:	18fb      	adds	r3, r7, r3
   158dc:	881b      	ldrh	r3, [r3, #0]
   158de:	2220      	movs	r2, #32
   158e0:	4013      	ands	r3, r2
   158e2:	d010      	beq.n	15906 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   158e4:	697b      	ldr	r3, [r7, #20]
   158e6:	2220      	movs	r2, #32
   158e8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   158ea:	697b      	ldr	r3, [r7, #20]
   158ec:	2220      	movs	r2, #32
   158ee:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   158f0:	2310      	movs	r3, #16
   158f2:	18fb      	adds	r3, r7, r3
   158f4:	881b      	ldrh	r3, [r3, #0]
   158f6:	2208      	movs	r2, #8
   158f8:	4013      	ands	r3, r2
   158fa:	d004      	beq.n	15906 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   158fc:	69bb      	ldr	r3, [r7, #24]
   158fe:	699b      	ldr	r3, [r3, #24]
   15900:	69ba      	ldr	r2, [r7, #24]
   15902:	0010      	movs	r0, r2
   15904:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   15906:	2312      	movs	r3, #18
   15908:	18fb      	adds	r3, r7, r3
   1590a:	881b      	ldrh	r3, [r3, #0]
   1590c:	2208      	movs	r2, #8
   1590e:	4013      	ands	r3, r2
   15910:	d010      	beq.n	15934 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   15912:	697b      	ldr	r3, [r7, #20]
   15914:	2208      	movs	r2, #8
   15916:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   15918:	697b      	ldr	r3, [r7, #20]
   1591a:	2208      	movs	r2, #8
   1591c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   1591e:	2310      	movs	r3, #16
   15920:	18fb      	adds	r3, r7, r3
   15922:	881b      	ldrh	r3, [r3, #0]
   15924:	2220      	movs	r2, #32
   15926:	4013      	ands	r3, r2
   15928:	d004      	beq.n	15934 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   1592a:	69bb      	ldr	r3, [r7, #24]
   1592c:	6a1b      	ldr	r3, [r3, #32]
   1592e:	69ba      	ldr	r2, [r7, #24]
   15930:	0010      	movs	r0, r2
   15932:	4798      	blx	r3
		}
	}
#endif
}
   15934:	46c0      	nop			; (mov r8, r8)
   15936:	46bd      	mov	sp, r7
   15938:	b008      	add	sp, #32
   1593a:	bd80      	pop	{r7, pc}

0001593c <system_gclk_gen_get_config_defaults>:
{
   1593c:	b580      	push	{r7, lr}
   1593e:	b082      	sub	sp, #8
   15940:	af00      	add	r7, sp, #0
   15942:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   15944:	687b      	ldr	r3, [r7, #4]
   15946:	2201      	movs	r2, #1
   15948:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   1594a:	687b      	ldr	r3, [r7, #4]
   1594c:	2200      	movs	r2, #0
   1594e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   15950:	687b      	ldr	r3, [r7, #4]
   15952:	2206      	movs	r2, #6
   15954:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   15956:	687b      	ldr	r3, [r7, #4]
   15958:	2200      	movs	r2, #0
   1595a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   1595c:	687b      	ldr	r3, [r7, #4]
   1595e:	2200      	movs	r2, #0
   15960:	725a      	strb	r2, [r3, #9]
}
   15962:	46c0      	nop			; (mov r8, r8)
   15964:	46bd      	mov	sp, r7
   15966:	b002      	add	sp, #8
   15968:	bd80      	pop	{r7, pc}

0001596a <system_gclk_chan_get_config_defaults>:
{
   1596a:	b580      	push	{r7, lr}
   1596c:	b082      	sub	sp, #8
   1596e:	af00      	add	r7, sp, #0
   15970:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   15972:	687b      	ldr	r3, [r7, #4]
   15974:	2200      	movs	r2, #0
   15976:	701a      	strb	r2, [r3, #0]
}
   15978:	46c0      	nop			; (mov r8, r8)
   1597a:	46bd      	mov	sp, r7
   1597c:	b002      	add	sp, #8
   1597e:	bd80      	pop	{r7, pc}

00015980 <system_clock_source_osc8m_get_config_defaults>:
{
   15980:	b580      	push	{r7, lr}
   15982:	b082      	sub	sp, #8
   15984:	af00      	add	r7, sp, #0
   15986:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   15988:	687b      	ldr	r3, [r7, #4]
   1598a:	2203      	movs	r2, #3
   1598c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   1598e:	687b      	ldr	r3, [r7, #4]
   15990:	2200      	movs	r2, #0
   15992:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   15994:	687b      	ldr	r3, [r7, #4]
   15996:	2201      	movs	r2, #1
   15998:	709a      	strb	r2, [r3, #2]
}
   1599a:	46c0      	nop			; (mov r8, r8)
   1599c:	46bd      	mov	sp, r7
   1599e:	b002      	add	sp, #8
   159a0:	bd80      	pop	{r7, pc}
	...

000159a4 <system_cpu_clock_set_divider>:
{
   159a4:	b580      	push	{r7, lr}
   159a6:	b082      	sub	sp, #8
   159a8:	af00      	add	r7, sp, #0
   159aa:	0002      	movs	r2, r0
   159ac:	1dfb      	adds	r3, r7, #7
   159ae:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   159b0:	4a03      	ldr	r2, [pc, #12]	; (159c0 <system_cpu_clock_set_divider+0x1c>)
   159b2:	1dfb      	adds	r3, r7, #7
   159b4:	781b      	ldrb	r3, [r3, #0]
   159b6:	7213      	strb	r3, [r2, #8]
}
   159b8:	46c0      	nop			; (mov r8, r8)
   159ba:	46bd      	mov	sp, r7
   159bc:	b002      	add	sp, #8
   159be:	bd80      	pop	{r7, pc}
   159c0:	40000400 	.word	0x40000400

000159c4 <system_apb_clock_set_divider>:
{
   159c4:	b580      	push	{r7, lr}
   159c6:	b082      	sub	sp, #8
   159c8:	af00      	add	r7, sp, #0
   159ca:	0002      	movs	r2, r0
   159cc:	1dfb      	adds	r3, r7, #7
   159ce:	701a      	strb	r2, [r3, #0]
   159d0:	1dbb      	adds	r3, r7, #6
   159d2:	1c0a      	adds	r2, r1, #0
   159d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   159d6:	1dfb      	adds	r3, r7, #7
   159d8:	781b      	ldrb	r3, [r3, #0]
   159da:	2b01      	cmp	r3, #1
   159dc:	d008      	beq.n	159f0 <system_apb_clock_set_divider+0x2c>
   159de:	2b02      	cmp	r3, #2
   159e0:	d00b      	beq.n	159fa <system_apb_clock_set_divider+0x36>
   159e2:	2b00      	cmp	r3, #0
   159e4:	d10e      	bne.n	15a04 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   159e6:	4a0b      	ldr	r2, [pc, #44]	; (15a14 <system_apb_clock_set_divider+0x50>)
   159e8:	1dbb      	adds	r3, r7, #6
   159ea:	781b      	ldrb	r3, [r3, #0]
   159ec:	7253      	strb	r3, [r2, #9]
			break;
   159ee:	e00b      	b.n	15a08 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   159f0:	4a08      	ldr	r2, [pc, #32]	; (15a14 <system_apb_clock_set_divider+0x50>)
   159f2:	1dbb      	adds	r3, r7, #6
   159f4:	781b      	ldrb	r3, [r3, #0]
   159f6:	7293      	strb	r3, [r2, #10]
			break;
   159f8:	e006      	b.n	15a08 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   159fa:	4a06      	ldr	r2, [pc, #24]	; (15a14 <system_apb_clock_set_divider+0x50>)
   159fc:	1dbb      	adds	r3, r7, #6
   159fe:	781b      	ldrb	r3, [r3, #0]
   15a00:	72d3      	strb	r3, [r2, #11]
			break;
   15a02:	e001      	b.n	15a08 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   15a04:	2317      	movs	r3, #23
   15a06:	e000      	b.n	15a0a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   15a08:	2300      	movs	r3, #0
}
   15a0a:	0018      	movs	r0, r3
   15a0c:	46bd      	mov	sp, r7
   15a0e:	b002      	add	sp, #8
   15a10:	bd80      	pop	{r7, pc}
   15a12:	46c0      	nop			; (mov r8, r8)
   15a14:	40000400 	.word	0x40000400

00015a18 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   15a18:	b580      	push	{r7, lr}
   15a1a:	b082      	sub	sp, #8
   15a1c:	af00      	add	r7, sp, #0
   15a1e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   15a20:	687b      	ldr	r3, [r7, #4]
   15a22:	2201      	movs	r2, #1
   15a24:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   15a26:	687b      	ldr	r3, [r7, #4]
   15a28:	2200      	movs	r2, #0
   15a2a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   15a2c:	687b      	ldr	r3, [r7, #4]
   15a2e:	2200      	movs	r2, #0
   15a30:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   15a32:	687b      	ldr	r3, [r7, #4]
   15a34:	2200      	movs	r2, #0
   15a36:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   15a38:	687b      	ldr	r3, [r7, #4]
   15a3a:	2200      	movs	r2, #0
   15a3c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   15a3e:	687b      	ldr	r3, [r7, #4]
   15a40:	4a0a      	ldr	r2, [pc, #40]	; (15a6c <system_clock_source_dpll_get_config_defaults+0x54>)
   15a42:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   15a44:	687b      	ldr	r3, [r7, #4]
   15a46:	2280      	movs	r2, #128	; 0x80
   15a48:	0212      	lsls	r2, r2, #8
   15a4a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   15a4c:	687b      	ldr	r3, [r7, #4]
   15a4e:	2201      	movs	r2, #1
   15a50:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   15a52:	687b      	ldr	r3, [r7, #4]
   15a54:	2200      	movs	r2, #0
   15a56:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   15a58:	687b      	ldr	r3, [r7, #4]
   15a5a:	2200      	movs	r2, #0
   15a5c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   15a5e:	687b      	ldr	r3, [r7, #4]
   15a60:	2200      	movs	r2, #0
   15a62:	749a      	strb	r2, [r3, #18]
};
   15a64:	46c0      	nop			; (mov r8, r8)
   15a66:	46bd      	mov	sp, r7
   15a68:	b002      	add	sp, #8
   15a6a:	bd80      	pop	{r7, pc}
   15a6c:	02dc6c00 	.word	0x02dc6c00

00015a70 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   15a70:	b580      	push	{r7, lr}
   15a72:	b082      	sub	sp, #8
   15a74:	af00      	add	r7, sp, #0
   15a76:	0002      	movs	r2, r0
   15a78:	1dfb      	adds	r3, r7, #7
   15a7a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   15a7c:	4a08      	ldr	r2, [pc, #32]	; (15aa0 <system_flash_set_waitstates+0x30>)
   15a7e:	1dfb      	adds	r3, r7, #7
   15a80:	781b      	ldrb	r3, [r3, #0]
   15a82:	210f      	movs	r1, #15
   15a84:	400b      	ands	r3, r1
   15a86:	b2d9      	uxtb	r1, r3
   15a88:	6853      	ldr	r3, [r2, #4]
   15a8a:	200f      	movs	r0, #15
   15a8c:	4001      	ands	r1, r0
   15a8e:	0049      	lsls	r1, r1, #1
   15a90:	201e      	movs	r0, #30
   15a92:	4383      	bics	r3, r0
   15a94:	430b      	orrs	r3, r1
   15a96:	6053      	str	r3, [r2, #4]
}
   15a98:	46c0      	nop			; (mov r8, r8)
   15a9a:	46bd      	mov	sp, r7
   15a9c:	b002      	add	sp, #8
   15a9e:	bd80      	pop	{r7, pc}
   15aa0:	41004000 	.word	0x41004000

00015aa4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   15aa4:	b580      	push	{r7, lr}
   15aa6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   15aa8:	46c0      	nop			; (mov r8, r8)
   15aaa:	4b04      	ldr	r3, [pc, #16]	; (15abc <_system_dfll_wait_for_sync+0x18>)
   15aac:	68db      	ldr	r3, [r3, #12]
   15aae:	2210      	movs	r2, #16
   15ab0:	4013      	ands	r3, r2
   15ab2:	d0fa      	beq.n	15aaa <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   15ab4:	46c0      	nop			; (mov r8, r8)
   15ab6:	46bd      	mov	sp, r7
   15ab8:	bd80      	pop	{r7, pc}
   15aba:	46c0      	nop			; (mov r8, r8)
   15abc:	40000800 	.word	0x40000800

00015ac0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   15ac0:	b580      	push	{r7, lr}
   15ac2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   15ac4:	4b0c      	ldr	r3, [pc, #48]	; (15af8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15ac6:	2202      	movs	r2, #2
   15ac8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   15aca:	4b0c      	ldr	r3, [pc, #48]	; (15afc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   15acc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   15ace:	4a0a      	ldr	r2, [pc, #40]	; (15af8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15ad0:	4b0b      	ldr	r3, [pc, #44]	; (15b00 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   15ad2:	689b      	ldr	r3, [r3, #8]
   15ad4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   15ad6:	4a08      	ldr	r2, [pc, #32]	; (15af8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15ad8:	4b09      	ldr	r3, [pc, #36]	; (15b00 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   15ada:	685b      	ldr	r3, [r3, #4]
   15adc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   15ade:	4b06      	ldr	r3, [pc, #24]	; (15af8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15ae0:	2200      	movs	r2, #0
   15ae2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   15ae4:	4b05      	ldr	r3, [pc, #20]	; (15afc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   15ae6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   15ae8:	4a03      	ldr	r2, [pc, #12]	; (15af8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15aea:	4b05      	ldr	r3, [pc, #20]	; (15b00 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   15aec:	681b      	ldr	r3, [r3, #0]
   15aee:	b29b      	uxth	r3, r3
   15af0:	8493      	strh	r3, [r2, #36]	; 0x24
}
   15af2:	46c0      	nop			; (mov r8, r8)
   15af4:	46bd      	mov	sp, r7
   15af6:	bd80      	pop	{r7, pc}
   15af8:	40000800 	.word	0x40000800
   15afc:	00015aa5 	.word	0x00015aa5
   15b00:	20003d68 	.word	0x20003d68

00015b04 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   15b04:	b580      	push	{r7, lr}
   15b06:	b082      	sub	sp, #8
   15b08:	af00      	add	r7, sp, #0
   15b0a:	0002      	movs	r2, r0
   15b0c:	1dfb      	adds	r3, r7, #7
   15b0e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   15b10:	1dfb      	adds	r3, r7, #7
   15b12:	781b      	ldrb	r3, [r3, #0]
   15b14:	2b08      	cmp	r3, #8
   15b16:	d841      	bhi.n	15b9c <system_clock_source_get_hz+0x98>
   15b18:	009a      	lsls	r2, r3, #2
   15b1a:	4b23      	ldr	r3, [pc, #140]	; (15ba8 <system_clock_source_get_hz+0xa4>)
   15b1c:	18d3      	adds	r3, r2, r3
   15b1e:	681b      	ldr	r3, [r3, #0]
   15b20:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   15b22:	4b22      	ldr	r3, [pc, #136]	; (15bac <system_clock_source_get_hz+0xa8>)
   15b24:	691b      	ldr	r3, [r3, #16]
   15b26:	e03a      	b.n	15b9e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   15b28:	4b21      	ldr	r3, [pc, #132]	; (15bb0 <system_clock_source_get_hz+0xac>)
   15b2a:	6a1b      	ldr	r3, [r3, #32]
   15b2c:	059b      	lsls	r3, r3, #22
   15b2e:	0f9b      	lsrs	r3, r3, #30
   15b30:	b2db      	uxtb	r3, r3
   15b32:	001a      	movs	r2, r3
   15b34:	4b1f      	ldr	r3, [pc, #124]	; (15bb4 <system_clock_source_get_hz+0xb0>)
   15b36:	40d3      	lsrs	r3, r2
   15b38:	e031      	b.n	15b9e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   15b3a:	2380      	movs	r3, #128	; 0x80
   15b3c:	021b      	lsls	r3, r3, #8
   15b3e:	e02e      	b.n	15b9e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   15b40:	2380      	movs	r3, #128	; 0x80
   15b42:	021b      	lsls	r3, r3, #8
   15b44:	e02b      	b.n	15b9e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   15b46:	4b19      	ldr	r3, [pc, #100]	; (15bac <system_clock_source_get_hz+0xa8>)
   15b48:	695b      	ldr	r3, [r3, #20]
   15b4a:	e028      	b.n	15b9e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   15b4c:	4b17      	ldr	r3, [pc, #92]	; (15bac <system_clock_source_get_hz+0xa8>)
   15b4e:	681b      	ldr	r3, [r3, #0]
   15b50:	2202      	movs	r2, #2
   15b52:	4013      	ands	r3, r2
   15b54:	d101      	bne.n	15b5a <system_clock_source_get_hz+0x56>
			return 0;
   15b56:	2300      	movs	r3, #0
   15b58:	e021      	b.n	15b9e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   15b5a:	4b17      	ldr	r3, [pc, #92]	; (15bb8 <system_clock_source_get_hz+0xb4>)
   15b5c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   15b5e:	4b13      	ldr	r3, [pc, #76]	; (15bac <system_clock_source_get_hz+0xa8>)
   15b60:	681b      	ldr	r3, [r3, #0]
   15b62:	2224      	movs	r2, #36	; 0x24
   15b64:	4013      	ands	r3, r2
   15b66:	2b04      	cmp	r3, #4
   15b68:	d109      	bne.n	15b7e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   15b6a:	2000      	movs	r0, #0
   15b6c:	4b13      	ldr	r3, [pc, #76]	; (15bbc <system_clock_source_get_hz+0xb8>)
   15b6e:	4798      	blx	r3
   15b70:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   15b72:	4b0e      	ldr	r3, [pc, #56]	; (15bac <system_clock_source_get_hz+0xa8>)
   15b74:	689b      	ldr	r3, [r3, #8]
   15b76:	041b      	lsls	r3, r3, #16
   15b78:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   15b7a:	4353      	muls	r3, r2
   15b7c:	e00f      	b.n	15b9e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   15b7e:	4b10      	ldr	r3, [pc, #64]	; (15bc0 <system_clock_source_get_hz+0xbc>)
   15b80:	e00d      	b.n	15b9e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   15b82:	4a0b      	ldr	r2, [pc, #44]	; (15bb0 <system_clock_source_get_hz+0xac>)
   15b84:	2350      	movs	r3, #80	; 0x50
   15b86:	5cd3      	ldrb	r3, [r2, r3]
   15b88:	b2db      	uxtb	r3, r3
   15b8a:	001a      	movs	r2, r3
   15b8c:	2304      	movs	r3, #4
   15b8e:	4013      	ands	r3, r2
   15b90:	d101      	bne.n	15b96 <system_clock_source_get_hz+0x92>
			return 0;
   15b92:	2300      	movs	r3, #0
   15b94:	e003      	b.n	15b9e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   15b96:	4b05      	ldr	r3, [pc, #20]	; (15bac <system_clock_source_get_hz+0xa8>)
   15b98:	68db      	ldr	r3, [r3, #12]
   15b9a:	e000      	b.n	15b9e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   15b9c:	2300      	movs	r3, #0
	}
}
   15b9e:	0018      	movs	r0, r3
   15ba0:	46bd      	mov	sp, r7
   15ba2:	b002      	add	sp, #8
   15ba4:	bd80      	pop	{r7, pc}
   15ba6:	46c0      	nop			; (mov r8, r8)
   15ba8:	00025750 	.word	0x00025750
   15bac:	20003d68 	.word	0x20003d68
   15bb0:	40000800 	.word	0x40000800
   15bb4:	007a1200 	.word	0x007a1200
   15bb8:	00015aa5 	.word	0x00015aa5
   15bbc:	000165a1 	.word	0x000165a1
   15bc0:	02dc6c00 	.word	0x02dc6c00

00015bc4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   15bc4:	b580      	push	{r7, lr}
   15bc6:	b084      	sub	sp, #16
   15bc8:	af00      	add	r7, sp, #0
   15bca:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   15bcc:	4b1a      	ldr	r3, [pc, #104]	; (15c38 <system_clock_source_osc8m_set_config+0x74>)
   15bce:	6a1b      	ldr	r3, [r3, #32]
   15bd0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   15bd2:	687b      	ldr	r3, [r7, #4]
   15bd4:	781b      	ldrb	r3, [r3, #0]
   15bd6:	1c1a      	adds	r2, r3, #0
   15bd8:	2303      	movs	r3, #3
   15bda:	4013      	ands	r3, r2
   15bdc:	b2da      	uxtb	r2, r3
   15bde:	230d      	movs	r3, #13
   15be0:	18fb      	adds	r3, r7, r3
   15be2:	2103      	movs	r1, #3
   15be4:	400a      	ands	r2, r1
   15be6:	0010      	movs	r0, r2
   15be8:	781a      	ldrb	r2, [r3, #0]
   15bea:	2103      	movs	r1, #3
   15bec:	438a      	bics	r2, r1
   15bee:	1c11      	adds	r1, r2, #0
   15bf0:	1c02      	adds	r2, r0, #0
   15bf2:	430a      	orrs	r2, r1
   15bf4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   15bf6:	687b      	ldr	r3, [r7, #4]
   15bf8:	789a      	ldrb	r2, [r3, #2]
   15bfa:	230c      	movs	r3, #12
   15bfc:	18fb      	adds	r3, r7, r3
   15bfe:	01d0      	lsls	r0, r2, #7
   15c00:	781a      	ldrb	r2, [r3, #0]
   15c02:	217f      	movs	r1, #127	; 0x7f
   15c04:	400a      	ands	r2, r1
   15c06:	1c11      	adds	r1, r2, #0
   15c08:	1c02      	adds	r2, r0, #0
   15c0a:	430a      	orrs	r2, r1
   15c0c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   15c0e:	687b      	ldr	r3, [r7, #4]
   15c10:	785a      	ldrb	r2, [r3, #1]
   15c12:	230c      	movs	r3, #12
   15c14:	18fb      	adds	r3, r7, r3
   15c16:	2101      	movs	r1, #1
   15c18:	400a      	ands	r2, r1
   15c1a:	0190      	lsls	r0, r2, #6
   15c1c:	781a      	ldrb	r2, [r3, #0]
   15c1e:	2140      	movs	r1, #64	; 0x40
   15c20:	438a      	bics	r2, r1
   15c22:	1c11      	adds	r1, r2, #0
   15c24:	1c02      	adds	r2, r0, #0
   15c26:	430a      	orrs	r2, r1
   15c28:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   15c2a:	4b03      	ldr	r3, [pc, #12]	; (15c38 <system_clock_source_osc8m_set_config+0x74>)
   15c2c:	68fa      	ldr	r2, [r7, #12]
   15c2e:	621a      	str	r2, [r3, #32]
}
   15c30:	46c0      	nop			; (mov r8, r8)
   15c32:	46bd      	mov	sp, r7
   15c34:	b004      	add	sp, #16
   15c36:	bd80      	pop	{r7, pc}
   15c38:	40000800 	.word	0x40000800

00015c3c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   15c3c:	b580      	push	{r7, lr}
   15c3e:	b086      	sub	sp, #24
   15c40:	af00      	add	r7, sp, #0
   15c42:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   15c44:	687b      	ldr	r3, [r7, #4]
   15c46:	68db      	ldr	r3, [r3, #12]
   15c48:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   15c4a:	687b      	ldr	r3, [r7, #4]
   15c4c:	7d1b      	ldrb	r3, [r3, #20]
   15c4e:	2b01      	cmp	r3, #1
   15c50:	d10a      	bne.n	15c68 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   15c52:	687b      	ldr	r3, [r7, #4]
   15c54:	8a1b      	ldrh	r3, [r3, #16]
   15c56:	3301      	adds	r3, #1
   15c58:	005b      	lsls	r3, r3, #1
   15c5a:	001a      	movs	r2, r3
   15c5c:	4b36      	ldr	r3, [pc, #216]	; (15d38 <system_clock_source_dpll_set_config+0xfc>)
   15c5e:	0011      	movs	r1, r2
   15c60:	6978      	ldr	r0, [r7, #20]
   15c62:	4798      	blx	r3
   15c64:	0003      	movs	r3, r0
   15c66:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   15c68:	687b      	ldr	r3, [r7, #4]
   15c6a:	689b      	ldr	r3, [r3, #8]
   15c6c:	011a      	lsls	r2, r3, #4
   15c6e:	4b32      	ldr	r3, [pc, #200]	; (15d38 <system_clock_source_dpll_set_config+0xfc>)
   15c70:	6979      	ldr	r1, [r7, #20]
   15c72:	0010      	movs	r0, r2
   15c74:	4798      	blx	r3
   15c76:	0003      	movs	r3, r0
   15c78:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   15c7a:	693b      	ldr	r3, [r7, #16]
   15c7c:	b2da      	uxtb	r2, r3
   15c7e:	230f      	movs	r3, #15
   15c80:	18fb      	adds	r3, r7, r3
   15c82:	210f      	movs	r1, #15
   15c84:	400a      	ands	r2, r1
   15c86:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   15c88:	693b      	ldr	r3, [r7, #16]
   15c8a:	091b      	lsrs	r3, r3, #4
   15c8c:	3b01      	subs	r3, #1
   15c8e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   15c90:	492a      	ldr	r1, [pc, #168]	; (15d3c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   15c92:	687b      	ldr	r3, [r7, #4]
   15c94:	781b      	ldrb	r3, [r3, #0]
   15c96:	01db      	lsls	r3, r3, #7
   15c98:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   15c9a:	687b      	ldr	r3, [r7, #4]
   15c9c:	785b      	ldrb	r3, [r3, #1]
   15c9e:	019b      	lsls	r3, r3, #6
   15ca0:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   15ca2:	4313      	orrs	r3, r2
   15ca4:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   15ca6:	2344      	movs	r3, #68	; 0x44
   15ca8:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   15caa:	4b24      	ldr	r3, [pc, #144]	; (15d3c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   15cac:	220f      	movs	r2, #15
   15cae:	18ba      	adds	r2, r7, r2
   15cb0:	7812      	ldrb	r2, [r2, #0]
   15cb2:	0412      	lsls	r2, r2, #16
   15cb4:	0011      	movs	r1, r2
   15cb6:	22f0      	movs	r2, #240	; 0xf0
   15cb8:	0312      	lsls	r2, r2, #12
   15cba:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   15cbc:	693a      	ldr	r2, [r7, #16]
   15cbe:	0512      	lsls	r2, r2, #20
   15cc0:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   15cc2:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   15cc4:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   15cc6:	4b1d      	ldr	r3, [pc, #116]	; (15d3c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   15cc8:	687a      	ldr	r2, [r7, #4]
   15cca:	8a12      	ldrh	r2, [r2, #16]
   15ccc:	0412      	lsls	r2, r2, #16
   15cce:	0011      	movs	r1, r2
   15cd0:	4a1b      	ldr	r2, [pc, #108]	; (15d40 <system_clock_source_dpll_set_config+0x104>)
   15cd2:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   15cd4:	687a      	ldr	r2, [r7, #4]
   15cd6:	7892      	ldrb	r2, [r2, #2]
   15cd8:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   15cda:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   15cdc:	687a      	ldr	r2, [r7, #4]
   15cde:	7cd2      	ldrb	r2, [r2, #19]
   15ce0:	0212      	lsls	r2, r2, #8
   15ce2:	0010      	movs	r0, r2
   15ce4:	22e0      	movs	r2, #224	; 0xe0
   15ce6:	00d2      	lsls	r2, r2, #3
   15ce8:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   15cea:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   15cec:	687a      	ldr	r2, [r7, #4]
   15cee:	7d12      	ldrb	r2, [r2, #20]
   15cf0:	0112      	lsls	r2, r2, #4
   15cf2:	0010      	movs	r0, r2
   15cf4:	2230      	movs	r2, #48	; 0x30
   15cf6:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   15cf8:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   15cfa:	687a      	ldr	r2, [r7, #4]
   15cfc:	78d2      	ldrb	r2, [r2, #3]
   15cfe:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   15d00:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   15d02:	687a      	ldr	r2, [r7, #4]
   15d04:	7912      	ldrb	r2, [r2, #4]
   15d06:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   15d08:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   15d0a:	687a      	ldr	r2, [r7, #4]
   15d0c:	7c92      	ldrb	r2, [r2, #18]
   15d0e:	0010      	movs	r0, r2
   15d10:	2203      	movs	r2, #3
   15d12:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   15d14:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   15d16:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   15d18:	693b      	ldr	r3, [r7, #16]
   15d1a:	3301      	adds	r3, #1
   15d1c:	011a      	lsls	r2, r3, #4
   15d1e:	230f      	movs	r3, #15
   15d20:	18fb      	adds	r3, r7, r3
   15d22:	781b      	ldrb	r3, [r3, #0]
   15d24:	18d3      	adds	r3, r2, r3
   15d26:	697a      	ldr	r2, [r7, #20]
   15d28:	4353      	muls	r3, r2
   15d2a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   15d2c:	4b05      	ldr	r3, [pc, #20]	; (15d44 <system_clock_source_dpll_set_config+0x108>)
   15d2e:	60da      	str	r2, [r3, #12]
}
   15d30:	46c0      	nop			; (mov r8, r8)
   15d32:	46bd      	mov	sp, r7
   15d34:	b006      	add	sp, #24
   15d36:	bd80      	pop	{r7, pc}
   15d38:	0001ef45 	.word	0x0001ef45
   15d3c:	40000800 	.word	0x40000800
   15d40:	07ff0000 	.word	0x07ff0000
   15d44:	20003d68 	.word	0x20003d68

00015d48 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   15d48:	b580      	push	{r7, lr}
   15d4a:	b082      	sub	sp, #8
   15d4c:	af00      	add	r7, sp, #0
   15d4e:	0002      	movs	r2, r0
   15d50:	1dfb      	adds	r3, r7, #7
   15d52:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   15d54:	1dfb      	adds	r3, r7, #7
   15d56:	781b      	ldrb	r3, [r3, #0]
   15d58:	2b08      	cmp	r3, #8
   15d5a:	d83b      	bhi.n	15dd4 <system_clock_source_enable+0x8c>
   15d5c:	009a      	lsls	r2, r3, #2
   15d5e:	4b21      	ldr	r3, [pc, #132]	; (15de4 <system_clock_source_enable+0x9c>)
   15d60:	18d3      	adds	r3, r2, r3
   15d62:	681b      	ldr	r3, [r3, #0]
   15d64:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   15d66:	4b20      	ldr	r3, [pc, #128]	; (15de8 <system_clock_source_enable+0xa0>)
   15d68:	4a1f      	ldr	r2, [pc, #124]	; (15de8 <system_clock_source_enable+0xa0>)
   15d6a:	6a12      	ldr	r2, [r2, #32]
   15d6c:	2102      	movs	r1, #2
   15d6e:	430a      	orrs	r2, r1
   15d70:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   15d72:	2300      	movs	r3, #0
   15d74:	e031      	b.n	15dda <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   15d76:	4b1c      	ldr	r3, [pc, #112]	; (15de8 <system_clock_source_enable+0xa0>)
   15d78:	4a1b      	ldr	r2, [pc, #108]	; (15de8 <system_clock_source_enable+0xa0>)
   15d7a:	6992      	ldr	r2, [r2, #24]
   15d7c:	2102      	movs	r1, #2
   15d7e:	430a      	orrs	r2, r1
   15d80:	619a      	str	r2, [r3, #24]
		break;
   15d82:	e029      	b.n	15dd8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   15d84:	4a18      	ldr	r2, [pc, #96]	; (15de8 <system_clock_source_enable+0xa0>)
   15d86:	4b18      	ldr	r3, [pc, #96]	; (15de8 <system_clock_source_enable+0xa0>)
   15d88:	8a1b      	ldrh	r3, [r3, #16]
   15d8a:	b29b      	uxth	r3, r3
   15d8c:	2102      	movs	r1, #2
   15d8e:	430b      	orrs	r3, r1
   15d90:	b29b      	uxth	r3, r3
   15d92:	8213      	strh	r3, [r2, #16]
		break;
   15d94:	e020      	b.n	15dd8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   15d96:	4a14      	ldr	r2, [pc, #80]	; (15de8 <system_clock_source_enable+0xa0>)
   15d98:	4b13      	ldr	r3, [pc, #76]	; (15de8 <system_clock_source_enable+0xa0>)
   15d9a:	8a9b      	ldrh	r3, [r3, #20]
   15d9c:	b29b      	uxth	r3, r3
   15d9e:	2102      	movs	r1, #2
   15da0:	430b      	orrs	r3, r1
   15da2:	b29b      	uxth	r3, r3
   15da4:	8293      	strh	r3, [r2, #20]
		break;
   15da6:	e017      	b.n	15dd8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   15da8:	4b10      	ldr	r3, [pc, #64]	; (15dec <system_clock_source_enable+0xa4>)
   15daa:	681b      	ldr	r3, [r3, #0]
   15dac:	2202      	movs	r2, #2
   15dae:	431a      	orrs	r2, r3
   15db0:	4b0e      	ldr	r3, [pc, #56]	; (15dec <system_clock_source_enable+0xa4>)
   15db2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   15db4:	4b0e      	ldr	r3, [pc, #56]	; (15df0 <system_clock_source_enable+0xa8>)
   15db6:	4798      	blx	r3
		break;
   15db8:	e00e      	b.n	15dd8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   15dba:	4a0b      	ldr	r2, [pc, #44]	; (15de8 <system_clock_source_enable+0xa0>)
   15dbc:	490a      	ldr	r1, [pc, #40]	; (15de8 <system_clock_source_enable+0xa0>)
   15dbe:	2344      	movs	r3, #68	; 0x44
   15dc0:	5ccb      	ldrb	r3, [r1, r3]
   15dc2:	b2db      	uxtb	r3, r3
   15dc4:	2102      	movs	r1, #2
   15dc6:	430b      	orrs	r3, r1
   15dc8:	b2d9      	uxtb	r1, r3
   15dca:	2344      	movs	r3, #68	; 0x44
   15dcc:	54d1      	strb	r1, [r2, r3]
		break;
   15dce:	e003      	b.n	15dd8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   15dd0:	2300      	movs	r3, #0
   15dd2:	e002      	b.n	15dda <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   15dd4:	2317      	movs	r3, #23
   15dd6:	e000      	b.n	15dda <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   15dd8:	2300      	movs	r3, #0
}
   15dda:	0018      	movs	r0, r3
   15ddc:	46bd      	mov	sp, r7
   15dde:	b002      	add	sp, #8
   15de0:	bd80      	pop	{r7, pc}
   15de2:	46c0      	nop			; (mov r8, r8)
   15de4:	00025774 	.word	0x00025774
   15de8:	40000800 	.word	0x40000800
   15dec:	20003d68 	.word	0x20003d68
   15df0:	00015ac1 	.word	0x00015ac1

00015df4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   15df4:	b580      	push	{r7, lr}
   15df6:	b084      	sub	sp, #16
   15df8:	af00      	add	r7, sp, #0
   15dfa:	0002      	movs	r2, r0
   15dfc:	1dfb      	adds	r3, r7, #7
   15dfe:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   15e00:	2300      	movs	r3, #0
   15e02:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   15e04:	1dfb      	adds	r3, r7, #7
   15e06:	781b      	ldrb	r3, [r3, #0]
   15e08:	2b08      	cmp	r3, #8
   15e0a:	d821      	bhi.n	15e50 <system_clock_source_is_ready+0x5c>
   15e0c:	009a      	lsls	r2, r3, #2
   15e0e:	4b18      	ldr	r3, [pc, #96]	; (15e70 <system_clock_source_is_ready+0x7c>)
   15e10:	18d3      	adds	r3, r2, r3
   15e12:	681b      	ldr	r3, [r3, #0]
   15e14:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   15e16:	2308      	movs	r3, #8
   15e18:	60fb      	str	r3, [r7, #12]
		break;
   15e1a:	e01b      	b.n	15e54 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   15e1c:	2304      	movs	r3, #4
   15e1e:	60fb      	str	r3, [r7, #12]
		break;
   15e20:	e018      	b.n	15e54 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   15e22:	2301      	movs	r3, #1
   15e24:	60fb      	str	r3, [r7, #12]
		break;
   15e26:	e015      	b.n	15e54 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   15e28:	2302      	movs	r3, #2
   15e2a:	60fb      	str	r3, [r7, #12]
		break;
   15e2c:	e012      	b.n	15e54 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   15e2e:	2310      	movs	r3, #16
   15e30:	60fb      	str	r3, [r7, #12]
		}
		break;
   15e32:	e00f      	b.n	15e54 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   15e34:	4a0f      	ldr	r2, [pc, #60]	; (15e74 <system_clock_source_is_ready+0x80>)
   15e36:	2350      	movs	r3, #80	; 0x50
   15e38:	5cd3      	ldrb	r3, [r2, r3]
   15e3a:	b2db      	uxtb	r3, r3
   15e3c:	001a      	movs	r2, r3
   15e3e:	2303      	movs	r3, #3
   15e40:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   15e42:	3b03      	subs	r3, #3
   15e44:	425a      	negs	r2, r3
   15e46:	4153      	adcs	r3, r2
   15e48:	b2db      	uxtb	r3, r3
   15e4a:	e00c      	b.n	15e66 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   15e4c:	2301      	movs	r3, #1
   15e4e:	e00a      	b.n	15e66 <system_clock_source_is_ready+0x72>

	default:
		return false;
   15e50:	2300      	movs	r3, #0
   15e52:	e008      	b.n	15e66 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   15e54:	4b07      	ldr	r3, [pc, #28]	; (15e74 <system_clock_source_is_ready+0x80>)
   15e56:	68db      	ldr	r3, [r3, #12]
   15e58:	68fa      	ldr	r2, [r7, #12]
   15e5a:	401a      	ands	r2, r3
   15e5c:	68fb      	ldr	r3, [r7, #12]
   15e5e:	1ad3      	subs	r3, r2, r3
   15e60:	425a      	negs	r2, r3
   15e62:	4153      	adcs	r3, r2
   15e64:	b2db      	uxtb	r3, r3
}
   15e66:	0018      	movs	r0, r3
   15e68:	46bd      	mov	sp, r7
   15e6a:	b004      	add	sp, #16
   15e6c:	bd80      	pop	{r7, pc}
   15e6e:	46c0      	nop			; (mov r8, r8)
   15e70:	00025798 	.word	0x00025798
   15e74:	40000800 	.word	0x40000800

00015e78 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   15e78:	b580      	push	{r7, lr}
   15e7a:	b082      	sub	sp, #8
   15e7c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   15e7e:	003b      	movs	r3, r7
   15e80:	2203      	movs	r2, #3
   15e82:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   15e84:	2300      	movs	r3, #0
   15e86:	607b      	str	r3, [r7, #4]
   15e88:	e009      	b.n	15e9e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   15e8a:	687b      	ldr	r3, [r7, #4]
   15e8c:	b2db      	uxtb	r3, r3
   15e8e:	003a      	movs	r2, r7
   15e90:	0011      	movs	r1, r2
   15e92:	0018      	movs	r0, r3
   15e94:	4b05      	ldr	r3, [pc, #20]	; (15eac <_switch_peripheral_gclk+0x34>)
   15e96:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   15e98:	687b      	ldr	r3, [r7, #4]
   15e9a:	3301      	adds	r3, #1
   15e9c:	607b      	str	r3, [r7, #4]
   15e9e:	687b      	ldr	r3, [r7, #4]
   15ea0:	2b24      	cmp	r3, #36	; 0x24
   15ea2:	d9f2      	bls.n	15e8a <_switch_peripheral_gclk+0x12>
	}
}
   15ea4:	46c0      	nop			; (mov r8, r8)
   15ea6:	46bd      	mov	sp, r7
   15ea8:	b002      	add	sp, #8
   15eaa:	bd80      	pop	{r7, pc}
   15eac:	0001647d 	.word	0x0001647d

00015eb0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   15eb0:	b580      	push	{r7, lr}
   15eb2:	b0a6      	sub	sp, #152	; 0x98
   15eb4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   15eb6:	4b92      	ldr	r3, [pc, #584]	; (16100 <system_clock_init+0x250>)
   15eb8:	22c2      	movs	r2, #194	; 0xc2
   15eba:	00d2      	lsls	r2, r2, #3
   15ebc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   15ebe:	2003      	movs	r0, #3
   15ec0:	4b90      	ldr	r3, [pc, #576]	; (16104 <system_clock_init+0x254>)
   15ec2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   15ec4:	4b90      	ldr	r3, [pc, #576]	; (16108 <system_clock_init+0x258>)
   15ec6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   15ec8:	2394      	movs	r3, #148	; 0x94
   15eca:	18fb      	adds	r3, r7, r3
   15ecc:	0018      	movs	r0, r3
   15ece:	4b8f      	ldr	r3, [pc, #572]	; (1610c <system_clock_init+0x25c>)
   15ed0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   15ed2:	2394      	movs	r3, #148	; 0x94
   15ed4:	18fb      	adds	r3, r7, r3
   15ed6:	2200      	movs	r2, #0
   15ed8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   15eda:	2394      	movs	r3, #148	; 0x94
   15edc:	18fb      	adds	r3, r7, r3
   15ede:	2201      	movs	r2, #1
   15ee0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   15ee2:	2394      	movs	r3, #148	; 0x94
   15ee4:	18fb      	adds	r3, r7, r3
   15ee6:	2200      	movs	r2, #0
   15ee8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   15eea:	2394      	movs	r3, #148	; 0x94
   15eec:	18fb      	adds	r3, r7, r3
   15eee:	0018      	movs	r0, r3
   15ef0:	4b87      	ldr	r3, [pc, #540]	; (16110 <system_clock_init+0x260>)
   15ef2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   15ef4:	2006      	movs	r0, #6
   15ef6:	4b87      	ldr	r3, [pc, #540]	; (16114 <system_clock_init+0x264>)
   15ef8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   15efa:	4b87      	ldr	r3, [pc, #540]	; (16118 <system_clock_init+0x268>)
   15efc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   15efe:	2360      	movs	r3, #96	; 0x60
   15f00:	18fb      	adds	r3, r7, r3
   15f02:	0018      	movs	r0, r3
   15f04:	4b85      	ldr	r3, [pc, #532]	; (1611c <system_clock_init+0x26c>)
   15f06:	4798      	blx	r3
   15f08:	2360      	movs	r3, #96	; 0x60
   15f0a:	18fb      	adds	r3, r7, r3
   15f0c:	2206      	movs	r2, #6
   15f0e:	701a      	strb	r2, [r3, #0]
   15f10:	2360      	movs	r3, #96	; 0x60
   15f12:	18fb      	adds	r3, r7, r3
   15f14:	2208      	movs	r2, #8
   15f16:	605a      	str	r2, [r3, #4]
   15f18:	2360      	movs	r3, #96	; 0x60
   15f1a:	18fb      	adds	r3, r7, r3
   15f1c:	2200      	movs	r2, #0
   15f1e:	721a      	strb	r2, [r3, #8]
   15f20:	2360      	movs	r3, #96	; 0x60
   15f22:	18fb      	adds	r3, r7, r3
   15f24:	2200      	movs	r2, #0
   15f26:	725a      	strb	r2, [r3, #9]
   15f28:	2360      	movs	r3, #96	; 0x60
   15f2a:	18fb      	adds	r3, r7, r3
   15f2c:	0019      	movs	r1, r3
   15f2e:	2001      	movs	r0, #1
   15f30:	4b7b      	ldr	r3, [pc, #492]	; (16120 <system_clock_init+0x270>)
   15f32:	4798      	blx	r3
   15f34:	2001      	movs	r0, #1
   15f36:	4b7b      	ldr	r3, [pc, #492]	; (16124 <system_clock_init+0x274>)
   15f38:	4798      	blx	r3
   15f3a:	2354      	movs	r3, #84	; 0x54
   15f3c:	18fb      	adds	r3, r7, r3
   15f3e:	0018      	movs	r0, r3
   15f40:	4b76      	ldr	r3, [pc, #472]	; (1611c <system_clock_init+0x26c>)
   15f42:	4798      	blx	r3
   15f44:	2354      	movs	r3, #84	; 0x54
   15f46:	18fb      	adds	r3, r7, r3
   15f48:	2203      	movs	r2, #3
   15f4a:	701a      	strb	r2, [r3, #0]
   15f4c:	2354      	movs	r3, #84	; 0x54
   15f4e:	18fb      	adds	r3, r7, r3
   15f50:	2201      	movs	r2, #1
   15f52:	605a      	str	r2, [r3, #4]
   15f54:	2354      	movs	r3, #84	; 0x54
   15f56:	18fb      	adds	r3, r7, r3
   15f58:	2201      	movs	r2, #1
   15f5a:	721a      	strb	r2, [r3, #8]
   15f5c:	2354      	movs	r3, #84	; 0x54
   15f5e:	18fb      	adds	r3, r7, r3
   15f60:	2200      	movs	r2, #0
   15f62:	725a      	strb	r2, [r3, #9]
   15f64:	2354      	movs	r3, #84	; 0x54
   15f66:	18fb      	adds	r3, r7, r3
   15f68:	0019      	movs	r1, r3
   15f6a:	2002      	movs	r0, #2
   15f6c:	4b6c      	ldr	r3, [pc, #432]	; (16120 <system_clock_init+0x270>)
   15f6e:	4798      	blx	r3
   15f70:	2002      	movs	r0, #2
   15f72:	4b6c      	ldr	r3, [pc, #432]	; (16124 <system_clock_init+0x274>)
   15f74:	4798      	blx	r3
   15f76:	233c      	movs	r3, #60	; 0x3c
   15f78:	18fb      	adds	r3, r7, r3
   15f7a:	0018      	movs	r0, r3
   15f7c:	4b67      	ldr	r3, [pc, #412]	; (1611c <system_clock_init+0x26c>)
   15f7e:	4798      	blx	r3
   15f80:	233c      	movs	r3, #60	; 0x3c
   15f82:	18fb      	adds	r3, r7, r3
   15f84:	2203      	movs	r2, #3
   15f86:	701a      	strb	r2, [r3, #0]
   15f88:	233c      	movs	r3, #60	; 0x3c
   15f8a:	18fb      	adds	r3, r7, r3
   15f8c:	2220      	movs	r2, #32
   15f8e:	605a      	str	r2, [r3, #4]
   15f90:	233c      	movs	r3, #60	; 0x3c
   15f92:	18fb      	adds	r3, r7, r3
   15f94:	2200      	movs	r2, #0
   15f96:	721a      	strb	r2, [r3, #8]
   15f98:	233c      	movs	r3, #60	; 0x3c
   15f9a:	18fb      	adds	r3, r7, r3
   15f9c:	2200      	movs	r2, #0
   15f9e:	725a      	strb	r2, [r3, #9]
   15fa0:	233c      	movs	r3, #60	; 0x3c
   15fa2:	18fb      	adds	r3, r7, r3
   15fa4:	0019      	movs	r1, r3
   15fa6:	2004      	movs	r0, #4
   15fa8:	4b5d      	ldr	r3, [pc, #372]	; (16120 <system_clock_init+0x270>)
   15faa:	4798      	blx	r3
   15fac:	2004      	movs	r0, #4
   15fae:	4b5d      	ldr	r3, [pc, #372]	; (16124 <system_clock_init+0x274>)
   15fb0:	4798      	blx	r3
   15fb2:	2330      	movs	r3, #48	; 0x30
   15fb4:	18fb      	adds	r3, r7, r3
   15fb6:	0018      	movs	r0, r3
   15fb8:	4b58      	ldr	r3, [pc, #352]	; (1611c <system_clock_init+0x26c>)
   15fba:	4798      	blx	r3
   15fbc:	2330      	movs	r3, #48	; 0x30
   15fbe:	18fb      	adds	r3, r7, r3
   15fc0:	2206      	movs	r2, #6
   15fc2:	701a      	strb	r2, [r3, #0]
   15fc4:	2330      	movs	r3, #48	; 0x30
   15fc6:	18fb      	adds	r3, r7, r3
   15fc8:	2201      	movs	r2, #1
   15fca:	605a      	str	r2, [r3, #4]
   15fcc:	2330      	movs	r3, #48	; 0x30
   15fce:	18fb      	adds	r3, r7, r3
   15fd0:	2200      	movs	r2, #0
   15fd2:	721a      	strb	r2, [r3, #8]
   15fd4:	2330      	movs	r3, #48	; 0x30
   15fd6:	18fb      	adds	r3, r7, r3
   15fd8:	2200      	movs	r2, #0
   15fda:	725a      	strb	r2, [r3, #9]
   15fdc:	2330      	movs	r3, #48	; 0x30
   15fde:	18fb      	adds	r3, r7, r3
   15fe0:	0019      	movs	r1, r3
   15fe2:	2005      	movs	r0, #5
   15fe4:	4b4e      	ldr	r3, [pc, #312]	; (16120 <system_clock_init+0x270>)
   15fe6:	4798      	blx	r3
   15fe8:	2005      	movs	r0, #5
   15fea:	4b4e      	ldr	r3, [pc, #312]	; (16124 <system_clock_init+0x274>)
   15fec:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   15fee:	2390      	movs	r3, #144	; 0x90
   15ff0:	18fb      	adds	r3, r7, r3
   15ff2:	0018      	movs	r0, r3
   15ff4:	4b4c      	ldr	r3, [pc, #304]	; (16128 <system_clock_init+0x278>)
   15ff6:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   15ff8:	2390      	movs	r3, #144	; 0x90
   15ffa:	18fb      	adds	r3, r7, r3
   15ffc:	2201      	movs	r2, #1
   15ffe:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   16000:	2390      	movs	r3, #144	; 0x90
   16002:	18fb      	adds	r3, r7, r3
   16004:	0019      	movs	r1, r3
   16006:	2001      	movs	r0, #1
   16008:	4b48      	ldr	r3, [pc, #288]	; (1612c <system_clock_init+0x27c>)
   1600a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   1600c:	2001      	movs	r0, #1
   1600e:	4b48      	ldr	r3, [pc, #288]	; (16130 <system_clock_init+0x280>)
   16010:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   16012:	2378      	movs	r3, #120	; 0x78
   16014:	18fb      	adds	r3, r7, r3
   16016:	0018      	movs	r0, r3
   16018:	4b46      	ldr	r3, [pc, #280]	; (16134 <system_clock_init+0x284>)
   1601a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   1601c:	2378      	movs	r3, #120	; 0x78
   1601e:	18fb      	adds	r3, r7, r3
   16020:	2200      	movs	r2, #0
   16022:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   16024:	2378      	movs	r3, #120	; 0x78
   16026:	18fb      	adds	r3, r7, r3
   16028:	2200      	movs	r2, #0
   1602a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   1602c:	2378      	movs	r3, #120	; 0x78
   1602e:	18fb      	adds	r3, r7, r3
   16030:	2200      	movs	r2, #0
   16032:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   16034:	2378      	movs	r3, #120	; 0x78
   16036:	18fb      	adds	r3, r7, r3
   16038:	2200      	movs	r2, #0
   1603a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   1603c:	2378      	movs	r3, #120	; 0x78
   1603e:	18fb      	adds	r3, r7, r3
   16040:	2200      	movs	r2, #0
   16042:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   16044:	2378      	movs	r3, #120	; 0x78
   16046:	18fb      	adds	r3, r7, r3
   16048:	2200      	movs	r2, #0
   1604a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   1604c:	2378      	movs	r3, #120	; 0x78
   1604e:	18fb      	adds	r3, r7, r3
   16050:	2200      	movs	r2, #0
   16052:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   16054:	2378      	movs	r3, #120	; 0x78
   16056:	18fb      	adds	r3, r7, r3
   16058:	2202      	movs	r2, #2
   1605a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   1605c:	2378      	movs	r3, #120	; 0x78
   1605e:	18fb      	adds	r3, r7, r3
   16060:	4a35      	ldr	r2, [pc, #212]	; (16138 <system_clock_init+0x288>)
   16062:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   16064:	2378      	movs	r3, #120	; 0x78
   16066:	18fb      	adds	r3, r7, r3
   16068:	2201      	movs	r2, #1
   1606a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   1606c:	2378      	movs	r3, #120	; 0x78
   1606e:	18fb      	adds	r3, r7, r3
   16070:	4a32      	ldr	r2, [pc, #200]	; (1613c <system_clock_init+0x28c>)
   16072:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   16074:	2378      	movs	r3, #120	; 0x78
   16076:	18fb      	adds	r3, r7, r3
   16078:	0018      	movs	r0, r3
   1607a:	4b31      	ldr	r3, [pc, #196]	; (16140 <system_clock_init+0x290>)
   1607c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   1607e:	2008      	movs	r0, #8
   16080:	4b24      	ldr	r3, [pc, #144]	; (16114 <system_clock_init+0x264>)
   16082:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   16084:	46c0      	nop			; (mov r8, r8)
   16086:	2008      	movs	r0, #8
   16088:	4b2e      	ldr	r3, [pc, #184]	; (16144 <system_clock_init+0x294>)
   1608a:	4798      	blx	r3
   1608c:	0003      	movs	r3, r0
   1608e:	001a      	movs	r2, r3
   16090:	2301      	movs	r3, #1
   16092:	4053      	eors	r3, r2
   16094:	b2db      	uxtb	r3, r3
   16096:	2b00      	cmp	r3, #0
   16098:	d1f5      	bne.n	16086 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   1609a:	4919      	ldr	r1, [pc, #100]	; (16100 <system_clock_init+0x250>)
   1609c:	2244      	movs	r2, #68	; 0x44
   1609e:	5c8b      	ldrb	r3, [r1, r2]
   160a0:	2080      	movs	r0, #128	; 0x80
   160a2:	4240      	negs	r0, r0
   160a4:	4303      	orrs	r3, r0
   160a6:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   160a8:	2000      	movs	r0, #0
   160aa:	4b27      	ldr	r3, [pc, #156]	; (16148 <system_clock_init+0x298>)
   160ac:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   160ae:	2100      	movs	r1, #0
   160b0:	2000      	movs	r0, #0
   160b2:	4b26      	ldr	r3, [pc, #152]	; (1614c <system_clock_init+0x29c>)
   160b4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   160b6:	2100      	movs	r1, #0
   160b8:	2001      	movs	r0, #1
   160ba:	4b24      	ldr	r3, [pc, #144]	; (1614c <system_clock_init+0x29c>)
   160bc:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   160be:	2100      	movs	r1, #0
   160c0:	2002      	movs	r0, #2
   160c2:	4b22      	ldr	r3, [pc, #136]	; (1614c <system_clock_init+0x29c>)
   160c4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   160c6:	003b      	movs	r3, r7
   160c8:	0018      	movs	r0, r3
   160ca:	4b14      	ldr	r3, [pc, #80]	; (1611c <system_clock_init+0x26c>)
   160cc:	4798      	blx	r3
   160ce:	003b      	movs	r3, r7
   160d0:	2208      	movs	r2, #8
   160d2:	701a      	strb	r2, [r3, #0]
   160d4:	003b      	movs	r3, r7
   160d6:	2201      	movs	r2, #1
   160d8:	605a      	str	r2, [r3, #4]
   160da:	003b      	movs	r3, r7
   160dc:	2200      	movs	r2, #0
   160de:	721a      	strb	r2, [r3, #8]
   160e0:	003b      	movs	r3, r7
   160e2:	2201      	movs	r2, #1
   160e4:	725a      	strb	r2, [r3, #9]
   160e6:	003b      	movs	r3, r7
   160e8:	0019      	movs	r1, r3
   160ea:	2000      	movs	r0, #0
   160ec:	4b0c      	ldr	r3, [pc, #48]	; (16120 <system_clock_init+0x270>)
   160ee:	4798      	blx	r3
   160f0:	2000      	movs	r0, #0
   160f2:	4b0c      	ldr	r3, [pc, #48]	; (16124 <system_clock_init+0x274>)
   160f4:	4798      	blx	r3
#endif
}
   160f6:	46c0      	nop			; (mov r8, r8)
   160f8:	46bd      	mov	sp, r7
   160fa:	b026      	add	sp, #152	; 0x98
   160fc:	bd80      	pop	{r7, pc}
   160fe:	46c0      	nop			; (mov r8, r8)
   16100:	40000800 	.word	0x40000800
   16104:	00015a71 	.word	0x00015a71
   16108:	00015e79 	.word	0x00015e79
   1610c:	00015981 	.word	0x00015981
   16110:	00015bc5 	.word	0x00015bc5
   16114:	00015d49 	.word	0x00015d49
   16118:	000161f5 	.word	0x000161f5
   1611c:	0001593d 	.word	0x0001593d
   16120:	00016225 	.word	0x00016225
   16124:	00016349 	.word	0x00016349
   16128:	0001596b 	.word	0x0001596b
   1612c:	0001647d 	.word	0x0001647d
   16130:	000164c1 	.word	0x000164c1
   16134:	00015a19 	.word	0x00015a19
   16138:	000f4240 	.word	0x000f4240
   1613c:	02dc6c00 	.word	0x02dc6c00
   16140:	00015c3d 	.word	0x00015c3d
   16144:	00015df5 	.word	0x00015df5
   16148:	000159a5 	.word	0x000159a5
   1614c:	000159c5 	.word	0x000159c5

00016150 <system_apb_clock_set_mask>:
{
   16150:	b580      	push	{r7, lr}
   16152:	b082      	sub	sp, #8
   16154:	af00      	add	r7, sp, #0
   16156:	0002      	movs	r2, r0
   16158:	6039      	str	r1, [r7, #0]
   1615a:	1dfb      	adds	r3, r7, #7
   1615c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1615e:	1dfb      	adds	r3, r7, #7
   16160:	781b      	ldrb	r3, [r3, #0]
   16162:	2b01      	cmp	r3, #1
   16164:	d00a      	beq.n	1617c <system_apb_clock_set_mask+0x2c>
   16166:	2b02      	cmp	r3, #2
   16168:	d00f      	beq.n	1618a <system_apb_clock_set_mask+0x3a>
   1616a:	2b00      	cmp	r3, #0
   1616c:	d114      	bne.n	16198 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1616e:	4b0e      	ldr	r3, [pc, #56]	; (161a8 <system_apb_clock_set_mask+0x58>)
   16170:	4a0d      	ldr	r2, [pc, #52]	; (161a8 <system_apb_clock_set_mask+0x58>)
   16172:	6991      	ldr	r1, [r2, #24]
   16174:	683a      	ldr	r2, [r7, #0]
   16176:	430a      	orrs	r2, r1
   16178:	619a      	str	r2, [r3, #24]
			break;
   1617a:	e00f      	b.n	1619c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1617c:	4b0a      	ldr	r3, [pc, #40]	; (161a8 <system_apb_clock_set_mask+0x58>)
   1617e:	4a0a      	ldr	r2, [pc, #40]	; (161a8 <system_apb_clock_set_mask+0x58>)
   16180:	69d1      	ldr	r1, [r2, #28]
   16182:	683a      	ldr	r2, [r7, #0]
   16184:	430a      	orrs	r2, r1
   16186:	61da      	str	r2, [r3, #28]
			break;
   16188:	e008      	b.n	1619c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1618a:	4b07      	ldr	r3, [pc, #28]	; (161a8 <system_apb_clock_set_mask+0x58>)
   1618c:	4a06      	ldr	r2, [pc, #24]	; (161a8 <system_apb_clock_set_mask+0x58>)
   1618e:	6a11      	ldr	r1, [r2, #32]
   16190:	683a      	ldr	r2, [r7, #0]
   16192:	430a      	orrs	r2, r1
   16194:	621a      	str	r2, [r3, #32]
			break;
   16196:	e001      	b.n	1619c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   16198:	2317      	movs	r3, #23
   1619a:	e000      	b.n	1619e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1619c:	2300      	movs	r3, #0
}
   1619e:	0018      	movs	r0, r3
   161a0:	46bd      	mov	sp, r7
   161a2:	b002      	add	sp, #8
   161a4:	bd80      	pop	{r7, pc}
   161a6:	46c0      	nop			; (mov r8, r8)
   161a8:	40000400 	.word	0x40000400

000161ac <system_interrupt_enter_critical_section>:
{
   161ac:	b580      	push	{r7, lr}
   161ae:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   161b0:	4b02      	ldr	r3, [pc, #8]	; (161bc <system_interrupt_enter_critical_section+0x10>)
   161b2:	4798      	blx	r3
}
   161b4:	46c0      	nop			; (mov r8, r8)
   161b6:	46bd      	mov	sp, r7
   161b8:	bd80      	pop	{r7, pc}
   161ba:	46c0      	nop			; (mov r8, r8)
   161bc:	000127e9 	.word	0x000127e9

000161c0 <system_interrupt_leave_critical_section>:
{
   161c0:	b580      	push	{r7, lr}
   161c2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   161c4:	4b02      	ldr	r3, [pc, #8]	; (161d0 <system_interrupt_leave_critical_section+0x10>)
   161c6:	4798      	blx	r3
}
   161c8:	46c0      	nop			; (mov r8, r8)
   161ca:	46bd      	mov	sp, r7
   161cc:	bd80      	pop	{r7, pc}
   161ce:	46c0      	nop			; (mov r8, r8)
   161d0:	0001283d 	.word	0x0001283d

000161d4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   161d4:	b580      	push	{r7, lr}
   161d6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   161d8:	4b05      	ldr	r3, [pc, #20]	; (161f0 <system_gclk_is_syncing+0x1c>)
   161da:	785b      	ldrb	r3, [r3, #1]
   161dc:	b2db      	uxtb	r3, r3
   161de:	b25b      	sxtb	r3, r3
   161e0:	2b00      	cmp	r3, #0
   161e2:	da01      	bge.n	161e8 <system_gclk_is_syncing+0x14>
		return true;
   161e4:	2301      	movs	r3, #1
   161e6:	e000      	b.n	161ea <system_gclk_is_syncing+0x16>
	}

	return false;
   161e8:	2300      	movs	r3, #0
}
   161ea:	0018      	movs	r0, r3
   161ec:	46bd      	mov	sp, r7
   161ee:	bd80      	pop	{r7, pc}
   161f0:	40000c00 	.word	0x40000c00

000161f4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   161f4:	b580      	push	{r7, lr}
   161f6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   161f8:	2108      	movs	r1, #8
   161fa:	2000      	movs	r0, #0
   161fc:	4b07      	ldr	r3, [pc, #28]	; (1621c <system_gclk_init+0x28>)
   161fe:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   16200:	4b07      	ldr	r3, [pc, #28]	; (16220 <system_gclk_init+0x2c>)
   16202:	2201      	movs	r2, #1
   16204:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   16206:	46c0      	nop			; (mov r8, r8)
   16208:	4b05      	ldr	r3, [pc, #20]	; (16220 <system_gclk_init+0x2c>)
   1620a:	781b      	ldrb	r3, [r3, #0]
   1620c:	b2db      	uxtb	r3, r3
   1620e:	001a      	movs	r2, r3
   16210:	2301      	movs	r3, #1
   16212:	4013      	ands	r3, r2
   16214:	d1f8      	bne.n	16208 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   16216:	46c0      	nop			; (mov r8, r8)
   16218:	46bd      	mov	sp, r7
   1621a:	bd80      	pop	{r7, pc}
   1621c:	00016151 	.word	0x00016151
   16220:	40000c00 	.word	0x40000c00

00016224 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   16224:	b580      	push	{r7, lr}
   16226:	b086      	sub	sp, #24
   16228:	af00      	add	r7, sp, #0
   1622a:	0002      	movs	r2, r0
   1622c:	6039      	str	r1, [r7, #0]
   1622e:	1dfb      	adds	r3, r7, #7
   16230:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   16232:	1dfb      	adds	r3, r7, #7
   16234:	781b      	ldrb	r3, [r3, #0]
   16236:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   16238:	1dfb      	adds	r3, r7, #7
   1623a:	781b      	ldrb	r3, [r3, #0]
   1623c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1623e:	683b      	ldr	r3, [r7, #0]
   16240:	781b      	ldrb	r3, [r3, #0]
   16242:	021b      	lsls	r3, r3, #8
   16244:	001a      	movs	r2, r3
   16246:	697b      	ldr	r3, [r7, #20]
   16248:	4313      	orrs	r3, r2
   1624a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1624c:	683b      	ldr	r3, [r7, #0]
   1624e:	785b      	ldrb	r3, [r3, #1]
   16250:	2b00      	cmp	r3, #0
   16252:	d004      	beq.n	1625e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   16254:	697b      	ldr	r3, [r7, #20]
   16256:	2280      	movs	r2, #128	; 0x80
   16258:	02d2      	lsls	r2, r2, #11
   1625a:	4313      	orrs	r3, r2
   1625c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1625e:	683b      	ldr	r3, [r7, #0]
   16260:	7a5b      	ldrb	r3, [r3, #9]
   16262:	2b00      	cmp	r3, #0
   16264:	d004      	beq.n	16270 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   16266:	697b      	ldr	r3, [r7, #20]
   16268:	2280      	movs	r2, #128	; 0x80
   1626a:	0312      	lsls	r2, r2, #12
   1626c:	4313      	orrs	r3, r2
   1626e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   16270:	683b      	ldr	r3, [r7, #0]
   16272:	685b      	ldr	r3, [r3, #4]
   16274:	2b01      	cmp	r3, #1
   16276:	d92c      	bls.n	162d2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   16278:	683b      	ldr	r3, [r7, #0]
   1627a:	685a      	ldr	r2, [r3, #4]
   1627c:	683b      	ldr	r3, [r7, #0]
   1627e:	685b      	ldr	r3, [r3, #4]
   16280:	3b01      	subs	r3, #1
   16282:	4013      	ands	r3, r2
   16284:	d11a      	bne.n	162bc <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   16286:	2300      	movs	r3, #0
   16288:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1628a:	2302      	movs	r3, #2
   1628c:	60bb      	str	r3, [r7, #8]
   1628e:	e005      	b.n	1629c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   16290:	68fb      	ldr	r3, [r7, #12]
   16292:	3301      	adds	r3, #1
   16294:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   16296:	68bb      	ldr	r3, [r7, #8]
   16298:	005b      	lsls	r3, r3, #1
   1629a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   1629c:	683b      	ldr	r3, [r7, #0]
   1629e:	685a      	ldr	r2, [r3, #4]
   162a0:	68bb      	ldr	r3, [r7, #8]
   162a2:	429a      	cmp	r2, r3
   162a4:	d8f4      	bhi.n	16290 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   162a6:	68fb      	ldr	r3, [r7, #12]
   162a8:	021b      	lsls	r3, r3, #8
   162aa:	693a      	ldr	r2, [r7, #16]
   162ac:	4313      	orrs	r3, r2
   162ae:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   162b0:	697b      	ldr	r3, [r7, #20]
   162b2:	2280      	movs	r2, #128	; 0x80
   162b4:	0352      	lsls	r2, r2, #13
   162b6:	4313      	orrs	r3, r2
   162b8:	617b      	str	r3, [r7, #20]
   162ba:	e00a      	b.n	162d2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   162bc:	683b      	ldr	r3, [r7, #0]
   162be:	685b      	ldr	r3, [r3, #4]
   162c0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   162c2:	693a      	ldr	r2, [r7, #16]
   162c4:	4313      	orrs	r3, r2
   162c6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   162c8:	697b      	ldr	r3, [r7, #20]
   162ca:	2280      	movs	r2, #128	; 0x80
   162cc:	0292      	lsls	r2, r2, #10
   162ce:	4313      	orrs	r3, r2
   162d0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   162d2:	683b      	ldr	r3, [r7, #0]
   162d4:	7a1b      	ldrb	r3, [r3, #8]
   162d6:	2b00      	cmp	r3, #0
   162d8:	d004      	beq.n	162e4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   162da:	697b      	ldr	r3, [r7, #20]
   162dc:	2280      	movs	r2, #128	; 0x80
   162de:	0392      	lsls	r2, r2, #14
   162e0:	4313      	orrs	r3, r2
   162e2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   162e4:	46c0      	nop			; (mov r8, r8)
   162e6:	4b13      	ldr	r3, [pc, #76]	; (16334 <system_gclk_gen_set_config+0x110>)
   162e8:	4798      	blx	r3
   162ea:	1e03      	subs	r3, r0, #0
   162ec:	d1fb      	bne.n	162e6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   162ee:	4b12      	ldr	r3, [pc, #72]	; (16338 <system_gclk_gen_set_config+0x114>)
   162f0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   162f2:	4a12      	ldr	r2, [pc, #72]	; (1633c <system_gclk_gen_set_config+0x118>)
   162f4:	1dfb      	adds	r3, r7, #7
   162f6:	781b      	ldrb	r3, [r3, #0]
   162f8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   162fa:	46c0      	nop			; (mov r8, r8)
   162fc:	4b0d      	ldr	r3, [pc, #52]	; (16334 <system_gclk_gen_set_config+0x110>)
   162fe:	4798      	blx	r3
   16300:	1e03      	subs	r3, r0, #0
   16302:	d1fb      	bne.n	162fc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   16304:	4b0e      	ldr	r3, [pc, #56]	; (16340 <system_gclk_gen_set_config+0x11c>)
   16306:	693a      	ldr	r2, [r7, #16]
   16308:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   1630a:	46c0      	nop			; (mov r8, r8)
   1630c:	4b09      	ldr	r3, [pc, #36]	; (16334 <system_gclk_gen_set_config+0x110>)
   1630e:	4798      	blx	r3
   16310:	1e03      	subs	r3, r0, #0
   16312:	d1fb      	bne.n	1630c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   16314:	4b0a      	ldr	r3, [pc, #40]	; (16340 <system_gclk_gen_set_config+0x11c>)
   16316:	4a0a      	ldr	r2, [pc, #40]	; (16340 <system_gclk_gen_set_config+0x11c>)
   16318:	6851      	ldr	r1, [r2, #4]
   1631a:	2280      	movs	r2, #128	; 0x80
   1631c:	0252      	lsls	r2, r2, #9
   1631e:	4011      	ands	r1, r2
   16320:	697a      	ldr	r2, [r7, #20]
   16322:	430a      	orrs	r2, r1
   16324:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   16326:	4b07      	ldr	r3, [pc, #28]	; (16344 <system_gclk_gen_set_config+0x120>)
   16328:	4798      	blx	r3
}
   1632a:	46c0      	nop			; (mov r8, r8)
   1632c:	46bd      	mov	sp, r7
   1632e:	b006      	add	sp, #24
   16330:	bd80      	pop	{r7, pc}
   16332:	46c0      	nop			; (mov r8, r8)
   16334:	000161d5 	.word	0x000161d5
   16338:	000161ad 	.word	0x000161ad
   1633c:	40000c08 	.word	0x40000c08
   16340:	40000c00 	.word	0x40000c00
   16344:	000161c1 	.word	0x000161c1

00016348 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   16348:	b580      	push	{r7, lr}
   1634a:	b082      	sub	sp, #8
   1634c:	af00      	add	r7, sp, #0
   1634e:	0002      	movs	r2, r0
   16350:	1dfb      	adds	r3, r7, #7
   16352:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   16354:	46c0      	nop			; (mov r8, r8)
   16356:	4b0e      	ldr	r3, [pc, #56]	; (16390 <system_gclk_gen_enable+0x48>)
   16358:	4798      	blx	r3
   1635a:	1e03      	subs	r3, r0, #0
   1635c:	d1fb      	bne.n	16356 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1635e:	4b0d      	ldr	r3, [pc, #52]	; (16394 <system_gclk_gen_enable+0x4c>)
   16360:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   16362:	4a0d      	ldr	r2, [pc, #52]	; (16398 <system_gclk_gen_enable+0x50>)
   16364:	1dfb      	adds	r3, r7, #7
   16366:	781b      	ldrb	r3, [r3, #0]
   16368:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1636a:	46c0      	nop			; (mov r8, r8)
   1636c:	4b08      	ldr	r3, [pc, #32]	; (16390 <system_gclk_gen_enable+0x48>)
   1636e:	4798      	blx	r3
   16370:	1e03      	subs	r3, r0, #0
   16372:	d1fb      	bne.n	1636c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   16374:	4b09      	ldr	r3, [pc, #36]	; (1639c <system_gclk_gen_enable+0x54>)
   16376:	4a09      	ldr	r2, [pc, #36]	; (1639c <system_gclk_gen_enable+0x54>)
   16378:	6852      	ldr	r2, [r2, #4]
   1637a:	2180      	movs	r1, #128	; 0x80
   1637c:	0249      	lsls	r1, r1, #9
   1637e:	430a      	orrs	r2, r1
   16380:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   16382:	4b07      	ldr	r3, [pc, #28]	; (163a0 <system_gclk_gen_enable+0x58>)
   16384:	4798      	blx	r3
}
   16386:	46c0      	nop			; (mov r8, r8)
   16388:	46bd      	mov	sp, r7
   1638a:	b002      	add	sp, #8
   1638c:	bd80      	pop	{r7, pc}
   1638e:	46c0      	nop			; (mov r8, r8)
   16390:	000161d5 	.word	0x000161d5
   16394:	000161ad 	.word	0x000161ad
   16398:	40000c04 	.word	0x40000c04
   1639c:	40000c00 	.word	0x40000c00
   163a0:	000161c1 	.word	0x000161c1

000163a4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   163a4:	b580      	push	{r7, lr}
   163a6:	b086      	sub	sp, #24
   163a8:	af00      	add	r7, sp, #0
   163aa:	0002      	movs	r2, r0
   163ac:	1dfb      	adds	r3, r7, #7
   163ae:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   163b0:	46c0      	nop			; (mov r8, r8)
   163b2:	4b2a      	ldr	r3, [pc, #168]	; (1645c <system_gclk_gen_get_hz+0xb8>)
   163b4:	4798      	blx	r3
   163b6:	1e03      	subs	r3, r0, #0
   163b8:	d1fb      	bne.n	163b2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   163ba:	4b29      	ldr	r3, [pc, #164]	; (16460 <system_gclk_gen_get_hz+0xbc>)
   163bc:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   163be:	4a29      	ldr	r2, [pc, #164]	; (16464 <system_gclk_gen_get_hz+0xc0>)
   163c0:	1dfb      	adds	r3, r7, #7
   163c2:	781b      	ldrb	r3, [r3, #0]
   163c4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   163c6:	46c0      	nop			; (mov r8, r8)
   163c8:	4b24      	ldr	r3, [pc, #144]	; (1645c <system_gclk_gen_get_hz+0xb8>)
   163ca:	4798      	blx	r3
   163cc:	1e03      	subs	r3, r0, #0
   163ce:	d1fb      	bne.n	163c8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   163d0:	4b25      	ldr	r3, [pc, #148]	; (16468 <system_gclk_gen_get_hz+0xc4>)
   163d2:	685b      	ldr	r3, [r3, #4]
   163d4:	04db      	lsls	r3, r3, #19
   163d6:	0edb      	lsrs	r3, r3, #27
   163d8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   163da:	0018      	movs	r0, r3
   163dc:	4b23      	ldr	r3, [pc, #140]	; (1646c <system_gclk_gen_get_hz+0xc8>)
   163de:	4798      	blx	r3
   163e0:	0003      	movs	r3, r0
   163e2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   163e4:	4a1f      	ldr	r2, [pc, #124]	; (16464 <system_gclk_gen_get_hz+0xc0>)
   163e6:	1dfb      	adds	r3, r7, #7
   163e8:	781b      	ldrb	r3, [r3, #0]
   163ea:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   163ec:	4b1e      	ldr	r3, [pc, #120]	; (16468 <system_gclk_gen_get_hz+0xc4>)
   163ee:	685b      	ldr	r3, [r3, #4]
   163f0:	02db      	lsls	r3, r3, #11
   163f2:	0fdb      	lsrs	r3, r3, #31
   163f4:	b2da      	uxtb	r2, r3
   163f6:	2313      	movs	r3, #19
   163f8:	18fb      	adds	r3, r7, r3
   163fa:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   163fc:	4a1c      	ldr	r2, [pc, #112]	; (16470 <system_gclk_gen_get_hz+0xcc>)
   163fe:	1dfb      	adds	r3, r7, #7
   16400:	781b      	ldrb	r3, [r3, #0]
   16402:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   16404:	46c0      	nop			; (mov r8, r8)
   16406:	4b15      	ldr	r3, [pc, #84]	; (1645c <system_gclk_gen_get_hz+0xb8>)
   16408:	4798      	blx	r3
   1640a:	1e03      	subs	r3, r0, #0
   1640c:	d1fb      	bne.n	16406 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1640e:	4b16      	ldr	r3, [pc, #88]	; (16468 <system_gclk_gen_get_hz+0xc4>)
   16410:	689b      	ldr	r3, [r3, #8]
   16412:	021b      	lsls	r3, r3, #8
   16414:	0c1b      	lsrs	r3, r3, #16
   16416:	b29b      	uxth	r3, r3
   16418:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   1641a:	4b16      	ldr	r3, [pc, #88]	; (16474 <system_gclk_gen_get_hz+0xd0>)
   1641c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1641e:	2313      	movs	r3, #19
   16420:	18fb      	adds	r3, r7, r3
   16422:	781b      	ldrb	r3, [r3, #0]
   16424:	2b00      	cmp	r3, #0
   16426:	d109      	bne.n	1643c <system_gclk_gen_get_hz+0x98>
   16428:	68fb      	ldr	r3, [r7, #12]
   1642a:	2b01      	cmp	r3, #1
   1642c:	d906      	bls.n	1643c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   1642e:	4b12      	ldr	r3, [pc, #72]	; (16478 <system_gclk_gen_get_hz+0xd4>)
   16430:	68f9      	ldr	r1, [r7, #12]
   16432:	6978      	ldr	r0, [r7, #20]
   16434:	4798      	blx	r3
   16436:	0003      	movs	r3, r0
   16438:	617b      	str	r3, [r7, #20]
   1643a:	e00a      	b.n	16452 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   1643c:	2313      	movs	r3, #19
   1643e:	18fb      	adds	r3, r7, r3
   16440:	781b      	ldrb	r3, [r3, #0]
   16442:	2b00      	cmp	r3, #0
   16444:	d005      	beq.n	16452 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   16446:	68fb      	ldr	r3, [r7, #12]
   16448:	3301      	adds	r3, #1
   1644a:	697a      	ldr	r2, [r7, #20]
   1644c:	40da      	lsrs	r2, r3
   1644e:	0013      	movs	r3, r2
   16450:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   16452:	697b      	ldr	r3, [r7, #20]
}
   16454:	0018      	movs	r0, r3
   16456:	46bd      	mov	sp, r7
   16458:	b006      	add	sp, #24
   1645a:	bd80      	pop	{r7, pc}
   1645c:	000161d5 	.word	0x000161d5
   16460:	000161ad 	.word	0x000161ad
   16464:	40000c04 	.word	0x40000c04
   16468:	40000c00 	.word	0x40000c00
   1646c:	00015b05 	.word	0x00015b05
   16470:	40000c08 	.word	0x40000c08
   16474:	000161c1 	.word	0x000161c1
   16478:	0001ef45 	.word	0x0001ef45

0001647c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   1647c:	b580      	push	{r7, lr}
   1647e:	b084      	sub	sp, #16
   16480:	af00      	add	r7, sp, #0
   16482:	0002      	movs	r2, r0
   16484:	6039      	str	r1, [r7, #0]
   16486:	1dfb      	adds	r3, r7, #7
   16488:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   1648a:	1dfb      	adds	r3, r7, #7
   1648c:	781b      	ldrb	r3, [r3, #0]
   1648e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   16490:	683b      	ldr	r3, [r7, #0]
   16492:	781b      	ldrb	r3, [r3, #0]
   16494:	021b      	lsls	r3, r3, #8
   16496:	001a      	movs	r2, r3
   16498:	68fb      	ldr	r3, [r7, #12]
   1649a:	4313      	orrs	r3, r2
   1649c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   1649e:	1dfb      	adds	r3, r7, #7
   164a0:	781b      	ldrb	r3, [r3, #0]
   164a2:	0018      	movs	r0, r3
   164a4:	4b04      	ldr	r3, [pc, #16]	; (164b8 <system_gclk_chan_set_config+0x3c>)
   164a6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   164a8:	4b04      	ldr	r3, [pc, #16]	; (164bc <system_gclk_chan_set_config+0x40>)
   164aa:	68fa      	ldr	r2, [r7, #12]
   164ac:	b292      	uxth	r2, r2
   164ae:	805a      	strh	r2, [r3, #2]
}
   164b0:	46c0      	nop			; (mov r8, r8)
   164b2:	46bd      	mov	sp, r7
   164b4:	b004      	add	sp, #16
   164b6:	bd80      	pop	{r7, pc}
   164b8:	00016509 	.word	0x00016509
   164bc:	40000c00 	.word	0x40000c00

000164c0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   164c0:	b580      	push	{r7, lr}
   164c2:	b082      	sub	sp, #8
   164c4:	af00      	add	r7, sp, #0
   164c6:	0002      	movs	r2, r0
   164c8:	1dfb      	adds	r3, r7, #7
   164ca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   164cc:	4b0a      	ldr	r3, [pc, #40]	; (164f8 <system_gclk_chan_enable+0x38>)
   164ce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   164d0:	4a0a      	ldr	r2, [pc, #40]	; (164fc <system_gclk_chan_enable+0x3c>)
   164d2:	1dfb      	adds	r3, r7, #7
   164d4:	781b      	ldrb	r3, [r3, #0]
   164d6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   164d8:	4909      	ldr	r1, [pc, #36]	; (16500 <system_gclk_chan_enable+0x40>)
   164da:	4b09      	ldr	r3, [pc, #36]	; (16500 <system_gclk_chan_enable+0x40>)
   164dc:	885b      	ldrh	r3, [r3, #2]
   164de:	b29b      	uxth	r3, r3
   164e0:	2280      	movs	r2, #128	; 0x80
   164e2:	01d2      	lsls	r2, r2, #7
   164e4:	4313      	orrs	r3, r2
   164e6:	b29b      	uxth	r3, r3
   164e8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   164ea:	4b06      	ldr	r3, [pc, #24]	; (16504 <system_gclk_chan_enable+0x44>)
   164ec:	4798      	blx	r3
}
   164ee:	46c0      	nop			; (mov r8, r8)
   164f0:	46bd      	mov	sp, r7
   164f2:	b002      	add	sp, #8
   164f4:	bd80      	pop	{r7, pc}
   164f6:	46c0      	nop			; (mov r8, r8)
   164f8:	000161ad 	.word	0x000161ad
   164fc:	40000c02 	.word	0x40000c02
   16500:	40000c00 	.word	0x40000c00
   16504:	000161c1 	.word	0x000161c1

00016508 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   16508:	b580      	push	{r7, lr}
   1650a:	b084      	sub	sp, #16
   1650c:	af00      	add	r7, sp, #0
   1650e:	0002      	movs	r2, r0
   16510:	1dfb      	adds	r3, r7, #7
   16512:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   16514:	4b1c      	ldr	r3, [pc, #112]	; (16588 <system_gclk_chan_disable+0x80>)
   16516:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   16518:	4a1c      	ldr	r2, [pc, #112]	; (1658c <system_gclk_chan_disable+0x84>)
   1651a:	1dfb      	adds	r3, r7, #7
   1651c:	781b      	ldrb	r3, [r3, #0]
   1651e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   16520:	4b1b      	ldr	r3, [pc, #108]	; (16590 <system_gclk_chan_disable+0x88>)
   16522:	885b      	ldrh	r3, [r3, #2]
   16524:	051b      	lsls	r3, r3, #20
   16526:	0f1b      	lsrs	r3, r3, #28
   16528:	b2db      	uxtb	r3, r3
   1652a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   1652c:	4a18      	ldr	r2, [pc, #96]	; (16590 <system_gclk_chan_disable+0x88>)
   1652e:	8853      	ldrh	r3, [r2, #2]
   16530:	4918      	ldr	r1, [pc, #96]	; (16594 <system_gclk_chan_disable+0x8c>)
   16532:	400b      	ands	r3, r1
   16534:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   16536:	4a16      	ldr	r2, [pc, #88]	; (16590 <system_gclk_chan_disable+0x88>)
   16538:	4b15      	ldr	r3, [pc, #84]	; (16590 <system_gclk_chan_disable+0x88>)
   1653a:	885b      	ldrh	r3, [r3, #2]
   1653c:	b29b      	uxth	r3, r3
   1653e:	4916      	ldr	r1, [pc, #88]	; (16598 <system_gclk_chan_disable+0x90>)
   16540:	400b      	ands	r3, r1
   16542:	b29b      	uxth	r3, r3
   16544:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   16546:	46c0      	nop			; (mov r8, r8)
   16548:	4b11      	ldr	r3, [pc, #68]	; (16590 <system_gclk_chan_disable+0x88>)
   1654a:	885b      	ldrh	r3, [r3, #2]
   1654c:	b29b      	uxth	r3, r3
   1654e:	001a      	movs	r2, r3
   16550:	2380      	movs	r3, #128	; 0x80
   16552:	01db      	lsls	r3, r3, #7
   16554:	4013      	ands	r3, r2
   16556:	d1f7      	bne.n	16548 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   16558:	4a0d      	ldr	r2, [pc, #52]	; (16590 <system_gclk_chan_disable+0x88>)
   1655a:	68fb      	ldr	r3, [r7, #12]
   1655c:	b2db      	uxtb	r3, r3
   1655e:	1c19      	adds	r1, r3, #0
   16560:	230f      	movs	r3, #15
   16562:	400b      	ands	r3, r1
   16564:	b2d9      	uxtb	r1, r3
   16566:	8853      	ldrh	r3, [r2, #2]
   16568:	1c08      	adds	r0, r1, #0
   1656a:	210f      	movs	r1, #15
   1656c:	4001      	ands	r1, r0
   1656e:	0208      	lsls	r0, r1, #8
   16570:	4908      	ldr	r1, [pc, #32]	; (16594 <system_gclk_chan_disable+0x8c>)
   16572:	400b      	ands	r3, r1
   16574:	1c19      	adds	r1, r3, #0
   16576:	1c03      	adds	r3, r0, #0
   16578:	430b      	orrs	r3, r1
   1657a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   1657c:	4b07      	ldr	r3, [pc, #28]	; (1659c <system_gclk_chan_disable+0x94>)
   1657e:	4798      	blx	r3
}
   16580:	46c0      	nop			; (mov r8, r8)
   16582:	46bd      	mov	sp, r7
   16584:	b004      	add	sp, #16
   16586:	bd80      	pop	{r7, pc}
   16588:	000161ad 	.word	0x000161ad
   1658c:	40000c02 	.word	0x40000c02
   16590:	40000c00 	.word	0x40000c00
   16594:	fffff0ff 	.word	0xfffff0ff
   16598:	ffffbfff 	.word	0xffffbfff
   1659c:	000161c1 	.word	0x000161c1

000165a0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   165a0:	b580      	push	{r7, lr}
   165a2:	b084      	sub	sp, #16
   165a4:	af00      	add	r7, sp, #0
   165a6:	0002      	movs	r2, r0
   165a8:	1dfb      	adds	r3, r7, #7
   165aa:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   165ac:	4b0d      	ldr	r3, [pc, #52]	; (165e4 <system_gclk_chan_get_hz+0x44>)
   165ae:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   165b0:	4a0d      	ldr	r2, [pc, #52]	; (165e8 <system_gclk_chan_get_hz+0x48>)
   165b2:	1dfb      	adds	r3, r7, #7
   165b4:	781b      	ldrb	r3, [r3, #0]
   165b6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   165b8:	4b0c      	ldr	r3, [pc, #48]	; (165ec <system_gclk_chan_get_hz+0x4c>)
   165ba:	885b      	ldrh	r3, [r3, #2]
   165bc:	051b      	lsls	r3, r3, #20
   165be:	0f1b      	lsrs	r3, r3, #28
   165c0:	b2da      	uxtb	r2, r3
   165c2:	230f      	movs	r3, #15
   165c4:	18fb      	adds	r3, r7, r3
   165c6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   165c8:	4b09      	ldr	r3, [pc, #36]	; (165f0 <system_gclk_chan_get_hz+0x50>)
   165ca:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   165cc:	230f      	movs	r3, #15
   165ce:	18fb      	adds	r3, r7, r3
   165d0:	781b      	ldrb	r3, [r3, #0]
   165d2:	0018      	movs	r0, r3
   165d4:	4b07      	ldr	r3, [pc, #28]	; (165f4 <system_gclk_chan_get_hz+0x54>)
   165d6:	4798      	blx	r3
   165d8:	0003      	movs	r3, r0
}
   165da:	0018      	movs	r0, r3
   165dc:	46bd      	mov	sp, r7
   165de:	b004      	add	sp, #16
   165e0:	bd80      	pop	{r7, pc}
   165e2:	46c0      	nop			; (mov r8, r8)
   165e4:	000161ad 	.word	0x000161ad
   165e8:	40000c02 	.word	0x40000c02
   165ec:	40000c00 	.word	0x40000c00
   165f0:	000161c1 	.word	0x000161c1
   165f4:	000163a5 	.word	0x000163a5

000165f8 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   165f8:	b580      	push	{r7, lr}
   165fa:	b084      	sub	sp, #16
   165fc:	af00      	add	r7, sp, #0
   165fe:	0002      	movs	r2, r0
   16600:	1dfb      	adds	r3, r7, #7
   16602:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   16604:	230f      	movs	r3, #15
   16606:	18fb      	adds	r3, r7, r3
   16608:	2200      	movs	r2, #0
   1660a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   1660c:	1dfb      	adds	r3, r7, #7
   1660e:	781b      	ldrb	r3, [r3, #0]
   16610:	2b7f      	cmp	r3, #127	; 0x7f
   16612:	d80b      	bhi.n	1662c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   16614:	4a13      	ldr	r2, [pc, #76]	; (16664 <system_interrupt_clear_pending+0x6c>)
   16616:	1dfb      	adds	r3, r7, #7
   16618:	781b      	ldrb	r3, [r3, #0]
   1661a:	b25b      	sxtb	r3, r3
   1661c:	2101      	movs	r1, #1
   1661e:	4099      	lsls	r1, r3
   16620:	000b      	movs	r3, r1
   16622:	0019      	movs	r1, r3
   16624:	23c0      	movs	r3, #192	; 0xc0
   16626:	005b      	lsls	r3, r3, #1
   16628:	50d1      	str	r1, [r2, r3]
   1662a:	e014      	b.n	16656 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   1662c:	1dfb      	adds	r3, r7, #7
   1662e:	781b      	ldrb	r3, [r3, #0]
   16630:	b25b      	sxtb	r3, r3
   16632:	330e      	adds	r3, #14
   16634:	d101      	bne.n	1663a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   16636:	2317      	movs	r3, #23
   16638:	e010      	b.n	1665c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   1663a:	1dfb      	adds	r3, r7, #7
   1663c:	781b      	ldrb	r3, [r3, #0]
   1663e:	b25b      	sxtb	r3, r3
   16640:	3301      	adds	r3, #1
   16642:	d104      	bne.n	1664e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   16644:	4b08      	ldr	r3, [pc, #32]	; (16668 <system_interrupt_clear_pending+0x70>)
   16646:	2280      	movs	r2, #128	; 0x80
   16648:	0492      	lsls	r2, r2, #18
   1664a:	605a      	str	r2, [r3, #4]
   1664c:	e003      	b.n	16656 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   1664e:	230f      	movs	r3, #15
   16650:	18fb      	adds	r3, r7, r3
   16652:	2217      	movs	r2, #23
   16654:	701a      	strb	r2, [r3, #0]
	}

	return status;
   16656:	230f      	movs	r3, #15
   16658:	18fb      	adds	r3, r7, r3
   1665a:	781b      	ldrb	r3, [r3, #0]
}
   1665c:	0018      	movs	r0, r3
   1665e:	46bd      	mov	sp, r7
   16660:	b004      	add	sp, #16
   16662:	bd80      	pop	{r7, pc}
   16664:	e000e100 	.word	0xe000e100
   16668:	e000ed00 	.word	0xe000ed00

0001666c <system_pinmux_get_group_from_gpio_pin>:
{
   1666c:	b580      	push	{r7, lr}
   1666e:	b084      	sub	sp, #16
   16670:	af00      	add	r7, sp, #0
   16672:	0002      	movs	r2, r0
   16674:	1dfb      	adds	r3, r7, #7
   16676:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16678:	230f      	movs	r3, #15
   1667a:	18fb      	adds	r3, r7, r3
   1667c:	1dfa      	adds	r2, r7, #7
   1667e:	7812      	ldrb	r2, [r2, #0]
   16680:	09d2      	lsrs	r2, r2, #7
   16682:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16684:	230e      	movs	r3, #14
   16686:	18fb      	adds	r3, r7, r3
   16688:	1dfa      	adds	r2, r7, #7
   1668a:	7812      	ldrb	r2, [r2, #0]
   1668c:	0952      	lsrs	r2, r2, #5
   1668e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16690:	4b0d      	ldr	r3, [pc, #52]	; (166c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16692:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   16694:	230f      	movs	r3, #15
   16696:	18fb      	adds	r3, r7, r3
   16698:	781b      	ldrb	r3, [r3, #0]
   1669a:	2b00      	cmp	r3, #0
   1669c:	d10f      	bne.n	166be <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1669e:	230f      	movs	r3, #15
   166a0:	18fb      	adds	r3, r7, r3
   166a2:	781b      	ldrb	r3, [r3, #0]
   166a4:	009b      	lsls	r3, r3, #2
   166a6:	2210      	movs	r2, #16
   166a8:	4694      	mov	ip, r2
   166aa:	44bc      	add	ip, r7
   166ac:	4463      	add	r3, ip
   166ae:	3b08      	subs	r3, #8
   166b0:	681a      	ldr	r2, [r3, #0]
   166b2:	230e      	movs	r3, #14
   166b4:	18fb      	adds	r3, r7, r3
   166b6:	781b      	ldrb	r3, [r3, #0]
   166b8:	01db      	lsls	r3, r3, #7
   166ba:	18d3      	adds	r3, r2, r3
   166bc:	e000      	b.n	166c0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   166be:	2300      	movs	r3, #0
}
   166c0:	0018      	movs	r0, r3
   166c2:	46bd      	mov	sp, r7
   166c4:	b004      	add	sp, #16
   166c6:	bd80      	pop	{r7, pc}
   166c8:	41004400 	.word	0x41004400

000166cc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   166cc:	b580      	push	{r7, lr}
   166ce:	b088      	sub	sp, #32
   166d0:	af00      	add	r7, sp, #0
   166d2:	60f8      	str	r0, [r7, #12]
   166d4:	60b9      	str	r1, [r7, #8]
   166d6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   166d8:	2300      	movs	r3, #0
   166da:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   166dc:	687b      	ldr	r3, [r7, #4]
   166de:	78db      	ldrb	r3, [r3, #3]
   166e0:	2201      	movs	r2, #1
   166e2:	4053      	eors	r3, r2
   166e4:	b2db      	uxtb	r3, r3
   166e6:	2b00      	cmp	r3, #0
   166e8:	d035      	beq.n	16756 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   166ea:	687b      	ldr	r3, [r7, #4]
   166ec:	781b      	ldrb	r3, [r3, #0]
   166ee:	2b80      	cmp	r3, #128	; 0x80
   166f0:	d00b      	beq.n	1670a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   166f2:	69fb      	ldr	r3, [r7, #28]
   166f4:	2280      	movs	r2, #128	; 0x80
   166f6:	0252      	lsls	r2, r2, #9
   166f8:	4313      	orrs	r3, r2
   166fa:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   166fc:	687b      	ldr	r3, [r7, #4]
   166fe:	781b      	ldrb	r3, [r3, #0]
   16700:	061b      	lsls	r3, r3, #24
   16702:	001a      	movs	r2, r3
   16704:	69fb      	ldr	r3, [r7, #28]
   16706:	4313      	orrs	r3, r2
   16708:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1670a:	687b      	ldr	r3, [r7, #4]
   1670c:	785b      	ldrb	r3, [r3, #1]
   1670e:	2b00      	cmp	r3, #0
   16710:	d003      	beq.n	1671a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   16712:	687b      	ldr	r3, [r7, #4]
   16714:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   16716:	2b02      	cmp	r3, #2
   16718:	d110      	bne.n	1673c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   1671a:	69fb      	ldr	r3, [r7, #28]
   1671c:	2280      	movs	r2, #128	; 0x80
   1671e:	0292      	lsls	r2, r2, #10
   16720:	4313      	orrs	r3, r2
   16722:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   16724:	687b      	ldr	r3, [r7, #4]
   16726:	789b      	ldrb	r3, [r3, #2]
   16728:	2b00      	cmp	r3, #0
   1672a:	d004      	beq.n	16736 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1672c:	69fb      	ldr	r3, [r7, #28]
   1672e:	2280      	movs	r2, #128	; 0x80
   16730:	02d2      	lsls	r2, r2, #11
   16732:	4313      	orrs	r3, r2
   16734:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   16736:	68fb      	ldr	r3, [r7, #12]
   16738:	68ba      	ldr	r2, [r7, #8]
   1673a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1673c:	687b      	ldr	r3, [r7, #4]
   1673e:	785b      	ldrb	r3, [r3, #1]
   16740:	2b01      	cmp	r3, #1
   16742:	d003      	beq.n	1674c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   16744:	687b      	ldr	r3, [r7, #4]
   16746:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   16748:	2b02      	cmp	r3, #2
   1674a:	d107      	bne.n	1675c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1674c:	69fb      	ldr	r3, [r7, #28]
   1674e:	4a22      	ldr	r2, [pc, #136]	; (167d8 <_system_pinmux_config+0x10c>)
   16750:	4013      	ands	r3, r2
   16752:	61fb      	str	r3, [r7, #28]
   16754:	e002      	b.n	1675c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   16756:	68fb      	ldr	r3, [r7, #12]
   16758:	68ba      	ldr	r2, [r7, #8]
   1675a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1675c:	68bb      	ldr	r3, [r7, #8]
   1675e:	041b      	lsls	r3, r3, #16
   16760:	0c1b      	lsrs	r3, r3, #16
   16762:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   16764:	68bb      	ldr	r3, [r7, #8]
   16766:	0c1b      	lsrs	r3, r3, #16
   16768:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1676a:	69ba      	ldr	r2, [r7, #24]
   1676c:	69fb      	ldr	r3, [r7, #28]
   1676e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   16770:	22a0      	movs	r2, #160	; 0xa0
   16772:	05d2      	lsls	r2, r2, #23
   16774:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   16776:	68fb      	ldr	r3, [r7, #12]
   16778:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1677a:	697a      	ldr	r2, [r7, #20]
   1677c:	69fb      	ldr	r3, [r7, #28]
   1677e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   16780:	22d0      	movs	r2, #208	; 0xd0
   16782:	0612      	lsls	r2, r2, #24
   16784:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   16786:	68fb      	ldr	r3, [r7, #12]
   16788:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1678a:	687b      	ldr	r3, [r7, #4]
   1678c:	78db      	ldrb	r3, [r3, #3]
   1678e:	2201      	movs	r2, #1
   16790:	4053      	eors	r3, r2
   16792:	b2db      	uxtb	r3, r3
   16794:	2b00      	cmp	r3, #0
   16796:	d01a      	beq.n	167ce <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   16798:	69fa      	ldr	r2, [r7, #28]
   1679a:	2380      	movs	r3, #128	; 0x80
   1679c:	02db      	lsls	r3, r3, #11
   1679e:	4013      	ands	r3, r2
   167a0:	d00a      	beq.n	167b8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   167a2:	687b      	ldr	r3, [r7, #4]
   167a4:	789b      	ldrb	r3, [r3, #2]
   167a6:	2b01      	cmp	r3, #1
   167a8:	d103      	bne.n	167b2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   167aa:	68fb      	ldr	r3, [r7, #12]
   167ac:	68ba      	ldr	r2, [r7, #8]
   167ae:	619a      	str	r2, [r3, #24]
   167b0:	e002      	b.n	167b8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   167b2:	68fb      	ldr	r3, [r7, #12]
   167b4:	68ba      	ldr	r2, [r7, #8]
   167b6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   167b8:	687b      	ldr	r3, [r7, #4]
   167ba:	785b      	ldrb	r3, [r3, #1]
   167bc:	2b01      	cmp	r3, #1
   167be:	d003      	beq.n	167c8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   167c0:	687b      	ldr	r3, [r7, #4]
   167c2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   167c4:	2b02      	cmp	r3, #2
   167c6:	d102      	bne.n	167ce <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   167c8:	68fb      	ldr	r3, [r7, #12]
   167ca:	68ba      	ldr	r2, [r7, #8]
   167cc:	609a      	str	r2, [r3, #8]
		}
	}
}
   167ce:	46c0      	nop			; (mov r8, r8)
   167d0:	46bd      	mov	sp, r7
   167d2:	b008      	add	sp, #32
   167d4:	bd80      	pop	{r7, pc}
   167d6:	46c0      	nop			; (mov r8, r8)
   167d8:	fffbffff 	.word	0xfffbffff

000167dc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   167dc:	b580      	push	{r7, lr}
   167de:	b084      	sub	sp, #16
   167e0:	af00      	add	r7, sp, #0
   167e2:	0002      	movs	r2, r0
   167e4:	6039      	str	r1, [r7, #0]
   167e6:	1dfb      	adds	r3, r7, #7
   167e8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   167ea:	1dfb      	adds	r3, r7, #7
   167ec:	781b      	ldrb	r3, [r3, #0]
   167ee:	0018      	movs	r0, r3
   167f0:	4b0a      	ldr	r3, [pc, #40]	; (1681c <system_pinmux_pin_set_config+0x40>)
   167f2:	4798      	blx	r3
   167f4:	0003      	movs	r3, r0
   167f6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   167f8:	1dfb      	adds	r3, r7, #7
   167fa:	781b      	ldrb	r3, [r3, #0]
   167fc:	221f      	movs	r2, #31
   167fe:	4013      	ands	r3, r2
   16800:	2201      	movs	r2, #1
   16802:	409a      	lsls	r2, r3
   16804:	0013      	movs	r3, r2
   16806:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   16808:	683a      	ldr	r2, [r7, #0]
   1680a:	68b9      	ldr	r1, [r7, #8]
   1680c:	68fb      	ldr	r3, [r7, #12]
   1680e:	0018      	movs	r0, r3
   16810:	4b03      	ldr	r3, [pc, #12]	; (16820 <system_pinmux_pin_set_config+0x44>)
   16812:	4798      	blx	r3
}
   16814:	46c0      	nop			; (mov r8, r8)
   16816:	46bd      	mov	sp, r7
   16818:	b004      	add	sp, #16
   1681a:	bd80      	pop	{r7, pc}
   1681c:	0001666d 	.word	0x0001666d
   16820:	000166cd 	.word	0x000166cd

00016824 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   16824:	b580      	push	{r7, lr}
   16826:	af00      	add	r7, sp, #0
	return;
   16828:	46c0      	nop			; (mov r8, r8)
}
   1682a:	46bd      	mov	sp, r7
   1682c:	bd80      	pop	{r7, pc}
	...

00016830 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   16830:	b580      	push	{r7, lr}
   16832:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   16834:	4b06      	ldr	r3, [pc, #24]	; (16850 <system_init+0x20>)
   16836:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   16838:	4b06      	ldr	r3, [pc, #24]	; (16854 <system_init+0x24>)
   1683a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1683c:	4b06      	ldr	r3, [pc, #24]	; (16858 <system_init+0x28>)
   1683e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   16840:	4b06      	ldr	r3, [pc, #24]	; (1685c <system_init+0x2c>)
   16842:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   16844:	4b06      	ldr	r3, [pc, #24]	; (16860 <system_init+0x30>)
   16846:	4798      	blx	r3
}
   16848:	46c0      	nop			; (mov r8, r8)
   1684a:	46bd      	mov	sp, r7
   1684c:	bd80      	pop	{r7, pc}
   1684e:	46c0      	nop			; (mov r8, r8)
   16850:	00015eb1 	.word	0x00015eb1
   16854:	00012979 	.word	0x00012979
   16858:	00000669 	.word	0x00000669
   1685c:	00012d51 	.word	0x00012d51
   16860:	00016825 	.word	0x00016825

00016864 <system_gclk_chan_get_config_defaults>:
{
   16864:	b580      	push	{r7, lr}
   16866:	b082      	sub	sp, #8
   16868:	af00      	add	r7, sp, #0
   1686a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1686c:	687b      	ldr	r3, [r7, #4]
   1686e:	2200      	movs	r2, #0
   16870:	701a      	strb	r2, [r3, #0]
}
   16872:	46c0      	nop			; (mov r8, r8)
   16874:	46bd      	mov	sp, r7
   16876:	b002      	add	sp, #8
   16878:	bd80      	pop	{r7, pc}
	...

0001687c <system_apb_clock_set_mask>:
{
   1687c:	b580      	push	{r7, lr}
   1687e:	b082      	sub	sp, #8
   16880:	af00      	add	r7, sp, #0
   16882:	0002      	movs	r2, r0
   16884:	6039      	str	r1, [r7, #0]
   16886:	1dfb      	adds	r3, r7, #7
   16888:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1688a:	1dfb      	adds	r3, r7, #7
   1688c:	781b      	ldrb	r3, [r3, #0]
   1688e:	2b01      	cmp	r3, #1
   16890:	d00a      	beq.n	168a8 <system_apb_clock_set_mask+0x2c>
   16892:	2b02      	cmp	r3, #2
   16894:	d00f      	beq.n	168b6 <system_apb_clock_set_mask+0x3a>
   16896:	2b00      	cmp	r3, #0
   16898:	d114      	bne.n	168c4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1689a:	4b0e      	ldr	r3, [pc, #56]	; (168d4 <system_apb_clock_set_mask+0x58>)
   1689c:	4a0d      	ldr	r2, [pc, #52]	; (168d4 <system_apb_clock_set_mask+0x58>)
   1689e:	6991      	ldr	r1, [r2, #24]
   168a0:	683a      	ldr	r2, [r7, #0]
   168a2:	430a      	orrs	r2, r1
   168a4:	619a      	str	r2, [r3, #24]
			break;
   168a6:	e00f      	b.n	168c8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   168a8:	4b0a      	ldr	r3, [pc, #40]	; (168d4 <system_apb_clock_set_mask+0x58>)
   168aa:	4a0a      	ldr	r2, [pc, #40]	; (168d4 <system_apb_clock_set_mask+0x58>)
   168ac:	69d1      	ldr	r1, [r2, #28]
   168ae:	683a      	ldr	r2, [r7, #0]
   168b0:	430a      	orrs	r2, r1
   168b2:	61da      	str	r2, [r3, #28]
			break;
   168b4:	e008      	b.n	168c8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   168b6:	4b07      	ldr	r3, [pc, #28]	; (168d4 <system_apb_clock_set_mask+0x58>)
   168b8:	4a06      	ldr	r2, [pc, #24]	; (168d4 <system_apb_clock_set_mask+0x58>)
   168ba:	6a11      	ldr	r1, [r2, #32]
   168bc:	683a      	ldr	r2, [r7, #0]
   168be:	430a      	orrs	r2, r1
   168c0:	621a      	str	r2, [r3, #32]
			break;
   168c2:	e001      	b.n	168c8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   168c4:	2317      	movs	r3, #23
   168c6:	e000      	b.n	168ca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   168c8:	2300      	movs	r3, #0
}
   168ca:	0018      	movs	r0, r3
   168cc:	46bd      	mov	sp, r7
   168ce:	b002      	add	sp, #8
   168d0:	bd80      	pop	{r7, pc}
   168d2:	46c0      	nop			; (mov r8, r8)
   168d4:	40000400 	.word	0x40000400

000168d8 <system_pinmux_get_config_defaults>:
{
   168d8:	b580      	push	{r7, lr}
   168da:	b082      	sub	sp, #8
   168dc:	af00      	add	r7, sp, #0
   168de:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   168e0:	687b      	ldr	r3, [r7, #4]
   168e2:	2280      	movs	r2, #128	; 0x80
   168e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   168e6:	687b      	ldr	r3, [r7, #4]
   168e8:	2200      	movs	r2, #0
   168ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   168ec:	687b      	ldr	r3, [r7, #4]
   168ee:	2201      	movs	r2, #1
   168f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   168f2:	687b      	ldr	r3, [r7, #4]
   168f4:	2200      	movs	r2, #0
   168f6:	70da      	strb	r2, [r3, #3]
}
   168f8:	46c0      	nop			; (mov r8, r8)
   168fa:	46bd      	mov	sp, r7
   168fc:	b002      	add	sp, #8
   168fe:	bd80      	pop	{r7, pc}

00016900 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   16900:	b580      	push	{r7, lr}
   16902:	b084      	sub	sp, #16
   16904:	af00      	add	r7, sp, #0
   16906:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   16908:	2300      	movs	r3, #0
   1690a:	60fb      	str	r3, [r7, #12]
   1690c:	e00c      	b.n	16928 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   1690e:	4b0a      	ldr	r3, [pc, #40]	; (16938 <_tcc_get_inst_index+0x38>)
   16910:	68fa      	ldr	r2, [r7, #12]
   16912:	0092      	lsls	r2, r2, #2
   16914:	58d2      	ldr	r2, [r2, r3]
   16916:	687b      	ldr	r3, [r7, #4]
   16918:	429a      	cmp	r2, r3
   1691a:	d102      	bne.n	16922 <_tcc_get_inst_index+0x22>
			return i;
   1691c:	68fb      	ldr	r3, [r7, #12]
   1691e:	b2db      	uxtb	r3, r3
   16920:	e006      	b.n	16930 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   16922:	68fb      	ldr	r3, [r7, #12]
   16924:	3301      	adds	r3, #1
   16926:	60fb      	str	r3, [r7, #12]
   16928:	68fb      	ldr	r3, [r7, #12]
   1692a:	2b02      	cmp	r3, #2
   1692c:	d9ef      	bls.n	1690e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1692e:	2300      	movs	r3, #0
}
   16930:	0018      	movs	r0, r3
   16932:	46bd      	mov	sp, r7
   16934:	b004      	add	sp, #16
   16936:	bd80      	pop	{r7, pc}
   16938:	000257bc 	.word	0x000257bc

0001693c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   1693c:	b590      	push	{r4, r7, lr}
   1693e:	b085      	sub	sp, #20
   16940:	af00      	add	r7, sp, #0
   16942:	6078      	str	r0, [r7, #4]
   16944:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   16946:	230f      	movs	r3, #15
   16948:	18fc      	adds	r4, r7, r3
   1694a:	683b      	ldr	r3, [r7, #0]
   1694c:	0018      	movs	r0, r3
   1694e:	4bad      	ldr	r3, [pc, #692]	; (16c04 <tcc_get_config_defaults+0x2c8>)
   16950:	4798      	blx	r3
   16952:	0003      	movs	r3, r0
   16954:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   16956:	687b      	ldr	r3, [r7, #4]
   16958:	2200      	movs	r2, #0
   1695a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   1695c:	230f      	movs	r3, #15
   1695e:	18fb      	adds	r3, r7, r3
   16960:	781a      	ldrb	r2, [r3, #0]
   16962:	4ba9      	ldr	r3, [pc, #676]	; (16c08 <tcc_get_config_defaults+0x2cc>)
   16964:	0092      	lsls	r2, r2, #2
   16966:	58d2      	ldr	r2, [r2, r3]
   16968:	687b      	ldr	r3, [r7, #4]
   1696a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   1696c:	687b      	ldr	r3, [r7, #4]
   1696e:	2200      	movs	r2, #0
   16970:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   16972:	687b      	ldr	r3, [r7, #4]
   16974:	2200      	movs	r2, #0
   16976:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   16978:	687b      	ldr	r3, [r7, #4]
   1697a:	2200      	movs	r2, #0
   1697c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   1697e:	687b      	ldr	r3, [r7, #4]
   16980:	2200      	movs	r2, #0
   16982:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   16984:	687b      	ldr	r3, [r7, #4]
   16986:	2200      	movs	r2, #0
   16988:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1698a:	687b      	ldr	r3, [r7, #4]
   1698c:	2200      	movs	r2, #0
   1698e:	61da      	str	r2, [r3, #28]
   16990:	687b      	ldr	r3, [r7, #4]
   16992:	2200      	movs	r2, #0
   16994:	621a      	str	r2, [r3, #32]
   16996:	687b      	ldr	r3, [r7, #4]
   16998:	2200      	movs	r2, #0
   1699a:	625a      	str	r2, [r3, #36]	; 0x24
   1699c:	687b      	ldr	r3, [r7, #4]
   1699e:	2200      	movs	r2, #0
   169a0:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   169a2:	687b      	ldr	r3, [r7, #4]
   169a4:	2200      	movs	r2, #0
   169a6:	751a      	strb	r2, [r3, #20]
   169a8:	687b      	ldr	r3, [r7, #4]
   169aa:	2200      	movs	r2, #0
   169ac:	755a      	strb	r2, [r3, #21]
   169ae:	687b      	ldr	r3, [r7, #4]
   169b0:	2200      	movs	r2, #0
   169b2:	759a      	strb	r2, [r3, #22]
   169b4:	687b      	ldr	r3, [r7, #4]
   169b6:	2200      	movs	r2, #0
   169b8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   169ba:	687b      	ldr	r3, [r7, #4]
   169bc:	2200      	movs	r2, #0
   169be:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   169c0:	687b      	ldr	r3, [r7, #4]
   169c2:	2200      	movs	r2, #0
   169c4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   169c6:	687b      	ldr	r3, [r7, #4]
   169c8:	2200      	movs	r2, #0
   169ca:	741a      	strb	r2, [r3, #16]
   169cc:	687b      	ldr	r3, [r7, #4]
   169ce:	2200      	movs	r2, #0
   169d0:	745a      	strb	r2, [r3, #17]
   169d2:	687b      	ldr	r3, [r7, #4]
   169d4:	2200      	movs	r2, #0
   169d6:	749a      	strb	r2, [r3, #18]
   169d8:	687b      	ldr	r3, [r7, #4]
   169da:	2200      	movs	r2, #0
   169dc:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   169de:	687b      	ldr	r3, [r7, #4]
   169e0:	222c      	movs	r2, #44	; 0x2c
   169e2:	2100      	movs	r1, #0
   169e4:	5499      	strb	r1, [r3, r2]
   169e6:	687b      	ldr	r3, [r7, #4]
   169e8:	222d      	movs	r2, #45	; 0x2d
   169ea:	2100      	movs	r1, #0
   169ec:	5499      	strb	r1, [r3, r2]
   169ee:	687b      	ldr	r3, [r7, #4]
   169f0:	222e      	movs	r2, #46	; 0x2e
   169f2:	2100      	movs	r1, #0
   169f4:	5499      	strb	r1, [r3, r2]
   169f6:	687b      	ldr	r3, [r7, #4]
   169f8:	222f      	movs	r2, #47	; 0x2f
   169fa:	2100      	movs	r1, #0
   169fc:	5499      	strb	r1, [r3, r2]
   169fe:	687b      	ldr	r3, [r7, #4]
   16a00:	2230      	movs	r2, #48	; 0x30
   16a02:	2100      	movs	r1, #0
   16a04:	5499      	strb	r1, [r3, r2]
   16a06:	687b      	ldr	r3, [r7, #4]
   16a08:	2231      	movs	r2, #49	; 0x31
   16a0a:	2100      	movs	r1, #0
   16a0c:	5499      	strb	r1, [r3, r2]
   16a0e:	687b      	ldr	r3, [r7, #4]
   16a10:	2232      	movs	r2, #50	; 0x32
   16a12:	2100      	movs	r1, #0
   16a14:	5499      	strb	r1, [r3, r2]
   16a16:	687b      	ldr	r3, [r7, #4]
   16a18:	2233      	movs	r2, #51	; 0x33
   16a1a:	2100      	movs	r1, #0
   16a1c:	5499      	strb	r1, [r3, r2]
   16a1e:	687b      	ldr	r3, [r7, #4]
   16a20:	2234      	movs	r2, #52	; 0x34
   16a22:	2100      	movs	r1, #0
   16a24:	5499      	strb	r1, [r3, r2]
   16a26:	687b      	ldr	r3, [r7, #4]
   16a28:	2235      	movs	r2, #53	; 0x35
   16a2a:	2100      	movs	r1, #0
   16a2c:	5499      	strb	r1, [r3, r2]
   16a2e:	687b      	ldr	r3, [r7, #4]
   16a30:	2236      	movs	r2, #54	; 0x36
   16a32:	2100      	movs	r1, #0
   16a34:	5499      	strb	r1, [r3, r2]
   16a36:	687b      	ldr	r3, [r7, #4]
   16a38:	2237      	movs	r2, #55	; 0x37
   16a3a:	2100      	movs	r1, #0
   16a3c:	5499      	strb	r1, [r3, r2]
   16a3e:	687b      	ldr	r3, [r7, #4]
   16a40:	2238      	movs	r2, #56	; 0x38
   16a42:	2100      	movs	r1, #0
   16a44:	5499      	strb	r1, [r3, r2]
   16a46:	687b      	ldr	r3, [r7, #4]
   16a48:	2239      	movs	r2, #57	; 0x39
   16a4a:	2100      	movs	r1, #0
   16a4c:	5499      	strb	r1, [r3, r2]
   16a4e:	687b      	ldr	r3, [r7, #4]
   16a50:	223a      	movs	r2, #58	; 0x3a
   16a52:	2100      	movs	r1, #0
   16a54:	5499      	strb	r1, [r3, r2]
   16a56:	687b      	ldr	r3, [r7, #4]
   16a58:	223b      	movs	r2, #59	; 0x3b
   16a5a:	2100      	movs	r1, #0
   16a5c:	5499      	strb	r1, [r3, r2]
   16a5e:	687b      	ldr	r3, [r7, #4]
   16a60:	223c      	movs	r2, #60	; 0x3c
   16a62:	2100      	movs	r1, #0
   16a64:	5499      	strb	r1, [r3, r2]
   16a66:	687b      	ldr	r3, [r7, #4]
   16a68:	223d      	movs	r2, #61	; 0x3d
   16a6a:	2100      	movs	r1, #0
   16a6c:	5499      	strb	r1, [r3, r2]
   16a6e:	687b      	ldr	r3, [r7, #4]
   16a70:	223e      	movs	r2, #62	; 0x3e
   16a72:	2100      	movs	r1, #0
   16a74:	5499      	strb	r1, [r3, r2]
   16a76:	687b      	ldr	r3, [r7, #4]
   16a78:	223f      	movs	r2, #63	; 0x3f
   16a7a:	2100      	movs	r1, #0
   16a7c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   16a7e:	687b      	ldr	r3, [r7, #4]
   16a80:	2240      	movs	r2, #64	; 0x40
   16a82:	2100      	movs	r1, #0
   16a84:	5499      	strb	r1, [r3, r2]
   16a86:	687b      	ldr	r3, [r7, #4]
   16a88:	2241      	movs	r2, #65	; 0x41
   16a8a:	2100      	movs	r1, #0
   16a8c:	5499      	strb	r1, [r3, r2]
   16a8e:	687b      	ldr	r3, [r7, #4]
   16a90:	2242      	movs	r2, #66	; 0x42
   16a92:	2100      	movs	r1, #0
   16a94:	5499      	strb	r1, [r3, r2]
   16a96:	687b      	ldr	r3, [r7, #4]
   16a98:	2243      	movs	r2, #67	; 0x43
   16a9a:	2100      	movs	r1, #0
   16a9c:	5499      	strb	r1, [r3, r2]
   16a9e:	687b      	ldr	r3, [r7, #4]
   16aa0:	2244      	movs	r2, #68	; 0x44
   16aa2:	2100      	movs	r1, #0
   16aa4:	5499      	strb	r1, [r3, r2]
   16aa6:	687b      	ldr	r3, [r7, #4]
   16aa8:	2245      	movs	r2, #69	; 0x45
   16aaa:	2100      	movs	r1, #0
   16aac:	5499      	strb	r1, [r3, r2]
   16aae:	687b      	ldr	r3, [r7, #4]
   16ab0:	2246      	movs	r2, #70	; 0x46
   16ab2:	2100      	movs	r1, #0
   16ab4:	5499      	strb	r1, [r3, r2]
   16ab6:	687b      	ldr	r3, [r7, #4]
   16ab8:	2247      	movs	r2, #71	; 0x47
   16aba:	2100      	movs	r1, #0
   16abc:	5499      	strb	r1, [r3, r2]
   16abe:	687b      	ldr	r3, [r7, #4]
   16ac0:	2248      	movs	r2, #72	; 0x48
   16ac2:	2100      	movs	r1, #0
   16ac4:	5499      	strb	r1, [r3, r2]
   16ac6:	687b      	ldr	r3, [r7, #4]
   16ac8:	2249      	movs	r2, #73	; 0x49
   16aca:	2100      	movs	r1, #0
   16acc:	5499      	strb	r1, [r3, r2]
   16ace:	687b      	ldr	r3, [r7, #4]
   16ad0:	224a      	movs	r2, #74	; 0x4a
   16ad2:	2100      	movs	r1, #0
   16ad4:	5499      	strb	r1, [r3, r2]
   16ad6:	687b      	ldr	r3, [r7, #4]
   16ad8:	224b      	movs	r2, #75	; 0x4b
   16ada:	2100      	movs	r1, #0
   16adc:	5499      	strb	r1, [r3, r2]
   16ade:	687b      	ldr	r3, [r7, #4]
   16ae0:	224c      	movs	r2, #76	; 0x4c
   16ae2:	2100      	movs	r1, #0
   16ae4:	5499      	strb	r1, [r3, r2]
   16ae6:	687b      	ldr	r3, [r7, #4]
   16ae8:	224d      	movs	r2, #77	; 0x4d
   16aea:	2100      	movs	r1, #0
   16aec:	5499      	strb	r1, [r3, r2]
   16aee:	687b      	ldr	r3, [r7, #4]
   16af0:	224e      	movs	r2, #78	; 0x4e
   16af2:	2100      	movs	r1, #0
   16af4:	5499      	strb	r1, [r3, r2]
   16af6:	687b      	ldr	r3, [r7, #4]
   16af8:	224f      	movs	r2, #79	; 0x4f
   16afa:	2100      	movs	r1, #0
   16afc:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   16afe:	687b      	ldr	r3, [r7, #4]
   16b00:	2250      	movs	r2, #80	; 0x50
   16b02:	2100      	movs	r1, #0
   16b04:	5499      	strb	r1, [r3, r2]
   16b06:	687b      	ldr	r3, [r7, #4]
   16b08:	2251      	movs	r2, #81	; 0x51
   16b0a:	2100      	movs	r1, #0
   16b0c:	5499      	strb	r1, [r3, r2]
   16b0e:	687b      	ldr	r3, [r7, #4]
   16b10:	2252      	movs	r2, #82	; 0x52
   16b12:	2100      	movs	r1, #0
   16b14:	5499      	strb	r1, [r3, r2]
   16b16:	687b      	ldr	r3, [r7, #4]
   16b18:	2253      	movs	r2, #83	; 0x53
   16b1a:	2100      	movs	r1, #0
   16b1c:	5499      	strb	r1, [r3, r2]
   16b1e:	687b      	ldr	r3, [r7, #4]
   16b20:	2254      	movs	r2, #84	; 0x54
   16b22:	2100      	movs	r1, #0
   16b24:	5499      	strb	r1, [r3, r2]
   16b26:	687b      	ldr	r3, [r7, #4]
   16b28:	2255      	movs	r2, #85	; 0x55
   16b2a:	2100      	movs	r1, #0
   16b2c:	5499      	strb	r1, [r3, r2]
   16b2e:	687b      	ldr	r3, [r7, #4]
   16b30:	2256      	movs	r2, #86	; 0x56
   16b32:	2100      	movs	r1, #0
   16b34:	5499      	strb	r1, [r3, r2]
   16b36:	687b      	ldr	r3, [r7, #4]
   16b38:	2257      	movs	r2, #87	; 0x57
   16b3a:	2100      	movs	r1, #0
   16b3c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   16b3e:	687b      	ldr	r3, [r7, #4]
   16b40:	2298      	movs	r2, #152	; 0x98
   16b42:	2100      	movs	r1, #0
   16b44:	5499      	strb	r1, [r3, r2]
   16b46:	687b      	ldr	r3, [r7, #4]
   16b48:	2200      	movs	r2, #0
   16b4a:	659a      	str	r2, [r3, #88]	; 0x58
   16b4c:	687b      	ldr	r3, [r7, #4]
   16b4e:	2200      	movs	r2, #0
   16b50:	679a      	str	r2, [r3, #120]	; 0x78
   16b52:	687b      	ldr	r3, [r7, #4]
   16b54:	2299      	movs	r2, #153	; 0x99
   16b56:	2100      	movs	r1, #0
   16b58:	5499      	strb	r1, [r3, r2]
   16b5a:	687b      	ldr	r3, [r7, #4]
   16b5c:	2200      	movs	r2, #0
   16b5e:	65da      	str	r2, [r3, #92]	; 0x5c
   16b60:	687b      	ldr	r3, [r7, #4]
   16b62:	2200      	movs	r2, #0
   16b64:	67da      	str	r2, [r3, #124]	; 0x7c
   16b66:	687b      	ldr	r3, [r7, #4]
   16b68:	229a      	movs	r2, #154	; 0x9a
   16b6a:	2100      	movs	r1, #0
   16b6c:	5499      	strb	r1, [r3, r2]
   16b6e:	687b      	ldr	r3, [r7, #4]
   16b70:	2200      	movs	r2, #0
   16b72:	661a      	str	r2, [r3, #96]	; 0x60
   16b74:	687b      	ldr	r3, [r7, #4]
   16b76:	2280      	movs	r2, #128	; 0x80
   16b78:	2100      	movs	r1, #0
   16b7a:	5099      	str	r1, [r3, r2]
   16b7c:	687b      	ldr	r3, [r7, #4]
   16b7e:	229b      	movs	r2, #155	; 0x9b
   16b80:	2100      	movs	r1, #0
   16b82:	5499      	strb	r1, [r3, r2]
   16b84:	687b      	ldr	r3, [r7, #4]
   16b86:	2200      	movs	r2, #0
   16b88:	665a      	str	r2, [r3, #100]	; 0x64
   16b8a:	687b      	ldr	r3, [r7, #4]
   16b8c:	2284      	movs	r2, #132	; 0x84
   16b8e:	2100      	movs	r1, #0
   16b90:	5099      	str	r1, [r3, r2]
   16b92:	687b      	ldr	r3, [r7, #4]
   16b94:	229c      	movs	r2, #156	; 0x9c
   16b96:	2100      	movs	r1, #0
   16b98:	5499      	strb	r1, [r3, r2]
   16b9a:	687b      	ldr	r3, [r7, #4]
   16b9c:	2200      	movs	r2, #0
   16b9e:	669a      	str	r2, [r3, #104]	; 0x68
   16ba0:	687b      	ldr	r3, [r7, #4]
   16ba2:	2288      	movs	r2, #136	; 0x88
   16ba4:	2100      	movs	r1, #0
   16ba6:	5099      	str	r1, [r3, r2]
   16ba8:	687b      	ldr	r3, [r7, #4]
   16baa:	229d      	movs	r2, #157	; 0x9d
   16bac:	2100      	movs	r1, #0
   16bae:	5499      	strb	r1, [r3, r2]
   16bb0:	687b      	ldr	r3, [r7, #4]
   16bb2:	2200      	movs	r2, #0
   16bb4:	66da      	str	r2, [r3, #108]	; 0x6c
   16bb6:	687b      	ldr	r3, [r7, #4]
   16bb8:	228c      	movs	r2, #140	; 0x8c
   16bba:	2100      	movs	r1, #0
   16bbc:	5099      	str	r1, [r3, r2]
   16bbe:	687b      	ldr	r3, [r7, #4]
   16bc0:	229e      	movs	r2, #158	; 0x9e
   16bc2:	2100      	movs	r1, #0
   16bc4:	5499      	strb	r1, [r3, r2]
   16bc6:	687b      	ldr	r3, [r7, #4]
   16bc8:	2200      	movs	r2, #0
   16bca:	671a      	str	r2, [r3, #112]	; 0x70
   16bcc:	687b      	ldr	r3, [r7, #4]
   16bce:	2290      	movs	r2, #144	; 0x90
   16bd0:	2100      	movs	r1, #0
   16bd2:	5099      	str	r1, [r3, r2]
   16bd4:	687b      	ldr	r3, [r7, #4]
   16bd6:	229f      	movs	r2, #159	; 0x9f
   16bd8:	2100      	movs	r1, #0
   16bda:	5499      	strb	r1, [r3, r2]
   16bdc:	687b      	ldr	r3, [r7, #4]
   16bde:	2200      	movs	r2, #0
   16be0:	675a      	str	r2, [r3, #116]	; 0x74
   16be2:	687b      	ldr	r3, [r7, #4]
   16be4:	2294      	movs	r2, #148	; 0x94
   16be6:	2100      	movs	r1, #0
   16be8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   16bea:	687b      	ldr	r3, [r7, #4]
   16bec:	22a0      	movs	r2, #160	; 0xa0
   16bee:	2101      	movs	r1, #1
   16bf0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   16bf2:	687b      	ldr	r3, [r7, #4]
   16bf4:	22a1      	movs	r2, #161	; 0xa1
   16bf6:	2100      	movs	r1, #0
   16bf8:	5499      	strb	r1, [r3, r2]
}
   16bfa:	46c0      	nop			; (mov r8, r8)
   16bfc:	46bd      	mov	sp, r7
   16bfe:	b005      	add	sp, #20
   16c00:	bd90      	pop	{r4, r7, pc}
   16c02:	46c0      	nop			; (mov r8, r8)
   16c04:	00016901 	.word	0x00016901
   16c08:	000257d8 	.word	0x000257d8

00016c0c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   16c0c:	b580      	push	{r7, lr}
   16c0e:	b086      	sub	sp, #24
   16c10:	af00      	add	r7, sp, #0
   16c12:	60b9      	str	r1, [r7, #8]
   16c14:	607a      	str	r2, [r7, #4]
   16c16:	230f      	movs	r3, #15
   16c18:	18fb      	adds	r3, r7, r3
   16c1a:	1c02      	adds	r2, r0, #0
   16c1c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   16c1e:	2300      	movs	r3, #0
   16c20:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   16c22:	2300      	movs	r3, #0
   16c24:	613b      	str	r3, [r7, #16]
   16c26:	e01d      	b.n	16c64 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   16c28:	68ba      	ldr	r2, [r7, #8]
   16c2a:	693b      	ldr	r3, [r7, #16]
   16c2c:	18d3      	adds	r3, r2, r3
   16c2e:	3310      	adds	r3, #16
   16c30:	781b      	ldrb	r3, [r3, #0]
   16c32:	2b01      	cmp	r3, #1
   16c34:	d113      	bne.n	16c5e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   16c36:	230f      	movs	r3, #15
   16c38:	18fb      	adds	r3, r7, r3
   16c3a:	781b      	ldrb	r3, [r3, #0]
   16c3c:	4a1b      	ldr	r2, [pc, #108]	; (16cac <_tcc_build_ctrla+0xa0>)
   16c3e:	5cd3      	ldrb	r3, [r2, r3]
   16c40:	001a      	movs	r2, r3
   16c42:	693b      	ldr	r3, [r7, #16]
   16c44:	429a      	cmp	r2, r3
   16c46:	da01      	bge.n	16c4c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   16c48:	2317      	movs	r3, #23
   16c4a:	e02a      	b.n	16ca2 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   16c4c:	2380      	movs	r3, #128	; 0x80
   16c4e:	045a      	lsls	r2, r3, #17
   16c50:	693b      	ldr	r3, [r7, #16]
   16c52:	409a      	lsls	r2, r3
   16c54:	0013      	movs	r3, r2
   16c56:	001a      	movs	r2, r3
   16c58:	697b      	ldr	r3, [r7, #20]
   16c5a:	4313      	orrs	r3, r2
   16c5c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   16c5e:	693b      	ldr	r3, [r7, #16]
   16c60:	3301      	adds	r3, #1
   16c62:	613b      	str	r3, [r7, #16]
   16c64:	693b      	ldr	r3, [r7, #16]
   16c66:	2b03      	cmp	r3, #3
   16c68:	ddde      	ble.n	16c28 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   16c6a:	68bb      	ldr	r3, [r7, #8]
   16c6c:	22a1      	movs	r2, #161	; 0xa1
   16c6e:	5c9b      	ldrb	r3, [r3, r2]
   16c70:	2b00      	cmp	r3, #0
   16c72:	d004      	beq.n	16c7e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   16c74:	697b      	ldr	r3, [r7, #20]
   16c76:	2280      	movs	r2, #128	; 0x80
   16c78:	0112      	lsls	r2, r2, #4
   16c7a:	4313      	orrs	r3, r2
   16c7c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   16c7e:	68bb      	ldr	r3, [r7, #8]
   16c80:	7b1b      	ldrb	r3, [r3, #12]
   16c82:	031b      	lsls	r3, r3, #12
   16c84:	001a      	movs	r2, r3
   16c86:	697b      	ldr	r3, [r7, #20]
   16c88:	4313      	orrs	r3, r2
   16c8a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   16c8c:	68bb      	ldr	r3, [r7, #8]
   16c8e:	7adb      	ldrb	r3, [r3, #11]
   16c90:	021b      	lsls	r3, r3, #8
   16c92:	001a      	movs	r2, r3
   16c94:	697b      	ldr	r3, [r7, #20]
   16c96:	4313      	orrs	r3, r2
   16c98:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   16c9a:	687b      	ldr	r3, [r7, #4]
   16c9c:	697a      	ldr	r2, [r7, #20]
   16c9e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   16ca0:	2300      	movs	r3, #0
}
   16ca2:	0018      	movs	r0, r3
   16ca4:	46bd      	mov	sp, r7
   16ca6:	b006      	add	sp, #24
   16ca8:	bd80      	pop	{r7, pc}
   16caa:	46c0      	nop			; (mov r8, r8)
   16cac:	000257e4 	.word	0x000257e4

00016cb0 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   16cb0:	b580      	push	{r7, lr}
   16cb2:	b086      	sub	sp, #24
   16cb4:	af00      	add	r7, sp, #0
   16cb6:	60b9      	str	r1, [r7, #8]
   16cb8:	607a      	str	r2, [r7, #4]
   16cba:	230f      	movs	r3, #15
   16cbc:	18fb      	adds	r3, r7, r3
   16cbe:	1c02      	adds	r2, r0, #0
   16cc0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   16cc2:	2317      	movs	r3, #23
   16cc4:	18fb      	adds	r3, r7, r3
   16cc6:	2200      	movs	r2, #0
   16cc8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   16cca:	68bb      	ldr	r3, [r7, #8]
   16ccc:	7a1b      	ldrb	r3, [r3, #8]
   16cce:	2b00      	cmp	r3, #0
   16cd0:	d007      	beq.n	16ce2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   16cd2:	2317      	movs	r3, #23
   16cd4:	18fb      	adds	r3, r7, r3
   16cd6:	2217      	movs	r2, #23
   16cd8:	18ba      	adds	r2, r7, r2
   16cda:	7812      	ldrb	r2, [r2, #0]
   16cdc:	2104      	movs	r1, #4
   16cde:	430a      	orrs	r2, r1
   16ce0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   16ce2:	68bb      	ldr	r3, [r7, #8]
   16ce4:	7a5b      	ldrb	r3, [r3, #9]
   16ce6:	2b01      	cmp	r3, #1
   16ce8:	d107      	bne.n	16cfa <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   16cea:	2317      	movs	r3, #23
   16cec:	18fb      	adds	r3, r7, r3
   16cee:	2217      	movs	r2, #23
   16cf0:	18ba      	adds	r2, r7, r2
   16cf2:	7812      	ldrb	r2, [r2, #0]
   16cf4:	2101      	movs	r1, #1
   16cf6:	430a      	orrs	r2, r1
   16cf8:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   16cfa:	687b      	ldr	r3, [r7, #4]
   16cfc:	2217      	movs	r2, #23
   16cfe:	18ba      	adds	r2, r7, r2
   16d00:	7812      	ldrb	r2, [r2, #0]
   16d02:	701a      	strb	r2, [r3, #0]
}
   16d04:	46c0      	nop			; (mov r8, r8)
   16d06:	46bd      	mov	sp, r7
   16d08:	b006      	add	sp, #24
   16d0a:	bd80      	pop	{r7, pc}

00016d0c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   16d0c:	b580      	push	{r7, lr}
   16d0e:	b088      	sub	sp, #32
   16d10:	af00      	add	r7, sp, #0
   16d12:	60b9      	str	r1, [r7, #8]
   16d14:	607a      	str	r2, [r7, #4]
   16d16:	230f      	movs	r3, #15
   16d18:	18fb      	adds	r3, r7, r3
   16d1a:	1c02      	adds	r2, r0, #0
   16d1c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   16d1e:	230f      	movs	r3, #15
   16d20:	18fb      	adds	r3, r7, r3
   16d22:	781a      	ldrb	r2, [r3, #0]
   16d24:	231b      	movs	r3, #27
   16d26:	18fb      	adds	r3, r7, r3
   16d28:	493e      	ldr	r1, [pc, #248]	; (16e24 <_tcc_build_faults+0x118>)
   16d2a:	5c8a      	ldrb	r2, [r1, r2]
   16d2c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   16d2e:	2300      	movs	r3, #0
   16d30:	61fb      	str	r3, [r7, #28]
   16d32:	e06e      	b.n	16e12 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   16d34:	69fa      	ldr	r2, [r7, #28]
   16d36:	0013      	movs	r3, r2
   16d38:	009b      	lsls	r3, r3, #2
   16d3a:	189b      	adds	r3, r3, r2
   16d3c:	005b      	lsls	r3, r3, #1
   16d3e:	3328      	adds	r3, #40	; 0x28
   16d40:	68ba      	ldr	r2, [r7, #8]
   16d42:	18d3      	adds	r3, r2, r3
   16d44:	3304      	adds	r3, #4
   16d46:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   16d48:	697b      	ldr	r3, [r7, #20]
   16d4a:	7a5b      	ldrb	r3, [r3, #9]
   16d4c:	221b      	movs	r2, #27
   16d4e:	18ba      	adds	r2, r7, r2
   16d50:	7812      	ldrb	r2, [r2, #0]
   16d52:	429a      	cmp	r2, r3
   16d54:	d801      	bhi.n	16d5a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   16d56:	2317      	movs	r3, #23
   16d58:	e05f      	b.n	16e1a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   16d5a:	697b      	ldr	r3, [r7, #20]
   16d5c:	781b      	ldrb	r3, [r3, #0]
   16d5e:	2b0f      	cmp	r3, #15
   16d60:	d901      	bls.n	16d66 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   16d62:	2317      	movs	r3, #23
   16d64:	e059      	b.n	16e1a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   16d66:	697b      	ldr	r3, [r7, #20]
   16d68:	781b      	ldrb	r3, [r3, #0]
   16d6a:	061b      	lsls	r3, r3, #24
   16d6c:	001a      	movs	r2, r3
   16d6e:	23f0      	movs	r3, #240	; 0xf0
   16d70:	051b      	lsls	r3, r3, #20
   16d72:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   16d74:	697b      	ldr	r3, [r7, #20]
   16d76:	785b      	ldrb	r3, [r3, #1]
   16d78:	041b      	lsls	r3, r3, #16
   16d7a:	0019      	movs	r1, r3
   16d7c:	23ff      	movs	r3, #255	; 0xff
   16d7e:	041b      	lsls	r3, r3, #16
   16d80:	400b      	ands	r3, r1
   16d82:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   16d84:	697b      	ldr	r3, [r7, #20]
   16d86:	789b      	ldrb	r3, [r3, #2]
   16d88:	2b00      	cmp	r3, #0
   16d8a:	d001      	beq.n	16d90 <_tcc_build_faults+0x84>
   16d8c:	2380      	movs	r3, #128	; 0x80
   16d8e:	e000      	b.n	16d92 <_tcc_build_faults+0x86>
   16d90:	2300      	movs	r3, #0
   16d92:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   16d94:	697b      	ldr	r3, [r7, #20]
   16d96:	78db      	ldrb	r3, [r3, #3]
   16d98:	2b00      	cmp	r3, #0
   16d9a:	d001      	beq.n	16da0 <_tcc_build_faults+0x94>
   16d9c:	2308      	movs	r3, #8
   16d9e:	e000      	b.n	16da2 <_tcc_build_faults+0x96>
   16da0:	2300      	movs	r3, #0
   16da2:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   16da4:	697b      	ldr	r3, [r7, #20]
   16da6:	791b      	ldrb	r3, [r3, #4]
   16da8:	2b00      	cmp	r3, #0
   16daa:	d001      	beq.n	16db0 <_tcc_build_faults+0xa4>
   16dac:	2310      	movs	r3, #16
   16dae:	e000      	b.n	16db2 <_tcc_build_faults+0xa6>
   16db0:	2300      	movs	r3, #0
   16db2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   16db4:	697b      	ldr	r3, [r7, #20]
   16db6:	795b      	ldrb	r3, [r3, #5]
   16db8:	0019      	movs	r1, r3
   16dba:	2303      	movs	r3, #3
   16dbc:	400b      	ands	r3, r1
   16dbe:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   16dc0:	697b      	ldr	r3, [r7, #20]
   16dc2:	799b      	ldrb	r3, [r3, #6]
   16dc4:	015b      	lsls	r3, r3, #5
   16dc6:	0019      	movs	r1, r3
   16dc8:	2360      	movs	r3, #96	; 0x60
   16dca:	400b      	ands	r3, r1
   16dcc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   16dce:	697b      	ldr	r3, [r7, #20]
   16dd0:	79db      	ldrb	r3, [r3, #7]
   16dd2:	021b      	lsls	r3, r3, #8
   16dd4:	0019      	movs	r1, r3
   16dd6:	23c0      	movs	r3, #192	; 0xc0
   16dd8:	009b      	lsls	r3, r3, #2
   16dda:	400b      	ands	r3, r1
   16ddc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   16dde:	697b      	ldr	r3, [r7, #20]
   16de0:	7a1b      	ldrb	r3, [r3, #8]
   16de2:	031b      	lsls	r3, r3, #12
   16de4:	0019      	movs	r1, r3
   16de6:	23e0      	movs	r3, #224	; 0xe0
   16de8:	01db      	lsls	r3, r3, #7
   16dea:	400b      	ands	r3, r1
   16dec:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   16dee:	697b      	ldr	r3, [r7, #20]
   16df0:	7a5b      	ldrb	r3, [r3, #9]
   16df2:	029b      	lsls	r3, r3, #10
   16df4:	0019      	movs	r1, r3
   16df6:	23c0      	movs	r3, #192	; 0xc0
   16df8:	011b      	lsls	r3, r3, #4
   16dfa:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   16dfc:	4313      	orrs	r3, r2
   16dfe:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   16e00:	69fb      	ldr	r3, [r7, #28]
   16e02:	009b      	lsls	r3, r3, #2
   16e04:	687a      	ldr	r2, [r7, #4]
   16e06:	18d3      	adds	r3, r2, r3
   16e08:	693a      	ldr	r2, [r7, #16]
   16e0a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   16e0c:	69fb      	ldr	r3, [r7, #28]
   16e0e:	3301      	adds	r3, #1
   16e10:	61fb      	str	r3, [r7, #28]
   16e12:	69fb      	ldr	r3, [r7, #28]
   16e14:	2b01      	cmp	r3, #1
   16e16:	dd8d      	ble.n	16d34 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   16e18:	2300      	movs	r3, #0
}
   16e1a:	0018      	movs	r0, r3
   16e1c:	46bd      	mov	sp, r7
   16e1e:	b008      	add	sp, #32
   16e20:	bd80      	pop	{r7, pc}
   16e22:	46c0      	nop			; (mov r8, r8)
   16e24:	000257e4 	.word	0x000257e4

00016e28 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   16e28:	b580      	push	{r7, lr}
   16e2a:	b088      	sub	sp, #32
   16e2c:	af00      	add	r7, sp, #0
   16e2e:	60b9      	str	r1, [r7, #8]
   16e30:	607a      	str	r2, [r7, #4]
   16e32:	230f      	movs	r3, #15
   16e34:	18fb      	adds	r3, r7, r3
   16e36:	1c02      	adds	r2, r0, #0
   16e38:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   16e3a:	230f      	movs	r3, #15
   16e3c:	18fb      	adds	r3, r7, r3
   16e3e:	781a      	ldrb	r2, [r3, #0]
   16e40:	2317      	movs	r3, #23
   16e42:	18fb      	adds	r3, r7, r3
   16e44:	492d      	ldr	r1, [pc, #180]	; (16efc <_tcc_build_drvctrl+0xd4>)
   16e46:	5c8a      	ldrb	r2, [r1, r2]
   16e48:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   16e4a:	2300      	movs	r3, #0
   16e4c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   16e4e:	2300      	movs	r3, #0
   16e50:	61fb      	str	r3, [r7, #28]
   16e52:	e048      	b.n	16ee6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   16e54:	68ba      	ldr	r2, [r7, #8]
   16e56:	2150      	movs	r1, #80	; 0x50
   16e58:	69fb      	ldr	r3, [r7, #28]
   16e5a:	18d3      	adds	r3, r2, r3
   16e5c:	185b      	adds	r3, r3, r1
   16e5e:	781b      	ldrb	r3, [r3, #0]
   16e60:	2b00      	cmp	r3, #0
   16e62:	d010      	beq.n	16e86 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   16e64:	2317      	movs	r3, #23
   16e66:	18fb      	adds	r3, r7, r3
   16e68:	781a      	ldrb	r2, [r3, #0]
   16e6a:	69fb      	ldr	r3, [r7, #28]
   16e6c:	429a      	cmp	r2, r3
   16e6e:	d801      	bhi.n	16e74 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   16e70:	2317      	movs	r3, #23
   16e72:	e03f      	b.n	16ef4 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   16e74:	2380      	movs	r3, #128	; 0x80
   16e76:	025a      	lsls	r2, r3, #9
   16e78:	69fb      	ldr	r3, [r7, #28]
   16e7a:	409a      	lsls	r2, r3
   16e7c:	0013      	movs	r3, r2
   16e7e:	001a      	movs	r2, r3
   16e80:	69bb      	ldr	r3, [r7, #24]
   16e82:	4313      	orrs	r3, r2
   16e84:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   16e86:	68ba      	ldr	r2, [r7, #8]
   16e88:	69fb      	ldr	r3, [r7, #28]
   16e8a:	331c      	adds	r3, #28
   16e8c:	005b      	lsls	r3, r3, #1
   16e8e:	18d3      	adds	r3, r2, r3
   16e90:	3309      	adds	r3, #9
   16e92:	781b      	ldrb	r3, [r3, #0]
   16e94:	2b00      	cmp	r3, #0
   16e96:	d023      	beq.n	16ee0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   16e98:	2317      	movs	r3, #23
   16e9a:	18fb      	adds	r3, r7, r3
   16e9c:	781a      	ldrb	r2, [r3, #0]
   16e9e:	69fb      	ldr	r3, [r7, #28]
   16ea0:	429a      	cmp	r2, r3
   16ea2:	d801      	bhi.n	16ea8 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   16ea4:	2317      	movs	r3, #23
   16ea6:	e025      	b.n	16ef4 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   16ea8:	68ba      	ldr	r2, [r7, #8]
   16eaa:	69fb      	ldr	r3, [r7, #28]
   16eac:	331c      	adds	r3, #28
   16eae:	005b      	lsls	r3, r3, #1
   16eb0:	18d3      	adds	r3, r2, r3
   16eb2:	3309      	adds	r3, #9
   16eb4:	781b      	ldrb	r3, [r3, #0]
   16eb6:	2b02      	cmp	r3, #2
   16eb8:	d10a      	bne.n	16ed0 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   16eba:	2302      	movs	r3, #2
   16ebc:	33ff      	adds	r3, #255	; 0xff
   16ebe:	001a      	movs	r2, r3
   16ec0:	69fb      	ldr	r3, [r7, #28]
   16ec2:	409a      	lsls	r2, r3
   16ec4:	0013      	movs	r3, r2
   16ec6:	001a      	movs	r2, r3
   16ec8:	69bb      	ldr	r3, [r7, #24]
   16eca:	4313      	orrs	r3, r2
   16ecc:	61bb      	str	r3, [r7, #24]
   16ece:	e007      	b.n	16ee0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   16ed0:	2201      	movs	r2, #1
   16ed2:	69fb      	ldr	r3, [r7, #28]
   16ed4:	409a      	lsls	r2, r3
   16ed6:	0013      	movs	r3, r2
   16ed8:	001a      	movs	r2, r3
   16eda:	69bb      	ldr	r3, [r7, #24]
   16edc:	4313      	orrs	r3, r2
   16ede:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   16ee0:	69fb      	ldr	r3, [r7, #28]
   16ee2:	3301      	adds	r3, #1
   16ee4:	61fb      	str	r3, [r7, #28]
   16ee6:	69fb      	ldr	r3, [r7, #28]
   16ee8:	2b07      	cmp	r3, #7
   16eea:	d9b3      	bls.n	16e54 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   16eec:	687b      	ldr	r3, [r7, #4]
   16eee:	69ba      	ldr	r2, [r7, #24]
   16ef0:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   16ef2:	2300      	movs	r3, #0
}
   16ef4:	0018      	movs	r0, r3
   16ef6:	46bd      	mov	sp, r7
   16ef8:	b008      	add	sp, #32
   16efa:	bd80      	pop	{r7, pc}
   16efc:	000257e8 	.word	0x000257e8

00016f00 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   16f00:	b580      	push	{r7, lr}
   16f02:	b088      	sub	sp, #32
   16f04:	af00      	add	r7, sp, #0
   16f06:	60b9      	str	r1, [r7, #8]
   16f08:	607a      	str	r2, [r7, #4]
   16f0a:	230f      	movs	r3, #15
   16f0c:	18fb      	adds	r3, r7, r3
   16f0e:	1c02      	adds	r2, r0, #0
   16f10:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   16f12:	230f      	movs	r3, #15
   16f14:	18fb      	adds	r3, r7, r3
   16f16:	781a      	ldrb	r2, [r3, #0]
   16f18:	2317      	movs	r3, #23
   16f1a:	18fb      	adds	r3, r7, r3
   16f1c:	491d      	ldr	r1, [pc, #116]	; (16f94 <_tcc_build_waves+0x94>)
   16f1e:	5c8a      	ldrb	r2, [r1, r2]
   16f20:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   16f22:	68bb      	ldr	r3, [r7, #8]
   16f24:	3310      	adds	r3, #16
   16f26:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   16f28:	693b      	ldr	r3, [r7, #16]
   16f2a:	7a5b      	ldrb	r3, [r3, #9]
   16f2c:	011b      	lsls	r3, r3, #4
   16f2e:	001a      	movs	r2, r3
   16f30:	2330      	movs	r3, #48	; 0x30
   16f32:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   16f34:	693b      	ldr	r3, [r7, #16]
   16f36:	7a1b      	ldrb	r3, [r3, #8]
   16f38:	0019      	movs	r1, r3
   16f3a:	2307      	movs	r3, #7
   16f3c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   16f3e:	4313      	orrs	r3, r2
   16f40:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   16f42:	2300      	movs	r3, #0
   16f44:	61fb      	str	r3, [r7, #28]
   16f46:	e01a      	b.n	16f7e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   16f48:	693a      	ldr	r2, [r7, #16]
   16f4a:	69fb      	ldr	r3, [r7, #28]
   16f4c:	18d3      	adds	r3, r2, r3
   16f4e:	3304      	adds	r3, #4
   16f50:	781b      	ldrb	r3, [r3, #0]
   16f52:	2b00      	cmp	r3, #0
   16f54:	d010      	beq.n	16f78 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   16f56:	2317      	movs	r3, #23
   16f58:	18fb      	adds	r3, r7, r3
   16f5a:	781a      	ldrb	r2, [r3, #0]
   16f5c:	69fb      	ldr	r3, [r7, #28]
   16f5e:	429a      	cmp	r2, r3
   16f60:	dc01      	bgt.n	16f66 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   16f62:	2317      	movs	r3, #23
   16f64:	e012      	b.n	16f8c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   16f66:	2380      	movs	r3, #128	; 0x80
   16f68:	025a      	lsls	r2, r3, #9
   16f6a:	69fb      	ldr	r3, [r7, #28]
   16f6c:	409a      	lsls	r2, r3
   16f6e:	0013      	movs	r3, r2
   16f70:	001a      	movs	r2, r3
   16f72:	69bb      	ldr	r3, [r7, #24]
   16f74:	4313      	orrs	r3, r2
   16f76:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   16f78:	69fb      	ldr	r3, [r7, #28]
   16f7a:	3301      	adds	r3, #1
   16f7c:	61fb      	str	r3, [r7, #28]
   16f7e:	69fb      	ldr	r3, [r7, #28]
   16f80:	2b03      	cmp	r3, #3
   16f82:	dde1      	ble.n	16f48 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   16f84:	687b      	ldr	r3, [r7, #4]
   16f86:	69ba      	ldr	r2, [r7, #24]
   16f88:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   16f8a:	2300      	movs	r3, #0
}
   16f8c:	0018      	movs	r0, r3
   16f8e:	46bd      	mov	sp, r7
   16f90:	b008      	add	sp, #32
   16f92:	bd80      	pop	{r7, pc}
   16f94:	000257e4 	.word	0x000257e4

00016f98 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   16f98:	b590      	push	{r4, r7, lr}
   16f9a:	b091      	sub	sp, #68	; 0x44
   16f9c:	af00      	add	r7, sp, #0
   16f9e:	60f8      	str	r0, [r7, #12]
   16fa0:	60b9      	str	r1, [r7, #8]
   16fa2:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   16fa4:	233b      	movs	r3, #59	; 0x3b
   16fa6:	18fc      	adds	r4, r7, r3
   16fa8:	68bb      	ldr	r3, [r7, #8]
   16faa:	0018      	movs	r0, r3
   16fac:	4bc4      	ldr	r3, [pc, #784]	; (172c0 <tcc_init+0x328>)
   16fae:	4798      	blx	r3
   16fb0:	0003      	movs	r3, r0
   16fb2:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   16fb4:	233b      	movs	r3, #59	; 0x3b
   16fb6:	18fb      	adds	r3, r7, r3
   16fb8:	781a      	ldrb	r2, [r3, #0]
   16fba:	4bc2      	ldr	r3, [pc, #776]	; (172c4 <tcc_init+0x32c>)
   16fbc:	0092      	lsls	r2, r2, #2
   16fbe:	58d3      	ldr	r3, [r2, r3]
   16fc0:	0019      	movs	r1, r3
   16fc2:	2002      	movs	r0, #2
   16fc4:	4bc0      	ldr	r3, [pc, #768]	; (172c8 <tcc_init+0x330>)
   16fc6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   16fc8:	68bb      	ldr	r3, [r7, #8]
   16fca:	681b      	ldr	r3, [r3, #0]
   16fcc:	2202      	movs	r2, #2
   16fce:	4013      	ands	r3, r2
   16fd0:	d001      	beq.n	16fd6 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   16fd2:	231c      	movs	r3, #28
   16fd4:	e1be      	b.n	17354 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   16fd6:	68bb      	ldr	r3, [r7, #8]
   16fd8:	681b      	ldr	r3, [r3, #0]
   16fda:	2201      	movs	r2, #1
   16fdc:	4013      	ands	r3, r2
   16fde:	d001      	beq.n	16fe4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   16fe0:	231c      	movs	r3, #28
   16fe2:	e1b7      	b.n	17354 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   16fe4:	233b      	movs	r3, #59	; 0x3b
   16fe6:	18fb      	adds	r3, r7, r3
   16fe8:	781a      	ldrb	r2, [r3, #0]
   16fea:	4bb8      	ldr	r3, [pc, #736]	; (172cc <tcc_init+0x334>)
   16fec:	0092      	lsls	r2, r2, #2
   16fee:	58d3      	ldr	r3, [r2, r3]
   16ff0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   16ff2:	687b      	ldr	r3, [r7, #4]
   16ff4:	681a      	ldr	r2, [r3, #0]
   16ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ff8:	429a      	cmp	r2, r3
   16ffa:	d804      	bhi.n	17006 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   16ffc:	687b      	ldr	r3, [r7, #4]
   16ffe:	685a      	ldr	r2, [r3, #4]
   17000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17002:	429a      	cmp	r2, r3
   17004:	d901      	bls.n	1700a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   17006:	2317      	movs	r3, #23
   17008:	e1a4      	b.n	17354 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1700a:	2300      	movs	r3, #0
   1700c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1700e:	e00e      	b.n	1702e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   17010:	687a      	ldr	r2, [r7, #4]
   17012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17014:	3306      	adds	r3, #6
   17016:	009b      	lsls	r3, r3, #2
   17018:	18d3      	adds	r3, r2, r3
   1701a:	3304      	adds	r3, #4
   1701c:	681a      	ldr	r2, [r3, #0]
   1701e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17020:	429a      	cmp	r2, r3
   17022:	d901      	bls.n	17028 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   17024:	2317      	movs	r3, #23
   17026:	e195      	b.n	17354 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   17028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1702a:	3301      	adds	r3, #1
   1702c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1702e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17030:	2b03      	cmp	r3, #3
   17032:	dded      	ble.n	17010 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   17034:	2300      	movs	r3, #0
   17036:	63fb      	str	r3, [r7, #60]	; 0x3c
   17038:	e019      	b.n	1706e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   1703a:	687a      	ldr	r2, [r7, #4]
   1703c:	2198      	movs	r1, #152	; 0x98
   1703e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17040:	18d3      	adds	r3, r2, r3
   17042:	185b      	adds	r3, r3, r1
   17044:	781b      	ldrb	r3, [r3, #0]
   17046:	2201      	movs	r2, #1
   17048:	4053      	eors	r3, r2
   1704a:	b2db      	uxtb	r3, r3
   1704c:	2b00      	cmp	r3, #0
   1704e:	d10a      	bne.n	17066 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   17050:	233b      	movs	r3, #59	; 0x3b
   17052:	18fb      	adds	r3, r7, r3
   17054:	781b      	ldrb	r3, [r3, #0]
   17056:	4a9e      	ldr	r2, [pc, #632]	; (172d0 <tcc_init+0x338>)
   17058:	5cd3      	ldrb	r3, [r2, r3]
   1705a:	001a      	movs	r2, r3
   1705c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1705e:	429a      	cmp	r2, r3
   17060:	dc02      	bgt.n	17068 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   17062:	2317      	movs	r3, #23
   17064:	e176      	b.n	17354 <tcc_init+0x3bc>
			continue;
   17066:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   17068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1706a:	3301      	adds	r3, #1
   1706c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1706e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17070:	2b07      	cmp	r3, #7
   17072:	dde2      	ble.n	1703a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   17074:	2300      	movs	r3, #0
   17076:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   17078:	2333      	movs	r3, #51	; 0x33
   1707a:	18fc      	adds	r4, r7, r3
   1707c:	232c      	movs	r3, #44	; 0x2c
   1707e:	18fa      	adds	r2, r7, r3
   17080:	6879      	ldr	r1, [r7, #4]
   17082:	233b      	movs	r3, #59	; 0x3b
   17084:	18fb      	adds	r3, r7, r3
   17086:	781b      	ldrb	r3, [r3, #0]
   17088:	0018      	movs	r0, r3
   1708a:	4b92      	ldr	r3, [pc, #584]	; (172d4 <tcc_init+0x33c>)
   1708c:	4798      	blx	r3
   1708e:	0003      	movs	r3, r0
   17090:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   17092:	2333      	movs	r3, #51	; 0x33
   17094:	18fb      	adds	r3, r7, r3
   17096:	781b      	ldrb	r3, [r3, #0]
   17098:	2b00      	cmp	r3, #0
   1709a:	d003      	beq.n	170a4 <tcc_init+0x10c>
		return status;
   1709c:	2333      	movs	r3, #51	; 0x33
   1709e:	18fb      	adds	r3, r7, r3
   170a0:	781b      	ldrb	r3, [r3, #0]
   170a2:	e157      	b.n	17354 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   170a4:	232b      	movs	r3, #43	; 0x2b
   170a6:	18fa      	adds	r2, r7, r3
   170a8:	6879      	ldr	r1, [r7, #4]
   170aa:	233b      	movs	r3, #59	; 0x3b
   170ac:	18fb      	adds	r3, r7, r3
   170ae:	781b      	ldrb	r3, [r3, #0]
   170b0:	0018      	movs	r0, r3
   170b2:	4b89      	ldr	r3, [pc, #548]	; (172d8 <tcc_init+0x340>)
   170b4:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   170b6:	2333      	movs	r3, #51	; 0x33
   170b8:	18fc      	adds	r4, r7, r3
   170ba:	2320      	movs	r3, #32
   170bc:	18fa      	adds	r2, r7, r3
   170be:	6879      	ldr	r1, [r7, #4]
   170c0:	233b      	movs	r3, #59	; 0x3b
   170c2:	18fb      	adds	r3, r7, r3
   170c4:	781b      	ldrb	r3, [r3, #0]
   170c6:	0018      	movs	r0, r3
   170c8:	4b84      	ldr	r3, [pc, #528]	; (172dc <tcc_init+0x344>)
   170ca:	4798      	blx	r3
   170cc:	0003      	movs	r3, r0
   170ce:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   170d0:	2333      	movs	r3, #51	; 0x33
   170d2:	18fb      	adds	r3, r7, r3
   170d4:	781b      	ldrb	r3, [r3, #0]
   170d6:	2b00      	cmp	r3, #0
   170d8:	d003      	beq.n	170e2 <tcc_init+0x14a>
		return status;
   170da:	2333      	movs	r3, #51	; 0x33
   170dc:	18fb      	adds	r3, r7, r3
   170de:	781b      	ldrb	r3, [r3, #0]
   170e0:	e138      	b.n	17354 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   170e2:	2300      	movs	r3, #0
   170e4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   170e6:	2333      	movs	r3, #51	; 0x33
   170e8:	18fc      	adds	r4, r7, r3
   170ea:	231c      	movs	r3, #28
   170ec:	18fa      	adds	r2, r7, r3
   170ee:	6879      	ldr	r1, [r7, #4]
   170f0:	233b      	movs	r3, #59	; 0x3b
   170f2:	18fb      	adds	r3, r7, r3
   170f4:	781b      	ldrb	r3, [r3, #0]
   170f6:	0018      	movs	r0, r3
   170f8:	4b79      	ldr	r3, [pc, #484]	; (172e0 <tcc_init+0x348>)
   170fa:	4798      	blx	r3
   170fc:	0003      	movs	r3, r0
   170fe:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   17100:	2333      	movs	r3, #51	; 0x33
   17102:	18fb      	adds	r3, r7, r3
   17104:	781b      	ldrb	r3, [r3, #0]
   17106:	2b00      	cmp	r3, #0
   17108:	d003      	beq.n	17112 <tcc_init+0x17a>
		return status;
   1710a:	2333      	movs	r3, #51	; 0x33
   1710c:	18fb      	adds	r3, r7, r3
   1710e:	781b      	ldrb	r3, [r3, #0]
   17110:	e120      	b.n	17354 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   17112:	2333      	movs	r3, #51	; 0x33
   17114:	18fc      	adds	r4, r7, r3
   17116:	2318      	movs	r3, #24
   17118:	18fa      	adds	r2, r7, r3
   1711a:	6879      	ldr	r1, [r7, #4]
   1711c:	233b      	movs	r3, #59	; 0x3b
   1711e:	18fb      	adds	r3, r7, r3
   17120:	781b      	ldrb	r3, [r3, #0]
   17122:	0018      	movs	r0, r3
   17124:	4b6f      	ldr	r3, [pc, #444]	; (172e4 <tcc_init+0x34c>)
   17126:	4798      	blx	r3
   17128:	0003      	movs	r3, r0
   1712a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   1712c:	2333      	movs	r3, #51	; 0x33
   1712e:	18fb      	adds	r3, r7, r3
   17130:	781b      	ldrb	r3, [r3, #0]
   17132:	2b00      	cmp	r3, #0
   17134:	d003      	beq.n	1713e <tcc_init+0x1a6>
		return status;
   17136:	2333      	movs	r3, #51	; 0x33
   17138:	18fb      	adds	r3, r7, r3
   1713a:	781b      	ldrb	r3, [r3, #0]
   1713c:	e10a      	b.n	17354 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1713e:	2300      	movs	r3, #0
   17140:	63fb      	str	r3, [r7, #60]	; 0x3c
   17142:	e009      	b.n	17158 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   17144:	68fa      	ldr	r2, [r7, #12]
   17146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17148:	009b      	lsls	r3, r3, #2
   1714a:	18d3      	adds	r3, r2, r3
   1714c:	3304      	adds	r3, #4
   1714e:	2200      	movs	r2, #0
   17150:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   17152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17154:	3301      	adds	r3, #1
   17156:	63fb      	str	r3, [r7, #60]	; 0x3c
   17158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1715a:	2b0b      	cmp	r3, #11
   1715c:	ddf2      	ble.n	17144 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   1715e:	68fb      	ldr	r3, [r7, #12]
   17160:	2200      	movs	r2, #0
   17162:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   17164:	68fb      	ldr	r3, [r7, #12]
   17166:	2200      	movs	r2, #0
   17168:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   1716a:	233b      	movs	r3, #59	; 0x3b
   1716c:	18fb      	adds	r3, r7, r3
   1716e:	781a      	ldrb	r2, [r3, #0]
   17170:	4b5d      	ldr	r3, [pc, #372]	; (172e8 <tcc_init+0x350>)
   17172:	0092      	lsls	r2, r2, #2
   17174:	68f9      	ldr	r1, [r7, #12]
   17176:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   17178:	68fb      	ldr	r3, [r7, #12]
   1717a:	68ba      	ldr	r2, [r7, #8]
   1717c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   1717e:	687b      	ldr	r3, [r7, #4]
   17180:	22a0      	movs	r2, #160	; 0xa0
   17182:	5c99      	ldrb	r1, [r3, r2]
   17184:	68fb      	ldr	r3, [r7, #12]
   17186:	223c      	movs	r2, #60	; 0x3c
   17188:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   1718a:	2314      	movs	r3, #20
   1718c:	18fb      	adds	r3, r7, r3
   1718e:	0018      	movs	r0, r3
   17190:	4b56      	ldr	r3, [pc, #344]	; (172ec <tcc_init+0x354>)
   17192:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   17194:	687b      	ldr	r3, [r7, #4]
   17196:	7a9a      	ldrb	r2, [r3, #10]
   17198:	2314      	movs	r3, #20
   1719a:	18fb      	adds	r3, r7, r3
   1719c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   1719e:	233b      	movs	r3, #59	; 0x3b
   171a0:	18fb      	adds	r3, r7, r3
   171a2:	781b      	ldrb	r3, [r3, #0]
   171a4:	4a52      	ldr	r2, [pc, #328]	; (172f0 <tcc_init+0x358>)
   171a6:	5cd3      	ldrb	r3, [r2, r3]
   171a8:	2214      	movs	r2, #20
   171aa:	18ba      	adds	r2, r7, r2
   171ac:	0011      	movs	r1, r2
   171ae:	0018      	movs	r0, r3
   171b0:	4b50      	ldr	r3, [pc, #320]	; (172f4 <tcc_init+0x35c>)
   171b2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   171b4:	233b      	movs	r3, #59	; 0x3b
   171b6:	18fb      	adds	r3, r7, r3
   171b8:	781b      	ldrb	r3, [r3, #0]
   171ba:	4a4d      	ldr	r2, [pc, #308]	; (172f0 <tcc_init+0x358>)
   171bc:	5cd3      	ldrb	r3, [r2, r3]
   171be:	0018      	movs	r0, r3
   171c0:	4b4d      	ldr	r3, [pc, #308]	; (172f8 <tcc_init+0x360>)
   171c2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   171c4:	2300      	movs	r3, #0
   171c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   171c8:	e02d      	b.n	17226 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   171ca:	687a      	ldr	r2, [r7, #4]
   171cc:	2198      	movs	r1, #152	; 0x98
   171ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   171d0:	18d3      	adds	r3, r2, r3
   171d2:	185b      	adds	r3, r3, r1
   171d4:	781b      	ldrb	r3, [r3, #0]
   171d6:	2201      	movs	r2, #1
   171d8:	4053      	eors	r3, r2
   171da:	b2db      	uxtb	r3, r3
   171dc:	2b00      	cmp	r3, #0
   171de:	d11e      	bne.n	1721e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   171e0:	2310      	movs	r3, #16
   171e2:	18fb      	adds	r3, r7, r3
   171e4:	0018      	movs	r0, r3
   171e6:	4b45      	ldr	r3, [pc, #276]	; (172fc <tcc_init+0x364>)
   171e8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   171ea:	687b      	ldr	r3, [r7, #4]
   171ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   171ee:	321e      	adds	r2, #30
   171f0:	0092      	lsls	r2, r2, #2
   171f2:	58d3      	ldr	r3, [r2, r3]
   171f4:	b2da      	uxtb	r2, r3
   171f6:	2310      	movs	r3, #16
   171f8:	18fb      	adds	r3, r7, r3
   171fa:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   171fc:	2310      	movs	r3, #16
   171fe:	18fb      	adds	r3, r7, r3
   17200:	2201      	movs	r2, #1
   17202:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   17204:	687b      	ldr	r3, [r7, #4]
   17206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17208:	3216      	adds	r2, #22
   1720a:	0092      	lsls	r2, r2, #2
   1720c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   1720e:	b2db      	uxtb	r3, r3
   17210:	2210      	movs	r2, #16
   17212:	18ba      	adds	r2, r7, r2
   17214:	0011      	movs	r1, r2
   17216:	0018      	movs	r0, r3
   17218:	4b39      	ldr	r3, [pc, #228]	; (17300 <tcc_init+0x368>)
   1721a:	4798      	blx	r3
   1721c:	e000      	b.n	17220 <tcc_init+0x288>
			continue;
   1721e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   17220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17222:	3301      	adds	r3, #1
   17224:	63fb      	str	r3, [r7, #60]	; 0x3c
   17226:	233b      	movs	r3, #59	; 0x3b
   17228:	18fb      	adds	r3, r7, r3
   1722a:	781b      	ldrb	r3, [r3, #0]
   1722c:	4a28      	ldr	r2, [pc, #160]	; (172d0 <tcc_init+0x338>)
   1722e:	5cd3      	ldrb	r3, [r2, r3]
   17230:	001a      	movs	r2, r3
   17232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17234:	429a      	cmp	r2, r3
   17236:	dcc8      	bgt.n	171ca <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   17238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1723a:	68bb      	ldr	r3, [r7, #8]
   1723c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1723e:	46c0      	nop			; (mov r8, r8)
   17240:	68bb      	ldr	r3, [r7, #8]
   17242:	689b      	ldr	r3, [r3, #8]
   17244:	2204      	movs	r2, #4
   17246:	4013      	ands	r3, r2
   17248:	d1fa      	bne.n	17240 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   1724a:	68bb      	ldr	r3, [r7, #8]
   1724c:	22ff      	movs	r2, #255	; 0xff
   1724e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   17250:	46c0      	nop			; (mov r8, r8)
   17252:	68bb      	ldr	r3, [r7, #8]
   17254:	689b      	ldr	r3, [r3, #8]
   17256:	2204      	movs	r2, #4
   17258:	4013      	ands	r3, r2
   1725a:	d1fa      	bne.n	17252 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   1725c:	232b      	movs	r3, #43	; 0x2b
   1725e:	18fb      	adds	r3, r7, r3
   17260:	781a      	ldrb	r2, [r3, #0]
   17262:	68bb      	ldr	r3, [r7, #8]
   17264:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   17266:	2320      	movs	r3, #32
   17268:	18fb      	adds	r3, r7, r3
   1726a:	681a      	ldr	r2, [r3, #0]
   1726c:	68bb      	ldr	r3, [r7, #8]
   1726e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   17270:	2320      	movs	r3, #32
   17272:	18fb      	adds	r3, r7, r3
   17274:	685a      	ldr	r2, [r3, #4]
   17276:	68bb      	ldr	r3, [r7, #8]
   17278:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   1727a:	69fa      	ldr	r2, [r7, #28]
   1727c:	68bb      	ldr	r3, [r7, #8]
   1727e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   17280:	46c0      	nop			; (mov r8, r8)
   17282:	68bb      	ldr	r3, [r7, #8]
   17284:	689b      	ldr	r3, [r3, #8]
   17286:	4a1f      	ldr	r2, [pc, #124]	; (17304 <tcc_init+0x36c>)
   17288:	4013      	ands	r3, r2
   1728a:	d1fa      	bne.n	17282 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   1728c:	69ba      	ldr	r2, [r7, #24]
   1728e:	68bb      	ldr	r3, [r7, #8]
   17290:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   17292:	46c0      	nop			; (mov r8, r8)
   17294:	68bb      	ldr	r3, [r7, #8]
   17296:	689b      	ldr	r3, [r3, #8]
   17298:	2210      	movs	r2, #16
   1729a:	4013      	ands	r3, r2
   1729c:	d1fa      	bne.n	17294 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   1729e:	687b      	ldr	r3, [r7, #4]
   172a0:	681a      	ldr	r2, [r3, #0]
   172a2:	68bb      	ldr	r3, [r7, #8]
   172a4:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   172a6:	46c0      	nop			; (mov r8, r8)
   172a8:	68bb      	ldr	r3, [r7, #8]
   172aa:	689b      	ldr	r3, [r3, #8]
   172ac:	4a16      	ldr	r2, [pc, #88]	; (17308 <tcc_init+0x370>)
   172ae:	4013      	ands	r3, r2
   172b0:	d1fa      	bne.n	172a8 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   172b2:	687b      	ldr	r3, [r7, #4]
   172b4:	685a      	ldr	r2, [r3, #4]
   172b6:	68bb      	ldr	r3, [r7, #8]
   172b8:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   172ba:	2300      	movs	r3, #0
   172bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   172be:	e03f      	b.n	17340 <tcc_init+0x3a8>
   172c0:	00016901 	.word	0x00016901
   172c4:	000257cc 	.word	0x000257cc
   172c8:	0001687d 	.word	0x0001687d
   172cc:	000257d8 	.word	0x000257d8
   172d0:	000257e8 	.word	0x000257e8
   172d4:	00016c0d 	.word	0x00016c0d
   172d8:	00016cb1 	.word	0x00016cb1
   172dc:	00016d0d 	.word	0x00016d0d
   172e0:	00016e29 	.word	0x00016e29
   172e4:	00016f01 	.word	0x00016f01
   172e8:	20005664 	.word	0x20005664
   172ec:	00016865 	.word	0x00016865
   172f0:	000257c8 	.word	0x000257c8
   172f4:	0001647d 	.word	0x0001647d
   172f8:	000164c1 	.word	0x000164c1
   172fc:	000168d9 	.word	0x000168d9
   17300:	000167dd 	.word	0x000167dd
   17304:	00020040 	.word	0x00020040
   17308:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   1730c:	46c0      	nop			; (mov r8, r8)
   1730e:	68bb      	ldr	r3, [r7, #8]
   17310:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   17312:	4912      	ldr	r1, [pc, #72]	; (1735c <tcc_init+0x3c4>)
   17314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17316:	4091      	lsls	r1, r2
   17318:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   1731a:	4013      	ands	r3, r2
   1731c:	d1f7      	bne.n	1730e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   1731e:	687a      	ldr	r2, [r7, #4]
   17320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17322:	3306      	adds	r3, #6
   17324:	009b      	lsls	r3, r3, #2
   17326:	18d3      	adds	r3, r2, r3
   17328:	3304      	adds	r3, #4
   1732a:	681a      	ldr	r2, [r3, #0]
   1732c:	68b9      	ldr	r1, [r7, #8]
   1732e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17330:	3310      	adds	r3, #16
   17332:	009b      	lsls	r3, r3, #2
   17334:	18cb      	adds	r3, r1, r3
   17336:	3304      	adds	r3, #4
   17338:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1733a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1733c:	3301      	adds	r3, #1
   1733e:	63fb      	str	r3, [r7, #60]	; 0x3c
   17340:	233b      	movs	r3, #59	; 0x3b
   17342:	18fb      	adds	r3, r7, r3
   17344:	781b      	ldrb	r3, [r3, #0]
   17346:	4a06      	ldr	r2, [pc, #24]	; (17360 <tcc_init+0x3c8>)
   17348:	5cd3      	ldrb	r3, [r2, r3]
   1734a:	001a      	movs	r2, r3
   1734c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1734e:	429a      	cmp	r2, r3
   17350:	dcdc      	bgt.n	1730c <tcc_init+0x374>
	}

	return STATUS_OK;
   17352:	2300      	movs	r3, #0
}
   17354:	0018      	movs	r0, r3
   17356:	46bd      	mov	sp, r7
   17358:	b011      	add	sp, #68	; 0x44
   1735a:	bd90      	pop	{r4, r7, pc}
   1735c:	00080100 	.word	0x00080100
   17360:	000257e4 	.word	0x000257e4

00017364 <system_interrupt_enable>:
{
   17364:	b580      	push	{r7, lr}
   17366:	b082      	sub	sp, #8
   17368:	af00      	add	r7, sp, #0
   1736a:	0002      	movs	r2, r0
   1736c:	1dfb      	adds	r3, r7, #7
   1736e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   17370:	4b06      	ldr	r3, [pc, #24]	; (1738c <system_interrupt_enable+0x28>)
   17372:	1dfa      	adds	r2, r7, #7
   17374:	7812      	ldrb	r2, [r2, #0]
   17376:	0011      	movs	r1, r2
   17378:	221f      	movs	r2, #31
   1737a:	400a      	ands	r2, r1
   1737c:	2101      	movs	r1, #1
   1737e:	4091      	lsls	r1, r2
   17380:	000a      	movs	r2, r1
   17382:	601a      	str	r2, [r3, #0]
}
   17384:	46c0      	nop			; (mov r8, r8)
   17386:	46bd      	mov	sp, r7
   17388:	b002      	add	sp, #8
   1738a:	bd80      	pop	{r7, pc}
   1738c:	e000e100 	.word	0xe000e100

00017390 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   17390:	b580      	push	{r7, lr}
   17392:	b082      	sub	sp, #8
   17394:	af00      	add	r7, sp, #0
   17396:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   17398:	4a04      	ldr	r2, [pc, #16]	; (173ac <_tcc_interrupt_get_interrupt_vector+0x1c>)
   1739a:	687b      	ldr	r3, [r7, #4]
   1739c:	18d3      	adds	r3, r2, r3
   1739e:	781b      	ldrb	r3, [r3, #0]
   173a0:	b25b      	sxtb	r3, r3
}
   173a2:	0018      	movs	r0, r3
   173a4:	46bd      	mov	sp, r7
   173a6:	b002      	add	sp, #8
   173a8:	bd80      	pop	{r7, pc}
   173aa:	46c0      	nop			; (mov r8, r8)
   173ac:	20000124 	.word	0x20000124

000173b0 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   173b0:	b580      	push	{r7, lr}
   173b2:	b084      	sub	sp, #16
   173b4:	af00      	add	r7, sp, #0
   173b6:	60f8      	str	r0, [r7, #12]
   173b8:	60b9      	str	r1, [r7, #8]
   173ba:	1dfb      	adds	r3, r7, #7
   173bc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   173be:	1dfb      	adds	r3, r7, #7
   173c0:	781b      	ldrb	r3, [r3, #0]
   173c2:	68fa      	ldr	r2, [r7, #12]
   173c4:	009b      	lsls	r3, r3, #2
   173c6:	18d3      	adds	r3, r2, r3
   173c8:	3304      	adds	r3, #4
   173ca:	68ba      	ldr	r2, [r7, #8]
   173cc:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   173ce:	68fb      	ldr	r3, [r7, #12]
   173d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   173d2:	1dfb      	adds	r3, r7, #7
   173d4:	7819      	ldrb	r1, [r3, #0]
   173d6:	4b05      	ldr	r3, [pc, #20]	; (173ec <tcc_register_callback+0x3c>)
   173d8:	0089      	lsls	r1, r1, #2
   173da:	58cb      	ldr	r3, [r1, r3]
   173dc:	431a      	orrs	r2, r3
   173de:	68fb      	ldr	r3, [r7, #12]
   173e0:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   173e2:	2300      	movs	r3, #0
}
   173e4:	0018      	movs	r0, r3
   173e6:	46bd      	mov	sp, r7
   173e8:	b004      	add	sp, #16
   173ea:	bd80      	pop	{r7, pc}
   173ec:	000257ec 	.word	0x000257ec

000173f0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   173f0:	b580      	push	{r7, lr}
   173f2:	b082      	sub	sp, #8
   173f4:	af00      	add	r7, sp, #0
   173f6:	6078      	str	r0, [r7, #4]
   173f8:	000a      	movs	r2, r1
   173fa:	1cfb      	adds	r3, r7, #3
   173fc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   173fe:	687b      	ldr	r3, [r7, #4]
   17400:	681b      	ldr	r3, [r3, #0]
   17402:	0018      	movs	r0, r3
   17404:	4b0f      	ldr	r3, [pc, #60]	; (17444 <tcc_enable_callback+0x54>)
   17406:	4798      	blx	r3
   17408:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   1740a:	0018      	movs	r0, r3
   1740c:	4b0e      	ldr	r3, [pc, #56]	; (17448 <tcc_enable_callback+0x58>)
   1740e:	4798      	blx	r3
   17410:	0003      	movs	r3, r0
   17412:	0018      	movs	r0, r3
   17414:	4b0d      	ldr	r3, [pc, #52]	; (1744c <tcc_enable_callback+0x5c>)
   17416:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   17418:	687b      	ldr	r3, [r7, #4]
   1741a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1741c:	1cfb      	adds	r3, r7, #3
   1741e:	7819      	ldrb	r1, [r3, #0]
   17420:	4b0b      	ldr	r3, [pc, #44]	; (17450 <tcc_enable_callback+0x60>)
   17422:	0089      	lsls	r1, r1, #2
   17424:	58cb      	ldr	r3, [r1, r3]
   17426:	431a      	orrs	r2, r3
   17428:	687b      	ldr	r3, [r7, #4]
   1742a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   1742c:	687b      	ldr	r3, [r7, #4]
   1742e:	681b      	ldr	r3, [r3, #0]
   17430:	1cfa      	adds	r2, r7, #3
   17432:	7811      	ldrb	r1, [r2, #0]
   17434:	4a06      	ldr	r2, [pc, #24]	; (17450 <tcc_enable_callback+0x60>)
   17436:	0089      	lsls	r1, r1, #2
   17438:	588a      	ldr	r2, [r1, r2]
   1743a:	629a      	str	r2, [r3, #40]	; 0x28
}
   1743c:	46c0      	nop			; (mov r8, r8)
   1743e:	46bd      	mov	sp, r7
   17440:	b002      	add	sp, #8
   17442:	bd80      	pop	{r7, pc}
   17444:	00016901 	.word	0x00016901
   17448:	00017391 	.word	0x00017391
   1744c:	00017365 	.word	0x00017365
   17450:	000257ec 	.word	0x000257ec

00017454 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   17454:	b580      	push	{r7, lr}
   17456:	af00      	add	r7, sp, #0
   17458:	2000      	movs	r0, #0
   1745a:	4b02      	ldr	r3, [pc, #8]	; (17464 <TCC0_Handler+0x10>)
   1745c:	4798      	blx	r3
   1745e:	46c0      	nop			; (mov r8, r8)
   17460:	46bd      	mov	sp, r7
   17462:	bd80      	pop	{r7, pc}
   17464:	00017491 	.word	0x00017491

00017468 <TCC1_Handler>:
   17468:	b580      	push	{r7, lr}
   1746a:	af00      	add	r7, sp, #0
   1746c:	2001      	movs	r0, #1
   1746e:	4b02      	ldr	r3, [pc, #8]	; (17478 <TCC1_Handler+0x10>)
   17470:	4798      	blx	r3
   17472:	46c0      	nop			; (mov r8, r8)
   17474:	46bd      	mov	sp, r7
   17476:	bd80      	pop	{r7, pc}
   17478:	00017491 	.word	0x00017491

0001747c <TCC2_Handler>:
   1747c:	b580      	push	{r7, lr}
   1747e:	af00      	add	r7, sp, #0
   17480:	2002      	movs	r0, #2
   17482:	4b02      	ldr	r3, [pc, #8]	; (1748c <TCC2_Handler+0x10>)
   17484:	4798      	blx	r3
   17486:	46c0      	nop			; (mov r8, r8)
   17488:	46bd      	mov	sp, r7
   1748a:	bd80      	pop	{r7, pc}
   1748c:	00017491 	.word	0x00017491

00017490 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   17490:	b580      	push	{r7, lr}
   17492:	b086      	sub	sp, #24
   17494:	af00      	add	r7, sp, #0
   17496:	0002      	movs	r2, r0
   17498:	1dfb      	adds	r3, r7, #7
   1749a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   1749c:	1dfb      	adds	r3, r7, #7
   1749e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   174a0:	4b18      	ldr	r3, [pc, #96]	; (17504 <_tcc_interrupt_handler+0x74>)
   174a2:	0092      	lsls	r2, r2, #2
   174a4:	58d3      	ldr	r3, [r2, r3]
   174a6:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   174a8:	693b      	ldr	r3, [r7, #16]
   174aa:	681b      	ldr	r3, [r3, #0]
   174ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   174ae:	693b      	ldr	r3, [r7, #16]
   174b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   174b2:	401a      	ands	r2, r3
			module->enable_callback_mask);
   174b4:	693b      	ldr	r3, [r7, #16]
   174b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   174b8:	4013      	ands	r3, r2
   174ba:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   174bc:	2300      	movs	r3, #0
   174be:	617b      	str	r3, [r7, #20]
   174c0:	e019      	b.n	174f6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   174c2:	4b11      	ldr	r3, [pc, #68]	; (17508 <_tcc_interrupt_handler+0x78>)
   174c4:	697a      	ldr	r2, [r7, #20]
   174c6:	0092      	lsls	r2, r2, #2
   174c8:	58d3      	ldr	r3, [r2, r3]
   174ca:	68fa      	ldr	r2, [r7, #12]
   174cc:	4013      	ands	r3, r2
   174ce:	d00f      	beq.n	174f0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   174d0:	693a      	ldr	r2, [r7, #16]
   174d2:	697b      	ldr	r3, [r7, #20]
   174d4:	009b      	lsls	r3, r3, #2
   174d6:	18d3      	adds	r3, r2, r3
   174d8:	3304      	adds	r3, #4
   174da:	681b      	ldr	r3, [r3, #0]
   174dc:	693a      	ldr	r2, [r7, #16]
   174de:	0010      	movs	r0, r2
   174e0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   174e2:	693b      	ldr	r3, [r7, #16]
   174e4:	681b      	ldr	r3, [r3, #0]
   174e6:	4a08      	ldr	r2, [pc, #32]	; (17508 <_tcc_interrupt_handler+0x78>)
   174e8:	6979      	ldr	r1, [r7, #20]
   174ea:	0089      	lsls	r1, r1, #2
   174ec:	588a      	ldr	r2, [r1, r2]
   174ee:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   174f0:	697b      	ldr	r3, [r7, #20]
   174f2:	3301      	adds	r3, #1
   174f4:	617b      	str	r3, [r7, #20]
   174f6:	697b      	ldr	r3, [r7, #20]
   174f8:	2b0b      	cmp	r3, #11
   174fa:	dde2      	ble.n	174c2 <_tcc_interrupt_handler+0x32>
		}
	}
}
   174fc:	46c0      	nop			; (mov r8, r8)
   174fe:	46bd      	mov	sp, r7
   17500:	b006      	add	sp, #24
   17502:	bd80      	pop	{r7, pc}
   17504:	20005664 	.word	0x20005664
   17508:	000257ec 	.word	0x000257ec

0001750c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   1750c:	b580      	push	{r7, lr}
   1750e:	b082      	sub	sp, #8
   17510:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   17512:	4b2f      	ldr	r3, [pc, #188]	; (175d0 <Reset_Handler+0xc4>)
   17514:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   17516:	4b2f      	ldr	r3, [pc, #188]	; (175d4 <Reset_Handler+0xc8>)
   17518:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   1751a:	687a      	ldr	r2, [r7, #4]
   1751c:	683b      	ldr	r3, [r7, #0]
   1751e:	429a      	cmp	r2, r3
   17520:	d00c      	beq.n	1753c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   17522:	e007      	b.n	17534 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   17524:	683b      	ldr	r3, [r7, #0]
   17526:	1d1a      	adds	r2, r3, #4
   17528:	603a      	str	r2, [r7, #0]
   1752a:	687a      	ldr	r2, [r7, #4]
   1752c:	1d11      	adds	r1, r2, #4
   1752e:	6079      	str	r1, [r7, #4]
   17530:	6812      	ldr	r2, [r2, #0]
   17532:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   17534:	683a      	ldr	r2, [r7, #0]
   17536:	4b28      	ldr	r3, [pc, #160]	; (175d8 <Reset_Handler+0xcc>)
   17538:	429a      	cmp	r2, r3
   1753a:	d3f3      	bcc.n	17524 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   1753c:	4b27      	ldr	r3, [pc, #156]	; (175dc <Reset_Handler+0xd0>)
   1753e:	603b      	str	r3, [r7, #0]
   17540:	e004      	b.n	1754c <Reset_Handler+0x40>
                *pDest++ = 0;
   17542:	683b      	ldr	r3, [r7, #0]
   17544:	1d1a      	adds	r2, r3, #4
   17546:	603a      	str	r2, [r7, #0]
   17548:	2200      	movs	r2, #0
   1754a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   1754c:	683a      	ldr	r2, [r7, #0]
   1754e:	4b24      	ldr	r3, [pc, #144]	; (175e0 <Reset_Handler+0xd4>)
   17550:	429a      	cmp	r2, r3
   17552:	d3f6      	bcc.n	17542 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   17554:	4b23      	ldr	r3, [pc, #140]	; (175e4 <Reset_Handler+0xd8>)
   17556:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   17558:	4b23      	ldr	r3, [pc, #140]	; (175e8 <Reset_Handler+0xdc>)
   1755a:	687a      	ldr	r2, [r7, #4]
   1755c:	21ff      	movs	r1, #255	; 0xff
   1755e:	438a      	bics	r2, r1
   17560:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   17562:	4a22      	ldr	r2, [pc, #136]	; (175ec <Reset_Handler+0xe0>)
   17564:	2390      	movs	r3, #144	; 0x90
   17566:	005b      	lsls	r3, r3, #1
   17568:	2102      	movs	r1, #2
   1756a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1756c:	4a20      	ldr	r2, [pc, #128]	; (175f0 <Reset_Handler+0xe4>)
   1756e:	78d3      	ldrb	r3, [r2, #3]
   17570:	2103      	movs	r1, #3
   17572:	438b      	bics	r3, r1
   17574:	1c19      	adds	r1, r3, #0
   17576:	2302      	movs	r3, #2
   17578:	430b      	orrs	r3, r1
   1757a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1757c:	4a1c      	ldr	r2, [pc, #112]	; (175f0 <Reset_Handler+0xe4>)
   1757e:	78d3      	ldrb	r3, [r2, #3]
   17580:	210c      	movs	r1, #12
   17582:	438b      	bics	r3, r1
   17584:	1c19      	adds	r1, r3, #0
   17586:	2308      	movs	r3, #8
   17588:	430b      	orrs	r3, r1
   1758a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   1758c:	4a19      	ldr	r2, [pc, #100]	; (175f4 <Reset_Handler+0xe8>)
   1758e:	7b93      	ldrb	r3, [r2, #14]
   17590:	2130      	movs	r1, #48	; 0x30
   17592:	438b      	bics	r3, r1
   17594:	1c19      	adds	r1, r3, #0
   17596:	2320      	movs	r3, #32
   17598:	430b      	orrs	r3, r1
   1759a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1759c:	4a15      	ldr	r2, [pc, #84]	; (175f4 <Reset_Handler+0xe8>)
   1759e:	7b93      	ldrb	r3, [r2, #14]
   175a0:	210c      	movs	r1, #12
   175a2:	438b      	bics	r3, r1
   175a4:	1c19      	adds	r1, r3, #0
   175a6:	2308      	movs	r3, #8
   175a8:	430b      	orrs	r3, r1
   175aa:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   175ac:	4a11      	ldr	r2, [pc, #68]	; (175f4 <Reset_Handler+0xe8>)
   175ae:	7b93      	ldrb	r3, [r2, #14]
   175b0:	2103      	movs	r1, #3
   175b2:	438b      	bics	r3, r1
   175b4:	1c19      	adds	r1, r3, #0
   175b6:	2302      	movs	r3, #2
   175b8:	430b      	orrs	r3, r1
   175ba:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   175bc:	4a0e      	ldr	r2, [pc, #56]	; (175f8 <Reset_Handler+0xec>)
   175be:	6853      	ldr	r3, [r2, #4]
   175c0:	2180      	movs	r1, #128	; 0x80
   175c2:	430b      	orrs	r3, r1
   175c4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   175c6:	4b0d      	ldr	r3, [pc, #52]	; (175fc <Reset_Handler+0xf0>)
   175c8:	4798      	blx	r3

        /* Branch to main function */
        main();
   175ca:	4b0d      	ldr	r3, [pc, #52]	; (17600 <Reset_Handler+0xf4>)
   175cc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   175ce:	e7fe      	b.n	175ce <Reset_Handler+0xc2>
   175d0:	000264a0 	.word	0x000264a0
   175d4:	20000000 	.word	0x20000000
   175d8:	200002fc 	.word	0x200002fc
   175dc:	20000300 	.word	0x20000300
   175e0:	200056d4 	.word	0x200056d4
   175e4:	00000000 	.word	0x00000000
   175e8:	e000ed00 	.word	0xe000ed00
   175ec:	41007000 	.word	0x41007000
   175f0:	41005000 	.word	0x41005000
   175f4:	41004800 	.word	0x41004800
   175f8:	41004000 	.word	0x41004000
   175fc:	00020e79 	.word	0x00020e79
   17600:	0001ed41 	.word	0x0001ed41

00017604 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   17604:	b580      	push	{r7, lr}
   17606:	af00      	add	r7, sp, #0
  __asm volatile (
   17608:	2004      	movs	r0, #4
   1760a:	4671      	mov	r1, lr
   1760c:	4208      	tst	r0, r1
   1760e:	d002      	beq.n	17616 <_MSP>
   17610:	f3ef 8009 	mrs	r0, PSP
   17614:	e001      	b.n	1761a <_HALT>

00017616 <_MSP>:
   17616:	f3ef 8008 	mrs	r0, MSP

0001761a <_HALT>:
   1761a:	6941      	ldr	r1, [r0, #20]
   1761c:	e004      	b.n	17628 <HardFault_HandlerC>
   1761e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   17620:	46c0      	nop			; (mov r8, r8)
   17622:	46bd      	mov	sp, r7
   17624:	bd80      	pop	{r7, pc}
	...

00017628 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   17628:	b580      	push	{r7, lr}
   1762a:	b090      	sub	sp, #64	; 0x40
   1762c:	af00      	add	r7, sp, #0
   1762e:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   17630:	687b      	ldr	r3, [r7, #4]
   17632:	681b      	ldr	r3, [r3, #0]
   17634:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   17636:	687b      	ldr	r3, [r7, #4]
   17638:	685b      	ldr	r3, [r3, #4]
   1763a:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   1763c:	687b      	ldr	r3, [r7, #4]
   1763e:	689b      	ldr	r3, [r3, #8]
   17640:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   17642:	687b      	ldr	r3, [r7, #4]
   17644:	68db      	ldr	r3, [r3, #12]
   17646:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   17648:	687b      	ldr	r3, [r7, #4]
   1764a:	691b      	ldr	r3, [r3, #16]
   1764c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   1764e:	687b      	ldr	r3, [r7, #4]
   17650:	695b      	ldr	r3, [r3, #20]
   17652:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   17654:	687b      	ldr	r3, [r7, #4]
   17656:	699b      	ldr	r3, [r3, #24]
   17658:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   1765a:	687b      	ldr	r3, [r7, #4]
   1765c:	69db      	ldr	r3, [r3, #28]
   1765e:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   17660:	4b0b      	ldr	r3, [pc, #44]	; (17690 <HardFault_HandlerC+0x68>)
   17662:	681b      	ldr	r3, [r3, #0]
   17664:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   17666:	4b0b      	ldr	r3, [pc, #44]	; (17694 <HardFault_HandlerC+0x6c>)
   17668:	681b      	ldr	r3, [r3, #0]
   1766a:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   1766c:	4b0a      	ldr	r3, [pc, #40]	; (17698 <HardFault_HandlerC+0x70>)
   1766e:	681b      	ldr	r3, [r3, #0]
   17670:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   17672:	4b0a      	ldr	r3, [pc, #40]	; (1769c <HardFault_HandlerC+0x74>)
   17674:	681b      	ldr	r3, [r3, #0]
   17676:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   17678:	4b09      	ldr	r3, [pc, #36]	; (176a0 <HardFault_HandlerC+0x78>)
   1767a:	681b      	ldr	r3, [r3, #0]
   1767c:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   1767e:	4b09      	ldr	r3, [pc, #36]	; (176a4 <HardFault_HandlerC+0x7c>)
   17680:	681b      	ldr	r3, [r3, #0]
   17682:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   17684:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   17686:	46c0      	nop			; (mov r8, r8)
   17688:	46bd      	mov	sp, r7
   1768a:	b010      	add	sp, #64	; 0x40
   1768c:	bd80      	pop	{r7, pc}
   1768e:	46c0      	nop			; (mov r8, r8)
   17690:	e000ed28 	.word	0xe000ed28
   17694:	e000ed2c 	.word	0xe000ed2c
   17698:	e000ed30 	.word	0xe000ed30
   1769c:	e000ed3c 	.word	0xe000ed3c
   176a0:	e000ed34 	.word	0xe000ed34
   176a4:	e000ed38 	.word	0xe000ed38

000176a8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   176a8:	b580      	push	{r7, lr}
   176aa:	b086      	sub	sp, #24
   176ac:	af00      	add	r7, sp, #0
   176ae:	60f8      	str	r0, [r7, #12]
   176b0:	60b9      	str	r1, [r7, #8]
   176b2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   176b4:	2300      	movs	r3, #0
   176b6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   176b8:	68fb      	ldr	r3, [r7, #12]
   176ba:	2b00      	cmp	r3, #0
   176bc:	d012      	beq.n	176e4 <_read+0x3c>
		return -1;
   176be:	2301      	movs	r3, #1
   176c0:	425b      	negs	r3, r3
   176c2:	e013      	b.n	176ec <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   176c4:	4b0b      	ldr	r3, [pc, #44]	; (176f4 <_read+0x4c>)
   176c6:	681a      	ldr	r2, [r3, #0]
   176c8:	4b0b      	ldr	r3, [pc, #44]	; (176f8 <_read+0x50>)
   176ca:	681b      	ldr	r3, [r3, #0]
   176cc:	68b9      	ldr	r1, [r7, #8]
   176ce:	0018      	movs	r0, r3
   176d0:	4790      	blx	r2
		ptr++;
   176d2:	68bb      	ldr	r3, [r7, #8]
   176d4:	3301      	adds	r3, #1
   176d6:	60bb      	str	r3, [r7, #8]
		nChars++;
   176d8:	697b      	ldr	r3, [r7, #20]
   176da:	3301      	adds	r3, #1
   176dc:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   176de:	687b      	ldr	r3, [r7, #4]
   176e0:	3b01      	subs	r3, #1
   176e2:	607b      	str	r3, [r7, #4]
   176e4:	687b      	ldr	r3, [r7, #4]
   176e6:	2b00      	cmp	r3, #0
   176e8:	dcec      	bgt.n	176c4 <_read+0x1c>
	}
	return nChars;
   176ea:	697b      	ldr	r3, [r7, #20]
}
   176ec:	0018      	movs	r0, r3
   176ee:	46bd      	mov	sp, r7
   176f0:	b006      	add	sp, #24
   176f2:	bd80      	pop	{r7, pc}
   176f4:	20005670 	.word	0x20005670
   176f8:	20005678 	.word	0x20005678

000176fc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   176fc:	b580      	push	{r7, lr}
   176fe:	b086      	sub	sp, #24
   17700:	af00      	add	r7, sp, #0
   17702:	60f8      	str	r0, [r7, #12]
   17704:	60b9      	str	r1, [r7, #8]
   17706:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   17708:	2300      	movs	r3, #0
   1770a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   1770c:	68fb      	ldr	r3, [r7, #12]
   1770e:	2b01      	cmp	r3, #1
   17710:	d01d      	beq.n	1774e <_write+0x52>
   17712:	68fb      	ldr	r3, [r7, #12]
   17714:	2b02      	cmp	r3, #2
   17716:	d01a      	beq.n	1774e <_write+0x52>
   17718:	68fb      	ldr	r3, [r7, #12]
   1771a:	2b03      	cmp	r3, #3
   1771c:	d017      	beq.n	1774e <_write+0x52>
		return -1;
   1771e:	2301      	movs	r3, #1
   17720:	425b      	negs	r3, r3
   17722:	e018      	b.n	17756 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   17724:	4b0e      	ldr	r3, [pc, #56]	; (17760 <_write+0x64>)
   17726:	681a      	ldr	r2, [r3, #0]
   17728:	4b0e      	ldr	r3, [pc, #56]	; (17764 <_write+0x68>)
   1772a:	6818      	ldr	r0, [r3, #0]
   1772c:	68bb      	ldr	r3, [r7, #8]
   1772e:	1c59      	adds	r1, r3, #1
   17730:	60b9      	str	r1, [r7, #8]
   17732:	781b      	ldrb	r3, [r3, #0]
   17734:	0019      	movs	r1, r3
   17736:	4790      	blx	r2
   17738:	1e03      	subs	r3, r0, #0
   1773a:	da02      	bge.n	17742 <_write+0x46>
			return -1;
   1773c:	2301      	movs	r3, #1
   1773e:	425b      	negs	r3, r3
   17740:	e009      	b.n	17756 <_write+0x5a>
		}
		++nChars;
   17742:	697b      	ldr	r3, [r7, #20]
   17744:	3301      	adds	r3, #1
   17746:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   17748:	687b      	ldr	r3, [r7, #4]
   1774a:	3b01      	subs	r3, #1
   1774c:	607b      	str	r3, [r7, #4]
   1774e:	687b      	ldr	r3, [r7, #4]
   17750:	2b00      	cmp	r3, #0
   17752:	d1e7      	bne.n	17724 <_write+0x28>
	}
	return nChars;
   17754:	697b      	ldr	r3, [r7, #20]
}
   17756:	0018      	movs	r0, r3
   17758:	46bd      	mov	sp, r7
   1775a:	b006      	add	sp, #24
   1775c:	bd80      	pop	{r7, pc}
   1775e:	46c0      	nop			; (mov r8, r8)
   17760:	20005674 	.word	0x20005674
   17764:	20005678 	.word	0x20005678

00017768 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   17768:	b580      	push	{r7, lr}
   1776a:	b084      	sub	sp, #16
   1776c:	af00      	add	r7, sp, #0
   1776e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   17770:	4b0a      	ldr	r3, [pc, #40]	; (1779c <_sbrk+0x34>)
   17772:	681b      	ldr	r3, [r3, #0]
   17774:	2b00      	cmp	r3, #0
   17776:	d102      	bne.n	1777e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   17778:	4b08      	ldr	r3, [pc, #32]	; (1779c <_sbrk+0x34>)
   1777a:	4a09      	ldr	r2, [pc, #36]	; (177a0 <_sbrk+0x38>)
   1777c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   1777e:	4b07      	ldr	r3, [pc, #28]	; (1779c <_sbrk+0x34>)
   17780:	681b      	ldr	r3, [r3, #0]
   17782:	60fb      	str	r3, [r7, #12]

	heap += incr;
   17784:	4b05      	ldr	r3, [pc, #20]	; (1779c <_sbrk+0x34>)
   17786:	681a      	ldr	r2, [r3, #0]
   17788:	687b      	ldr	r3, [r7, #4]
   1778a:	18d2      	adds	r2, r2, r3
   1778c:	4b03      	ldr	r3, [pc, #12]	; (1779c <_sbrk+0x34>)
   1778e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   17790:	68fb      	ldr	r3, [r7, #12]
}
   17792:	0018      	movs	r0, r3
   17794:	46bd      	mov	sp, r7
   17796:	b004      	add	sp, #16
   17798:	bd80      	pop	{r7, pc}
   1779a:	46c0      	nop			; (mov r8, r8)
   1779c:	20003d80 	.word	0x20003d80
   177a0:	200076d8 	.word	0x200076d8

000177a4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   177a4:	b580      	push	{r7, lr}
   177a6:	b082      	sub	sp, #8
   177a8:	af00      	add	r7, sp, #0
   177aa:	6078      	str	r0, [r7, #4]
	return -1;
   177ac:	2301      	movs	r3, #1
   177ae:	425b      	negs	r3, r3
}
   177b0:	0018      	movs	r0, r3
   177b2:	46bd      	mov	sp, r7
   177b4:	b002      	add	sp, #8
   177b6:	bd80      	pop	{r7, pc}

000177b8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   177b8:	b580      	push	{r7, lr}
   177ba:	b082      	sub	sp, #8
   177bc:	af00      	add	r7, sp, #0
   177be:	6078      	str	r0, [r7, #4]
   177c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   177c2:	683b      	ldr	r3, [r7, #0]
   177c4:	2280      	movs	r2, #128	; 0x80
   177c6:	0192      	lsls	r2, r2, #6
   177c8:	605a      	str	r2, [r3, #4]

	return 0;
   177ca:	2300      	movs	r3, #0
}
   177cc:	0018      	movs	r0, r3
   177ce:	46bd      	mov	sp, r7
   177d0:	b002      	add	sp, #8
   177d2:	bd80      	pop	{r7, pc}

000177d4 <_isatty>:

extern int _isatty(int file)
{
   177d4:	b580      	push	{r7, lr}
   177d6:	b082      	sub	sp, #8
   177d8:	af00      	add	r7, sp, #0
   177da:	6078      	str	r0, [r7, #4]
	return 1;
   177dc:	2301      	movs	r3, #1
}
   177de:	0018      	movs	r0, r3
   177e0:	46bd      	mov	sp, r7
   177e2:	b002      	add	sp, #8
   177e4:	bd80      	pop	{r7, pc}

000177e6 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   177e6:	b580      	push	{r7, lr}
   177e8:	b084      	sub	sp, #16
   177ea:	af00      	add	r7, sp, #0
   177ec:	60f8      	str	r0, [r7, #12]
   177ee:	60b9      	str	r1, [r7, #8]
   177f0:	607a      	str	r2, [r7, #4]
	return 0;
   177f2:	2300      	movs	r3, #0
}
   177f4:	0018      	movs	r0, r3
   177f6:	46bd      	mov	sp, r7
   177f8:	b004      	add	sp, #16
   177fa:	bd80      	pop	{r7, pc}

000177fc <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   177fc:	b580      	push	{r7, lr}
   177fe:	b082      	sub	sp, #8
   17800:	af00      	add	r7, sp, #0
   17802:	6078      	str	r0, [r7, #4]
	time->second = 0;
   17804:	687b      	ldr	r3, [r7, #4]
   17806:	2200      	movs	r2, #0
   17808:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   1780a:	687b      	ldr	r3, [r7, #4]
   1780c:	2200      	movs	r2, #0
   1780e:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   17810:	687b      	ldr	r3, [r7, #4]
   17812:	2200      	movs	r2, #0
   17814:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   17816:	687b      	ldr	r3, [r7, #4]
   17818:	2200      	movs	r2, #0
   1781a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   1781c:	687b      	ldr	r3, [r7, #4]
   1781e:	2201      	movs	r2, #1
   17820:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   17822:	687b      	ldr	r3, [r7, #4]
   17824:	2201      	movs	r2, #1
   17826:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   17828:	687b      	ldr	r3, [r7, #4]
   1782a:	22fa      	movs	r2, #250	; 0xfa
   1782c:	00d2      	lsls	r2, r2, #3
   1782e:	80da      	strh	r2, [r3, #6]
}
   17830:	46c0      	nop			; (mov r8, r8)
   17832:	46bd      	mov	sp, r7
   17834:	b002      	add	sp, #8
   17836:	bd80      	pop	{r7, pc}

00017838 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   17838:	b580      	push	{r7, lr}
   1783a:	b086      	sub	sp, #24
   1783c:	af00      	add	r7, sp, #0
   1783e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   17840:	230c      	movs	r3, #12
   17842:	18fb      	adds	r3, r7, r3
   17844:	0018      	movs	r0, r3
   17846:	4b23      	ldr	r3, [pc, #140]	; (178d4 <rtc_calendar_get_config_defaults+0x9c>)
   17848:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   1784a:	687b      	ldr	r3, [r7, #4]
   1784c:	22a0      	movs	r2, #160	; 0xa0
   1784e:	0112      	lsls	r2, r2, #4
   17850:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   17852:	687b      	ldr	r3, [r7, #4]
   17854:	2200      	movs	r2, #0
   17856:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   17858:	687b      	ldr	r3, [r7, #4]
   1785a:	2200      	movs	r2, #0
   1785c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   1785e:	687b      	ldr	r3, [r7, #4]
   17860:	2200      	movs	r2, #0
   17862:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   17864:	687b      	ldr	r3, [r7, #4]
   17866:	22fa      	movs	r2, #250	; 0xfa
   17868:	00d2      	lsls	r2, r2, #3
   1786a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   1786c:	2317      	movs	r3, #23
   1786e:	18fb      	adds	r3, r7, r3
   17870:	2200      	movs	r2, #0
   17872:	701a      	strb	r2, [r3, #0]
   17874:	e025      	b.n	178c2 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   17876:	2317      	movs	r3, #23
   17878:	18fb      	adds	r3, r7, r3
   1787a:	781a      	ldrb	r2, [r3, #0]
   1787c:	6879      	ldr	r1, [r7, #4]
   1787e:	2008      	movs	r0, #8
   17880:	0013      	movs	r3, r2
   17882:	009b      	lsls	r3, r3, #2
   17884:	189b      	adds	r3, r3, r2
   17886:	005b      	lsls	r3, r3, #1
   17888:	18cb      	adds	r3, r1, r3
   1788a:	181a      	adds	r2, r3, r0
   1788c:	230c      	movs	r3, #12
   1788e:	18fb      	adds	r3, r7, r3
   17890:	0010      	movs	r0, r2
   17892:	0019      	movs	r1, r3
   17894:	2308      	movs	r3, #8
   17896:	001a      	movs	r2, r3
   17898:	4b0f      	ldr	r3, [pc, #60]	; (178d8 <rtc_calendar_get_config_defaults+0xa0>)
   1789a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1789c:	2317      	movs	r3, #23
   1789e:	18fb      	adds	r3, r7, r3
   178a0:	781a      	ldrb	r2, [r3, #0]
   178a2:	6879      	ldr	r1, [r7, #4]
   178a4:	0013      	movs	r3, r2
   178a6:	009b      	lsls	r3, r3, #2
   178a8:	189b      	adds	r3, r3, r2
   178aa:	005b      	lsls	r3, r3, #1
   178ac:	18cb      	adds	r3, r1, r3
   178ae:	3310      	adds	r3, #16
   178b0:	2206      	movs	r2, #6
   178b2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   178b4:	2317      	movs	r3, #23
   178b6:	18fb      	adds	r3, r7, r3
   178b8:	781a      	ldrb	r2, [r3, #0]
   178ba:	2317      	movs	r3, #23
   178bc:	18fb      	adds	r3, r7, r3
   178be:	3201      	adds	r2, #1
   178c0:	701a      	strb	r2, [r3, #0]
   178c2:	2317      	movs	r3, #23
   178c4:	18fb      	adds	r3, r7, r3
   178c6:	781b      	ldrb	r3, [r3, #0]
   178c8:	2b00      	cmp	r3, #0
   178ca:	d0d4      	beq.n	17876 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   178cc:	46c0      	nop			; (mov r8, r8)
   178ce:	46bd      	mov	sp, r7
   178d0:	b006      	add	sp, #24
   178d2:	bd80      	pop	{r7, pc}
   178d4:	000177fd 	.word	0x000177fd
   178d8:	00020ee9 	.word	0x00020ee9

000178dc <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   178dc:	b580      	push	{r7, lr}
   178de:	b088      	sub	sp, #32
   178e0:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   178e2:	230c      	movs	r3, #12
   178e4:	18fb      	adds	r3, r7, r3
   178e6:	0018      	movs	r0, r3
   178e8:	4b1a      	ldr	r3, [pc, #104]	; (17954 <configure_rtc_calendar+0x78>)
   178ea:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   178ec:	1d3b      	adds	r3, r7, #4
   178ee:	0018      	movs	r0, r3
   178f0:	4b19      	ldr	r3, [pc, #100]	; (17958 <configure_rtc_calendar+0x7c>)
   178f2:	4798      	blx	r3
	init_time.year   = 2014;
   178f4:	1d3b      	adds	r3, r7, #4
   178f6:	4a19      	ldr	r2, [pc, #100]	; (1795c <configure_rtc_calendar+0x80>)
   178f8:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   178fa:	1d3b      	adds	r3, r7, #4
   178fc:	2201      	movs	r2, #1
   178fe:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   17900:	1d3b      	adds	r3, r7, #4
   17902:	2201      	movs	r2, #1
   17904:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   17906:	1d3b      	adds	r3, r7, #4
   17908:	2200      	movs	r2, #0
   1790a:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   1790c:	1d3b      	adds	r3, r7, #4
   1790e:	2200      	movs	r2, #0
   17910:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   17912:	1d3b      	adds	r3, r7, #4
   17914:	2204      	movs	r2, #4
   17916:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   17918:	230c      	movs	r3, #12
   1791a:	18fb      	adds	r3, r7, r3
   1791c:	2201      	movs	r2, #1
   1791e:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   17920:	230c      	movs	r3, #12
   17922:	18fb      	adds	r3, r7, r3
   17924:	1d3a      	adds	r2, r7, #4
   17926:	3308      	adds	r3, #8
   17928:	ca03      	ldmia	r2!, {r0, r1}
   1792a:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1792c:	230c      	movs	r3, #12
   1792e:	18fb      	adds	r3, r7, r3
   17930:	2206      	movs	r2, #6
   17932:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   17934:	230c      	movs	r3, #12
   17936:	18fa      	adds	r2, r7, r3
   17938:	4909      	ldr	r1, [pc, #36]	; (17960 <configure_rtc_calendar+0x84>)
   1793a:	4b0a      	ldr	r3, [pc, #40]	; (17964 <configure_rtc_calendar+0x88>)
   1793c:	0018      	movs	r0, r3
   1793e:	4b0a      	ldr	r3, [pc, #40]	; (17968 <configure_rtc_calendar+0x8c>)
   17940:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   17942:	4b08      	ldr	r3, [pc, #32]	; (17964 <configure_rtc_calendar+0x88>)
   17944:	0018      	movs	r0, r3
   17946:	4b09      	ldr	r3, [pc, #36]	; (1796c <configure_rtc_calendar+0x90>)
   17948:	4798      	blx	r3
}
   1794a:	46c0      	nop			; (mov r8, r8)
   1794c:	46bd      	mov	sp, r7
   1794e:	b008      	add	sp, #32
   17950:	bd80      	pop	{r7, pc}
   17952:	46c0      	nop			; (mov r8, r8)
   17954:	00017839 	.word	0x00017839
   17958:	000177fd 	.word	0x000177fd
   1795c:	000007de 	.word	0x000007de
   17960:	40001400 	.word	0x40001400
   17964:	2000567c 	.word	0x2000567c
   17968:	00013419 	.word	0x00013419
   1796c:	00013145 	.word	0x00013145

00017970 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   17970:	b590      	push	{r4, r7, lr}
   17972:	b085      	sub	sp, #20
   17974:	af00      	add	r7, sp, #0
   17976:	0002      	movs	r2, r0
   17978:	1dfb      	adds	r3, r7, #7
   1797a:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   1797c:	4b1a      	ldr	r3, [pc, #104]	; (179e8 <disk_initialize+0x78>)
   1797e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   17980:	1dfb      	adds	r3, r7, #7
   17982:	781b      	ldrb	r3, [r3, #0]
   17984:	2b01      	cmp	r3, #1
   17986:	d901      	bls.n	1798c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   17988:	2301      	movs	r3, #1
   1798a:	e029      	b.n	179e0 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   1798c:	2300      	movs	r3, #0
   1798e:	60fb      	str	r3, [r7, #12]
   17990:	e010      	b.n	179b4 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   17992:	230b      	movs	r3, #11
   17994:	18fc      	adds	r4, r7, r3
   17996:	1dfb      	adds	r3, r7, #7
   17998:	781b      	ldrb	r3, [r3, #0]
   1799a:	0018      	movs	r0, r3
   1799c:	4b13      	ldr	r3, [pc, #76]	; (179ec <disk_initialize+0x7c>)
   1799e:	4798      	blx	r3
   179a0:	0003      	movs	r3, r0
   179a2:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   179a4:	230b      	movs	r3, #11
   179a6:	18fb      	adds	r3, r7, r3
   179a8:	781b      	ldrb	r3, [r3, #0]
   179aa:	2b03      	cmp	r3, #3
   179ac:	d106      	bne.n	179bc <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   179ae:	68fb      	ldr	r3, [r7, #12]
   179b0:	3301      	adds	r3, #1
   179b2:	60fb      	str	r3, [r7, #12]
   179b4:	68fb      	ldr	r3, [r7, #12]
   179b6:	2b01      	cmp	r3, #1
   179b8:	ddeb      	ble.n	17992 <disk_initialize+0x22>
   179ba:	e000      	b.n	179be <disk_initialize+0x4e>
			break;
   179bc:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   179be:	230b      	movs	r3, #11
   179c0:	18fb      	adds	r3, r7, r3
   179c2:	781b      	ldrb	r3, [r3, #0]
   179c4:	2b00      	cmp	r3, #0
   179c6:	d001      	beq.n	179cc <disk_initialize+0x5c>
		return STA_NOINIT;
   179c8:	2301      	movs	r3, #1
   179ca:	e009      	b.n	179e0 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   179cc:	1dfb      	adds	r3, r7, #7
   179ce:	781b      	ldrb	r3, [r3, #0]
   179d0:	0018      	movs	r0, r3
   179d2:	4b07      	ldr	r3, [pc, #28]	; (179f0 <disk_initialize+0x80>)
   179d4:	4798      	blx	r3
   179d6:	1e03      	subs	r3, r0, #0
   179d8:	d001      	beq.n	179de <disk_initialize+0x6e>
		return STA_PROTECT;
   179da:	2304      	movs	r3, #4
   179dc:	e000      	b.n	179e0 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   179de:	2300      	movs	r3, #0
}
   179e0:	0018      	movs	r0, r3
   179e2:	46bd      	mov	sp, r7
   179e4:	b005      	add	sp, #20
   179e6:	bd90      	pop	{r4, r7, pc}
   179e8:	000178dd 	.word	0x000178dd
   179ec:	00012641 	.word	0x00012641
   179f0:	000126f9 	.word	0x000126f9

000179f4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   179f4:	b580      	push	{r7, lr}
   179f6:	b082      	sub	sp, #8
   179f8:	af00      	add	r7, sp, #0
   179fa:	0002      	movs	r2, r0
   179fc:	1dfb      	adds	r3, r7, #7
   179fe:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   17a00:	1dfb      	adds	r3, r7, #7
   17a02:	781b      	ldrb	r3, [r3, #0]
   17a04:	0018      	movs	r0, r3
   17a06:	4b08      	ldr	r3, [pc, #32]	; (17a28 <disk_status+0x34>)
   17a08:	4798      	blx	r3
   17a0a:	1e03      	subs	r3, r0, #0
   17a0c:	d002      	beq.n	17a14 <disk_status+0x20>
   17a0e:	2b02      	cmp	r3, #2
   17a10:	d002      	beq.n	17a18 <disk_status+0x24>
   17a12:	e003      	b.n	17a1c <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   17a14:	2300      	movs	r3, #0
   17a16:	e002      	b.n	17a1e <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   17a18:	2303      	movs	r3, #3
   17a1a:	e000      	b.n	17a1e <disk_status+0x2a>
	default:
		return STA_NOINIT;
   17a1c:	2301      	movs	r3, #1
	}
}
   17a1e:	0018      	movs	r0, r3
   17a20:	46bd      	mov	sp, r7
   17a22:	b002      	add	sp, #8
   17a24:	bd80      	pop	{r7, pc}
   17a26:	46c0      	nop			; (mov r8, r8)
   17a28:	00012641 	.word	0x00012641

00017a2c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   17a2c:	b590      	push	{r4, r7, lr}
   17a2e:	b089      	sub	sp, #36	; 0x24
   17a30:	af00      	add	r7, sp, #0
   17a32:	60b9      	str	r1, [r7, #8]
   17a34:	607a      	str	r2, [r7, #4]
   17a36:	0019      	movs	r1, r3
   17a38:	230f      	movs	r3, #15
   17a3a:	18fb      	adds	r3, r7, r3
   17a3c:	1c02      	adds	r2, r0, #0
   17a3e:	701a      	strb	r2, [r3, #0]
   17a40:	230e      	movs	r3, #14
   17a42:	18fb      	adds	r3, r7, r3
   17a44:	1c0a      	adds	r2, r1, #0
   17a46:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   17a48:	231b      	movs	r3, #27
   17a4a:	18fc      	adds	r4, r7, r3
   17a4c:	230f      	movs	r3, #15
   17a4e:	18fb      	adds	r3, r7, r3
   17a50:	781b      	ldrb	r3, [r3, #0]
   17a52:	0018      	movs	r0, r3
   17a54:	4b28      	ldr	r3, [pc, #160]	; (17af8 <disk_read+0xcc>)
   17a56:	4798      	blx	r3
   17a58:	0003      	movs	r3, r0
   17a5a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   17a5c:	231b      	movs	r3, #27
   17a5e:	18fb      	adds	r3, r7, r3
   17a60:	781b      	ldrb	r3, [r3, #0]
   17a62:	2b00      	cmp	r3, #0
   17a64:	d101      	bne.n	17a6a <disk_read+0x3e>
		return RES_ERROR;
   17a66:	2301      	movs	r3, #1
   17a68:	e042      	b.n	17af0 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   17a6a:	2314      	movs	r3, #20
   17a6c:	18fa      	adds	r2, r7, r3
   17a6e:	230f      	movs	r3, #15
   17a70:	18fb      	adds	r3, r7, r3
   17a72:	781b      	ldrb	r3, [r3, #0]
   17a74:	0011      	movs	r1, r2
   17a76:	0018      	movs	r0, r3
   17a78:	4b20      	ldr	r3, [pc, #128]	; (17afc <disk_read+0xd0>)
   17a7a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   17a7c:	230e      	movs	r3, #14
   17a7e:	18fb      	adds	r3, r7, r3
   17a80:	781b      	ldrb	r3, [r3, #0]
   17a82:	221b      	movs	r2, #27
   17a84:	18ba      	adds	r2, r7, r2
   17a86:	7812      	ldrb	r2, [r2, #0]
   17a88:	4353      	muls	r3, r2
   17a8a:	001a      	movs	r2, r3
   17a8c:	687b      	ldr	r3, [r7, #4]
   17a8e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   17a90:	697b      	ldr	r3, [r7, #20]
   17a92:	3301      	adds	r3, #1
   17a94:	211b      	movs	r1, #27
   17a96:	1879      	adds	r1, r7, r1
   17a98:	7809      	ldrb	r1, [r1, #0]
   17a9a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   17a9c:	429a      	cmp	r2, r3
   17a9e:	d901      	bls.n	17aa4 <disk_read+0x78>
		return RES_PARERR;
   17aa0:	2304      	movs	r3, #4
   17aa2:	e025      	b.n	17af0 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   17aa4:	2300      	movs	r3, #0
   17aa6:	61fb      	str	r3, [r7, #28]
   17aa8:	e01b      	b.n	17ae2 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   17aaa:	231b      	movs	r3, #27
   17aac:	18fb      	adds	r3, r7, r3
   17aae:	781b      	ldrb	r3, [r3, #0]
   17ab0:	69fa      	ldr	r2, [r7, #28]
   17ab2:	435a      	muls	r2, r3
   17ab4:	687b      	ldr	r3, [r7, #4]
   17ab6:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   17ab8:	231b      	movs	r3, #27
   17aba:	18fb      	adds	r3, r7, r3
   17abc:	781b      	ldrb	r3, [r3, #0]
   17abe:	69fa      	ldr	r2, [r7, #28]
   17ac0:	4353      	muls	r3, r2
   17ac2:	025b      	lsls	r3, r3, #9
   17ac4:	68ba      	ldr	r2, [r7, #8]
   17ac6:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   17ac8:	230f      	movs	r3, #15
   17aca:	18fb      	adds	r3, r7, r3
   17acc:	781b      	ldrb	r3, [r3, #0]
   17ace:	0018      	movs	r0, r3
   17ad0:	4b0b      	ldr	r3, [pc, #44]	; (17b00 <disk_read+0xd4>)
   17ad2:	4798      	blx	r3
   17ad4:	1e03      	subs	r3, r0, #0
   17ad6:	d001      	beq.n	17adc <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   17ad8:	2301      	movs	r3, #1
   17ada:	e009      	b.n	17af0 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   17adc:	69fb      	ldr	r3, [r7, #28]
   17ade:	3301      	adds	r3, #1
   17ae0:	61fb      	str	r3, [r7, #28]
   17ae2:	230e      	movs	r3, #14
   17ae4:	18fb      	adds	r3, r7, r3
   17ae6:	781a      	ldrb	r2, [r3, #0]
   17ae8:	69fb      	ldr	r3, [r7, #28]
   17aea:	429a      	cmp	r2, r3
   17aec:	d8dd      	bhi.n	17aaa <disk_read+0x7e>
		}
	}

	return RES_OK;
   17aee:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   17af0:	0018      	movs	r0, r3
   17af2:	46bd      	mov	sp, r7
   17af4:	b009      	add	sp, #36	; 0x24
   17af6:	bd90      	pop	{r4, r7, pc}
   17af8:	000126cd 	.word	0x000126cd
   17afc:	00012681 	.word	0x00012681
   17b00:	00012741 	.word	0x00012741

00017b04 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   17b04:	b590      	push	{r4, r7, lr}
   17b06:	b089      	sub	sp, #36	; 0x24
   17b08:	af00      	add	r7, sp, #0
   17b0a:	60b9      	str	r1, [r7, #8]
   17b0c:	607a      	str	r2, [r7, #4]
   17b0e:	0019      	movs	r1, r3
   17b10:	230f      	movs	r3, #15
   17b12:	18fb      	adds	r3, r7, r3
   17b14:	1c02      	adds	r2, r0, #0
   17b16:	701a      	strb	r2, [r3, #0]
   17b18:	230e      	movs	r3, #14
   17b1a:	18fb      	adds	r3, r7, r3
   17b1c:	1c0a      	adds	r2, r1, #0
   17b1e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   17b20:	231b      	movs	r3, #27
   17b22:	18fc      	adds	r4, r7, r3
   17b24:	230f      	movs	r3, #15
   17b26:	18fb      	adds	r3, r7, r3
   17b28:	781b      	ldrb	r3, [r3, #0]
   17b2a:	0018      	movs	r0, r3
   17b2c:	4b28      	ldr	r3, [pc, #160]	; (17bd0 <disk_write+0xcc>)
   17b2e:	4798      	blx	r3
   17b30:	0003      	movs	r3, r0
   17b32:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   17b34:	231b      	movs	r3, #27
   17b36:	18fb      	adds	r3, r7, r3
   17b38:	781b      	ldrb	r3, [r3, #0]
   17b3a:	2b00      	cmp	r3, #0
   17b3c:	d101      	bne.n	17b42 <disk_write+0x3e>
		return RES_ERROR;
   17b3e:	2301      	movs	r3, #1
   17b40:	e042      	b.n	17bc8 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   17b42:	2314      	movs	r3, #20
   17b44:	18fa      	adds	r2, r7, r3
   17b46:	230f      	movs	r3, #15
   17b48:	18fb      	adds	r3, r7, r3
   17b4a:	781b      	ldrb	r3, [r3, #0]
   17b4c:	0011      	movs	r1, r2
   17b4e:	0018      	movs	r0, r3
   17b50:	4b20      	ldr	r3, [pc, #128]	; (17bd4 <disk_write+0xd0>)
   17b52:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   17b54:	230e      	movs	r3, #14
   17b56:	18fb      	adds	r3, r7, r3
   17b58:	781b      	ldrb	r3, [r3, #0]
   17b5a:	221b      	movs	r2, #27
   17b5c:	18ba      	adds	r2, r7, r2
   17b5e:	7812      	ldrb	r2, [r2, #0]
   17b60:	4353      	muls	r3, r2
   17b62:	001a      	movs	r2, r3
   17b64:	687b      	ldr	r3, [r7, #4]
   17b66:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   17b68:	697b      	ldr	r3, [r7, #20]
   17b6a:	3301      	adds	r3, #1
   17b6c:	211b      	movs	r1, #27
   17b6e:	1879      	adds	r1, r7, r1
   17b70:	7809      	ldrb	r1, [r1, #0]
   17b72:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   17b74:	429a      	cmp	r2, r3
   17b76:	d901      	bls.n	17b7c <disk_write+0x78>
		return RES_PARERR;
   17b78:	2304      	movs	r3, #4
   17b7a:	e025      	b.n	17bc8 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   17b7c:	2300      	movs	r3, #0
   17b7e:	61fb      	str	r3, [r7, #28]
   17b80:	e01b      	b.n	17bba <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   17b82:	231b      	movs	r3, #27
   17b84:	18fb      	adds	r3, r7, r3
   17b86:	781b      	ldrb	r3, [r3, #0]
   17b88:	69fa      	ldr	r2, [r7, #28]
   17b8a:	435a      	muls	r2, r3
   17b8c:	687b      	ldr	r3, [r7, #4]
   17b8e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   17b90:	231b      	movs	r3, #27
   17b92:	18fb      	adds	r3, r7, r3
   17b94:	781b      	ldrb	r3, [r3, #0]
   17b96:	69fa      	ldr	r2, [r7, #28]
   17b98:	4353      	muls	r3, r2
   17b9a:	025b      	lsls	r3, r3, #9
   17b9c:	68ba      	ldr	r2, [r7, #8]
   17b9e:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   17ba0:	230f      	movs	r3, #15
   17ba2:	18fb      	adds	r3, r7, r3
   17ba4:	781b      	ldrb	r3, [r3, #0]
   17ba6:	0018      	movs	r0, r3
   17ba8:	4b0b      	ldr	r3, [pc, #44]	; (17bd8 <disk_write+0xd4>)
   17baa:	4798      	blx	r3
   17bac:	1e03      	subs	r3, r0, #0
   17bae:	d001      	beq.n	17bb4 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   17bb0:	2301      	movs	r3, #1
   17bb2:	e009      	b.n	17bc8 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   17bb4:	69fb      	ldr	r3, [r7, #28]
   17bb6:	3301      	adds	r3, #1
   17bb8:	61fb      	str	r3, [r7, #28]
   17bba:	230e      	movs	r3, #14
   17bbc:	18fb      	adds	r3, r7, r3
   17bbe:	781a      	ldrb	r2, [r3, #0]
   17bc0:	69fb      	ldr	r3, [r7, #28]
   17bc2:	429a      	cmp	r2, r3
   17bc4:	d8dd      	bhi.n	17b82 <disk_write+0x7e>
		}
	}

	return RES_OK;
   17bc6:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   17bc8:	0018      	movs	r0, r3
   17bca:	46bd      	mov	sp, r7
   17bcc:	b009      	add	sp, #36	; 0x24
   17bce:	bd90      	pop	{r4, r7, pc}
   17bd0:	000126cd 	.word	0x000126cd
   17bd4:	00012681 	.word	0x00012681
   17bd8:	00012795 	.word	0x00012795

00017bdc <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   17bdc:	b590      	push	{r4, r7, lr}
   17bde:	b085      	sub	sp, #20
   17be0:	af00      	add	r7, sp, #0
   17be2:	603a      	str	r2, [r7, #0]
   17be4:	1dfb      	adds	r3, r7, #7
   17be6:	1c02      	adds	r2, r0, #0
   17be8:	701a      	strb	r2, [r3, #0]
   17bea:	1dbb      	adds	r3, r7, #6
   17bec:	1c0a      	adds	r2, r1, #0
   17bee:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   17bf0:	230f      	movs	r3, #15
   17bf2:	18fb      	adds	r3, r7, r3
   17bf4:	2204      	movs	r2, #4
   17bf6:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   17bf8:	1dbb      	adds	r3, r7, #6
   17bfa:	781b      	ldrb	r3, [r3, #0]
   17bfc:	2b01      	cmp	r3, #1
   17bfe:	d00f      	beq.n	17c20 <disk_ioctl+0x44>
   17c00:	dc02      	bgt.n	17c08 <disk_ioctl+0x2c>
   17c02:	2b00      	cmp	r3, #0
   17c04:	d044      	beq.n	17c90 <disk_ioctl+0xb4>
   17c06:	e054      	b.n	17cb2 <disk_ioctl+0xd6>
   17c08:	2b02      	cmp	r3, #2
   17c0a:	d01a      	beq.n	17c42 <disk_ioctl+0x66>
   17c0c:	2b03      	cmp	r3, #3
   17c0e:	d150      	bne.n	17cb2 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   17c10:	683b      	ldr	r3, [r7, #0]
   17c12:	2201      	movs	r2, #1
   17c14:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   17c16:	230f      	movs	r3, #15
   17c18:	18fb      	adds	r3, r7, r3
   17c1a:	2200      	movs	r2, #0
   17c1c:	701a      	strb	r2, [r3, #0]
		break;
   17c1e:	e04c      	b.n	17cba <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   17c20:	2308      	movs	r3, #8
   17c22:	18fa      	adds	r2, r7, r3
   17c24:	1dfb      	adds	r3, r7, #7
   17c26:	781b      	ldrb	r3, [r3, #0]
   17c28:	0011      	movs	r1, r2
   17c2a:	0018      	movs	r0, r3
   17c2c:	4b26      	ldr	r3, [pc, #152]	; (17cc8 <disk_ioctl+0xec>)
   17c2e:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   17c30:	68bb      	ldr	r3, [r7, #8]
   17c32:	1c5a      	adds	r2, r3, #1
   17c34:	683b      	ldr	r3, [r7, #0]
   17c36:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   17c38:	230f      	movs	r3, #15
   17c3a:	18fb      	adds	r3, r7, r3
   17c3c:	2200      	movs	r2, #0
   17c3e:	701a      	strb	r2, [r3, #0]
	}
	break;
   17c40:	e03b      	b.n	17cba <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   17c42:	230e      	movs	r3, #14
   17c44:	18fc      	adds	r4, r7, r3
   17c46:	1dfb      	adds	r3, r7, #7
   17c48:	781b      	ldrb	r3, [r3, #0]
   17c4a:	0018      	movs	r0, r3
   17c4c:	4b1f      	ldr	r3, [pc, #124]	; (17ccc <disk_ioctl+0xf0>)
   17c4e:	4798      	blx	r3
   17c50:	0003      	movs	r3, r0
   17c52:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   17c54:	230e      	movs	r3, #14
   17c56:	18fb      	adds	r3, r7, r3
   17c58:	781b      	ldrb	r3, [r3, #0]
   17c5a:	2b01      	cmp	r3, #1
   17c5c:	d010      	beq.n	17c80 <disk_ioctl+0xa4>
   17c5e:	230e      	movs	r3, #14
   17c60:	18fb      	adds	r3, r7, r3
   17c62:	781b      	ldrb	r3, [r3, #0]
   17c64:	2b02      	cmp	r3, #2
   17c66:	d00b      	beq.n	17c80 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   17c68:	230e      	movs	r3, #14
   17c6a:	18fb      	adds	r3, r7, r3
   17c6c:	781b      	ldrb	r3, [r3, #0]
   17c6e:	2b04      	cmp	r3, #4
   17c70:	d006      	beq.n	17c80 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   17c72:	230e      	movs	r3, #14
   17c74:	18fb      	adds	r3, r7, r3
   17c76:	781b      	ldrb	r3, [r3, #0]
   17c78:	2b08      	cmp	r3, #8
   17c7a:	d001      	beq.n	17c80 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   17c7c:	2301      	movs	r3, #1
   17c7e:	e01f      	b.n	17cc0 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   17c80:	683b      	ldr	r3, [r7, #0]
   17c82:	2200      	movs	r2, #0
   17c84:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   17c86:	230f      	movs	r3, #15
   17c88:	18fb      	adds	r3, r7, r3
   17c8a:	2200      	movs	r2, #0
   17c8c:	701a      	strb	r2, [r3, #0]
	}
	break;
   17c8e:	e014      	b.n	17cba <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   17c90:	1dfb      	adds	r3, r7, #7
   17c92:	781b      	ldrb	r3, [r3, #0]
   17c94:	0018      	movs	r0, r3
   17c96:	4b0e      	ldr	r3, [pc, #56]	; (17cd0 <disk_ioctl+0xf4>)
   17c98:	4798      	blx	r3
   17c9a:	1e03      	subs	r3, r0, #0
   17c9c:	d104      	bne.n	17ca8 <disk_ioctl+0xcc>
			res = RES_OK;
   17c9e:	230f      	movs	r3, #15
   17ca0:	18fb      	adds	r3, r7, r3
   17ca2:	2200      	movs	r2, #0
   17ca4:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   17ca6:	e008      	b.n	17cba <disk_ioctl+0xde>
			res = RES_NOTRDY;
   17ca8:	230f      	movs	r3, #15
   17caa:	18fb      	adds	r3, r7, r3
   17cac:	2203      	movs	r2, #3
   17cae:	701a      	strb	r2, [r3, #0]
		break;
   17cb0:	e003      	b.n	17cba <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   17cb2:	230f      	movs	r3, #15
   17cb4:	18fb      	adds	r3, r7, r3
   17cb6:	2204      	movs	r2, #4
   17cb8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   17cba:	230f      	movs	r3, #15
   17cbc:	18fb      	adds	r3, r7, r3
   17cbe:	781b      	ldrb	r3, [r3, #0]
}
   17cc0:	0018      	movs	r0, r3
   17cc2:	46bd      	mov	sp, r7
   17cc4:	b005      	add	sp, #20
   17cc6:	bd90      	pop	{r4, r7, pc}
   17cc8:	00012681 	.word	0x00012681
   17ccc:	000126cd 	.word	0x000126cd
   17cd0:	00012641 	.word	0x00012641

00017cd4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   17cd4:	b580      	push	{r7, lr}
   17cd6:	b084      	sub	sp, #16
   17cd8:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   17cda:	1d3a      	adds	r2, r7, #4
   17cdc:	4b12      	ldr	r3, [pc, #72]	; (17d28 <get_fattime+0x54>)
   17cde:	0011      	movs	r1, r2
   17ce0:	0018      	movs	r0, r3
   17ce2:	4b12      	ldr	r3, [pc, #72]	; (17d2c <get_fattime+0x58>)
   17ce4:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   17ce6:	1d3b      	adds	r3, r7, #4
   17ce8:	88db      	ldrh	r3, [r3, #6]
   17cea:	4a11      	ldr	r2, [pc, #68]	; (17d30 <get_fattime+0x5c>)
   17cec:	4694      	mov	ip, r2
   17cee:	4463      	add	r3, ip
   17cf0:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   17cf2:	1d3b      	adds	r3, r7, #4
   17cf4:	795b      	ldrb	r3, [r3, #5]
   17cf6:	055b      	lsls	r3, r3, #21
   17cf8:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   17cfa:	1d3b      	adds	r3, r7, #4
   17cfc:	791b      	ldrb	r3, [r3, #4]
   17cfe:	041b      	lsls	r3, r3, #16
   17d00:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   17d02:	1d3b      	adds	r3, r7, #4
   17d04:	789b      	ldrb	r3, [r3, #2]
   17d06:	02db      	lsls	r3, r3, #11
   17d08:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   17d0a:	1d3b      	adds	r3, r7, #4
   17d0c:	785b      	ldrb	r3, [r3, #1]
   17d0e:	015b      	lsls	r3, r3, #5
   17d10:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   17d12:	1d3a      	adds	r2, r7, #4
   17d14:	7812      	ldrb	r2, [r2, #0]
   17d16:	0852      	lsrs	r2, r2, #1
   17d18:	b2d2      	uxtb	r2, r2
   17d1a:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   17d1c:	60fb      	str	r3, [r7, #12]

	return ul_time;
   17d1e:	68fb      	ldr	r3, [r7, #12]
}
   17d20:	0018      	movs	r0, r3
   17d22:	46bd      	mov	sp, r7
   17d24:	b004      	add	sp, #16
   17d26:	bd80      	pop	{r7, pc}
   17d28:	2000567c 	.word	0x2000567c
   17d2c:	000134ad 	.word	0x000134ad
   17d30:	fffff844 	.word	0xfffff844

00017d34 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   17d34:	b580      	push	{r7, lr}
   17d36:	b086      	sub	sp, #24
   17d38:	af00      	add	r7, sp, #0
   17d3a:	60f8      	str	r0, [r7, #12]
   17d3c:	60b9      	str	r1, [r7, #8]
   17d3e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   17d40:	68fb      	ldr	r3, [r7, #12]
   17d42:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   17d44:	68bb      	ldr	r3, [r7, #8]
   17d46:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   17d48:	e007      	b.n	17d5a <mem_cpy+0x26>
		*d++ = *s++;
   17d4a:	697b      	ldr	r3, [r7, #20]
   17d4c:	1c5a      	adds	r2, r3, #1
   17d4e:	617a      	str	r2, [r7, #20]
   17d50:	693a      	ldr	r2, [r7, #16]
   17d52:	1c51      	adds	r1, r2, #1
   17d54:	6139      	str	r1, [r7, #16]
   17d56:	7812      	ldrb	r2, [r2, #0]
   17d58:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   17d5a:	687b      	ldr	r3, [r7, #4]
   17d5c:	1e5a      	subs	r2, r3, #1
   17d5e:	607a      	str	r2, [r7, #4]
   17d60:	2b00      	cmp	r3, #0
   17d62:	d1f2      	bne.n	17d4a <mem_cpy+0x16>
}
   17d64:	46c0      	nop			; (mov r8, r8)
   17d66:	46bd      	mov	sp, r7
   17d68:	b006      	add	sp, #24
   17d6a:	bd80      	pop	{r7, pc}

00017d6c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   17d6c:	b580      	push	{r7, lr}
   17d6e:	b086      	sub	sp, #24
   17d70:	af00      	add	r7, sp, #0
   17d72:	60f8      	str	r0, [r7, #12]
   17d74:	60b9      	str	r1, [r7, #8]
   17d76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   17d78:	68fb      	ldr	r3, [r7, #12]
   17d7a:	617b      	str	r3, [r7, #20]

	while (cnt--)
   17d7c:	e005      	b.n	17d8a <mem_set+0x1e>
		*d++ = (BYTE)val;
   17d7e:	697b      	ldr	r3, [r7, #20]
   17d80:	1c5a      	adds	r2, r3, #1
   17d82:	617a      	str	r2, [r7, #20]
   17d84:	68ba      	ldr	r2, [r7, #8]
   17d86:	b2d2      	uxtb	r2, r2
   17d88:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   17d8a:	687b      	ldr	r3, [r7, #4]
   17d8c:	1e5a      	subs	r2, r3, #1
   17d8e:	607a      	str	r2, [r7, #4]
   17d90:	2b00      	cmp	r3, #0
   17d92:	d1f4      	bne.n	17d7e <mem_set+0x12>
}
   17d94:	46c0      	nop			; (mov r8, r8)
   17d96:	46bd      	mov	sp, r7
   17d98:	b006      	add	sp, #24
   17d9a:	bd80      	pop	{r7, pc}

00017d9c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   17d9c:	b580      	push	{r7, lr}
   17d9e:	b088      	sub	sp, #32
   17da0:	af00      	add	r7, sp, #0
   17da2:	60f8      	str	r0, [r7, #12]
   17da4:	60b9      	str	r1, [r7, #8]
   17da6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   17da8:	68fb      	ldr	r3, [r7, #12]
   17daa:	61fb      	str	r3, [r7, #28]
   17dac:	68bb      	ldr	r3, [r7, #8]
   17dae:	61bb      	str	r3, [r7, #24]
	int r = 0;
   17db0:	2300      	movs	r3, #0
   17db2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   17db4:	46c0      	nop			; (mov r8, r8)
   17db6:	687b      	ldr	r3, [r7, #4]
   17db8:	1e5a      	subs	r2, r3, #1
   17dba:	607a      	str	r2, [r7, #4]
   17dbc:	2b00      	cmp	r3, #0
   17dbe:	d00d      	beq.n	17ddc <mem_cmp+0x40>
   17dc0:	69fb      	ldr	r3, [r7, #28]
   17dc2:	1c5a      	adds	r2, r3, #1
   17dc4:	61fa      	str	r2, [r7, #28]
   17dc6:	781b      	ldrb	r3, [r3, #0]
   17dc8:	0019      	movs	r1, r3
   17dca:	69bb      	ldr	r3, [r7, #24]
   17dcc:	1c5a      	adds	r2, r3, #1
   17dce:	61ba      	str	r2, [r7, #24]
   17dd0:	781b      	ldrb	r3, [r3, #0]
   17dd2:	1acb      	subs	r3, r1, r3
   17dd4:	617b      	str	r3, [r7, #20]
   17dd6:	697b      	ldr	r3, [r7, #20]
   17dd8:	2b00      	cmp	r3, #0
   17dda:	d0ec      	beq.n	17db6 <mem_cmp+0x1a>
	return r;
   17ddc:	697b      	ldr	r3, [r7, #20]
}
   17dde:	0018      	movs	r0, r3
   17de0:	46bd      	mov	sp, r7
   17de2:	b008      	add	sp, #32
   17de4:	bd80      	pop	{r7, pc}

00017de6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   17de6:	b580      	push	{r7, lr}
   17de8:	b082      	sub	sp, #8
   17dea:	af00      	add	r7, sp, #0
   17dec:	6078      	str	r0, [r7, #4]
   17dee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   17df0:	e002      	b.n	17df8 <chk_chr+0x12>
   17df2:	687b      	ldr	r3, [r7, #4]
   17df4:	3301      	adds	r3, #1
   17df6:	607b      	str	r3, [r7, #4]
   17df8:	687b      	ldr	r3, [r7, #4]
   17dfa:	781b      	ldrb	r3, [r3, #0]
   17dfc:	2b00      	cmp	r3, #0
   17dfe:	d005      	beq.n	17e0c <chk_chr+0x26>
   17e00:	687b      	ldr	r3, [r7, #4]
   17e02:	781b      	ldrb	r3, [r3, #0]
   17e04:	001a      	movs	r2, r3
   17e06:	683b      	ldr	r3, [r7, #0]
   17e08:	429a      	cmp	r2, r3
   17e0a:	d1f2      	bne.n	17df2 <chk_chr+0xc>
	return *str;
   17e0c:	687b      	ldr	r3, [r7, #4]
   17e0e:	781b      	ldrb	r3, [r3, #0]
}
   17e10:	0018      	movs	r0, r3
   17e12:	46bd      	mov	sp, r7
   17e14:	b002      	add	sp, #8
   17e16:	bd80      	pop	{r7, pc}

00017e18 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   17e18:	b590      	push	{r4, r7, lr}
   17e1a:	b085      	sub	sp, #20
   17e1c:	af00      	add	r7, sp, #0
   17e1e:	6078      	str	r0, [r7, #4]
   17e20:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   17e22:	687b      	ldr	r3, [r7, #4]
   17e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17e26:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   17e28:	68fa      	ldr	r2, [r7, #12]
   17e2a:	683b      	ldr	r3, [r7, #0]
   17e2c:	429a      	cmp	r2, r3
   17e2e:	d04e      	beq.n	17ece <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   17e30:	687b      	ldr	r3, [r7, #4]
   17e32:	791b      	ldrb	r3, [r3, #4]
   17e34:	2b00      	cmp	r3, #0
   17e36:	d037      	beq.n	17ea8 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   17e38:	687b      	ldr	r3, [r7, #4]
   17e3a:	7858      	ldrb	r0, [r3, #1]
   17e3c:	687b      	ldr	r3, [r7, #4]
   17e3e:	3330      	adds	r3, #48	; 0x30
   17e40:	0019      	movs	r1, r3
   17e42:	68fa      	ldr	r2, [r7, #12]
   17e44:	2301      	movs	r3, #1
   17e46:	4c24      	ldr	r4, [pc, #144]	; (17ed8 <move_window+0xc0>)
   17e48:	47a0      	blx	r4
   17e4a:	1e03      	subs	r3, r0, #0
   17e4c:	d001      	beq.n	17e52 <move_window+0x3a>
				return FR_DISK_ERR;
   17e4e:	2301      	movs	r3, #1
   17e50:	e03e      	b.n	17ed0 <move_window+0xb8>
			fs->wflag = 0;
   17e52:	687b      	ldr	r3, [r7, #4]
   17e54:	2200      	movs	r2, #0
   17e56:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   17e58:	687b      	ldr	r3, [r7, #4]
   17e5a:	6a1a      	ldr	r2, [r3, #32]
   17e5c:	687b      	ldr	r3, [r7, #4]
   17e5e:	69db      	ldr	r3, [r3, #28]
   17e60:	18d2      	adds	r2, r2, r3
   17e62:	68fb      	ldr	r3, [r7, #12]
   17e64:	429a      	cmp	r2, r3
   17e66:	d91f      	bls.n	17ea8 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   17e68:	230b      	movs	r3, #11
   17e6a:	18fb      	adds	r3, r7, r3
   17e6c:	687a      	ldr	r2, [r7, #4]
   17e6e:	78d2      	ldrb	r2, [r2, #3]
   17e70:	701a      	strb	r2, [r3, #0]
   17e72:	e014      	b.n	17e9e <move_window+0x86>
					wsect += fs->fsize;
   17e74:	687b      	ldr	r3, [r7, #4]
   17e76:	69db      	ldr	r3, [r3, #28]
   17e78:	68fa      	ldr	r2, [r7, #12]
   17e7a:	18d3      	adds	r3, r2, r3
   17e7c:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   17e7e:	687b      	ldr	r3, [r7, #4]
   17e80:	7858      	ldrb	r0, [r3, #1]
   17e82:	687b      	ldr	r3, [r7, #4]
   17e84:	3330      	adds	r3, #48	; 0x30
   17e86:	0019      	movs	r1, r3
   17e88:	68fa      	ldr	r2, [r7, #12]
   17e8a:	2301      	movs	r3, #1
   17e8c:	4c12      	ldr	r4, [pc, #72]	; (17ed8 <move_window+0xc0>)
   17e8e:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   17e90:	230b      	movs	r3, #11
   17e92:	18fb      	adds	r3, r7, r3
   17e94:	781a      	ldrb	r2, [r3, #0]
   17e96:	230b      	movs	r3, #11
   17e98:	18fb      	adds	r3, r7, r3
   17e9a:	3a01      	subs	r2, #1
   17e9c:	701a      	strb	r2, [r3, #0]
   17e9e:	230b      	movs	r3, #11
   17ea0:	18fb      	adds	r3, r7, r3
   17ea2:	781b      	ldrb	r3, [r3, #0]
   17ea4:	2b01      	cmp	r3, #1
   17ea6:	d8e5      	bhi.n	17e74 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   17ea8:	683b      	ldr	r3, [r7, #0]
   17eaa:	2b00      	cmp	r3, #0
   17eac:	d00f      	beq.n	17ece <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   17eae:	687b      	ldr	r3, [r7, #4]
   17eb0:	7858      	ldrb	r0, [r3, #1]
   17eb2:	687b      	ldr	r3, [r7, #4]
   17eb4:	3330      	adds	r3, #48	; 0x30
   17eb6:	0019      	movs	r1, r3
   17eb8:	683a      	ldr	r2, [r7, #0]
   17eba:	2301      	movs	r3, #1
   17ebc:	4c07      	ldr	r4, [pc, #28]	; (17edc <move_window+0xc4>)
   17ebe:	47a0      	blx	r4
   17ec0:	1e03      	subs	r3, r0, #0
   17ec2:	d001      	beq.n	17ec8 <move_window+0xb0>
				return FR_DISK_ERR;
   17ec4:	2301      	movs	r3, #1
   17ec6:	e003      	b.n	17ed0 <move_window+0xb8>
			fs->winsect = sector;
   17ec8:	687b      	ldr	r3, [r7, #4]
   17eca:	683a      	ldr	r2, [r7, #0]
   17ecc:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   17ece:	2300      	movs	r3, #0
}
   17ed0:	0018      	movs	r0, r3
   17ed2:	46bd      	mov	sp, r7
   17ed4:	b005      	add	sp, #20
   17ed6:	bd90      	pop	{r4, r7, pc}
   17ed8:	00017b05 	.word	0x00017b05
   17edc:	00017a2d 	.word	0x00017a2d

00017ee0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   17ee0:	b590      	push	{r4, r7, lr}
   17ee2:	b085      	sub	sp, #20
   17ee4:	af00      	add	r7, sp, #0
   17ee6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   17ee8:	230f      	movs	r3, #15
   17eea:	18fc      	adds	r4, r7, r3
   17eec:	687b      	ldr	r3, [r7, #4]
   17eee:	2100      	movs	r1, #0
   17ef0:	0018      	movs	r0, r3
   17ef2:	4b52      	ldr	r3, [pc, #328]	; (1803c <sync+0x15c>)
   17ef4:	4798      	blx	r3
   17ef6:	0003      	movs	r3, r0
   17ef8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   17efa:	230f      	movs	r3, #15
   17efc:	18fb      	adds	r3, r7, r3
   17efe:	781b      	ldrb	r3, [r3, #0]
   17f00:	2b00      	cmp	r3, #0
   17f02:	d000      	beq.n	17f06 <sync+0x26>
   17f04:	e093      	b.n	1802e <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   17f06:	687b      	ldr	r3, [r7, #4]
   17f08:	781b      	ldrb	r3, [r3, #0]
   17f0a:	2b03      	cmp	r3, #3
   17f0c:	d000      	beq.n	17f10 <sync+0x30>
   17f0e:	e081      	b.n	18014 <sync+0x134>
   17f10:	687b      	ldr	r3, [r7, #4]
   17f12:	795b      	ldrb	r3, [r3, #5]
   17f14:	2b00      	cmp	r3, #0
   17f16:	d07d      	beq.n	18014 <sync+0x134>
			fs->winsect = 0;
   17f18:	687b      	ldr	r3, [r7, #4]
   17f1a:	2200      	movs	r2, #0
   17f1c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   17f1e:	687b      	ldr	r3, [r7, #4]
   17f20:	3330      	adds	r3, #48	; 0x30
   17f22:	0018      	movs	r0, r3
   17f24:	2380      	movs	r3, #128	; 0x80
   17f26:	009b      	lsls	r3, r3, #2
   17f28:	001a      	movs	r2, r3
   17f2a:	2100      	movs	r1, #0
   17f2c:	4b44      	ldr	r3, [pc, #272]	; (18040 <sync+0x160>)
   17f2e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   17f30:	687b      	ldr	r3, [r7, #4]
   17f32:	4a44      	ldr	r2, [pc, #272]	; (18044 <sync+0x164>)
   17f34:	2155      	movs	r1, #85	; 0x55
   17f36:	5499      	strb	r1, [r3, r2]
   17f38:	687b      	ldr	r3, [r7, #4]
   17f3a:	4a43      	ldr	r2, [pc, #268]	; (18048 <sync+0x168>)
   17f3c:	21aa      	movs	r1, #170	; 0xaa
   17f3e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   17f40:	687b      	ldr	r3, [r7, #4]
   17f42:	2230      	movs	r2, #48	; 0x30
   17f44:	2152      	movs	r1, #82	; 0x52
   17f46:	5499      	strb	r1, [r3, r2]
   17f48:	687b      	ldr	r3, [r7, #4]
   17f4a:	2231      	movs	r2, #49	; 0x31
   17f4c:	2152      	movs	r1, #82	; 0x52
   17f4e:	5499      	strb	r1, [r3, r2]
   17f50:	687b      	ldr	r3, [r7, #4]
   17f52:	2232      	movs	r2, #50	; 0x32
   17f54:	2161      	movs	r1, #97	; 0x61
   17f56:	5499      	strb	r1, [r3, r2]
   17f58:	687b      	ldr	r3, [r7, #4]
   17f5a:	2233      	movs	r2, #51	; 0x33
   17f5c:	2141      	movs	r1, #65	; 0x41
   17f5e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   17f60:	687a      	ldr	r2, [r7, #4]
   17f62:	2385      	movs	r3, #133	; 0x85
   17f64:	009b      	lsls	r3, r3, #2
   17f66:	2172      	movs	r1, #114	; 0x72
   17f68:	54d1      	strb	r1, [r2, r3]
   17f6a:	687b      	ldr	r3, [r7, #4]
   17f6c:	4a37      	ldr	r2, [pc, #220]	; (1804c <sync+0x16c>)
   17f6e:	2172      	movs	r1, #114	; 0x72
   17f70:	5499      	strb	r1, [r3, r2]
   17f72:	687b      	ldr	r3, [r7, #4]
   17f74:	4a36      	ldr	r2, [pc, #216]	; (18050 <sync+0x170>)
   17f76:	2141      	movs	r1, #65	; 0x41
   17f78:	5499      	strb	r1, [r3, r2]
   17f7a:	687b      	ldr	r3, [r7, #4]
   17f7c:	4a35      	ldr	r2, [pc, #212]	; (18054 <sync+0x174>)
   17f7e:	2161      	movs	r1, #97	; 0x61
   17f80:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   17f82:	687b      	ldr	r3, [r7, #4]
   17f84:	691b      	ldr	r3, [r3, #16]
   17f86:	b2d9      	uxtb	r1, r3
   17f88:	687a      	ldr	r2, [r7, #4]
   17f8a:	2386      	movs	r3, #134	; 0x86
   17f8c:	009b      	lsls	r3, r3, #2
   17f8e:	54d1      	strb	r1, [r2, r3]
   17f90:	687b      	ldr	r3, [r7, #4]
   17f92:	691b      	ldr	r3, [r3, #16]
   17f94:	b29b      	uxth	r3, r3
   17f96:	0a1b      	lsrs	r3, r3, #8
   17f98:	b29b      	uxth	r3, r3
   17f9a:	b2d9      	uxtb	r1, r3
   17f9c:	687b      	ldr	r3, [r7, #4]
   17f9e:	4a2e      	ldr	r2, [pc, #184]	; (18058 <sync+0x178>)
   17fa0:	5499      	strb	r1, [r3, r2]
   17fa2:	687b      	ldr	r3, [r7, #4]
   17fa4:	691b      	ldr	r3, [r3, #16]
   17fa6:	0c1b      	lsrs	r3, r3, #16
   17fa8:	b2d9      	uxtb	r1, r3
   17faa:	687b      	ldr	r3, [r7, #4]
   17fac:	4a2b      	ldr	r2, [pc, #172]	; (1805c <sync+0x17c>)
   17fae:	5499      	strb	r1, [r3, r2]
   17fb0:	687b      	ldr	r3, [r7, #4]
   17fb2:	691b      	ldr	r3, [r3, #16]
   17fb4:	0e1b      	lsrs	r3, r3, #24
   17fb6:	b2d9      	uxtb	r1, r3
   17fb8:	687b      	ldr	r3, [r7, #4]
   17fba:	4a29      	ldr	r2, [pc, #164]	; (18060 <sync+0x180>)
   17fbc:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   17fbe:	687b      	ldr	r3, [r7, #4]
   17fc0:	68db      	ldr	r3, [r3, #12]
   17fc2:	b2d9      	uxtb	r1, r3
   17fc4:	687a      	ldr	r2, [r7, #4]
   17fc6:	2387      	movs	r3, #135	; 0x87
   17fc8:	009b      	lsls	r3, r3, #2
   17fca:	54d1      	strb	r1, [r2, r3]
   17fcc:	687b      	ldr	r3, [r7, #4]
   17fce:	68db      	ldr	r3, [r3, #12]
   17fd0:	b29b      	uxth	r3, r3
   17fd2:	0a1b      	lsrs	r3, r3, #8
   17fd4:	b29b      	uxth	r3, r3
   17fd6:	b2d9      	uxtb	r1, r3
   17fd8:	687b      	ldr	r3, [r7, #4]
   17fda:	4a22      	ldr	r2, [pc, #136]	; (18064 <sync+0x184>)
   17fdc:	5499      	strb	r1, [r3, r2]
   17fde:	687b      	ldr	r3, [r7, #4]
   17fe0:	68db      	ldr	r3, [r3, #12]
   17fe2:	0c1b      	lsrs	r3, r3, #16
   17fe4:	b2d9      	uxtb	r1, r3
   17fe6:	687b      	ldr	r3, [r7, #4]
   17fe8:	4a1f      	ldr	r2, [pc, #124]	; (18068 <sync+0x188>)
   17fea:	5499      	strb	r1, [r3, r2]
   17fec:	687b      	ldr	r3, [r7, #4]
   17fee:	68db      	ldr	r3, [r3, #12]
   17ff0:	0e1b      	lsrs	r3, r3, #24
   17ff2:	b2d9      	uxtb	r1, r3
   17ff4:	687b      	ldr	r3, [r7, #4]
   17ff6:	4a1d      	ldr	r2, [pc, #116]	; (1806c <sync+0x18c>)
   17ff8:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   17ffa:	687b      	ldr	r3, [r7, #4]
   17ffc:	7858      	ldrb	r0, [r3, #1]
   17ffe:	687b      	ldr	r3, [r7, #4]
   18000:	3330      	adds	r3, #48	; 0x30
   18002:	0019      	movs	r1, r3
   18004:	687b      	ldr	r3, [r7, #4]
   18006:	695a      	ldr	r2, [r3, #20]
   18008:	2301      	movs	r3, #1
   1800a:	4c19      	ldr	r4, [pc, #100]	; (18070 <sync+0x190>)
   1800c:	47a0      	blx	r4
			fs->fsi_flag = 0;
   1800e:	687b      	ldr	r3, [r7, #4]
   18010:	2200      	movs	r2, #0
   18012:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   18014:	687b      	ldr	r3, [r7, #4]
   18016:	785b      	ldrb	r3, [r3, #1]
   18018:	2200      	movs	r2, #0
   1801a:	2100      	movs	r1, #0
   1801c:	0018      	movs	r0, r3
   1801e:	4b15      	ldr	r3, [pc, #84]	; (18074 <sync+0x194>)
   18020:	4798      	blx	r3
   18022:	1e03      	subs	r3, r0, #0
   18024:	d003      	beq.n	1802e <sync+0x14e>
			res = FR_DISK_ERR;
   18026:	230f      	movs	r3, #15
   18028:	18fb      	adds	r3, r7, r3
   1802a:	2201      	movs	r2, #1
   1802c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   1802e:	230f      	movs	r3, #15
   18030:	18fb      	adds	r3, r7, r3
   18032:	781b      	ldrb	r3, [r3, #0]
}
   18034:	0018      	movs	r0, r3
   18036:	46bd      	mov	sp, r7
   18038:	b005      	add	sp, #20
   1803a:	bd90      	pop	{r4, r7, pc}
   1803c:	00017e19 	.word	0x00017e19
   18040:	00017d6d 	.word	0x00017d6d
   18044:	0000022e 	.word	0x0000022e
   18048:	0000022f 	.word	0x0000022f
   1804c:	00000215 	.word	0x00000215
   18050:	00000216 	.word	0x00000216
   18054:	00000217 	.word	0x00000217
   18058:	00000219 	.word	0x00000219
   1805c:	0000021a 	.word	0x0000021a
   18060:	0000021b 	.word	0x0000021b
   18064:	0000021d 	.word	0x0000021d
   18068:	0000021e 	.word	0x0000021e
   1806c:	0000021f 	.word	0x0000021f
   18070:	00017b05 	.word	0x00017b05
   18074:	00017bdd 	.word	0x00017bdd

00018078 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   18078:	b580      	push	{r7, lr}
   1807a:	b082      	sub	sp, #8
   1807c:	af00      	add	r7, sp, #0
   1807e:	6078      	str	r0, [r7, #4]
   18080:	6039      	str	r1, [r7, #0]
	clst -= 2;
   18082:	683b      	ldr	r3, [r7, #0]
   18084:	3b02      	subs	r3, #2
   18086:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   18088:	687b      	ldr	r3, [r7, #4]
   1808a:	699b      	ldr	r3, [r3, #24]
   1808c:	1e9a      	subs	r2, r3, #2
   1808e:	683b      	ldr	r3, [r7, #0]
   18090:	429a      	cmp	r2, r3
   18092:	d801      	bhi.n	18098 <clust2sect+0x20>
   18094:	2300      	movs	r3, #0
   18096:	e007      	b.n	180a8 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   18098:	687b      	ldr	r3, [r7, #4]
   1809a:	789b      	ldrb	r3, [r3, #2]
   1809c:	001a      	movs	r2, r3
   1809e:	683b      	ldr	r3, [r7, #0]
   180a0:	435a      	muls	r2, r3
   180a2:	687b      	ldr	r3, [r7, #4]
   180a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   180a6:	18d3      	adds	r3, r2, r3
}
   180a8:	0018      	movs	r0, r3
   180aa:	46bd      	mov	sp, r7
   180ac:	b002      	add	sp, #8
   180ae:	bd80      	pop	{r7, pc}

000180b0 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   180b0:	b580      	push	{r7, lr}
   180b2:	b086      	sub	sp, #24
   180b4:	af00      	add	r7, sp, #0
   180b6:	6078      	str	r0, [r7, #4]
   180b8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   180ba:	683b      	ldr	r3, [r7, #0]
   180bc:	2b01      	cmp	r3, #1
   180be:	d904      	bls.n	180ca <get_fat+0x1a>
   180c0:	687b      	ldr	r3, [r7, #4]
   180c2:	699a      	ldr	r2, [r3, #24]
   180c4:	683b      	ldr	r3, [r7, #0]
   180c6:	429a      	cmp	r2, r3
   180c8:	d801      	bhi.n	180ce <get_fat+0x1e>
		return 1;
   180ca:	2301      	movs	r3, #1
   180cc:	e09f      	b.n	1820e <get_fat+0x15e>

	switch (fs->fs_type) {
   180ce:	687b      	ldr	r3, [r7, #4]
   180d0:	781b      	ldrb	r3, [r3, #0]
   180d2:	2b02      	cmp	r3, #2
   180d4:	d048      	beq.n	18168 <get_fat+0xb8>
   180d6:	2b03      	cmp	r3, #3
   180d8:	d067      	beq.n	181aa <get_fat+0xfa>
   180da:	2b01      	cmp	r3, #1
   180dc:	d000      	beq.n	180e0 <get_fat+0x30>
   180de:	e094      	b.n	1820a <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   180e0:	683b      	ldr	r3, [r7, #0]
   180e2:	617b      	str	r3, [r7, #20]
   180e4:	697b      	ldr	r3, [r7, #20]
   180e6:	085b      	lsrs	r3, r3, #1
   180e8:	697a      	ldr	r2, [r7, #20]
   180ea:	18d3      	adds	r3, r2, r3
   180ec:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   180ee:	687b      	ldr	r3, [r7, #4]
   180f0:	6a1a      	ldr	r2, [r3, #32]
   180f2:	697b      	ldr	r3, [r7, #20]
   180f4:	0a5b      	lsrs	r3, r3, #9
   180f6:	18d2      	adds	r2, r2, r3
   180f8:	687b      	ldr	r3, [r7, #4]
   180fa:	0011      	movs	r1, r2
   180fc:	0018      	movs	r0, r3
   180fe:	4b46      	ldr	r3, [pc, #280]	; (18218 <get_fat+0x168>)
   18100:	4798      	blx	r3
   18102:	1e03      	subs	r3, r0, #0
   18104:	d000      	beq.n	18108 <get_fat+0x58>
   18106:	e079      	b.n	181fc <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   18108:	697b      	ldr	r3, [r7, #20]
   1810a:	05db      	lsls	r3, r3, #23
   1810c:	0ddb      	lsrs	r3, r3, #23
   1810e:	687a      	ldr	r2, [r7, #4]
   18110:	2130      	movs	r1, #48	; 0x30
   18112:	18d3      	adds	r3, r2, r3
   18114:	185b      	adds	r3, r3, r1
   18116:	781b      	ldrb	r3, [r3, #0]
   18118:	613b      	str	r3, [r7, #16]
   1811a:	697b      	ldr	r3, [r7, #20]
   1811c:	3301      	adds	r3, #1
   1811e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   18120:	687b      	ldr	r3, [r7, #4]
   18122:	6a1a      	ldr	r2, [r3, #32]
   18124:	697b      	ldr	r3, [r7, #20]
   18126:	0a5b      	lsrs	r3, r3, #9
   18128:	18d2      	adds	r2, r2, r3
   1812a:	687b      	ldr	r3, [r7, #4]
   1812c:	0011      	movs	r1, r2
   1812e:	0018      	movs	r0, r3
   18130:	4b39      	ldr	r3, [pc, #228]	; (18218 <get_fat+0x168>)
   18132:	4798      	blx	r3
   18134:	1e03      	subs	r3, r0, #0
   18136:	d163      	bne.n	18200 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   18138:	697b      	ldr	r3, [r7, #20]
   1813a:	05db      	lsls	r3, r3, #23
   1813c:	0ddb      	lsrs	r3, r3, #23
   1813e:	687a      	ldr	r2, [r7, #4]
   18140:	2130      	movs	r1, #48	; 0x30
   18142:	18d3      	adds	r3, r2, r3
   18144:	185b      	adds	r3, r3, r1
   18146:	781b      	ldrb	r3, [r3, #0]
   18148:	021b      	lsls	r3, r3, #8
   1814a:	001a      	movs	r2, r3
   1814c:	693b      	ldr	r3, [r7, #16]
   1814e:	4313      	orrs	r3, r2
   18150:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   18152:	683b      	ldr	r3, [r7, #0]
   18154:	2201      	movs	r2, #1
   18156:	4013      	ands	r3, r2
   18158:	d002      	beq.n	18160 <get_fat+0xb0>
   1815a:	693b      	ldr	r3, [r7, #16]
   1815c:	091b      	lsrs	r3, r3, #4
   1815e:	e056      	b.n	1820e <get_fat+0x15e>
   18160:	693b      	ldr	r3, [r7, #16]
   18162:	051b      	lsls	r3, r3, #20
   18164:	0d1b      	lsrs	r3, r3, #20
   18166:	e052      	b.n	1820e <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   18168:	687b      	ldr	r3, [r7, #4]
   1816a:	6a1a      	ldr	r2, [r3, #32]
   1816c:	683b      	ldr	r3, [r7, #0]
   1816e:	0a1b      	lsrs	r3, r3, #8
   18170:	18d2      	adds	r2, r2, r3
   18172:	687b      	ldr	r3, [r7, #4]
   18174:	0011      	movs	r1, r2
   18176:	0018      	movs	r0, r3
   18178:	4b27      	ldr	r3, [pc, #156]	; (18218 <get_fat+0x168>)
   1817a:	4798      	blx	r3
   1817c:	1e03      	subs	r3, r0, #0
   1817e:	d141      	bne.n	18204 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   18180:	683b      	ldr	r3, [r7, #0]
   18182:	005a      	lsls	r2, r3, #1
   18184:	23ff      	movs	r3, #255	; 0xff
   18186:	005b      	lsls	r3, r3, #1
   18188:	4013      	ands	r3, r2
   1818a:	3330      	adds	r3, #48	; 0x30
   1818c:	687a      	ldr	r2, [r7, #4]
   1818e:	18d3      	adds	r3, r2, r3
   18190:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   18192:	68fb      	ldr	r3, [r7, #12]
   18194:	3301      	adds	r3, #1
   18196:	781b      	ldrb	r3, [r3, #0]
   18198:	021b      	lsls	r3, r3, #8
   1819a:	b21a      	sxth	r2, r3
   1819c:	68fb      	ldr	r3, [r7, #12]
   1819e:	781b      	ldrb	r3, [r3, #0]
   181a0:	b21b      	sxth	r3, r3
   181a2:	4313      	orrs	r3, r2
   181a4:	b21b      	sxth	r3, r3
   181a6:	b29b      	uxth	r3, r3
   181a8:	e031      	b.n	1820e <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   181aa:	687b      	ldr	r3, [r7, #4]
   181ac:	6a1a      	ldr	r2, [r3, #32]
   181ae:	683b      	ldr	r3, [r7, #0]
   181b0:	09db      	lsrs	r3, r3, #7
   181b2:	18d2      	adds	r2, r2, r3
   181b4:	687b      	ldr	r3, [r7, #4]
   181b6:	0011      	movs	r1, r2
   181b8:	0018      	movs	r0, r3
   181ba:	4b17      	ldr	r3, [pc, #92]	; (18218 <get_fat+0x168>)
   181bc:	4798      	blx	r3
   181be:	1e03      	subs	r3, r0, #0
   181c0:	d122      	bne.n	18208 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   181c2:	683b      	ldr	r3, [r7, #0]
   181c4:	009a      	lsls	r2, r3, #2
   181c6:	23fe      	movs	r3, #254	; 0xfe
   181c8:	005b      	lsls	r3, r3, #1
   181ca:	4013      	ands	r3, r2
   181cc:	3330      	adds	r3, #48	; 0x30
   181ce:	687a      	ldr	r2, [r7, #4]
   181d0:	18d3      	adds	r3, r2, r3
   181d2:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   181d4:	68fb      	ldr	r3, [r7, #12]
   181d6:	3303      	adds	r3, #3
   181d8:	781b      	ldrb	r3, [r3, #0]
   181da:	061a      	lsls	r2, r3, #24
   181dc:	68fb      	ldr	r3, [r7, #12]
   181de:	3302      	adds	r3, #2
   181e0:	781b      	ldrb	r3, [r3, #0]
   181e2:	041b      	lsls	r3, r3, #16
   181e4:	4313      	orrs	r3, r2
   181e6:	68fa      	ldr	r2, [r7, #12]
   181e8:	3201      	adds	r2, #1
   181ea:	7812      	ldrb	r2, [r2, #0]
   181ec:	0212      	lsls	r2, r2, #8
   181ee:	4313      	orrs	r3, r2
   181f0:	68fa      	ldr	r2, [r7, #12]
   181f2:	7812      	ldrb	r2, [r2, #0]
   181f4:	4313      	orrs	r3, r2
   181f6:	011b      	lsls	r3, r3, #4
   181f8:	091b      	lsrs	r3, r3, #4
   181fa:	e008      	b.n	1820e <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   181fc:	46c0      	nop			; (mov r8, r8)
   181fe:	e004      	b.n	1820a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   18200:	46c0      	nop			; (mov r8, r8)
   18202:	e002      	b.n	1820a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   18204:	46c0      	nop			; (mov r8, r8)
   18206:	e000      	b.n	1820a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   18208:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   1820a:	2301      	movs	r3, #1
   1820c:	425b      	negs	r3, r3
}
   1820e:	0018      	movs	r0, r3
   18210:	46bd      	mov	sp, r7
   18212:	b006      	add	sp, #24
   18214:	bd80      	pop	{r7, pc}
   18216:	46c0      	nop			; (mov r8, r8)
   18218:	00017e19 	.word	0x00017e19

0001821c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   1821c:	b590      	push	{r4, r7, lr}
   1821e:	b089      	sub	sp, #36	; 0x24
   18220:	af00      	add	r7, sp, #0
   18222:	60f8      	str	r0, [r7, #12]
   18224:	60b9      	str	r1, [r7, #8]
   18226:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   18228:	68bb      	ldr	r3, [r7, #8]
   1822a:	2b01      	cmp	r3, #1
   1822c:	d904      	bls.n	18238 <put_fat+0x1c>
   1822e:	68fb      	ldr	r3, [r7, #12]
   18230:	699a      	ldr	r2, [r3, #24]
   18232:	68bb      	ldr	r3, [r7, #8]
   18234:	429a      	cmp	r2, r3
   18236:	d804      	bhi.n	18242 <put_fat+0x26>
		res = FR_INT_ERR;
   18238:	231f      	movs	r3, #31
   1823a:	18fb      	adds	r3, r7, r3
   1823c:	2202      	movs	r2, #2
   1823e:	701a      	strb	r2, [r3, #0]
   18240:	e100      	b.n	18444 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   18242:	68fb      	ldr	r3, [r7, #12]
   18244:	781b      	ldrb	r3, [r3, #0]
   18246:	2b02      	cmp	r3, #2
   18248:	d100      	bne.n	1824c <put_fat+0x30>
   1824a:	e078      	b.n	1833e <put_fat+0x122>
   1824c:	2b03      	cmp	r3, #3
   1824e:	d100      	bne.n	18252 <put_fat+0x36>
   18250:	e09e      	b.n	18390 <put_fat+0x174>
   18252:	2b01      	cmp	r3, #1
   18254:	d000      	beq.n	18258 <put_fat+0x3c>
   18256:	e0e6      	b.n	18426 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   18258:	68bb      	ldr	r3, [r7, #8]
   1825a:	61bb      	str	r3, [r7, #24]
   1825c:	69bb      	ldr	r3, [r7, #24]
   1825e:	085b      	lsrs	r3, r3, #1
   18260:	69ba      	ldr	r2, [r7, #24]
   18262:	18d3      	adds	r3, r2, r3
   18264:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   18266:	68fb      	ldr	r3, [r7, #12]
   18268:	6a1a      	ldr	r2, [r3, #32]
   1826a:	69bb      	ldr	r3, [r7, #24]
   1826c:	0a5b      	lsrs	r3, r3, #9
   1826e:	18d2      	adds	r2, r2, r3
   18270:	231f      	movs	r3, #31
   18272:	18fc      	adds	r4, r7, r3
   18274:	68fb      	ldr	r3, [r7, #12]
   18276:	0011      	movs	r1, r2
   18278:	0018      	movs	r0, r3
   1827a:	4b76      	ldr	r3, [pc, #472]	; (18454 <put_fat+0x238>)
   1827c:	4798      	blx	r3
   1827e:	0003      	movs	r3, r0
   18280:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   18282:	231f      	movs	r3, #31
   18284:	18fb      	adds	r3, r7, r3
   18286:	781b      	ldrb	r3, [r3, #0]
   18288:	2b00      	cmp	r3, #0
   1828a:	d000      	beq.n	1828e <put_fat+0x72>
   1828c:	e0d0      	b.n	18430 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   1828e:	69bb      	ldr	r3, [r7, #24]
   18290:	05db      	lsls	r3, r3, #23
   18292:	0ddb      	lsrs	r3, r3, #23
   18294:	3330      	adds	r3, #48	; 0x30
   18296:	68fa      	ldr	r2, [r7, #12]
   18298:	18d3      	adds	r3, r2, r3
   1829a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   1829c:	68bb      	ldr	r3, [r7, #8]
   1829e:	2201      	movs	r2, #1
   182a0:	4013      	ands	r3, r2
   182a2:	d00d      	beq.n	182c0 <put_fat+0xa4>
   182a4:	697b      	ldr	r3, [r7, #20]
   182a6:	781b      	ldrb	r3, [r3, #0]
   182a8:	b25b      	sxtb	r3, r3
   182aa:	220f      	movs	r2, #15
   182ac:	4013      	ands	r3, r2
   182ae:	b25a      	sxtb	r2, r3
   182b0:	687b      	ldr	r3, [r7, #4]
   182b2:	b2db      	uxtb	r3, r3
   182b4:	011b      	lsls	r3, r3, #4
   182b6:	b25b      	sxtb	r3, r3
   182b8:	4313      	orrs	r3, r2
   182ba:	b25b      	sxtb	r3, r3
   182bc:	b2db      	uxtb	r3, r3
   182be:	e001      	b.n	182c4 <put_fat+0xa8>
   182c0:	687b      	ldr	r3, [r7, #4]
   182c2:	b2db      	uxtb	r3, r3
   182c4:	697a      	ldr	r2, [r7, #20]
   182c6:	7013      	strb	r3, [r2, #0]
			bc++;
   182c8:	69bb      	ldr	r3, [r7, #24]
   182ca:	3301      	adds	r3, #1
   182cc:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   182ce:	68fb      	ldr	r3, [r7, #12]
   182d0:	2201      	movs	r2, #1
   182d2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   182d4:	68fb      	ldr	r3, [r7, #12]
   182d6:	6a1a      	ldr	r2, [r3, #32]
   182d8:	69bb      	ldr	r3, [r7, #24]
   182da:	0a5b      	lsrs	r3, r3, #9
   182dc:	18d2      	adds	r2, r2, r3
   182de:	231f      	movs	r3, #31
   182e0:	18fc      	adds	r4, r7, r3
   182e2:	68fb      	ldr	r3, [r7, #12]
   182e4:	0011      	movs	r1, r2
   182e6:	0018      	movs	r0, r3
   182e8:	4b5a      	ldr	r3, [pc, #360]	; (18454 <put_fat+0x238>)
   182ea:	4798      	blx	r3
   182ec:	0003      	movs	r3, r0
   182ee:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   182f0:	231f      	movs	r3, #31
   182f2:	18fb      	adds	r3, r7, r3
   182f4:	781b      	ldrb	r3, [r3, #0]
   182f6:	2b00      	cmp	r3, #0
   182f8:	d000      	beq.n	182fc <put_fat+0xe0>
   182fa:	e09b      	b.n	18434 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   182fc:	69bb      	ldr	r3, [r7, #24]
   182fe:	05db      	lsls	r3, r3, #23
   18300:	0ddb      	lsrs	r3, r3, #23
   18302:	3330      	adds	r3, #48	; 0x30
   18304:	68fa      	ldr	r2, [r7, #12]
   18306:	18d3      	adds	r3, r2, r3
   18308:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   1830a:	68bb      	ldr	r3, [r7, #8]
   1830c:	2201      	movs	r2, #1
   1830e:	4013      	ands	r3, r2
   18310:	d003      	beq.n	1831a <put_fat+0xfe>
   18312:	687b      	ldr	r3, [r7, #4]
   18314:	091b      	lsrs	r3, r3, #4
   18316:	b2db      	uxtb	r3, r3
   18318:	e00e      	b.n	18338 <put_fat+0x11c>
   1831a:	697b      	ldr	r3, [r7, #20]
   1831c:	781b      	ldrb	r3, [r3, #0]
   1831e:	b25b      	sxtb	r3, r3
   18320:	220f      	movs	r2, #15
   18322:	4393      	bics	r3, r2
   18324:	b25a      	sxtb	r2, r3
   18326:	687b      	ldr	r3, [r7, #4]
   18328:	0a1b      	lsrs	r3, r3, #8
   1832a:	b25b      	sxtb	r3, r3
   1832c:	210f      	movs	r1, #15
   1832e:	400b      	ands	r3, r1
   18330:	b25b      	sxtb	r3, r3
   18332:	4313      	orrs	r3, r2
   18334:	b25b      	sxtb	r3, r3
   18336:	b2db      	uxtb	r3, r3
   18338:	697a      	ldr	r2, [r7, #20]
   1833a:	7013      	strb	r3, [r2, #0]
			break;
   1833c:	e07f      	b.n	1843e <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   1833e:	68fb      	ldr	r3, [r7, #12]
   18340:	6a1a      	ldr	r2, [r3, #32]
   18342:	68bb      	ldr	r3, [r7, #8]
   18344:	0a1b      	lsrs	r3, r3, #8
   18346:	18d2      	adds	r2, r2, r3
   18348:	231f      	movs	r3, #31
   1834a:	18fc      	adds	r4, r7, r3
   1834c:	68fb      	ldr	r3, [r7, #12]
   1834e:	0011      	movs	r1, r2
   18350:	0018      	movs	r0, r3
   18352:	4b40      	ldr	r3, [pc, #256]	; (18454 <put_fat+0x238>)
   18354:	4798      	blx	r3
   18356:	0003      	movs	r3, r0
   18358:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1835a:	231f      	movs	r3, #31
   1835c:	18fb      	adds	r3, r7, r3
   1835e:	781b      	ldrb	r3, [r3, #0]
   18360:	2b00      	cmp	r3, #0
   18362:	d169      	bne.n	18438 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   18364:	68bb      	ldr	r3, [r7, #8]
   18366:	005a      	lsls	r2, r3, #1
   18368:	23ff      	movs	r3, #255	; 0xff
   1836a:	005b      	lsls	r3, r3, #1
   1836c:	4013      	ands	r3, r2
   1836e:	3330      	adds	r3, #48	; 0x30
   18370:	68fa      	ldr	r2, [r7, #12]
   18372:	18d3      	adds	r3, r2, r3
   18374:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   18376:	687b      	ldr	r3, [r7, #4]
   18378:	b2da      	uxtb	r2, r3
   1837a:	697b      	ldr	r3, [r7, #20]
   1837c:	701a      	strb	r2, [r3, #0]
   1837e:	697b      	ldr	r3, [r7, #20]
   18380:	3301      	adds	r3, #1
   18382:	687a      	ldr	r2, [r7, #4]
   18384:	b292      	uxth	r2, r2
   18386:	0a12      	lsrs	r2, r2, #8
   18388:	b292      	uxth	r2, r2
   1838a:	b2d2      	uxtb	r2, r2
   1838c:	701a      	strb	r2, [r3, #0]
			break;
   1838e:	e056      	b.n	1843e <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   18390:	68fb      	ldr	r3, [r7, #12]
   18392:	6a1a      	ldr	r2, [r3, #32]
   18394:	68bb      	ldr	r3, [r7, #8]
   18396:	09db      	lsrs	r3, r3, #7
   18398:	18d2      	adds	r2, r2, r3
   1839a:	231f      	movs	r3, #31
   1839c:	18fc      	adds	r4, r7, r3
   1839e:	68fb      	ldr	r3, [r7, #12]
   183a0:	0011      	movs	r1, r2
   183a2:	0018      	movs	r0, r3
   183a4:	4b2b      	ldr	r3, [pc, #172]	; (18454 <put_fat+0x238>)
   183a6:	4798      	blx	r3
   183a8:	0003      	movs	r3, r0
   183aa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   183ac:	231f      	movs	r3, #31
   183ae:	18fb      	adds	r3, r7, r3
   183b0:	781b      	ldrb	r3, [r3, #0]
   183b2:	2b00      	cmp	r3, #0
   183b4:	d142      	bne.n	1843c <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   183b6:	68bb      	ldr	r3, [r7, #8]
   183b8:	009a      	lsls	r2, r3, #2
   183ba:	23fe      	movs	r3, #254	; 0xfe
   183bc:	005b      	lsls	r3, r3, #1
   183be:	4013      	ands	r3, r2
   183c0:	3330      	adds	r3, #48	; 0x30
   183c2:	68fa      	ldr	r2, [r7, #12]
   183c4:	18d3      	adds	r3, r2, r3
   183c6:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   183c8:	697b      	ldr	r3, [r7, #20]
   183ca:	3303      	adds	r3, #3
   183cc:	781b      	ldrb	r3, [r3, #0]
   183ce:	061a      	lsls	r2, r3, #24
   183d0:	697b      	ldr	r3, [r7, #20]
   183d2:	3302      	adds	r3, #2
   183d4:	781b      	ldrb	r3, [r3, #0]
   183d6:	041b      	lsls	r3, r3, #16
   183d8:	4313      	orrs	r3, r2
   183da:	697a      	ldr	r2, [r7, #20]
   183dc:	3201      	adds	r2, #1
   183de:	7812      	ldrb	r2, [r2, #0]
   183e0:	0212      	lsls	r2, r2, #8
   183e2:	4313      	orrs	r3, r2
   183e4:	697a      	ldr	r2, [r7, #20]
   183e6:	7812      	ldrb	r2, [r2, #0]
   183e8:	4313      	orrs	r3, r2
   183ea:	0f1b      	lsrs	r3, r3, #28
   183ec:	071b      	lsls	r3, r3, #28
   183ee:	687a      	ldr	r2, [r7, #4]
   183f0:	4313      	orrs	r3, r2
   183f2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   183f4:	687b      	ldr	r3, [r7, #4]
   183f6:	b2da      	uxtb	r2, r3
   183f8:	697b      	ldr	r3, [r7, #20]
   183fa:	701a      	strb	r2, [r3, #0]
   183fc:	697b      	ldr	r3, [r7, #20]
   183fe:	3301      	adds	r3, #1
   18400:	687a      	ldr	r2, [r7, #4]
   18402:	b292      	uxth	r2, r2
   18404:	0a12      	lsrs	r2, r2, #8
   18406:	b292      	uxth	r2, r2
   18408:	b2d2      	uxtb	r2, r2
   1840a:	701a      	strb	r2, [r3, #0]
   1840c:	697b      	ldr	r3, [r7, #20]
   1840e:	3302      	adds	r3, #2
   18410:	687a      	ldr	r2, [r7, #4]
   18412:	0c12      	lsrs	r2, r2, #16
   18414:	b2d2      	uxtb	r2, r2
   18416:	701a      	strb	r2, [r3, #0]
   18418:	697b      	ldr	r3, [r7, #20]
   1841a:	3303      	adds	r3, #3
   1841c:	687a      	ldr	r2, [r7, #4]
   1841e:	0e12      	lsrs	r2, r2, #24
   18420:	b2d2      	uxtb	r2, r2
   18422:	701a      	strb	r2, [r3, #0]
			break;
   18424:	e00b      	b.n	1843e <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   18426:	231f      	movs	r3, #31
   18428:	18fb      	adds	r3, r7, r3
   1842a:	2202      	movs	r2, #2
   1842c:	701a      	strb	r2, [r3, #0]
   1842e:	e006      	b.n	1843e <put_fat+0x222>
			if (res != FR_OK) break;
   18430:	46c0      	nop			; (mov r8, r8)
   18432:	e004      	b.n	1843e <put_fat+0x222>
			if (res != FR_OK) break;
   18434:	46c0      	nop			; (mov r8, r8)
   18436:	e002      	b.n	1843e <put_fat+0x222>
			if (res != FR_OK) break;
   18438:	46c0      	nop			; (mov r8, r8)
   1843a:	e000      	b.n	1843e <put_fat+0x222>
			if (res != FR_OK) break;
   1843c:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   1843e:	68fb      	ldr	r3, [r7, #12]
   18440:	2201      	movs	r2, #1
   18442:	711a      	strb	r2, [r3, #4]
	}

	return res;
   18444:	231f      	movs	r3, #31
   18446:	18fb      	adds	r3, r7, r3
   18448:	781b      	ldrb	r3, [r3, #0]
}
   1844a:	0018      	movs	r0, r3
   1844c:	46bd      	mov	sp, r7
   1844e:	b009      	add	sp, #36	; 0x24
   18450:	bd90      	pop	{r4, r7, pc}
   18452:	46c0      	nop			; (mov r8, r8)
   18454:	00017e19 	.word	0x00017e19

00018458 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   18458:	b590      	push	{r4, r7, lr}
   1845a:	b085      	sub	sp, #20
   1845c:	af00      	add	r7, sp, #0
   1845e:	6078      	str	r0, [r7, #4]
   18460:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   18462:	683b      	ldr	r3, [r7, #0]
   18464:	2b01      	cmp	r3, #1
   18466:	d904      	bls.n	18472 <remove_chain+0x1a>
   18468:	687b      	ldr	r3, [r7, #4]
   1846a:	699a      	ldr	r2, [r3, #24]
   1846c:	683b      	ldr	r3, [r7, #0]
   1846e:	429a      	cmp	r2, r3
   18470:	d804      	bhi.n	1847c <remove_chain+0x24>
		res = FR_INT_ERR;
   18472:	230f      	movs	r3, #15
   18474:	18fb      	adds	r3, r7, r3
   18476:	2202      	movs	r2, #2
   18478:	701a      	strb	r2, [r3, #0]
   1847a:	e045      	b.n	18508 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   1847c:	230f      	movs	r3, #15
   1847e:	18fb      	adds	r3, r7, r3
   18480:	2200      	movs	r2, #0
   18482:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   18484:	e037      	b.n	184f6 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   18486:	683a      	ldr	r2, [r7, #0]
   18488:	687b      	ldr	r3, [r7, #4]
   1848a:	0011      	movs	r1, r2
   1848c:	0018      	movs	r0, r3
   1848e:	4b22      	ldr	r3, [pc, #136]	; (18518 <remove_chain+0xc0>)
   18490:	4798      	blx	r3
   18492:	0003      	movs	r3, r0
   18494:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   18496:	68bb      	ldr	r3, [r7, #8]
   18498:	2b00      	cmp	r3, #0
   1849a:	d032      	beq.n	18502 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   1849c:	68bb      	ldr	r3, [r7, #8]
   1849e:	2b01      	cmp	r3, #1
   184a0:	d104      	bne.n	184ac <remove_chain+0x54>
   184a2:	230f      	movs	r3, #15
   184a4:	18fb      	adds	r3, r7, r3
   184a6:	2202      	movs	r2, #2
   184a8:	701a      	strb	r2, [r3, #0]
   184aa:	e02d      	b.n	18508 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   184ac:	68bb      	ldr	r3, [r7, #8]
   184ae:	3301      	adds	r3, #1
   184b0:	d104      	bne.n	184bc <remove_chain+0x64>
   184b2:	230f      	movs	r3, #15
   184b4:	18fb      	adds	r3, r7, r3
   184b6:	2201      	movs	r2, #1
   184b8:	701a      	strb	r2, [r3, #0]
   184ba:	e025      	b.n	18508 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   184bc:	230f      	movs	r3, #15
   184be:	18fc      	adds	r4, r7, r3
   184c0:	6839      	ldr	r1, [r7, #0]
   184c2:	687b      	ldr	r3, [r7, #4]
   184c4:	2200      	movs	r2, #0
   184c6:	0018      	movs	r0, r3
   184c8:	4b14      	ldr	r3, [pc, #80]	; (1851c <remove_chain+0xc4>)
   184ca:	4798      	blx	r3
   184cc:	0003      	movs	r3, r0
   184ce:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   184d0:	230f      	movs	r3, #15
   184d2:	18fb      	adds	r3, r7, r3
   184d4:	781b      	ldrb	r3, [r3, #0]
   184d6:	2b00      	cmp	r3, #0
   184d8:	d115      	bne.n	18506 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   184da:	687b      	ldr	r3, [r7, #4]
   184dc:	691b      	ldr	r3, [r3, #16]
   184de:	3301      	adds	r3, #1
   184e0:	d007      	beq.n	184f2 <remove_chain+0x9a>
				fs->free_clust++;
   184e2:	687b      	ldr	r3, [r7, #4]
   184e4:	691b      	ldr	r3, [r3, #16]
   184e6:	1c5a      	adds	r2, r3, #1
   184e8:	687b      	ldr	r3, [r7, #4]
   184ea:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   184ec:	687b      	ldr	r3, [r7, #4]
   184ee:	2201      	movs	r2, #1
   184f0:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   184f2:	68bb      	ldr	r3, [r7, #8]
   184f4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   184f6:	687b      	ldr	r3, [r7, #4]
   184f8:	699a      	ldr	r2, [r3, #24]
   184fa:	683b      	ldr	r3, [r7, #0]
   184fc:	429a      	cmp	r2, r3
   184fe:	d8c2      	bhi.n	18486 <remove_chain+0x2e>
   18500:	e002      	b.n	18508 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   18502:	46c0      	nop			; (mov r8, r8)
   18504:	e000      	b.n	18508 <remove_chain+0xb0>
			if (res != FR_OK) break;
   18506:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   18508:	230f      	movs	r3, #15
   1850a:	18fb      	adds	r3, r7, r3
   1850c:	781b      	ldrb	r3, [r3, #0]
}
   1850e:	0018      	movs	r0, r3
   18510:	46bd      	mov	sp, r7
   18512:	b005      	add	sp, #20
   18514:	bd90      	pop	{r4, r7, pc}
   18516:	46c0      	nop			; (mov r8, r8)
   18518:	000180b1 	.word	0x000180b1
   1851c:	0001821d 	.word	0x0001821d

00018520 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   18520:	b590      	push	{r4, r7, lr}
   18522:	b087      	sub	sp, #28
   18524:	af00      	add	r7, sp, #0
   18526:	6078      	str	r0, [r7, #4]
   18528:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   1852a:	683b      	ldr	r3, [r7, #0]
   1852c:	2b00      	cmp	r3, #0
   1852e:	d10d      	bne.n	1854c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   18530:	687b      	ldr	r3, [r7, #4]
   18532:	68db      	ldr	r3, [r3, #12]
   18534:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   18536:	693b      	ldr	r3, [r7, #16]
   18538:	2b00      	cmp	r3, #0
   1853a:	d004      	beq.n	18546 <create_chain+0x26>
   1853c:	687b      	ldr	r3, [r7, #4]
   1853e:	699a      	ldr	r2, [r3, #24]
   18540:	693b      	ldr	r3, [r7, #16]
   18542:	429a      	cmp	r2, r3
   18544:	d818      	bhi.n	18578 <create_chain+0x58>
   18546:	2301      	movs	r3, #1
   18548:	613b      	str	r3, [r7, #16]
   1854a:	e015      	b.n	18578 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   1854c:	683a      	ldr	r2, [r7, #0]
   1854e:	687b      	ldr	r3, [r7, #4]
   18550:	0011      	movs	r1, r2
   18552:	0018      	movs	r0, r3
   18554:	4b3e      	ldr	r3, [pc, #248]	; (18650 <create_chain+0x130>)
   18556:	4798      	blx	r3
   18558:	0003      	movs	r3, r0
   1855a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   1855c:	68bb      	ldr	r3, [r7, #8]
   1855e:	2b01      	cmp	r3, #1
   18560:	d801      	bhi.n	18566 <create_chain+0x46>
   18562:	2301      	movs	r3, #1
   18564:	e070      	b.n	18648 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   18566:	687b      	ldr	r3, [r7, #4]
   18568:	699a      	ldr	r2, [r3, #24]
   1856a:	68bb      	ldr	r3, [r7, #8]
   1856c:	429a      	cmp	r2, r3
   1856e:	d901      	bls.n	18574 <create_chain+0x54>
   18570:	68bb      	ldr	r3, [r7, #8]
   18572:	e069      	b.n	18648 <create_chain+0x128>
		scl = clst;
   18574:	683b      	ldr	r3, [r7, #0]
   18576:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   18578:	693b      	ldr	r3, [r7, #16]
   1857a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   1857c:	697b      	ldr	r3, [r7, #20]
   1857e:	3301      	adds	r3, #1
   18580:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   18582:	687b      	ldr	r3, [r7, #4]
   18584:	699a      	ldr	r2, [r3, #24]
   18586:	697b      	ldr	r3, [r7, #20]
   18588:	429a      	cmp	r2, r3
   1858a:	d807      	bhi.n	1859c <create_chain+0x7c>
			ncl = 2;
   1858c:	2302      	movs	r3, #2
   1858e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   18590:	697a      	ldr	r2, [r7, #20]
   18592:	693b      	ldr	r3, [r7, #16]
   18594:	429a      	cmp	r2, r3
   18596:	d901      	bls.n	1859c <create_chain+0x7c>
   18598:	2300      	movs	r3, #0
   1859a:	e055      	b.n	18648 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   1859c:	697a      	ldr	r2, [r7, #20]
   1859e:	687b      	ldr	r3, [r7, #4]
   185a0:	0011      	movs	r1, r2
   185a2:	0018      	movs	r0, r3
   185a4:	4b2a      	ldr	r3, [pc, #168]	; (18650 <create_chain+0x130>)
   185a6:	4798      	blx	r3
   185a8:	0003      	movs	r3, r0
   185aa:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   185ac:	68bb      	ldr	r3, [r7, #8]
   185ae:	2b00      	cmp	r3, #0
   185b0:	d00d      	beq.n	185ce <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   185b2:	68bb      	ldr	r3, [r7, #8]
   185b4:	3301      	adds	r3, #1
   185b6:	d002      	beq.n	185be <create_chain+0x9e>
   185b8:	68bb      	ldr	r3, [r7, #8]
   185ba:	2b01      	cmp	r3, #1
   185bc:	d101      	bne.n	185c2 <create_chain+0xa2>
			return cs;
   185be:	68bb      	ldr	r3, [r7, #8]
   185c0:	e042      	b.n	18648 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   185c2:	697a      	ldr	r2, [r7, #20]
   185c4:	693b      	ldr	r3, [r7, #16]
   185c6:	429a      	cmp	r2, r3
   185c8:	d1d8      	bne.n	1857c <create_chain+0x5c>
   185ca:	2300      	movs	r3, #0
   185cc:	e03c      	b.n	18648 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   185ce:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   185d0:	230f      	movs	r3, #15
   185d2:	18fc      	adds	r4, r7, r3
   185d4:	4a1f      	ldr	r2, [pc, #124]	; (18654 <create_chain+0x134>)
   185d6:	6979      	ldr	r1, [r7, #20]
   185d8:	687b      	ldr	r3, [r7, #4]
   185da:	0018      	movs	r0, r3
   185dc:	4b1e      	ldr	r3, [pc, #120]	; (18658 <create_chain+0x138>)
   185de:	4798      	blx	r3
   185e0:	0003      	movs	r3, r0
   185e2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   185e4:	230f      	movs	r3, #15
   185e6:	18fb      	adds	r3, r7, r3
   185e8:	781b      	ldrb	r3, [r3, #0]
   185ea:	2b00      	cmp	r3, #0
   185ec:	d10c      	bne.n	18608 <create_chain+0xe8>
   185ee:	683b      	ldr	r3, [r7, #0]
   185f0:	2b00      	cmp	r3, #0
   185f2:	d009      	beq.n	18608 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   185f4:	230f      	movs	r3, #15
   185f6:	18fc      	adds	r4, r7, r3
   185f8:	697a      	ldr	r2, [r7, #20]
   185fa:	6839      	ldr	r1, [r7, #0]
   185fc:	687b      	ldr	r3, [r7, #4]
   185fe:	0018      	movs	r0, r3
   18600:	4b15      	ldr	r3, [pc, #84]	; (18658 <create_chain+0x138>)
   18602:	4798      	blx	r3
   18604:	0003      	movs	r3, r0
   18606:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   18608:	230f      	movs	r3, #15
   1860a:	18fb      	adds	r3, r7, r3
   1860c:	781b      	ldrb	r3, [r3, #0]
   1860e:	2b00      	cmp	r3, #0
   18610:	d10f      	bne.n	18632 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   18612:	687b      	ldr	r3, [r7, #4]
   18614:	697a      	ldr	r2, [r7, #20]
   18616:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   18618:	687b      	ldr	r3, [r7, #4]
   1861a:	691b      	ldr	r3, [r3, #16]
   1861c:	3301      	adds	r3, #1
   1861e:	d012      	beq.n	18646 <create_chain+0x126>
			fs->free_clust--;
   18620:	687b      	ldr	r3, [r7, #4]
   18622:	691b      	ldr	r3, [r3, #16]
   18624:	1e5a      	subs	r2, r3, #1
   18626:	687b      	ldr	r3, [r7, #4]
   18628:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   1862a:	687b      	ldr	r3, [r7, #4]
   1862c:	2201      	movs	r2, #1
   1862e:	715a      	strb	r2, [r3, #5]
   18630:	e009      	b.n	18646 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   18632:	230f      	movs	r3, #15
   18634:	18fb      	adds	r3, r7, r3
   18636:	781b      	ldrb	r3, [r3, #0]
   18638:	2b01      	cmp	r3, #1
   1863a:	d102      	bne.n	18642 <create_chain+0x122>
   1863c:	2301      	movs	r3, #1
   1863e:	425b      	negs	r3, r3
   18640:	e000      	b.n	18644 <create_chain+0x124>
   18642:	2301      	movs	r3, #1
   18644:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   18646:	697b      	ldr	r3, [r7, #20]
}
   18648:	0018      	movs	r0, r3
   1864a:	46bd      	mov	sp, r7
   1864c:	b007      	add	sp, #28
   1864e:	bd90      	pop	{r4, r7, pc}
   18650:	000180b1 	.word	0x000180b1
   18654:	0fffffff 	.word	0x0fffffff
   18658:	0001821d 	.word	0x0001821d

0001865c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   1865c:	b580      	push	{r7, lr}
   1865e:	b084      	sub	sp, #16
   18660:	af00      	add	r7, sp, #0
   18662:	6078      	str	r0, [r7, #4]
   18664:	000a      	movs	r2, r1
   18666:	1cbb      	adds	r3, r7, #2
   18668:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   1866a:	687b      	ldr	r3, [r7, #4]
   1866c:	1cba      	adds	r2, r7, #2
   1866e:	8812      	ldrh	r2, [r2, #0]
   18670:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   18672:	687b      	ldr	r3, [r7, #4]
   18674:	689b      	ldr	r3, [r3, #8]
   18676:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   18678:	68fb      	ldr	r3, [r7, #12]
   1867a:	2b01      	cmp	r3, #1
   1867c:	d005      	beq.n	1868a <dir_sdi+0x2e>
   1867e:	687b      	ldr	r3, [r7, #4]
   18680:	681b      	ldr	r3, [r3, #0]
   18682:	699a      	ldr	r2, [r3, #24]
   18684:	68fb      	ldr	r3, [r7, #12]
   18686:	429a      	cmp	r2, r3
   18688:	d801      	bhi.n	1868e <dir_sdi+0x32>
		return FR_INT_ERR;
   1868a:	2302      	movs	r3, #2
   1868c:	e075      	b.n	1877a <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   1868e:	68fb      	ldr	r3, [r7, #12]
   18690:	2b00      	cmp	r3, #0
   18692:	d108      	bne.n	186a6 <dir_sdi+0x4a>
   18694:	687b      	ldr	r3, [r7, #4]
   18696:	681b      	ldr	r3, [r3, #0]
   18698:	781b      	ldrb	r3, [r3, #0]
   1869a:	2b03      	cmp	r3, #3
   1869c:	d103      	bne.n	186a6 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   1869e:	687b      	ldr	r3, [r7, #4]
   186a0:	681b      	ldr	r3, [r3, #0]
   186a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   186a4:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   186a6:	68fb      	ldr	r3, [r7, #12]
   186a8:	2b00      	cmp	r3, #0
   186aa:	d116      	bne.n	186da <dir_sdi+0x7e>
		dj->clust = clst;
   186ac:	687b      	ldr	r3, [r7, #4]
   186ae:	68fa      	ldr	r2, [r7, #12]
   186b0:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   186b2:	687b      	ldr	r3, [r7, #4]
   186b4:	681b      	ldr	r3, [r3, #0]
   186b6:	891b      	ldrh	r3, [r3, #8]
   186b8:	1cba      	adds	r2, r7, #2
   186ba:	8812      	ldrh	r2, [r2, #0]
   186bc:	429a      	cmp	r2, r3
   186be:	d301      	bcc.n	186c4 <dir_sdi+0x68>
			return FR_INT_ERR;
   186c0:	2302      	movs	r3, #2
   186c2:	e05a      	b.n	1877a <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   186c4:	687b      	ldr	r3, [r7, #4]
   186c6:	681b      	ldr	r3, [r3, #0]
   186c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   186ca:	1cba      	adds	r2, r7, #2
   186cc:	8812      	ldrh	r2, [r2, #0]
   186ce:	0912      	lsrs	r2, r2, #4
   186d0:	b292      	uxth	r2, r2
   186d2:	189a      	adds	r2, r3, r2
   186d4:	687b      	ldr	r3, [r7, #4]
   186d6:	611a      	str	r2, [r3, #16]
   186d8:	e042      	b.n	18760 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   186da:	687b      	ldr	r3, [r7, #4]
   186dc:	681b      	ldr	r3, [r3, #0]
   186de:	789b      	ldrb	r3, [r3, #2]
   186e0:	b29a      	uxth	r2, r3
   186e2:	230a      	movs	r3, #10
   186e4:	18fb      	adds	r3, r7, r3
   186e6:	0112      	lsls	r2, r2, #4
   186e8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   186ea:	e020      	b.n	1872e <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   186ec:	687b      	ldr	r3, [r7, #4]
   186ee:	681b      	ldr	r3, [r3, #0]
   186f0:	68fa      	ldr	r2, [r7, #12]
   186f2:	0011      	movs	r1, r2
   186f4:	0018      	movs	r0, r3
   186f6:	4b23      	ldr	r3, [pc, #140]	; (18784 <dir_sdi+0x128>)
   186f8:	4798      	blx	r3
   186fa:	0003      	movs	r3, r0
   186fc:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   186fe:	68fb      	ldr	r3, [r7, #12]
   18700:	3301      	adds	r3, #1
   18702:	d101      	bne.n	18708 <dir_sdi+0xac>
   18704:	2301      	movs	r3, #1
   18706:	e038      	b.n	1877a <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   18708:	68fb      	ldr	r3, [r7, #12]
   1870a:	2b01      	cmp	r3, #1
   1870c:	d905      	bls.n	1871a <dir_sdi+0xbe>
   1870e:	687b      	ldr	r3, [r7, #4]
   18710:	681b      	ldr	r3, [r3, #0]
   18712:	699a      	ldr	r2, [r3, #24]
   18714:	68fb      	ldr	r3, [r7, #12]
   18716:	429a      	cmp	r2, r3
   18718:	d801      	bhi.n	1871e <dir_sdi+0xc2>
				return FR_INT_ERR;
   1871a:	2302      	movs	r3, #2
   1871c:	e02d      	b.n	1877a <dir_sdi+0x11e>
			idx -= ic;
   1871e:	1cbb      	adds	r3, r7, #2
   18720:	1cb9      	adds	r1, r7, #2
   18722:	220a      	movs	r2, #10
   18724:	18ba      	adds	r2, r7, r2
   18726:	8809      	ldrh	r1, [r1, #0]
   18728:	8812      	ldrh	r2, [r2, #0]
   1872a:	1a8a      	subs	r2, r1, r2
   1872c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   1872e:	1cba      	adds	r2, r7, #2
   18730:	230a      	movs	r3, #10
   18732:	18fb      	adds	r3, r7, r3
   18734:	8812      	ldrh	r2, [r2, #0]
   18736:	881b      	ldrh	r3, [r3, #0]
   18738:	429a      	cmp	r2, r3
   1873a:	d2d7      	bcs.n	186ec <dir_sdi+0x90>
		}
		dj->clust = clst;
   1873c:	687b      	ldr	r3, [r7, #4]
   1873e:	68fa      	ldr	r2, [r7, #12]
   18740:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   18742:	687b      	ldr	r3, [r7, #4]
   18744:	681b      	ldr	r3, [r3, #0]
   18746:	68fa      	ldr	r2, [r7, #12]
   18748:	0011      	movs	r1, r2
   1874a:	0018      	movs	r0, r3
   1874c:	4b0e      	ldr	r3, [pc, #56]	; (18788 <dir_sdi+0x12c>)
   1874e:	4798      	blx	r3
   18750:	0002      	movs	r2, r0
   18752:	1cbb      	adds	r3, r7, #2
   18754:	881b      	ldrh	r3, [r3, #0]
   18756:	091b      	lsrs	r3, r3, #4
   18758:	b29b      	uxth	r3, r3
   1875a:	18d2      	adds	r2, r2, r3
   1875c:	687b      	ldr	r3, [r7, #4]
   1875e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   18760:	687b      	ldr	r3, [r7, #4]
   18762:	681b      	ldr	r3, [r3, #0]
   18764:	3330      	adds	r3, #48	; 0x30
   18766:	001a      	movs	r2, r3
   18768:	1cbb      	adds	r3, r7, #2
   1876a:	881b      	ldrh	r3, [r3, #0]
   1876c:	210f      	movs	r1, #15
   1876e:	400b      	ands	r3, r1
   18770:	015b      	lsls	r3, r3, #5
   18772:	18d2      	adds	r2, r2, r3
   18774:	687b      	ldr	r3, [r7, #4]
   18776:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   18778:	2300      	movs	r3, #0
}
   1877a:	0018      	movs	r0, r3
   1877c:	46bd      	mov	sp, r7
   1877e:	b004      	add	sp, #16
   18780:	bd80      	pop	{r7, pc}
   18782:	46c0      	nop			; (mov r8, r8)
   18784:	000180b1 	.word	0x000180b1
   18788:	00018079 	.word	0x00018079

0001878c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   1878c:	b590      	push	{r4, r7, lr}
   1878e:	b085      	sub	sp, #20
   18790:	af00      	add	r7, sp, #0
   18792:	6078      	str	r0, [r7, #4]
   18794:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   18796:	687b      	ldr	r3, [r7, #4]
   18798:	88da      	ldrh	r2, [r3, #6]
   1879a:	2308      	movs	r3, #8
   1879c:	18fb      	adds	r3, r7, r3
   1879e:	3201      	adds	r2, #1
   187a0:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   187a2:	2308      	movs	r3, #8
   187a4:	18fb      	adds	r3, r7, r3
   187a6:	881b      	ldrh	r3, [r3, #0]
   187a8:	2b00      	cmp	r3, #0
   187aa:	d003      	beq.n	187b4 <dir_next+0x28>
   187ac:	687b      	ldr	r3, [r7, #4]
   187ae:	691b      	ldr	r3, [r3, #16]
   187b0:	2b00      	cmp	r3, #0
   187b2:	d101      	bne.n	187b8 <dir_next+0x2c>
		return FR_NO_FILE;
   187b4:	2304      	movs	r3, #4
   187b6:	e0d2      	b.n	1895e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   187b8:	2308      	movs	r3, #8
   187ba:	18fb      	adds	r3, r7, r3
   187bc:	881b      	ldrh	r3, [r3, #0]
   187be:	220f      	movs	r2, #15
   187c0:	4013      	ands	r3, r2
   187c2:	b29b      	uxth	r3, r3
   187c4:	2b00      	cmp	r3, #0
   187c6:	d000      	beq.n	187ca <dir_next+0x3e>
   187c8:	e0b6      	b.n	18938 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   187ca:	687b      	ldr	r3, [r7, #4]
   187cc:	691b      	ldr	r3, [r3, #16]
   187ce:	1c5a      	adds	r2, r3, #1
   187d0:	687b      	ldr	r3, [r7, #4]
   187d2:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   187d4:	687b      	ldr	r3, [r7, #4]
   187d6:	68db      	ldr	r3, [r3, #12]
   187d8:	2b00      	cmp	r3, #0
   187da:	d10a      	bne.n	187f2 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   187dc:	687b      	ldr	r3, [r7, #4]
   187de:	681b      	ldr	r3, [r3, #0]
   187e0:	891b      	ldrh	r3, [r3, #8]
   187e2:	2208      	movs	r2, #8
   187e4:	18ba      	adds	r2, r7, r2
   187e6:	8812      	ldrh	r2, [r2, #0]
   187e8:	429a      	cmp	r2, r3
   187ea:	d200      	bcs.n	187ee <dir_next+0x62>
   187ec:	e0a4      	b.n	18938 <dir_next+0x1ac>
				return FR_NO_FILE;
   187ee:	2304      	movs	r3, #4
   187f0:	e0b5      	b.n	1895e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   187f2:	2308      	movs	r3, #8
   187f4:	18fb      	adds	r3, r7, r3
   187f6:	881b      	ldrh	r3, [r3, #0]
   187f8:	091b      	lsrs	r3, r3, #4
   187fa:	b29b      	uxth	r3, r3
   187fc:	001a      	movs	r2, r3
   187fe:	687b      	ldr	r3, [r7, #4]
   18800:	681b      	ldr	r3, [r3, #0]
   18802:	789b      	ldrb	r3, [r3, #2]
   18804:	3b01      	subs	r3, #1
   18806:	4013      	ands	r3, r2
   18808:	d000      	beq.n	1880c <dir_next+0x80>
   1880a:	e095      	b.n	18938 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   1880c:	687b      	ldr	r3, [r7, #4]
   1880e:	681a      	ldr	r2, [r3, #0]
   18810:	687b      	ldr	r3, [r7, #4]
   18812:	68db      	ldr	r3, [r3, #12]
   18814:	0019      	movs	r1, r3
   18816:	0010      	movs	r0, r2
   18818:	4b53      	ldr	r3, [pc, #332]	; (18968 <dir_next+0x1dc>)
   1881a:	4798      	blx	r3
   1881c:	0003      	movs	r3, r0
   1881e:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   18820:	68fb      	ldr	r3, [r7, #12]
   18822:	2b01      	cmp	r3, #1
   18824:	d801      	bhi.n	1882a <dir_next+0x9e>
   18826:	2302      	movs	r3, #2
   18828:	e099      	b.n	1895e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1882a:	68fb      	ldr	r3, [r7, #12]
   1882c:	3301      	adds	r3, #1
   1882e:	d101      	bne.n	18834 <dir_next+0xa8>
   18830:	2301      	movs	r3, #1
   18832:	e094      	b.n	1895e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   18834:	687b      	ldr	r3, [r7, #4]
   18836:	681b      	ldr	r3, [r3, #0]
   18838:	699a      	ldr	r2, [r3, #24]
   1883a:	68fb      	ldr	r3, [r7, #12]
   1883c:	429a      	cmp	r2, r3
   1883e:	d900      	bls.n	18842 <dir_next+0xb6>
   18840:	e06d      	b.n	1891e <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   18842:	683b      	ldr	r3, [r7, #0]
   18844:	2b00      	cmp	r3, #0
   18846:	d101      	bne.n	1884c <dir_next+0xc0>
   18848:	2304      	movs	r3, #4
   1884a:	e088      	b.n	1895e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   1884c:	687b      	ldr	r3, [r7, #4]
   1884e:	681a      	ldr	r2, [r3, #0]
   18850:	687b      	ldr	r3, [r7, #4]
   18852:	68db      	ldr	r3, [r3, #12]
   18854:	0019      	movs	r1, r3
   18856:	0010      	movs	r0, r2
   18858:	4b44      	ldr	r3, [pc, #272]	; (1896c <dir_next+0x1e0>)
   1885a:	4798      	blx	r3
   1885c:	0003      	movs	r3, r0
   1885e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   18860:	68fb      	ldr	r3, [r7, #12]
   18862:	2b00      	cmp	r3, #0
   18864:	d101      	bne.n	1886a <dir_next+0xde>
   18866:	2307      	movs	r3, #7
   18868:	e079      	b.n	1895e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   1886a:	68fb      	ldr	r3, [r7, #12]
   1886c:	2b01      	cmp	r3, #1
   1886e:	d101      	bne.n	18874 <dir_next+0xe8>
   18870:	2302      	movs	r3, #2
   18872:	e074      	b.n	1895e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   18874:	68fb      	ldr	r3, [r7, #12]
   18876:	3301      	adds	r3, #1
   18878:	d101      	bne.n	1887e <dir_next+0xf2>
   1887a:	2301      	movs	r3, #1
   1887c:	e06f      	b.n	1895e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   1887e:	687b      	ldr	r3, [r7, #4]
   18880:	681b      	ldr	r3, [r3, #0]
   18882:	2100      	movs	r1, #0
   18884:	0018      	movs	r0, r3
   18886:	4b3a      	ldr	r3, [pc, #232]	; (18970 <dir_next+0x1e4>)
   18888:	4798      	blx	r3
   1888a:	1e03      	subs	r3, r0, #0
   1888c:	d001      	beq.n	18892 <dir_next+0x106>
   1888e:	2301      	movs	r3, #1
   18890:	e065      	b.n	1895e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   18892:	687b      	ldr	r3, [r7, #4]
   18894:	681b      	ldr	r3, [r3, #0]
   18896:	3330      	adds	r3, #48	; 0x30
   18898:	0018      	movs	r0, r3
   1889a:	2380      	movs	r3, #128	; 0x80
   1889c:	009b      	lsls	r3, r3, #2
   1889e:	001a      	movs	r2, r3
   188a0:	2100      	movs	r1, #0
   188a2:	4b34      	ldr	r3, [pc, #208]	; (18974 <dir_next+0x1e8>)
   188a4:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   188a6:	687b      	ldr	r3, [r7, #4]
   188a8:	681c      	ldr	r4, [r3, #0]
   188aa:	687b      	ldr	r3, [r7, #4]
   188ac:	681b      	ldr	r3, [r3, #0]
   188ae:	68fa      	ldr	r2, [r7, #12]
   188b0:	0011      	movs	r1, r2
   188b2:	0018      	movs	r0, r3
   188b4:	4b30      	ldr	r3, [pc, #192]	; (18978 <dir_next+0x1ec>)
   188b6:	4798      	blx	r3
   188b8:	0003      	movs	r3, r0
   188ba:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   188bc:	230b      	movs	r3, #11
   188be:	18fb      	adds	r3, r7, r3
   188c0:	2200      	movs	r2, #0
   188c2:	701a      	strb	r2, [r3, #0]
   188c4:	e019      	b.n	188fa <dir_next+0x16e>
						dj->fs->wflag = 1;
   188c6:	687b      	ldr	r3, [r7, #4]
   188c8:	681b      	ldr	r3, [r3, #0]
   188ca:	2201      	movs	r2, #1
   188cc:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   188ce:	687b      	ldr	r3, [r7, #4]
   188d0:	681b      	ldr	r3, [r3, #0]
   188d2:	2100      	movs	r1, #0
   188d4:	0018      	movs	r0, r3
   188d6:	4b26      	ldr	r3, [pc, #152]	; (18970 <dir_next+0x1e4>)
   188d8:	4798      	blx	r3
   188da:	1e03      	subs	r3, r0, #0
   188dc:	d001      	beq.n	188e2 <dir_next+0x156>
   188de:	2301      	movs	r3, #1
   188e0:	e03d      	b.n	1895e <dir_next+0x1d2>
						dj->fs->winsect++;
   188e2:	687b      	ldr	r3, [r7, #4]
   188e4:	681b      	ldr	r3, [r3, #0]
   188e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   188e8:	3201      	adds	r2, #1
   188ea:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   188ec:	230b      	movs	r3, #11
   188ee:	18fb      	adds	r3, r7, r3
   188f0:	781a      	ldrb	r2, [r3, #0]
   188f2:	230b      	movs	r3, #11
   188f4:	18fb      	adds	r3, r7, r3
   188f6:	3201      	adds	r2, #1
   188f8:	701a      	strb	r2, [r3, #0]
   188fa:	687b      	ldr	r3, [r7, #4]
   188fc:	681b      	ldr	r3, [r3, #0]
   188fe:	789b      	ldrb	r3, [r3, #2]
   18900:	220b      	movs	r2, #11
   18902:	18ba      	adds	r2, r7, r2
   18904:	7812      	ldrb	r2, [r2, #0]
   18906:	429a      	cmp	r2, r3
   18908:	d3dd      	bcc.n	188c6 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   1890a:	687b      	ldr	r3, [r7, #4]
   1890c:	681b      	ldr	r3, [r3, #0]
   1890e:	687a      	ldr	r2, [r7, #4]
   18910:	6812      	ldr	r2, [r2, #0]
   18912:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   18914:	220b      	movs	r2, #11
   18916:	18ba      	adds	r2, r7, r2
   18918:	7812      	ldrb	r2, [r2, #0]
   1891a:	1a8a      	subs	r2, r1, r2
   1891c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   1891e:	687b      	ldr	r3, [r7, #4]
   18920:	68fa      	ldr	r2, [r7, #12]
   18922:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   18924:	687b      	ldr	r3, [r7, #4]
   18926:	681b      	ldr	r3, [r3, #0]
   18928:	68fa      	ldr	r2, [r7, #12]
   1892a:	0011      	movs	r1, r2
   1892c:	0018      	movs	r0, r3
   1892e:	4b12      	ldr	r3, [pc, #72]	; (18978 <dir_next+0x1ec>)
   18930:	4798      	blx	r3
   18932:	0002      	movs	r2, r0
   18934:	687b      	ldr	r3, [r7, #4]
   18936:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   18938:	687b      	ldr	r3, [r7, #4]
   1893a:	2208      	movs	r2, #8
   1893c:	18ba      	adds	r2, r7, r2
   1893e:	8812      	ldrh	r2, [r2, #0]
   18940:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   18942:	687b      	ldr	r3, [r7, #4]
   18944:	681b      	ldr	r3, [r3, #0]
   18946:	3330      	adds	r3, #48	; 0x30
   18948:	001a      	movs	r2, r3
   1894a:	2308      	movs	r3, #8
   1894c:	18fb      	adds	r3, r7, r3
   1894e:	881b      	ldrh	r3, [r3, #0]
   18950:	210f      	movs	r1, #15
   18952:	400b      	ands	r3, r1
   18954:	015b      	lsls	r3, r3, #5
   18956:	18d2      	adds	r2, r2, r3
   18958:	687b      	ldr	r3, [r7, #4]
   1895a:	615a      	str	r2, [r3, #20]

	return FR_OK;
   1895c:	2300      	movs	r3, #0
}
   1895e:	0018      	movs	r0, r3
   18960:	46bd      	mov	sp, r7
   18962:	b005      	add	sp, #20
   18964:	bd90      	pop	{r4, r7, pc}
   18966:	46c0      	nop			; (mov r8, r8)
   18968:	000180b1 	.word	0x000180b1
   1896c:	00018521 	.word	0x00018521
   18970:	00017e19 	.word	0x00017e19
   18974:	00017d6d 	.word	0x00017d6d
   18978:	00018079 	.word	0x00018079

0001897c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   1897c:	b590      	push	{r4, r7, lr}
   1897e:	b087      	sub	sp, #28
   18980:	af00      	add	r7, sp, #0
   18982:	6078      	str	r0, [r7, #4]
   18984:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   18986:	683b      	ldr	r3, [r7, #0]
   18988:	781b      	ldrb	r3, [r3, #0]
   1898a:	001a      	movs	r2, r3
   1898c:	2340      	movs	r3, #64	; 0x40
   1898e:	439a      	bics	r2, r3
   18990:	0013      	movs	r3, r2
   18992:	1e5a      	subs	r2, r3, #1
   18994:	0013      	movs	r3, r2
   18996:	005b      	lsls	r3, r3, #1
   18998:	189b      	adds	r3, r3, r2
   1899a:	009b      	lsls	r3, r3, #2
   1899c:	189b      	adds	r3, r3, r2
   1899e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   189a0:	2300      	movs	r3, #0
   189a2:	613b      	str	r3, [r7, #16]
   189a4:	230e      	movs	r3, #14
   189a6:	18fb      	adds	r3, r7, r3
   189a8:	2201      	movs	r2, #1
   189aa:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   189ac:	4a31      	ldr	r2, [pc, #196]	; (18a74 <cmp_lfn+0xf8>)
   189ae:	693b      	ldr	r3, [r7, #16]
   189b0:	18d3      	adds	r3, r2, r3
   189b2:	781b      	ldrb	r3, [r3, #0]
   189b4:	3301      	adds	r3, #1
   189b6:	683a      	ldr	r2, [r7, #0]
   189b8:	18d3      	adds	r3, r2, r3
   189ba:	781b      	ldrb	r3, [r3, #0]
   189bc:	021b      	lsls	r3, r3, #8
   189be:	b21a      	sxth	r2, r3
   189c0:	492c      	ldr	r1, [pc, #176]	; (18a74 <cmp_lfn+0xf8>)
   189c2:	693b      	ldr	r3, [r7, #16]
   189c4:	18cb      	adds	r3, r1, r3
   189c6:	781b      	ldrb	r3, [r3, #0]
   189c8:	0019      	movs	r1, r3
   189ca:	683b      	ldr	r3, [r7, #0]
   189cc:	185b      	adds	r3, r3, r1
   189ce:	781b      	ldrb	r3, [r3, #0]
   189d0:	b21b      	sxth	r3, r3
   189d2:	4313      	orrs	r3, r2
   189d4:	b21a      	sxth	r2, r3
   189d6:	230c      	movs	r3, #12
   189d8:	18fb      	adds	r3, r7, r3
   189da:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   189dc:	230e      	movs	r3, #14
   189de:	18fb      	adds	r3, r7, r3
   189e0:	881b      	ldrh	r3, [r3, #0]
   189e2:	2b00      	cmp	r3, #0
   189e4:	d01f      	beq.n	18a26 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   189e6:	230e      	movs	r3, #14
   189e8:	18fc      	adds	r4, r7, r3
   189ea:	230c      	movs	r3, #12
   189ec:	18fb      	adds	r3, r7, r3
   189ee:	881b      	ldrh	r3, [r3, #0]
   189f0:	0018      	movs	r0, r3
   189f2:	4b21      	ldr	r3, [pc, #132]	; (18a78 <cmp_lfn+0xfc>)
   189f4:	4798      	blx	r3
   189f6:	0003      	movs	r3, r0
   189f8:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   189fa:	697b      	ldr	r3, [r7, #20]
   189fc:	2bfe      	cmp	r3, #254	; 0xfe
   189fe:	d810      	bhi.n	18a22 <cmp_lfn+0xa6>
   18a00:	697b      	ldr	r3, [r7, #20]
   18a02:	1c5a      	adds	r2, r3, #1
   18a04:	617a      	str	r2, [r7, #20]
   18a06:	005b      	lsls	r3, r3, #1
   18a08:	687a      	ldr	r2, [r7, #4]
   18a0a:	18d3      	adds	r3, r2, r3
   18a0c:	881b      	ldrh	r3, [r3, #0]
   18a0e:	0018      	movs	r0, r3
   18a10:	4b19      	ldr	r3, [pc, #100]	; (18a78 <cmp_lfn+0xfc>)
   18a12:	4798      	blx	r3
   18a14:	0003      	movs	r3, r0
   18a16:	001a      	movs	r2, r3
   18a18:	230e      	movs	r3, #14
   18a1a:	18fb      	adds	r3, r7, r3
   18a1c:	881b      	ldrh	r3, [r3, #0]
   18a1e:	4293      	cmp	r3, r2
   18a20:	d009      	beq.n	18a36 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   18a22:	2300      	movs	r3, #0
   18a24:	e022      	b.n	18a6c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   18a26:	230c      	movs	r3, #12
   18a28:	18fb      	adds	r3, r7, r3
   18a2a:	881b      	ldrh	r3, [r3, #0]
   18a2c:	4a13      	ldr	r2, [pc, #76]	; (18a7c <cmp_lfn+0x100>)
   18a2e:	4293      	cmp	r3, r2
   18a30:	d001      	beq.n	18a36 <cmp_lfn+0xba>
   18a32:	2300      	movs	r3, #0
   18a34:	e01a      	b.n	18a6c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   18a36:	693b      	ldr	r3, [r7, #16]
   18a38:	3301      	adds	r3, #1
   18a3a:	613b      	str	r3, [r7, #16]
   18a3c:	693b      	ldr	r3, [r7, #16]
   18a3e:	2b0c      	cmp	r3, #12
   18a40:	d9b4      	bls.n	189ac <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   18a42:	683b      	ldr	r3, [r7, #0]
   18a44:	781b      	ldrb	r3, [r3, #0]
   18a46:	001a      	movs	r2, r3
   18a48:	2340      	movs	r3, #64	; 0x40
   18a4a:	4013      	ands	r3, r2
   18a4c:	d00d      	beq.n	18a6a <cmp_lfn+0xee>
   18a4e:	230e      	movs	r3, #14
   18a50:	18fb      	adds	r3, r7, r3
   18a52:	881b      	ldrh	r3, [r3, #0]
   18a54:	2b00      	cmp	r3, #0
   18a56:	d008      	beq.n	18a6a <cmp_lfn+0xee>
   18a58:	697b      	ldr	r3, [r7, #20]
   18a5a:	005b      	lsls	r3, r3, #1
   18a5c:	687a      	ldr	r2, [r7, #4]
   18a5e:	18d3      	adds	r3, r2, r3
   18a60:	881b      	ldrh	r3, [r3, #0]
   18a62:	2b00      	cmp	r3, #0
   18a64:	d001      	beq.n	18a6a <cmp_lfn+0xee>
		return 0;
   18a66:	2300      	movs	r3, #0
   18a68:	e000      	b.n	18a6c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   18a6a:	2301      	movs	r3, #1
}
   18a6c:	0018      	movs	r0, r3
   18a6e:	46bd      	mov	sp, r7
   18a70:	b007      	add	sp, #28
   18a72:	bd90      	pop	{r4, r7, pc}
   18a74:	0002581c 	.word	0x0002581c
   18a78:	0001aa29 	.word	0x0001aa29
   18a7c:	0000ffff 	.word	0x0000ffff

00018a80 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   18a80:	b580      	push	{r7, lr}
   18a82:	b088      	sub	sp, #32
   18a84:	af00      	add	r7, sp, #0
   18a86:	60f8      	str	r0, [r7, #12]
   18a88:	60b9      	str	r1, [r7, #8]
   18a8a:	0019      	movs	r1, r3
   18a8c:	1dfb      	adds	r3, r7, #7
   18a8e:	701a      	strb	r2, [r3, #0]
   18a90:	1dbb      	adds	r3, r7, #6
   18a92:	1c0a      	adds	r2, r1, #0
   18a94:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   18a96:	68bb      	ldr	r3, [r7, #8]
   18a98:	330d      	adds	r3, #13
   18a9a:	1dba      	adds	r2, r7, #6
   18a9c:	7812      	ldrb	r2, [r2, #0]
   18a9e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   18aa0:	68bb      	ldr	r3, [r7, #8]
   18aa2:	330b      	adds	r3, #11
   18aa4:	220f      	movs	r2, #15
   18aa6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   18aa8:	68bb      	ldr	r3, [r7, #8]
   18aaa:	330c      	adds	r3, #12
   18aac:	2200      	movs	r2, #0
   18aae:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   18ab0:	68bb      	ldr	r3, [r7, #8]
   18ab2:	331a      	adds	r3, #26
   18ab4:	2200      	movs	r2, #0
   18ab6:	701a      	strb	r2, [r3, #0]
   18ab8:	68bb      	ldr	r3, [r7, #8]
   18aba:	331b      	adds	r3, #27
   18abc:	2200      	movs	r2, #0
   18abe:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   18ac0:	1dfb      	adds	r3, r7, #7
   18ac2:	781b      	ldrb	r3, [r3, #0]
   18ac4:	1e5a      	subs	r2, r3, #1
   18ac6:	0013      	movs	r3, r2
   18ac8:	005b      	lsls	r3, r3, #1
   18aca:	189b      	adds	r3, r3, r2
   18acc:	009b      	lsls	r3, r3, #2
   18ace:	189b      	adds	r3, r3, r2
   18ad0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   18ad2:	2316      	movs	r3, #22
   18ad4:	18fb      	adds	r3, r7, r3
   18ad6:	2200      	movs	r2, #0
   18ad8:	801a      	strh	r2, [r3, #0]
   18ada:	2300      	movs	r3, #0
   18adc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   18ade:	2316      	movs	r3, #22
   18ae0:	18fb      	adds	r3, r7, r3
   18ae2:	881b      	ldrh	r3, [r3, #0]
   18ae4:	4a28      	ldr	r2, [pc, #160]	; (18b88 <fit_lfn+0x108>)
   18ae6:	4293      	cmp	r3, r2
   18ae8:	d009      	beq.n	18afe <fit_lfn+0x7e>
   18aea:	69fb      	ldr	r3, [r7, #28]
   18aec:	1c5a      	adds	r2, r3, #1
   18aee:	61fa      	str	r2, [r7, #28]
   18af0:	005b      	lsls	r3, r3, #1
   18af2:	68fa      	ldr	r2, [r7, #12]
   18af4:	18d2      	adds	r2, r2, r3
   18af6:	2316      	movs	r3, #22
   18af8:	18fb      	adds	r3, r7, r3
   18afa:	8812      	ldrh	r2, [r2, #0]
   18afc:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   18afe:	4a23      	ldr	r2, [pc, #140]	; (18b8c <fit_lfn+0x10c>)
   18b00:	69bb      	ldr	r3, [r7, #24]
   18b02:	18d3      	adds	r3, r2, r3
   18b04:	781b      	ldrb	r3, [r3, #0]
   18b06:	001a      	movs	r2, r3
   18b08:	68bb      	ldr	r3, [r7, #8]
   18b0a:	189b      	adds	r3, r3, r2
   18b0c:	2216      	movs	r2, #22
   18b0e:	18ba      	adds	r2, r7, r2
   18b10:	8812      	ldrh	r2, [r2, #0]
   18b12:	b2d2      	uxtb	r2, r2
   18b14:	701a      	strb	r2, [r3, #0]
   18b16:	4a1d      	ldr	r2, [pc, #116]	; (18b8c <fit_lfn+0x10c>)
   18b18:	69bb      	ldr	r3, [r7, #24]
   18b1a:	18d3      	adds	r3, r2, r3
   18b1c:	781b      	ldrb	r3, [r3, #0]
   18b1e:	3301      	adds	r3, #1
   18b20:	68ba      	ldr	r2, [r7, #8]
   18b22:	18d3      	adds	r3, r2, r3
   18b24:	2216      	movs	r2, #22
   18b26:	18ba      	adds	r2, r7, r2
   18b28:	8812      	ldrh	r2, [r2, #0]
   18b2a:	0a12      	lsrs	r2, r2, #8
   18b2c:	b292      	uxth	r2, r2
   18b2e:	b2d2      	uxtb	r2, r2
   18b30:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   18b32:	2316      	movs	r3, #22
   18b34:	18fb      	adds	r3, r7, r3
   18b36:	881b      	ldrh	r3, [r3, #0]
   18b38:	2b00      	cmp	r3, #0
   18b3a:	d104      	bne.n	18b46 <fit_lfn+0xc6>
   18b3c:	2316      	movs	r3, #22
   18b3e:	18fb      	adds	r3, r7, r3
   18b40:	2201      	movs	r2, #1
   18b42:	4252      	negs	r2, r2
   18b44:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   18b46:	69bb      	ldr	r3, [r7, #24]
   18b48:	3301      	adds	r3, #1
   18b4a:	61bb      	str	r3, [r7, #24]
   18b4c:	69bb      	ldr	r3, [r7, #24]
   18b4e:	2b0c      	cmp	r3, #12
   18b50:	d9c5      	bls.n	18ade <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   18b52:	2316      	movs	r3, #22
   18b54:	18fb      	adds	r3, r7, r3
   18b56:	881b      	ldrh	r3, [r3, #0]
   18b58:	4a0b      	ldr	r2, [pc, #44]	; (18b88 <fit_lfn+0x108>)
   18b5a:	4293      	cmp	r3, r2
   18b5c:	d006      	beq.n	18b6c <fit_lfn+0xec>
   18b5e:	69fb      	ldr	r3, [r7, #28]
   18b60:	005b      	lsls	r3, r3, #1
   18b62:	68fa      	ldr	r2, [r7, #12]
   18b64:	18d3      	adds	r3, r2, r3
   18b66:	881b      	ldrh	r3, [r3, #0]
   18b68:	2b00      	cmp	r3, #0
   18b6a:	d105      	bne.n	18b78 <fit_lfn+0xf8>
   18b6c:	1dfb      	adds	r3, r7, #7
   18b6e:	1dfa      	adds	r2, r7, #7
   18b70:	7812      	ldrb	r2, [r2, #0]
   18b72:	2140      	movs	r1, #64	; 0x40
   18b74:	430a      	orrs	r2, r1
   18b76:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   18b78:	68bb      	ldr	r3, [r7, #8]
   18b7a:	1dfa      	adds	r2, r7, #7
   18b7c:	7812      	ldrb	r2, [r2, #0]
   18b7e:	701a      	strb	r2, [r3, #0]
}
   18b80:	46c0      	nop			; (mov r8, r8)
   18b82:	46bd      	mov	sp, r7
   18b84:	b008      	add	sp, #32
   18b86:	bd80      	pop	{r7, pc}
   18b88:	0000ffff 	.word	0x0000ffff
   18b8c:	0002581c 	.word	0x0002581c

00018b90 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   18b90:	b580      	push	{r7, lr}
   18b92:	b08a      	sub	sp, #40	; 0x28
   18b94:	af00      	add	r7, sp, #0
   18b96:	60f8      	str	r0, [r7, #12]
   18b98:	60b9      	str	r1, [r7, #8]
   18b9a:	607a      	str	r2, [r7, #4]
   18b9c:	001a      	movs	r2, r3
   18b9e:	1cbb      	adds	r3, r7, #2
   18ba0:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   18ba2:	68b9      	ldr	r1, [r7, #8]
   18ba4:	68fb      	ldr	r3, [r7, #12]
   18ba6:	220b      	movs	r2, #11
   18ba8:	0018      	movs	r0, r3
   18baa:	4b38      	ldr	r3, [pc, #224]	; (18c8c <gen_numname+0xfc>)
   18bac:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   18bae:	1cbb      	adds	r3, r7, #2
   18bb0:	881b      	ldrh	r3, [r3, #0]
   18bb2:	2b05      	cmp	r3, #5
   18bb4:	d911      	bls.n	18bda <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   18bb6:	1cbb      	adds	r3, r7, #2
   18bb8:	881b      	ldrh	r3, [r3, #0]
   18bba:	b29a      	uxth	r2, r3
   18bbc:	0852      	lsrs	r2, r2, #1
   18bbe:	03db      	lsls	r3, r3, #15
   18bc0:	4313      	orrs	r3, r2
   18bc2:	b299      	uxth	r1, r3
   18bc4:	687b      	ldr	r3, [r7, #4]
   18bc6:	1c9a      	adds	r2, r3, #2
   18bc8:	607a      	str	r2, [r7, #4]
   18bca:	881a      	ldrh	r2, [r3, #0]
   18bcc:	1cbb      	adds	r3, r7, #2
   18bce:	188a      	adds	r2, r1, r2
   18bd0:	801a      	strh	r2, [r3, #0]
   18bd2:	687b      	ldr	r3, [r7, #4]
   18bd4:	881b      	ldrh	r3, [r3, #0]
   18bd6:	2b00      	cmp	r3, #0
   18bd8:	d1ed      	bne.n	18bb6 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   18bda:	2307      	movs	r3, #7
   18bdc:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   18bde:	1cbb      	adds	r3, r7, #2
   18be0:	881b      	ldrh	r3, [r3, #0]
   18be2:	b2db      	uxtb	r3, r3
   18be4:	220f      	movs	r2, #15
   18be6:	4013      	ands	r3, r2
   18be8:	b2da      	uxtb	r2, r3
   18bea:	2327      	movs	r3, #39	; 0x27
   18bec:	18fb      	adds	r3, r7, r3
   18bee:	3230      	adds	r2, #48	; 0x30
   18bf0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   18bf2:	2327      	movs	r3, #39	; 0x27
   18bf4:	18fb      	adds	r3, r7, r3
   18bf6:	781b      	ldrb	r3, [r3, #0]
   18bf8:	2b39      	cmp	r3, #57	; 0x39
   18bfa:	d906      	bls.n	18c0a <gen_numname+0x7a>
   18bfc:	2327      	movs	r3, #39	; 0x27
   18bfe:	18fb      	adds	r3, r7, r3
   18c00:	2227      	movs	r2, #39	; 0x27
   18c02:	18ba      	adds	r2, r7, r2
   18c04:	7812      	ldrb	r2, [r2, #0]
   18c06:	3207      	adds	r2, #7
   18c08:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   18c0a:	6a3b      	ldr	r3, [r7, #32]
   18c0c:	1e5a      	subs	r2, r3, #1
   18c0e:	623a      	str	r2, [r7, #32]
   18c10:	2214      	movs	r2, #20
   18c12:	18ba      	adds	r2, r7, r2
   18c14:	2127      	movs	r1, #39	; 0x27
   18c16:	1879      	adds	r1, r7, r1
   18c18:	7809      	ldrb	r1, [r1, #0]
   18c1a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   18c1c:	1cbb      	adds	r3, r7, #2
   18c1e:	1cba      	adds	r2, r7, #2
   18c20:	8812      	ldrh	r2, [r2, #0]
   18c22:	0912      	lsrs	r2, r2, #4
   18c24:	801a      	strh	r2, [r3, #0]
	} while (seq);
   18c26:	1cbb      	adds	r3, r7, #2
   18c28:	881b      	ldrh	r3, [r3, #0]
   18c2a:	2b00      	cmp	r3, #0
   18c2c:	d1d7      	bne.n	18bde <gen_numname+0x4e>
	ns[i] = '~';
   18c2e:	2314      	movs	r3, #20
   18c30:	18fa      	adds	r2, r7, r3
   18c32:	6a3b      	ldr	r3, [r7, #32]
   18c34:	18d3      	adds	r3, r2, r3
   18c36:	227e      	movs	r2, #126	; 0x7e
   18c38:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   18c3a:	2300      	movs	r3, #0
   18c3c:	61fb      	str	r3, [r7, #28]
   18c3e:	e002      	b.n	18c46 <gen_numname+0xb6>
   18c40:	69fb      	ldr	r3, [r7, #28]
   18c42:	3301      	adds	r3, #1
   18c44:	61fb      	str	r3, [r7, #28]
   18c46:	69fa      	ldr	r2, [r7, #28]
   18c48:	6a3b      	ldr	r3, [r7, #32]
   18c4a:	429a      	cmp	r2, r3
   18c4c:	d205      	bcs.n	18c5a <gen_numname+0xca>
   18c4e:	68fa      	ldr	r2, [r7, #12]
   18c50:	69fb      	ldr	r3, [r7, #28]
   18c52:	18d3      	adds	r3, r2, r3
   18c54:	781b      	ldrb	r3, [r3, #0]
   18c56:	2b20      	cmp	r3, #32
   18c58:	d1f2      	bne.n	18c40 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   18c5a:	69fb      	ldr	r3, [r7, #28]
   18c5c:	1c5a      	adds	r2, r3, #1
   18c5e:	61fa      	str	r2, [r7, #28]
   18c60:	68fa      	ldr	r2, [r7, #12]
   18c62:	18d2      	adds	r2, r2, r3
   18c64:	6a3b      	ldr	r3, [r7, #32]
   18c66:	2b07      	cmp	r3, #7
   18c68:	d806      	bhi.n	18c78 <gen_numname+0xe8>
   18c6a:	6a3b      	ldr	r3, [r7, #32]
   18c6c:	1c59      	adds	r1, r3, #1
   18c6e:	6239      	str	r1, [r7, #32]
   18c70:	2114      	movs	r1, #20
   18c72:	1879      	adds	r1, r7, r1
   18c74:	5ccb      	ldrb	r3, [r1, r3]
   18c76:	e000      	b.n	18c7a <gen_numname+0xea>
   18c78:	2320      	movs	r3, #32
   18c7a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   18c7c:	69fb      	ldr	r3, [r7, #28]
   18c7e:	2b07      	cmp	r3, #7
   18c80:	d9eb      	bls.n	18c5a <gen_numname+0xca>
}
   18c82:	46c0      	nop			; (mov r8, r8)
   18c84:	46bd      	mov	sp, r7
   18c86:	b00a      	add	sp, #40	; 0x28
   18c88:	bd80      	pop	{r7, pc}
   18c8a:	46c0      	nop			; (mov r8, r8)
   18c8c:	00017d35 	.word	0x00017d35

00018c90 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   18c90:	b580      	push	{r7, lr}
   18c92:	b084      	sub	sp, #16
   18c94:	af00      	add	r7, sp, #0
   18c96:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   18c98:	230f      	movs	r3, #15
   18c9a:	18fb      	adds	r3, r7, r3
   18c9c:	2200      	movs	r2, #0
   18c9e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   18ca0:	230b      	movs	r3, #11
   18ca2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   18ca4:	230f      	movs	r3, #15
   18ca6:	18fb      	adds	r3, r7, r3
   18ca8:	781b      	ldrb	r3, [r3, #0]
   18caa:	b2da      	uxtb	r2, r3
   18cac:	0852      	lsrs	r2, r2, #1
   18cae:	01db      	lsls	r3, r3, #7
   18cb0:	4313      	orrs	r3, r2
   18cb2:	b2d9      	uxtb	r1, r3
   18cb4:	687b      	ldr	r3, [r7, #4]
   18cb6:	1c5a      	adds	r2, r3, #1
   18cb8:	607a      	str	r2, [r7, #4]
   18cba:	781a      	ldrb	r2, [r3, #0]
   18cbc:	230f      	movs	r3, #15
   18cbe:	18fb      	adds	r3, r7, r3
   18cc0:	188a      	adds	r2, r1, r2
   18cc2:	701a      	strb	r2, [r3, #0]
   18cc4:	68bb      	ldr	r3, [r7, #8]
   18cc6:	3b01      	subs	r3, #1
   18cc8:	60bb      	str	r3, [r7, #8]
   18cca:	68bb      	ldr	r3, [r7, #8]
   18ccc:	2b00      	cmp	r3, #0
   18cce:	d1e9      	bne.n	18ca4 <sum_sfn+0x14>
	return sum;
   18cd0:	230f      	movs	r3, #15
   18cd2:	18fb      	adds	r3, r7, r3
   18cd4:	781b      	ldrb	r3, [r3, #0]
}
   18cd6:	0018      	movs	r0, r3
   18cd8:	46bd      	mov	sp, r7
   18cda:	b004      	add	sp, #16
   18cdc:	bd80      	pop	{r7, pc}
	...

00018ce0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   18ce0:	b590      	push	{r4, r7, lr}
   18ce2:	b087      	sub	sp, #28
   18ce4:	af00      	add	r7, sp, #0
   18ce6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   18ce8:	2317      	movs	r3, #23
   18cea:	18fc      	adds	r4, r7, r3
   18cec:	687b      	ldr	r3, [r7, #4]
   18cee:	2100      	movs	r1, #0
   18cf0:	0018      	movs	r0, r3
   18cf2:	4b74      	ldr	r3, [pc, #464]	; (18ec4 <dir_find+0x1e4>)
   18cf4:	4798      	blx	r3
   18cf6:	0003      	movs	r3, r0
   18cf8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   18cfa:	2317      	movs	r3, #23
   18cfc:	18fb      	adds	r3, r7, r3
   18cfe:	781b      	ldrb	r3, [r3, #0]
   18d00:	2b00      	cmp	r3, #0
   18d02:	d003      	beq.n	18d0c <dir_find+0x2c>
   18d04:	2317      	movs	r3, #23
   18d06:	18fb      	adds	r3, r7, r3
   18d08:	781b      	ldrb	r3, [r3, #0]
   18d0a:	e0d6      	b.n	18eba <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   18d0c:	2314      	movs	r3, #20
   18d0e:	18fb      	adds	r3, r7, r3
   18d10:	22ff      	movs	r2, #255	; 0xff
   18d12:	701a      	strb	r2, [r3, #0]
   18d14:	2315      	movs	r3, #21
   18d16:	18fb      	adds	r3, r7, r3
   18d18:	2214      	movs	r2, #20
   18d1a:	18ba      	adds	r2, r7, r2
   18d1c:	7812      	ldrb	r2, [r2, #0]
   18d1e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   18d20:	687b      	ldr	r3, [r7, #4]
   18d22:	681a      	ldr	r2, [r3, #0]
   18d24:	687b      	ldr	r3, [r7, #4]
   18d26:	691b      	ldr	r3, [r3, #16]
   18d28:	2117      	movs	r1, #23
   18d2a:	187c      	adds	r4, r7, r1
   18d2c:	0019      	movs	r1, r3
   18d2e:	0010      	movs	r0, r2
   18d30:	4b65      	ldr	r3, [pc, #404]	; (18ec8 <dir_find+0x1e8>)
   18d32:	4798      	blx	r3
   18d34:	0003      	movs	r3, r0
   18d36:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   18d38:	2317      	movs	r3, #23
   18d3a:	18fb      	adds	r3, r7, r3
   18d3c:	781b      	ldrb	r3, [r3, #0]
   18d3e:	2b00      	cmp	r3, #0
   18d40:	d000      	beq.n	18d44 <dir_find+0x64>
   18d42:	e0b2      	b.n	18eaa <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   18d44:	687b      	ldr	r3, [r7, #4]
   18d46:	695b      	ldr	r3, [r3, #20]
   18d48:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   18d4a:	2316      	movs	r3, #22
   18d4c:	18fb      	adds	r3, r7, r3
   18d4e:	693a      	ldr	r2, [r7, #16]
   18d50:	7812      	ldrb	r2, [r2, #0]
   18d52:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   18d54:	2316      	movs	r3, #22
   18d56:	18fb      	adds	r3, r7, r3
   18d58:	781b      	ldrb	r3, [r3, #0]
   18d5a:	2b00      	cmp	r3, #0
   18d5c:	d104      	bne.n	18d68 <dir_find+0x88>
   18d5e:	2317      	movs	r3, #23
   18d60:	18fb      	adds	r3, r7, r3
   18d62:	2204      	movs	r2, #4
   18d64:	701a      	strb	r2, [r3, #0]
   18d66:	e0a5      	b.n	18eb4 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   18d68:	693b      	ldr	r3, [r7, #16]
   18d6a:	330b      	adds	r3, #11
   18d6c:	781a      	ldrb	r2, [r3, #0]
   18d6e:	230f      	movs	r3, #15
   18d70:	18fb      	adds	r3, r7, r3
   18d72:	213f      	movs	r1, #63	; 0x3f
   18d74:	400a      	ands	r2, r1
   18d76:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   18d78:	2316      	movs	r3, #22
   18d7a:	18fb      	adds	r3, r7, r3
   18d7c:	781b      	ldrb	r3, [r3, #0]
   18d7e:	2be5      	cmp	r3, #229	; 0xe5
   18d80:	d00a      	beq.n	18d98 <dir_find+0xb8>
   18d82:	230f      	movs	r3, #15
   18d84:	18fb      	adds	r3, r7, r3
   18d86:	781b      	ldrb	r3, [r3, #0]
   18d88:	2208      	movs	r2, #8
   18d8a:	4013      	ands	r3, r2
   18d8c:	d009      	beq.n	18da2 <dir_find+0xc2>
   18d8e:	230f      	movs	r3, #15
   18d90:	18fb      	adds	r3, r7, r3
   18d92:	781b      	ldrb	r3, [r3, #0]
   18d94:	2b0f      	cmp	r3, #15
   18d96:	d004      	beq.n	18da2 <dir_find+0xc2>
			ord = 0xFF;
   18d98:	2315      	movs	r3, #21
   18d9a:	18fb      	adds	r3, r7, r3
   18d9c:	22ff      	movs	r2, #255	; 0xff
   18d9e:	701a      	strb	r2, [r3, #0]
   18da0:	e073      	b.n	18e8a <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   18da2:	230f      	movs	r3, #15
   18da4:	18fb      	adds	r3, r7, r3
   18da6:	781b      	ldrb	r3, [r3, #0]
   18da8:	2b0f      	cmp	r3, #15
   18daa:	d145      	bne.n	18e38 <dir_find+0x158>
				if (dj->lfn) {
   18dac:	687b      	ldr	r3, [r7, #4]
   18dae:	69db      	ldr	r3, [r3, #28]
   18db0:	2b00      	cmp	r3, #0
   18db2:	d100      	bne.n	18db6 <dir_find+0xd6>
   18db4:	e069      	b.n	18e8a <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   18db6:	2316      	movs	r3, #22
   18db8:	18fb      	adds	r3, r7, r3
   18dba:	781b      	ldrb	r3, [r3, #0]
   18dbc:	2240      	movs	r2, #64	; 0x40
   18dbe:	4013      	ands	r3, r2
   18dc0:	d016      	beq.n	18df0 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   18dc2:	2314      	movs	r3, #20
   18dc4:	18fb      	adds	r3, r7, r3
   18dc6:	693a      	ldr	r2, [r7, #16]
   18dc8:	7b52      	ldrb	r2, [r2, #13]
   18dca:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   18dcc:	2316      	movs	r3, #22
   18dce:	18fb      	adds	r3, r7, r3
   18dd0:	2216      	movs	r2, #22
   18dd2:	18ba      	adds	r2, r7, r2
   18dd4:	7812      	ldrb	r2, [r2, #0]
   18dd6:	2140      	movs	r1, #64	; 0x40
   18dd8:	438a      	bics	r2, r1
   18dda:	701a      	strb	r2, [r3, #0]
   18ddc:	2315      	movs	r3, #21
   18dde:	18fb      	adds	r3, r7, r3
   18de0:	2216      	movs	r2, #22
   18de2:	18ba      	adds	r2, r7, r2
   18de4:	7812      	ldrb	r2, [r2, #0]
   18de6:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   18de8:	687b      	ldr	r3, [r7, #4]
   18dea:	88da      	ldrh	r2, [r3, #6]
   18dec:	687b      	ldr	r3, [r7, #4]
   18dee:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   18df0:	2316      	movs	r3, #22
   18df2:	18fa      	adds	r2, r7, r3
   18df4:	2315      	movs	r3, #21
   18df6:	18fb      	adds	r3, r7, r3
   18df8:	7812      	ldrb	r2, [r2, #0]
   18dfa:	781b      	ldrb	r3, [r3, #0]
   18dfc:	429a      	cmp	r2, r3
   18dfe:	d116      	bne.n	18e2e <dir_find+0x14e>
   18e00:	693b      	ldr	r3, [r7, #16]
   18e02:	330d      	adds	r3, #13
   18e04:	781b      	ldrb	r3, [r3, #0]
   18e06:	2214      	movs	r2, #20
   18e08:	18ba      	adds	r2, r7, r2
   18e0a:	7812      	ldrb	r2, [r2, #0]
   18e0c:	429a      	cmp	r2, r3
   18e0e:	d10e      	bne.n	18e2e <dir_find+0x14e>
   18e10:	687b      	ldr	r3, [r7, #4]
   18e12:	69db      	ldr	r3, [r3, #28]
   18e14:	693a      	ldr	r2, [r7, #16]
   18e16:	0011      	movs	r1, r2
   18e18:	0018      	movs	r0, r3
   18e1a:	4b2c      	ldr	r3, [pc, #176]	; (18ecc <dir_find+0x1ec>)
   18e1c:	4798      	blx	r3
   18e1e:	1e03      	subs	r3, r0, #0
   18e20:	d005      	beq.n	18e2e <dir_find+0x14e>
   18e22:	2315      	movs	r3, #21
   18e24:	18fb      	adds	r3, r7, r3
   18e26:	781b      	ldrb	r3, [r3, #0]
   18e28:	3b01      	subs	r3, #1
   18e2a:	b2da      	uxtb	r2, r3
   18e2c:	e000      	b.n	18e30 <dir_find+0x150>
   18e2e:	22ff      	movs	r2, #255	; 0xff
   18e30:	2315      	movs	r3, #21
   18e32:	18fb      	adds	r3, r7, r3
   18e34:	701a      	strb	r2, [r3, #0]
   18e36:	e028      	b.n	18e8a <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   18e38:	2315      	movs	r3, #21
   18e3a:	18fb      	adds	r3, r7, r3
   18e3c:	781b      	ldrb	r3, [r3, #0]
   18e3e:	2b00      	cmp	r3, #0
   18e40:	d10a      	bne.n	18e58 <dir_find+0x178>
   18e42:	693b      	ldr	r3, [r7, #16]
   18e44:	0018      	movs	r0, r3
   18e46:	4b22      	ldr	r3, [pc, #136]	; (18ed0 <dir_find+0x1f0>)
   18e48:	4798      	blx	r3
   18e4a:	0003      	movs	r3, r0
   18e4c:	001a      	movs	r2, r3
   18e4e:	2314      	movs	r3, #20
   18e50:	18fb      	adds	r3, r7, r3
   18e52:	781b      	ldrb	r3, [r3, #0]
   18e54:	4293      	cmp	r3, r2
   18e56:	d02a      	beq.n	18eae <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   18e58:	2315      	movs	r3, #21
   18e5a:	18fb      	adds	r3, r7, r3
   18e5c:	22ff      	movs	r2, #255	; 0xff
   18e5e:	701a      	strb	r2, [r3, #0]
   18e60:	687b      	ldr	r3, [r7, #4]
   18e62:	2201      	movs	r2, #1
   18e64:	4252      	negs	r2, r2
   18e66:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   18e68:	687b      	ldr	r3, [r7, #4]
   18e6a:	699b      	ldr	r3, [r3, #24]
   18e6c:	330b      	adds	r3, #11
   18e6e:	781b      	ldrb	r3, [r3, #0]
   18e70:	001a      	movs	r2, r3
   18e72:	2301      	movs	r3, #1
   18e74:	4013      	ands	r3, r2
   18e76:	d108      	bne.n	18e8a <dir_find+0x1aa>
   18e78:	687b      	ldr	r3, [r7, #4]
   18e7a:	6999      	ldr	r1, [r3, #24]
   18e7c:	693b      	ldr	r3, [r7, #16]
   18e7e:	220b      	movs	r2, #11
   18e80:	0018      	movs	r0, r3
   18e82:	4b14      	ldr	r3, [pc, #80]	; (18ed4 <dir_find+0x1f4>)
   18e84:	4798      	blx	r3
   18e86:	1e03      	subs	r3, r0, #0
   18e88:	d013      	beq.n	18eb2 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   18e8a:	2317      	movs	r3, #23
   18e8c:	18fc      	adds	r4, r7, r3
   18e8e:	687b      	ldr	r3, [r7, #4]
   18e90:	2100      	movs	r1, #0
   18e92:	0018      	movs	r0, r3
   18e94:	4b10      	ldr	r3, [pc, #64]	; (18ed8 <dir_find+0x1f8>)
   18e96:	4798      	blx	r3
   18e98:	0003      	movs	r3, r0
   18e9a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   18e9c:	2317      	movs	r3, #23
   18e9e:	18fb      	adds	r3, r7, r3
   18ea0:	781b      	ldrb	r3, [r3, #0]
   18ea2:	2b00      	cmp	r3, #0
   18ea4:	d100      	bne.n	18ea8 <dir_find+0x1c8>
   18ea6:	e73b      	b.n	18d20 <dir_find+0x40>
   18ea8:	e004      	b.n	18eb4 <dir_find+0x1d4>
		if (res != FR_OK) break;
   18eaa:	46c0      	nop			; (mov r8, r8)
   18eac:	e002      	b.n	18eb4 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   18eae:	46c0      	nop			; (mov r8, r8)
   18eb0:	e000      	b.n	18eb4 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   18eb2:	46c0      	nop			; (mov r8, r8)

	return res;
   18eb4:	2317      	movs	r3, #23
   18eb6:	18fb      	adds	r3, r7, r3
   18eb8:	781b      	ldrb	r3, [r3, #0]
}
   18eba:	0018      	movs	r0, r3
   18ebc:	46bd      	mov	sp, r7
   18ebe:	b007      	add	sp, #28
   18ec0:	bd90      	pop	{r4, r7, pc}
   18ec2:	46c0      	nop			; (mov r8, r8)
   18ec4:	0001865d 	.word	0x0001865d
   18ec8:	00017e19 	.word	0x00017e19
   18ecc:	0001897d 	.word	0x0001897d
   18ed0:	00018c91 	.word	0x00018c91
   18ed4:	00017d9d 	.word	0x00017d9d
   18ed8:	0001878d 	.word	0x0001878d

00018edc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   18edc:	b590      	push	{r4, r7, lr}
   18ede:	b08d      	sub	sp, #52	; 0x34
   18ee0:	af00      	add	r7, sp, #0
   18ee2:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   18ee4:	687b      	ldr	r3, [r7, #4]
   18ee6:	699b      	ldr	r3, [r3, #24]
   18ee8:	627b      	str	r3, [r7, #36]	; 0x24
   18eea:	687b      	ldr	r3, [r7, #4]
   18eec:	69db      	ldr	r3, [r3, #28]
   18eee:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   18ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   18ef2:	230c      	movs	r3, #12
   18ef4:	18fb      	adds	r3, r7, r3
   18ef6:	220c      	movs	r2, #12
   18ef8:	0018      	movs	r0, r3
   18efa:	4bc8      	ldr	r3, [pc, #800]	; (1921c <dir_register+0x340>)
   18efc:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   18efe:	230c      	movs	r3, #12
   18f00:	18fb      	adds	r3, r7, r3
   18f02:	7adb      	ldrb	r3, [r3, #11]
   18f04:	001a      	movs	r2, r3
   18f06:	2301      	movs	r3, #1
   18f08:	4013      	ands	r3, r2
   18f0a:	d048      	beq.n	18f9e <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   18f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18f0e:	330b      	adds	r3, #11
   18f10:	2200      	movs	r2, #0
   18f12:	701a      	strb	r2, [r3, #0]
   18f14:	687b      	ldr	r3, [r7, #4]
   18f16:	2200      	movs	r2, #0
   18f18:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   18f1a:	232c      	movs	r3, #44	; 0x2c
   18f1c:	18fb      	adds	r3, r7, r3
   18f1e:	2201      	movs	r2, #1
   18f20:	801a      	strh	r2, [r3, #0]
   18f22:	e01c      	b.n	18f5e <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   18f24:	232c      	movs	r3, #44	; 0x2c
   18f26:	18fb      	adds	r3, r7, r3
   18f28:	881b      	ldrh	r3, [r3, #0]
   18f2a:	6a3a      	ldr	r2, [r7, #32]
   18f2c:	210c      	movs	r1, #12
   18f2e:	1879      	adds	r1, r7, r1
   18f30:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18f32:	4cbb      	ldr	r4, [pc, #748]	; (19220 <dir_register+0x344>)
   18f34:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   18f36:	232f      	movs	r3, #47	; 0x2f
   18f38:	18fc      	adds	r4, r7, r3
   18f3a:	687b      	ldr	r3, [r7, #4]
   18f3c:	0018      	movs	r0, r3
   18f3e:	4bb9      	ldr	r3, [pc, #740]	; (19224 <dir_register+0x348>)
   18f40:	4798      	blx	r3
   18f42:	0003      	movs	r3, r0
   18f44:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   18f46:	232f      	movs	r3, #47	; 0x2f
   18f48:	18fb      	adds	r3, r7, r3
   18f4a:	781b      	ldrb	r3, [r3, #0]
   18f4c:	2b00      	cmp	r3, #0
   18f4e:	d10c      	bne.n	18f6a <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   18f50:	232c      	movs	r3, #44	; 0x2c
   18f52:	18fb      	adds	r3, r7, r3
   18f54:	881a      	ldrh	r2, [r3, #0]
   18f56:	232c      	movs	r3, #44	; 0x2c
   18f58:	18fb      	adds	r3, r7, r3
   18f5a:	3201      	adds	r2, #1
   18f5c:	801a      	strh	r2, [r3, #0]
   18f5e:	232c      	movs	r3, #44	; 0x2c
   18f60:	18fb      	adds	r3, r7, r3
   18f62:	881b      	ldrh	r3, [r3, #0]
   18f64:	2b63      	cmp	r3, #99	; 0x63
   18f66:	d9dd      	bls.n	18f24 <dir_register+0x48>
   18f68:	e000      	b.n	18f6c <dir_register+0x90>
			if (res != FR_OK) break;
   18f6a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   18f6c:	232c      	movs	r3, #44	; 0x2c
   18f6e:	18fb      	adds	r3, r7, r3
   18f70:	881b      	ldrh	r3, [r3, #0]
   18f72:	2b64      	cmp	r3, #100	; 0x64
   18f74:	d101      	bne.n	18f7a <dir_register+0x9e>
   18f76:	2307      	movs	r3, #7
   18f78:	e14c      	b.n	19214 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   18f7a:	232f      	movs	r3, #47	; 0x2f
   18f7c:	18fb      	adds	r3, r7, r3
   18f7e:	781b      	ldrb	r3, [r3, #0]
   18f80:	2b04      	cmp	r3, #4
   18f82:	d003      	beq.n	18f8c <dir_register+0xb0>
   18f84:	232f      	movs	r3, #47	; 0x2f
   18f86:	18fb      	adds	r3, r7, r3
   18f88:	781b      	ldrb	r3, [r3, #0]
   18f8a:	e143      	b.n	19214 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   18f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18f8e:	330b      	adds	r3, #11
   18f90:	220c      	movs	r2, #12
   18f92:	18ba      	adds	r2, r7, r2
   18f94:	7ad2      	ldrb	r2, [r2, #11]
   18f96:	701a      	strb	r2, [r3, #0]
   18f98:	687b      	ldr	r3, [r7, #4]
   18f9a:	6a3a      	ldr	r2, [r7, #32]
   18f9c:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   18f9e:	230c      	movs	r3, #12
   18fa0:	18fb      	adds	r3, r7, r3
   18fa2:	7adb      	ldrb	r3, [r3, #11]
   18fa4:	001a      	movs	r2, r3
   18fa6:	2302      	movs	r3, #2
   18fa8:	4013      	ands	r3, r2
   18faa:	d023      	beq.n	18ff4 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   18fac:	232a      	movs	r3, #42	; 0x2a
   18fae:	18fb      	adds	r3, r7, r3
   18fb0:	2200      	movs	r2, #0
   18fb2:	801a      	strh	r2, [r3, #0]
   18fb4:	e006      	b.n	18fc4 <dir_register+0xe8>
   18fb6:	232a      	movs	r3, #42	; 0x2a
   18fb8:	18fb      	adds	r3, r7, r3
   18fba:	881a      	ldrh	r2, [r3, #0]
   18fbc:	232a      	movs	r3, #42	; 0x2a
   18fbe:	18fb      	adds	r3, r7, r3
   18fc0:	3201      	adds	r2, #1
   18fc2:	801a      	strh	r2, [r3, #0]
   18fc4:	232a      	movs	r3, #42	; 0x2a
   18fc6:	18fb      	adds	r3, r7, r3
   18fc8:	881b      	ldrh	r3, [r3, #0]
   18fca:	005b      	lsls	r3, r3, #1
   18fcc:	6a3a      	ldr	r2, [r7, #32]
   18fce:	18d3      	adds	r3, r2, r3
   18fd0:	881b      	ldrh	r3, [r3, #0]
   18fd2:	2b00      	cmp	r3, #0
   18fd4:	d1ef      	bne.n	18fb6 <dir_register+0xda>
		ne = (ne + 25) / 13;
   18fd6:	232a      	movs	r3, #42	; 0x2a
   18fd8:	18fb      	adds	r3, r7, r3
   18fda:	881b      	ldrh	r3, [r3, #0]
   18fdc:	3319      	adds	r3, #25
   18fde:	001a      	movs	r2, r3
   18fe0:	4b91      	ldr	r3, [pc, #580]	; (19228 <dir_register+0x34c>)
   18fe2:	210d      	movs	r1, #13
   18fe4:	0010      	movs	r0, r2
   18fe6:	4798      	blx	r3
   18fe8:	0003      	movs	r3, r0
   18fea:	001a      	movs	r2, r3
   18fec:	232a      	movs	r3, #42	; 0x2a
   18fee:	18fb      	adds	r3, r7, r3
   18ff0:	801a      	strh	r2, [r3, #0]
   18ff2:	e003      	b.n	18ffc <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   18ff4:	232a      	movs	r3, #42	; 0x2a
   18ff6:	18fb      	adds	r3, r7, r3
   18ff8:	2201      	movs	r2, #1
   18ffa:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   18ffc:	232f      	movs	r3, #47	; 0x2f
   18ffe:	18fc      	adds	r4, r7, r3
   19000:	687b      	ldr	r3, [r7, #4]
   19002:	2100      	movs	r1, #0
   19004:	0018      	movs	r0, r3
   19006:	4b89      	ldr	r3, [pc, #548]	; (1922c <dir_register+0x350>)
   19008:	4798      	blx	r3
   1900a:	0003      	movs	r3, r0
   1900c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   1900e:	232f      	movs	r3, #47	; 0x2f
   19010:	18fb      	adds	r3, r7, r3
   19012:	781b      	ldrb	r3, [r3, #0]
   19014:	2b00      	cmp	r3, #0
   19016:	d003      	beq.n	19020 <dir_register+0x144>
   19018:	232f      	movs	r3, #47	; 0x2f
   1901a:	18fb      	adds	r3, r7, r3
   1901c:	781b      	ldrb	r3, [r3, #0]
   1901e:	e0f9      	b.n	19214 <dir_register+0x338>
	n = is = 0;
   19020:	2328      	movs	r3, #40	; 0x28
   19022:	18fb      	adds	r3, r7, r3
   19024:	2200      	movs	r2, #0
   19026:	801a      	strh	r2, [r3, #0]
   19028:	232c      	movs	r3, #44	; 0x2c
   1902a:	18fb      	adds	r3, r7, r3
   1902c:	2228      	movs	r2, #40	; 0x28
   1902e:	18ba      	adds	r2, r7, r2
   19030:	8812      	ldrh	r2, [r2, #0]
   19032:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   19034:	687b      	ldr	r3, [r7, #4]
   19036:	681a      	ldr	r2, [r3, #0]
   19038:	687b      	ldr	r3, [r7, #4]
   1903a:	691b      	ldr	r3, [r3, #16]
   1903c:	212f      	movs	r1, #47	; 0x2f
   1903e:	187c      	adds	r4, r7, r1
   19040:	0019      	movs	r1, r3
   19042:	0010      	movs	r0, r2
   19044:	4b7a      	ldr	r3, [pc, #488]	; (19230 <dir_register+0x354>)
   19046:	4798      	blx	r3
   19048:	0003      	movs	r3, r0
   1904a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   1904c:	232f      	movs	r3, #47	; 0x2f
   1904e:	18fb      	adds	r3, r7, r3
   19050:	781b      	ldrb	r3, [r3, #0]
   19052:	2b00      	cmp	r3, #0
   19054:	d13c      	bne.n	190d0 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   19056:	687b      	ldr	r3, [r7, #4]
   19058:	695a      	ldr	r2, [r3, #20]
   1905a:	231f      	movs	r3, #31
   1905c:	18fb      	adds	r3, r7, r3
   1905e:	7812      	ldrb	r2, [r2, #0]
   19060:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   19062:	231f      	movs	r3, #31
   19064:	18fb      	adds	r3, r7, r3
   19066:	781b      	ldrb	r3, [r3, #0]
   19068:	2be5      	cmp	r3, #229	; 0xe5
   1906a:	d004      	beq.n	19076 <dir_register+0x19a>
   1906c:	231f      	movs	r3, #31
   1906e:	18fb      	adds	r3, r7, r3
   19070:	781b      	ldrb	r3, [r3, #0]
   19072:	2b00      	cmp	r3, #0
   19074:	d119      	bne.n	190aa <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   19076:	232c      	movs	r3, #44	; 0x2c
   19078:	18fb      	adds	r3, r7, r3
   1907a:	881b      	ldrh	r3, [r3, #0]
   1907c:	2b00      	cmp	r3, #0
   1907e:	d104      	bne.n	1908a <dir_register+0x1ae>
   19080:	2328      	movs	r3, #40	; 0x28
   19082:	18fb      	adds	r3, r7, r3
   19084:	687a      	ldr	r2, [r7, #4]
   19086:	88d2      	ldrh	r2, [r2, #6]
   19088:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   1908a:	232c      	movs	r3, #44	; 0x2c
   1908c:	18fb      	adds	r3, r7, r3
   1908e:	222c      	movs	r2, #44	; 0x2c
   19090:	18ba      	adds	r2, r7, r2
   19092:	8812      	ldrh	r2, [r2, #0]
   19094:	3201      	adds	r2, #1
   19096:	801a      	strh	r2, [r3, #0]
   19098:	232c      	movs	r3, #44	; 0x2c
   1909a:	18fa      	adds	r2, r7, r3
   1909c:	232a      	movs	r3, #42	; 0x2a
   1909e:	18fb      	adds	r3, r7, r3
   190a0:	8812      	ldrh	r2, [r2, #0]
   190a2:	881b      	ldrh	r3, [r3, #0]
   190a4:	429a      	cmp	r2, r3
   190a6:	d104      	bne.n	190b2 <dir_register+0x1d6>
   190a8:	e013      	b.n	190d2 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   190aa:	232c      	movs	r3, #44	; 0x2c
   190ac:	18fb      	adds	r3, r7, r3
   190ae:	2200      	movs	r2, #0
   190b0:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   190b2:	232f      	movs	r3, #47	; 0x2f
   190b4:	18fc      	adds	r4, r7, r3
   190b6:	687b      	ldr	r3, [r7, #4]
   190b8:	2101      	movs	r1, #1
   190ba:	0018      	movs	r0, r3
   190bc:	4b5d      	ldr	r3, [pc, #372]	; (19234 <dir_register+0x358>)
   190be:	4798      	blx	r3
   190c0:	0003      	movs	r3, r0
   190c2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   190c4:	232f      	movs	r3, #47	; 0x2f
   190c6:	18fb      	adds	r3, r7, r3
   190c8:	781b      	ldrb	r3, [r3, #0]
   190ca:	2b00      	cmp	r3, #0
   190cc:	d0b2      	beq.n	19034 <dir_register+0x158>
   190ce:	e000      	b.n	190d2 <dir_register+0x1f6>
		if (res != FR_OK) break;
   190d0:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   190d2:	232f      	movs	r3, #47	; 0x2f
   190d4:	18fb      	adds	r3, r7, r3
   190d6:	781b      	ldrb	r3, [r3, #0]
   190d8:	2b00      	cmp	r3, #0
   190da:	d163      	bne.n	191a4 <dir_register+0x2c8>
   190dc:	232a      	movs	r3, #42	; 0x2a
   190de:	18fb      	adds	r3, r7, r3
   190e0:	881b      	ldrh	r3, [r3, #0]
   190e2:	2b01      	cmp	r3, #1
   190e4:	d95e      	bls.n	191a4 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   190e6:	232f      	movs	r3, #47	; 0x2f
   190e8:	18fc      	adds	r4, r7, r3
   190ea:	2328      	movs	r3, #40	; 0x28
   190ec:	18fb      	adds	r3, r7, r3
   190ee:	881a      	ldrh	r2, [r3, #0]
   190f0:	687b      	ldr	r3, [r7, #4]
   190f2:	0011      	movs	r1, r2
   190f4:	0018      	movs	r0, r3
   190f6:	4b4d      	ldr	r3, [pc, #308]	; (1922c <dir_register+0x350>)
   190f8:	4798      	blx	r3
   190fa:	0003      	movs	r3, r0
   190fc:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   190fe:	232f      	movs	r3, #47	; 0x2f
   19100:	18fb      	adds	r3, r7, r3
   19102:	781b      	ldrb	r3, [r3, #0]
   19104:	2b00      	cmp	r3, #0
   19106:	d14d      	bne.n	191a4 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   19108:	687b      	ldr	r3, [r7, #4]
   1910a:	699b      	ldr	r3, [r3, #24]
   1910c:	221e      	movs	r2, #30
   1910e:	18bc      	adds	r4, r7, r2
   19110:	0018      	movs	r0, r3
   19112:	4b49      	ldr	r3, [pc, #292]	; (19238 <dir_register+0x35c>)
   19114:	4798      	blx	r3
   19116:	0003      	movs	r3, r0
   19118:	7023      	strb	r3, [r4, #0]
			ne--;
   1911a:	232a      	movs	r3, #42	; 0x2a
   1911c:	18fb      	adds	r3, r7, r3
   1911e:	881a      	ldrh	r2, [r3, #0]
   19120:	232a      	movs	r3, #42	; 0x2a
   19122:	18fb      	adds	r3, r7, r3
   19124:	3a01      	subs	r2, #1
   19126:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   19128:	687b      	ldr	r3, [r7, #4]
   1912a:	681a      	ldr	r2, [r3, #0]
   1912c:	687b      	ldr	r3, [r7, #4]
   1912e:	691b      	ldr	r3, [r3, #16]
   19130:	212f      	movs	r1, #47	; 0x2f
   19132:	187c      	adds	r4, r7, r1
   19134:	0019      	movs	r1, r3
   19136:	0010      	movs	r0, r2
   19138:	4b3d      	ldr	r3, [pc, #244]	; (19230 <dir_register+0x354>)
   1913a:	4798      	blx	r3
   1913c:	0003      	movs	r3, r0
   1913e:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   19140:	232f      	movs	r3, #47	; 0x2f
   19142:	18fb      	adds	r3, r7, r3
   19144:	781b      	ldrb	r3, [r3, #0]
   19146:	2b00      	cmp	r3, #0
   19148:	d12b      	bne.n	191a2 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   1914a:	687b      	ldr	r3, [r7, #4]
   1914c:	69d8      	ldr	r0, [r3, #28]
   1914e:	687b      	ldr	r3, [r7, #4]
   19150:	6959      	ldr	r1, [r3, #20]
   19152:	232a      	movs	r3, #42	; 0x2a
   19154:	18fb      	adds	r3, r7, r3
   19156:	881b      	ldrh	r3, [r3, #0]
   19158:	b2da      	uxtb	r2, r3
   1915a:	231e      	movs	r3, #30
   1915c:	18fb      	adds	r3, r7, r3
   1915e:	781b      	ldrb	r3, [r3, #0]
   19160:	4c36      	ldr	r4, [pc, #216]	; (1923c <dir_register+0x360>)
   19162:	47a0      	blx	r4
				dj->fs->wflag = 1;
   19164:	687b      	ldr	r3, [r7, #4]
   19166:	681b      	ldr	r3, [r3, #0]
   19168:	2201      	movs	r2, #1
   1916a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   1916c:	232f      	movs	r3, #47	; 0x2f
   1916e:	18fc      	adds	r4, r7, r3
   19170:	687b      	ldr	r3, [r7, #4]
   19172:	2100      	movs	r1, #0
   19174:	0018      	movs	r0, r3
   19176:	4b2f      	ldr	r3, [pc, #188]	; (19234 <dir_register+0x358>)
   19178:	4798      	blx	r3
   1917a:	0003      	movs	r3, r0
   1917c:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   1917e:	232f      	movs	r3, #47	; 0x2f
   19180:	18fb      	adds	r3, r7, r3
   19182:	781b      	ldrb	r3, [r3, #0]
   19184:	2b00      	cmp	r3, #0
   19186:	d10d      	bne.n	191a4 <dir_register+0x2c8>
   19188:	232a      	movs	r3, #42	; 0x2a
   1918a:	18fb      	adds	r3, r7, r3
   1918c:	222a      	movs	r2, #42	; 0x2a
   1918e:	18ba      	adds	r2, r7, r2
   19190:	8812      	ldrh	r2, [r2, #0]
   19192:	3a01      	subs	r2, #1
   19194:	801a      	strh	r2, [r3, #0]
   19196:	232a      	movs	r3, #42	; 0x2a
   19198:	18fb      	adds	r3, r7, r3
   1919a:	881b      	ldrh	r3, [r3, #0]
   1919c:	2b00      	cmp	r3, #0
   1919e:	d1c3      	bne.n	19128 <dir_register+0x24c>
   191a0:	e000      	b.n	191a4 <dir_register+0x2c8>
				if (res != FR_OK) break;
   191a2:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   191a4:	232f      	movs	r3, #47	; 0x2f
   191a6:	18fb      	adds	r3, r7, r3
   191a8:	781b      	ldrb	r3, [r3, #0]
   191aa:	2b00      	cmp	r3, #0
   191ac:	d12f      	bne.n	1920e <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   191ae:	687b      	ldr	r3, [r7, #4]
   191b0:	681a      	ldr	r2, [r3, #0]
   191b2:	687b      	ldr	r3, [r7, #4]
   191b4:	691b      	ldr	r3, [r3, #16]
   191b6:	212f      	movs	r1, #47	; 0x2f
   191b8:	187c      	adds	r4, r7, r1
   191ba:	0019      	movs	r1, r3
   191bc:	0010      	movs	r0, r2
   191be:	4b1c      	ldr	r3, [pc, #112]	; (19230 <dir_register+0x354>)
   191c0:	4798      	blx	r3
   191c2:	0003      	movs	r3, r0
   191c4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   191c6:	232f      	movs	r3, #47	; 0x2f
   191c8:	18fb      	adds	r3, r7, r3
   191ca:	781b      	ldrb	r3, [r3, #0]
   191cc:	2b00      	cmp	r3, #0
   191ce:	d11e      	bne.n	1920e <dir_register+0x332>
			dir = dj->dir;
   191d0:	687b      	ldr	r3, [r7, #4]
   191d2:	695b      	ldr	r3, [r3, #20]
   191d4:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   191d6:	69bb      	ldr	r3, [r7, #24]
   191d8:	2220      	movs	r2, #32
   191da:	2100      	movs	r1, #0
   191dc:	0018      	movs	r0, r3
   191de:	4b18      	ldr	r3, [pc, #96]	; (19240 <dir_register+0x364>)
   191e0:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   191e2:	687b      	ldr	r3, [r7, #4]
   191e4:	6999      	ldr	r1, [r3, #24]
   191e6:	69bb      	ldr	r3, [r7, #24]
   191e8:	220b      	movs	r2, #11
   191ea:	0018      	movs	r0, r3
   191ec:	4b0b      	ldr	r3, [pc, #44]	; (1921c <dir_register+0x340>)
   191ee:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   191f0:	69bb      	ldr	r3, [r7, #24]
   191f2:	330c      	adds	r3, #12
   191f4:	001a      	movs	r2, r3
   191f6:	687b      	ldr	r3, [r7, #4]
   191f8:	699b      	ldr	r3, [r3, #24]
   191fa:	330b      	adds	r3, #11
   191fc:	781b      	ldrb	r3, [r3, #0]
   191fe:	2118      	movs	r1, #24
   19200:	400b      	ands	r3, r1
   19202:	b2db      	uxtb	r3, r3
   19204:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   19206:	687b      	ldr	r3, [r7, #4]
   19208:	681b      	ldr	r3, [r3, #0]
   1920a:	2201      	movs	r2, #1
   1920c:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   1920e:	232f      	movs	r3, #47	; 0x2f
   19210:	18fb      	adds	r3, r7, r3
   19212:	781b      	ldrb	r3, [r3, #0]
}
   19214:	0018      	movs	r0, r3
   19216:	46bd      	mov	sp, r7
   19218:	b00d      	add	sp, #52	; 0x34
   1921a:	bd90      	pop	{r4, r7, pc}
   1921c:	00017d35 	.word	0x00017d35
   19220:	00018b91 	.word	0x00018b91
   19224:	00018ce1 	.word	0x00018ce1
   19228:	0001f059 	.word	0x0001f059
   1922c:	0001865d 	.word	0x0001865d
   19230:	00017e19 	.word	0x00017e19
   19234:	0001878d 	.word	0x0001878d
   19238:	00018c91 	.word	0x00018c91
   1923c:	00018a81 	.word	0x00018a81
   19240:	00017d6d 	.word	0x00017d6d

00019244 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   19244:	b590      	push	{r4, r7, lr}
   19246:	b08b      	sub	sp, #44	; 0x2c
   19248:	af00      	add	r7, sp, #0
   1924a:	6078      	str	r0, [r7, #4]
   1924c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   1924e:	683b      	ldr	r3, [r7, #0]
   19250:	681b      	ldr	r3, [r3, #0]
   19252:	613b      	str	r3, [r7, #16]
   19254:	e002      	b.n	1925c <create_name+0x18>
   19256:	693b      	ldr	r3, [r7, #16]
   19258:	3301      	adds	r3, #1
   1925a:	613b      	str	r3, [r7, #16]
   1925c:	693b      	ldr	r3, [r7, #16]
   1925e:	781b      	ldrb	r3, [r3, #0]
   19260:	2b2f      	cmp	r3, #47	; 0x2f
   19262:	d0f8      	beq.n	19256 <create_name+0x12>
   19264:	693b      	ldr	r3, [r7, #16]
   19266:	781b      	ldrb	r3, [r3, #0]
   19268:	2b5c      	cmp	r3, #92	; 0x5c
   1926a:	d0f4      	beq.n	19256 <create_name+0x12>
	lfn = dj->lfn;
   1926c:	687b      	ldr	r3, [r7, #4]
   1926e:	69db      	ldr	r3, [r3, #28]
   19270:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   19272:	2300      	movs	r3, #0
   19274:	617b      	str	r3, [r7, #20]
   19276:	697b      	ldr	r3, [r7, #20]
   19278:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   1927a:	69bb      	ldr	r3, [r7, #24]
   1927c:	1c5a      	adds	r2, r3, #1
   1927e:	61ba      	str	r2, [r7, #24]
   19280:	693a      	ldr	r2, [r7, #16]
   19282:	18d3      	adds	r3, r2, r3
   19284:	781a      	ldrb	r2, [r3, #0]
   19286:	2324      	movs	r3, #36	; 0x24
   19288:	18fb      	adds	r3, r7, r3
   1928a:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1928c:	2324      	movs	r3, #36	; 0x24
   1928e:	18fb      	adds	r3, r7, r3
   19290:	881b      	ldrh	r3, [r3, #0]
   19292:	2b1f      	cmp	r3, #31
   19294:	d944      	bls.n	19320 <create_name+0xdc>
   19296:	2324      	movs	r3, #36	; 0x24
   19298:	18fb      	adds	r3, r7, r3
   1929a:	881b      	ldrh	r3, [r3, #0]
   1929c:	2b2f      	cmp	r3, #47	; 0x2f
   1929e:	d03f      	beq.n	19320 <create_name+0xdc>
   192a0:	2324      	movs	r3, #36	; 0x24
   192a2:	18fb      	adds	r3, r7, r3
   192a4:	881b      	ldrh	r3, [r3, #0]
   192a6:	2b5c      	cmp	r3, #92	; 0x5c
   192a8:	d03a      	beq.n	19320 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   192aa:	697b      	ldr	r3, [r7, #20]
   192ac:	2bfe      	cmp	r3, #254	; 0xfe
   192ae:	d901      	bls.n	192b4 <create_name+0x70>
			return FR_INVALID_NAME;
   192b0:	2306      	movs	r3, #6
   192b2:	e1e7      	b.n	19684 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   192b4:	2324      	movs	r3, #36	; 0x24
   192b6:	18fb      	adds	r3, r7, r3
   192b8:	2224      	movs	r2, #36	; 0x24
   192ba:	18ba      	adds	r2, r7, r2
   192bc:	8812      	ldrh	r2, [r2, #0]
   192be:	21ff      	movs	r1, #255	; 0xff
   192c0:	400a      	ands	r2, r1
   192c2:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   192c4:	2324      	movs	r3, #36	; 0x24
   192c6:	18fc      	adds	r4, r7, r3
   192c8:	2324      	movs	r3, #36	; 0x24
   192ca:	18fb      	adds	r3, r7, r3
   192cc:	881b      	ldrh	r3, [r3, #0]
   192ce:	2101      	movs	r1, #1
   192d0:	0018      	movs	r0, r3
   192d2:	4bba      	ldr	r3, [pc, #744]	; (195bc <create_name+0x378>)
   192d4:	4798      	blx	r3
   192d6:	0003      	movs	r3, r0
   192d8:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   192da:	2324      	movs	r3, #36	; 0x24
   192dc:	18fb      	adds	r3, r7, r3
   192de:	881b      	ldrh	r3, [r3, #0]
   192e0:	2b00      	cmp	r3, #0
   192e2:	d101      	bne.n	192e8 <create_name+0xa4>
   192e4:	2306      	movs	r3, #6
   192e6:	e1cd      	b.n	19684 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   192e8:	2324      	movs	r3, #36	; 0x24
   192ea:	18fb      	adds	r3, r7, r3
   192ec:	881b      	ldrh	r3, [r3, #0]
   192ee:	2b7f      	cmp	r3, #127	; 0x7f
   192f0:	d80b      	bhi.n	1930a <create_name+0xc6>
   192f2:	2324      	movs	r3, #36	; 0x24
   192f4:	18fb      	adds	r3, r7, r3
   192f6:	881a      	ldrh	r2, [r3, #0]
   192f8:	4bb1      	ldr	r3, [pc, #708]	; (195c0 <create_name+0x37c>)
   192fa:	0011      	movs	r1, r2
   192fc:	0018      	movs	r0, r3
   192fe:	4bb1      	ldr	r3, [pc, #708]	; (195c4 <create_name+0x380>)
   19300:	4798      	blx	r3
   19302:	1e03      	subs	r3, r0, #0
   19304:	d001      	beq.n	1930a <create_name+0xc6>
			return FR_INVALID_NAME;
   19306:	2306      	movs	r3, #6
   19308:	e1bc      	b.n	19684 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   1930a:	697b      	ldr	r3, [r7, #20]
   1930c:	1c5a      	adds	r2, r3, #1
   1930e:	617a      	str	r2, [r7, #20]
   19310:	005b      	lsls	r3, r3, #1
   19312:	68fa      	ldr	r2, [r7, #12]
   19314:	18d3      	adds	r3, r2, r3
   19316:	2224      	movs	r2, #36	; 0x24
   19318:	18ba      	adds	r2, r7, r2
   1931a:	8812      	ldrh	r2, [r2, #0]
   1931c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   1931e:	e7ac      	b.n	1927a <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   19320:	693a      	ldr	r2, [r7, #16]
   19322:	69bb      	ldr	r3, [r7, #24]
   19324:	18d2      	adds	r2, r2, r3
   19326:	683b      	ldr	r3, [r7, #0]
   19328:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1932a:	2324      	movs	r3, #36	; 0x24
   1932c:	18fb      	adds	r3, r7, r3
   1932e:	881b      	ldrh	r3, [r3, #0]
   19330:	2b1f      	cmp	r3, #31
   19332:	d801      	bhi.n	19338 <create_name+0xf4>
   19334:	2204      	movs	r2, #4
   19336:	e000      	b.n	1933a <create_name+0xf6>
   19338:	2200      	movs	r2, #0
   1933a:	2326      	movs	r3, #38	; 0x26
   1933c:	18fb      	adds	r3, r7, r3
   1933e:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   19340:	e017      	b.n	19372 <create_name+0x12e>
		w = lfn[di-1];
   19342:	697b      	ldr	r3, [r7, #20]
   19344:	4aa0      	ldr	r2, [pc, #640]	; (195c8 <create_name+0x384>)
   19346:	4694      	mov	ip, r2
   19348:	4463      	add	r3, ip
   1934a:	005b      	lsls	r3, r3, #1
   1934c:	68fa      	ldr	r2, [r7, #12]
   1934e:	18d2      	adds	r2, r2, r3
   19350:	2324      	movs	r3, #36	; 0x24
   19352:	18fb      	adds	r3, r7, r3
   19354:	8812      	ldrh	r2, [r2, #0]
   19356:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   19358:	2324      	movs	r3, #36	; 0x24
   1935a:	18fb      	adds	r3, r7, r3
   1935c:	881b      	ldrh	r3, [r3, #0]
   1935e:	2b20      	cmp	r3, #32
   19360:	d004      	beq.n	1936c <create_name+0x128>
   19362:	2324      	movs	r3, #36	; 0x24
   19364:	18fb      	adds	r3, r7, r3
   19366:	881b      	ldrh	r3, [r3, #0]
   19368:	2b2e      	cmp	r3, #46	; 0x2e
   1936a:	d106      	bne.n	1937a <create_name+0x136>
		di--;
   1936c:	697b      	ldr	r3, [r7, #20]
   1936e:	3b01      	subs	r3, #1
   19370:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   19372:	697b      	ldr	r3, [r7, #20]
   19374:	2b00      	cmp	r3, #0
   19376:	d1e4      	bne.n	19342 <create_name+0xfe>
   19378:	e000      	b.n	1937c <create_name+0x138>
		if (w != ' ' && w != '.') break;
   1937a:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   1937c:	697b      	ldr	r3, [r7, #20]
   1937e:	2b00      	cmp	r3, #0
   19380:	d101      	bne.n	19386 <create_name+0x142>
   19382:	2306      	movs	r3, #6
   19384:	e17e      	b.n	19684 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   19386:	697b      	ldr	r3, [r7, #20]
   19388:	005b      	lsls	r3, r3, #1
   1938a:	68fa      	ldr	r2, [r7, #12]
   1938c:	18d3      	adds	r3, r2, r3
   1938e:	2200      	movs	r2, #0
   19390:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   19392:	687b      	ldr	r3, [r7, #4]
   19394:	699b      	ldr	r3, [r3, #24]
   19396:	220b      	movs	r2, #11
   19398:	2120      	movs	r1, #32
   1939a:	0018      	movs	r0, r3
   1939c:	4b8b      	ldr	r3, [pc, #556]	; (195cc <create_name+0x388>)
   1939e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   193a0:	2300      	movs	r3, #0
   193a2:	61bb      	str	r3, [r7, #24]
   193a4:	e002      	b.n	193ac <create_name+0x168>
   193a6:	69bb      	ldr	r3, [r7, #24]
   193a8:	3301      	adds	r3, #1
   193aa:	61bb      	str	r3, [r7, #24]
   193ac:	69bb      	ldr	r3, [r7, #24]
   193ae:	005b      	lsls	r3, r3, #1
   193b0:	68fa      	ldr	r2, [r7, #12]
   193b2:	18d3      	adds	r3, r2, r3
   193b4:	881b      	ldrh	r3, [r3, #0]
   193b6:	2b20      	cmp	r3, #32
   193b8:	d0f5      	beq.n	193a6 <create_name+0x162>
   193ba:	69bb      	ldr	r3, [r7, #24]
   193bc:	005b      	lsls	r3, r3, #1
   193be:	68fa      	ldr	r2, [r7, #12]
   193c0:	18d3      	adds	r3, r2, r3
   193c2:	881b      	ldrh	r3, [r3, #0]
   193c4:	2b2e      	cmp	r3, #46	; 0x2e
   193c6:	d0ee      	beq.n	193a6 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   193c8:	69bb      	ldr	r3, [r7, #24]
   193ca:	2b00      	cmp	r3, #0
   193cc:	d00b      	beq.n	193e6 <create_name+0x1a2>
   193ce:	2326      	movs	r3, #38	; 0x26
   193d0:	18fb      	adds	r3, r7, r3
   193d2:	2226      	movs	r2, #38	; 0x26
   193d4:	18ba      	adds	r2, r7, r2
   193d6:	7812      	ldrb	r2, [r2, #0]
   193d8:	2103      	movs	r1, #3
   193da:	430a      	orrs	r2, r1
   193dc:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   193de:	e002      	b.n	193e6 <create_name+0x1a2>
   193e0:	697b      	ldr	r3, [r7, #20]
   193e2:	3b01      	subs	r3, #1
   193e4:	617b      	str	r3, [r7, #20]
   193e6:	697b      	ldr	r3, [r7, #20]
   193e8:	2b00      	cmp	r3, #0
   193ea:	d009      	beq.n	19400 <create_name+0x1bc>
   193ec:	697b      	ldr	r3, [r7, #20]
   193ee:	4a76      	ldr	r2, [pc, #472]	; (195c8 <create_name+0x384>)
   193f0:	4694      	mov	ip, r2
   193f2:	4463      	add	r3, ip
   193f4:	005b      	lsls	r3, r3, #1
   193f6:	68fa      	ldr	r2, [r7, #12]
   193f8:	18d3      	adds	r3, r2, r3
   193fa:	881b      	ldrh	r3, [r3, #0]
   193fc:	2b2e      	cmp	r3, #46	; 0x2e
   193fe:	d1ef      	bne.n	193e0 <create_name+0x19c>

	b = i = 0; ni = 8;
   19400:	2300      	movs	r3, #0
   19402:	623b      	str	r3, [r7, #32]
   19404:	2327      	movs	r3, #39	; 0x27
   19406:	18fb      	adds	r3, r7, r3
   19408:	2200      	movs	r2, #0
   1940a:	701a      	strb	r2, [r3, #0]
   1940c:	2308      	movs	r3, #8
   1940e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   19410:	69bb      	ldr	r3, [r7, #24]
   19412:	1c5a      	adds	r2, r3, #1
   19414:	61ba      	str	r2, [r7, #24]
   19416:	005b      	lsls	r3, r3, #1
   19418:	68fa      	ldr	r2, [r7, #12]
   1941a:	18d2      	adds	r2, r2, r3
   1941c:	2324      	movs	r3, #36	; 0x24
   1941e:	18fb      	adds	r3, r7, r3
   19420:	8812      	ldrh	r2, [r2, #0]
   19422:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   19424:	2324      	movs	r3, #36	; 0x24
   19426:	18fb      	adds	r3, r7, r3
   19428:	881b      	ldrh	r3, [r3, #0]
   1942a:	2b00      	cmp	r3, #0
   1942c:	d100      	bne.n	19430 <create_name+0x1ec>
   1942e:	e0c3      	b.n	195b8 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   19430:	2324      	movs	r3, #36	; 0x24
   19432:	18fb      	adds	r3, r7, r3
   19434:	881b      	ldrh	r3, [r3, #0]
   19436:	2b20      	cmp	r3, #32
   19438:	d008      	beq.n	1944c <create_name+0x208>
   1943a:	2324      	movs	r3, #36	; 0x24
   1943c:	18fb      	adds	r3, r7, r3
   1943e:	881b      	ldrh	r3, [r3, #0]
   19440:	2b2e      	cmp	r3, #46	; 0x2e
   19442:	d10c      	bne.n	1945e <create_name+0x21a>
   19444:	69ba      	ldr	r2, [r7, #24]
   19446:	697b      	ldr	r3, [r7, #20]
   19448:	429a      	cmp	r2, r3
   1944a:	d008      	beq.n	1945e <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   1944c:	2326      	movs	r3, #38	; 0x26
   1944e:	18fb      	adds	r3, r7, r3
   19450:	2226      	movs	r2, #38	; 0x26
   19452:	18ba      	adds	r2, r7, r2
   19454:	7812      	ldrb	r2, [r2, #0]
   19456:	2103      	movs	r1, #3
   19458:	430a      	orrs	r2, r1
   1945a:	701a      	strb	r2, [r3, #0]
   1945c:	e0ab      	b.n	195b6 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   1945e:	6a3a      	ldr	r2, [r7, #32]
   19460:	69fb      	ldr	r3, [r7, #28]
   19462:	429a      	cmp	r2, r3
   19464:	d203      	bcs.n	1946e <create_name+0x22a>
   19466:	69ba      	ldr	r2, [r7, #24]
   19468:	697b      	ldr	r3, [r7, #20]
   1946a:	429a      	cmp	r2, r3
   1946c:	d12a      	bne.n	194c4 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   1946e:	69fb      	ldr	r3, [r7, #28]
   19470:	2b0b      	cmp	r3, #11
   19472:	d108      	bne.n	19486 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   19474:	2326      	movs	r3, #38	; 0x26
   19476:	18fb      	adds	r3, r7, r3
   19478:	2226      	movs	r2, #38	; 0x26
   1947a:	18ba      	adds	r2, r7, r2
   1947c:	7812      	ldrb	r2, [r2, #0]
   1947e:	2103      	movs	r1, #3
   19480:	430a      	orrs	r2, r1
   19482:	701a      	strb	r2, [r3, #0]
   19484:	e0a9      	b.n	195da <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   19486:	69ba      	ldr	r2, [r7, #24]
   19488:	697b      	ldr	r3, [r7, #20]
   1948a:	429a      	cmp	r2, r3
   1948c:	d007      	beq.n	1949e <create_name+0x25a>
   1948e:	2326      	movs	r3, #38	; 0x26
   19490:	18fb      	adds	r3, r7, r3
   19492:	2226      	movs	r2, #38	; 0x26
   19494:	18ba      	adds	r2, r7, r2
   19496:	7812      	ldrb	r2, [r2, #0]
   19498:	2103      	movs	r1, #3
   1949a:	430a      	orrs	r2, r1
   1949c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   1949e:	69ba      	ldr	r2, [r7, #24]
   194a0:	697b      	ldr	r3, [r7, #20]
   194a2:	429a      	cmp	r2, r3
   194a4:	d900      	bls.n	194a8 <create_name+0x264>
   194a6:	e097      	b.n	195d8 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   194a8:	697b      	ldr	r3, [r7, #20]
   194aa:	61bb      	str	r3, [r7, #24]
   194ac:	2308      	movs	r3, #8
   194ae:	623b      	str	r3, [r7, #32]
   194b0:	230b      	movs	r3, #11
   194b2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   194b4:	2327      	movs	r3, #39	; 0x27
   194b6:	18fb      	adds	r3, r7, r3
   194b8:	2227      	movs	r2, #39	; 0x27
   194ba:	18ba      	adds	r2, r7, r2
   194bc:	7812      	ldrb	r2, [r2, #0]
   194be:	0092      	lsls	r2, r2, #2
   194c0:	701a      	strb	r2, [r3, #0]
   194c2:	e078      	b.n	195b6 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   194c4:	2324      	movs	r3, #36	; 0x24
   194c6:	18fb      	adds	r3, r7, r3
   194c8:	881b      	ldrh	r3, [r3, #0]
   194ca:	2b7f      	cmp	r3, #127	; 0x7f
   194cc:	d920      	bls.n	19510 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   194ce:	2324      	movs	r3, #36	; 0x24
   194d0:	18fc      	adds	r4, r7, r3
   194d2:	2324      	movs	r3, #36	; 0x24
   194d4:	18fb      	adds	r3, r7, r3
   194d6:	881b      	ldrh	r3, [r3, #0]
   194d8:	2100      	movs	r1, #0
   194da:	0018      	movs	r0, r3
   194dc:	4b37      	ldr	r3, [pc, #220]	; (195bc <create_name+0x378>)
   194de:	4798      	blx	r3
   194e0:	0003      	movs	r3, r0
   194e2:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   194e4:	2324      	movs	r3, #36	; 0x24
   194e6:	18fb      	adds	r3, r7, r3
   194e8:	881b      	ldrh	r3, [r3, #0]
   194ea:	2b00      	cmp	r3, #0
   194ec:	d008      	beq.n	19500 <create_name+0x2bc>
   194ee:	2324      	movs	r3, #36	; 0x24
   194f0:	18fb      	adds	r3, r7, r3
   194f2:	881b      	ldrh	r3, [r3, #0]
   194f4:	3b80      	subs	r3, #128	; 0x80
   194f6:	4a36      	ldr	r2, [pc, #216]	; (195d0 <create_name+0x38c>)
   194f8:	5cd2      	ldrb	r2, [r2, r3]
   194fa:	2324      	movs	r3, #36	; 0x24
   194fc:	18fb      	adds	r3, r7, r3
   194fe:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   19500:	2326      	movs	r3, #38	; 0x26
   19502:	18fb      	adds	r3, r7, r3
   19504:	2226      	movs	r2, #38	; 0x26
   19506:	18ba      	adds	r2, r7, r2
   19508:	7812      	ldrb	r2, [r2, #0]
   1950a:	2102      	movs	r1, #2
   1950c:	430a      	orrs	r2, r1
   1950e:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   19510:	2324      	movs	r3, #36	; 0x24
   19512:	18fb      	adds	r3, r7, r3
   19514:	881b      	ldrh	r3, [r3, #0]
   19516:	2b00      	cmp	r3, #0
   19518:	d009      	beq.n	1952e <create_name+0x2ea>
   1951a:	2324      	movs	r3, #36	; 0x24
   1951c:	18fb      	adds	r3, r7, r3
   1951e:	881a      	ldrh	r2, [r3, #0]
   19520:	4b2c      	ldr	r3, [pc, #176]	; (195d4 <create_name+0x390>)
   19522:	0011      	movs	r1, r2
   19524:	0018      	movs	r0, r3
   19526:	4b27      	ldr	r3, [pc, #156]	; (195c4 <create_name+0x380>)
   19528:	4798      	blx	r3
   1952a:	1e03      	subs	r3, r0, #0
   1952c:	d00c      	beq.n	19548 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   1952e:	2324      	movs	r3, #36	; 0x24
   19530:	18fb      	adds	r3, r7, r3
   19532:	225f      	movs	r2, #95	; 0x5f
   19534:	801a      	strh	r2, [r3, #0]
   19536:	2326      	movs	r3, #38	; 0x26
   19538:	18fb      	adds	r3, r7, r3
   1953a:	2226      	movs	r2, #38	; 0x26
   1953c:	18ba      	adds	r2, r7, r2
   1953e:	7812      	ldrb	r2, [r2, #0]
   19540:	2103      	movs	r1, #3
   19542:	430a      	orrs	r2, r1
   19544:	701a      	strb	r2, [r3, #0]
   19546:	e02b      	b.n	195a0 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   19548:	2324      	movs	r3, #36	; 0x24
   1954a:	18fb      	adds	r3, r7, r3
   1954c:	881b      	ldrh	r3, [r3, #0]
   1954e:	2b40      	cmp	r3, #64	; 0x40
   19550:	d90d      	bls.n	1956e <create_name+0x32a>
   19552:	2324      	movs	r3, #36	; 0x24
   19554:	18fb      	adds	r3, r7, r3
   19556:	881b      	ldrh	r3, [r3, #0]
   19558:	2b5a      	cmp	r3, #90	; 0x5a
   1955a:	d808      	bhi.n	1956e <create_name+0x32a>
					b |= 2;
   1955c:	2327      	movs	r3, #39	; 0x27
   1955e:	18fb      	adds	r3, r7, r3
   19560:	2227      	movs	r2, #39	; 0x27
   19562:	18ba      	adds	r2, r7, r2
   19564:	7812      	ldrb	r2, [r2, #0]
   19566:	2102      	movs	r1, #2
   19568:	430a      	orrs	r2, r1
   1956a:	701a      	strb	r2, [r3, #0]
   1956c:	e018      	b.n	195a0 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   1956e:	2324      	movs	r3, #36	; 0x24
   19570:	18fb      	adds	r3, r7, r3
   19572:	881b      	ldrh	r3, [r3, #0]
   19574:	2b60      	cmp	r3, #96	; 0x60
   19576:	d913      	bls.n	195a0 <create_name+0x35c>
   19578:	2324      	movs	r3, #36	; 0x24
   1957a:	18fb      	adds	r3, r7, r3
   1957c:	881b      	ldrh	r3, [r3, #0]
   1957e:	2b7a      	cmp	r3, #122	; 0x7a
   19580:	d80e      	bhi.n	195a0 <create_name+0x35c>
						b |= 1; w -= 0x20;
   19582:	2327      	movs	r3, #39	; 0x27
   19584:	18fb      	adds	r3, r7, r3
   19586:	2227      	movs	r2, #39	; 0x27
   19588:	18ba      	adds	r2, r7, r2
   1958a:	7812      	ldrb	r2, [r2, #0]
   1958c:	2101      	movs	r1, #1
   1958e:	430a      	orrs	r2, r1
   19590:	701a      	strb	r2, [r3, #0]
   19592:	2324      	movs	r3, #36	; 0x24
   19594:	18fb      	adds	r3, r7, r3
   19596:	2224      	movs	r2, #36	; 0x24
   19598:	18ba      	adds	r2, r7, r2
   1959a:	8812      	ldrh	r2, [r2, #0]
   1959c:	3a20      	subs	r2, #32
   1959e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   195a0:	687b      	ldr	r3, [r7, #4]
   195a2:	699a      	ldr	r2, [r3, #24]
   195a4:	6a3b      	ldr	r3, [r7, #32]
   195a6:	1c59      	adds	r1, r3, #1
   195a8:	6239      	str	r1, [r7, #32]
   195aa:	18d3      	adds	r3, r2, r3
   195ac:	2224      	movs	r2, #36	; 0x24
   195ae:	18ba      	adds	r2, r7, r2
   195b0:	8812      	ldrh	r2, [r2, #0]
   195b2:	b2d2      	uxtb	r2, r2
   195b4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   195b6:	e72b      	b.n	19410 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   195b8:	46c0      	nop			; (mov r8, r8)
   195ba:	e00e      	b.n	195da <create_name+0x396>
   195bc:	0001a97d 	.word	0x0001a97d
   195c0:	0002582c 	.word	0x0002582c
   195c4:	00017de7 	.word	0x00017de7
   195c8:	7fffffff 	.word	0x7fffffff
   195cc:	00017d6d 	.word	0x00017d6d
   195d0:	00025874 	.word	0x00025874
   195d4:	00025838 	.word	0x00025838
			if (si > di) break;			/* No extension */
   195d8:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   195da:	687b      	ldr	r3, [r7, #4]
   195dc:	699b      	ldr	r3, [r3, #24]
   195de:	781b      	ldrb	r3, [r3, #0]
   195e0:	2be5      	cmp	r3, #229	; 0xe5
   195e2:	d103      	bne.n	195ec <create_name+0x3a8>
   195e4:	687b      	ldr	r3, [r7, #4]
   195e6:	699b      	ldr	r3, [r3, #24]
   195e8:	2205      	movs	r2, #5
   195ea:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   195ec:	69fb      	ldr	r3, [r7, #28]
   195ee:	2b08      	cmp	r3, #8
   195f0:	d106      	bne.n	19600 <create_name+0x3bc>
   195f2:	2327      	movs	r3, #39	; 0x27
   195f4:	18fb      	adds	r3, r7, r3
   195f6:	2227      	movs	r2, #39	; 0x27
   195f8:	18ba      	adds	r2, r7, r2
   195fa:	7812      	ldrb	r2, [r2, #0]
   195fc:	0092      	lsls	r2, r2, #2
   195fe:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   19600:	2327      	movs	r3, #39	; 0x27
   19602:	18fb      	adds	r3, r7, r3
   19604:	781b      	ldrb	r3, [r3, #0]
   19606:	220c      	movs	r2, #12
   19608:	4013      	ands	r3, r2
   1960a:	2b0c      	cmp	r3, #12
   1960c:	d006      	beq.n	1961c <create_name+0x3d8>
   1960e:	2327      	movs	r3, #39	; 0x27
   19610:	18fb      	adds	r3, r7, r3
   19612:	781b      	ldrb	r3, [r3, #0]
   19614:	2203      	movs	r2, #3
   19616:	4013      	ands	r3, r2
   19618:	2b03      	cmp	r3, #3
   1961a:	d107      	bne.n	1962c <create_name+0x3e8>
		cf |= NS_LFN;
   1961c:	2326      	movs	r3, #38	; 0x26
   1961e:	18fb      	adds	r3, r7, r3
   19620:	2226      	movs	r2, #38	; 0x26
   19622:	18ba      	adds	r2, r7, r2
   19624:	7812      	ldrb	r2, [r2, #0]
   19626:	2102      	movs	r1, #2
   19628:	430a      	orrs	r2, r1
   1962a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   1962c:	2326      	movs	r3, #38	; 0x26
   1962e:	18fb      	adds	r3, r7, r3
   19630:	781b      	ldrb	r3, [r3, #0]
   19632:	2202      	movs	r2, #2
   19634:	4013      	ands	r3, r2
   19636:	d11d      	bne.n	19674 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   19638:	2327      	movs	r3, #39	; 0x27
   1963a:	18fb      	adds	r3, r7, r3
   1963c:	781b      	ldrb	r3, [r3, #0]
   1963e:	2203      	movs	r2, #3
   19640:	4013      	ands	r3, r2
   19642:	2b01      	cmp	r3, #1
   19644:	d107      	bne.n	19656 <create_name+0x412>
   19646:	2326      	movs	r3, #38	; 0x26
   19648:	18fb      	adds	r3, r7, r3
   1964a:	2226      	movs	r2, #38	; 0x26
   1964c:	18ba      	adds	r2, r7, r2
   1964e:	7812      	ldrb	r2, [r2, #0]
   19650:	2110      	movs	r1, #16
   19652:	430a      	orrs	r2, r1
   19654:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   19656:	2327      	movs	r3, #39	; 0x27
   19658:	18fb      	adds	r3, r7, r3
   1965a:	781b      	ldrb	r3, [r3, #0]
   1965c:	220c      	movs	r2, #12
   1965e:	4013      	ands	r3, r2
   19660:	2b04      	cmp	r3, #4
   19662:	d107      	bne.n	19674 <create_name+0x430>
   19664:	2326      	movs	r3, #38	; 0x26
   19666:	18fb      	adds	r3, r7, r3
   19668:	2226      	movs	r2, #38	; 0x26
   1966a:	18ba      	adds	r2, r7, r2
   1966c:	7812      	ldrb	r2, [r2, #0]
   1966e:	2108      	movs	r1, #8
   19670:	430a      	orrs	r2, r1
   19672:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   19674:	687b      	ldr	r3, [r7, #4]
   19676:	699b      	ldr	r3, [r3, #24]
   19678:	330b      	adds	r3, #11
   1967a:	2226      	movs	r2, #38	; 0x26
   1967c:	18ba      	adds	r2, r7, r2
   1967e:	7812      	ldrb	r2, [r2, #0]
   19680:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   19682:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   19684:	0018      	movs	r0, r3
   19686:	46bd      	mov	sp, r7
   19688:	b00b      	add	sp, #44	; 0x2c
   1968a:	bd90      	pop	{r4, r7, pc}

0001968c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   1968c:	b590      	push	{r4, r7, lr}
   1968e:	b085      	sub	sp, #20
   19690:	af00      	add	r7, sp, #0
   19692:	6078      	str	r0, [r7, #4]
   19694:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   19696:	683b      	ldr	r3, [r7, #0]
   19698:	781b      	ldrb	r3, [r3, #0]
   1969a:	2b2f      	cmp	r3, #47	; 0x2f
   1969c:	d003      	beq.n	196a6 <follow_path+0x1a>
   1969e:	683b      	ldr	r3, [r7, #0]
   196a0:	781b      	ldrb	r3, [r3, #0]
   196a2:	2b5c      	cmp	r3, #92	; 0x5c
   196a4:	d102      	bne.n	196ac <follow_path+0x20>
		path++;
   196a6:	683b      	ldr	r3, [r7, #0]
   196a8:	3301      	adds	r3, #1
   196aa:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   196ac:	687b      	ldr	r3, [r7, #4]
   196ae:	2200      	movs	r2, #0
   196b0:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   196b2:	683b      	ldr	r3, [r7, #0]
   196b4:	781b      	ldrb	r3, [r3, #0]
   196b6:	2b1f      	cmp	r3, #31
   196b8:	d80c      	bhi.n	196d4 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   196ba:	230f      	movs	r3, #15
   196bc:	18fc      	adds	r4, r7, r3
   196be:	687b      	ldr	r3, [r7, #4]
   196c0:	2100      	movs	r1, #0
   196c2:	0018      	movs	r0, r3
   196c4:	4b3c      	ldr	r3, [pc, #240]	; (197b8 <follow_path+0x12c>)
   196c6:	4798      	blx	r3
   196c8:	0003      	movs	r3, r0
   196ca:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   196cc:	687b      	ldr	r3, [r7, #4]
   196ce:	2200      	movs	r2, #0
   196d0:	615a      	str	r2, [r3, #20]
   196d2:	e06a      	b.n	197aa <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   196d4:	230f      	movs	r3, #15
   196d6:	18fc      	adds	r4, r7, r3
   196d8:	003a      	movs	r2, r7
   196da:	687b      	ldr	r3, [r7, #4]
   196dc:	0011      	movs	r1, r2
   196de:	0018      	movs	r0, r3
   196e0:	4b36      	ldr	r3, [pc, #216]	; (197bc <follow_path+0x130>)
   196e2:	4798      	blx	r3
   196e4:	0003      	movs	r3, r0
   196e6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   196e8:	230f      	movs	r3, #15
   196ea:	18fb      	adds	r3, r7, r3
   196ec:	781b      	ldrb	r3, [r3, #0]
   196ee:	2b00      	cmp	r3, #0
   196f0:	d154      	bne.n	1979c <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   196f2:	230f      	movs	r3, #15
   196f4:	18fc      	adds	r4, r7, r3
   196f6:	687b      	ldr	r3, [r7, #4]
   196f8:	0018      	movs	r0, r3
   196fa:	4b31      	ldr	r3, [pc, #196]	; (197c0 <follow_path+0x134>)
   196fc:	4798      	blx	r3
   196fe:	0003      	movs	r3, r0
   19700:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   19702:	687b      	ldr	r3, [r7, #4]
   19704:	699a      	ldr	r2, [r3, #24]
   19706:	230e      	movs	r3, #14
   19708:	18fb      	adds	r3, r7, r3
   1970a:	7ad2      	ldrb	r2, [r2, #11]
   1970c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   1970e:	230f      	movs	r3, #15
   19710:	18fb      	adds	r3, r7, r3
   19712:	781b      	ldrb	r3, [r3, #0]
   19714:	2b00      	cmp	r3, #0
   19716:	d00f      	beq.n	19738 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   19718:	230f      	movs	r3, #15
   1971a:	18fb      	adds	r3, r7, r3
   1971c:	781b      	ldrb	r3, [r3, #0]
   1971e:	2b04      	cmp	r3, #4
   19720:	d13e      	bne.n	197a0 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   19722:	230e      	movs	r3, #14
   19724:	18fb      	adds	r3, r7, r3
   19726:	781b      	ldrb	r3, [r3, #0]
   19728:	2204      	movs	r2, #4
   1972a:	4013      	ands	r3, r2
   1972c:	d13a      	bne.n	197a4 <follow_path+0x118>
   1972e:	230f      	movs	r3, #15
   19730:	18fb      	adds	r3, r7, r3
   19732:	2205      	movs	r2, #5
   19734:	701a      	strb	r2, [r3, #0]
				}
				break;
   19736:	e035      	b.n	197a4 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   19738:	230e      	movs	r3, #14
   1973a:	18fb      	adds	r3, r7, r3
   1973c:	781b      	ldrb	r3, [r3, #0]
   1973e:	2204      	movs	r2, #4
   19740:	4013      	ands	r3, r2
   19742:	d131      	bne.n	197a8 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   19744:	687b      	ldr	r3, [r7, #4]
   19746:	695b      	ldr	r3, [r3, #20]
   19748:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   1974a:	68bb      	ldr	r3, [r7, #8]
   1974c:	330b      	adds	r3, #11
   1974e:	781b      	ldrb	r3, [r3, #0]
   19750:	001a      	movs	r2, r3
   19752:	2310      	movs	r3, #16
   19754:	4013      	ands	r3, r2
   19756:	d104      	bne.n	19762 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   19758:	230f      	movs	r3, #15
   1975a:	18fb      	adds	r3, r7, r3
   1975c:	2205      	movs	r2, #5
   1975e:	701a      	strb	r2, [r3, #0]
   19760:	e023      	b.n	197aa <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   19762:	68bb      	ldr	r3, [r7, #8]
   19764:	3315      	adds	r3, #21
   19766:	781b      	ldrb	r3, [r3, #0]
   19768:	021b      	lsls	r3, r3, #8
   1976a:	b21a      	sxth	r2, r3
   1976c:	68bb      	ldr	r3, [r7, #8]
   1976e:	3314      	adds	r3, #20
   19770:	781b      	ldrb	r3, [r3, #0]
   19772:	b21b      	sxth	r3, r3
   19774:	4313      	orrs	r3, r2
   19776:	b21b      	sxth	r3, r3
   19778:	b29b      	uxth	r3, r3
   1977a:	041b      	lsls	r3, r3, #16
   1977c:	68ba      	ldr	r2, [r7, #8]
   1977e:	321b      	adds	r2, #27
   19780:	7812      	ldrb	r2, [r2, #0]
   19782:	0212      	lsls	r2, r2, #8
   19784:	b211      	sxth	r1, r2
   19786:	68ba      	ldr	r2, [r7, #8]
   19788:	321a      	adds	r2, #26
   1978a:	7812      	ldrb	r2, [r2, #0]
   1978c:	b212      	sxth	r2, r2
   1978e:	430a      	orrs	r2, r1
   19790:	b212      	sxth	r2, r2
   19792:	b292      	uxth	r2, r2
   19794:	431a      	orrs	r2, r3
   19796:	687b      	ldr	r3, [r7, #4]
   19798:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   1979a:	e79b      	b.n	196d4 <follow_path+0x48>
			if (res != FR_OK) break;
   1979c:	46c0      	nop			; (mov r8, r8)
   1979e:	e004      	b.n	197aa <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   197a0:	46c0      	nop			; (mov r8, r8)
   197a2:	e002      	b.n	197aa <follow_path+0x11e>
				break;
   197a4:	46c0      	nop			; (mov r8, r8)
   197a6:	e000      	b.n	197aa <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   197a8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   197aa:	230f      	movs	r3, #15
   197ac:	18fb      	adds	r3, r7, r3
   197ae:	781b      	ldrb	r3, [r3, #0]
}
   197b0:	0018      	movs	r0, r3
   197b2:	46bd      	mov	sp, r7
   197b4:	b005      	add	sp, #20
   197b6:	bd90      	pop	{r4, r7, pc}
   197b8:	0001865d 	.word	0x0001865d
   197bc:	00019245 	.word	0x00019245
   197c0:	00018ce1 	.word	0x00018ce1

000197c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   197c4:	b590      	push	{r4, r7, lr}
   197c6:	b083      	sub	sp, #12
   197c8:	af00      	add	r7, sp, #0
   197ca:	6078      	str	r0, [r7, #4]
   197cc:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   197ce:	687b      	ldr	r3, [r7, #4]
   197d0:	7858      	ldrb	r0, [r3, #1]
   197d2:	687b      	ldr	r3, [r7, #4]
   197d4:	3330      	adds	r3, #48	; 0x30
   197d6:	0019      	movs	r1, r3
   197d8:	683a      	ldr	r2, [r7, #0]
   197da:	2301      	movs	r3, #1
   197dc:	4c2a      	ldr	r4, [pc, #168]	; (19888 <check_fs+0xc4>)
   197de:	47a0      	blx	r4
   197e0:	1e03      	subs	r3, r0, #0
   197e2:	d001      	beq.n	197e8 <check_fs+0x24>
		return 3;
   197e4:	2303      	movs	r3, #3
   197e6:	e04b      	b.n	19880 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   197e8:	687b      	ldr	r3, [r7, #4]
   197ea:	4a28      	ldr	r2, [pc, #160]	; (1988c <check_fs+0xc8>)
   197ec:	4694      	mov	ip, r2
   197ee:	4463      	add	r3, ip
   197f0:	3301      	adds	r3, #1
   197f2:	781b      	ldrb	r3, [r3, #0]
   197f4:	021b      	lsls	r3, r3, #8
   197f6:	b21a      	sxth	r2, r3
   197f8:	687b      	ldr	r3, [r7, #4]
   197fa:	4924      	ldr	r1, [pc, #144]	; (1988c <check_fs+0xc8>)
   197fc:	5c5b      	ldrb	r3, [r3, r1]
   197fe:	b21b      	sxth	r3, r3
   19800:	4313      	orrs	r3, r2
   19802:	b21b      	sxth	r3, r3
   19804:	4a22      	ldr	r2, [pc, #136]	; (19890 <check_fs+0xcc>)
   19806:	4293      	cmp	r3, r2
   19808:	d001      	beq.n	1980e <check_fs+0x4a>
		return 2;
   1980a:	2302      	movs	r3, #2
   1980c:	e038      	b.n	19880 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   1980e:	687b      	ldr	r3, [r7, #4]
   19810:	3366      	adds	r3, #102	; 0x66
   19812:	3303      	adds	r3, #3
   19814:	781b      	ldrb	r3, [r3, #0]
   19816:	061a      	lsls	r2, r3, #24
   19818:	687b      	ldr	r3, [r7, #4]
   1981a:	3366      	adds	r3, #102	; 0x66
   1981c:	3302      	adds	r3, #2
   1981e:	781b      	ldrb	r3, [r3, #0]
   19820:	041b      	lsls	r3, r3, #16
   19822:	4313      	orrs	r3, r2
   19824:	687a      	ldr	r2, [r7, #4]
   19826:	3266      	adds	r2, #102	; 0x66
   19828:	3201      	adds	r2, #1
   1982a:	7812      	ldrb	r2, [r2, #0]
   1982c:	0212      	lsls	r2, r2, #8
   1982e:	4313      	orrs	r3, r2
   19830:	687a      	ldr	r2, [r7, #4]
   19832:	2166      	movs	r1, #102	; 0x66
   19834:	5c52      	ldrb	r2, [r2, r1]
   19836:	4313      	orrs	r3, r2
   19838:	021b      	lsls	r3, r3, #8
   1983a:	0a1b      	lsrs	r3, r3, #8
   1983c:	4a15      	ldr	r2, [pc, #84]	; (19894 <check_fs+0xd0>)
   1983e:	4293      	cmp	r3, r2
   19840:	d101      	bne.n	19846 <check_fs+0x82>
		return 0;
   19842:	2300      	movs	r3, #0
   19844:	e01c      	b.n	19880 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   19846:	687b      	ldr	r3, [r7, #4]
   19848:	3382      	adds	r3, #130	; 0x82
   1984a:	3303      	adds	r3, #3
   1984c:	781b      	ldrb	r3, [r3, #0]
   1984e:	061a      	lsls	r2, r3, #24
   19850:	687b      	ldr	r3, [r7, #4]
   19852:	3382      	adds	r3, #130	; 0x82
   19854:	3302      	adds	r3, #2
   19856:	781b      	ldrb	r3, [r3, #0]
   19858:	041b      	lsls	r3, r3, #16
   1985a:	4313      	orrs	r3, r2
   1985c:	687a      	ldr	r2, [r7, #4]
   1985e:	3282      	adds	r2, #130	; 0x82
   19860:	3201      	adds	r2, #1
   19862:	7812      	ldrb	r2, [r2, #0]
   19864:	0212      	lsls	r2, r2, #8
   19866:	4313      	orrs	r3, r2
   19868:	687a      	ldr	r2, [r7, #4]
   1986a:	2182      	movs	r1, #130	; 0x82
   1986c:	5c52      	ldrb	r2, [r2, r1]
   1986e:	4313      	orrs	r3, r2
   19870:	021b      	lsls	r3, r3, #8
   19872:	0a1b      	lsrs	r3, r3, #8
   19874:	4a07      	ldr	r2, [pc, #28]	; (19894 <check_fs+0xd0>)
   19876:	4293      	cmp	r3, r2
   19878:	d101      	bne.n	1987e <check_fs+0xba>
		return 0;
   1987a:	2300      	movs	r3, #0
   1987c:	e000      	b.n	19880 <check_fs+0xbc>

	return 1;
   1987e:	2301      	movs	r3, #1
}
   19880:	0018      	movs	r0, r3
   19882:	46bd      	mov	sp, r7
   19884:	b003      	add	sp, #12
   19886:	bd90      	pop	{r4, r7, pc}
   19888:	00017a2d 	.word	0x00017a2d
   1988c:	0000022e 	.word	0x0000022e
   19890:	ffffaa55 	.word	0xffffaa55
   19894:	00544146 	.word	0x00544146

00019898 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   19898:	b590      	push	{r4, r7, lr}
   1989a:	b093      	sub	sp, #76	; 0x4c
   1989c:	af00      	add	r7, sp, #0
   1989e:	60f8      	str	r0, [r7, #12]
   198a0:	60b9      	str	r1, [r7, #8]
   198a2:	1dfb      	adds	r3, r7, #7
   198a4:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   198a6:	68fb      	ldr	r3, [r7, #12]
   198a8:	681b      	ldr	r3, [r3, #0]
   198aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   198ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   198ae:	781b      	ldrb	r3, [r3, #0]
   198b0:	3b30      	subs	r3, #48	; 0x30
   198b2:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   198b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   198b6:	2b09      	cmp	r3, #9
   198b8:	d80b      	bhi.n	198d2 <chk_mounted+0x3a>
   198ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   198bc:	3301      	adds	r3, #1
   198be:	781b      	ldrb	r3, [r3, #0]
   198c0:	2b3a      	cmp	r3, #58	; 0x3a
   198c2:	d106      	bne.n	198d2 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   198c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   198c6:	3302      	adds	r3, #2
   198c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   198ca:	68fb      	ldr	r3, [r7, #12]
   198cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   198ce:	601a      	str	r2, [r3, #0]
   198d0:	e001      	b.n	198d6 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   198d2:	2300      	movs	r3, #0
   198d4:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   198d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   198d8:	2b07      	cmp	r3, #7
   198da:	d901      	bls.n	198e0 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   198dc:	230b      	movs	r3, #11
   198de:	e2af      	b.n	19e40 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   198e0:	4bc5      	ldr	r3, [pc, #788]	; (19bf8 <chk_mounted+0x360>)
   198e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   198e4:	0092      	lsls	r2, r2, #2
   198e6:	58d3      	ldr	r3, [r2, r3]
   198e8:	62bb      	str	r3, [r7, #40]	; 0x28
   198ea:	68bb      	ldr	r3, [r7, #8]
   198ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
   198ee:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   198f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   198f2:	2b00      	cmp	r3, #0
   198f4:	d101      	bne.n	198fa <chk_mounted+0x62>
   198f6:	230c      	movs	r3, #12
   198f8:	e2a2      	b.n	19e40 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   198fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   198fc:	781b      	ldrb	r3, [r3, #0]
   198fe:	2b00      	cmp	r3, #0
   19900:	d01c      	beq.n	1993c <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   19902:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19904:	785b      	ldrb	r3, [r3, #1]
   19906:	2227      	movs	r2, #39	; 0x27
   19908:	18bc      	adds	r4, r7, r2
   1990a:	0018      	movs	r0, r3
   1990c:	4bbb      	ldr	r3, [pc, #748]	; (19bfc <chk_mounted+0x364>)
   1990e:	4798      	blx	r3
   19910:	0003      	movs	r3, r0
   19912:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   19914:	2327      	movs	r3, #39	; 0x27
   19916:	18fb      	adds	r3, r7, r3
   19918:	781b      	ldrb	r3, [r3, #0]
   1991a:	2201      	movs	r2, #1
   1991c:	4013      	ands	r3, r2
   1991e:	d10d      	bne.n	1993c <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   19920:	1dfb      	adds	r3, r7, #7
   19922:	781b      	ldrb	r3, [r3, #0]
   19924:	2b00      	cmp	r3, #0
   19926:	d007      	beq.n	19938 <chk_mounted+0xa0>
   19928:	2327      	movs	r3, #39	; 0x27
   1992a:	18fb      	adds	r3, r7, r3
   1992c:	781b      	ldrb	r3, [r3, #0]
   1992e:	2204      	movs	r2, #4
   19930:	4013      	ands	r3, r2
   19932:	d001      	beq.n	19938 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   19934:	230a      	movs	r3, #10
   19936:	e283      	b.n	19e40 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   19938:	2300      	movs	r3, #0
   1993a:	e281      	b.n	19e40 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   1993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1993e:	2200      	movs	r2, #0
   19940:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   19942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19944:	b2da      	uxtb	r2, r3
   19946:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19948:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   1994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1994c:	785b      	ldrb	r3, [r3, #1]
   1994e:	2227      	movs	r2, #39	; 0x27
   19950:	18bc      	adds	r4, r7, r2
   19952:	0018      	movs	r0, r3
   19954:	4baa      	ldr	r3, [pc, #680]	; (19c00 <chk_mounted+0x368>)
   19956:	4798      	blx	r3
   19958:	0003      	movs	r3, r0
   1995a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1995c:	2327      	movs	r3, #39	; 0x27
   1995e:	18fb      	adds	r3, r7, r3
   19960:	781b      	ldrb	r3, [r3, #0]
   19962:	2201      	movs	r2, #1
   19964:	4013      	ands	r3, r2
   19966:	d001      	beq.n	1996c <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   19968:	2303      	movs	r3, #3
   1996a:	e269      	b.n	19e40 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1996c:	1dfb      	adds	r3, r7, #7
   1996e:	781b      	ldrb	r3, [r3, #0]
   19970:	2b00      	cmp	r3, #0
   19972:	d007      	beq.n	19984 <chk_mounted+0xec>
   19974:	2327      	movs	r3, #39	; 0x27
   19976:	18fb      	adds	r3, r7, r3
   19978:	781b      	ldrb	r3, [r3, #0]
   1997a:	2204      	movs	r2, #4
   1997c:	4013      	ands	r3, r2
   1997e:	d001      	beq.n	19984 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   19980:	230a      	movs	r3, #10
   19982:	e25d      	b.n	19e40 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   19984:	2300      	movs	r3, #0
   19986:	63fb      	str	r3, [r7, #60]	; 0x3c
   19988:	2347      	movs	r3, #71	; 0x47
   1998a:	18fc      	adds	r4, r7, r3
   1998c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1998e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19990:	0011      	movs	r1, r2
   19992:	0018      	movs	r0, r3
   19994:	4b9b      	ldr	r3, [pc, #620]	; (19c04 <chk_mounted+0x36c>)
   19996:	4798      	blx	r3
   19998:	0003      	movs	r3, r0
   1999a:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   1999c:	2347      	movs	r3, #71	; 0x47
   1999e:	18fb      	adds	r3, r7, r3
   199a0:	781b      	ldrb	r3, [r3, #0]
   199a2:	2b01      	cmp	r3, #1
   199a4:	d13b      	bne.n	19a1e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   199a6:	2346      	movs	r3, #70	; 0x46
   199a8:	18fb      	adds	r3, r7, r3
   199aa:	2200      	movs	r2, #0
   199ac:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   199ae:	2346      	movs	r3, #70	; 0x46
   199b0:	18fb      	adds	r3, r7, r3
   199b2:	781b      	ldrb	r3, [r3, #0]
   199b4:	2b00      	cmp	r3, #0
   199b6:	d006      	beq.n	199c6 <chk_mounted+0x12e>
   199b8:	2346      	movs	r3, #70	; 0x46
   199ba:	18fb      	adds	r3, r7, r3
   199bc:	781a      	ldrb	r2, [r3, #0]
   199be:	2346      	movs	r3, #70	; 0x46
   199c0:	18fb      	adds	r3, r7, r3
   199c2:	3a01      	subs	r2, #1
   199c4:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   199c6:	2346      	movs	r3, #70	; 0x46
   199c8:	18fb      	adds	r3, r7, r3
   199ca:	781b      	ldrb	r3, [r3, #0]
   199cc:	011b      	lsls	r3, r3, #4
   199ce:	33bf      	adds	r3, #191	; 0xbf
   199d0:	33ff      	adds	r3, #255	; 0xff
   199d2:	3330      	adds	r3, #48	; 0x30
   199d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   199d6:	18d3      	adds	r3, r2, r3
   199d8:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   199da:	6a3b      	ldr	r3, [r7, #32]
   199dc:	3304      	adds	r3, #4
   199de:	781b      	ldrb	r3, [r3, #0]
   199e0:	2b00      	cmp	r3, #0
   199e2:	d01c      	beq.n	19a1e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   199e4:	6a3b      	ldr	r3, [r7, #32]
   199e6:	330b      	adds	r3, #11
   199e8:	781b      	ldrb	r3, [r3, #0]
   199ea:	061a      	lsls	r2, r3, #24
   199ec:	6a3b      	ldr	r3, [r7, #32]
   199ee:	330a      	adds	r3, #10
   199f0:	781b      	ldrb	r3, [r3, #0]
   199f2:	041b      	lsls	r3, r3, #16
   199f4:	4313      	orrs	r3, r2
   199f6:	6a3a      	ldr	r2, [r7, #32]
   199f8:	3209      	adds	r2, #9
   199fa:	7812      	ldrb	r2, [r2, #0]
   199fc:	0212      	lsls	r2, r2, #8
   199fe:	4313      	orrs	r3, r2
   19a00:	6a3a      	ldr	r2, [r7, #32]
   19a02:	3208      	adds	r2, #8
   19a04:	7812      	ldrb	r2, [r2, #0]
   19a06:	4313      	orrs	r3, r2
   19a08:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   19a0a:	2347      	movs	r3, #71	; 0x47
   19a0c:	18fc      	adds	r4, r7, r3
   19a0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   19a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a12:	0011      	movs	r1, r2
   19a14:	0018      	movs	r0, r3
   19a16:	4b7b      	ldr	r3, [pc, #492]	; (19c04 <chk_mounted+0x36c>)
   19a18:	4798      	blx	r3
   19a1a:	0003      	movs	r3, r0
   19a1c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   19a1e:	2347      	movs	r3, #71	; 0x47
   19a20:	18fb      	adds	r3, r7, r3
   19a22:	781b      	ldrb	r3, [r3, #0]
   19a24:	2b03      	cmp	r3, #3
   19a26:	d101      	bne.n	19a2c <chk_mounted+0x194>
   19a28:	2301      	movs	r3, #1
   19a2a:	e209      	b.n	19e40 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   19a2c:	2347      	movs	r3, #71	; 0x47
   19a2e:	18fb      	adds	r3, r7, r3
   19a30:	781b      	ldrb	r3, [r3, #0]
   19a32:	2b00      	cmp	r3, #0
   19a34:	d001      	beq.n	19a3a <chk_mounted+0x1a2>
   19a36:	230d      	movs	r3, #13
   19a38:	e202      	b.n	19e40 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   19a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a3c:	223c      	movs	r2, #60	; 0x3c
   19a3e:	5c9b      	ldrb	r3, [r3, r2]
   19a40:	021b      	lsls	r3, r3, #8
   19a42:	b21a      	sxth	r2, r3
   19a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a46:	213b      	movs	r1, #59	; 0x3b
   19a48:	5c5b      	ldrb	r3, [r3, r1]
   19a4a:	b21b      	sxth	r3, r3
   19a4c:	4313      	orrs	r3, r2
   19a4e:	b21a      	sxth	r2, r3
   19a50:	2380      	movs	r3, #128	; 0x80
   19a52:	009b      	lsls	r3, r3, #2
   19a54:	429a      	cmp	r2, r3
   19a56:	d001      	beq.n	19a5c <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   19a58:	230d      	movs	r3, #13
   19a5a:	e1f1      	b.n	19e40 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   19a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a5e:	2247      	movs	r2, #71	; 0x47
   19a60:	5c9b      	ldrb	r3, [r3, r2]
   19a62:	021b      	lsls	r3, r3, #8
   19a64:	b21a      	sxth	r2, r3
   19a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a68:	2146      	movs	r1, #70	; 0x46
   19a6a:	5c5b      	ldrb	r3, [r3, r1]
   19a6c:	b21b      	sxth	r3, r3
   19a6e:	4313      	orrs	r3, r2
   19a70:	b21b      	sxth	r3, r3
   19a72:	b29b      	uxth	r3, r3
   19a74:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   19a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19a78:	2b00      	cmp	r3, #0
   19a7a:	d112      	bne.n	19aa2 <chk_mounted+0x20a>
   19a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a7e:	2257      	movs	r2, #87	; 0x57
   19a80:	5c9b      	ldrb	r3, [r3, r2]
   19a82:	061a      	lsls	r2, r3, #24
   19a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a86:	2156      	movs	r1, #86	; 0x56
   19a88:	5c5b      	ldrb	r3, [r3, r1]
   19a8a:	041b      	lsls	r3, r3, #16
   19a8c:	4313      	orrs	r3, r2
   19a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19a90:	2155      	movs	r1, #85	; 0x55
   19a92:	5c52      	ldrb	r2, [r2, r1]
   19a94:	0212      	lsls	r2, r2, #8
   19a96:	4313      	orrs	r3, r2
   19a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19a9a:	2154      	movs	r1, #84	; 0x54
   19a9c:	5c52      	ldrb	r2, [r2, r1]
   19a9e:	4313      	orrs	r3, r2
   19aa0:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   19aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   19aa6:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   19aa8:	231f      	movs	r3, #31
   19aaa:	18fb      	adds	r3, r7, r3
   19aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19aae:	2140      	movs	r1, #64	; 0x40
   19ab0:	5c52      	ldrb	r2, [r2, r1]
   19ab2:	701a      	strb	r2, [r3, #0]
   19ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19ab6:	221f      	movs	r2, #31
   19ab8:	18ba      	adds	r2, r7, r2
   19aba:	7812      	ldrb	r2, [r2, #0]
   19abc:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   19abe:	231f      	movs	r3, #31
   19ac0:	18fb      	adds	r3, r7, r3
   19ac2:	781b      	ldrb	r3, [r3, #0]
   19ac4:	2b01      	cmp	r3, #1
   19ac6:	d006      	beq.n	19ad6 <chk_mounted+0x23e>
   19ac8:	231f      	movs	r3, #31
   19aca:	18fb      	adds	r3, r7, r3
   19acc:	781b      	ldrb	r3, [r3, #0]
   19ace:	2b02      	cmp	r3, #2
   19ad0:	d001      	beq.n	19ad6 <chk_mounted+0x23e>
   19ad2:	230d      	movs	r3, #13
   19ad4:	e1b4      	b.n	19e40 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   19ad6:	231f      	movs	r3, #31
   19ad8:	18fb      	adds	r3, r7, r3
   19ada:	781a      	ldrb	r2, [r3, #0]
   19adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19ade:	4353      	muls	r3, r2
   19ae0:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   19ae2:	231f      	movs	r3, #31
   19ae4:	18fb      	adds	r3, r7, r3
   19ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19ae8:	213d      	movs	r1, #61	; 0x3d
   19aea:	5c52      	ldrb	r2, [r2, r1]
   19aec:	701a      	strb	r2, [r3, #0]
   19aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19af0:	221f      	movs	r2, #31
   19af2:	18ba      	adds	r2, r7, r2
   19af4:	7812      	ldrb	r2, [r2, #0]
   19af6:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   19af8:	231f      	movs	r3, #31
   19afa:	18fb      	adds	r3, r7, r3
   19afc:	781b      	ldrb	r3, [r3, #0]
   19afe:	2b00      	cmp	r3, #0
   19b00:	d008      	beq.n	19b14 <chk_mounted+0x27c>
   19b02:	231f      	movs	r3, #31
   19b04:	18fb      	adds	r3, r7, r3
   19b06:	781b      	ldrb	r3, [r3, #0]
   19b08:	221f      	movs	r2, #31
   19b0a:	18ba      	adds	r2, r7, r2
   19b0c:	7812      	ldrb	r2, [r2, #0]
   19b0e:	3a01      	subs	r2, #1
   19b10:	4013      	ands	r3, r2
   19b12:	d001      	beq.n	19b18 <chk_mounted+0x280>
   19b14:	230d      	movs	r3, #13
   19b16:	e193      	b.n	19e40 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   19b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b1a:	2242      	movs	r2, #66	; 0x42
   19b1c:	5c9b      	ldrb	r3, [r3, r2]
   19b1e:	021b      	lsls	r3, r3, #8
   19b20:	b21a      	sxth	r2, r3
   19b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b24:	2141      	movs	r1, #65	; 0x41
   19b26:	5c5b      	ldrb	r3, [r3, r1]
   19b28:	b21b      	sxth	r3, r3
   19b2a:	4313      	orrs	r3, r2
   19b2c:	b21b      	sxth	r3, r3
   19b2e:	b29a      	uxth	r2, r3
   19b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b32:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   19b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b36:	891b      	ldrh	r3, [r3, #8]
   19b38:	220f      	movs	r2, #15
   19b3a:	4013      	ands	r3, r2
   19b3c:	b29b      	uxth	r3, r3
   19b3e:	2b00      	cmp	r3, #0
   19b40:	d001      	beq.n	19b46 <chk_mounted+0x2ae>
   19b42:	230d      	movs	r3, #13
   19b44:	e17c      	b.n	19e40 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   19b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b48:	2244      	movs	r2, #68	; 0x44
   19b4a:	5c9b      	ldrb	r3, [r3, r2]
   19b4c:	021b      	lsls	r3, r3, #8
   19b4e:	b21a      	sxth	r2, r3
   19b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b52:	2143      	movs	r1, #67	; 0x43
   19b54:	5c5b      	ldrb	r3, [r3, r1]
   19b56:	b21b      	sxth	r3, r3
   19b58:	4313      	orrs	r3, r2
   19b5a:	b21b      	sxth	r3, r3
   19b5c:	b29b      	uxth	r3, r3
   19b5e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   19b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19b62:	2b00      	cmp	r3, #0
   19b64:	d112      	bne.n	19b8c <chk_mounted+0x2f4>
   19b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b68:	2253      	movs	r2, #83	; 0x53
   19b6a:	5c9b      	ldrb	r3, [r3, r2]
   19b6c:	061a      	lsls	r2, r3, #24
   19b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b70:	2152      	movs	r1, #82	; 0x52
   19b72:	5c5b      	ldrb	r3, [r3, r1]
   19b74:	041b      	lsls	r3, r3, #16
   19b76:	4313      	orrs	r3, r2
   19b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19b7a:	2151      	movs	r1, #81	; 0x51
   19b7c:	5c52      	ldrb	r2, [r2, r1]
   19b7e:	0212      	lsls	r2, r2, #8
   19b80:	4313      	orrs	r3, r2
   19b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19b84:	2150      	movs	r1, #80	; 0x50
   19b86:	5c52      	ldrb	r2, [r2, r1]
   19b88:	4313      	orrs	r3, r2
   19b8a:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   19b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b8e:	223f      	movs	r2, #63	; 0x3f
   19b90:	5c9b      	ldrb	r3, [r3, r2]
   19b92:	021b      	lsls	r3, r3, #8
   19b94:	b21a      	sxth	r2, r3
   19b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b98:	213e      	movs	r1, #62	; 0x3e
   19b9a:	5c5b      	ldrb	r3, [r3, r1]
   19b9c:	b21b      	sxth	r3, r3
   19b9e:	4313      	orrs	r3, r2
   19ba0:	b21a      	sxth	r2, r3
   19ba2:	231c      	movs	r3, #28
   19ba4:	18fb      	adds	r3, r7, r3
   19ba6:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   19ba8:	231c      	movs	r3, #28
   19baa:	18fb      	adds	r3, r7, r3
   19bac:	881b      	ldrh	r3, [r3, #0]
   19bae:	2b00      	cmp	r3, #0
   19bb0:	d101      	bne.n	19bb6 <chk_mounted+0x31e>
   19bb2:	230d      	movs	r3, #13
   19bb4:	e144      	b.n	19e40 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   19bb6:	231c      	movs	r3, #28
   19bb8:	18fb      	adds	r3, r7, r3
   19bba:	881a      	ldrh	r2, [r3, #0]
   19bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19bbe:	18d3      	adds	r3, r2, r3
   19bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19bc2:	8912      	ldrh	r2, [r2, #8]
   19bc4:	0912      	lsrs	r2, r2, #4
   19bc6:	b292      	uxth	r2, r2
   19bc8:	189b      	adds	r3, r3, r2
   19bca:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   19bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   19bce:	69bb      	ldr	r3, [r7, #24]
   19bd0:	429a      	cmp	r2, r3
   19bd2:	d201      	bcs.n	19bd8 <chk_mounted+0x340>
   19bd4:	230d      	movs	r3, #13
   19bd6:	e133      	b.n	19e40 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   19bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   19bda:	69bb      	ldr	r3, [r7, #24]
   19bdc:	1ad2      	subs	r2, r2, r3
   19bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19be0:	789b      	ldrb	r3, [r3, #2]
   19be2:	0019      	movs	r1, r3
   19be4:	4b08      	ldr	r3, [pc, #32]	; (19c08 <chk_mounted+0x370>)
   19be6:	0010      	movs	r0, r2
   19be8:	4798      	blx	r3
   19bea:	0003      	movs	r3, r0
   19bec:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   19bee:	697b      	ldr	r3, [r7, #20]
   19bf0:	2b00      	cmp	r3, #0
   19bf2:	d10b      	bne.n	19c0c <chk_mounted+0x374>
   19bf4:	230d      	movs	r3, #13
   19bf6:	e123      	b.n	19e40 <chk_mounted+0x5a8>
   19bf8:	20003d84 	.word	0x20003d84
   19bfc:	000179f5 	.word	0x000179f5
   19c00:	00017971 	.word	0x00017971
   19c04:	000197c5 	.word	0x000197c5
   19c08:	0001ef45 	.word	0x0001ef45
	fmt = FS_FAT12;
   19c0c:	2347      	movs	r3, #71	; 0x47
   19c0e:	18fb      	adds	r3, r7, r3
   19c10:	2201      	movs	r2, #1
   19c12:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   19c14:	697b      	ldr	r3, [r7, #20]
   19c16:	4a8c      	ldr	r2, [pc, #560]	; (19e48 <chk_mounted+0x5b0>)
   19c18:	4293      	cmp	r3, r2
   19c1a:	d903      	bls.n	19c24 <chk_mounted+0x38c>
   19c1c:	2347      	movs	r3, #71	; 0x47
   19c1e:	18fb      	adds	r3, r7, r3
   19c20:	2202      	movs	r2, #2
   19c22:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   19c24:	697b      	ldr	r3, [r7, #20]
   19c26:	4a89      	ldr	r2, [pc, #548]	; (19e4c <chk_mounted+0x5b4>)
   19c28:	4293      	cmp	r3, r2
   19c2a:	d903      	bls.n	19c34 <chk_mounted+0x39c>
   19c2c:	2347      	movs	r3, #71	; 0x47
   19c2e:	18fb      	adds	r3, r7, r3
   19c30:	2203      	movs	r2, #3
   19c32:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   19c34:	697b      	ldr	r3, [r7, #20]
   19c36:	1c9a      	adds	r2, r3, #2
   19c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c3a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   19c3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   19c3e:	69bb      	ldr	r3, [r7, #24]
   19c40:	18d2      	adds	r2, r2, r3
   19c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c44:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   19c46:	231c      	movs	r3, #28
   19c48:	18fb      	adds	r3, r7, r3
   19c4a:	881a      	ldrh	r2, [r3, #0]
   19c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19c4e:	18d2      	adds	r2, r2, r3
   19c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c52:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   19c54:	2347      	movs	r3, #71	; 0x47
   19c56:	18fb      	adds	r3, r7, r3
   19c58:	781b      	ldrb	r3, [r3, #0]
   19c5a:	2b03      	cmp	r3, #3
   19c5c:	d11e      	bne.n	19c9c <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   19c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c60:	891b      	ldrh	r3, [r3, #8]
   19c62:	2b00      	cmp	r3, #0
   19c64:	d001      	beq.n	19c6a <chk_mounted+0x3d2>
   19c66:	230d      	movs	r3, #13
   19c68:	e0ea      	b.n	19e40 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   19c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c6c:	225f      	movs	r2, #95	; 0x5f
   19c6e:	5c9b      	ldrb	r3, [r3, r2]
   19c70:	061a      	lsls	r2, r3, #24
   19c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c74:	215e      	movs	r1, #94	; 0x5e
   19c76:	5c5b      	ldrb	r3, [r3, r1]
   19c78:	041b      	lsls	r3, r3, #16
   19c7a:	4313      	orrs	r3, r2
   19c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19c7e:	215d      	movs	r1, #93	; 0x5d
   19c80:	5c52      	ldrb	r2, [r2, r1]
   19c82:	0212      	lsls	r2, r2, #8
   19c84:	4313      	orrs	r3, r2
   19c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19c88:	215c      	movs	r1, #92	; 0x5c
   19c8a:	5c52      	ldrb	r2, [r2, r1]
   19c8c:	431a      	orrs	r2, r3
   19c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c90:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   19c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c94:	699b      	ldr	r3, [r3, #24]
   19c96:	009b      	lsls	r3, r3, #2
   19c98:	633b      	str	r3, [r7, #48]	; 0x30
   19c9a:	e020      	b.n	19cde <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   19c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c9e:	891b      	ldrh	r3, [r3, #8]
   19ca0:	2b00      	cmp	r3, #0
   19ca2:	d101      	bne.n	19ca8 <chk_mounted+0x410>
   19ca4:	230d      	movs	r3, #13
   19ca6:	e0cb      	b.n	19e40 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   19ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19caa:	6a1a      	ldr	r2, [r3, #32]
   19cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19cae:	18d2      	adds	r2, r2, r3
   19cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19cb2:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   19cb4:	2347      	movs	r3, #71	; 0x47
   19cb6:	18fb      	adds	r3, r7, r3
   19cb8:	781b      	ldrb	r3, [r3, #0]
   19cba:	2b02      	cmp	r3, #2
   19cbc:	d103      	bne.n	19cc6 <chk_mounted+0x42e>
   19cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19cc0:	699b      	ldr	r3, [r3, #24]
   19cc2:	005b      	lsls	r3, r3, #1
   19cc4:	e00a      	b.n	19cdc <chk_mounted+0x444>
   19cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19cc8:	699a      	ldr	r2, [r3, #24]
   19cca:	0013      	movs	r3, r2
   19ccc:	005b      	lsls	r3, r3, #1
   19cce:	189b      	adds	r3, r3, r2
   19cd0:	085a      	lsrs	r2, r3, #1
   19cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19cd4:	699b      	ldr	r3, [r3, #24]
   19cd6:	2101      	movs	r1, #1
   19cd8:	400b      	ands	r3, r1
   19cda:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   19cdc:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   19cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19ce0:	69da      	ldr	r2, [r3, #28]
   19ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19ce4:	495a      	ldr	r1, [pc, #360]	; (19e50 <chk_mounted+0x5b8>)
   19ce6:	468c      	mov	ip, r1
   19ce8:	4463      	add	r3, ip
   19cea:	0a5b      	lsrs	r3, r3, #9
   19cec:	429a      	cmp	r2, r3
   19cee:	d201      	bcs.n	19cf4 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   19cf0:	230d      	movs	r3, #13
   19cf2:	e0a5      	b.n	19e40 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   19cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19cf6:	2201      	movs	r2, #1
   19cf8:	4252      	negs	r2, r2
   19cfa:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   19cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19cfe:	2200      	movs	r2, #0
   19d00:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   19d02:	2347      	movs	r3, #71	; 0x47
   19d04:	18fb      	adds	r3, r7, r3
   19d06:	781b      	ldrb	r3, [r3, #0]
   19d08:	2b03      	cmp	r3, #3
   19d0a:	d000      	beq.n	19d0e <chk_mounted+0x476>
   19d0c:	e082      	b.n	19e14 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   19d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d10:	2200      	movs	r2, #0
   19d12:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   19d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d16:	2261      	movs	r2, #97	; 0x61
   19d18:	5c9b      	ldrb	r3, [r3, r2]
   19d1a:	021b      	lsls	r3, r3, #8
   19d1c:	b21a      	sxth	r2, r3
   19d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d20:	2160      	movs	r1, #96	; 0x60
   19d22:	5c5b      	ldrb	r3, [r3, r1]
   19d24:	b21b      	sxth	r3, r3
   19d26:	4313      	orrs	r3, r2
   19d28:	b21b      	sxth	r3, r3
   19d2a:	b29b      	uxth	r3, r3
   19d2c:	001a      	movs	r2, r3
   19d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19d30:	18d2      	adds	r2, r2, r3
   19d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d34:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   19d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d38:	7858      	ldrb	r0, [r3, #1]
   19d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d3c:	3330      	adds	r3, #48	; 0x30
   19d3e:	0019      	movs	r1, r3
   19d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d42:	695a      	ldr	r2, [r3, #20]
   19d44:	2301      	movs	r3, #1
   19d46:	4c43      	ldr	r4, [pc, #268]	; (19e54 <chk_mounted+0x5bc>)
   19d48:	47a0      	blx	r4
   19d4a:	1e03      	subs	r3, r0, #0
   19d4c:	d162      	bne.n	19e14 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   19d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d50:	4a41      	ldr	r2, [pc, #260]	; (19e58 <chk_mounted+0x5c0>)
   19d52:	5c9b      	ldrb	r3, [r3, r2]
   19d54:	021b      	lsls	r3, r3, #8
   19d56:	b21a      	sxth	r2, r3
   19d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d5a:	4940      	ldr	r1, [pc, #256]	; (19e5c <chk_mounted+0x5c4>)
   19d5c:	5c5b      	ldrb	r3, [r3, r1]
   19d5e:	b21b      	sxth	r3, r3
   19d60:	4313      	orrs	r3, r2
   19d62:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   19d64:	4a3e      	ldr	r2, [pc, #248]	; (19e60 <chk_mounted+0x5c8>)
   19d66:	4293      	cmp	r3, r2
   19d68:	d154      	bne.n	19e14 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   19d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d6c:	2233      	movs	r2, #51	; 0x33
   19d6e:	5c9b      	ldrb	r3, [r3, r2]
   19d70:	061a      	lsls	r2, r3, #24
   19d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d74:	2132      	movs	r1, #50	; 0x32
   19d76:	5c5b      	ldrb	r3, [r3, r1]
   19d78:	041b      	lsls	r3, r3, #16
   19d7a:	4313      	orrs	r3, r2
   19d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19d7e:	2131      	movs	r1, #49	; 0x31
   19d80:	5c52      	ldrb	r2, [r2, r1]
   19d82:	0212      	lsls	r2, r2, #8
   19d84:	4313      	orrs	r3, r2
   19d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19d88:	2130      	movs	r1, #48	; 0x30
   19d8a:	5c52      	ldrb	r2, [r2, r1]
   19d8c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   19d8e:	4a35      	ldr	r2, [pc, #212]	; (19e64 <chk_mounted+0x5cc>)
   19d90:	4293      	cmp	r3, r2
   19d92:	d13f      	bne.n	19e14 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   19d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d96:	4a34      	ldr	r2, [pc, #208]	; (19e68 <chk_mounted+0x5d0>)
   19d98:	5c9b      	ldrb	r3, [r3, r2]
   19d9a:	061a      	lsls	r2, r3, #24
   19d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d9e:	4933      	ldr	r1, [pc, #204]	; (19e6c <chk_mounted+0x5d4>)
   19da0:	5c5b      	ldrb	r3, [r3, r1]
   19da2:	041b      	lsls	r3, r3, #16
   19da4:	4313      	orrs	r3, r2
   19da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19da8:	4931      	ldr	r1, [pc, #196]	; (19e70 <chk_mounted+0x5d8>)
   19daa:	5c52      	ldrb	r2, [r2, r1]
   19dac:	0212      	lsls	r2, r2, #8
   19dae:	4313      	orrs	r3, r2
   19db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   19db2:	2285      	movs	r2, #133	; 0x85
   19db4:	0092      	lsls	r2, r2, #2
   19db6:	5c8a      	ldrb	r2, [r1, r2]
   19db8:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   19dba:	4a2e      	ldr	r2, [pc, #184]	; (19e74 <chk_mounted+0x5dc>)
   19dbc:	4293      	cmp	r3, r2
   19dbe:	d129      	bne.n	19e14 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   19dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19dc2:	4a2d      	ldr	r2, [pc, #180]	; (19e78 <chk_mounted+0x5e0>)
   19dc4:	5c9b      	ldrb	r3, [r3, r2]
   19dc6:	061a      	lsls	r2, r3, #24
   19dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19dca:	492c      	ldr	r1, [pc, #176]	; (19e7c <chk_mounted+0x5e4>)
   19dcc:	5c5b      	ldrb	r3, [r3, r1]
   19dce:	041b      	lsls	r3, r3, #16
   19dd0:	4313      	orrs	r3, r2
   19dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19dd4:	492a      	ldr	r1, [pc, #168]	; (19e80 <chk_mounted+0x5e8>)
   19dd6:	5c52      	ldrb	r2, [r2, r1]
   19dd8:	0212      	lsls	r2, r2, #8
   19dda:	4313      	orrs	r3, r2
   19ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   19dde:	2287      	movs	r2, #135	; 0x87
   19de0:	0092      	lsls	r2, r2, #2
   19de2:	5c8a      	ldrb	r2, [r1, r2]
   19de4:	431a      	orrs	r2, r3
   19de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19de8:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   19dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19dec:	4a25      	ldr	r2, [pc, #148]	; (19e84 <chk_mounted+0x5ec>)
   19dee:	5c9b      	ldrb	r3, [r3, r2]
   19df0:	061a      	lsls	r2, r3, #24
   19df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19df4:	4924      	ldr	r1, [pc, #144]	; (19e88 <chk_mounted+0x5f0>)
   19df6:	5c5b      	ldrb	r3, [r3, r1]
   19df8:	041b      	lsls	r3, r3, #16
   19dfa:	4313      	orrs	r3, r2
   19dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19dfe:	4923      	ldr	r1, [pc, #140]	; (19e8c <chk_mounted+0x5f4>)
   19e00:	5c52      	ldrb	r2, [r2, r1]
   19e02:	0212      	lsls	r2, r2, #8
   19e04:	4313      	orrs	r3, r2
   19e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   19e08:	2286      	movs	r2, #134	; 0x86
   19e0a:	0092      	lsls	r2, r2, #2
   19e0c:	5c8a      	ldrb	r2, [r1, r2]
   19e0e:	431a      	orrs	r2, r3
   19e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19e12:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   19e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19e16:	2247      	movs	r2, #71	; 0x47
   19e18:	18ba      	adds	r2, r7, r2
   19e1a:	7812      	ldrb	r2, [r2, #0]
   19e1c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   19e1e:	4b1c      	ldr	r3, [pc, #112]	; (19e90 <chk_mounted+0x5f8>)
   19e20:	881b      	ldrh	r3, [r3, #0]
   19e22:	3301      	adds	r3, #1
   19e24:	b29a      	uxth	r2, r3
   19e26:	4b1a      	ldr	r3, [pc, #104]	; (19e90 <chk_mounted+0x5f8>)
   19e28:	801a      	strh	r2, [r3, #0]
   19e2a:	4b19      	ldr	r3, [pc, #100]	; (19e90 <chk_mounted+0x5f8>)
   19e2c:	881a      	ldrh	r2, [r3, #0]
   19e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19e30:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   19e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19e34:	2200      	movs	r2, #0
   19e36:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   19e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19e3a:	2200      	movs	r2, #0
   19e3c:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   19e3e:	2300      	movs	r3, #0
}
   19e40:	0018      	movs	r0, r3
   19e42:	46bd      	mov	sp, r7
   19e44:	b013      	add	sp, #76	; 0x4c
   19e46:	bd90      	pop	{r4, r7, pc}
   19e48:	00000ff5 	.word	0x00000ff5
   19e4c:	0000fff5 	.word	0x0000fff5
   19e50:	000001ff 	.word	0x000001ff
   19e54:	00017a2d 	.word	0x00017a2d
   19e58:	0000022f 	.word	0x0000022f
   19e5c:	0000022e 	.word	0x0000022e
   19e60:	ffffaa55 	.word	0xffffaa55
   19e64:	41615252 	.word	0x41615252
   19e68:	00000217 	.word	0x00000217
   19e6c:	00000216 	.word	0x00000216
   19e70:	00000215 	.word	0x00000215
   19e74:	61417272 	.word	0x61417272
   19e78:	0000021f 	.word	0x0000021f
   19e7c:	0000021e 	.word	0x0000021e
   19e80:	0000021d 	.word	0x0000021d
   19e84:	0000021b 	.word	0x0000021b
   19e88:	0000021a 	.word	0x0000021a
   19e8c:	00000219 	.word	0x00000219
   19e90:	20003da4 	.word	0x20003da4

00019e94 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   19e94:	b580      	push	{r7, lr}
   19e96:	b082      	sub	sp, #8
   19e98:	af00      	add	r7, sp, #0
   19e9a:	6078      	str	r0, [r7, #4]
   19e9c:	000a      	movs	r2, r1
   19e9e:	1cbb      	adds	r3, r7, #2
   19ea0:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   19ea2:	687b      	ldr	r3, [r7, #4]
   19ea4:	2b00      	cmp	r3, #0
   19ea6:	d009      	beq.n	19ebc <validate+0x28>
   19ea8:	687b      	ldr	r3, [r7, #4]
   19eaa:	781b      	ldrb	r3, [r3, #0]
   19eac:	2b00      	cmp	r3, #0
   19eae:	d005      	beq.n	19ebc <validate+0x28>
   19eb0:	687b      	ldr	r3, [r7, #4]
   19eb2:	88db      	ldrh	r3, [r3, #6]
   19eb4:	1cba      	adds	r2, r7, #2
   19eb6:	8812      	ldrh	r2, [r2, #0]
   19eb8:	429a      	cmp	r2, r3
   19eba:	d001      	beq.n	19ec0 <validate+0x2c>
		return FR_INVALID_OBJECT;
   19ebc:	2309      	movs	r3, #9
   19ebe:	e00c      	b.n	19eda <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   19ec0:	687b      	ldr	r3, [r7, #4]
   19ec2:	785b      	ldrb	r3, [r3, #1]
   19ec4:	0018      	movs	r0, r3
   19ec6:	4b07      	ldr	r3, [pc, #28]	; (19ee4 <validate+0x50>)
   19ec8:	4798      	blx	r3
   19eca:	0003      	movs	r3, r0
   19ecc:	001a      	movs	r2, r3
   19ece:	2301      	movs	r3, #1
   19ed0:	4013      	ands	r3, r2
   19ed2:	d001      	beq.n	19ed8 <validate+0x44>
		return FR_NOT_READY;
   19ed4:	2303      	movs	r3, #3
   19ed6:	e000      	b.n	19eda <validate+0x46>

	return FR_OK;
   19ed8:	2300      	movs	r3, #0
}
   19eda:	0018      	movs	r0, r3
   19edc:	46bd      	mov	sp, r7
   19ede:	b002      	add	sp, #8
   19ee0:	bd80      	pop	{r7, pc}
   19ee2:	46c0      	nop			; (mov r8, r8)
   19ee4:	000179f5 	.word	0x000179f5

00019ee8 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   19ee8:	b580      	push	{r7, lr}
   19eea:	b084      	sub	sp, #16
   19eec:	af00      	add	r7, sp, #0
   19eee:	0002      	movs	r2, r0
   19ef0:	6039      	str	r1, [r7, #0]
   19ef2:	1dfb      	adds	r3, r7, #7
   19ef4:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   19ef6:	1dfb      	adds	r3, r7, #7
   19ef8:	781b      	ldrb	r3, [r3, #0]
   19efa:	2b07      	cmp	r3, #7
   19efc:	d901      	bls.n	19f02 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   19efe:	230b      	movs	r3, #11
   19f00:	e018      	b.n	19f34 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   19f02:	1dfb      	adds	r3, r7, #7
   19f04:	781a      	ldrb	r2, [r3, #0]
   19f06:	4b0d      	ldr	r3, [pc, #52]	; (19f3c <f_mount+0x54>)
   19f08:	0092      	lsls	r2, r2, #2
   19f0a:	58d3      	ldr	r3, [r2, r3]
   19f0c:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   19f0e:	68fb      	ldr	r3, [r7, #12]
   19f10:	2b00      	cmp	r3, #0
   19f12:	d002      	beq.n	19f1a <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   19f14:	68fb      	ldr	r3, [r7, #12]
   19f16:	2200      	movs	r2, #0
   19f18:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   19f1a:	683b      	ldr	r3, [r7, #0]
   19f1c:	2b00      	cmp	r3, #0
   19f1e:	d002      	beq.n	19f26 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   19f20:	683b      	ldr	r3, [r7, #0]
   19f22:	2200      	movs	r2, #0
   19f24:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   19f26:	1dfb      	adds	r3, r7, #7
   19f28:	781a      	ldrb	r2, [r3, #0]
   19f2a:	4b04      	ldr	r3, [pc, #16]	; (19f3c <f_mount+0x54>)
   19f2c:	0092      	lsls	r2, r2, #2
   19f2e:	6839      	ldr	r1, [r7, #0]
   19f30:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   19f32:	2300      	movs	r3, #0
}
   19f34:	0018      	movs	r0, r3
   19f36:	46bd      	mov	sp, r7
   19f38:	b004      	add	sp, #16
   19f3a:	bd80      	pop	{r7, pc}
   19f3c:	20003d84 	.word	0x20003d84

00019f40 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   19f40:	b590      	push	{r4, r7, lr}
   19f42:	4ce5      	ldr	r4, [pc, #916]	; (1a2d8 <f_open+0x398>)
   19f44:	44a5      	add	sp, r4
   19f46:	af00      	add	r7, sp, #0
   19f48:	60f8      	str	r0, [r7, #12]
   19f4a:	60b9      	str	r1, [r7, #8]
   19f4c:	4be3      	ldr	r3, [pc, #908]	; (1a2dc <f_open+0x39c>)
   19f4e:	2194      	movs	r1, #148	; 0x94
   19f50:	0089      	lsls	r1, r1, #2
   19f52:	468c      	mov	ip, r1
   19f54:	44bc      	add	ip, r7
   19f56:	4463      	add	r3, ip
   19f58:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   19f5a:	68fb      	ldr	r3, [r7, #12]
   19f5c:	2200      	movs	r2, #0
   19f5e:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   19f60:	4bde      	ldr	r3, [pc, #888]	; (1a2dc <f_open+0x39c>)
   19f62:	2294      	movs	r2, #148	; 0x94
   19f64:	0092      	lsls	r2, r2, #2
   19f66:	4694      	mov	ip, r2
   19f68:	44bc      	add	ip, r7
   19f6a:	4463      	add	r3, ip
   19f6c:	4adb      	ldr	r2, [pc, #876]	; (1a2dc <f_open+0x39c>)
   19f6e:	2194      	movs	r1, #148	; 0x94
   19f70:	0089      	lsls	r1, r1, #2
   19f72:	468c      	mov	ip, r1
   19f74:	44bc      	add	ip, r7
   19f76:	4462      	add	r2, ip
   19f78:	7812      	ldrb	r2, [r2, #0]
   19f7a:	211f      	movs	r1, #31
   19f7c:	400a      	ands	r2, r1
   19f7e:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   19f80:	4bd6      	ldr	r3, [pc, #856]	; (1a2dc <f_open+0x39c>)
   19f82:	2294      	movs	r2, #148	; 0x94
   19f84:	0092      	lsls	r2, r2, #2
   19f86:	4694      	mov	ip, r2
   19f88:	44bc      	add	ip, r7
   19f8a:	4463      	add	r3, ip
   19f8c:	781b      	ldrb	r3, [r3, #0]
   19f8e:	2201      	movs	r2, #1
   19f90:	4393      	bics	r3, r2
   19f92:	b2da      	uxtb	r2, r3
   19f94:	4bd2      	ldr	r3, [pc, #840]	; (1a2e0 <f_open+0x3a0>)
   19f96:	18fc      	adds	r4, r7, r3
   19f98:	2387      	movs	r3, #135	; 0x87
   19f9a:	009b      	lsls	r3, r3, #2
   19f9c:	18f9      	adds	r1, r7, r3
   19f9e:	2308      	movs	r3, #8
   19fa0:	18fb      	adds	r3, r7, r3
   19fa2:	0018      	movs	r0, r3
   19fa4:	4bcf      	ldr	r3, [pc, #828]	; (1a2e4 <f_open+0x3a4>)
   19fa6:	4798      	blx	r3
   19fa8:	0003      	movs	r3, r0
   19faa:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   19fac:	2387      	movs	r3, #135	; 0x87
   19fae:	009b      	lsls	r3, r3, #2
   19fb0:	18fb      	adds	r3, r7, r3
   19fb2:	2284      	movs	r2, #132	; 0x84
   19fb4:	0092      	lsls	r2, r2, #2
   19fb6:	18ba      	adds	r2, r7, r2
   19fb8:	619a      	str	r2, [r3, #24]
   19fba:	2387      	movs	r3, #135	; 0x87
   19fbc:	009b      	lsls	r3, r3, #2
   19fbe:	18fb      	adds	r3, r7, r3
   19fc0:	2210      	movs	r2, #16
   19fc2:	18ba      	adds	r2, r7, r2
   19fc4:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   19fc6:	4bc6      	ldr	r3, [pc, #792]	; (1a2e0 <f_open+0x3a0>)
   19fc8:	18fb      	adds	r3, r7, r3
   19fca:	781b      	ldrb	r3, [r3, #0]
   19fcc:	2b00      	cmp	r3, #0
   19fce:	d10b      	bne.n	19fe8 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   19fd0:	68ba      	ldr	r2, [r7, #8]
   19fd2:	4bc3      	ldr	r3, [pc, #780]	; (1a2e0 <f_open+0x3a0>)
   19fd4:	18fc      	adds	r4, r7, r3
   19fd6:	2387      	movs	r3, #135	; 0x87
   19fd8:	009b      	lsls	r3, r3, #2
   19fda:	18fb      	adds	r3, r7, r3
   19fdc:	0011      	movs	r1, r2
   19fde:	0018      	movs	r0, r3
   19fe0:	4bc1      	ldr	r3, [pc, #772]	; (1a2e8 <f_open+0x3a8>)
   19fe2:	4798      	blx	r3
   19fe4:	0003      	movs	r3, r0
   19fe6:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   19fe8:	2387      	movs	r3, #135	; 0x87
   19fea:	009b      	lsls	r3, r3, #2
   19fec:	18fb      	adds	r3, r7, r3
   19fee:	695b      	ldr	r3, [r3, #20]
   19ff0:	2292      	movs	r2, #146	; 0x92
   19ff2:	0092      	lsls	r2, r2, #2
   19ff4:	18ba      	adds	r2, r7, r2
   19ff6:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   19ff8:	4bb9      	ldr	r3, [pc, #740]	; (1a2e0 <f_open+0x3a0>)
   19ffa:	18fb      	adds	r3, r7, r3
   19ffc:	781b      	ldrb	r3, [r3, #0]
   19ffe:	2b00      	cmp	r3, #0
   1a000:	d109      	bne.n	1a016 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   1a002:	2392      	movs	r3, #146	; 0x92
   1a004:	009b      	lsls	r3, r3, #2
   1a006:	18fb      	adds	r3, r7, r3
   1a008:	681b      	ldr	r3, [r3, #0]
   1a00a:	2b00      	cmp	r3, #0
   1a00c:	d103      	bne.n	1a016 <f_open+0xd6>
			res = FR_INVALID_NAME;
   1a00e:	4bb4      	ldr	r3, [pc, #720]	; (1a2e0 <f_open+0x3a0>)
   1a010:	18fb      	adds	r3, r7, r3
   1a012:	2206      	movs	r2, #6
   1a014:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1a016:	4bb1      	ldr	r3, [pc, #708]	; (1a2dc <f_open+0x39c>)
   1a018:	2294      	movs	r2, #148	; 0x94
   1a01a:	0092      	lsls	r2, r2, #2
   1a01c:	4694      	mov	ip, r2
   1a01e:	44bc      	add	ip, r7
   1a020:	4463      	add	r3, ip
   1a022:	781b      	ldrb	r3, [r3, #0]
   1a024:	221c      	movs	r2, #28
   1a026:	4013      	ands	r3, r2
   1a028:	d100      	bne.n	1a02c <f_open+0xec>
   1a02a:	e141      	b.n	1a2b0 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   1a02c:	4bac      	ldr	r3, [pc, #688]	; (1a2e0 <f_open+0x3a0>)
   1a02e:	18fb      	adds	r3, r7, r3
   1a030:	781b      	ldrb	r3, [r3, #0]
   1a032:	2b00      	cmp	r3, #0
   1a034:	d027      	beq.n	1a086 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   1a036:	4baa      	ldr	r3, [pc, #680]	; (1a2e0 <f_open+0x3a0>)
   1a038:	18fb      	adds	r3, r7, r3
   1a03a:	781b      	ldrb	r3, [r3, #0]
   1a03c:	2b04      	cmp	r3, #4
   1a03e:	d109      	bne.n	1a054 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   1a040:	4ba7      	ldr	r3, [pc, #668]	; (1a2e0 <f_open+0x3a0>)
   1a042:	18fc      	adds	r4, r7, r3
   1a044:	2387      	movs	r3, #135	; 0x87
   1a046:	009b      	lsls	r3, r3, #2
   1a048:	18fb      	adds	r3, r7, r3
   1a04a:	0018      	movs	r0, r3
   1a04c:	4ba7      	ldr	r3, [pc, #668]	; (1a2ec <f_open+0x3ac>)
   1a04e:	4798      	blx	r3
   1a050:	0003      	movs	r3, r0
   1a052:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   1a054:	4ba1      	ldr	r3, [pc, #644]	; (1a2dc <f_open+0x39c>)
   1a056:	2294      	movs	r2, #148	; 0x94
   1a058:	0092      	lsls	r2, r2, #2
   1a05a:	4694      	mov	ip, r2
   1a05c:	44bc      	add	ip, r7
   1a05e:	4463      	add	r3, ip
   1a060:	4a9e      	ldr	r2, [pc, #632]	; (1a2dc <f_open+0x39c>)
   1a062:	2194      	movs	r1, #148	; 0x94
   1a064:	0089      	lsls	r1, r1, #2
   1a066:	468c      	mov	ip, r1
   1a068:	44bc      	add	ip, r7
   1a06a:	4462      	add	r2, ip
   1a06c:	7812      	ldrb	r2, [r2, #0]
   1a06e:	2108      	movs	r1, #8
   1a070:	430a      	orrs	r2, r1
   1a072:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   1a074:	2387      	movs	r3, #135	; 0x87
   1a076:	009b      	lsls	r3, r3, #2
   1a078:	18fb      	adds	r3, r7, r3
   1a07a:	695b      	ldr	r3, [r3, #20]
   1a07c:	2292      	movs	r2, #146	; 0x92
   1a07e:	0092      	lsls	r2, r2, #2
   1a080:	18ba      	adds	r2, r7, r2
   1a082:	6013      	str	r3, [r2, #0]
   1a084:	e01c      	b.n	1a0c0 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   1a086:	2392      	movs	r3, #146	; 0x92
   1a088:	009b      	lsls	r3, r3, #2
   1a08a:	18fb      	adds	r3, r7, r3
   1a08c:	681b      	ldr	r3, [r3, #0]
   1a08e:	330b      	adds	r3, #11
   1a090:	781b      	ldrb	r3, [r3, #0]
   1a092:	001a      	movs	r2, r3
   1a094:	2311      	movs	r3, #17
   1a096:	4013      	ands	r3, r2
   1a098:	d004      	beq.n	1a0a4 <f_open+0x164>
				res = FR_DENIED;
   1a09a:	4b91      	ldr	r3, [pc, #580]	; (1a2e0 <f_open+0x3a0>)
   1a09c:	18fb      	adds	r3, r7, r3
   1a09e:	2207      	movs	r2, #7
   1a0a0:	701a      	strb	r2, [r3, #0]
   1a0a2:	e00d      	b.n	1a0c0 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   1a0a4:	4b8d      	ldr	r3, [pc, #564]	; (1a2dc <f_open+0x39c>)
   1a0a6:	2294      	movs	r2, #148	; 0x94
   1a0a8:	0092      	lsls	r2, r2, #2
   1a0aa:	4694      	mov	ip, r2
   1a0ac:	44bc      	add	ip, r7
   1a0ae:	4463      	add	r3, ip
   1a0b0:	781b      	ldrb	r3, [r3, #0]
   1a0b2:	2204      	movs	r2, #4
   1a0b4:	4013      	ands	r3, r2
   1a0b6:	d003      	beq.n	1a0c0 <f_open+0x180>
					res = FR_EXIST;
   1a0b8:	4b89      	ldr	r3, [pc, #548]	; (1a2e0 <f_open+0x3a0>)
   1a0ba:	18fb      	adds	r3, r7, r3
   1a0bc:	2208      	movs	r2, #8
   1a0be:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   1a0c0:	4b87      	ldr	r3, [pc, #540]	; (1a2e0 <f_open+0x3a0>)
   1a0c2:	18fb      	adds	r3, r7, r3
   1a0c4:	781b      	ldrb	r3, [r3, #0]
   1a0c6:	2b00      	cmp	r3, #0
   1a0c8:	d000      	beq.n	1a0cc <f_open+0x18c>
   1a0ca:	e12f      	b.n	1a32c <f_open+0x3ec>
   1a0cc:	4b83      	ldr	r3, [pc, #524]	; (1a2dc <f_open+0x39c>)
   1a0ce:	2294      	movs	r2, #148	; 0x94
   1a0d0:	0092      	lsls	r2, r2, #2
   1a0d2:	4694      	mov	ip, r2
   1a0d4:	44bc      	add	ip, r7
   1a0d6:	4463      	add	r3, ip
   1a0d8:	781b      	ldrb	r3, [r3, #0]
   1a0da:	2208      	movs	r2, #8
   1a0dc:	4013      	ands	r3, r2
   1a0de:	d100      	bne.n	1a0e2 <f_open+0x1a2>
   1a0e0:	e124      	b.n	1a32c <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   1a0e2:	4b83      	ldr	r3, [pc, #524]	; (1a2f0 <f_open+0x3b0>)
   1a0e4:	4798      	blx	r3
   1a0e6:	0003      	movs	r3, r0
   1a0e8:	2291      	movs	r2, #145	; 0x91
   1a0ea:	0092      	lsls	r2, r2, #2
   1a0ec:	18ba      	adds	r2, r7, r2
   1a0ee:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   1a0f0:	2392      	movs	r3, #146	; 0x92
   1a0f2:	009b      	lsls	r3, r3, #2
   1a0f4:	18fb      	adds	r3, r7, r3
   1a0f6:	681b      	ldr	r3, [r3, #0]
   1a0f8:	330e      	adds	r3, #14
   1a0fa:	2291      	movs	r2, #145	; 0x91
   1a0fc:	0092      	lsls	r2, r2, #2
   1a0fe:	18ba      	adds	r2, r7, r2
   1a100:	6812      	ldr	r2, [r2, #0]
   1a102:	b2d2      	uxtb	r2, r2
   1a104:	701a      	strb	r2, [r3, #0]
   1a106:	2392      	movs	r3, #146	; 0x92
   1a108:	009b      	lsls	r3, r3, #2
   1a10a:	18fb      	adds	r3, r7, r3
   1a10c:	681b      	ldr	r3, [r3, #0]
   1a10e:	330f      	adds	r3, #15
   1a110:	2291      	movs	r2, #145	; 0x91
   1a112:	0092      	lsls	r2, r2, #2
   1a114:	18ba      	adds	r2, r7, r2
   1a116:	6812      	ldr	r2, [r2, #0]
   1a118:	b292      	uxth	r2, r2
   1a11a:	0a12      	lsrs	r2, r2, #8
   1a11c:	b292      	uxth	r2, r2
   1a11e:	b2d2      	uxtb	r2, r2
   1a120:	701a      	strb	r2, [r3, #0]
   1a122:	2392      	movs	r3, #146	; 0x92
   1a124:	009b      	lsls	r3, r3, #2
   1a126:	18fb      	adds	r3, r7, r3
   1a128:	681b      	ldr	r3, [r3, #0]
   1a12a:	3310      	adds	r3, #16
   1a12c:	2291      	movs	r2, #145	; 0x91
   1a12e:	0092      	lsls	r2, r2, #2
   1a130:	18ba      	adds	r2, r7, r2
   1a132:	6812      	ldr	r2, [r2, #0]
   1a134:	0c12      	lsrs	r2, r2, #16
   1a136:	b2d2      	uxtb	r2, r2
   1a138:	701a      	strb	r2, [r3, #0]
   1a13a:	2392      	movs	r3, #146	; 0x92
   1a13c:	009b      	lsls	r3, r3, #2
   1a13e:	18fb      	adds	r3, r7, r3
   1a140:	681b      	ldr	r3, [r3, #0]
   1a142:	3311      	adds	r3, #17
   1a144:	2291      	movs	r2, #145	; 0x91
   1a146:	0092      	lsls	r2, r2, #2
   1a148:	18ba      	adds	r2, r7, r2
   1a14a:	6812      	ldr	r2, [r2, #0]
   1a14c:	0e12      	lsrs	r2, r2, #24
   1a14e:	b2d2      	uxtb	r2, r2
   1a150:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   1a152:	2392      	movs	r3, #146	; 0x92
   1a154:	009b      	lsls	r3, r3, #2
   1a156:	18fb      	adds	r3, r7, r3
   1a158:	681b      	ldr	r3, [r3, #0]
   1a15a:	330b      	adds	r3, #11
   1a15c:	2200      	movs	r2, #0
   1a15e:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   1a160:	2392      	movs	r3, #146	; 0x92
   1a162:	009b      	lsls	r3, r3, #2
   1a164:	18fb      	adds	r3, r7, r3
   1a166:	681b      	ldr	r3, [r3, #0]
   1a168:	331c      	adds	r3, #28
   1a16a:	2200      	movs	r2, #0
   1a16c:	701a      	strb	r2, [r3, #0]
   1a16e:	2392      	movs	r3, #146	; 0x92
   1a170:	009b      	lsls	r3, r3, #2
   1a172:	18fb      	adds	r3, r7, r3
   1a174:	681b      	ldr	r3, [r3, #0]
   1a176:	331d      	adds	r3, #29
   1a178:	2200      	movs	r2, #0
   1a17a:	701a      	strb	r2, [r3, #0]
   1a17c:	2392      	movs	r3, #146	; 0x92
   1a17e:	009b      	lsls	r3, r3, #2
   1a180:	18fb      	adds	r3, r7, r3
   1a182:	681b      	ldr	r3, [r3, #0]
   1a184:	331e      	adds	r3, #30
   1a186:	2200      	movs	r2, #0
   1a188:	701a      	strb	r2, [r3, #0]
   1a18a:	2392      	movs	r3, #146	; 0x92
   1a18c:	009b      	lsls	r3, r3, #2
   1a18e:	18fb      	adds	r3, r7, r3
   1a190:	681b      	ldr	r3, [r3, #0]
   1a192:	331f      	adds	r3, #31
   1a194:	2200      	movs	r2, #0
   1a196:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   1a198:	2392      	movs	r3, #146	; 0x92
   1a19a:	009b      	lsls	r3, r3, #2
   1a19c:	18fb      	adds	r3, r7, r3
   1a19e:	681b      	ldr	r3, [r3, #0]
   1a1a0:	3315      	adds	r3, #21
   1a1a2:	781b      	ldrb	r3, [r3, #0]
   1a1a4:	021b      	lsls	r3, r3, #8
   1a1a6:	b21a      	sxth	r2, r3
   1a1a8:	2392      	movs	r3, #146	; 0x92
   1a1aa:	009b      	lsls	r3, r3, #2
   1a1ac:	18fb      	adds	r3, r7, r3
   1a1ae:	681b      	ldr	r3, [r3, #0]
   1a1b0:	3314      	adds	r3, #20
   1a1b2:	781b      	ldrb	r3, [r3, #0]
   1a1b4:	b21b      	sxth	r3, r3
   1a1b6:	4313      	orrs	r3, r2
   1a1b8:	b21b      	sxth	r3, r3
   1a1ba:	b29b      	uxth	r3, r3
   1a1bc:	041b      	lsls	r3, r3, #16
   1a1be:	2292      	movs	r2, #146	; 0x92
   1a1c0:	0092      	lsls	r2, r2, #2
   1a1c2:	18ba      	adds	r2, r7, r2
   1a1c4:	6812      	ldr	r2, [r2, #0]
   1a1c6:	321b      	adds	r2, #27
   1a1c8:	7812      	ldrb	r2, [r2, #0]
   1a1ca:	0212      	lsls	r2, r2, #8
   1a1cc:	b211      	sxth	r1, r2
   1a1ce:	2292      	movs	r2, #146	; 0x92
   1a1d0:	0092      	lsls	r2, r2, #2
   1a1d2:	18ba      	adds	r2, r7, r2
   1a1d4:	6812      	ldr	r2, [r2, #0]
   1a1d6:	321a      	adds	r2, #26
   1a1d8:	7812      	ldrb	r2, [r2, #0]
   1a1da:	b212      	sxth	r2, r2
   1a1dc:	430a      	orrs	r2, r1
   1a1de:	b212      	sxth	r2, r2
   1a1e0:	b292      	uxth	r2, r2
   1a1e2:	4313      	orrs	r3, r2
   1a1e4:	2290      	movs	r2, #144	; 0x90
   1a1e6:	0092      	lsls	r2, r2, #2
   1a1e8:	18ba      	adds	r2, r7, r2
   1a1ea:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   1a1ec:	2392      	movs	r3, #146	; 0x92
   1a1ee:	009b      	lsls	r3, r3, #2
   1a1f0:	18fb      	adds	r3, r7, r3
   1a1f2:	681b      	ldr	r3, [r3, #0]
   1a1f4:	331a      	adds	r3, #26
   1a1f6:	2200      	movs	r2, #0
   1a1f8:	701a      	strb	r2, [r3, #0]
   1a1fa:	2392      	movs	r3, #146	; 0x92
   1a1fc:	009b      	lsls	r3, r3, #2
   1a1fe:	18fb      	adds	r3, r7, r3
   1a200:	681b      	ldr	r3, [r3, #0]
   1a202:	331b      	adds	r3, #27
   1a204:	2200      	movs	r2, #0
   1a206:	701a      	strb	r2, [r3, #0]
   1a208:	2392      	movs	r3, #146	; 0x92
   1a20a:	009b      	lsls	r3, r3, #2
   1a20c:	18fb      	adds	r3, r7, r3
   1a20e:	681b      	ldr	r3, [r3, #0]
   1a210:	3314      	adds	r3, #20
   1a212:	2200      	movs	r2, #0
   1a214:	701a      	strb	r2, [r3, #0]
   1a216:	2392      	movs	r3, #146	; 0x92
   1a218:	009b      	lsls	r3, r3, #2
   1a21a:	18fb      	adds	r3, r7, r3
   1a21c:	681b      	ldr	r3, [r3, #0]
   1a21e:	3315      	adds	r3, #21
   1a220:	2200      	movs	r2, #0
   1a222:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   1a224:	2387      	movs	r3, #135	; 0x87
   1a226:	009b      	lsls	r3, r3, #2
   1a228:	18fb      	adds	r3, r7, r3
   1a22a:	681b      	ldr	r3, [r3, #0]
   1a22c:	2201      	movs	r2, #1
   1a22e:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   1a230:	2390      	movs	r3, #144	; 0x90
   1a232:	009b      	lsls	r3, r3, #2
   1a234:	18fb      	adds	r3, r7, r3
   1a236:	681b      	ldr	r3, [r3, #0]
   1a238:	2b00      	cmp	r3, #0
   1a23a:	d100      	bne.n	1a23e <f_open+0x2fe>
   1a23c:	e076      	b.n	1a32c <f_open+0x3ec>
				dw = dj.fs->winsect;
   1a23e:	2387      	movs	r3, #135	; 0x87
   1a240:	009b      	lsls	r3, r3, #2
   1a242:	18fb      	adds	r3, r7, r3
   1a244:	681b      	ldr	r3, [r3, #0]
   1a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a248:	2291      	movs	r2, #145	; 0x91
   1a24a:	0092      	lsls	r2, r2, #2
   1a24c:	18ba      	adds	r2, r7, r2
   1a24e:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   1a250:	2387      	movs	r3, #135	; 0x87
   1a252:	009b      	lsls	r3, r3, #2
   1a254:	18fb      	adds	r3, r7, r3
   1a256:	681b      	ldr	r3, [r3, #0]
   1a258:	4a21      	ldr	r2, [pc, #132]	; (1a2e0 <f_open+0x3a0>)
   1a25a:	18bc      	adds	r4, r7, r2
   1a25c:	2290      	movs	r2, #144	; 0x90
   1a25e:	0092      	lsls	r2, r2, #2
   1a260:	18ba      	adds	r2, r7, r2
   1a262:	6812      	ldr	r2, [r2, #0]
   1a264:	0011      	movs	r1, r2
   1a266:	0018      	movs	r0, r3
   1a268:	4b22      	ldr	r3, [pc, #136]	; (1a2f4 <f_open+0x3b4>)
   1a26a:	4798      	blx	r3
   1a26c:	0003      	movs	r3, r0
   1a26e:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   1a270:	4b1b      	ldr	r3, [pc, #108]	; (1a2e0 <f_open+0x3a0>)
   1a272:	18fb      	adds	r3, r7, r3
   1a274:	781b      	ldrb	r3, [r3, #0]
   1a276:	2b00      	cmp	r3, #0
   1a278:	d158      	bne.n	1a32c <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   1a27a:	2387      	movs	r3, #135	; 0x87
   1a27c:	009b      	lsls	r3, r3, #2
   1a27e:	18fb      	adds	r3, r7, r3
   1a280:	681b      	ldr	r3, [r3, #0]
   1a282:	2290      	movs	r2, #144	; 0x90
   1a284:	0092      	lsls	r2, r2, #2
   1a286:	18ba      	adds	r2, r7, r2
   1a288:	6812      	ldr	r2, [r2, #0]
   1a28a:	3a01      	subs	r2, #1
   1a28c:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   1a28e:	2387      	movs	r3, #135	; 0x87
   1a290:	009b      	lsls	r3, r3, #2
   1a292:	18fb      	adds	r3, r7, r3
   1a294:	681b      	ldr	r3, [r3, #0]
   1a296:	4a12      	ldr	r2, [pc, #72]	; (1a2e0 <f_open+0x3a0>)
   1a298:	18bc      	adds	r4, r7, r2
   1a29a:	2291      	movs	r2, #145	; 0x91
   1a29c:	0092      	lsls	r2, r2, #2
   1a29e:	18ba      	adds	r2, r7, r2
   1a2a0:	6812      	ldr	r2, [r2, #0]
   1a2a2:	0011      	movs	r1, r2
   1a2a4:	0018      	movs	r0, r3
   1a2a6:	4b14      	ldr	r3, [pc, #80]	; (1a2f8 <f_open+0x3b8>)
   1a2a8:	4798      	blx	r3
   1a2aa:	0003      	movs	r3, r0
   1a2ac:	7023      	strb	r3, [r4, #0]
   1a2ae:	e03d      	b.n	1a32c <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   1a2b0:	4b0b      	ldr	r3, [pc, #44]	; (1a2e0 <f_open+0x3a0>)
   1a2b2:	18fb      	adds	r3, r7, r3
   1a2b4:	781b      	ldrb	r3, [r3, #0]
   1a2b6:	2b00      	cmp	r3, #0
   1a2b8:	d138      	bne.n	1a32c <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   1a2ba:	2392      	movs	r3, #146	; 0x92
   1a2bc:	009b      	lsls	r3, r3, #2
   1a2be:	18fb      	adds	r3, r7, r3
   1a2c0:	681b      	ldr	r3, [r3, #0]
   1a2c2:	330b      	adds	r3, #11
   1a2c4:	781b      	ldrb	r3, [r3, #0]
   1a2c6:	001a      	movs	r2, r3
   1a2c8:	2310      	movs	r3, #16
   1a2ca:	4013      	ands	r3, r2
   1a2cc:	d016      	beq.n	1a2fc <f_open+0x3bc>
				res = FR_NO_FILE;
   1a2ce:	4b04      	ldr	r3, [pc, #16]	; (1a2e0 <f_open+0x3a0>)
   1a2d0:	18fb      	adds	r3, r7, r3
   1a2d2:	2204      	movs	r2, #4
   1a2d4:	701a      	strb	r2, [r3, #0]
   1a2d6:	e029      	b.n	1a32c <f_open+0x3ec>
   1a2d8:	fffffdac 	.word	0xfffffdac
   1a2dc:	fffffdb7 	.word	0xfffffdb7
   1a2e0:	0000024f 	.word	0x0000024f
   1a2e4:	00019899 	.word	0x00019899
   1a2e8:	0001968d 	.word	0x0001968d
   1a2ec:	00018edd 	.word	0x00018edd
   1a2f0:	00017cd5 	.word	0x00017cd5
   1a2f4:	00018459 	.word	0x00018459
   1a2f8:	00017e19 	.word	0x00017e19
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1a2fc:	4b5a      	ldr	r3, [pc, #360]	; (1a468 <f_open+0x528>)
   1a2fe:	2294      	movs	r2, #148	; 0x94
   1a300:	0092      	lsls	r2, r2, #2
   1a302:	4694      	mov	ip, r2
   1a304:	44bc      	add	ip, r7
   1a306:	4463      	add	r3, ip
   1a308:	781b      	ldrb	r3, [r3, #0]
   1a30a:	2202      	movs	r2, #2
   1a30c:	4013      	ands	r3, r2
   1a30e:	d00d      	beq.n	1a32c <f_open+0x3ec>
   1a310:	2392      	movs	r3, #146	; 0x92
   1a312:	009b      	lsls	r3, r3, #2
   1a314:	18fb      	adds	r3, r7, r3
   1a316:	681b      	ldr	r3, [r3, #0]
   1a318:	330b      	adds	r3, #11
   1a31a:	781b      	ldrb	r3, [r3, #0]
   1a31c:	001a      	movs	r2, r3
   1a31e:	2301      	movs	r3, #1
   1a320:	4013      	ands	r3, r2
   1a322:	d003      	beq.n	1a32c <f_open+0x3ec>
					res = FR_DENIED;
   1a324:	4b51      	ldr	r3, [pc, #324]	; (1a46c <f_open+0x52c>)
   1a326:	18fb      	adds	r3, r7, r3
   1a328:	2207      	movs	r2, #7
   1a32a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   1a32c:	4b4f      	ldr	r3, [pc, #316]	; (1a46c <f_open+0x52c>)
   1a32e:	18fb      	adds	r3, r7, r3
   1a330:	781b      	ldrb	r3, [r3, #0]
   1a332:	2b00      	cmp	r3, #0
   1a334:	d126      	bne.n	1a384 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   1a336:	4b4c      	ldr	r3, [pc, #304]	; (1a468 <f_open+0x528>)
   1a338:	2294      	movs	r2, #148	; 0x94
   1a33a:	0092      	lsls	r2, r2, #2
   1a33c:	4694      	mov	ip, r2
   1a33e:	44bc      	add	ip, r7
   1a340:	4463      	add	r3, ip
   1a342:	781b      	ldrb	r3, [r3, #0]
   1a344:	2208      	movs	r2, #8
   1a346:	4013      	ands	r3, r2
   1a348:	d00f      	beq.n	1a36a <f_open+0x42a>
			mode |= FA__WRITTEN;
   1a34a:	4b47      	ldr	r3, [pc, #284]	; (1a468 <f_open+0x528>)
   1a34c:	2294      	movs	r2, #148	; 0x94
   1a34e:	0092      	lsls	r2, r2, #2
   1a350:	4694      	mov	ip, r2
   1a352:	44bc      	add	ip, r7
   1a354:	4463      	add	r3, ip
   1a356:	4a44      	ldr	r2, [pc, #272]	; (1a468 <f_open+0x528>)
   1a358:	2194      	movs	r1, #148	; 0x94
   1a35a:	0089      	lsls	r1, r1, #2
   1a35c:	468c      	mov	ip, r1
   1a35e:	44bc      	add	ip, r7
   1a360:	4462      	add	r2, ip
   1a362:	7812      	ldrb	r2, [r2, #0]
   1a364:	2120      	movs	r1, #32
   1a366:	430a      	orrs	r2, r1
   1a368:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   1a36a:	2387      	movs	r3, #135	; 0x87
   1a36c:	009b      	lsls	r3, r3, #2
   1a36e:	18fb      	adds	r3, r7, r3
   1a370:	681b      	ldr	r3, [r3, #0]
   1a372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a374:	68fb      	ldr	r3, [r7, #12]
   1a376:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   1a378:	68fb      	ldr	r3, [r7, #12]
   1a37a:	2292      	movs	r2, #146	; 0x92
   1a37c:	0092      	lsls	r2, r2, #2
   1a37e:	18ba      	adds	r2, r7, r2
   1a380:	6812      	ldr	r2, [r2, #0]
   1a382:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   1a384:	4b39      	ldr	r3, [pc, #228]	; (1a46c <f_open+0x52c>)
   1a386:	18fb      	adds	r3, r7, r3
   1a388:	781b      	ldrb	r3, [r3, #0]
   1a38a:	2b00      	cmp	r3, #0
   1a38c:	d163      	bne.n	1a456 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   1a38e:	68fb      	ldr	r3, [r7, #12]
   1a390:	4a35      	ldr	r2, [pc, #212]	; (1a468 <f_open+0x528>)
   1a392:	2194      	movs	r1, #148	; 0x94
   1a394:	0089      	lsls	r1, r1, #2
   1a396:	468c      	mov	ip, r1
   1a398:	44bc      	add	ip, r7
   1a39a:	4462      	add	r2, ip
   1a39c:	7812      	ldrb	r2, [r2, #0]
   1a39e:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   1a3a0:	2392      	movs	r3, #146	; 0x92
   1a3a2:	009b      	lsls	r3, r3, #2
   1a3a4:	18fb      	adds	r3, r7, r3
   1a3a6:	681b      	ldr	r3, [r3, #0]
   1a3a8:	3315      	adds	r3, #21
   1a3aa:	781b      	ldrb	r3, [r3, #0]
   1a3ac:	021b      	lsls	r3, r3, #8
   1a3ae:	b21a      	sxth	r2, r3
   1a3b0:	2392      	movs	r3, #146	; 0x92
   1a3b2:	009b      	lsls	r3, r3, #2
   1a3b4:	18fb      	adds	r3, r7, r3
   1a3b6:	681b      	ldr	r3, [r3, #0]
   1a3b8:	3314      	adds	r3, #20
   1a3ba:	781b      	ldrb	r3, [r3, #0]
   1a3bc:	b21b      	sxth	r3, r3
   1a3be:	4313      	orrs	r3, r2
   1a3c0:	b21b      	sxth	r3, r3
   1a3c2:	b29b      	uxth	r3, r3
   1a3c4:	041b      	lsls	r3, r3, #16
   1a3c6:	2292      	movs	r2, #146	; 0x92
   1a3c8:	0092      	lsls	r2, r2, #2
   1a3ca:	18ba      	adds	r2, r7, r2
   1a3cc:	6812      	ldr	r2, [r2, #0]
   1a3ce:	321b      	adds	r2, #27
   1a3d0:	7812      	ldrb	r2, [r2, #0]
   1a3d2:	0212      	lsls	r2, r2, #8
   1a3d4:	b211      	sxth	r1, r2
   1a3d6:	2292      	movs	r2, #146	; 0x92
   1a3d8:	0092      	lsls	r2, r2, #2
   1a3da:	18ba      	adds	r2, r7, r2
   1a3dc:	6812      	ldr	r2, [r2, #0]
   1a3de:	321a      	adds	r2, #26
   1a3e0:	7812      	ldrb	r2, [r2, #0]
   1a3e2:	b212      	sxth	r2, r2
   1a3e4:	430a      	orrs	r2, r1
   1a3e6:	b212      	sxth	r2, r2
   1a3e8:	b292      	uxth	r2, r2
   1a3ea:	431a      	orrs	r2, r3
   1a3ec:	68fb      	ldr	r3, [r7, #12]
   1a3ee:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   1a3f0:	2392      	movs	r3, #146	; 0x92
   1a3f2:	009b      	lsls	r3, r3, #2
   1a3f4:	18fb      	adds	r3, r7, r3
   1a3f6:	681b      	ldr	r3, [r3, #0]
   1a3f8:	331f      	adds	r3, #31
   1a3fa:	781b      	ldrb	r3, [r3, #0]
   1a3fc:	061a      	lsls	r2, r3, #24
   1a3fe:	2392      	movs	r3, #146	; 0x92
   1a400:	009b      	lsls	r3, r3, #2
   1a402:	18fb      	adds	r3, r7, r3
   1a404:	681b      	ldr	r3, [r3, #0]
   1a406:	331e      	adds	r3, #30
   1a408:	781b      	ldrb	r3, [r3, #0]
   1a40a:	041b      	lsls	r3, r3, #16
   1a40c:	4313      	orrs	r3, r2
   1a40e:	2292      	movs	r2, #146	; 0x92
   1a410:	0092      	lsls	r2, r2, #2
   1a412:	18ba      	adds	r2, r7, r2
   1a414:	6812      	ldr	r2, [r2, #0]
   1a416:	321d      	adds	r2, #29
   1a418:	7812      	ldrb	r2, [r2, #0]
   1a41a:	0212      	lsls	r2, r2, #8
   1a41c:	4313      	orrs	r3, r2
   1a41e:	2292      	movs	r2, #146	; 0x92
   1a420:	0092      	lsls	r2, r2, #2
   1a422:	18ba      	adds	r2, r7, r2
   1a424:	6812      	ldr	r2, [r2, #0]
   1a426:	321c      	adds	r2, #28
   1a428:	7812      	ldrb	r2, [r2, #0]
   1a42a:	431a      	orrs	r2, r3
   1a42c:	68fb      	ldr	r3, [r7, #12]
   1a42e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   1a430:	68fb      	ldr	r3, [r7, #12]
   1a432:	2200      	movs	r2, #0
   1a434:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   1a436:	68fb      	ldr	r3, [r7, #12]
   1a438:	2200      	movs	r2, #0
   1a43a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   1a43c:	2387      	movs	r3, #135	; 0x87
   1a43e:	009b      	lsls	r3, r3, #2
   1a440:	18fb      	adds	r3, r7, r3
   1a442:	681a      	ldr	r2, [r3, #0]
   1a444:	68fb      	ldr	r3, [r7, #12]
   1a446:	601a      	str	r2, [r3, #0]
   1a448:	2387      	movs	r3, #135	; 0x87
   1a44a:	009b      	lsls	r3, r3, #2
   1a44c:	18fb      	adds	r3, r7, r3
   1a44e:	681b      	ldr	r3, [r3, #0]
   1a450:	88da      	ldrh	r2, [r3, #6]
   1a452:	68fb      	ldr	r3, [r7, #12]
   1a454:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   1a456:	4b05      	ldr	r3, [pc, #20]	; (1a46c <f_open+0x52c>)
   1a458:	18fb      	adds	r3, r7, r3
   1a45a:	781b      	ldrb	r3, [r3, #0]
}
   1a45c:	0018      	movs	r0, r3
   1a45e:	46bd      	mov	sp, r7
   1a460:	2395      	movs	r3, #149	; 0x95
   1a462:	009b      	lsls	r3, r3, #2
   1a464:	449d      	add	sp, r3
   1a466:	bd90      	pop	{r4, r7, pc}
   1a468:	fffffdb7 	.word	0xfffffdb7
   1a46c:	0000024f 	.word	0x0000024f

0001a470 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   1a470:	b590      	push	{r4, r7, lr}
   1a472:	b08b      	sub	sp, #44	; 0x2c
   1a474:	af00      	add	r7, sp, #0
   1a476:	60f8      	str	r0, [r7, #12]
   1a478:	60b9      	str	r1, [r7, #8]
   1a47a:	607a      	str	r2, [r7, #4]
   1a47c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   1a47e:	68bb      	ldr	r3, [r7, #8]
   1a480:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   1a482:	683b      	ldr	r3, [r7, #0]
   1a484:	2200      	movs	r2, #0
   1a486:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   1a488:	68fb      	ldr	r3, [r7, #12]
   1a48a:	681a      	ldr	r2, [r3, #0]
   1a48c:	68fb      	ldr	r3, [r7, #12]
   1a48e:	889b      	ldrh	r3, [r3, #4]
   1a490:	2117      	movs	r1, #23
   1a492:	187c      	adds	r4, r7, r1
   1a494:	0019      	movs	r1, r3
   1a496:	0010      	movs	r0, r2
   1a498:	4bc3      	ldr	r3, [pc, #780]	; (1a7a8 <f_write+0x338>)
   1a49a:	4798      	blx	r3
   1a49c:	0003      	movs	r3, r0
   1a49e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   1a4a0:	2317      	movs	r3, #23
   1a4a2:	18fb      	adds	r3, r7, r3
   1a4a4:	781b      	ldrb	r3, [r3, #0]
   1a4a6:	2b00      	cmp	r3, #0
   1a4a8:	d003      	beq.n	1a4b2 <f_write+0x42>
   1a4aa:	2317      	movs	r3, #23
   1a4ac:	18fb      	adds	r3, r7, r3
   1a4ae:	781b      	ldrb	r3, [r3, #0]
   1a4b0:	e176      	b.n	1a7a0 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   1a4b2:	68fb      	ldr	r3, [r7, #12]
   1a4b4:	799b      	ldrb	r3, [r3, #6]
   1a4b6:	b25b      	sxtb	r3, r3
   1a4b8:	2b00      	cmp	r3, #0
   1a4ba:	da01      	bge.n	1a4c0 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   1a4bc:	2302      	movs	r3, #2
   1a4be:	e16f      	b.n	1a7a0 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   1a4c0:	68fb      	ldr	r3, [r7, #12]
   1a4c2:	799b      	ldrb	r3, [r3, #6]
   1a4c4:	001a      	movs	r2, r3
   1a4c6:	2302      	movs	r3, #2
   1a4c8:	4013      	ands	r3, r2
   1a4ca:	d101      	bne.n	1a4d0 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   1a4cc:	2307      	movs	r3, #7
   1a4ce:	e167      	b.n	1a7a0 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   1a4d0:	68fb      	ldr	r3, [r7, #12]
   1a4d2:	68da      	ldr	r2, [r3, #12]
   1a4d4:	687b      	ldr	r3, [r7, #4]
   1a4d6:	18d2      	adds	r2, r2, r3
   1a4d8:	68fb      	ldr	r3, [r7, #12]
   1a4da:	68db      	ldr	r3, [r3, #12]
   1a4dc:	429a      	cmp	r2, r3
   1a4de:	d300      	bcc.n	1a4e2 <f_write+0x72>
   1a4e0:	e146      	b.n	1a770 <f_write+0x300>
   1a4e2:	2300      	movs	r3, #0
   1a4e4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   1a4e6:	e143      	b.n	1a770 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   1a4e8:	68fb      	ldr	r3, [r7, #12]
   1a4ea:	689b      	ldr	r3, [r3, #8]
   1a4ec:	05db      	lsls	r3, r3, #23
   1a4ee:	0ddb      	lsrs	r3, r3, #23
   1a4f0:	d000      	beq.n	1a4f4 <f_write+0x84>
   1a4f2:	e0f6      	b.n	1a6e2 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   1a4f4:	68fb      	ldr	r3, [r7, #12]
   1a4f6:	689b      	ldr	r3, [r3, #8]
   1a4f8:	0a5b      	lsrs	r3, r3, #9
   1a4fa:	b2da      	uxtb	r2, r3
   1a4fc:	68fb      	ldr	r3, [r7, #12]
   1a4fe:	681b      	ldr	r3, [r3, #0]
   1a500:	789b      	ldrb	r3, [r3, #2]
   1a502:	3b01      	subs	r3, #1
   1a504:	b2d9      	uxtb	r1, r3
   1a506:	2316      	movs	r3, #22
   1a508:	18fb      	adds	r3, r7, r3
   1a50a:	400a      	ands	r2, r1
   1a50c:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   1a50e:	2316      	movs	r3, #22
   1a510:	18fb      	adds	r3, r7, r3
   1a512:	781b      	ldrb	r3, [r3, #0]
   1a514:	2b00      	cmp	r3, #0
   1a516:	d140      	bne.n	1a59a <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   1a518:	68fb      	ldr	r3, [r7, #12]
   1a51a:	689b      	ldr	r3, [r3, #8]
   1a51c:	2b00      	cmp	r3, #0
   1a51e:	d111      	bne.n	1a544 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   1a520:	68fb      	ldr	r3, [r7, #12]
   1a522:	691b      	ldr	r3, [r3, #16]
   1a524:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   1a526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a528:	2b00      	cmp	r3, #0
   1a52a:	d115      	bne.n	1a558 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   1a52c:	68fb      	ldr	r3, [r7, #12]
   1a52e:	681b      	ldr	r3, [r3, #0]
   1a530:	2100      	movs	r1, #0
   1a532:	0018      	movs	r0, r3
   1a534:	4b9d      	ldr	r3, [pc, #628]	; (1a7ac <f_write+0x33c>)
   1a536:	4798      	blx	r3
   1a538:	0003      	movs	r3, r0
   1a53a:	627b      	str	r3, [r7, #36]	; 0x24
   1a53c:	68fb      	ldr	r3, [r7, #12]
   1a53e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1a540:	611a      	str	r2, [r3, #16]
   1a542:	e009      	b.n	1a558 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   1a544:	68fb      	ldr	r3, [r7, #12]
   1a546:	681a      	ldr	r2, [r3, #0]
   1a548:	68fb      	ldr	r3, [r7, #12]
   1a54a:	695b      	ldr	r3, [r3, #20]
   1a54c:	0019      	movs	r1, r3
   1a54e:	0010      	movs	r0, r2
   1a550:	4b96      	ldr	r3, [pc, #600]	; (1a7ac <f_write+0x33c>)
   1a552:	4798      	blx	r3
   1a554:	0003      	movs	r3, r0
   1a556:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a55a:	2b00      	cmp	r3, #0
   1a55c:	d100      	bne.n	1a560 <f_write+0xf0>
   1a55e:	e10c      	b.n	1a77a <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   1a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a562:	2b01      	cmp	r3, #1
   1a564:	d109      	bne.n	1a57a <f_write+0x10a>
   1a566:	68fb      	ldr	r3, [r7, #12]
   1a568:	799b      	ldrb	r3, [r3, #6]
   1a56a:	2280      	movs	r2, #128	; 0x80
   1a56c:	4252      	negs	r2, r2
   1a56e:	4313      	orrs	r3, r2
   1a570:	b2da      	uxtb	r2, r3
   1a572:	68fb      	ldr	r3, [r7, #12]
   1a574:	719a      	strb	r2, [r3, #6]
   1a576:	2302      	movs	r3, #2
   1a578:	e112      	b.n	1a7a0 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a57c:	3301      	adds	r3, #1
   1a57e:	d109      	bne.n	1a594 <f_write+0x124>
   1a580:	68fb      	ldr	r3, [r7, #12]
   1a582:	799b      	ldrb	r3, [r3, #6]
   1a584:	2280      	movs	r2, #128	; 0x80
   1a586:	4252      	negs	r2, r2
   1a588:	4313      	orrs	r3, r2
   1a58a:	b2da      	uxtb	r2, r3
   1a58c:	68fb      	ldr	r3, [r7, #12]
   1a58e:	719a      	strb	r2, [r3, #6]
   1a590:	2301      	movs	r3, #1
   1a592:	e105      	b.n	1a7a0 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   1a594:	68fb      	ldr	r3, [r7, #12]
   1a596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1a598:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   1a59a:	68fb      	ldr	r3, [r7, #12]
   1a59c:	681b      	ldr	r3, [r3, #0]
   1a59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a5a0:	68fb      	ldr	r3, [r7, #12]
   1a5a2:	699b      	ldr	r3, [r3, #24]
   1a5a4:	429a      	cmp	r2, r3
   1a5a6:	d111      	bne.n	1a5cc <f_write+0x15c>
   1a5a8:	68fb      	ldr	r3, [r7, #12]
   1a5aa:	681b      	ldr	r3, [r3, #0]
   1a5ac:	2100      	movs	r1, #0
   1a5ae:	0018      	movs	r0, r3
   1a5b0:	4b7f      	ldr	r3, [pc, #508]	; (1a7b0 <f_write+0x340>)
   1a5b2:	4798      	blx	r3
   1a5b4:	1e03      	subs	r3, r0, #0
   1a5b6:	d009      	beq.n	1a5cc <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   1a5b8:	68fb      	ldr	r3, [r7, #12]
   1a5ba:	799b      	ldrb	r3, [r3, #6]
   1a5bc:	2280      	movs	r2, #128	; 0x80
   1a5be:	4252      	negs	r2, r2
   1a5c0:	4313      	orrs	r3, r2
   1a5c2:	b2da      	uxtb	r2, r3
   1a5c4:	68fb      	ldr	r3, [r7, #12]
   1a5c6:	719a      	strb	r2, [r3, #6]
   1a5c8:	2301      	movs	r3, #1
   1a5ca:	e0e9      	b.n	1a7a0 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   1a5cc:	68fb      	ldr	r3, [r7, #12]
   1a5ce:	681a      	ldr	r2, [r3, #0]
   1a5d0:	68fb      	ldr	r3, [r7, #12]
   1a5d2:	695b      	ldr	r3, [r3, #20]
   1a5d4:	0019      	movs	r1, r3
   1a5d6:	0010      	movs	r0, r2
   1a5d8:	4b76      	ldr	r3, [pc, #472]	; (1a7b4 <f_write+0x344>)
   1a5da:	4798      	blx	r3
   1a5dc:	0003      	movs	r3, r0
   1a5de:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1a5e0:	693b      	ldr	r3, [r7, #16]
   1a5e2:	2b00      	cmp	r3, #0
   1a5e4:	d109      	bne.n	1a5fa <f_write+0x18a>
   1a5e6:	68fb      	ldr	r3, [r7, #12]
   1a5e8:	799b      	ldrb	r3, [r3, #6]
   1a5ea:	2280      	movs	r2, #128	; 0x80
   1a5ec:	4252      	negs	r2, r2
   1a5ee:	4313      	orrs	r3, r2
   1a5f0:	b2da      	uxtb	r2, r3
   1a5f2:	68fb      	ldr	r3, [r7, #12]
   1a5f4:	719a      	strb	r2, [r3, #6]
   1a5f6:	2302      	movs	r3, #2
   1a5f8:	e0d2      	b.n	1a7a0 <f_write+0x330>
			sect += csect;
   1a5fa:	2316      	movs	r3, #22
   1a5fc:	18fb      	adds	r3, r7, r3
   1a5fe:	781b      	ldrb	r3, [r3, #0]
   1a600:	693a      	ldr	r2, [r7, #16]
   1a602:	18d3      	adds	r3, r2, r3
   1a604:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   1a606:	687b      	ldr	r3, [r7, #4]
   1a608:	0a5b      	lsrs	r3, r3, #9
   1a60a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   1a60c:	69fb      	ldr	r3, [r7, #28]
   1a60e:	2b00      	cmp	r3, #0
   1a610:	d048      	beq.n	1a6a4 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   1a612:	2316      	movs	r3, #22
   1a614:	18fb      	adds	r3, r7, r3
   1a616:	781a      	ldrb	r2, [r3, #0]
   1a618:	69fb      	ldr	r3, [r7, #28]
   1a61a:	18d2      	adds	r2, r2, r3
   1a61c:	68fb      	ldr	r3, [r7, #12]
   1a61e:	681b      	ldr	r3, [r3, #0]
   1a620:	789b      	ldrb	r3, [r3, #2]
   1a622:	429a      	cmp	r2, r3
   1a624:	d908      	bls.n	1a638 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   1a626:	68fb      	ldr	r3, [r7, #12]
   1a628:	681b      	ldr	r3, [r3, #0]
   1a62a:	789b      	ldrb	r3, [r3, #2]
   1a62c:	001a      	movs	r2, r3
   1a62e:	2316      	movs	r3, #22
   1a630:	18fb      	adds	r3, r7, r3
   1a632:	781b      	ldrb	r3, [r3, #0]
   1a634:	1ad3      	subs	r3, r2, r3
   1a636:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   1a638:	68fb      	ldr	r3, [r7, #12]
   1a63a:	681b      	ldr	r3, [r3, #0]
   1a63c:	7858      	ldrb	r0, [r3, #1]
   1a63e:	69fb      	ldr	r3, [r7, #28]
   1a640:	b2db      	uxtb	r3, r3
   1a642:	693a      	ldr	r2, [r7, #16]
   1a644:	69b9      	ldr	r1, [r7, #24]
   1a646:	4c5c      	ldr	r4, [pc, #368]	; (1a7b8 <f_write+0x348>)
   1a648:	47a0      	blx	r4
   1a64a:	1e03      	subs	r3, r0, #0
   1a64c:	d009      	beq.n	1a662 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   1a64e:	68fb      	ldr	r3, [r7, #12]
   1a650:	799b      	ldrb	r3, [r3, #6]
   1a652:	2280      	movs	r2, #128	; 0x80
   1a654:	4252      	negs	r2, r2
   1a656:	4313      	orrs	r3, r2
   1a658:	b2da      	uxtb	r2, r3
   1a65a:	68fb      	ldr	r3, [r7, #12]
   1a65c:	719a      	strb	r2, [r3, #6]
   1a65e:	2301      	movs	r3, #1
   1a660:	e09e      	b.n	1a7a0 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   1a662:	68fb      	ldr	r3, [r7, #12]
   1a664:	681b      	ldr	r3, [r3, #0]
   1a666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a668:	693b      	ldr	r3, [r7, #16]
   1a66a:	1ad2      	subs	r2, r2, r3
   1a66c:	69fb      	ldr	r3, [r7, #28]
   1a66e:	429a      	cmp	r2, r3
   1a670:	d214      	bcs.n	1a69c <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   1a672:	68fb      	ldr	r3, [r7, #12]
   1a674:	681b      	ldr	r3, [r3, #0]
   1a676:	3330      	adds	r3, #48	; 0x30
   1a678:	0018      	movs	r0, r3
   1a67a:	68fb      	ldr	r3, [r7, #12]
   1a67c:	681b      	ldr	r3, [r3, #0]
   1a67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a680:	693b      	ldr	r3, [r7, #16]
   1a682:	1ad3      	subs	r3, r2, r3
   1a684:	025b      	lsls	r3, r3, #9
   1a686:	69ba      	ldr	r2, [r7, #24]
   1a688:	18d1      	adds	r1, r2, r3
   1a68a:	2380      	movs	r3, #128	; 0x80
   1a68c:	009b      	lsls	r3, r3, #2
   1a68e:	001a      	movs	r2, r3
   1a690:	4b4a      	ldr	r3, [pc, #296]	; (1a7bc <f_write+0x34c>)
   1a692:	4798      	blx	r3
					fp->fs->wflag = 0;
   1a694:	68fb      	ldr	r3, [r7, #12]
   1a696:	681b      	ldr	r3, [r3, #0]
   1a698:	2200      	movs	r2, #0
   1a69a:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   1a69c:	69fb      	ldr	r3, [r7, #28]
   1a69e:	025b      	lsls	r3, r3, #9
   1a6a0:	623b      	str	r3, [r7, #32]
				continue;
   1a6a2:	e051      	b.n	1a748 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   1a6a4:	68fb      	ldr	r3, [r7, #12]
   1a6a6:	689a      	ldr	r2, [r3, #8]
   1a6a8:	68fb      	ldr	r3, [r7, #12]
   1a6aa:	68db      	ldr	r3, [r3, #12]
   1a6ac:	429a      	cmp	r2, r3
   1a6ae:	d315      	bcc.n	1a6dc <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   1a6b0:	68fb      	ldr	r3, [r7, #12]
   1a6b2:	681b      	ldr	r3, [r3, #0]
   1a6b4:	2100      	movs	r1, #0
   1a6b6:	0018      	movs	r0, r3
   1a6b8:	4b3d      	ldr	r3, [pc, #244]	; (1a7b0 <f_write+0x340>)
   1a6ba:	4798      	blx	r3
   1a6bc:	1e03      	subs	r3, r0, #0
   1a6be:	d009      	beq.n	1a6d4 <f_write+0x264>
   1a6c0:	68fb      	ldr	r3, [r7, #12]
   1a6c2:	799b      	ldrb	r3, [r3, #6]
   1a6c4:	2280      	movs	r2, #128	; 0x80
   1a6c6:	4252      	negs	r2, r2
   1a6c8:	4313      	orrs	r3, r2
   1a6ca:	b2da      	uxtb	r2, r3
   1a6cc:	68fb      	ldr	r3, [r7, #12]
   1a6ce:	719a      	strb	r2, [r3, #6]
   1a6d0:	2301      	movs	r3, #1
   1a6d2:	e065      	b.n	1a7a0 <f_write+0x330>
				fp->fs->winsect = sect;
   1a6d4:	68fb      	ldr	r3, [r7, #12]
   1a6d6:	681b      	ldr	r3, [r3, #0]
   1a6d8:	693a      	ldr	r2, [r7, #16]
   1a6da:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   1a6dc:	68fb      	ldr	r3, [r7, #12]
   1a6de:	693a      	ldr	r2, [r7, #16]
   1a6e0:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   1a6e2:	68fb      	ldr	r3, [r7, #12]
   1a6e4:	689b      	ldr	r3, [r3, #8]
   1a6e6:	05db      	lsls	r3, r3, #23
   1a6e8:	0ddb      	lsrs	r3, r3, #23
   1a6ea:	2280      	movs	r2, #128	; 0x80
   1a6ec:	0092      	lsls	r2, r2, #2
   1a6ee:	1ad3      	subs	r3, r2, r3
   1a6f0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   1a6f2:	6a3a      	ldr	r2, [r7, #32]
   1a6f4:	687b      	ldr	r3, [r7, #4]
   1a6f6:	429a      	cmp	r2, r3
   1a6f8:	d901      	bls.n	1a6fe <f_write+0x28e>
   1a6fa:	687b      	ldr	r3, [r7, #4]
   1a6fc:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   1a6fe:	68fb      	ldr	r3, [r7, #12]
   1a700:	681a      	ldr	r2, [r3, #0]
   1a702:	68fb      	ldr	r3, [r7, #12]
   1a704:	699b      	ldr	r3, [r3, #24]
   1a706:	0019      	movs	r1, r3
   1a708:	0010      	movs	r0, r2
   1a70a:	4b29      	ldr	r3, [pc, #164]	; (1a7b0 <f_write+0x340>)
   1a70c:	4798      	blx	r3
   1a70e:	1e03      	subs	r3, r0, #0
   1a710:	d009      	beq.n	1a726 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   1a712:	68fb      	ldr	r3, [r7, #12]
   1a714:	799b      	ldrb	r3, [r3, #6]
   1a716:	2280      	movs	r2, #128	; 0x80
   1a718:	4252      	negs	r2, r2
   1a71a:	4313      	orrs	r3, r2
   1a71c:	b2da      	uxtb	r2, r3
   1a71e:	68fb      	ldr	r3, [r7, #12]
   1a720:	719a      	strb	r2, [r3, #6]
   1a722:	2301      	movs	r3, #1
   1a724:	e03c      	b.n	1a7a0 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   1a726:	68fb      	ldr	r3, [r7, #12]
   1a728:	681a      	ldr	r2, [r3, #0]
   1a72a:	68fb      	ldr	r3, [r7, #12]
   1a72c:	689b      	ldr	r3, [r3, #8]
   1a72e:	05db      	lsls	r3, r3, #23
   1a730:	0ddb      	lsrs	r3, r3, #23
   1a732:	3330      	adds	r3, #48	; 0x30
   1a734:	18d3      	adds	r3, r2, r3
   1a736:	6a3a      	ldr	r2, [r7, #32]
   1a738:	69b9      	ldr	r1, [r7, #24]
   1a73a:	0018      	movs	r0, r3
   1a73c:	4b1f      	ldr	r3, [pc, #124]	; (1a7bc <f_write+0x34c>)
   1a73e:	4798      	blx	r3
		fp->fs->wflag = 1;
   1a740:	68fb      	ldr	r3, [r7, #12]
   1a742:	681b      	ldr	r3, [r3, #0]
   1a744:	2201      	movs	r2, #1
   1a746:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   1a748:	69ba      	ldr	r2, [r7, #24]
   1a74a:	6a3b      	ldr	r3, [r7, #32]
   1a74c:	18d3      	adds	r3, r2, r3
   1a74e:	61bb      	str	r3, [r7, #24]
   1a750:	68fb      	ldr	r3, [r7, #12]
   1a752:	689a      	ldr	r2, [r3, #8]
   1a754:	6a3b      	ldr	r3, [r7, #32]
   1a756:	18d2      	adds	r2, r2, r3
   1a758:	68fb      	ldr	r3, [r7, #12]
   1a75a:	609a      	str	r2, [r3, #8]
   1a75c:	683b      	ldr	r3, [r7, #0]
   1a75e:	681a      	ldr	r2, [r3, #0]
   1a760:	6a3b      	ldr	r3, [r7, #32]
   1a762:	18d2      	adds	r2, r2, r3
   1a764:	683b      	ldr	r3, [r7, #0]
   1a766:	601a      	str	r2, [r3, #0]
   1a768:	687a      	ldr	r2, [r7, #4]
   1a76a:	6a3b      	ldr	r3, [r7, #32]
   1a76c:	1ad3      	subs	r3, r2, r3
   1a76e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   1a770:	687b      	ldr	r3, [r7, #4]
   1a772:	2b00      	cmp	r3, #0
   1a774:	d000      	beq.n	1a778 <f_write+0x308>
   1a776:	e6b7      	b.n	1a4e8 <f_write+0x78>
   1a778:	e000      	b.n	1a77c <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1a77a:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   1a77c:	68fb      	ldr	r3, [r7, #12]
   1a77e:	689a      	ldr	r2, [r3, #8]
   1a780:	68fb      	ldr	r3, [r7, #12]
   1a782:	68db      	ldr	r3, [r3, #12]
   1a784:	429a      	cmp	r2, r3
   1a786:	d903      	bls.n	1a790 <f_write+0x320>
   1a788:	68fb      	ldr	r3, [r7, #12]
   1a78a:	689a      	ldr	r2, [r3, #8]
   1a78c:	68fb      	ldr	r3, [r7, #12]
   1a78e:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   1a790:	68fb      	ldr	r3, [r7, #12]
   1a792:	799b      	ldrb	r3, [r3, #6]
   1a794:	2220      	movs	r2, #32
   1a796:	4313      	orrs	r3, r2
   1a798:	b2da      	uxtb	r2, r3
   1a79a:	68fb      	ldr	r3, [r7, #12]
   1a79c:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   1a79e:	2300      	movs	r3, #0
}
   1a7a0:	0018      	movs	r0, r3
   1a7a2:	46bd      	mov	sp, r7
   1a7a4:	b00b      	add	sp, #44	; 0x2c
   1a7a6:	bd90      	pop	{r4, r7, pc}
   1a7a8:	00019e95 	.word	0x00019e95
   1a7ac:	00018521 	.word	0x00018521
   1a7b0:	00017e19 	.word	0x00017e19
   1a7b4:	00018079 	.word	0x00018079
   1a7b8:	00017b05 	.word	0x00017b05
   1a7bc:	00017d35 	.word	0x00017d35

0001a7c0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   1a7c0:	b590      	push	{r4, r7, lr}
   1a7c2:	b087      	sub	sp, #28
   1a7c4:	af00      	add	r7, sp, #0
   1a7c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   1a7c8:	687b      	ldr	r3, [r7, #4]
   1a7ca:	681a      	ldr	r2, [r3, #0]
   1a7cc:	687b      	ldr	r3, [r7, #4]
   1a7ce:	889b      	ldrh	r3, [r3, #4]
   1a7d0:	2117      	movs	r1, #23
   1a7d2:	187c      	adds	r4, r7, r1
   1a7d4:	0019      	movs	r1, r3
   1a7d6:	0010      	movs	r0, r2
   1a7d8:	4b55      	ldr	r3, [pc, #340]	; (1a930 <f_sync+0x170>)
   1a7da:	4798      	blx	r3
   1a7dc:	0003      	movs	r3, r0
   1a7de:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   1a7e0:	2317      	movs	r3, #23
   1a7e2:	18fb      	adds	r3, r7, r3
   1a7e4:	781b      	ldrb	r3, [r3, #0]
   1a7e6:	2b00      	cmp	r3, #0
   1a7e8:	d000      	beq.n	1a7ec <f_sync+0x2c>
   1a7ea:	e09a      	b.n	1a922 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   1a7ec:	687b      	ldr	r3, [r7, #4]
   1a7ee:	799b      	ldrb	r3, [r3, #6]
   1a7f0:	001a      	movs	r2, r3
   1a7f2:	2320      	movs	r3, #32
   1a7f4:	4013      	ands	r3, r2
   1a7f6:	d100      	bne.n	1a7fa <f_sync+0x3a>
   1a7f8:	e093      	b.n	1a922 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   1a7fa:	687b      	ldr	r3, [r7, #4]
   1a7fc:	681a      	ldr	r2, [r3, #0]
   1a7fe:	687b      	ldr	r3, [r7, #4]
   1a800:	69db      	ldr	r3, [r3, #28]
   1a802:	2117      	movs	r1, #23
   1a804:	187c      	adds	r4, r7, r1
   1a806:	0019      	movs	r1, r3
   1a808:	0010      	movs	r0, r2
   1a80a:	4b4a      	ldr	r3, [pc, #296]	; (1a934 <f_sync+0x174>)
   1a80c:	4798      	blx	r3
   1a80e:	0003      	movs	r3, r0
   1a810:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   1a812:	2317      	movs	r3, #23
   1a814:	18fb      	adds	r3, r7, r3
   1a816:	781b      	ldrb	r3, [r3, #0]
   1a818:	2b00      	cmp	r3, #0
   1a81a:	d000      	beq.n	1a81e <f_sync+0x5e>
   1a81c:	e081      	b.n	1a922 <f_sync+0x162>
				dir = fp->dir_ptr;
   1a81e:	687b      	ldr	r3, [r7, #4]
   1a820:	6a1b      	ldr	r3, [r3, #32]
   1a822:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   1a824:	693b      	ldr	r3, [r7, #16]
   1a826:	330b      	adds	r3, #11
   1a828:	693a      	ldr	r2, [r7, #16]
   1a82a:	320b      	adds	r2, #11
   1a82c:	7812      	ldrb	r2, [r2, #0]
   1a82e:	2120      	movs	r1, #32
   1a830:	430a      	orrs	r2, r1
   1a832:	b2d2      	uxtb	r2, r2
   1a834:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   1a836:	693b      	ldr	r3, [r7, #16]
   1a838:	331c      	adds	r3, #28
   1a83a:	001a      	movs	r2, r3
   1a83c:	687b      	ldr	r3, [r7, #4]
   1a83e:	68db      	ldr	r3, [r3, #12]
   1a840:	b2db      	uxtb	r3, r3
   1a842:	7013      	strb	r3, [r2, #0]
   1a844:	693b      	ldr	r3, [r7, #16]
   1a846:	331d      	adds	r3, #29
   1a848:	001a      	movs	r2, r3
   1a84a:	687b      	ldr	r3, [r7, #4]
   1a84c:	68db      	ldr	r3, [r3, #12]
   1a84e:	b29b      	uxth	r3, r3
   1a850:	0a1b      	lsrs	r3, r3, #8
   1a852:	b29b      	uxth	r3, r3
   1a854:	b2db      	uxtb	r3, r3
   1a856:	7013      	strb	r3, [r2, #0]
   1a858:	693b      	ldr	r3, [r7, #16]
   1a85a:	331e      	adds	r3, #30
   1a85c:	001a      	movs	r2, r3
   1a85e:	687b      	ldr	r3, [r7, #4]
   1a860:	68db      	ldr	r3, [r3, #12]
   1a862:	0c1b      	lsrs	r3, r3, #16
   1a864:	b2db      	uxtb	r3, r3
   1a866:	7013      	strb	r3, [r2, #0]
   1a868:	693b      	ldr	r3, [r7, #16]
   1a86a:	331f      	adds	r3, #31
   1a86c:	001a      	movs	r2, r3
   1a86e:	687b      	ldr	r3, [r7, #4]
   1a870:	68db      	ldr	r3, [r3, #12]
   1a872:	0e1b      	lsrs	r3, r3, #24
   1a874:	b2db      	uxtb	r3, r3
   1a876:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   1a878:	693b      	ldr	r3, [r7, #16]
   1a87a:	331a      	adds	r3, #26
   1a87c:	001a      	movs	r2, r3
   1a87e:	687b      	ldr	r3, [r7, #4]
   1a880:	691b      	ldr	r3, [r3, #16]
   1a882:	b2db      	uxtb	r3, r3
   1a884:	7013      	strb	r3, [r2, #0]
   1a886:	693b      	ldr	r3, [r7, #16]
   1a888:	331b      	adds	r3, #27
   1a88a:	001a      	movs	r2, r3
   1a88c:	687b      	ldr	r3, [r7, #4]
   1a88e:	691b      	ldr	r3, [r3, #16]
   1a890:	b29b      	uxth	r3, r3
   1a892:	0a1b      	lsrs	r3, r3, #8
   1a894:	b29b      	uxth	r3, r3
   1a896:	b2db      	uxtb	r3, r3
   1a898:	7013      	strb	r3, [r2, #0]
   1a89a:	693b      	ldr	r3, [r7, #16]
   1a89c:	3314      	adds	r3, #20
   1a89e:	001a      	movs	r2, r3
   1a8a0:	687b      	ldr	r3, [r7, #4]
   1a8a2:	691b      	ldr	r3, [r3, #16]
   1a8a4:	0c1b      	lsrs	r3, r3, #16
   1a8a6:	b2db      	uxtb	r3, r3
   1a8a8:	7013      	strb	r3, [r2, #0]
   1a8aa:	693b      	ldr	r3, [r7, #16]
   1a8ac:	3315      	adds	r3, #21
   1a8ae:	001a      	movs	r2, r3
   1a8b0:	687b      	ldr	r3, [r7, #4]
   1a8b2:	691b      	ldr	r3, [r3, #16]
   1a8b4:	0c1b      	lsrs	r3, r3, #16
   1a8b6:	b29b      	uxth	r3, r3
   1a8b8:	0a1b      	lsrs	r3, r3, #8
   1a8ba:	b29b      	uxth	r3, r3
   1a8bc:	b2db      	uxtb	r3, r3
   1a8be:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   1a8c0:	4b1d      	ldr	r3, [pc, #116]	; (1a938 <f_sync+0x178>)
   1a8c2:	4798      	blx	r3
   1a8c4:	0003      	movs	r3, r0
   1a8c6:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   1a8c8:	693b      	ldr	r3, [r7, #16]
   1a8ca:	3316      	adds	r3, #22
   1a8cc:	68fa      	ldr	r2, [r7, #12]
   1a8ce:	b2d2      	uxtb	r2, r2
   1a8d0:	701a      	strb	r2, [r3, #0]
   1a8d2:	693b      	ldr	r3, [r7, #16]
   1a8d4:	3317      	adds	r3, #23
   1a8d6:	68fa      	ldr	r2, [r7, #12]
   1a8d8:	b292      	uxth	r2, r2
   1a8da:	0a12      	lsrs	r2, r2, #8
   1a8dc:	b292      	uxth	r2, r2
   1a8de:	b2d2      	uxtb	r2, r2
   1a8e0:	701a      	strb	r2, [r3, #0]
   1a8e2:	693b      	ldr	r3, [r7, #16]
   1a8e4:	3318      	adds	r3, #24
   1a8e6:	68fa      	ldr	r2, [r7, #12]
   1a8e8:	0c12      	lsrs	r2, r2, #16
   1a8ea:	b2d2      	uxtb	r2, r2
   1a8ec:	701a      	strb	r2, [r3, #0]
   1a8ee:	693b      	ldr	r3, [r7, #16]
   1a8f0:	3319      	adds	r3, #25
   1a8f2:	68fa      	ldr	r2, [r7, #12]
   1a8f4:	0e12      	lsrs	r2, r2, #24
   1a8f6:	b2d2      	uxtb	r2, r2
   1a8f8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   1a8fa:	687b      	ldr	r3, [r7, #4]
   1a8fc:	799b      	ldrb	r3, [r3, #6]
   1a8fe:	2220      	movs	r2, #32
   1a900:	4393      	bics	r3, r2
   1a902:	b2da      	uxtb	r2, r3
   1a904:	687b      	ldr	r3, [r7, #4]
   1a906:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   1a908:	687b      	ldr	r3, [r7, #4]
   1a90a:	681b      	ldr	r3, [r3, #0]
   1a90c:	2201      	movs	r2, #1
   1a90e:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   1a910:	687b      	ldr	r3, [r7, #4]
   1a912:	681b      	ldr	r3, [r3, #0]
   1a914:	2217      	movs	r2, #23
   1a916:	18bc      	adds	r4, r7, r2
   1a918:	0018      	movs	r0, r3
   1a91a:	4b08      	ldr	r3, [pc, #32]	; (1a93c <f_sync+0x17c>)
   1a91c:	4798      	blx	r3
   1a91e:	0003      	movs	r3, r0
   1a920:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   1a922:	2317      	movs	r3, #23
   1a924:	18fb      	adds	r3, r7, r3
   1a926:	781b      	ldrb	r3, [r3, #0]
}
   1a928:	0018      	movs	r0, r3
   1a92a:	46bd      	mov	sp, r7
   1a92c:	b007      	add	sp, #28
   1a92e:	bd90      	pop	{r4, r7, pc}
   1a930:	00019e95 	.word	0x00019e95
   1a934:	00017e19 	.word	0x00017e19
   1a938:	00017cd5 	.word	0x00017cd5
   1a93c:	00017ee1 	.word	0x00017ee1

0001a940 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   1a940:	b590      	push	{r4, r7, lr}
   1a942:	b085      	sub	sp, #20
   1a944:	af00      	add	r7, sp, #0
   1a946:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   1a948:	230f      	movs	r3, #15
   1a94a:	18fc      	adds	r4, r7, r3
   1a94c:	687b      	ldr	r3, [r7, #4]
   1a94e:	0018      	movs	r0, r3
   1a950:	4b09      	ldr	r3, [pc, #36]	; (1a978 <f_close+0x38>)
   1a952:	4798      	blx	r3
   1a954:	0003      	movs	r3, r0
   1a956:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   1a958:	230f      	movs	r3, #15
   1a95a:	18fb      	adds	r3, r7, r3
   1a95c:	781b      	ldrb	r3, [r3, #0]
   1a95e:	2b00      	cmp	r3, #0
   1a960:	d102      	bne.n	1a968 <f_close+0x28>
   1a962:	687b      	ldr	r3, [r7, #4]
   1a964:	2200      	movs	r2, #0
   1a966:	601a      	str	r2, [r3, #0]
	return res;
   1a968:	230f      	movs	r3, #15
   1a96a:	18fb      	adds	r3, r7, r3
   1a96c:	781b      	ldrb	r3, [r3, #0]
#endif
}
   1a96e:	0018      	movs	r0, r3
   1a970:	46bd      	mov	sp, r7
   1a972:	b005      	add	sp, #20
   1a974:	bd90      	pop	{r4, r7, pc}
   1a976:	46c0      	nop			; (mov r8, r8)
   1a978:	0001a7c1 	.word	0x0001a7c1

0001a97c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   1a97c:	b580      	push	{r7, lr}
   1a97e:	b084      	sub	sp, #16
   1a980:	af00      	add	r7, sp, #0
   1a982:	0002      	movs	r2, r0
   1a984:	6039      	str	r1, [r7, #0]
   1a986:	1dbb      	adds	r3, r7, #6
   1a988:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   1a98a:	1dbb      	adds	r3, r7, #6
   1a98c:	881b      	ldrh	r3, [r3, #0]
   1a98e:	2b7f      	cmp	r3, #127	; 0x7f
   1a990:	d805      	bhi.n	1a99e <ff_convert+0x22>
		c = src;
   1a992:	230e      	movs	r3, #14
   1a994:	18fb      	adds	r3, r7, r3
   1a996:	1dba      	adds	r2, r7, #6
   1a998:	8812      	ldrh	r2, [r2, #0]
   1a99a:	801a      	strh	r2, [r3, #0]
   1a99c:	e03a      	b.n	1aa14 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   1a99e:	683b      	ldr	r3, [r7, #0]
   1a9a0:	2b00      	cmp	r3, #0
   1a9a2:	d010      	beq.n	1a9c6 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   1a9a4:	1dbb      	adds	r3, r7, #6
   1a9a6:	881b      	ldrh	r3, [r3, #0]
   1a9a8:	2bff      	cmp	r3, #255	; 0xff
   1a9aa:	d807      	bhi.n	1a9bc <ff_convert+0x40>
   1a9ac:	1dbb      	adds	r3, r7, #6
   1a9ae:	881b      	ldrh	r3, [r3, #0]
   1a9b0:	3b80      	subs	r3, #128	; 0x80
   1a9b2:	001a      	movs	r2, r3
   1a9b4:	4b1b      	ldr	r3, [pc, #108]	; (1aa24 <ff_convert+0xa8>)
   1a9b6:	0052      	lsls	r2, r2, #1
   1a9b8:	5ad2      	ldrh	r2, [r2, r3]
   1a9ba:	e000      	b.n	1a9be <ff_convert+0x42>
   1a9bc:	2200      	movs	r2, #0
   1a9be:	230e      	movs	r3, #14
   1a9c0:	18fb      	adds	r3, r7, r3
   1a9c2:	801a      	strh	r2, [r3, #0]
   1a9c4:	e026      	b.n	1aa14 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   1a9c6:	230e      	movs	r3, #14
   1a9c8:	18fb      	adds	r3, r7, r3
   1a9ca:	2200      	movs	r2, #0
   1a9cc:	801a      	strh	r2, [r3, #0]
   1a9ce:	e010      	b.n	1a9f2 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   1a9d0:	230e      	movs	r3, #14
   1a9d2:	18fb      	adds	r3, r7, r3
   1a9d4:	881a      	ldrh	r2, [r3, #0]
   1a9d6:	4b13      	ldr	r3, [pc, #76]	; (1aa24 <ff_convert+0xa8>)
   1a9d8:	0052      	lsls	r2, r2, #1
   1a9da:	5ad3      	ldrh	r3, [r2, r3]
   1a9dc:	1dba      	adds	r2, r7, #6
   1a9de:	8812      	ldrh	r2, [r2, #0]
   1a9e0:	429a      	cmp	r2, r3
   1a9e2:	d00c      	beq.n	1a9fe <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   1a9e4:	230e      	movs	r3, #14
   1a9e6:	18fb      	adds	r3, r7, r3
   1a9e8:	881a      	ldrh	r2, [r3, #0]
   1a9ea:	230e      	movs	r3, #14
   1a9ec:	18fb      	adds	r3, r7, r3
   1a9ee:	3201      	adds	r2, #1
   1a9f0:	801a      	strh	r2, [r3, #0]
   1a9f2:	230e      	movs	r3, #14
   1a9f4:	18fb      	adds	r3, r7, r3
   1a9f6:	881b      	ldrh	r3, [r3, #0]
   1a9f8:	2b7f      	cmp	r3, #127	; 0x7f
   1a9fa:	d9e9      	bls.n	1a9d0 <ff_convert+0x54>
   1a9fc:	e000      	b.n	1aa00 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   1a9fe:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   1aa00:	230e      	movs	r3, #14
   1aa02:	18fb      	adds	r3, r7, r3
   1aa04:	881b      	ldrh	r3, [r3, #0]
   1aa06:	3380      	adds	r3, #128	; 0x80
   1aa08:	b29a      	uxth	r2, r3
   1aa0a:	230e      	movs	r3, #14
   1aa0c:	18fb      	adds	r3, r7, r3
   1aa0e:	21ff      	movs	r1, #255	; 0xff
   1aa10:	400a      	ands	r2, r1
   1aa12:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   1aa14:	230e      	movs	r3, #14
   1aa16:	18fb      	adds	r3, r7, r3
   1aa18:	881b      	ldrh	r3, [r3, #0]
}
   1aa1a:	0018      	movs	r0, r3
   1aa1c:	46bd      	mov	sp, r7
   1aa1e:	b004      	add	sp, #16
   1aa20:	bd80      	pop	{r7, pc}
   1aa22:	46c0      	nop			; (mov r8, r8)
   1aa24:	000258f4 	.word	0x000258f4

0001aa28 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   1aa28:	b580      	push	{r7, lr}
   1aa2a:	b084      	sub	sp, #16
   1aa2c:	af00      	add	r7, sp, #0
   1aa2e:	0002      	movs	r2, r0
   1aa30:	1dbb      	adds	r3, r7, #6
   1aa32:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   1aa34:	2300      	movs	r3, #0
   1aa36:	60fb      	str	r3, [r7, #12]
   1aa38:	e002      	b.n	1aa40 <ff_wtoupper+0x18>
   1aa3a:	68fb      	ldr	r3, [r7, #12]
   1aa3c:	3301      	adds	r3, #1
   1aa3e:	60fb      	str	r3, [r7, #12]
   1aa40:	4b0f      	ldr	r3, [pc, #60]	; (1aa80 <ff_wtoupper+0x58>)
   1aa42:	68fa      	ldr	r2, [r7, #12]
   1aa44:	0052      	lsls	r2, r2, #1
   1aa46:	5ad3      	ldrh	r3, [r2, r3]
   1aa48:	2b00      	cmp	r3, #0
   1aa4a:	d007      	beq.n	1aa5c <ff_wtoupper+0x34>
   1aa4c:	4b0c      	ldr	r3, [pc, #48]	; (1aa80 <ff_wtoupper+0x58>)
   1aa4e:	68fa      	ldr	r2, [r7, #12]
   1aa50:	0052      	lsls	r2, r2, #1
   1aa52:	5ad3      	ldrh	r3, [r2, r3]
   1aa54:	1dba      	adds	r2, r7, #6
   1aa56:	8812      	ldrh	r2, [r2, #0]
   1aa58:	429a      	cmp	r2, r3
   1aa5a:	d1ee      	bne.n	1aa3a <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   1aa5c:	4b08      	ldr	r3, [pc, #32]	; (1aa80 <ff_wtoupper+0x58>)
   1aa5e:	68fa      	ldr	r2, [r7, #12]
   1aa60:	0052      	lsls	r2, r2, #1
   1aa62:	5ad3      	ldrh	r3, [r2, r3]
   1aa64:	2b00      	cmp	r3, #0
   1aa66:	d004      	beq.n	1aa72 <ff_wtoupper+0x4a>
   1aa68:	4b06      	ldr	r3, [pc, #24]	; (1aa84 <ff_wtoupper+0x5c>)
   1aa6a:	68fa      	ldr	r2, [r7, #12]
   1aa6c:	0052      	lsls	r2, r2, #1
   1aa6e:	5ad3      	ldrh	r3, [r2, r3]
   1aa70:	e001      	b.n	1aa76 <ff_wtoupper+0x4e>
   1aa72:	1dbb      	adds	r3, r7, #6
   1aa74:	881b      	ldrh	r3, [r3, #0]
}
   1aa76:	0018      	movs	r0, r3
   1aa78:	46bd      	mov	sp, r7
   1aa7a:	b004      	add	sp, #16
   1aa7c:	bd80      	pop	{r7, pc}
   1aa7e:	46c0      	nop			; (mov r8, r8)
   1aa80:	000259f4 	.word	0x000259f4
   1aa84:	00025bd4 	.word	0x00025bd4

0001aa88 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   1aa88:	b580      	push	{r7, lr}
   1aa8a:	b084      	sub	sp, #16
   1aa8c:	af00      	add	r7, sp, #0
   1aa8e:	60f8      	str	r0, [r7, #12]
   1aa90:	60b9      	str	r1, [r7, #8]
   1aa92:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   1aa94:	68fb      	ldr	r3, [r7, #12]
   1aa96:	68ba      	ldr	r2, [r7, #8]
   1aa98:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   1aa9a:	68fb      	ldr	r3, [r7, #12]
   1aa9c:	687a      	ldr	r2, [r7, #4]
   1aa9e:	601a      	str	r2, [r3, #0]
}
   1aaa0:	46c0      	nop			; (mov r8, r8)
   1aaa2:	46bd      	mov	sp, r7
   1aaa4:	b004      	add	sp, #16
   1aaa6:	bd80      	pop	{r7, pc}

0001aaa8 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   1aaa8:	b580      	push	{r7, lr}
   1aaaa:	b082      	sub	sp, #8
   1aaac:	af00      	add	r7, sp, #0
   1aaae:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1aab0:	687b      	ldr	r3, [r7, #4]
   1aab2:	681b      	ldr	r3, [r3, #0]
   1aab4:	4a07      	ldr	r2, [pc, #28]	; (1aad4 <getNextPacketId+0x2c>)
   1aab6:	4293      	cmp	r3, r2
   1aab8:	d003      	beq.n	1aac2 <getNextPacketId+0x1a>
   1aaba:	687b      	ldr	r3, [r7, #4]
   1aabc:	681b      	ldr	r3, [r3, #0]
   1aabe:	1c5a      	adds	r2, r3, #1
   1aac0:	e000      	b.n	1aac4 <getNextPacketId+0x1c>
   1aac2:	2201      	movs	r2, #1
   1aac4:	687b      	ldr	r3, [r7, #4]
   1aac6:	601a      	str	r2, [r3, #0]
   1aac8:	687b      	ldr	r3, [r7, #4]
   1aaca:	681b      	ldr	r3, [r3, #0]
}
   1aacc:	0018      	movs	r0, r3
   1aace:	46bd      	mov	sp, r7
   1aad0:	b002      	add	sp, #8
   1aad2:	bd80      	pop	{r7, pc}
   1aad4:	0000ffff 	.word	0x0000ffff

0001aad8 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   1aad8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aada:	b087      	sub	sp, #28
   1aadc:	af00      	add	r7, sp, #0
   1aade:	60f8      	str	r0, [r7, #12]
   1aae0:	60b9      	str	r1, [r7, #8]
   1aae2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   1aae4:	2301      	movs	r3, #1
   1aae6:	425b      	negs	r3, r3
   1aae8:	617b      	str	r3, [r7, #20]
        sent = 0;
   1aaea:	2300      	movs	r3, #0
   1aaec:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   1aaee:	e01a      	b.n	1ab26 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1aaf0:	68fb      	ldr	r3, [r7, #12]
   1aaf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1aaf4:	68dc      	ldr	r4, [r3, #12]
   1aaf6:	68fb      	ldr	r3, [r7, #12]
   1aaf8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1aafa:	68fb      	ldr	r3, [r7, #12]
   1aafc:	691a      	ldr	r2, [r3, #16]
   1aafe:	693b      	ldr	r3, [r7, #16]
   1ab00:	18d6      	adds	r6, r2, r3
   1ab02:	687b      	ldr	r3, [r7, #4]
   1ab04:	0018      	movs	r0, r3
   1ab06:	4b1a      	ldr	r3, [pc, #104]	; (1ab70 <sendPacket+0x98>)
   1ab08:	4798      	blx	r3
   1ab0a:	0003      	movs	r3, r0
   1ab0c:	68ba      	ldr	r2, [r7, #8]
   1ab0e:	0031      	movs	r1, r6
   1ab10:	0028      	movs	r0, r5
   1ab12:	47a0      	blx	r4
   1ab14:	0003      	movs	r3, r0
   1ab16:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   1ab18:	697b      	ldr	r3, [r7, #20]
   1ab1a:	2b00      	cmp	r3, #0
   1ab1c:	db0e      	blt.n	1ab3c <sendPacket+0x64>
            break;
        sent += rc;
   1ab1e:	693a      	ldr	r2, [r7, #16]
   1ab20:	697b      	ldr	r3, [r7, #20]
   1ab22:	18d3      	adds	r3, r2, r3
   1ab24:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   1ab26:	693a      	ldr	r2, [r7, #16]
   1ab28:	68bb      	ldr	r3, [r7, #8]
   1ab2a:	429a      	cmp	r2, r3
   1ab2c:	da07      	bge.n	1ab3e <sendPacket+0x66>
   1ab2e:	687b      	ldr	r3, [r7, #4]
   1ab30:	0018      	movs	r0, r3
   1ab32:	4b10      	ldr	r3, [pc, #64]	; (1ab74 <sendPacket+0x9c>)
   1ab34:	4798      	blx	r3
   1ab36:	1e03      	subs	r3, r0, #0
   1ab38:	d0da      	beq.n	1aaf0 <sendPacket+0x18>
   1ab3a:	e000      	b.n	1ab3e <sendPacket+0x66>
            break;
   1ab3c:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   1ab3e:	693a      	ldr	r2, [r7, #16]
   1ab40:	68bb      	ldr	r3, [r7, #8]
   1ab42:	429a      	cmp	r2, r3
   1ab44:	d10b      	bne.n	1ab5e <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   1ab46:	68fb      	ldr	r3, [r7, #12]
   1ab48:	3354      	adds	r3, #84	; 0x54
   1ab4a:	001a      	movs	r2, r3
   1ab4c:	68fb      	ldr	r3, [r7, #12]
   1ab4e:	699b      	ldr	r3, [r3, #24]
   1ab50:	0019      	movs	r1, r3
   1ab52:	0010      	movs	r0, r2
   1ab54:	4b08      	ldr	r3, [pc, #32]	; (1ab78 <sendPacket+0xa0>)
   1ab56:	4798      	blx	r3
        rc = SUCCESS;
   1ab58:	2300      	movs	r3, #0
   1ab5a:	617b      	str	r3, [r7, #20]
   1ab5c:	e002      	b.n	1ab64 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   1ab5e:	2301      	movs	r3, #1
   1ab60:	425b      	negs	r3, r3
   1ab62:	617b      	str	r3, [r7, #20]
    return rc;
   1ab64:	697b      	ldr	r3, [r7, #20]
}
   1ab66:	0018      	movs	r0, r3
   1ab68:	46bd      	mov	sp, r7
   1ab6a:	b007      	add	sp, #28
   1ab6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ab6e:	46c0      	nop			; (mov r8, r8)
   1ab70:	0001b939 	.word	0x0001b939
   1ab74:	0001b8bd 	.word	0x0001b8bd
   1ab78:	0001b911 	.word	0x0001b911

0001ab7c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   1ab7c:	b580      	push	{r7, lr}
   1ab7e:	b086      	sub	sp, #24
   1ab80:	af00      	add	r7, sp, #0
   1ab82:	60f8      	str	r0, [r7, #12]
   1ab84:	60b9      	str	r1, [r7, #8]
   1ab86:	607a      	str	r2, [r7, #4]
   1ab88:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   1ab8a:	68fb      	ldr	r3, [r7, #12]
   1ab8c:	68ba      	ldr	r2, [r7, #8]
   1ab8e:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1ab90:	2300      	movs	r3, #0
   1ab92:	617b      	str	r3, [r7, #20]
   1ab94:	e00a      	b.n	1abac <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   1ab96:	68fa      	ldr	r2, [r7, #12]
   1ab98:	697b      	ldr	r3, [r7, #20]
   1ab9a:	3304      	adds	r3, #4
   1ab9c:	00db      	lsls	r3, r3, #3
   1ab9e:	18d3      	adds	r3, r2, r3
   1aba0:	3304      	adds	r3, #4
   1aba2:	2200      	movs	r2, #0
   1aba4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1aba6:	697b      	ldr	r3, [r7, #20]
   1aba8:	3301      	adds	r3, #1
   1abaa:	617b      	str	r3, [r7, #20]
   1abac:	697b      	ldr	r3, [r7, #20]
   1abae:	2b04      	cmp	r3, #4
   1abb0:	ddf1      	ble.n	1ab96 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   1abb2:	68fb      	ldr	r3, [r7, #12]
   1abb4:	687a      	ldr	r2, [r7, #4]
   1abb6:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   1abb8:	68fb      	ldr	r3, [r7, #12]
   1abba:	683a      	ldr	r2, [r7, #0]
   1abbc:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   1abbe:	68fb      	ldr	r3, [r7, #12]
   1abc0:	6a3a      	ldr	r2, [r7, #32]
   1abc2:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   1abc4:	68fb      	ldr	r3, [r7, #12]
   1abc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1abc8:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   1abca:	68fb      	ldr	r3, [r7, #12]
   1abcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1abce:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   1abd0:	68fb      	ldr	r3, [r7, #12]
   1abd2:	2200      	movs	r2, #0
   1abd4:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   1abd6:	68fb      	ldr	r3, [r7, #12]
   1abd8:	2200      	movs	r2, #0
   1abda:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   1abdc:	68fb      	ldr	r3, [r7, #12]
   1abde:	2200      	movs	r2, #0
   1abe0:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   1abe2:	68fb      	ldr	r3, [r7, #12]
   1abe4:	2201      	movs	r2, #1
   1abe6:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   1abe8:	68fb      	ldr	r3, [r7, #12]
   1abea:	3354      	adds	r3, #84	; 0x54
   1abec:	0018      	movs	r0, r3
   1abee:	4b03      	ldr	r3, [pc, #12]	; (1abfc <MQTTClientInit+0x80>)
   1abf0:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   1abf2:	46c0      	nop			; (mov r8, r8)
   1abf4:	46bd      	mov	sp, r7
   1abf6:	b006      	add	sp, #24
   1abf8:	bd80      	pop	{r7, pc}
   1abfa:	46c0      	nop			; (mov r8, r8)
   1abfc:	0001b961 	.word	0x0001b961

0001ac00 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   1ac00:	b590      	push	{r4, r7, lr}
   1ac02:	b08b      	sub	sp, #44	; 0x2c
   1ac04:	af00      	add	r7, sp, #0
   1ac06:	60f8      	str	r0, [r7, #12]
   1ac08:	60b9      	str	r1, [r7, #8]
   1ac0a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   1ac0c:	2301      	movs	r3, #1
   1ac0e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   1ac10:	2300      	movs	r3, #0
   1ac12:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   1ac14:	2304      	movs	r3, #4
   1ac16:	61fb      	str	r3, [r7, #28]

    *value = 0;
   1ac18:	68bb      	ldr	r3, [r7, #8]
   1ac1a:	2200      	movs	r2, #0
   1ac1c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   1ac1e:	2301      	movs	r3, #1
   1ac20:	425b      	negs	r3, r3
   1ac22:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1ac24:	6a3b      	ldr	r3, [r7, #32]
   1ac26:	3301      	adds	r3, #1
   1ac28:	623b      	str	r3, [r7, #32]
   1ac2a:	6a3a      	ldr	r2, [r7, #32]
   1ac2c:	69fb      	ldr	r3, [r7, #28]
   1ac2e:	429a      	cmp	r2, r3
   1ac30:	dd03      	ble.n	1ac3a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   1ac32:	2301      	movs	r3, #1
   1ac34:	425b      	negs	r3, r3
   1ac36:	61bb      	str	r3, [r7, #24]
            goto exit;
   1ac38:	e026      	b.n	1ac88 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   1ac3a:	68fb      	ldr	r3, [r7, #12]
   1ac3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1ac3e:	689c      	ldr	r4, [r3, #8]
   1ac40:	68fb      	ldr	r3, [r7, #12]
   1ac42:	6d18      	ldr	r0, [r3, #80]	; 0x50
   1ac44:	687b      	ldr	r3, [r7, #4]
   1ac46:	2217      	movs	r2, #23
   1ac48:	18b9      	adds	r1, r7, r2
   1ac4a:	2201      	movs	r2, #1
   1ac4c:	47a0      	blx	r4
   1ac4e:	0003      	movs	r3, r0
   1ac50:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   1ac52:	69bb      	ldr	r3, [r7, #24]
   1ac54:	2b01      	cmp	r3, #1
   1ac56:	d116      	bne.n	1ac86 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   1ac58:	68bb      	ldr	r3, [r7, #8]
   1ac5a:	681a      	ldr	r2, [r3, #0]
   1ac5c:	2317      	movs	r3, #23
   1ac5e:	18fb      	adds	r3, r7, r3
   1ac60:	781b      	ldrb	r3, [r3, #0]
   1ac62:	0019      	movs	r1, r3
   1ac64:	237f      	movs	r3, #127	; 0x7f
   1ac66:	400b      	ands	r3, r1
   1ac68:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ac6a:	434b      	muls	r3, r1
   1ac6c:	18d2      	adds	r2, r2, r3
   1ac6e:	68bb      	ldr	r3, [r7, #8]
   1ac70:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   1ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ac74:	01db      	lsls	r3, r3, #7
   1ac76:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   1ac78:	2317      	movs	r3, #23
   1ac7a:	18fb      	adds	r3, r7, r3
   1ac7c:	781b      	ldrb	r3, [r3, #0]
   1ac7e:	b25b      	sxtb	r3, r3
   1ac80:	2b00      	cmp	r3, #0
   1ac82:	dbcc      	blt.n	1ac1e <decodePacket+0x1e>
   1ac84:	e000      	b.n	1ac88 <decodePacket+0x88>
            goto exit;
   1ac86:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   1ac88:	6a3b      	ldr	r3, [r7, #32]
}
   1ac8a:	0018      	movs	r0, r3
   1ac8c:	46bd      	mov	sp, r7
   1ac8e:	b00b      	add	sp, #44	; 0x2c
   1ac90:	bd90      	pop	{r4, r7, pc}
	...

0001ac94 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   1ac94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac96:	46c6      	mov	lr, r8
   1ac98:	b500      	push	{lr}
   1ac9a:	b086      	sub	sp, #24
   1ac9c:	af00      	add	r7, sp, #0
   1ac9e:	6078      	str	r0, [r7, #4]
   1aca0:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   1aca2:	2301      	movs	r3, #1
   1aca4:	425b      	negs	r3, r3
   1aca6:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   1aca8:	2300      	movs	r3, #0
   1acaa:	60fb      	str	r3, [r7, #12]
    int len = 0;
   1acac:	2300      	movs	r3, #0
   1acae:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   1acb0:	2300      	movs	r3, #0
   1acb2:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   1acb4:	687b      	ldr	r3, [r7, #4]
   1acb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1acb8:	689c      	ldr	r4, [r3, #8]
   1acba:	687b      	ldr	r3, [r7, #4]
   1acbc:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1acbe:	687b      	ldr	r3, [r7, #4]
   1acc0:	695e      	ldr	r6, [r3, #20]
   1acc2:	683b      	ldr	r3, [r7, #0]
   1acc4:	0018      	movs	r0, r3
   1acc6:	4b2b      	ldr	r3, [pc, #172]	; (1ad74 <readPacket+0xe0>)
   1acc8:	4798      	blx	r3
   1acca:	0003      	movs	r3, r0
   1accc:	2201      	movs	r2, #1
   1acce:	0031      	movs	r1, r6
   1acd0:	0028      	movs	r0, r5
   1acd2:	47a0      	blx	r4
   1acd4:	0003      	movs	r3, r0
   1acd6:	2b01      	cmp	r3, #1
   1acd8:	d141      	bne.n	1ad5e <readPacket+0xca>
        goto exit;

    len = 1;
   1acda:	2301      	movs	r3, #1
   1acdc:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   1acde:	683b      	ldr	r3, [r7, #0]
   1ace0:	0018      	movs	r0, r3
   1ace2:	4b24      	ldr	r3, [pc, #144]	; (1ad74 <readPacket+0xe0>)
   1ace4:	4798      	blx	r3
   1ace6:	0002      	movs	r2, r0
   1ace8:	2308      	movs	r3, #8
   1acea:	18f9      	adds	r1, r7, r3
   1acec:	687b      	ldr	r3, [r7, #4]
   1acee:	0018      	movs	r0, r3
   1acf0:	4b21      	ldr	r3, [pc, #132]	; (1ad78 <readPacket+0xe4>)
   1acf2:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   1acf4:	687b      	ldr	r3, [r7, #4]
   1acf6:	695b      	ldr	r3, [r3, #20]
   1acf8:	3301      	adds	r3, #1
   1acfa:	68ba      	ldr	r2, [r7, #8]
   1acfc:	0011      	movs	r1, r2
   1acfe:	0018      	movs	r0, r3
   1ad00:	4b1e      	ldr	r3, [pc, #120]	; (1ad7c <readPacket+0xe8>)
   1ad02:	4798      	blx	r3
   1ad04:	0002      	movs	r2, r0
   1ad06:	693b      	ldr	r3, [r7, #16]
   1ad08:	189b      	adds	r3, r3, r2
   1ad0a:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   1ad0c:	68bb      	ldr	r3, [r7, #8]
   1ad0e:	2b00      	cmp	r3, #0
   1ad10:	dd17      	ble.n	1ad42 <readPacket+0xae>
   1ad12:	687b      	ldr	r3, [r7, #4]
   1ad14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1ad16:	689c      	ldr	r4, [r3, #8]
   1ad18:	687b      	ldr	r3, [r7, #4]
   1ad1a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1ad1c:	687b      	ldr	r3, [r7, #4]
   1ad1e:	695a      	ldr	r2, [r3, #20]
   1ad20:	693b      	ldr	r3, [r7, #16]
   1ad22:	18d6      	adds	r6, r2, r3
   1ad24:	68bb      	ldr	r3, [r7, #8]
   1ad26:	4698      	mov	r8, r3
   1ad28:	683b      	ldr	r3, [r7, #0]
   1ad2a:	0018      	movs	r0, r3
   1ad2c:	4b11      	ldr	r3, [pc, #68]	; (1ad74 <readPacket+0xe0>)
   1ad2e:	4798      	blx	r3
   1ad30:	0003      	movs	r3, r0
   1ad32:	4642      	mov	r2, r8
   1ad34:	0031      	movs	r1, r6
   1ad36:	0028      	movs	r0, r5
   1ad38:	47a0      	blx	r4
   1ad3a:	0002      	movs	r2, r0
   1ad3c:	68bb      	ldr	r3, [r7, #8]
   1ad3e:	429a      	cmp	r2, r3
   1ad40:	d10f      	bne.n	1ad62 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   1ad42:	687b      	ldr	r3, [r7, #4]
   1ad44:	695b      	ldr	r3, [r3, #20]
   1ad46:	781a      	ldrb	r2, [r3, #0]
   1ad48:	230c      	movs	r3, #12
   1ad4a:	18fb      	adds	r3, r7, r3
   1ad4c:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   1ad4e:	230c      	movs	r3, #12
   1ad50:	18fb      	adds	r3, r7, r3
   1ad52:	781b      	ldrb	r3, [r3, #0]
   1ad54:	061b      	lsls	r3, r3, #24
   1ad56:	0f1b      	lsrs	r3, r3, #28
   1ad58:	b2db      	uxtb	r3, r3
   1ad5a:	617b      	str	r3, [r7, #20]
   1ad5c:	e002      	b.n	1ad64 <readPacket+0xd0>
        goto exit;
   1ad5e:	46c0      	nop			; (mov r8, r8)
   1ad60:	e000      	b.n	1ad64 <readPacket+0xd0>
        goto exit;
   1ad62:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   1ad64:	697b      	ldr	r3, [r7, #20]
}
   1ad66:	0018      	movs	r0, r3
   1ad68:	46bd      	mov	sp, r7
   1ad6a:	b006      	add	sp, #24
   1ad6c:	bc04      	pop	{r2}
   1ad6e:	4690      	mov	r8, r2
   1ad70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ad72:	46c0      	nop			; (mov r8, r8)
   1ad74:	0001b939 	.word	0x0001b939
   1ad78:	0001ac01 	.word	0x0001ac01
   1ad7c:	0001c711 	.word	0x0001c711

0001ad80 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   1ad80:	b580      	push	{r7, lr}
   1ad82:	b086      	sub	sp, #24
   1ad84:	af00      	add	r7, sp, #0
   1ad86:	6078      	str	r0, [r7, #4]
   1ad88:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   1ad8a:	687b      	ldr	r3, [r7, #4]
   1ad8c:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   1ad8e:	683b      	ldr	r3, [r7, #0]
   1ad90:	689b      	ldr	r3, [r3, #8]
   1ad92:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   1ad94:	683b      	ldr	r3, [r7, #0]
   1ad96:	685b      	ldr	r3, [r3, #4]
   1ad98:	001a      	movs	r2, r3
   1ad9a:	693b      	ldr	r3, [r7, #16]
   1ad9c:	189b      	adds	r3, r3, r2
   1ad9e:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   1ada0:	e039      	b.n	1ae16 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   1ada2:	693b      	ldr	r3, [r7, #16]
   1ada4:	781b      	ldrb	r3, [r3, #0]
   1ada6:	2b2f      	cmp	r3, #47	; 0x2f
   1ada8:	d103      	bne.n	1adb2 <isTopicMatched+0x32>
   1adaa:	697b      	ldr	r3, [r7, #20]
   1adac:	781b      	ldrb	r3, [r3, #0]
   1adae:	2b2f      	cmp	r3, #47	; 0x2f
   1adb0:	d13a      	bne.n	1ae28 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   1adb2:	697b      	ldr	r3, [r7, #20]
   1adb4:	781b      	ldrb	r3, [r3, #0]
   1adb6:	2b2b      	cmp	r3, #43	; 0x2b
   1adb8:	d009      	beq.n	1adce <isTopicMatched+0x4e>
   1adba:	697b      	ldr	r3, [r7, #20]
   1adbc:	781b      	ldrb	r3, [r3, #0]
   1adbe:	2b23      	cmp	r3, #35	; 0x23
   1adc0:	d005      	beq.n	1adce <isTopicMatched+0x4e>
   1adc2:	697b      	ldr	r3, [r7, #20]
   1adc4:	781a      	ldrb	r2, [r3, #0]
   1adc6:	693b      	ldr	r3, [r7, #16]
   1adc8:	781b      	ldrb	r3, [r3, #0]
   1adca:	429a      	cmp	r2, r3
   1adcc:	d12e      	bne.n	1ae2c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   1adce:	697b      	ldr	r3, [r7, #20]
   1add0:	781b      	ldrb	r3, [r3, #0]
   1add2:	2b2b      	cmp	r3, #43	; 0x2b
   1add4:	d112      	bne.n	1adfc <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   1add6:	693b      	ldr	r3, [r7, #16]
   1add8:	3301      	adds	r3, #1
   1adda:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   1addc:	e005      	b.n	1adea <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   1adde:	693b      	ldr	r3, [r7, #16]
   1ade0:	3301      	adds	r3, #1
   1ade2:	613b      	str	r3, [r7, #16]
   1ade4:	693b      	ldr	r3, [r7, #16]
   1ade6:	3301      	adds	r3, #1
   1ade8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   1adea:	68fa      	ldr	r2, [r7, #12]
   1adec:	68bb      	ldr	r3, [r7, #8]
   1adee:	429a      	cmp	r2, r3
   1adf0:	d20b      	bcs.n	1ae0a <isTopicMatched+0x8a>
   1adf2:	68fb      	ldr	r3, [r7, #12]
   1adf4:	781b      	ldrb	r3, [r3, #0]
   1adf6:	2b2f      	cmp	r3, #47	; 0x2f
   1adf8:	d1f1      	bne.n	1adde <isTopicMatched+0x5e>
   1adfa:	e006      	b.n	1ae0a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   1adfc:	697b      	ldr	r3, [r7, #20]
   1adfe:	781b      	ldrb	r3, [r3, #0]
   1ae00:	2b23      	cmp	r3, #35	; 0x23
   1ae02:	d102      	bne.n	1ae0a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   1ae04:	68bb      	ldr	r3, [r7, #8]
   1ae06:	3b01      	subs	r3, #1
   1ae08:	613b      	str	r3, [r7, #16]
        curf++;
   1ae0a:	697b      	ldr	r3, [r7, #20]
   1ae0c:	3301      	adds	r3, #1
   1ae0e:	617b      	str	r3, [r7, #20]
        curn++;
   1ae10:	693b      	ldr	r3, [r7, #16]
   1ae12:	3301      	adds	r3, #1
   1ae14:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   1ae16:	697b      	ldr	r3, [r7, #20]
   1ae18:	781b      	ldrb	r3, [r3, #0]
   1ae1a:	2b00      	cmp	r3, #0
   1ae1c:	d007      	beq.n	1ae2e <isTopicMatched+0xae>
   1ae1e:	693a      	ldr	r2, [r7, #16]
   1ae20:	68bb      	ldr	r3, [r7, #8]
   1ae22:	429a      	cmp	r2, r3
   1ae24:	d3bd      	bcc.n	1ada2 <isTopicMatched+0x22>
   1ae26:	e002      	b.n	1ae2e <isTopicMatched+0xae>
            break;
   1ae28:	46c0      	nop			; (mov r8, r8)
   1ae2a:	e000      	b.n	1ae2e <isTopicMatched+0xae>
            break;
   1ae2c:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   1ae2e:	693a      	ldr	r2, [r7, #16]
   1ae30:	68bb      	ldr	r3, [r7, #8]
   1ae32:	429a      	cmp	r2, r3
   1ae34:	d105      	bne.n	1ae42 <isTopicMatched+0xc2>
   1ae36:	697b      	ldr	r3, [r7, #20]
   1ae38:	781b      	ldrb	r3, [r3, #0]
   1ae3a:	2b00      	cmp	r3, #0
   1ae3c:	d101      	bne.n	1ae42 <isTopicMatched+0xc2>
   1ae3e:	2301      	movs	r3, #1
   1ae40:	e000      	b.n	1ae44 <isTopicMatched+0xc4>
   1ae42:	2300      	movs	r3, #0
   1ae44:	b2db      	uxtb	r3, r3
}
   1ae46:	0018      	movs	r0, r3
   1ae48:	46bd      	mov	sp, r7
   1ae4a:	b006      	add	sp, #24
   1ae4c:	bd80      	pop	{r7, pc}
	...

0001ae50 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   1ae50:	b580      	push	{r7, lr}
   1ae52:	b08a      	sub	sp, #40	; 0x28
   1ae54:	af00      	add	r7, sp, #0
   1ae56:	60f8      	str	r0, [r7, #12]
   1ae58:	60b9      	str	r1, [r7, #8]
   1ae5a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   1ae5c:	2301      	movs	r3, #1
   1ae5e:	425b      	negs	r3, r3
   1ae60:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1ae62:	2300      	movs	r3, #0
   1ae64:	627b      	str	r3, [r7, #36]	; 0x24
   1ae66:	e044      	b.n	1aef2 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1ae68:	68fa      	ldr	r2, [r7, #12]
   1ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae6c:	3304      	adds	r3, #4
   1ae6e:	00db      	lsls	r3, r3, #3
   1ae70:	18d3      	adds	r3, r2, r3
   1ae72:	3304      	adds	r3, #4
   1ae74:	681b      	ldr	r3, [r3, #0]
   1ae76:	2b00      	cmp	r3, #0
   1ae78:	d038      	beq.n	1aeec <deliverMessage+0x9c>
   1ae7a:	68fa      	ldr	r2, [r7, #12]
   1ae7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae7e:	3304      	adds	r3, #4
   1ae80:	00db      	lsls	r3, r3, #3
   1ae82:	18d3      	adds	r3, r2, r3
   1ae84:	3304      	adds	r3, #4
   1ae86:	681a      	ldr	r2, [r3, #0]
   1ae88:	68bb      	ldr	r3, [r7, #8]
   1ae8a:	0011      	movs	r1, r2
   1ae8c:	0018      	movs	r0, r3
   1ae8e:	4b28      	ldr	r3, [pc, #160]	; (1af30 <deliverMessage+0xe0>)
   1ae90:	4798      	blx	r3
   1ae92:	1e03      	subs	r3, r0, #0
   1ae94:	d10d      	bne.n	1aeb2 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   1ae96:	68fa      	ldr	r2, [r7, #12]
   1ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae9a:	3304      	adds	r3, #4
   1ae9c:	00db      	lsls	r3, r3, #3
   1ae9e:	18d3      	adds	r3, r2, r3
   1aea0:	3304      	adds	r3, #4
   1aea2:	681b      	ldr	r3, [r3, #0]
   1aea4:	68ba      	ldr	r2, [r7, #8]
   1aea6:	0011      	movs	r1, r2
   1aea8:	0018      	movs	r0, r3
   1aeaa:	4b22      	ldr	r3, [pc, #136]	; (1af34 <deliverMessage+0xe4>)
   1aeac:	4798      	blx	r3
   1aeae:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1aeb0:	d01c      	beq.n	1aeec <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   1aeb2:	68fa      	ldr	r2, [r7, #12]
   1aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aeb6:	3304      	adds	r3, #4
   1aeb8:	00db      	lsls	r3, r3, #3
   1aeba:	18d3      	adds	r3, r2, r3
   1aebc:	3308      	adds	r3, #8
   1aebe:	681b      	ldr	r3, [r3, #0]
   1aec0:	2b00      	cmp	r3, #0
   1aec2:	d013      	beq.n	1aeec <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   1aec4:	687a      	ldr	r2, [r7, #4]
   1aec6:	68b9      	ldr	r1, [r7, #8]
   1aec8:	2318      	movs	r3, #24
   1aeca:	18fb      	adds	r3, r7, r3
   1aecc:	0018      	movs	r0, r3
   1aece:	4b1a      	ldr	r3, [pc, #104]	; (1af38 <deliverMessage+0xe8>)
   1aed0:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   1aed2:	68fa      	ldr	r2, [r7, #12]
   1aed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aed6:	3304      	adds	r3, #4
   1aed8:	00db      	lsls	r3, r3, #3
   1aeda:	18d3      	adds	r3, r2, r3
   1aedc:	3308      	adds	r3, #8
   1aede:	681b      	ldr	r3, [r3, #0]
   1aee0:	2218      	movs	r2, #24
   1aee2:	18ba      	adds	r2, r7, r2
   1aee4:	0010      	movs	r0, r2
   1aee6:	4798      	blx	r3
                rc = SUCCESS;
   1aee8:	2300      	movs	r3, #0
   1aeea:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aeee:	3301      	adds	r3, #1
   1aef0:	627b      	str	r3, [r7, #36]	; 0x24
   1aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aef4:	2b04      	cmp	r3, #4
   1aef6:	ddb7      	ble.n	1ae68 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   1aef8:	6a3b      	ldr	r3, [r7, #32]
   1aefa:	3301      	adds	r3, #1
   1aefc:	d112      	bne.n	1af24 <deliverMessage+0xd4>
   1aefe:	68fb      	ldr	r3, [r7, #12]
   1af00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1af02:	2b00      	cmp	r3, #0
   1af04:	d00e      	beq.n	1af24 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   1af06:	687a      	ldr	r2, [r7, #4]
   1af08:	68b9      	ldr	r1, [r7, #8]
   1af0a:	2310      	movs	r3, #16
   1af0c:	18fb      	adds	r3, r7, r3
   1af0e:	0018      	movs	r0, r3
   1af10:	4b09      	ldr	r3, [pc, #36]	; (1af38 <deliverMessage+0xe8>)
   1af12:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   1af14:	68fb      	ldr	r3, [r7, #12]
   1af16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1af18:	2210      	movs	r2, #16
   1af1a:	18ba      	adds	r2, r7, r2
   1af1c:	0010      	movs	r0, r2
   1af1e:	4798      	blx	r3
        rc = SUCCESS;
   1af20:	2300      	movs	r3, #0
   1af22:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   1af24:	6a3b      	ldr	r3, [r7, #32]
}
   1af26:	0018      	movs	r0, r3
   1af28:	46bd      	mov	sp, r7
   1af2a:	b00a      	add	sp, #40	; 0x28
   1af2c:	bd80      	pop	{r7, pc}
   1af2e:	46c0      	nop			; (mov r8, r8)
   1af30:	0001cb25 	.word	0x0001cb25
   1af34:	0001ad81 	.word	0x0001ad81
   1af38:	0001aa89 	.word	0x0001aa89

0001af3c <keepalive>:


int keepalive(MQTTClient* c)
{
   1af3c:	b580      	push	{r7, lr}
   1af3e:	b088      	sub	sp, #32
   1af40:	af00      	add	r7, sp, #0
   1af42:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   1af44:	2301      	movs	r3, #1
   1af46:	425b      	negs	r3, r3
   1af48:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   1af4a:	687b      	ldr	r3, [r7, #4]
   1af4c:	699b      	ldr	r3, [r3, #24]
   1af4e:	2b00      	cmp	r3, #0
   1af50:	d102      	bne.n	1af58 <keepalive+0x1c>
    {
        rc = SUCCESS;
   1af52:	2300      	movs	r3, #0
   1af54:	61fb      	str	r3, [r7, #28]
        goto exit;
   1af56:	e033      	b.n	1afc0 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   1af58:	687b      	ldr	r3, [r7, #4]
   1af5a:	3354      	adds	r3, #84	; 0x54
   1af5c:	0018      	movs	r0, r3
   1af5e:	4b1b      	ldr	r3, [pc, #108]	; (1afcc <keepalive+0x90>)
   1af60:	4798      	blx	r3
   1af62:	1e03      	subs	r3, r0, #0
   1af64:	d02c      	beq.n	1afc0 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   1af66:	687b      	ldr	r3, [r7, #4]
   1af68:	7f1b      	ldrb	r3, [r3, #28]
   1af6a:	2b00      	cmp	r3, #0
   1af6c:	d128      	bne.n	1afc0 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   1af6e:	230c      	movs	r3, #12
   1af70:	18fb      	adds	r3, r7, r3
   1af72:	0018      	movs	r0, r3
   1af74:	4b16      	ldr	r3, [pc, #88]	; (1afd0 <keepalive+0x94>)
   1af76:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   1af78:	23fa      	movs	r3, #250	; 0xfa
   1af7a:	009a      	lsls	r2, r3, #2
   1af7c:	230c      	movs	r3, #12
   1af7e:	18fb      	adds	r3, r7, r3
   1af80:	0011      	movs	r1, r2
   1af82:	0018      	movs	r0, r3
   1af84:	4b13      	ldr	r3, [pc, #76]	; (1afd4 <keepalive+0x98>)
   1af86:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   1af88:	687b      	ldr	r3, [r7, #4]
   1af8a:	691a      	ldr	r2, [r3, #16]
   1af8c:	687b      	ldr	r3, [r7, #4]
   1af8e:	689b      	ldr	r3, [r3, #8]
   1af90:	0019      	movs	r1, r3
   1af92:	0010      	movs	r0, r2
   1af94:	4b10      	ldr	r3, [pc, #64]	; (1afd8 <keepalive+0x9c>)
   1af96:	4798      	blx	r3
   1af98:	0003      	movs	r3, r0
   1af9a:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   1af9c:	69bb      	ldr	r3, [r7, #24]
   1af9e:	2b00      	cmp	r3, #0
   1afa0:	dd0e      	ble.n	1afc0 <keepalive+0x84>
   1afa2:	230c      	movs	r3, #12
   1afa4:	18fa      	adds	r2, r7, r3
   1afa6:	69b9      	ldr	r1, [r7, #24]
   1afa8:	687b      	ldr	r3, [r7, #4]
   1afaa:	0018      	movs	r0, r3
   1afac:	4b0b      	ldr	r3, [pc, #44]	; (1afdc <keepalive+0xa0>)
   1afae:	4798      	blx	r3
   1afb0:	0003      	movs	r3, r0
   1afb2:	61fb      	str	r3, [r7, #28]
   1afb4:	69fb      	ldr	r3, [r7, #28]
   1afb6:	2b00      	cmp	r3, #0
   1afb8:	d102      	bne.n	1afc0 <keepalive+0x84>
                c->ping_outstanding = 1;
   1afba:	687b      	ldr	r3, [r7, #4]
   1afbc:	2201      	movs	r2, #1
   1afbe:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   1afc0:	69fb      	ldr	r3, [r7, #28]
}
   1afc2:	0018      	movs	r0, r3
   1afc4:	46bd      	mov	sp, r7
   1afc6:	b008      	add	sp, #32
   1afc8:	bd80      	pop	{r7, pc}
   1afca:	46c0      	nop			; (mov r8, r8)
   1afcc:	0001b8bd 	.word	0x0001b8bd
   1afd0:	0001b961 	.word	0x0001b961
   1afd4:	0001b8e9 	.word	0x0001b8e9
   1afd8:	0001c535 	.word	0x0001c535
   1afdc:	0001aad9 	.word	0x0001aad9

0001afe0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   1afe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1afe2:	b095      	sub	sp, #84	; 0x54
   1afe4:	af06      	add	r7, sp, #24
   1afe6:	6078      	str	r0, [r7, #4]
   1afe8:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   1afea:	683a      	ldr	r2, [r7, #0]
   1afec:	687b      	ldr	r3, [r7, #4]
   1afee:	0011      	movs	r1, r2
   1aff0:	0018      	movs	r0, r3
   1aff2:	4b70      	ldr	r3, [pc, #448]	; (1b1b4 <cycle+0x1d4>)
   1aff4:	4798      	blx	r3
   1aff6:	0002      	movs	r2, r0
   1aff8:	232e      	movs	r3, #46	; 0x2e
   1affa:	18fb      	adds	r3, r7, r3
   1affc:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   1affe:	2300      	movs	r3, #0
   1b000:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   1b002:	2300      	movs	r3, #0
   1b004:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   1b006:	232e      	movs	r3, #46	; 0x2e
   1b008:	18fb      	adds	r3, r7, r3
   1b00a:	881b      	ldrh	r3, [r3, #0]
   1b00c:	2b0d      	cmp	r3, #13
   1b00e:	d900      	bls.n	1b012 <cycle+0x32>
   1b010:	e0bd      	b.n	1b18e <cycle+0x1ae>
   1b012:	009a      	lsls	r2, r3, #2
   1b014:	4b68      	ldr	r3, [pc, #416]	; (1b1b8 <cycle+0x1d8>)
   1b016:	18d3      	adds	r3, r2, r3
   1b018:	681b      	ldr	r3, [r3, #0]
   1b01a:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1b01c:	687b      	ldr	r3, [r7, #4]
   1b01e:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   1b020:	687b      	ldr	r3, [r7, #4]
   1b022:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1b024:	001e      	movs	r6, r3
   1b026:	2310      	movs	r3, #16
   1b028:	18fb      	adds	r3, r7, r3
   1b02a:	1d1d      	adds	r5, r3, #4
   1b02c:	2310      	movs	r3, #16
   1b02e:	18fb      	adds	r3, r7, r3
   1b030:	1c5c      	adds	r4, r3, #1
   1b032:	230c      	movs	r3, #12
   1b034:	18f9      	adds	r1, r7, r3
   1b036:	2310      	movs	r3, #16
   1b038:	18fb      	adds	r3, r7, r3
   1b03a:	1c98      	adds	r0, r3, #2
   1b03c:	9604      	str	r6, [sp, #16]
   1b03e:	9203      	str	r2, [sp, #12]
   1b040:	2310      	movs	r3, #16
   1b042:	18fb      	adds	r3, r7, r3
   1b044:	330c      	adds	r3, #12
   1b046:	9302      	str	r3, [sp, #8]
   1b048:	2310      	movs	r3, #16
   1b04a:	18fb      	adds	r3, r7, r3
   1b04c:	3308      	adds	r3, #8
   1b04e:	9301      	str	r3, [sp, #4]
   1b050:	2320      	movs	r3, #32
   1b052:	18fb      	adds	r3, r7, r3
   1b054:	9300      	str	r3, [sp, #0]
   1b056:	002b      	movs	r3, r5
   1b058:	0022      	movs	r2, r4
   1b05a:	4c58      	ldr	r4, [pc, #352]	; (1b1bc <cycle+0x1dc>)
   1b05c:	47a0      	blx	r4
   1b05e:	0003      	movs	r3, r0
   1b060:	2b01      	cmp	r3, #1
   1b062:	d000      	beq.n	1b066 <cycle+0x86>
   1b064:	e098      	b.n	1b198 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   1b066:	68fb      	ldr	r3, [r7, #12]
   1b068:	b2da      	uxtb	r2, r3
   1b06a:	2310      	movs	r3, #16
   1b06c:	18fb      	adds	r3, r7, r3
   1b06e:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   1b070:	2310      	movs	r3, #16
   1b072:	18fa      	adds	r2, r7, r3
   1b074:	2320      	movs	r3, #32
   1b076:	18f9      	adds	r1, r7, r3
   1b078:	687b      	ldr	r3, [r7, #4]
   1b07a:	0018      	movs	r0, r3
   1b07c:	4b50      	ldr	r3, [pc, #320]	; (1b1c0 <cycle+0x1e0>)
   1b07e:	4798      	blx	r3
            if (msg.qos != QOS0)
   1b080:	2310      	movs	r3, #16
   1b082:	18fb      	adds	r3, r7, r3
   1b084:	781b      	ldrb	r3, [r3, #0]
   1b086:	2b00      	cmp	r3, #0
   1b088:	d100      	bne.n	1b08c <cycle+0xac>
   1b08a:	e07d      	b.n	1b188 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   1b08c:	2310      	movs	r3, #16
   1b08e:	18fb      	adds	r3, r7, r3
   1b090:	781b      	ldrb	r3, [r3, #0]
   1b092:	2b01      	cmp	r3, #1
   1b094:	d10f      	bne.n	1b0b6 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   1b096:	687b      	ldr	r3, [r7, #4]
   1b098:	6918      	ldr	r0, [r3, #16]
   1b09a:	687b      	ldr	r3, [r7, #4]
   1b09c:	689b      	ldr	r3, [r3, #8]
   1b09e:	0019      	movs	r1, r3
   1b0a0:	2310      	movs	r3, #16
   1b0a2:	18fb      	adds	r3, r7, r3
   1b0a4:	889b      	ldrh	r3, [r3, #4]
   1b0a6:	9300      	str	r3, [sp, #0]
   1b0a8:	2300      	movs	r3, #0
   1b0aa:	2204      	movs	r2, #4
   1b0ac:	4c45      	ldr	r4, [pc, #276]	; (1b1c4 <cycle+0x1e4>)
   1b0ae:	47a0      	blx	r4
   1b0b0:	0003      	movs	r3, r0
   1b0b2:	637b      	str	r3, [r7, #52]	; 0x34
   1b0b4:	e013      	b.n	1b0de <cycle+0xfe>
                else if (msg.qos == QOS2)
   1b0b6:	2310      	movs	r3, #16
   1b0b8:	18fb      	adds	r3, r7, r3
   1b0ba:	781b      	ldrb	r3, [r3, #0]
   1b0bc:	2b02      	cmp	r3, #2
   1b0be:	d10e      	bne.n	1b0de <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   1b0c0:	687b      	ldr	r3, [r7, #4]
   1b0c2:	6918      	ldr	r0, [r3, #16]
   1b0c4:	687b      	ldr	r3, [r7, #4]
   1b0c6:	689b      	ldr	r3, [r3, #8]
   1b0c8:	0019      	movs	r1, r3
   1b0ca:	2310      	movs	r3, #16
   1b0cc:	18fb      	adds	r3, r7, r3
   1b0ce:	889b      	ldrh	r3, [r3, #4]
   1b0d0:	9300      	str	r3, [sp, #0]
   1b0d2:	2300      	movs	r3, #0
   1b0d4:	2205      	movs	r2, #5
   1b0d6:	4c3b      	ldr	r4, [pc, #236]	; (1b1c4 <cycle+0x1e4>)
   1b0d8:	47a0      	blx	r4
   1b0da:	0003      	movs	r3, r0
   1b0dc:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   1b0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b0e0:	2b00      	cmp	r3, #0
   1b0e2:	dc03      	bgt.n	1b0ec <cycle+0x10c>
                    rc = FAILURE;
   1b0e4:	2301      	movs	r3, #1
   1b0e6:	425b      	negs	r3, r3
   1b0e8:	633b      	str	r3, [r7, #48]	; 0x30
   1b0ea:	e007      	b.n	1b0fc <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   1b0ec:	683a      	ldr	r2, [r7, #0]
   1b0ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1b0f0:	687b      	ldr	r3, [r7, #4]
   1b0f2:	0018      	movs	r0, r3
   1b0f4:	4b34      	ldr	r3, [pc, #208]	; (1b1c8 <cycle+0x1e8>)
   1b0f6:	4798      	blx	r3
   1b0f8:	0003      	movs	r3, r0
   1b0fa:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   1b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b0fe:	3301      	adds	r3, #1
   1b100:	d142      	bne.n	1b188 <cycle+0x1a8>
                    goto exit; // there was a problem
   1b102:	46c0      	nop			; (mov r8, r8)
   1b104:	e049      	b.n	1b19a <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1b106:	687b      	ldr	r3, [r7, #4]
   1b108:	695c      	ldr	r4, [r3, #20]
   1b10a:	687b      	ldr	r3, [r7, #4]
   1b10c:	68db      	ldr	r3, [r3, #12]
   1b10e:	220a      	movs	r2, #10
   1b110:	18ba      	adds	r2, r7, r2
   1b112:	2109      	movs	r1, #9
   1b114:	1879      	adds	r1, r7, r1
   1b116:	2008      	movs	r0, #8
   1b118:	1838      	adds	r0, r7, r0
   1b11a:	9300      	str	r3, [sp, #0]
   1b11c:	0023      	movs	r3, r4
   1b11e:	4c2b      	ldr	r4, [pc, #172]	; (1b1cc <cycle+0x1ec>)
   1b120:	47a0      	blx	r4
   1b122:	0003      	movs	r3, r0
   1b124:	2b01      	cmp	r3, #1
   1b126:	d003      	beq.n	1b130 <cycle+0x150>
                rc = FAILURE;
   1b128:	2301      	movs	r3, #1
   1b12a:	425b      	negs	r3, r3
   1b12c:	633b      	str	r3, [r7, #48]	; 0x30
   1b12e:	e023      	b.n	1b178 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   1b130:	687b      	ldr	r3, [r7, #4]
   1b132:	6918      	ldr	r0, [r3, #16]
   1b134:	687b      	ldr	r3, [r7, #4]
   1b136:	689b      	ldr	r3, [r3, #8]
   1b138:	0019      	movs	r1, r3
   1b13a:	230a      	movs	r3, #10
   1b13c:	18fb      	adds	r3, r7, r3
   1b13e:	881b      	ldrh	r3, [r3, #0]
   1b140:	9300      	str	r3, [sp, #0]
   1b142:	2300      	movs	r3, #0
   1b144:	2206      	movs	r2, #6
   1b146:	4c1f      	ldr	r4, [pc, #124]	; (1b1c4 <cycle+0x1e4>)
   1b148:	47a0      	blx	r4
   1b14a:	0003      	movs	r3, r0
   1b14c:	637b      	str	r3, [r7, #52]	; 0x34
   1b14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b150:	2b00      	cmp	r3, #0
   1b152:	dc03      	bgt.n	1b15c <cycle+0x17c>
                rc = FAILURE;
   1b154:	2301      	movs	r3, #1
   1b156:	425b      	negs	r3, r3
   1b158:	633b      	str	r3, [r7, #48]	; 0x30
   1b15a:	e00d      	b.n	1b178 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   1b15c:	683a      	ldr	r2, [r7, #0]
   1b15e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1b160:	687b      	ldr	r3, [r7, #4]
   1b162:	0018      	movs	r0, r3
   1b164:	4b18      	ldr	r3, [pc, #96]	; (1b1c8 <cycle+0x1e8>)
   1b166:	4798      	blx	r3
   1b168:	0003      	movs	r3, r0
   1b16a:	633b      	str	r3, [r7, #48]	; 0x30
   1b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b16e:	2b00      	cmp	r3, #0
   1b170:	d002      	beq.n	1b178 <cycle+0x198>
                rc = FAILURE; // there was a problem
   1b172:	2301      	movs	r3, #1
   1b174:	425b      	negs	r3, r3
   1b176:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   1b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b17a:	3301      	adds	r3, #1
   1b17c:	d106      	bne.n	1b18c <cycle+0x1ac>
                goto exit; // there was a problem
   1b17e:	e00c      	b.n	1b19a <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   1b180:	687b      	ldr	r3, [r7, #4]
   1b182:	2200      	movs	r2, #0
   1b184:	771a      	strb	r2, [r3, #28]
            break;
   1b186:	e002      	b.n	1b18e <cycle+0x1ae>
            break;
   1b188:	46c0      	nop			; (mov r8, r8)
   1b18a:	e000      	b.n	1b18e <cycle+0x1ae>
            break;
   1b18c:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   1b18e:	687b      	ldr	r3, [r7, #4]
   1b190:	0018      	movs	r0, r3
   1b192:	4b0f      	ldr	r3, [pc, #60]	; (1b1d0 <cycle+0x1f0>)
   1b194:	4798      	blx	r3
   1b196:	e000      	b.n	1b19a <cycle+0x1ba>
                goto exit;
   1b198:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   1b19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b19c:	2b00      	cmp	r3, #0
   1b19e:	d103      	bne.n	1b1a8 <cycle+0x1c8>
        rc = packet_type;
   1b1a0:	232e      	movs	r3, #46	; 0x2e
   1b1a2:	18fb      	adds	r3, r7, r3
   1b1a4:	881b      	ldrh	r3, [r3, #0]
   1b1a6:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   1b1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   1b1aa:	0018      	movs	r0, r3
   1b1ac:	46bd      	mov	sp, r7
   1b1ae:	b00f      	add	sp, #60	; 0x3c
   1b1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b1b2:	46c0      	nop			; (mov r8, r8)
   1b1b4:	0001ac95 	.word	0x0001ac95
   1b1b8:	00025db4 	.word	0x00025db4
   1b1bc:	0001c559 	.word	0x0001c559
   1b1c0:	0001ae51 	.word	0x0001ae51
   1b1c4:	0001cd51 	.word	0x0001cd51
   1b1c8:	0001aad9 	.word	0x0001aad9
   1b1cc:	0001c65d 	.word	0x0001c65d
   1b1d0:	0001af3d 	.word	0x0001af3d

0001b1d4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   1b1d4:	b580      	push	{r7, lr}
   1b1d6:	b086      	sub	sp, #24
   1b1d8:	af00      	add	r7, sp, #0
   1b1da:	6078      	str	r0, [r7, #4]
   1b1dc:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   1b1de:	2300      	movs	r3, #0
   1b1e0:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   1b1e2:	2308      	movs	r3, #8
   1b1e4:	18fb      	adds	r3, r7, r3
   1b1e6:	0018      	movs	r0, r3
   1b1e8:	4b11      	ldr	r3, [pc, #68]	; (1b230 <MQTTYield+0x5c>)
   1b1ea:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   1b1ec:	683a      	ldr	r2, [r7, #0]
   1b1ee:	2308      	movs	r3, #8
   1b1f0:	18fb      	adds	r3, r7, r3
   1b1f2:	0011      	movs	r1, r2
   1b1f4:	0018      	movs	r0, r3
   1b1f6:	4b0f      	ldr	r3, [pc, #60]	; (1b234 <MQTTYield+0x60>)
   1b1f8:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   1b1fa:	2308      	movs	r3, #8
   1b1fc:	18fa      	adds	r2, r7, r3
   1b1fe:	687b      	ldr	r3, [r7, #4]
   1b200:	0011      	movs	r1, r2
   1b202:	0018      	movs	r0, r3
   1b204:	4b0c      	ldr	r3, [pc, #48]	; (1b238 <MQTTYield+0x64>)
   1b206:	4798      	blx	r3
   1b208:	0003      	movs	r3, r0
   1b20a:	3301      	adds	r3, #1
   1b20c:	d103      	bne.n	1b216 <MQTTYield+0x42>
        {
            rc = FAILURE;
   1b20e:	2301      	movs	r3, #1
   1b210:	425b      	negs	r3, r3
   1b212:	617b      	str	r3, [r7, #20]
            break;
   1b214:	e006      	b.n	1b224 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   1b216:	2308      	movs	r3, #8
   1b218:	18fb      	adds	r3, r7, r3
   1b21a:	0018      	movs	r0, r3
   1b21c:	4b07      	ldr	r3, [pc, #28]	; (1b23c <MQTTYield+0x68>)
   1b21e:	4798      	blx	r3
   1b220:	1e03      	subs	r3, r0, #0
   1b222:	d0ea      	beq.n	1b1fa <MQTTYield+0x26>
        
    return rc;
   1b224:	697b      	ldr	r3, [r7, #20]
}
   1b226:	0018      	movs	r0, r3
   1b228:	46bd      	mov	sp, r7
   1b22a:	b006      	add	sp, #24
   1b22c:	bd80      	pop	{r7, pc}
   1b22e:	46c0      	nop			; (mov r8, r8)
   1b230:	0001b961 	.word	0x0001b961
   1b234:	0001b8e9 	.word	0x0001b8e9
   1b238:	0001afe1 	.word	0x0001afe1
   1b23c:	0001b8bd 	.word	0x0001b8bd

0001b240 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   1b240:	b580      	push	{r7, lr}
   1b242:	b086      	sub	sp, #24
   1b244:	af00      	add	r7, sp, #0
   1b246:	60f8      	str	r0, [r7, #12]
   1b248:	60b9      	str	r1, [r7, #8]
   1b24a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   1b24c:	2301      	movs	r3, #1
   1b24e:	425b      	negs	r3, r3
   1b250:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   1b252:	687b      	ldr	r3, [r7, #4]
   1b254:	0018      	movs	r0, r3
   1b256:	4b0b      	ldr	r3, [pc, #44]	; (1b284 <waitfor+0x44>)
   1b258:	4798      	blx	r3
   1b25a:	1e03      	subs	r3, r0, #0
   1b25c:	d10c      	bne.n	1b278 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   1b25e:	687a      	ldr	r2, [r7, #4]
   1b260:	68fb      	ldr	r3, [r7, #12]
   1b262:	0011      	movs	r1, r2
   1b264:	0018      	movs	r0, r3
   1b266:	4b08      	ldr	r3, [pc, #32]	; (1b288 <waitfor+0x48>)
   1b268:	4798      	blx	r3
   1b26a:	0003      	movs	r3, r0
   1b26c:	617b      	str	r3, [r7, #20]
   1b26e:	697a      	ldr	r2, [r7, #20]
   1b270:	68bb      	ldr	r3, [r7, #8]
   1b272:	429a      	cmp	r2, r3
   1b274:	d1ed      	bne.n	1b252 <waitfor+0x12>
   1b276:	e000      	b.n	1b27a <waitfor+0x3a>
            break; // we timed out
   1b278:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   1b27a:	697b      	ldr	r3, [r7, #20]
}
   1b27c:	0018      	movs	r0, r3
   1b27e:	46bd      	mov	sp, r7
   1b280:	b006      	add	sp, #24
   1b282:	bd80      	pop	{r7, pc}
   1b284:	0001b8bd 	.word	0x0001b8bd
   1b288:	0001afe1 	.word	0x0001afe1

0001b28c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   1b28c:	b590      	push	{r4, r7, lr}
   1b28e:	b09f      	sub	sp, #124	; 0x7c
   1b290:	af00      	add	r7, sp, #0
   1b292:	6078      	str	r0, [r7, #4]
   1b294:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   1b296:	2301      	movs	r3, #1
   1b298:	425b      	negs	r3, r3
   1b29a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   1b29c:	230c      	movs	r3, #12
   1b29e:	18fa      	adds	r2, r7, r3
   1b2a0:	4b41      	ldr	r3, [pc, #260]	; (1b3a8 <MQTTConnect+0x11c>)
   1b2a2:	0010      	movs	r0, r2
   1b2a4:	0019      	movs	r1, r3
   1b2a6:	2358      	movs	r3, #88	; 0x58
   1b2a8:	001a      	movs	r2, r3
   1b2aa:	4b40      	ldr	r3, [pc, #256]	; (1b3ac <MQTTConnect+0x120>)
   1b2ac:	4798      	blx	r3
    int len = 0;
   1b2ae:	2300      	movs	r3, #0
   1b2b0:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   1b2b2:	687b      	ldr	r3, [r7, #4]
   1b2b4:	6a1b      	ldr	r3, [r3, #32]
   1b2b6:	2b00      	cmp	r3, #0
   1b2b8:	d166      	bne.n	1b388 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   1b2ba:	2364      	movs	r3, #100	; 0x64
   1b2bc:	18fb      	adds	r3, r7, r3
   1b2be:	0018      	movs	r0, r3
   1b2c0:	4b3b      	ldr	r3, [pc, #236]	; (1b3b0 <MQTTConnect+0x124>)
   1b2c2:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   1b2c4:	687b      	ldr	r3, [r7, #4]
   1b2c6:	685a      	ldr	r2, [r3, #4]
   1b2c8:	2364      	movs	r3, #100	; 0x64
   1b2ca:	18fb      	adds	r3, r7, r3
   1b2cc:	0011      	movs	r1, r2
   1b2ce:	0018      	movs	r0, r3
   1b2d0:	4b38      	ldr	r3, [pc, #224]	; (1b3b4 <MQTTConnect+0x128>)
   1b2d2:	4798      	blx	r3

    if (options == 0)
   1b2d4:	683b      	ldr	r3, [r7, #0]
   1b2d6:	2b00      	cmp	r3, #0
   1b2d8:	d102      	bne.n	1b2e0 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   1b2da:	230c      	movs	r3, #12
   1b2dc:	18fb      	adds	r3, r7, r3
   1b2de:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   1b2e0:	683b      	ldr	r3, [r7, #0]
   1b2e2:	8b1b      	ldrh	r3, [r3, #24]
   1b2e4:	001a      	movs	r2, r3
   1b2e6:	687b      	ldr	r3, [r7, #4]
   1b2e8:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   1b2ea:	687b      	ldr	r3, [r7, #4]
   1b2ec:	3354      	adds	r3, #84	; 0x54
   1b2ee:	001a      	movs	r2, r3
   1b2f0:	687b      	ldr	r3, [r7, #4]
   1b2f2:	699b      	ldr	r3, [r3, #24]
   1b2f4:	0019      	movs	r1, r3
   1b2f6:	0010      	movs	r0, r2
   1b2f8:	4b2f      	ldr	r3, [pc, #188]	; (1b3b8 <MQTTConnect+0x12c>)
   1b2fa:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   1b2fc:	687b      	ldr	r3, [r7, #4]
   1b2fe:	6918      	ldr	r0, [r3, #16]
   1b300:	687b      	ldr	r3, [r7, #4]
   1b302:	689b      	ldr	r3, [r3, #8]
   1b304:	0019      	movs	r1, r3
   1b306:	683b      	ldr	r3, [r7, #0]
   1b308:	001a      	movs	r2, r3
   1b30a:	4b2c      	ldr	r3, [pc, #176]	; (1b3bc <MQTTConnect+0x130>)
   1b30c:	4798      	blx	r3
   1b30e:	0003      	movs	r3, r0
   1b310:	673b      	str	r3, [r7, #112]	; 0x70
   1b312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1b314:	2b00      	cmp	r3, #0
   1b316:	dd39      	ble.n	1b38c <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   1b318:	2364      	movs	r3, #100	; 0x64
   1b31a:	18fa      	adds	r2, r7, r3
   1b31c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1b31e:	687b      	ldr	r3, [r7, #4]
   1b320:	0018      	movs	r0, r3
   1b322:	4b27      	ldr	r3, [pc, #156]	; (1b3c0 <MQTTConnect+0x134>)
   1b324:	4798      	blx	r3
   1b326:	0003      	movs	r3, r0
   1b328:	677b      	str	r3, [r7, #116]	; 0x74
   1b32a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b32c:	2b00      	cmp	r3, #0
   1b32e:	d12f      	bne.n	1b390 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   1b330:	2364      	movs	r3, #100	; 0x64
   1b332:	18fa      	adds	r2, r7, r3
   1b334:	687b      	ldr	r3, [r7, #4]
   1b336:	2102      	movs	r1, #2
   1b338:	0018      	movs	r0, r3
   1b33a:	4b22      	ldr	r3, [pc, #136]	; (1b3c4 <MQTTConnect+0x138>)
   1b33c:	4798      	blx	r3
   1b33e:	0003      	movs	r3, r0
   1b340:	2b02      	cmp	r3, #2
   1b342:	d11d      	bne.n	1b380 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   1b344:	230b      	movs	r3, #11
   1b346:	18fb      	adds	r3, r7, r3
   1b348:	22ff      	movs	r2, #255	; 0xff
   1b34a:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   1b34c:	230a      	movs	r3, #10
   1b34e:	18fb      	adds	r3, r7, r3
   1b350:	2200      	movs	r2, #0
   1b352:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   1b354:	687b      	ldr	r3, [r7, #4]
   1b356:	695a      	ldr	r2, [r3, #20]
   1b358:	687b      	ldr	r3, [r7, #4]
   1b35a:	68db      	ldr	r3, [r3, #12]
   1b35c:	210b      	movs	r1, #11
   1b35e:	1879      	adds	r1, r7, r1
   1b360:	200a      	movs	r0, #10
   1b362:	1838      	adds	r0, r7, r0
   1b364:	4c18      	ldr	r4, [pc, #96]	; (1b3c8 <MQTTConnect+0x13c>)
   1b366:	47a0      	blx	r4
   1b368:	0003      	movs	r3, r0
   1b36a:	2b01      	cmp	r3, #1
   1b36c:	d104      	bne.n	1b378 <MQTTConnect+0xec>
            rc = connack_rc;
   1b36e:	230b      	movs	r3, #11
   1b370:	18fb      	adds	r3, r7, r3
   1b372:	781b      	ldrb	r3, [r3, #0]
   1b374:	677b      	str	r3, [r7, #116]	; 0x74
   1b376:	e00c      	b.n	1b392 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   1b378:	2301      	movs	r3, #1
   1b37a:	425b      	negs	r3, r3
   1b37c:	677b      	str	r3, [r7, #116]	; 0x74
   1b37e:	e008      	b.n	1b392 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   1b380:	2301      	movs	r3, #1
   1b382:	425b      	negs	r3, r3
   1b384:	677b      	str	r3, [r7, #116]	; 0x74
   1b386:	e004      	b.n	1b392 <MQTTConnect+0x106>
		goto exit;
   1b388:	46c0      	nop			; (mov r8, r8)
   1b38a:	e002      	b.n	1b392 <MQTTConnect+0x106>
        goto exit;
   1b38c:	46c0      	nop			; (mov r8, r8)
   1b38e:	e000      	b.n	1b392 <MQTTConnect+0x106>
        goto exit; // there was a problem
   1b390:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   1b392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b394:	2b00      	cmp	r3, #0
   1b396:	d102      	bne.n	1b39e <MQTTConnect+0x112>
        c->isconnected = 1;
   1b398:	687b      	ldr	r3, [r7, #4]
   1b39a:	2201      	movs	r2, #1
   1b39c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   1b39e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1b3a0:	0018      	movs	r0, r3
   1b3a2:	46bd      	mov	sp, r7
   1b3a4:	b01f      	add	sp, #124	; 0x7c
   1b3a6:	bd90      	pop	{r4, r7, pc}
   1b3a8:	00025dec 	.word	0x00025dec
   1b3ac:	00020ee9 	.word	0x00020ee9
   1b3b0:	0001b961 	.word	0x0001b961
   1b3b4:	0001b8e9 	.word	0x0001b8e9
   1b3b8:	0001b911 	.word	0x0001b911
   1b3bc:	0001c13d 	.word	0x0001c13d
   1b3c0:	0001aad9 	.word	0x0001aad9
   1b3c4:	0001b241 	.word	0x0001b241
   1b3c8:	0001c3b9 	.word	0x0001c3b9

0001b3cc <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   1b3cc:	b5b0      	push	{r4, r5, r7, lr}
   1b3ce:	b096      	sub	sp, #88	; 0x58
   1b3d0:	af04      	add	r7, sp, #16
   1b3d2:	60f8      	str	r0, [r7, #12]
   1b3d4:	60b9      	str	r1, [r7, #8]
   1b3d6:	603b      	str	r3, [r7, #0]
   1b3d8:	1dfb      	adds	r3, r7, #7
   1b3da:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   1b3dc:	2301      	movs	r3, #1
   1b3de:	425b      	negs	r3, r3
   1b3e0:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   1b3e2:	2300      	movs	r3, #0
   1b3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   1b3e6:	2324      	movs	r3, #36	; 0x24
   1b3e8:	18fb      	adds	r3, r7, r3
   1b3ea:	2200      	movs	r2, #0
   1b3ec:	601a      	str	r2, [r3, #0]
   1b3ee:	2324      	movs	r3, #36	; 0x24
   1b3f0:	18fb      	adds	r3, r7, r3
   1b3f2:	2200      	movs	r2, #0
   1b3f4:	605a      	str	r2, [r3, #4]
   1b3f6:	2324      	movs	r3, #36	; 0x24
   1b3f8:	18fb      	adds	r3, r7, r3
   1b3fa:	2200      	movs	r2, #0
   1b3fc:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   1b3fe:	1dfb      	adds	r3, r7, #7
   1b400:	781b      	ldrb	r3, [r3, #0]
   1b402:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   1b404:	2324      	movs	r3, #36	; 0x24
   1b406:	18fb      	adds	r3, r7, r3
   1b408:	68ba      	ldr	r2, [r7, #8]
   1b40a:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1b40c:	68fb      	ldr	r3, [r7, #12]
   1b40e:	6a1b      	ldr	r3, [r3, #32]
   1b410:	2b00      	cmp	r3, #0
   1b412:	d100      	bne.n	1b416 <MQTTSubscribe+0x4a>
   1b414:	e088      	b.n	1b528 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   1b416:	2330      	movs	r3, #48	; 0x30
   1b418:	18fb      	adds	r3, r7, r3
   1b41a:	0018      	movs	r0, r3
   1b41c:	4b47      	ldr	r3, [pc, #284]	; (1b53c <MQTTSubscribe+0x170>)
   1b41e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1b420:	68fb      	ldr	r3, [r7, #12]
   1b422:	685a      	ldr	r2, [r3, #4]
   1b424:	2330      	movs	r3, #48	; 0x30
   1b426:	18fb      	adds	r3, r7, r3
   1b428:	0011      	movs	r1, r2
   1b42a:	0018      	movs	r0, r3
   1b42c:	4b44      	ldr	r3, [pc, #272]	; (1b540 <MQTTSubscribe+0x174>)
   1b42e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   1b430:	68fb      	ldr	r3, [r7, #12]
   1b432:	691c      	ldr	r4, [r3, #16]
   1b434:	68fb      	ldr	r3, [r7, #12]
   1b436:	689b      	ldr	r3, [r3, #8]
   1b438:	001d      	movs	r5, r3
   1b43a:	68fb      	ldr	r3, [r7, #12]
   1b43c:	0018      	movs	r0, r3
   1b43e:	4b41      	ldr	r3, [pc, #260]	; (1b544 <MQTTSubscribe+0x178>)
   1b440:	4798      	blx	r3
   1b442:	0003      	movs	r3, r0
   1b444:	b29a      	uxth	r2, r3
   1b446:	2320      	movs	r3, #32
   1b448:	18fb      	adds	r3, r7, r3
   1b44a:	9302      	str	r3, [sp, #8]
   1b44c:	2324      	movs	r3, #36	; 0x24
   1b44e:	18fb      	adds	r3, r7, r3
   1b450:	9301      	str	r3, [sp, #4]
   1b452:	2301      	movs	r3, #1
   1b454:	9300      	str	r3, [sp, #0]
   1b456:	0013      	movs	r3, r2
   1b458:	2200      	movs	r2, #0
   1b45a:	0029      	movs	r1, r5
   1b45c:	0020      	movs	r0, r4
   1b45e:	4c3a      	ldr	r4, [pc, #232]	; (1b548 <MQTTSubscribe+0x17c>)
   1b460:	47a0      	blx	r4
   1b462:	0003      	movs	r3, r0
   1b464:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   1b466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b468:	2b00      	cmp	r3, #0
   1b46a:	dd5f      	ble.n	1b52c <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1b46c:	2330      	movs	r3, #48	; 0x30
   1b46e:	18fa      	adds	r2, r7, r3
   1b470:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1b472:	68fb      	ldr	r3, [r7, #12]
   1b474:	0018      	movs	r0, r3
   1b476:	4b35      	ldr	r3, [pc, #212]	; (1b54c <MQTTSubscribe+0x180>)
   1b478:	4798      	blx	r3
   1b47a:	0003      	movs	r3, r0
   1b47c:	647b      	str	r3, [r7, #68]	; 0x44
   1b47e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b480:	2b00      	cmp	r3, #0
   1b482:	d155      	bne.n	1b530 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   1b484:	2330      	movs	r3, #48	; 0x30
   1b486:	18fa      	adds	r2, r7, r3
   1b488:	68fb      	ldr	r3, [r7, #12]
   1b48a:	2109      	movs	r1, #9
   1b48c:	0018      	movs	r0, r3
   1b48e:	4b30      	ldr	r3, [pc, #192]	; (1b550 <MQTTSubscribe+0x184>)
   1b490:	4798      	blx	r3
   1b492:	0003      	movs	r3, r0
   1b494:	2b09      	cmp	r3, #9
   1b496:	d143      	bne.n	1b520 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   1b498:	2300      	movs	r3, #0
   1b49a:	61fb      	str	r3, [r7, #28]
   1b49c:	2301      	movs	r3, #1
   1b49e:	425b      	negs	r3, r3
   1b4a0:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   1b4a2:	68fb      	ldr	r3, [r7, #12]
   1b4a4:	695a      	ldr	r2, [r3, #20]
   1b4a6:	68fb      	ldr	r3, [r7, #12]
   1b4a8:	68db      	ldr	r3, [r3, #12]
   1b4aa:	001c      	movs	r4, r3
   1b4ac:	2318      	movs	r3, #24
   1b4ae:	18fb      	adds	r3, r7, r3
   1b4b0:	211c      	movs	r1, #28
   1b4b2:	1879      	adds	r1, r7, r1
   1b4b4:	2016      	movs	r0, #22
   1b4b6:	1838      	adds	r0, r7, r0
   1b4b8:	9401      	str	r4, [sp, #4]
   1b4ba:	9200      	str	r2, [sp, #0]
   1b4bc:	000a      	movs	r2, r1
   1b4be:	2101      	movs	r1, #1
   1b4c0:	4c24      	ldr	r4, [pc, #144]	; (1b554 <MQTTSubscribe+0x188>)
   1b4c2:	47a0      	blx	r4
   1b4c4:	0003      	movs	r3, r0
   1b4c6:	2b01      	cmp	r3, #1
   1b4c8:	d101      	bne.n	1b4ce <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   1b4ca:	69bb      	ldr	r3, [r7, #24]
   1b4cc:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   1b4ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b4d0:	2b80      	cmp	r3, #128	; 0x80
   1b4d2:	d02e      	beq.n	1b532 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1b4d4:	2300      	movs	r3, #0
   1b4d6:	643b      	str	r3, [r7, #64]	; 0x40
   1b4d8:	e01e      	b.n	1b518 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   1b4da:	68fa      	ldr	r2, [r7, #12]
   1b4dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b4de:	3304      	adds	r3, #4
   1b4e0:	00db      	lsls	r3, r3, #3
   1b4e2:	18d3      	adds	r3, r2, r3
   1b4e4:	3304      	adds	r3, #4
   1b4e6:	681b      	ldr	r3, [r3, #0]
   1b4e8:	2b00      	cmp	r3, #0
   1b4ea:	d112      	bne.n	1b512 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   1b4ec:	68fa      	ldr	r2, [r7, #12]
   1b4ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b4f0:	3304      	adds	r3, #4
   1b4f2:	00db      	lsls	r3, r3, #3
   1b4f4:	18d3      	adds	r3, r2, r3
   1b4f6:	3304      	adds	r3, #4
   1b4f8:	68ba      	ldr	r2, [r7, #8]
   1b4fa:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   1b4fc:	68fa      	ldr	r2, [r7, #12]
   1b4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b500:	3304      	adds	r3, #4
   1b502:	00db      	lsls	r3, r3, #3
   1b504:	18d3      	adds	r3, r2, r3
   1b506:	3308      	adds	r3, #8
   1b508:	683a      	ldr	r2, [r7, #0]
   1b50a:	601a      	str	r2, [r3, #0]
                    rc = 0;
   1b50c:	2300      	movs	r3, #0
   1b50e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   1b510:	e00f      	b.n	1b532 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1b512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b514:	3301      	adds	r3, #1
   1b516:	643b      	str	r3, [r7, #64]	; 0x40
   1b518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b51a:	2b04      	cmp	r3, #4
   1b51c:	dddd      	ble.n	1b4da <MQTTSubscribe+0x10e>
   1b51e:	e008      	b.n	1b532 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   1b520:	2301      	movs	r3, #1
   1b522:	425b      	negs	r3, r3
   1b524:	647b      	str	r3, [r7, #68]	; 0x44
   1b526:	e004      	b.n	1b532 <MQTTSubscribe+0x166>
		goto exit;
   1b528:	46c0      	nop			; (mov r8, r8)
   1b52a:	e002      	b.n	1b532 <MQTTSubscribe+0x166>
        goto exit;
   1b52c:	46c0      	nop			; (mov r8, r8)
   1b52e:	e000      	b.n	1b532 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   1b530:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1b532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   1b534:	0018      	movs	r0, r3
   1b536:	46bd      	mov	sp, r7
   1b538:	b012      	add	sp, #72	; 0x48
   1b53a:	bdb0      	pop	{r4, r5, r7, pc}
   1b53c:	0001b961 	.word	0x0001b961
   1b540:	0001b8e9 	.word	0x0001b8e9
   1b544:	0001aaa9 	.word	0x0001aaa9
   1b548:	0001ce99 	.word	0x0001ce99
   1b54c:	0001aad9 	.word	0x0001aad9
   1b550:	0001b241 	.word	0x0001b241
   1b554:	0001cfe9 	.word	0x0001cfe9

0001b558 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   1b558:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b55a:	46ce      	mov	lr, r9
   1b55c:	4647      	mov	r7, r8
   1b55e:	b580      	push	{r7, lr}
   1b560:	b097      	sub	sp, #92	; 0x5c
   1b562:	af08      	add	r7, sp, #32
   1b564:	60f8      	str	r0, [r7, #12]
   1b566:	60b9      	str	r1, [r7, #8]
   1b568:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   1b56a:	2301      	movs	r3, #1
   1b56c:	425b      	negs	r3, r3
   1b56e:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   1b570:	2318      	movs	r3, #24
   1b572:	18fb      	adds	r3, r7, r3
   1b574:	2200      	movs	r2, #0
   1b576:	601a      	str	r2, [r3, #0]
   1b578:	2318      	movs	r3, #24
   1b57a:	18fb      	adds	r3, r7, r3
   1b57c:	2200      	movs	r2, #0
   1b57e:	605a      	str	r2, [r3, #4]
   1b580:	2318      	movs	r3, #24
   1b582:	18fb      	adds	r3, r7, r3
   1b584:	2200      	movs	r2, #0
   1b586:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   1b588:	2318      	movs	r3, #24
   1b58a:	18fb      	adds	r3, r7, r3
   1b58c:	68ba      	ldr	r2, [r7, #8]
   1b58e:	601a      	str	r2, [r3, #0]
    int len = 0;
   1b590:	2300      	movs	r3, #0
   1b592:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1b594:	68fb      	ldr	r3, [r7, #12]
   1b596:	6a1b      	ldr	r3, [r3, #32]
   1b598:	2b00      	cmp	r3, #0
   1b59a:	d100      	bne.n	1b59e <MQTTPublish+0x46>
   1b59c:	e0a0      	b.n	1b6e0 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   1b59e:	2324      	movs	r3, #36	; 0x24
   1b5a0:	18fb      	adds	r3, r7, r3
   1b5a2:	0018      	movs	r0, r3
   1b5a4:	4b55      	ldr	r3, [pc, #340]	; (1b6fc <MQTTPublish+0x1a4>)
   1b5a6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1b5a8:	68fb      	ldr	r3, [r7, #12]
   1b5aa:	685a      	ldr	r2, [r3, #4]
   1b5ac:	2324      	movs	r3, #36	; 0x24
   1b5ae:	18fb      	adds	r3, r7, r3
   1b5b0:	0011      	movs	r1, r2
   1b5b2:	0018      	movs	r0, r3
   1b5b4:	4b52      	ldr	r3, [pc, #328]	; (1b700 <MQTTPublish+0x1a8>)
   1b5b6:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   1b5b8:	687b      	ldr	r3, [r7, #4]
   1b5ba:	781b      	ldrb	r3, [r3, #0]
   1b5bc:	2b01      	cmp	r3, #1
   1b5be:	d003      	beq.n	1b5c8 <MQTTPublish+0x70>
   1b5c0:	687b      	ldr	r3, [r7, #4]
   1b5c2:	781b      	ldrb	r3, [r3, #0]
   1b5c4:	2b02      	cmp	r3, #2
   1b5c6:	d107      	bne.n	1b5d8 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   1b5c8:	68fb      	ldr	r3, [r7, #12]
   1b5ca:	0018      	movs	r0, r3
   1b5cc:	4b4d      	ldr	r3, [pc, #308]	; (1b704 <MQTTPublish+0x1ac>)
   1b5ce:	4798      	blx	r3
   1b5d0:	0003      	movs	r3, r0
   1b5d2:	b29a      	uxth	r2, r3
   1b5d4:	687b      	ldr	r3, [r7, #4]
   1b5d6:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1b5d8:	68fb      	ldr	r3, [r7, #12]
   1b5da:	691b      	ldr	r3, [r3, #16]
   1b5dc:	469c      	mov	ip, r3
   1b5de:	68fb      	ldr	r3, [r7, #12]
   1b5e0:	689b      	ldr	r3, [r3, #8]
   1b5e2:	001d      	movs	r5, r3
   1b5e4:	687b      	ldr	r3, [r7, #4]
   1b5e6:	781b      	ldrb	r3, [r3, #0]
   1b5e8:	001e      	movs	r6, r3
   1b5ea:	687b      	ldr	r3, [r7, #4]
   1b5ec:	785b      	ldrb	r3, [r3, #1]
   1b5ee:	4698      	mov	r8, r3
   1b5f0:	687b      	ldr	r3, [r7, #4]
   1b5f2:	889b      	ldrh	r3, [r3, #4]
   1b5f4:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   1b5f6:	687b      	ldr	r3, [r7, #4]
   1b5f8:	689a      	ldr	r2, [r3, #8]
   1b5fa:	687b      	ldr	r3, [r7, #4]
   1b5fc:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1b5fe:	9306      	str	r3, [sp, #24]
   1b600:	9205      	str	r2, [sp, #20]
   1b602:	2318      	movs	r3, #24
   1b604:	18fa      	adds	r2, r7, r3
   1b606:	2308      	movs	r3, #8
   1b608:	446b      	add	r3, sp
   1b60a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1b60c:	c313      	stmia	r3!, {r0, r1, r4}
   1b60e:	464b      	mov	r3, r9
   1b610:	9301      	str	r3, [sp, #4]
   1b612:	4643      	mov	r3, r8
   1b614:	9300      	str	r3, [sp, #0]
   1b616:	0033      	movs	r3, r6
   1b618:	2200      	movs	r2, #0
   1b61a:	0029      	movs	r1, r5
   1b61c:	4660      	mov	r0, ip
   1b61e:	4c3a      	ldr	r4, [pc, #232]	; (1b708 <MQTTPublish+0x1b0>)
   1b620:	47a0      	blx	r4
   1b622:	0003      	movs	r3, r0
   1b624:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   1b626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b628:	2b00      	cmp	r3, #0
   1b62a:	dd5b      	ble.n	1b6e4 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1b62c:	2324      	movs	r3, #36	; 0x24
   1b62e:	18fa      	adds	r2, r7, r3
   1b630:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1b632:	68fb      	ldr	r3, [r7, #12]
   1b634:	0018      	movs	r0, r3
   1b636:	4b35      	ldr	r3, [pc, #212]	; (1b70c <MQTTPublish+0x1b4>)
   1b638:	4798      	blx	r3
   1b63a:	0003      	movs	r3, r0
   1b63c:	637b      	str	r3, [r7, #52]	; 0x34
   1b63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b640:	2b00      	cmp	r3, #0
   1b642:	d151      	bne.n	1b6e8 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   1b644:	687b      	ldr	r3, [r7, #4]
   1b646:	781b      	ldrb	r3, [r3, #0]
   1b648:	2b01      	cmp	r3, #1
   1b64a:	d122      	bne.n	1b692 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   1b64c:	2324      	movs	r3, #36	; 0x24
   1b64e:	18fa      	adds	r2, r7, r3
   1b650:	68fb      	ldr	r3, [r7, #12]
   1b652:	2104      	movs	r1, #4
   1b654:	0018      	movs	r0, r3
   1b656:	4b2e      	ldr	r3, [pc, #184]	; (1b710 <MQTTPublish+0x1b8>)
   1b658:	4798      	blx	r3
   1b65a:	0003      	movs	r3, r0
   1b65c:	2b04      	cmp	r3, #4
   1b65e:	d114      	bne.n	1b68a <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1b660:	68fb      	ldr	r3, [r7, #12]
   1b662:	695c      	ldr	r4, [r3, #20]
   1b664:	68fb      	ldr	r3, [r7, #12]
   1b666:	68db      	ldr	r3, [r3, #12]
   1b668:	2216      	movs	r2, #22
   1b66a:	18ba      	adds	r2, r7, r2
   1b66c:	2115      	movs	r1, #21
   1b66e:	1879      	adds	r1, r7, r1
   1b670:	2014      	movs	r0, #20
   1b672:	1838      	adds	r0, r7, r0
   1b674:	9300      	str	r3, [sp, #0]
   1b676:	0023      	movs	r3, r4
   1b678:	4c26      	ldr	r4, [pc, #152]	; (1b714 <MQTTPublish+0x1bc>)
   1b67a:	47a0      	blx	r4
   1b67c:	0003      	movs	r3, r0
   1b67e:	2b01      	cmp	r3, #1
   1b680:	d033      	beq.n	1b6ea <MQTTPublish+0x192>
                rc = FAILURE;
   1b682:	2301      	movs	r3, #1
   1b684:	425b      	negs	r3, r3
   1b686:	637b      	str	r3, [r7, #52]	; 0x34
   1b688:	e02f      	b.n	1b6ea <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   1b68a:	2301      	movs	r3, #1
   1b68c:	425b      	negs	r3, r3
   1b68e:	637b      	str	r3, [r7, #52]	; 0x34
   1b690:	e02b      	b.n	1b6ea <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   1b692:	687b      	ldr	r3, [r7, #4]
   1b694:	781b      	ldrb	r3, [r3, #0]
   1b696:	2b02      	cmp	r3, #2
   1b698:	d127      	bne.n	1b6ea <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   1b69a:	2324      	movs	r3, #36	; 0x24
   1b69c:	18fa      	adds	r2, r7, r3
   1b69e:	68fb      	ldr	r3, [r7, #12]
   1b6a0:	2107      	movs	r1, #7
   1b6a2:	0018      	movs	r0, r3
   1b6a4:	4b1a      	ldr	r3, [pc, #104]	; (1b710 <MQTTPublish+0x1b8>)
   1b6a6:	4798      	blx	r3
   1b6a8:	0003      	movs	r3, r0
   1b6aa:	2b07      	cmp	r3, #7
   1b6ac:	d114      	bne.n	1b6d8 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1b6ae:	68fb      	ldr	r3, [r7, #12]
   1b6b0:	695c      	ldr	r4, [r3, #20]
   1b6b2:	68fb      	ldr	r3, [r7, #12]
   1b6b4:	68db      	ldr	r3, [r3, #12]
   1b6b6:	2212      	movs	r2, #18
   1b6b8:	18ba      	adds	r2, r7, r2
   1b6ba:	2111      	movs	r1, #17
   1b6bc:	1879      	adds	r1, r7, r1
   1b6be:	2010      	movs	r0, #16
   1b6c0:	1838      	adds	r0, r7, r0
   1b6c2:	9300      	str	r3, [sp, #0]
   1b6c4:	0023      	movs	r3, r4
   1b6c6:	4c13      	ldr	r4, [pc, #76]	; (1b714 <MQTTPublish+0x1bc>)
   1b6c8:	47a0      	blx	r4
   1b6ca:	0003      	movs	r3, r0
   1b6cc:	2b01      	cmp	r3, #1
   1b6ce:	d00c      	beq.n	1b6ea <MQTTPublish+0x192>
                rc = FAILURE;
   1b6d0:	2301      	movs	r3, #1
   1b6d2:	425b      	negs	r3, r3
   1b6d4:	637b      	str	r3, [r7, #52]	; 0x34
   1b6d6:	e008      	b.n	1b6ea <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   1b6d8:	2301      	movs	r3, #1
   1b6da:	425b      	negs	r3, r3
   1b6dc:	637b      	str	r3, [r7, #52]	; 0x34
   1b6de:	e004      	b.n	1b6ea <MQTTPublish+0x192>
		goto exit;
   1b6e0:	46c0      	nop			; (mov r8, r8)
   1b6e2:	e002      	b.n	1b6ea <MQTTPublish+0x192>
        goto exit;
   1b6e4:	46c0      	nop			; (mov r8, r8)
   1b6e6:	e000      	b.n	1b6ea <MQTTPublish+0x192>
        goto exit; // there was a problem
   1b6e8:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   1b6ec:	0018      	movs	r0, r3
   1b6ee:	46bd      	mov	sp, r7
   1b6f0:	b00f      	add	sp, #60	; 0x3c
   1b6f2:	bc0c      	pop	{r2, r3}
   1b6f4:	4690      	mov	r8, r2
   1b6f6:	4699      	mov	r9, r3
   1b6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b6fa:	46c0      	nop			; (mov r8, r8)
   1b6fc:	0001b961 	.word	0x0001b961
   1b700:	0001b8e9 	.word	0x0001b8e9
   1b704:	0001aaa9 	.word	0x0001aaa9
   1b708:	0001cbe5 	.word	0x0001cbe5
   1b70c:	0001aad9 	.word	0x0001aad9
   1b710:	0001b241 	.word	0x0001b241
   1b714:	0001c65d 	.word	0x0001c65d

0001b718 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   1b718:	b580      	push	{r7, lr}
   1b71a:	b088      	sub	sp, #32
   1b71c:	af00      	add	r7, sp, #0
   1b71e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   1b720:	2301      	movs	r3, #1
   1b722:	425b      	negs	r3, r3
   1b724:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   1b726:	2300      	movs	r3, #0
   1b728:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   1b72a:	230c      	movs	r3, #12
   1b72c:	18fb      	adds	r3, r7, r3
   1b72e:	0018      	movs	r0, r3
   1b730:	4b13      	ldr	r3, [pc, #76]	; (1b780 <MQTTDisconnect+0x68>)
   1b732:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1b734:	687b      	ldr	r3, [r7, #4]
   1b736:	685a      	ldr	r2, [r3, #4]
   1b738:	230c      	movs	r3, #12
   1b73a:	18fb      	adds	r3, r7, r3
   1b73c:	0011      	movs	r1, r2
   1b73e:	0018      	movs	r0, r3
   1b740:	4b10      	ldr	r3, [pc, #64]	; (1b784 <MQTTDisconnect+0x6c>)
   1b742:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   1b744:	687b      	ldr	r3, [r7, #4]
   1b746:	691a      	ldr	r2, [r3, #16]
   1b748:	687b      	ldr	r3, [r7, #4]
   1b74a:	689b      	ldr	r3, [r3, #8]
   1b74c:	0019      	movs	r1, r3
   1b74e:	0010      	movs	r0, r2
   1b750:	4b0d      	ldr	r3, [pc, #52]	; (1b788 <MQTTDisconnect+0x70>)
   1b752:	4798      	blx	r3
   1b754:	0003      	movs	r3, r0
   1b756:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   1b758:	69bb      	ldr	r3, [r7, #24]
   1b75a:	2b00      	cmp	r3, #0
   1b75c:	dd08      	ble.n	1b770 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   1b75e:	230c      	movs	r3, #12
   1b760:	18fa      	adds	r2, r7, r3
   1b762:	69b9      	ldr	r1, [r7, #24]
   1b764:	687b      	ldr	r3, [r7, #4]
   1b766:	0018      	movs	r0, r3
   1b768:	4b08      	ldr	r3, [pc, #32]	; (1b78c <MQTTDisconnect+0x74>)
   1b76a:	4798      	blx	r3
   1b76c:	0003      	movs	r3, r0
   1b76e:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   1b770:	687b      	ldr	r3, [r7, #4]
   1b772:	2200      	movs	r2, #0
   1b774:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1b776:	69fb      	ldr	r3, [r7, #28]
}
   1b778:	0018      	movs	r0, r3
   1b77a:	46bd      	mov	sp, r7
   1b77c:	b008      	add	sp, #32
   1b77e:	bd80      	pop	{r7, pc}
   1b780:	0001b961 	.word	0x0001b961
   1b784:	0001b8e9 	.word	0x0001b8e9
   1b788:	0001c511 	.word	0x0001c511
   1b78c:	0001aad9 	.word	0x0001aad9

0001b790 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   1b790:	b580      	push	{r7, lr}
   1b792:	b084      	sub	sp, #16
   1b794:	af00      	add	r7, sp, #0
   1b796:	0002      	movs	r2, r0
   1b798:	1dfb      	adds	r3, r7, #7
   1b79a:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1b79c:	2300      	movs	r3, #0
   1b79e:	60fb      	str	r3, [r7, #12]
   1b7a0:	e01c      	b.n	1b7dc <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   1b7a2:	4a12      	ldr	r2, [pc, #72]	; (1b7ec <isMQTTSocket+0x5c>)
   1b7a4:	68fb      	ldr	r3, [r7, #12]
   1b7a6:	2164      	movs	r1, #100	; 0x64
   1b7a8:	434b      	muls	r3, r1
   1b7aa:	18d3      	adds	r3, r2, r3
   1b7ac:	3360      	adds	r3, #96	; 0x60
   1b7ae:	681b      	ldr	r3, [r3, #0]
   1b7b0:	2b00      	cmp	r3, #0
   1b7b2:	d010      	beq.n	1b7d6 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   1b7b4:	4a0d      	ldr	r2, [pc, #52]	; (1b7ec <isMQTTSocket+0x5c>)
   1b7b6:	68fb      	ldr	r3, [r7, #12]
   1b7b8:	2164      	movs	r1, #100	; 0x64
   1b7ba:	434b      	muls	r3, r1
   1b7bc:	18d3      	adds	r3, r2, r3
   1b7be:	3360      	adds	r3, #96	; 0x60
   1b7c0:	681b      	ldr	r3, [r3, #0]
   1b7c2:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   1b7c4:	68bb      	ldr	r3, [r7, #8]
   1b7c6:	6a1a      	ldr	r2, [r3, #32]
   1b7c8:	1dfb      	adds	r3, r7, #7
   1b7ca:	781b      	ldrb	r3, [r3, #0]
   1b7cc:	b25b      	sxtb	r3, r3
   1b7ce:	429a      	cmp	r2, r3
   1b7d0:	d101      	bne.n	1b7d6 <isMQTTSocket+0x46>
				return true;
   1b7d2:	2301      	movs	r3, #1
   1b7d4:	e006      	b.n	1b7e4 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1b7d6:	68fb      	ldr	r3, [r7, #12]
   1b7d8:	3301      	adds	r3, #1
   1b7da:	60fb      	str	r3, [r7, #12]
   1b7dc:	68fb      	ldr	r3, [r7, #12]
   1b7de:	2b06      	cmp	r3, #6
   1b7e0:	d9df      	bls.n	1b7a2 <isMQTTSocket+0x12>
		}
	}
	return false;
   1b7e2:	2300      	movs	r3, #0
}
   1b7e4:	0018      	movs	r0, r3
   1b7e6:	46bd      	mov	sp, r7
   1b7e8:	b004      	add	sp, #16
   1b7ea:	bd80      	pop	{r7, pc}
   1b7ec:	20003ec0 	.word	0x20003ec0

0001b7f0 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   1b7f0:	b580      	push	{r7, lr}
   1b7f2:	b082      	sub	sp, #8
   1b7f4:	af00      	add	r7, sp, #0
   1b7f6:	6078      	str	r0, [r7, #4]
   1b7f8:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   1b7fa:	4b0d      	ldr	r3, [pc, #52]	; (1b830 <dnsResolveCallback+0x40>)
   1b7fc:	781b      	ldrb	r3, [r3, #0]
   1b7fe:	2201      	movs	r2, #1
   1b800:	4053      	eors	r3, r2
   1b802:	b2db      	uxtb	r3, r3
   1b804:	2b00      	cmp	r3, #0
   1b806:	d00e      	beq.n	1b826 <dnsResolveCallback+0x36>
   1b808:	4b0a      	ldr	r3, [pc, #40]	; (1b834 <dnsResolveCallback+0x44>)
   1b80a:	681b      	ldr	r3, [r3, #0]
   1b80c:	687a      	ldr	r2, [r7, #4]
   1b80e:	0011      	movs	r1, r2
   1b810:	0018      	movs	r0, r3
   1b812:	4b09      	ldr	r3, [pc, #36]	; (1b838 <dnsResolveCallback+0x48>)
   1b814:	4798      	blx	r3
   1b816:	1e03      	subs	r3, r0, #0
   1b818:	d105      	bne.n	1b826 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   1b81a:	683a      	ldr	r2, [r7, #0]
   1b81c:	4b07      	ldr	r3, [pc, #28]	; (1b83c <dnsResolveCallback+0x4c>)
   1b81e:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   1b820:	4b03      	ldr	r3, [pc, #12]	; (1b830 <dnsResolveCallback+0x40>)
   1b822:	2201      	movs	r2, #1
   1b824:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   1b826:	46c0      	nop			; (mov r8, r8)
   1b828:	46bd      	mov	sp, r7
   1b82a:	b002      	add	sp, #8
   1b82c:	bd80      	pop	{r7, pc}
   1b82e:	46c0      	nop			; (mov r8, r8)
   1b830:	20003db0 	.word	0x20003db0
   1b834:	20003ebc 	.word	0x20003ebc
   1b838:	00021277 	.word	0x00021277
   1b83c:	20003da8 	.word	0x20003da8

0001b840 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   1b840:	b580      	push	{r7, lr}
   1b842:	b084      	sub	sp, #16
   1b844:	af00      	add	r7, sp, #0
   1b846:	603a      	str	r2, [r7, #0]
   1b848:	1dfb      	adds	r3, r7, #7
   1b84a:	1c02      	adds	r2, r0, #0
   1b84c:	701a      	strb	r2, [r3, #0]
   1b84e:	1dbb      	adds	r3, r7, #6
   1b850:	1c0a      	adds	r2, r1, #0
   1b852:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   1b854:	1dfb      	adds	r3, r7, #7
   1b856:	781b      	ldrb	r3, [r3, #0]
   1b858:	b25b      	sxtb	r3, r3
   1b85a:	0018      	movs	r0, r3
   1b85c:	4b12      	ldr	r3, [pc, #72]	; (1b8a8 <tcpClientSocketEventHandler+0x68>)
   1b85e:	4798      	blx	r3
   1b860:	1e03      	subs	r3, r0, #0
   1b862:	d01c      	beq.n	1b89e <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   1b864:	1dbb      	adds	r3, r7, #6
   1b866:	781b      	ldrb	r3, [r3, #0]
   1b868:	2b06      	cmp	r3, #6
   1b86a:	d00c      	beq.n	1b886 <tcpClientSocketEventHandler+0x46>
   1b86c:	2b07      	cmp	r3, #7
   1b86e:	d006      	beq.n	1b87e <tcpClientSocketEventHandler+0x3e>
   1b870:	2b05      	cmp	r3, #5
   1b872:	d000      	beq.n	1b876 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   1b874:	e013      	b.n	1b89e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   1b876:	4b0d      	ldr	r3, [pc, #52]	; (1b8ac <tcpClientSocketEventHandler+0x6c>)
   1b878:	2201      	movs	r2, #1
   1b87a:	701a      	strb	r2, [r3, #0]
			break;
   1b87c:	e00f      	b.n	1b89e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   1b87e:	4b0c      	ldr	r3, [pc, #48]	; (1b8b0 <tcpClientSocketEventHandler+0x70>)
   1b880:	2201      	movs	r2, #1
   1b882:	701a      	strb	r2, [r3, #0]
			break;
   1b884:	e00b      	b.n	1b89e <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   1b886:	683b      	ldr	r3, [r7, #0]
   1b888:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   1b88a:	68fb      	ldr	r3, [r7, #12]
   1b88c:	2204      	movs	r2, #4
   1b88e:	5e9b      	ldrsh	r3, [r3, r2]
   1b890:	001a      	movs	r2, r3
   1b892:	4b08      	ldr	r3, [pc, #32]	; (1b8b4 <tcpClientSocketEventHandler+0x74>)
   1b894:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   1b896:	4b08      	ldr	r3, [pc, #32]	; (1b8b8 <tcpClientSocketEventHandler+0x78>)
   1b898:	2201      	movs	r2, #1
   1b89a:	701a      	strb	r2, [r3, #0]
			break;
   1b89c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1b89e:	46c0      	nop			; (mov r8, r8)
   1b8a0:	46bd      	mov	sp, r7
   1b8a2:	b004      	add	sp, #16
   1b8a4:	bd80      	pop	{r7, pc}
   1b8a6:	46c0      	nop			; (mov r8, r8)
   1b8a8:	0001b791 	.word	0x0001b791
   1b8ac:	20003db1 	.word	0x20003db1
   1b8b0:	20003db2 	.word	0x20003db2
   1b8b4:	20003dac 	.word	0x20003dac
   1b8b8:	20003db3 	.word	0x20003db3

0001b8bc <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   1b8bc:	b580      	push	{r7, lr}
   1b8be:	b082      	sub	sp, #8
   1b8c0:	af00      	add	r7, sp, #0
   1b8c2:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   1b8c4:	687b      	ldr	r3, [r7, #4]
   1b8c6:	3304      	adds	r3, #4
   1b8c8:	687a      	ldr	r2, [r7, #4]
   1b8ca:	0011      	movs	r1, r2
   1b8cc:	0018      	movs	r0, r3
   1b8ce:	4b05      	ldr	r3, [pc, #20]	; (1b8e4 <TimerIsExpired+0x28>)
   1b8d0:	4798      	blx	r3
   1b8d2:	0003      	movs	r3, r0
   1b8d4:	3b01      	subs	r3, #1
   1b8d6:	425a      	negs	r2, r3
   1b8d8:	4153      	adcs	r3, r2
   1b8da:	b2db      	uxtb	r3, r3
}
   1b8dc:	0018      	movs	r0, r3
   1b8de:	46bd      	mov	sp, r7
   1b8e0:	b002      	add	sp, #8
   1b8e2:	bd80      	pop	{r7, pc}
   1b8e4:	00009155 	.word	0x00009155

0001b8e8 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   1b8e8:	b580      	push	{r7, lr}
   1b8ea:	b082      	sub	sp, #8
   1b8ec:	af00      	add	r7, sp, #0
   1b8ee:	6078      	str	r0, [r7, #4]
   1b8f0:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   1b8f2:	687b      	ldr	r3, [r7, #4]
   1b8f4:	683a      	ldr	r2, [r7, #0]
   1b8f6:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   1b8f8:	687b      	ldr	r3, [r7, #4]
   1b8fa:	3304      	adds	r3, #4
   1b8fc:	0018      	movs	r0, r3
   1b8fe:	4b03      	ldr	r3, [pc, #12]	; (1b90c <TimerCountdownMS+0x24>)
   1b900:	4798      	blx	r3
}
   1b902:	46c0      	nop			; (mov r8, r8)
   1b904:	46bd      	mov	sp, r7
   1b906:	b002      	add	sp, #8
   1b908:	bd80      	pop	{r7, pc}
   1b90a:	46c0      	nop			; (mov r8, r8)
   1b90c:	000090e9 	.word	0x000090e9

0001b910 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   1b910:	b580      	push	{r7, lr}
   1b912:	b082      	sub	sp, #8
   1b914:	af00      	add	r7, sp, #0
   1b916:	6078      	str	r0, [r7, #4]
   1b918:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   1b91a:	683b      	ldr	r3, [r7, #0]
   1b91c:	22fa      	movs	r2, #250	; 0xfa
   1b91e:	0092      	lsls	r2, r2, #2
   1b920:	435a      	muls	r2, r3
   1b922:	687b      	ldr	r3, [r7, #4]
   1b924:	0011      	movs	r1, r2
   1b926:	0018      	movs	r0, r3
   1b928:	4b02      	ldr	r3, [pc, #8]	; (1b934 <TimerCountdown+0x24>)
   1b92a:	4798      	blx	r3
}
   1b92c:	46c0      	nop			; (mov r8, r8)
   1b92e:	46bd      	mov	sp, r7
   1b930:	b002      	add	sp, #8
   1b932:	bd80      	pop	{r7, pc}
   1b934:	0001b8e9 	.word	0x0001b8e9

0001b938 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   1b938:	b580      	push	{r7, lr}
   1b93a:	b082      	sub	sp, #8
   1b93c:	af00      	add	r7, sp, #0
   1b93e:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   1b940:	687b      	ldr	r3, [r7, #4]
   1b942:	3304      	adds	r3, #4
   1b944:	687a      	ldr	r2, [r7, #4]
   1b946:	0011      	movs	r1, r2
   1b948:	0018      	movs	r0, r3
   1b94a:	4b04      	ldr	r3, [pc, #16]	; (1b95c <TimerLeftMS+0x24>)
   1b94c:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   1b94e:	687b      	ldr	r3, [r7, #4]
   1b950:	681b      	ldr	r3, [r3, #0]
}
   1b952:	0018      	movs	r0, r3
   1b954:	46bd      	mov	sp, r7
   1b956:	b002      	add	sp, #8
   1b958:	bd80      	pop	{r7, pc}
   1b95a:	46c0      	nop			; (mov r8, r8)
   1b95c:	00009155 	.word	0x00009155

0001b960 <TimerInit>:


void TimerInit(Timer* timer) {
   1b960:	b580      	push	{r7, lr}
   1b962:	b082      	sub	sp, #8
   1b964:	af00      	add	r7, sp, #0
   1b966:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   1b968:	687b      	ldr	r3, [r7, #4]
   1b96a:	2200      	movs	r2, #0
   1b96c:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   1b96e:	687b      	ldr	r3, [r7, #4]
   1b970:	3304      	adds	r3, #4
   1b972:	2208      	movs	r2, #8
   1b974:	2100      	movs	r1, #0
   1b976:	0018      	movs	r0, r3
   1b978:	4b02      	ldr	r3, [pc, #8]	; (1b984 <TimerInit+0x24>)
   1b97a:	4798      	blx	r3
}
   1b97c:	46c0      	nop			; (mov r8, r8)
   1b97e:	46bd      	mov	sp, r7
   1b980:	b002      	add	sp, #8
   1b982:	bd80      	pop	{r7, pc}
   1b984:	00020f1f 	.word	0x00020f1f

0001b988 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   1b988:	b590      	push	{r4, r7, lr}
   1b98a:	b085      	sub	sp, #20
   1b98c:	af00      	add	r7, sp, #0
   1b98e:	60f8      	str	r0, [r7, #12]
   1b990:	60b9      	str	r1, [r7, #8]
   1b992:	607a      	str	r2, [r7, #4]
   1b994:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   1b996:	683b      	ldr	r3, [r7, #0]
   1b998:	2b00      	cmp	r3, #0
   1b99a:	d101      	bne.n	1b9a0 <WINC1500_read+0x18>
   1b99c:	230a      	movs	r3, #10
   1b99e:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   1b9a0:	4b2c      	ldr	r3, [pc, #176]	; (1ba54 <WINC1500_read+0xcc>)
   1b9a2:	681b      	ldr	r3, [r3, #0]
   1b9a4:	2b00      	cmp	r3, #0
   1b9a6:	d131      	bne.n	1ba0c <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   1b9a8:	4b2b      	ldr	r3, [pc, #172]	; (1ba58 <WINC1500_read+0xd0>)
   1b9aa:	2200      	movs	r2, #0
   1b9ac:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   1b9ae:	68fb      	ldr	r3, [r7, #12]
   1b9b0:	681b      	ldr	r3, [r3, #0]
   1b9b2:	b258      	sxtb	r0, r3
   1b9b4:	683c      	ldr	r4, [r7, #0]
   1b9b6:	2380      	movs	r3, #128	; 0x80
   1b9b8:	005a      	lsls	r2, r3, #1
   1b9ba:	4928      	ldr	r1, [pc, #160]	; (1ba5c <WINC1500_read+0xd4>)
   1b9bc:	0023      	movs	r3, r4
   1b9be:	4c28      	ldr	r4, [pc, #160]	; (1ba60 <WINC1500_read+0xd8>)
   1b9c0:	47a0      	blx	r4
   1b9c2:	1e03      	subs	r3, r0, #0
   1b9c4:	d005      	beq.n	1b9d2 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   1b9c6:	2301      	movs	r3, #1
   1b9c8:	425b      	negs	r3, r3
   1b9ca:	e03e      	b.n	1ba4a <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   1b9cc:	2000      	movs	r0, #0
   1b9ce:	4b25      	ldr	r3, [pc, #148]	; (1ba64 <WINC1500_read+0xdc>)
   1b9d0:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   1b9d2:	4b21      	ldr	r3, [pc, #132]	; (1ba58 <WINC1500_read+0xd0>)
   1b9d4:	781b      	ldrb	r3, [r3, #0]
   1b9d6:	2201      	movs	r2, #1
   1b9d8:	4053      	eors	r3, r2
   1b9da:	b2db      	uxtb	r3, r3
   1b9dc:	2b00      	cmp	r3, #0
   1b9de:	d1f5      	bne.n	1b9cc <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   1b9e0:	4b21      	ldr	r3, [pc, #132]	; (1ba68 <WINC1500_read+0xe0>)
   1b9e2:	681b      	ldr	r3, [r3, #0]
   1b9e4:	2b00      	cmp	r3, #0
   1b9e6:	dd08      	ble.n	1b9fa <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   1b9e8:	4b1f      	ldr	r3, [pc, #124]	; (1ba68 <WINC1500_read+0xe0>)
   1b9ea:	681b      	ldr	r3, [r3, #0]
   1b9ec:	001a      	movs	r2, r3
   1b9ee:	4b19      	ldr	r3, [pc, #100]	; (1ba54 <WINC1500_read+0xcc>)
   1b9f0:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   1b9f2:	4b1e      	ldr	r3, [pc, #120]	; (1ba6c <WINC1500_read+0xe4>)
   1b9f4:	2200      	movs	r2, #0
   1b9f6:	601a      	str	r2, [r3, #0]
   1b9f8:	e008      	b.n	1ba0c <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   1b9fa:	4b16      	ldr	r3, [pc, #88]	; (1ba54 <WINC1500_read+0xcc>)
   1b9fc:	2200      	movs	r2, #0
   1b9fe:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   1ba00:	4b1a      	ldr	r3, [pc, #104]	; (1ba6c <WINC1500_read+0xe4>)
   1ba02:	2200      	movs	r2, #0
   1ba04:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   1ba06:	4b18      	ldr	r3, [pc, #96]	; (1ba68 <WINC1500_read+0xe0>)
   1ba08:	681b      	ldr	r3, [r3, #0]
   1ba0a:	e01e      	b.n	1ba4a <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   1ba0c:	4b11      	ldr	r3, [pc, #68]	; (1ba54 <WINC1500_read+0xcc>)
   1ba0e:	681b      	ldr	r3, [r3, #0]
   1ba10:	001a      	movs	r2, r3
   1ba12:	687b      	ldr	r3, [r7, #4]
   1ba14:	4293      	cmp	r3, r2
   1ba16:	dd02      	ble.n	1ba1e <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   1ba18:	2301      	movs	r3, #1
   1ba1a:	425b      	negs	r3, r3
   1ba1c:	e015      	b.n	1ba4a <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   1ba1e:	4b13      	ldr	r3, [pc, #76]	; (1ba6c <WINC1500_read+0xe4>)
   1ba20:	681a      	ldr	r2, [r3, #0]
   1ba22:	4b0e      	ldr	r3, [pc, #56]	; (1ba5c <WINC1500_read+0xd4>)
   1ba24:	18d1      	adds	r1, r2, r3
   1ba26:	687a      	ldr	r2, [r7, #4]
   1ba28:	68bb      	ldr	r3, [r7, #8]
   1ba2a:	0018      	movs	r0, r3
   1ba2c:	4b10      	ldr	r3, [pc, #64]	; (1ba70 <WINC1500_read+0xe8>)
   1ba2e:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   1ba30:	4b08      	ldr	r3, [pc, #32]	; (1ba54 <WINC1500_read+0xcc>)
   1ba32:	681a      	ldr	r2, [r3, #0]
   1ba34:	687b      	ldr	r3, [r7, #4]
   1ba36:	1ad2      	subs	r2, r2, r3
   1ba38:	4b06      	ldr	r3, [pc, #24]	; (1ba54 <WINC1500_read+0xcc>)
   1ba3a:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   1ba3c:	4b0b      	ldr	r3, [pc, #44]	; (1ba6c <WINC1500_read+0xe4>)
   1ba3e:	681a      	ldr	r2, [r3, #0]
   1ba40:	687b      	ldr	r3, [r7, #4]
   1ba42:	18d2      	adds	r2, r2, r3
   1ba44:	4b09      	ldr	r3, [pc, #36]	; (1ba6c <WINC1500_read+0xe4>)
   1ba46:	601a      	str	r2, [r3, #0]
  
  return len;
   1ba48:	687b      	ldr	r3, [r7, #4]
}
   1ba4a:	0018      	movs	r0, r3
   1ba4c:	46bd      	mov	sp, r7
   1ba4e:	b005      	add	sp, #20
   1ba50:	bd90      	pop	{r4, r7, pc}
   1ba52:	46c0      	nop			; (mov r8, r8)
   1ba54:	20003eb8 	.word	0x20003eb8
   1ba58:	20003db3 	.word	0x20003db3
   1ba5c:	20003db4 	.word	0x20003db4
   1ba60:	0001203d 	.word	0x0001203d
   1ba64:	0000e585 	.word	0x0000e585
   1ba68:	20003dac 	.word	0x20003dac
   1ba6c:	20003eb4 	.word	0x20003eb4
   1ba70:	00020ee9 	.word	0x00020ee9

0001ba74 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   1ba74:	b590      	push	{r4, r7, lr}
   1ba76:	b085      	sub	sp, #20
   1ba78:	af00      	add	r7, sp, #0
   1ba7a:	60f8      	str	r0, [r7, #12]
   1ba7c:	60b9      	str	r1, [r7, #8]
   1ba7e:	607a      	str	r2, [r7, #4]
   1ba80:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   1ba82:	4b10      	ldr	r3, [pc, #64]	; (1bac4 <WINC1500_write+0x50>)
   1ba84:	2200      	movs	r2, #0
   1ba86:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   1ba88:	68fb      	ldr	r3, [r7, #12]
   1ba8a:	681b      	ldr	r3, [r3, #0]
   1ba8c:	b258      	sxtb	r0, r3
   1ba8e:	687b      	ldr	r3, [r7, #4]
   1ba90:	b29a      	uxth	r2, r3
   1ba92:	68b9      	ldr	r1, [r7, #8]
   1ba94:	2300      	movs	r3, #0
   1ba96:	4c0c      	ldr	r4, [pc, #48]	; (1bac8 <WINC1500_write+0x54>)
   1ba98:	47a0      	blx	r4
   1ba9a:	1e03      	subs	r3, r0, #0
   1ba9c:	d005      	beq.n	1baaa <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   1ba9e:	2301      	movs	r3, #1
   1baa0:	425b      	negs	r3, r3
   1baa2:	e00a      	b.n	1baba <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   1baa4:	2000      	movs	r0, #0
   1baa6:	4b09      	ldr	r3, [pc, #36]	; (1bacc <WINC1500_write+0x58>)
   1baa8:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   1baaa:	4b06      	ldr	r3, [pc, #24]	; (1bac4 <WINC1500_write+0x50>)
   1baac:	781b      	ldrb	r3, [r3, #0]
   1baae:	2201      	movs	r2, #1
   1bab0:	4053      	eors	r3, r2
   1bab2:	b2db      	uxtb	r3, r3
   1bab4:	2b00      	cmp	r3, #0
   1bab6:	d1f5      	bne.n	1baa4 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   1bab8:	687b      	ldr	r3, [r7, #4]
}
   1baba:	0018      	movs	r0, r3
   1babc:	46bd      	mov	sp, r7
   1babe:	b005      	add	sp, #20
   1bac0:	bd90      	pop	{r4, r7, pc}
   1bac2:	46c0      	nop			; (mov r8, r8)
   1bac4:	20003db2 	.word	0x20003db2
   1bac8:	00011ed9 	.word	0x00011ed9
   1bacc:	0000e585 	.word	0x0000e585

0001bad0 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   1bad0:	b580      	push	{r7, lr}
   1bad2:	b082      	sub	sp, #8
   1bad4:	af00      	add	r7, sp, #0
   1bad6:	6078      	str	r0, [r7, #4]
	close(n->socket);
   1bad8:	687b      	ldr	r3, [r7, #4]
   1bada:	681b      	ldr	r3, [r3, #0]
   1badc:	b25b      	sxtb	r3, r3
   1bade:	0018      	movs	r0, r3
   1bae0:	4b06      	ldr	r3, [pc, #24]	; (1bafc <WINC1500_disconnect+0x2c>)
   1bae2:	4798      	blx	r3
	n->socket=-1;
   1bae4:	687b      	ldr	r3, [r7, #4]
   1bae6:	2201      	movs	r2, #1
   1bae8:	4252      	negs	r2, r2
   1baea:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   1baec:	4b04      	ldr	r3, [pc, #16]	; (1bb00 <WINC1500_disconnect+0x30>)
   1baee:	2200      	movs	r2, #0
   1baf0:	701a      	strb	r2, [r3, #0]
}
   1baf2:	46c0      	nop			; (mov r8, r8)
   1baf4:	46bd      	mov	sp, r7
   1baf6:	b002      	add	sp, #8
   1baf8:	bd80      	pop	{r7, pc}
   1bafa:	46c0      	nop			; (mov r8, r8)
   1bafc:	000121bd 	.word	0x000121bd
   1bb00:	20003db1 	.word	0x20003db1

0001bb04 <NetworkInit>:


void NetworkInit(Network* n) {
   1bb04:	b580      	push	{r7, lr}
   1bb06:	b082      	sub	sp, #8
   1bb08:	af00      	add	r7, sp, #0
   1bb0a:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   1bb0c:	687b      	ldr	r3, [r7, #4]
   1bb0e:	2201      	movs	r2, #1
   1bb10:	4252      	negs	r2, r2
   1bb12:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   1bb14:	687b      	ldr	r3, [r7, #4]
   1bb16:	4a06      	ldr	r2, [pc, #24]	; (1bb30 <NetworkInit+0x2c>)
   1bb18:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   1bb1a:	687b      	ldr	r3, [r7, #4]
   1bb1c:	4a05      	ldr	r2, [pc, #20]	; (1bb34 <NetworkInit+0x30>)
   1bb1e:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   1bb20:	687b      	ldr	r3, [r7, #4]
   1bb22:	4a05      	ldr	r2, [pc, #20]	; (1bb38 <NetworkInit+0x34>)
   1bb24:	611a      	str	r2, [r3, #16]
}
   1bb26:	46c0      	nop			; (mov r8, r8)
   1bb28:	46bd      	mov	sp, r7
   1bb2a:	b002      	add	sp, #8
   1bb2c:	bd80      	pop	{r7, pc}
   1bb2e:	46c0      	nop			; (mov r8, r8)
   1bb30:	0001b989 	.word	0x0001b989
   1bb34:	0001ba75 	.word	0x0001ba75
   1bb38:	0001bad1 	.word	0x0001bad1

0001bb3c <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   1bb3c:	b580      	push	{r7, lr}
   1bb3e:	b088      	sub	sp, #32
   1bb40:	af00      	add	r7, sp, #0
   1bb42:	60f8      	str	r0, [r7, #12]
   1bb44:	60b9      	str	r1, [r7, #8]
   1bb46:	607a      	str	r2, [r7, #4]
   1bb48:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   1bb4a:	4b37      	ldr	r3, [pc, #220]	; (1bc28 <ConnectNetwork+0xec>)
   1bb4c:	2200      	movs	r2, #0
   1bb4e:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   1bb50:	4b36      	ldr	r3, [pc, #216]	; (1bc2c <ConnectNetwork+0xf0>)
   1bb52:	68ba      	ldr	r2, [r7, #8]
   1bb54:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   1bb56:	68bb      	ldr	r3, [r7, #8]
   1bb58:	0018      	movs	r0, r3
   1bb5a:	4b35      	ldr	r3, [pc, #212]	; (1bc30 <ConnectNetwork+0xf4>)
   1bb5c:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   1bb5e:	e002      	b.n	1bb66 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   1bb60:	2000      	movs	r0, #0
   1bb62:	4b34      	ldr	r3, [pc, #208]	; (1bc34 <ConnectNetwork+0xf8>)
   1bb64:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   1bb66:	4b30      	ldr	r3, [pc, #192]	; (1bc28 <ConnectNetwork+0xec>)
   1bb68:	781b      	ldrb	r3, [r3, #0]
   1bb6a:	2201      	movs	r2, #1
   1bb6c:	4053      	eors	r3, r2
   1bb6e:	b2db      	uxtb	r3, r3
   1bb70:	2b00      	cmp	r3, #0
   1bb72:	d1f5      	bne.n	1bb60 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   1bb74:	4b30      	ldr	r3, [pc, #192]	; (1bc38 <ConnectNetwork+0xfc>)
   1bb76:	681a      	ldr	r2, [r3, #0]
   1bb78:	68fb      	ldr	r3, [r7, #12]
   1bb7a:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   1bb7c:	2310      	movs	r3, #16
   1bb7e:	18fb      	adds	r3, r7, r3
   1bb80:	2202      	movs	r2, #2
   1bb82:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   1bb84:	687b      	ldr	r3, [r7, #4]
   1bb86:	b29b      	uxth	r3, r3
   1bb88:	021b      	lsls	r3, r3, #8
   1bb8a:	b21a      	sxth	r2, r3
   1bb8c:	687b      	ldr	r3, [r7, #4]
   1bb8e:	b29b      	uxth	r3, r3
   1bb90:	0a1b      	lsrs	r3, r3, #8
   1bb92:	b29b      	uxth	r3, r3
   1bb94:	b21b      	sxth	r3, r3
   1bb96:	4313      	orrs	r3, r2
   1bb98:	b21b      	sxth	r3, r3
   1bb9a:	b29a      	uxth	r2, r3
   1bb9c:	2310      	movs	r3, #16
   1bb9e:	18fb      	adds	r3, r7, r3
   1bba0:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   1bba2:	4b25      	ldr	r3, [pc, #148]	; (1bc38 <ConnectNetwork+0xfc>)
   1bba4:	681b      	ldr	r3, [r3, #0]
   1bba6:	001a      	movs	r2, r3
   1bba8:	2310      	movs	r3, #16
   1bbaa:	18fb      	adds	r3, r7, r3
   1bbac:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   1bbae:	68fb      	ldr	r3, [r7, #12]
   1bbb0:	681b      	ldr	r3, [r3, #0]
   1bbb2:	2b00      	cmp	r3, #0
   1bbb4:	da0a      	bge.n	1bbcc <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   1bbb6:	683b      	ldr	r3, [r7, #0]
   1bbb8:	b2db      	uxtb	r3, r3
   1bbba:	001a      	movs	r2, r3
   1bbbc:	2101      	movs	r1, #1
   1bbbe:	2002      	movs	r0, #2
   1bbc0:	4b1e      	ldr	r3, [pc, #120]	; (1bc3c <ConnectNetwork+0x100>)
   1bbc2:	4798      	blx	r3
   1bbc4:	0003      	movs	r3, r0
   1bbc6:	001a      	movs	r2, r3
   1bbc8:	68fb      	ldr	r3, [r7, #12]
   1bbca:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   1bbcc:	68fb      	ldr	r3, [r7, #12]
   1bbce:	681b      	ldr	r3, [r3, #0]
   1bbd0:	3301      	adds	r3, #1
   1bbd2:	d108      	bne.n	1bbe6 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   1bbd4:	68fb      	ldr	r3, [r7, #12]
   1bbd6:	681b      	ldr	r3, [r3, #0]
   1bbd8:	b25b      	sxtb	r3, r3
   1bbda:	0018      	movs	r0, r3
   1bbdc:	4b18      	ldr	r3, [pc, #96]	; (1bc40 <ConnectNetwork+0x104>)
   1bbde:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   1bbe0:	2309      	movs	r3, #9
   1bbe2:	425b      	negs	r3, r3
   1bbe4:	e01c      	b.n	1bc20 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   1bbe6:	68fb      	ldr	r3, [r7, #12]
   1bbe8:	681b      	ldr	r3, [r3, #0]
   1bbea:	b25b      	sxtb	r3, r3
   1bbec:	2210      	movs	r2, #16
   1bbee:	18b9      	adds	r1, r7, r2
   1bbf0:	2210      	movs	r2, #16
   1bbf2:	0018      	movs	r0, r3
   1bbf4:	4b13      	ldr	r3, [pc, #76]	; (1bc44 <ConnectNetwork+0x108>)
   1bbf6:	4798      	blx	r3
   1bbf8:	1e03      	subs	r3, r0, #0
   1bbfa:	d002      	beq.n	1bc02 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   1bbfc:	2309      	movs	r3, #9
   1bbfe:	425b      	negs	r3, r3
   1bc00:	e00e      	b.n	1bc20 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   1bc02:	4b11      	ldr	r3, [pc, #68]	; (1bc48 <ConnectNetwork+0x10c>)
   1bc04:	2200      	movs	r2, #0
   1bc06:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   1bc08:	e002      	b.n	1bc10 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   1bc0a:	2000      	movs	r0, #0
   1bc0c:	4b09      	ldr	r3, [pc, #36]	; (1bc34 <ConnectNetwork+0xf8>)
   1bc0e:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   1bc10:	4b0d      	ldr	r3, [pc, #52]	; (1bc48 <ConnectNetwork+0x10c>)
   1bc12:	781b      	ldrb	r3, [r3, #0]
   1bc14:	2201      	movs	r2, #1
   1bc16:	4053      	eors	r3, r2
   1bc18:	b2db      	uxtb	r3, r3
   1bc1a:	2b00      	cmp	r3, #0
   1bc1c:	d1f5      	bne.n	1bc0a <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   1bc1e:	2300      	movs	r3, #0
   1bc20:	0018      	movs	r0, r3
   1bc22:	46bd      	mov	sp, r7
   1bc24:	b008      	add	sp, #32
   1bc26:	bd80      	pop	{r7, pc}
   1bc28:	20003db0 	.word	0x20003db0
   1bc2c:	20003ebc 	.word	0x20003ebc
   1bc30:	00012405 	.word	0x00012405
   1bc34:	0000e585 	.word	0x0000e585
   1bc38:	20003da8 	.word	0x20003da8
   1bc3c:	00011bb1 	.word	0x00011bb1
   1bc40:	000121bd 	.word	0x000121bd
   1bc44:	00011dc5 	.word	0x00011dc5
   1bc48:	20003db1 	.word	0x20003db1

0001bc4c <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   1bc4c:	b580      	push	{r7, lr}
   1bc4e:	b084      	sub	sp, #16
   1bc50:	af00      	add	r7, sp, #0
   1bc52:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   1bc54:	687b      	ldr	r3, [r7, #4]
   1bc56:	2b00      	cmp	r3, #0
   1bc58:	d022      	beq.n	1bca0 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1bc5a:	2300      	movs	r3, #0
   1bc5c:	60fb      	str	r3, [r7, #12]
   1bc5e:	e01b      	b.n	1bc98 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1bc60:	4a11      	ldr	r2, [pc, #68]	; (1bca8 <allocateClient+0x5c>)
   1bc62:	68fb      	ldr	r3, [r7, #12]
   1bc64:	2164      	movs	r1, #100	; 0x64
   1bc66:	434b      	muls	r3, r1
   1bc68:	18d3      	adds	r3, r2, r3
   1bc6a:	3360      	adds	r3, #96	; 0x60
   1bc6c:	681b      	ldr	r3, [r3, #0]
   1bc6e:	2b00      	cmp	r3, #0
   1bc70:	d10f      	bne.n	1bc92 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   1bc72:	4a0d      	ldr	r2, [pc, #52]	; (1bca8 <allocateClient+0x5c>)
   1bc74:	68fb      	ldr	r3, [r7, #12]
   1bc76:	2164      	movs	r1, #100	; 0x64
   1bc78:	434b      	muls	r3, r1
   1bc7a:	18d3      	adds	r3, r2, r3
   1bc7c:	3360      	adds	r3, #96	; 0x60
   1bc7e:	687a      	ldr	r2, [r7, #4]
   1bc80:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   1bc82:	68fb      	ldr	r3, [r7, #12]
   1bc84:	2264      	movs	r2, #100	; 0x64
   1bc86:	435a      	muls	r2, r3
   1bc88:	4b07      	ldr	r3, [pc, #28]	; (1bca8 <allocateClient+0x5c>)
   1bc8a:	18d2      	adds	r2, r2, r3
   1bc8c:	687b      	ldr	r3, [r7, #4]
   1bc8e:	61da      	str	r2, [r3, #28]
			return;
   1bc90:	e007      	b.n	1bca2 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1bc92:	68fb      	ldr	r3, [r7, #12]
   1bc94:	3301      	adds	r3, #1
   1bc96:	60fb      	str	r3, [r7, #12]
   1bc98:	68fb      	ldr	r3, [r7, #12]
   1bc9a:	2b06      	cmp	r3, #6
   1bc9c:	d9e0      	bls.n	1bc60 <allocateClient+0x14>
   1bc9e:	e000      	b.n	1bca2 <allocateClient+0x56>
		return;
   1bca0:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   1bca2:	46bd      	mov	sp, r7
   1bca4:	b004      	add	sp, #16
   1bca6:	bd80      	pop	{r7, pc}
   1bca8:	20003ec0 	.word	0x20003ec0

0001bcac <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   1bcac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bcae:	b089      	sub	sp, #36	; 0x24
   1bcb0:	af04      	add	r7, sp, #16
   1bcb2:	6078      	str	r0, [r7, #4]
   1bcb4:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   1bcb6:	687b      	ldr	r3, [r7, #4]
   1bcb8:	2b00      	cmp	r3, #0
   1bcba:	d00a      	beq.n	1bcd2 <mqtt_init+0x26>
   1bcbc:	683b      	ldr	r3, [r7, #0]
   1bcbe:	2b00      	cmp	r3, #0
   1bcc0:	d007      	beq.n	1bcd2 <mqtt_init+0x26>
   1bcc2:	683b      	ldr	r3, [r7, #0]
   1bcc4:	691b      	ldr	r3, [r3, #16]
   1bcc6:	2b00      	cmp	r3, #0
   1bcc8:	d003      	beq.n	1bcd2 <mqtt_init+0x26>
   1bcca:	683b      	ldr	r3, [r7, #0]
   1bccc:	689b      	ldr	r3, [r3, #8]
   1bcce:	2b00      	cmp	r3, #0
   1bcd0:	d102      	bne.n	1bcd8 <mqtt_init+0x2c>
		return FAILURE;
   1bcd2:	2301      	movs	r3, #1
   1bcd4:	425b      	negs	r3, r3
   1bcd6:	e034      	b.n	1bd42 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   1bcd8:	683b      	ldr	r3, [r7, #0]
   1bcda:	889b      	ldrh	r3, [r3, #4]
   1bcdc:	001a      	movs	r2, r3
   1bcde:	23fa      	movs	r3, #250	; 0xfa
   1bce0:	009b      	lsls	r3, r3, #2
   1bce2:	4353      	muls	r3, r2
   1bce4:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   1bce6:	687b      	ldr	r3, [r7, #4]
   1bce8:	3320      	adds	r3, #32
   1bcea:	0018      	movs	r0, r3
   1bcec:	4b17      	ldr	r3, [pc, #92]	; (1bd4c <mqtt_init+0xa0>)
   1bcee:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   1bcf0:	687b      	ldr	r3, [r7, #4]
   1bcf2:	3304      	adds	r3, #4
   1bcf4:	6839      	ldr	r1, [r7, #0]
   1bcf6:	2218      	movs	r2, #24
   1bcf8:	0018      	movs	r0, r3
   1bcfa:	4b15      	ldr	r3, [pc, #84]	; (1bd50 <mqtt_init+0xa4>)
   1bcfc:	4798      	blx	r3
	allocateClient(module);
   1bcfe:	687b      	ldr	r3, [r7, #4]
   1bd00:	0018      	movs	r0, r3
   1bd02:	4b14      	ldr	r3, [pc, #80]	; (1bd54 <mqtt_init+0xa8>)
   1bd04:	4798      	blx	r3
	
	if(module->client)
   1bd06:	687b      	ldr	r3, [r7, #4]
   1bd08:	69db      	ldr	r3, [r3, #28]
   1bd0a:	2b00      	cmp	r3, #0
   1bd0c:	d017      	beq.n	1bd3e <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   1bd0e:	687b      	ldr	r3, [r7, #4]
   1bd10:	69d8      	ldr	r0, [r3, #28]
   1bd12:	687b      	ldr	r3, [r7, #4]
   1bd14:	3320      	adds	r3, #32
   1bd16:	001c      	movs	r4, r3
   1bd18:	683b      	ldr	r3, [r7, #0]
   1bd1a:	691e      	ldr	r6, [r3, #16]
   1bd1c:	683b      	ldr	r3, [r7, #0]
   1bd1e:	695a      	ldr	r2, [r3, #20]
   1bd20:	683b      	ldr	r3, [r7, #0]
   1bd22:	6899      	ldr	r1, [r3, #8]
   1bd24:	683b      	ldr	r3, [r7, #0]
   1bd26:	68db      	ldr	r3, [r3, #12]
   1bd28:	68fd      	ldr	r5, [r7, #12]
   1bd2a:	9302      	str	r3, [sp, #8]
   1bd2c:	9101      	str	r1, [sp, #4]
   1bd2e:	9200      	str	r2, [sp, #0]
   1bd30:	0033      	movs	r3, r6
   1bd32:	002a      	movs	r2, r5
   1bd34:	0021      	movs	r1, r4
   1bd36:	4c08      	ldr	r4, [pc, #32]	; (1bd58 <mqtt_init+0xac>)
   1bd38:	47a0      	blx	r4
		return SUCCESS;
   1bd3a:	2300      	movs	r3, #0
   1bd3c:	e001      	b.n	1bd42 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   1bd3e:	2301      	movs	r3, #1
   1bd40:	425b      	negs	r3, r3
}
   1bd42:	0018      	movs	r0, r3
   1bd44:	46bd      	mov	sp, r7
   1bd46:	b005      	add	sp, #20
   1bd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bd4a:	46c0      	nop			; (mov r8, r8)
   1bd4c:	0001bb05 	.word	0x0001bb05
   1bd50:	00020ee9 	.word	0x00020ee9
   1bd54:	0001bc4d 	.word	0x0001bc4d
   1bd58:	0001ab7d 	.word	0x0001ab7d

0001bd5c <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   1bd5c:	b580      	push	{r7, lr}
   1bd5e:	b082      	sub	sp, #8
   1bd60:	af00      	add	r7, sp, #0
   1bd62:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   1bd64:	687b      	ldr	r3, [r7, #4]
   1bd66:	4a0c      	ldr	r2, [pc, #48]	; (1bd98 <mqtt_get_config_defaults+0x3c>)
   1bd68:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   1bd6a:	687b      	ldr	r3, [r7, #4]
   1bd6c:	2200      	movs	r2, #0
   1bd6e:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   1bd70:	687b      	ldr	r3, [r7, #4]
   1bd72:	223c      	movs	r2, #60	; 0x3c
   1bd74:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   1bd76:	687b      	ldr	r3, [r7, #4]
   1bd78:	2200      	movs	r2, #0
   1bd7a:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   1bd7c:	687b      	ldr	r3, [r7, #4]
   1bd7e:	2200      	movs	r2, #0
   1bd80:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   1bd82:	687b      	ldr	r3, [r7, #4]
   1bd84:	2200      	movs	r2, #0
   1bd86:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   1bd88:	687b      	ldr	r3, [r7, #4]
   1bd8a:	2200      	movs	r2, #0
   1bd8c:	615a      	str	r2, [r3, #20]
}
   1bd8e:	46c0      	nop			; (mov r8, r8)
   1bd90:	46bd      	mov	sp, r7
   1bd92:	b002      	add	sp, #8
   1bd94:	bd80      	pop	{r7, pc}
   1bd96:	46c0      	nop			; (mov r8, r8)
   1bd98:	0000075b 	.word	0x0000075b

0001bd9c <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   1bd9c:	b580      	push	{r7, lr}
   1bd9e:	b082      	sub	sp, #8
   1bda0:	af00      	add	r7, sp, #0
   1bda2:	6078      	str	r0, [r7, #4]
   1bda4:	6039      	str	r1, [r7, #0]
	if(module)
   1bda6:	687b      	ldr	r3, [r7, #4]
   1bda8:	2b00      	cmp	r3, #0
   1bdaa:	d004      	beq.n	1bdb6 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   1bdac:	687b      	ldr	r3, [r7, #4]
   1bdae:	683a      	ldr	r2, [r7, #0]
   1bdb0:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   1bdb2:	2300      	movs	r3, #0
   1bdb4:	e001      	b.n	1bdba <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   1bdb6:	2301      	movs	r3, #1
   1bdb8:	425b      	negs	r3, r3
}
   1bdba:	0018      	movs	r0, r3
   1bdbc:	46bd      	mov	sp, r7
   1bdbe:	b002      	add	sp, #8
   1bdc0:	bd80      	pop	{r7, pc}
	...

0001bdc4 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1bdc4:	b580      	push	{r7, lr}
   1bdc6:	b082      	sub	sp, #8
   1bdc8:	af00      	add	r7, sp, #0
   1bdca:	603a      	str	r2, [r7, #0]
   1bdcc:	1dfb      	adds	r3, r7, #7
   1bdce:	1c02      	adds	r2, r0, #0
   1bdd0:	701a      	strb	r2, [r3, #0]
   1bdd2:	1dbb      	adds	r3, r7, #6
   1bdd4:	1c0a      	adds	r2, r1, #0
   1bdd6:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   1bdd8:	683a      	ldr	r2, [r7, #0]
   1bdda:	1dbb      	adds	r3, r7, #6
   1bddc:	7819      	ldrb	r1, [r3, #0]
   1bdde:	1dfb      	adds	r3, r7, #7
   1bde0:	781b      	ldrb	r3, [r3, #0]
   1bde2:	b25b      	sxtb	r3, r3
   1bde4:	0018      	movs	r0, r3
   1bde6:	4b03      	ldr	r3, [pc, #12]	; (1bdf4 <mqtt_socket_event_handler+0x30>)
   1bde8:	4798      	blx	r3
}
   1bdea:	46c0      	nop			; (mov r8, r8)
   1bdec:	46bd      	mov	sp, r7
   1bdee:	b002      	add	sp, #8
   1bdf0:	bd80      	pop	{r7, pc}
   1bdf2:	46c0      	nop			; (mov r8, r8)
   1bdf4:	0001b841 	.word	0x0001b841

0001bdf8 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   1bdf8:	b580      	push	{r7, lr}
   1bdfa:	b082      	sub	sp, #8
   1bdfc:	af00      	add	r7, sp, #0
   1bdfe:	6078      	str	r0, [r7, #4]
   1be00:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   1be02:	683a      	ldr	r2, [r7, #0]
   1be04:	687b      	ldr	r3, [r7, #4]
   1be06:	0011      	movs	r1, r2
   1be08:	0018      	movs	r0, r3
   1be0a:	4b03      	ldr	r3, [pc, #12]	; (1be18 <mqtt_socket_resolve_handler+0x20>)
   1be0c:	4798      	blx	r3
}
   1be0e:	46c0      	nop			; (mov r8, r8)
   1be10:	46bd      	mov	sp, r7
   1be12:	b002      	add	sp, #8
   1be14:	bd80      	pop	{r7, pc}
   1be16:	46c0      	nop			; (mov r8, r8)
   1be18:	0001b7f1 	.word	0x0001b7f1

0001be1c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   1be1c:	b590      	push	{r4, r7, lr}
   1be1e:	b085      	sub	sp, #20
   1be20:	af00      	add	r7, sp, #0
   1be22:	6078      	str	r0, [r7, #4]
   1be24:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   1be26:	687b      	ldr	r3, [r7, #4]
   1be28:	3320      	adds	r3, #32
   1be2a:	0018      	movs	r0, r3
   1be2c:	687b      	ldr	r3, [r7, #4]
   1be2e:	889b      	ldrh	r3, [r3, #4]
   1be30:	001a      	movs	r2, r3
   1be32:	687b      	ldr	r3, [r7, #4]
   1be34:	799b      	ldrb	r3, [r3, #6]
   1be36:	6839      	ldr	r1, [r7, #0]
   1be38:	4c09      	ldr	r4, [pc, #36]	; (1be60 <mqtt_connect+0x44>)
   1be3a:	47a0      	blx	r4
   1be3c:	0003      	movs	r3, r0
   1be3e:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   1be40:	687b      	ldr	r3, [r7, #4]
   1be42:	681b      	ldr	r3, [r3, #0]
   1be44:	2b00      	cmp	r3, #0
   1be46:	d006      	beq.n	1be56 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   1be48:	687b      	ldr	r3, [r7, #4]
   1be4a:	681b      	ldr	r3, [r3, #0]
   1be4c:	220c      	movs	r2, #12
   1be4e:	18ba      	adds	r2, r7, r2
   1be50:	6878      	ldr	r0, [r7, #4]
   1be52:	2100      	movs	r1, #0
   1be54:	4798      	blx	r3
	return connResult.sock_connected.result;
   1be56:	68fb      	ldr	r3, [r7, #12]
}
   1be58:	0018      	movs	r0, r3
   1be5a:	46bd      	mov	sp, r7
   1be5c:	b005      	add	sp, #20
   1be5e:	bd90      	pop	{r4, r7, pc}
   1be60:	0001bb3d 	.word	0x0001bb3d

0001be64 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   1be64:	b580      	push	{r7, lr}
   1be66:	b09c      	sub	sp, #112	; 0x70
   1be68:	af00      	add	r7, sp, #0
   1be6a:	60f8      	str	r0, [r7, #12]
   1be6c:	607a      	str	r2, [r7, #4]
   1be6e:	603b      	str	r3, [r7, #0]
   1be70:	230b      	movs	r3, #11
   1be72:	18fb      	adds	r3, r7, r3
   1be74:	1c0a      	adds	r2, r1, #0
   1be76:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   1be78:	2310      	movs	r3, #16
   1be7a:	18fa      	adds	r2, r7, r3
   1be7c:	4b31      	ldr	r3, [pc, #196]	; (1bf44 <mqtt_connect_broker+0xe0>)
   1be7e:	0010      	movs	r0, r2
   1be80:	0019      	movs	r1, r3
   1be82:	2358      	movs	r3, #88	; 0x58
   1be84:	001a      	movs	r2, r3
   1be86:	4b30      	ldr	r3, [pc, #192]	; (1bf48 <mqtt_connect_broker+0xe4>)
   1be88:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   1be8a:	2310      	movs	r3, #16
   1be8c:	18fb      	adds	r3, r7, r3
   1be8e:	2204      	movs	r2, #4
   1be90:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   1be92:	2310      	movs	r3, #16
   1be94:	18fb      	adds	r3, r7, r3
   1be96:	6fba      	ldr	r2, [r7, #120]	; 0x78
   1be98:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   1be9a:	2310      	movs	r3, #16
   1be9c:	18fb      	adds	r3, r7, r3
   1be9e:	687a      	ldr	r2, [r7, #4]
   1bea0:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   1bea2:	2310      	movs	r3, #16
   1bea4:	18fb      	adds	r3, r7, r3
   1bea6:	683a      	ldr	r2, [r7, #0]
   1bea8:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   1beaa:	2310      	movs	r3, #16
   1beac:	18fb      	adds	r3, r7, r3
   1beae:	220b      	movs	r2, #11
   1beb0:	18ba      	adds	r2, r7, r2
   1beb2:	7812      	ldrb	r2, [r2, #0]
   1beb4:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   1beb6:	2310      	movs	r3, #16
   1beb8:	18fb      	adds	r3, r7, r3
   1beba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1bebc:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   1bebe:	2310      	movs	r3, #16
   1bec0:	18fb      	adds	r3, r7, r3
   1bec2:	2280      	movs	r2, #128	; 0x80
   1bec4:	18ba      	adds	r2, r7, r2
   1bec6:	6812      	ldr	r2, [r2, #0]
   1bec8:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   1beca:	2310      	movs	r3, #16
   1becc:	18fb      	adds	r3, r7, r3
   1bece:	228c      	movs	r2, #140	; 0x8c
   1bed0:	18ba      	adds	r2, r7, r2
   1bed2:	213c      	movs	r1, #60	; 0x3c
   1bed4:	7812      	ldrb	r2, [r2, #0]
   1bed6:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   1bed8:	2310      	movs	r3, #16
   1beda:	18fb      	adds	r3, r7, r3
   1bedc:	2288      	movs	r2, #136	; 0x88
   1bede:	18ba      	adds	r2, r7, r2
   1bee0:	213d      	movs	r1, #61	; 0x3d
   1bee2:	7812      	ldrb	r2, [r2, #0]
   1bee4:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   1bee6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1bee8:	2b00      	cmp	r3, #0
   1beea:	d008      	beq.n	1befe <mqtt_connect_broker+0x9a>
   1beec:	2380      	movs	r3, #128	; 0x80
   1beee:	18fb      	adds	r3, r7, r3
   1bef0:	681b      	ldr	r3, [r3, #0]
   1bef2:	2b00      	cmp	r3, #0
   1bef4:	d003      	beq.n	1befe <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   1bef6:	2310      	movs	r3, #16
   1bef8:	18fb      	adds	r3, r7, r3
   1befa:	2201      	movs	r2, #1
   1befc:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   1befe:	68fb      	ldr	r3, [r7, #12]
   1bf00:	69db      	ldr	r3, [r3, #28]
   1bf02:	2210      	movs	r2, #16
   1bf04:	18ba      	adds	r2, r7, r2
   1bf06:	0011      	movs	r1, r2
   1bf08:	0018      	movs	r0, r3
   1bf0a:	4b10      	ldr	r3, [pc, #64]	; (1bf4c <mqtt_connect_broker+0xe8>)
   1bf0c:	4798      	blx	r3
   1bf0e:	0003      	movs	r3, r0
   1bf10:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   1bf12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1bf14:	b2da      	uxtb	r2, r3
   1bf16:	2368      	movs	r3, #104	; 0x68
   1bf18:	18fb      	adds	r3, r7, r3
   1bf1a:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   1bf1c:	68fb      	ldr	r3, [r7, #12]
   1bf1e:	681b      	ldr	r3, [r3, #0]
   1bf20:	2b00      	cmp	r3, #0
   1bf22:	d006      	beq.n	1bf32 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   1bf24:	68fb      	ldr	r3, [r7, #12]
   1bf26:	681b      	ldr	r3, [r3, #0]
   1bf28:	2268      	movs	r2, #104	; 0x68
   1bf2a:	18ba      	adds	r2, r7, r2
   1bf2c:	68f8      	ldr	r0, [r7, #12]
   1bf2e:	2101      	movs	r1, #1
   1bf30:	4798      	blx	r3
	
	module->isConnected = true;
   1bf32:	68fb      	ldr	r3, [r7, #12]
   1bf34:	2234      	movs	r2, #52	; 0x34
   1bf36:	2101      	movs	r1, #1
   1bf38:	5499      	strb	r1, [r3, r2]
	return rc;
   1bf3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   1bf3c:	0018      	movs	r0, r3
   1bf3e:	46bd      	mov	sp, r7
   1bf40:	b01c      	add	sp, #112	; 0x70
   1bf42:	bd80      	pop	{r7, pc}
   1bf44:	00025e44 	.word	0x00025e44
   1bf48:	00020ee9 	.word	0x00020ee9
   1bf4c:	0001b28d 	.word	0x0001b28d

0001bf50 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   1bf50:	b580      	push	{r7, lr}
   1bf52:	b084      	sub	sp, #16
   1bf54:	af00      	add	r7, sp, #0
   1bf56:	6078      	str	r0, [r7, #4]
   1bf58:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   1bf5a:	687b      	ldr	r3, [r7, #4]
   1bf5c:	69db      	ldr	r3, [r3, #28]
   1bf5e:	0018      	movs	r0, r3
   1bf60:	4b0c      	ldr	r3, [pc, #48]	; (1bf94 <mqtt_disconnect+0x44>)
   1bf62:	4798      	blx	r3
   1bf64:	0003      	movs	r3, r0
   1bf66:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   1bf68:	68fb      	ldr	r3, [r7, #12]
   1bf6a:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   1bf6c:	687b      	ldr	r3, [r7, #4]
   1bf6e:	681b      	ldr	r3, [r3, #0]
   1bf70:	2b00      	cmp	r3, #0
   1bf72:	d006      	beq.n	1bf82 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   1bf74:	687b      	ldr	r3, [r7, #4]
   1bf76:	681b      	ldr	r3, [r3, #0]
   1bf78:	2208      	movs	r2, #8
   1bf7a:	18ba      	adds	r2, r7, r2
   1bf7c:	6878      	ldr	r0, [r7, #4]
   1bf7e:	2105      	movs	r1, #5
   1bf80:	4798      	blx	r3
	
	module->isConnected = false;
   1bf82:	687b      	ldr	r3, [r7, #4]
   1bf84:	2234      	movs	r2, #52	; 0x34
   1bf86:	2100      	movs	r1, #0
   1bf88:	5499      	strb	r1, [r3, r2]
	return rc;
   1bf8a:	68fb      	ldr	r3, [r7, #12]
}
   1bf8c:	0018      	movs	r0, r3
   1bf8e:	46bd      	mov	sp, r7
   1bf90:	b004      	add	sp, #16
   1bf92:	bd80      	pop	{r7, pc}
   1bf94:	0001b719 	.word	0x0001b719

0001bf98 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   1bf98:	b580      	push	{r7, lr}
   1bf9a:	b08a      	sub	sp, #40	; 0x28
   1bf9c:	af00      	add	r7, sp, #0
   1bf9e:	60f8      	str	r0, [r7, #12]
   1bfa0:	60b9      	str	r1, [r7, #8]
   1bfa2:	607a      	str	r2, [r7, #4]
   1bfa4:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   1bfa6:	2314      	movs	r3, #20
   1bfa8:	18fb      	adds	r3, r7, r3
   1bfaa:	2230      	movs	r2, #48	; 0x30
   1bfac:	18ba      	adds	r2, r7, r2
   1bfae:	7812      	ldrb	r2, [r2, #0]
   1bfb0:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   1bfb2:	2314      	movs	r3, #20
   1bfb4:	18fb      	adds	r3, r7, r3
   1bfb6:	687a      	ldr	r2, [r7, #4]
   1bfb8:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   1bfba:	2314      	movs	r3, #20
   1bfbc:	18fb      	adds	r3, r7, r3
   1bfbe:	683a      	ldr	r2, [r7, #0]
   1bfc0:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   1bfc2:	2314      	movs	r3, #20
   1bfc4:	18fb      	adds	r3, r7, r3
   1bfc6:	2234      	movs	r2, #52	; 0x34
   1bfc8:	18ba      	adds	r2, r7, r2
   1bfca:	7812      	ldrb	r2, [r2, #0]
   1bfcc:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   1bfce:	68fb      	ldr	r3, [r7, #12]
   1bfd0:	69db      	ldr	r3, [r3, #28]
   1bfd2:	2214      	movs	r2, #20
   1bfd4:	18ba      	adds	r2, r7, r2
   1bfd6:	68b9      	ldr	r1, [r7, #8]
   1bfd8:	0018      	movs	r0, r3
   1bfda:	4b09      	ldr	r3, [pc, #36]	; (1c000 <mqtt_publish+0x68>)
   1bfdc:	4798      	blx	r3
   1bfde:	0003      	movs	r3, r0
   1bfe0:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   1bfe2:	68fb      	ldr	r3, [r7, #12]
   1bfe4:	681b      	ldr	r3, [r3, #0]
   1bfe6:	2b00      	cmp	r3, #0
   1bfe8:	d005      	beq.n	1bff6 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   1bfea:	68fb      	ldr	r3, [r7, #12]
   1bfec:	681b      	ldr	r3, [r3, #0]
   1bfee:	68f8      	ldr	r0, [r7, #12]
   1bff0:	2200      	movs	r2, #0
   1bff2:	2102      	movs	r1, #2
   1bff4:	4798      	blx	r3
	
	return rc;
   1bff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1bff8:	0018      	movs	r0, r3
   1bffa:	46bd      	mov	sp, r7
   1bffc:	b00a      	add	sp, #40	; 0x28
   1bffe:	bd80      	pop	{r7, pc}
   1c000:	0001b559 	.word	0x0001b559

0001c004 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   1c004:	b590      	push	{r4, r7, lr}
   1c006:	b087      	sub	sp, #28
   1c008:	af00      	add	r7, sp, #0
   1c00a:	60f8      	str	r0, [r7, #12]
   1c00c:	60b9      	str	r1, [r7, #8]
   1c00e:	603b      	str	r3, [r7, #0]
   1c010:	1dfb      	adds	r3, r7, #7
   1c012:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   1c014:	68fb      	ldr	r3, [r7, #12]
   1c016:	69d8      	ldr	r0, [r3, #28]
   1c018:	683c      	ldr	r4, [r7, #0]
   1c01a:	1dfb      	adds	r3, r7, #7
   1c01c:	781a      	ldrb	r2, [r3, #0]
   1c01e:	68b9      	ldr	r1, [r7, #8]
   1c020:	0023      	movs	r3, r4
   1c022:	4c09      	ldr	r4, [pc, #36]	; (1c048 <mqtt_subscribe+0x44>)
   1c024:	47a0      	blx	r4
   1c026:	0003      	movs	r3, r0
   1c028:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   1c02a:	68fb      	ldr	r3, [r7, #12]
   1c02c:	681b      	ldr	r3, [r3, #0]
   1c02e:	2b00      	cmp	r3, #0
   1c030:	d005      	beq.n	1c03e <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   1c032:	68fb      	ldr	r3, [r7, #12]
   1c034:	681b      	ldr	r3, [r3, #0]
   1c036:	68f8      	ldr	r0, [r7, #12]
   1c038:	2200      	movs	r2, #0
   1c03a:	2103      	movs	r1, #3
   1c03c:	4798      	blx	r3
	
	return rc;
   1c03e:	697b      	ldr	r3, [r7, #20]
}
   1c040:	0018      	movs	r0, r3
   1c042:	46bd      	mov	sp, r7
   1c044:	b007      	add	sp, #28
   1c046:	bd90      	pop	{r4, r7, pc}
   1c048:	0001b3cd 	.word	0x0001b3cd

0001c04c <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   1c04c:	b580      	push	{r7, lr}
   1c04e:	b082      	sub	sp, #8
   1c050:	af00      	add	r7, sp, #0
   1c052:	6078      	str	r0, [r7, #4]
   1c054:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   1c056:	687b      	ldr	r3, [r7, #4]
   1c058:	69db      	ldr	r3, [r3, #28]
   1c05a:	683a      	ldr	r2, [r7, #0]
   1c05c:	0011      	movs	r1, r2
   1c05e:	0018      	movs	r0, r3
   1c060:	4b03      	ldr	r3, [pc, #12]	; (1c070 <mqtt_yield+0x24>)
   1c062:	4798      	blx	r3
   1c064:	0003      	movs	r3, r0
   1c066:	0018      	movs	r0, r3
   1c068:	46bd      	mov	sp, r7
   1c06a:	b002      	add	sp, #8
   1c06c:	bd80      	pop	{r7, pc}
   1c06e:	46c0      	nop			; (mov r8, r8)
   1c070:	0001b1d5 	.word	0x0001b1d5

0001c074 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   1c074:	b590      	push	{r4, r7, lr}
   1c076:	b085      	sub	sp, #20
   1c078:	af00      	add	r7, sp, #0
   1c07a:	6078      	str	r0, [r7, #4]
	int len = 0;
   1c07c:	2300      	movs	r3, #0
   1c07e:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   1c080:	687b      	ldr	r3, [r7, #4]
   1c082:	7a1b      	ldrb	r3, [r3, #8]
   1c084:	2b03      	cmp	r3, #3
   1c086:	d102      	bne.n	1c08e <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   1c088:	230c      	movs	r3, #12
   1c08a:	60fb      	str	r3, [r7, #12]
   1c08c:	e005      	b.n	1c09a <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   1c08e:	687b      	ldr	r3, [r7, #4]
   1c090:	7a1b      	ldrb	r3, [r3, #8]
   1c092:	2b04      	cmp	r3, #4
   1c094:	d101      	bne.n	1c09a <MQTTSerialize_connectLength+0x26>
		len = 10;
   1c096:	230a      	movs	r3, #10
   1c098:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   1c09a:	687b      	ldr	r3, [r7, #4]
   1c09c:	68d8      	ldr	r0, [r3, #12]
   1c09e:	6919      	ldr	r1, [r3, #16]
   1c0a0:	695a      	ldr	r2, [r3, #20]
   1c0a2:	4b25      	ldr	r3, [pc, #148]	; (1c138 <MQTTSerialize_connectLength+0xc4>)
   1c0a4:	4798      	blx	r3
   1c0a6:	0003      	movs	r3, r0
   1c0a8:	3302      	adds	r3, #2
   1c0aa:	68fa      	ldr	r2, [r7, #12]
   1c0ac:	18d3      	adds	r3, r2, r3
   1c0ae:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   1c0b0:	687b      	ldr	r3, [r7, #4]
   1c0b2:	7edb      	ldrb	r3, [r3, #27]
   1c0b4:	2b00      	cmp	r3, #0
   1c0b6:	d013      	beq.n	1c0e0 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   1c0b8:	687b      	ldr	r3, [r7, #4]
   1c0ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1c0bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1c0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c0c0:	4b1d      	ldr	r3, [pc, #116]	; (1c138 <MQTTSerialize_connectLength+0xc4>)
   1c0c2:	4798      	blx	r3
   1c0c4:	0003      	movs	r3, r0
   1c0c6:	1c9c      	adds	r4, r3, #2
   1c0c8:	687b      	ldr	r3, [r7, #4]
   1c0ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c0cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1c0ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c0d0:	4b19      	ldr	r3, [pc, #100]	; (1c138 <MQTTSerialize_connectLength+0xc4>)
   1c0d2:	4798      	blx	r3
   1c0d4:	0003      	movs	r3, r0
   1c0d6:	18e3      	adds	r3, r4, r3
   1c0d8:	3302      	adds	r3, #2
   1c0da:	68fa      	ldr	r2, [r7, #12]
   1c0dc:	18d3      	adds	r3, r2, r3
   1c0de:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   1c0e0:	687b      	ldr	r3, [r7, #4]
   1c0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c0e4:	2b00      	cmp	r3, #0
   1c0e6:	d103      	bne.n	1c0f0 <MQTTSerialize_connectLength+0x7c>
   1c0e8:	687b      	ldr	r3, [r7, #4]
   1c0ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c0ec:	2b00      	cmp	r3, #0
   1c0ee:	d00a      	beq.n	1c106 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   1c0f0:	687b      	ldr	r3, [r7, #4]
   1c0f2:	6c18      	ldr	r0, [r3, #64]	; 0x40
   1c0f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1c0f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c0f8:	4b0f      	ldr	r3, [pc, #60]	; (1c138 <MQTTSerialize_connectLength+0xc4>)
   1c0fa:	4798      	blx	r3
   1c0fc:	0003      	movs	r3, r0
   1c0fe:	3302      	adds	r3, #2
   1c100:	68fa      	ldr	r2, [r7, #12]
   1c102:	18d3      	adds	r3, r2, r3
   1c104:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   1c106:	687b      	ldr	r3, [r7, #4]
   1c108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c10a:	2b00      	cmp	r3, #0
   1c10c:	d103      	bne.n	1c116 <MQTTSerialize_connectLength+0xa2>
   1c10e:	687b      	ldr	r3, [r7, #4]
   1c110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1c112:	2b00      	cmp	r3, #0
   1c114:	d00a      	beq.n	1c12c <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   1c116:	687b      	ldr	r3, [r7, #4]
   1c118:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   1c11a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   1c11c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1c11e:	4b06      	ldr	r3, [pc, #24]	; (1c138 <MQTTSerialize_connectLength+0xc4>)
   1c120:	4798      	blx	r3
   1c122:	0003      	movs	r3, r0
   1c124:	3302      	adds	r3, #2
   1c126:	68fa      	ldr	r2, [r7, #12]
   1c128:	18d3      	adds	r3, r2, r3
   1c12a:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   1c12c:	68fb      	ldr	r3, [r7, #12]
}
   1c12e:	0018      	movs	r0, r3
   1c130:	46bd      	mov	sp, r7
   1c132:	b005      	add	sp, #20
   1c134:	bd90      	pop	{r4, r7, pc}
   1c136:	46c0      	nop			; (mov r8, r8)
   1c138:	0001cae5 	.word	0x0001cae5

0001c13c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   1c13c:	b590      	push	{r4, r7, lr}
   1c13e:	b08b      	sub	sp, #44	; 0x2c
   1c140:	af00      	add	r7, sp, #0
   1c142:	60f8      	str	r0, [r7, #12]
   1c144:	60b9      	str	r1, [r7, #8]
   1c146:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   1c148:	68fb      	ldr	r3, [r7, #12]
   1c14a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   1c14c:	2300      	movs	r3, #0
   1c14e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   1c150:	2300      	movs	r3, #0
   1c152:	617b      	str	r3, [r7, #20]
	int len = 0;
   1c154:	2300      	movs	r3, #0
   1c156:	623b      	str	r3, [r7, #32]
	int rc = -1;
   1c158:	2301      	movs	r3, #1
   1c15a:	425b      	negs	r3, r3
   1c15c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   1c15e:	687b      	ldr	r3, [r7, #4]
   1c160:	0018      	movs	r0, r3
   1c162:	4b8c      	ldr	r3, [pc, #560]	; (1c394 <MQTTSerialize_connect+0x258>)
   1c164:	4798      	blx	r3
   1c166:	0003      	movs	r3, r0
   1c168:	623b      	str	r3, [r7, #32]
   1c16a:	6a3b      	ldr	r3, [r7, #32]
   1c16c:	0018      	movs	r0, r3
   1c16e:	4b8a      	ldr	r3, [pc, #552]	; (1c398 <MQTTSerialize_connect+0x25c>)
   1c170:	4798      	blx	r3
   1c172:	0002      	movs	r2, r0
   1c174:	68bb      	ldr	r3, [r7, #8]
   1c176:	429a      	cmp	r2, r3
   1c178:	dd03      	ble.n	1c182 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1c17a:	2302      	movs	r3, #2
   1c17c:	425b      	negs	r3, r3
   1c17e:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1c180:	e103      	b.n	1c38a <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   1c182:	2318      	movs	r3, #24
   1c184:	18fb      	adds	r3, r7, r3
   1c186:	2200      	movs	r2, #0
   1c188:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   1c18a:	2318      	movs	r3, #24
   1c18c:	18fb      	adds	r3, r7, r3
   1c18e:	781a      	ldrb	r2, [r3, #0]
   1c190:	210f      	movs	r1, #15
   1c192:	400a      	ands	r2, r1
   1c194:	1c11      	adds	r1, r2, #0
   1c196:	2210      	movs	r2, #16
   1c198:	430a      	orrs	r2, r1
   1c19a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1c19c:	2318      	movs	r3, #24
   1c19e:	18fb      	adds	r3, r7, r3
   1c1a0:	781a      	ldrb	r2, [r3, #0]
   1c1a2:	231c      	movs	r3, #28
   1c1a4:	18fb      	adds	r3, r7, r3
   1c1a6:	0011      	movs	r1, r2
   1c1a8:	0018      	movs	r0, r3
   1c1aa:	4b7c      	ldr	r3, [pc, #496]	; (1c39c <MQTTSerialize_connect+0x260>)
   1c1ac:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   1c1ae:	69fb      	ldr	r3, [r7, #28]
   1c1b0:	6a3a      	ldr	r2, [r7, #32]
   1c1b2:	0011      	movs	r1, r2
   1c1b4:	0018      	movs	r0, r3
   1c1b6:	4b7a      	ldr	r3, [pc, #488]	; (1c3a0 <MQTTSerialize_connect+0x264>)
   1c1b8:	4798      	blx	r3
   1c1ba:	0002      	movs	r2, r0
   1c1bc:	69fb      	ldr	r3, [r7, #28]
   1c1be:	189b      	adds	r3, r3, r2
   1c1c0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   1c1c2:	687b      	ldr	r3, [r7, #4]
   1c1c4:	7a1b      	ldrb	r3, [r3, #8]
   1c1c6:	2b04      	cmp	r3, #4
   1c1c8:	d10d      	bne.n	1c1e6 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   1c1ca:	4a76      	ldr	r2, [pc, #472]	; (1c3a4 <MQTTSerialize_connect+0x268>)
   1c1cc:	231c      	movs	r3, #28
   1c1ce:	18fb      	adds	r3, r7, r3
   1c1d0:	0011      	movs	r1, r2
   1c1d2:	0018      	movs	r0, r3
   1c1d4:	4b74      	ldr	r3, [pc, #464]	; (1c3a8 <MQTTSerialize_connect+0x26c>)
   1c1d6:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   1c1d8:	231c      	movs	r3, #28
   1c1da:	18fb      	adds	r3, r7, r3
   1c1dc:	2104      	movs	r1, #4
   1c1de:	0018      	movs	r0, r3
   1c1e0:	4b6e      	ldr	r3, [pc, #440]	; (1c39c <MQTTSerialize_connect+0x260>)
   1c1e2:	4798      	blx	r3
   1c1e4:	e00c      	b.n	1c200 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   1c1e6:	4a71      	ldr	r2, [pc, #452]	; (1c3ac <MQTTSerialize_connect+0x270>)
   1c1e8:	231c      	movs	r3, #28
   1c1ea:	18fb      	adds	r3, r7, r3
   1c1ec:	0011      	movs	r1, r2
   1c1ee:	0018      	movs	r0, r3
   1c1f0:	4b6d      	ldr	r3, [pc, #436]	; (1c3a8 <MQTTSerialize_connect+0x26c>)
   1c1f2:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   1c1f4:	231c      	movs	r3, #28
   1c1f6:	18fb      	adds	r3, r7, r3
   1c1f8:	2103      	movs	r1, #3
   1c1fa:	0018      	movs	r0, r3
   1c1fc:	4b67      	ldr	r3, [pc, #412]	; (1c39c <MQTTSerialize_connect+0x260>)
   1c1fe:	4798      	blx	r3
	}

	flags.all = 0;
   1c200:	2314      	movs	r3, #20
   1c202:	18fb      	adds	r3, r7, r3
   1c204:	2200      	movs	r2, #0
   1c206:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   1c208:	687b      	ldr	r3, [r7, #4]
   1c20a:	7e9b      	ldrb	r3, [r3, #26]
   1c20c:	1c1a      	adds	r2, r3, #0
   1c20e:	2301      	movs	r3, #1
   1c210:	4013      	ands	r3, r2
   1c212:	b2da      	uxtb	r2, r3
   1c214:	2314      	movs	r3, #20
   1c216:	18fb      	adds	r3, r7, r3
   1c218:	2101      	movs	r1, #1
   1c21a:	400a      	ands	r2, r1
   1c21c:	1890      	adds	r0, r2, r2
   1c21e:	781a      	ldrb	r2, [r3, #0]
   1c220:	2102      	movs	r1, #2
   1c222:	438a      	bics	r2, r1
   1c224:	1c11      	adds	r1, r2, #0
   1c226:	1c02      	adds	r2, r0, #0
   1c228:	430a      	orrs	r2, r1
   1c22a:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   1c22c:	687b      	ldr	r3, [r7, #4]
   1c22e:	7edb      	ldrb	r3, [r3, #27]
   1c230:	1e5a      	subs	r2, r3, #1
   1c232:	4193      	sbcs	r3, r2
   1c234:	b2da      	uxtb	r2, r3
   1c236:	2314      	movs	r3, #20
   1c238:	18fb      	adds	r3, r7, r3
   1c23a:	2101      	movs	r1, #1
   1c23c:	400a      	ands	r2, r1
   1c23e:	0090      	lsls	r0, r2, #2
   1c240:	781a      	ldrb	r2, [r3, #0]
   1c242:	2104      	movs	r1, #4
   1c244:	438a      	bics	r2, r1
   1c246:	1c11      	adds	r1, r2, #0
   1c248:	1c02      	adds	r2, r0, #0
   1c24a:	430a      	orrs	r2, r1
   1c24c:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   1c24e:	2314      	movs	r3, #20
   1c250:	18fb      	adds	r3, r7, r3
   1c252:	781b      	ldrb	r3, [r3, #0]
   1c254:	2204      	movs	r2, #4
   1c256:	4013      	ands	r3, r2
   1c258:	b2db      	uxtb	r3, r3
   1c25a:	2b00      	cmp	r3, #0
   1c25c:	d025      	beq.n	1c2aa <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   1c25e:	687b      	ldr	r3, [r7, #4]
   1c260:	223d      	movs	r2, #61	; 0x3d
   1c262:	5c9b      	ldrb	r3, [r3, r2]
   1c264:	1c1a      	adds	r2, r3, #0
   1c266:	2303      	movs	r3, #3
   1c268:	4013      	ands	r3, r2
   1c26a:	b2da      	uxtb	r2, r3
   1c26c:	2314      	movs	r3, #20
   1c26e:	18fb      	adds	r3, r7, r3
   1c270:	2103      	movs	r1, #3
   1c272:	400a      	ands	r2, r1
   1c274:	00d0      	lsls	r0, r2, #3
   1c276:	781a      	ldrb	r2, [r3, #0]
   1c278:	2118      	movs	r1, #24
   1c27a:	438a      	bics	r2, r1
   1c27c:	1c11      	adds	r1, r2, #0
   1c27e:	1c02      	adds	r2, r0, #0
   1c280:	430a      	orrs	r2, r1
   1c282:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   1c284:	687b      	ldr	r3, [r7, #4]
   1c286:	223c      	movs	r2, #60	; 0x3c
   1c288:	5c9b      	ldrb	r3, [r3, r2]
   1c28a:	1c1a      	adds	r2, r3, #0
   1c28c:	2301      	movs	r3, #1
   1c28e:	4013      	ands	r3, r2
   1c290:	b2da      	uxtb	r2, r3
   1c292:	2314      	movs	r3, #20
   1c294:	18fb      	adds	r3, r7, r3
   1c296:	2101      	movs	r1, #1
   1c298:	400a      	ands	r2, r1
   1c29a:	0150      	lsls	r0, r2, #5
   1c29c:	781a      	ldrb	r2, [r3, #0]
   1c29e:	2120      	movs	r1, #32
   1c2a0:	438a      	bics	r2, r1
   1c2a2:	1c11      	adds	r1, r2, #0
   1c2a4:	1c02      	adds	r2, r0, #0
   1c2a6:	430a      	orrs	r2, r1
   1c2a8:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   1c2aa:	687b      	ldr	r3, [r7, #4]
   1c2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c2ae:	2b00      	cmp	r3, #0
   1c2b0:	d103      	bne.n	1c2ba <MQTTSerialize_connect+0x17e>
   1c2b2:	687b      	ldr	r3, [r7, #4]
   1c2b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c2b6:	2b00      	cmp	r3, #0
   1c2b8:	d006      	beq.n	1c2c8 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   1c2ba:	2314      	movs	r3, #20
   1c2bc:	18fb      	adds	r3, r7, r3
   1c2be:	781a      	ldrb	r2, [r3, #0]
   1c2c0:	2180      	movs	r1, #128	; 0x80
   1c2c2:	4249      	negs	r1, r1
   1c2c4:	430a      	orrs	r2, r1
   1c2c6:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   1c2c8:	687b      	ldr	r3, [r7, #4]
   1c2ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c2cc:	2b00      	cmp	r3, #0
   1c2ce:	d103      	bne.n	1c2d8 <MQTTSerialize_connect+0x19c>
   1c2d0:	687b      	ldr	r3, [r7, #4]
   1c2d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1c2d4:	2b00      	cmp	r3, #0
   1c2d6:	d005      	beq.n	1c2e4 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   1c2d8:	2314      	movs	r3, #20
   1c2da:	18fb      	adds	r3, r7, r3
   1c2dc:	781a      	ldrb	r2, [r3, #0]
   1c2de:	2140      	movs	r1, #64	; 0x40
   1c2e0:	430a      	orrs	r2, r1
   1c2e2:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   1c2e4:	2314      	movs	r3, #20
   1c2e6:	18fb      	adds	r3, r7, r3
   1c2e8:	781a      	ldrb	r2, [r3, #0]
   1c2ea:	231c      	movs	r3, #28
   1c2ec:	18fb      	adds	r3, r7, r3
   1c2ee:	0011      	movs	r1, r2
   1c2f0:	0018      	movs	r0, r3
   1c2f2:	4b2a      	ldr	r3, [pc, #168]	; (1c39c <MQTTSerialize_connect+0x260>)
   1c2f4:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   1c2f6:	687b      	ldr	r3, [r7, #4]
   1c2f8:	8b1b      	ldrh	r3, [r3, #24]
   1c2fa:	001a      	movs	r2, r3
   1c2fc:	231c      	movs	r3, #28
   1c2fe:	18fb      	adds	r3, r7, r3
   1c300:	0011      	movs	r1, r2
   1c302:	0018      	movs	r0, r3
   1c304:	4b2a      	ldr	r3, [pc, #168]	; (1c3b0 <MQTTSerialize_connect+0x274>)
   1c306:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   1c308:	687b      	ldr	r3, [r7, #4]
   1c30a:	221c      	movs	r2, #28
   1c30c:	18b8      	adds	r0, r7, r2
   1c30e:	68d9      	ldr	r1, [r3, #12]
   1c310:	691a      	ldr	r2, [r3, #16]
   1c312:	695b      	ldr	r3, [r3, #20]
   1c314:	4c27      	ldr	r4, [pc, #156]	; (1c3b4 <MQTTSerialize_connect+0x278>)
   1c316:	47a0      	blx	r4
	if (options->willFlag)
   1c318:	687b      	ldr	r3, [r7, #4]
   1c31a:	7edb      	ldrb	r3, [r3, #27]
   1c31c:	2b00      	cmp	r3, #0
   1c31e:	d00f      	beq.n	1c340 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   1c320:	687b      	ldr	r3, [r7, #4]
   1c322:	221c      	movs	r2, #28
   1c324:	18b8      	adds	r0, r7, r2
   1c326:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1c328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c32c:	4c21      	ldr	r4, [pc, #132]	; (1c3b4 <MQTTSerialize_connect+0x278>)
   1c32e:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   1c330:	687b      	ldr	r3, [r7, #4]
   1c332:	221c      	movs	r2, #28
   1c334:	18b8      	adds	r0, r7, r2
   1c336:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1c338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1c33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c33c:	4c1d      	ldr	r4, [pc, #116]	; (1c3b4 <MQTTSerialize_connect+0x278>)
   1c33e:	47a0      	blx	r4
	}
	if (flags.bits.username)
   1c340:	2314      	movs	r3, #20
   1c342:	18fb      	adds	r3, r7, r3
   1c344:	781b      	ldrb	r3, [r3, #0]
   1c346:	227f      	movs	r2, #127	; 0x7f
   1c348:	4393      	bics	r3, r2
   1c34a:	b2db      	uxtb	r3, r3
   1c34c:	2b00      	cmp	r3, #0
   1c34e:	d007      	beq.n	1c360 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   1c350:	687b      	ldr	r3, [r7, #4]
   1c352:	221c      	movs	r2, #28
   1c354:	18b8      	adds	r0, r7, r2
   1c356:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1c358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c35a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c35c:	4c15      	ldr	r4, [pc, #84]	; (1c3b4 <MQTTSerialize_connect+0x278>)
   1c35e:	47a0      	blx	r4
	if (flags.bits.password)
   1c360:	2314      	movs	r3, #20
   1c362:	18fb      	adds	r3, r7, r3
   1c364:	781b      	ldrb	r3, [r3, #0]
   1c366:	2240      	movs	r2, #64	; 0x40
   1c368:	4013      	ands	r3, r2
   1c36a:	b2db      	uxtb	r3, r3
   1c36c:	2b00      	cmp	r3, #0
   1c36e:	d007      	beq.n	1c380 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   1c370:	687b      	ldr	r3, [r7, #4]
   1c372:	221c      	movs	r2, #28
   1c374:	18b8      	adds	r0, r7, r2
   1c376:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1c378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1c37a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1c37c:	4c0d      	ldr	r4, [pc, #52]	; (1c3b4 <MQTTSerialize_connect+0x278>)
   1c37e:	47a0      	blx	r4

	rc = ptr - buf;
   1c380:	69fb      	ldr	r3, [r7, #28]
   1c382:	001a      	movs	r2, r3
   1c384:	68fb      	ldr	r3, [r7, #12]
   1c386:	1ad3      	subs	r3, r2, r3
   1c388:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   1c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c38c:	0018      	movs	r0, r3
   1c38e:	46bd      	mov	sp, r7
   1c390:	b00b      	add	sp, #44	; 0x2c
   1c392:	bd90      	pop	{r4, r7, pc}
   1c394:	0001c075 	.word	0x0001c075
   1c398:	0001c809 	.word	0x0001c809
   1c39c:	0001c92b 	.word	0x0001c92b
   1c3a0:	0001c711 	.word	0x0001c711
   1c3a4:	00025e9c 	.word	0x00025e9c
   1c3a8:	0001c9ad 	.word	0x0001c9ad
   1c3ac:	00025ea4 	.word	0x00025ea4
   1c3b0:	0001c955 	.word	0x0001c955
   1c3b4:	0001c9fd 	.word	0x0001c9fd

0001c3b8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   1c3b8:	b580      	push	{r7, lr}
   1c3ba:	b08a      	sub	sp, #40	; 0x28
   1c3bc:	af00      	add	r7, sp, #0
   1c3be:	60f8      	str	r0, [r7, #12]
   1c3c0:	60b9      	str	r1, [r7, #8]
   1c3c2:	607a      	str	r2, [r7, #4]
   1c3c4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1c3c6:	2300      	movs	r3, #0
   1c3c8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1c3ca:	687b      	ldr	r3, [r7, #4]
   1c3cc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1c3ce:	2300      	movs	r3, #0
   1c3d0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1c3d2:	2300      	movs	r3, #0
   1c3d4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   1c3d6:	2300      	movs	r3, #0
   1c3d8:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1c3da:	2318      	movs	r3, #24
   1c3dc:	18fb      	adds	r3, r7, r3
   1c3de:	0018      	movs	r0, r3
   1c3e0:	4b25      	ldr	r3, [pc, #148]	; (1c478 <MQTTDeserialize_connack+0xc0>)
   1c3e2:	4798      	blx	r3
   1c3e4:	0003      	movs	r3, r0
   1c3e6:	001a      	movs	r2, r3
   1c3e8:	231c      	movs	r3, #28
   1c3ea:	18fb      	adds	r3, r7, r3
   1c3ec:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   1c3ee:	231c      	movs	r3, #28
   1c3f0:	18fb      	adds	r3, r7, r3
   1c3f2:	781b      	ldrb	r3, [r3, #0]
   1c3f4:	220f      	movs	r2, #15
   1c3f6:	4393      	bics	r3, r2
   1c3f8:	b2db      	uxtb	r3, r3
   1c3fa:	2b20      	cmp	r3, #32
   1c3fc:	d134      	bne.n	1c468 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1c3fe:	69bb      	ldr	r3, [r7, #24]
   1c400:	2214      	movs	r2, #20
   1c402:	18ba      	adds	r2, r7, r2
   1c404:	0011      	movs	r1, r2
   1c406:	0018      	movs	r0, r3
   1c408:	4b1c      	ldr	r3, [pc, #112]	; (1c47c <MQTTDeserialize_connack+0xc4>)
   1c40a:	4798      	blx	r3
   1c40c:	0003      	movs	r3, r0
   1c40e:	627b      	str	r3, [r7, #36]	; 0x24
   1c410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c412:	69bb      	ldr	r3, [r7, #24]
   1c414:	189b      	adds	r3, r3, r2
   1c416:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1c418:	69bb      	ldr	r3, [r7, #24]
   1c41a:	697a      	ldr	r2, [r7, #20]
   1c41c:	189b      	adds	r3, r3, r2
   1c41e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1c420:	6a3b      	ldr	r3, [r7, #32]
   1c422:	69ba      	ldr	r2, [r7, #24]
   1c424:	1a9b      	subs	r3, r3, r2
   1c426:	2b01      	cmp	r3, #1
   1c428:	dd20      	ble.n	1c46c <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   1c42a:	2318      	movs	r3, #24
   1c42c:	18fb      	adds	r3, r7, r3
   1c42e:	0018      	movs	r0, r3
   1c430:	4b11      	ldr	r3, [pc, #68]	; (1c478 <MQTTDeserialize_connack+0xc0>)
   1c432:	4798      	blx	r3
   1c434:	0003      	movs	r3, r0
   1c436:	001a      	movs	r2, r3
   1c438:	2310      	movs	r3, #16
   1c43a:	18fb      	adds	r3, r7, r3
   1c43c:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   1c43e:	2310      	movs	r3, #16
   1c440:	18fb      	adds	r3, r7, r3
   1c442:	781b      	ldrb	r3, [r3, #0]
   1c444:	061b      	lsls	r3, r3, #24
   1c446:	0fdb      	lsrs	r3, r3, #31
   1c448:	b2db      	uxtb	r3, r3
   1c44a:	001a      	movs	r2, r3
   1c44c:	68fb      	ldr	r3, [r7, #12]
   1c44e:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   1c450:	2318      	movs	r3, #24
   1c452:	18fb      	adds	r3, r7, r3
   1c454:	0018      	movs	r0, r3
   1c456:	4b08      	ldr	r3, [pc, #32]	; (1c478 <MQTTDeserialize_connack+0xc0>)
   1c458:	4798      	blx	r3
   1c45a:	0003      	movs	r3, r0
   1c45c:	001a      	movs	r2, r3
   1c45e:	68bb      	ldr	r3, [r7, #8]
   1c460:	701a      	strb	r2, [r3, #0]

	rc = 1;
   1c462:	2301      	movs	r3, #1
   1c464:	627b      	str	r3, [r7, #36]	; 0x24
   1c466:	e002      	b.n	1c46e <MQTTDeserialize_connack+0xb6>
		goto exit;
   1c468:	46c0      	nop			; (mov r8, r8)
   1c46a:	e000      	b.n	1c46e <MQTTDeserialize_connack+0xb6>
		goto exit;
   1c46c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c470:	0018      	movs	r0, r3
   1c472:	46bd      	mov	sp, r7
   1c474:	b00a      	add	sp, #40	; 0x28
   1c476:	bd80      	pop	{r7, pc}
   1c478:	0001c8ff 	.word	0x0001c8ff
   1c47c:	0001c899 	.word	0x0001c899

0001c480 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   1c480:	b580      	push	{r7, lr}
   1c482:	b088      	sub	sp, #32
   1c484:	af00      	add	r7, sp, #0
   1c486:	60f8      	str	r0, [r7, #12]
   1c488:	60b9      	str	r1, [r7, #8]
   1c48a:	1dfb      	adds	r3, r7, #7
   1c48c:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1c48e:	2300      	movs	r3, #0
   1c490:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   1c492:	2301      	movs	r3, #1
   1c494:	425b      	negs	r3, r3
   1c496:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   1c498:	68fb      	ldr	r3, [r7, #12]
   1c49a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   1c49c:	68bb      	ldr	r3, [r7, #8]
   1c49e:	2b01      	cmp	r3, #1
   1c4a0:	dc03      	bgt.n	1c4aa <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1c4a2:	2302      	movs	r3, #2
   1c4a4:	425b      	negs	r3, r3
   1c4a6:	61fb      	str	r3, [r7, #28]
		goto exit;
   1c4a8:	e029      	b.n	1c4fe <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   1c4aa:	2318      	movs	r3, #24
   1c4ac:	18fb      	adds	r3, r7, r3
   1c4ae:	2200      	movs	r2, #0
   1c4b0:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   1c4b2:	1dfb      	adds	r3, r7, #7
   1c4b4:	781b      	ldrb	r3, [r3, #0]
   1c4b6:	220f      	movs	r2, #15
   1c4b8:	4013      	ands	r3, r2
   1c4ba:	b2da      	uxtb	r2, r3
   1c4bc:	2318      	movs	r3, #24
   1c4be:	18fb      	adds	r3, r7, r3
   1c4c0:	0110      	lsls	r0, r2, #4
   1c4c2:	781a      	ldrb	r2, [r3, #0]
   1c4c4:	210f      	movs	r1, #15
   1c4c6:	400a      	ands	r2, r1
   1c4c8:	1c11      	adds	r1, r2, #0
   1c4ca:	1c02      	adds	r2, r0, #0
   1c4cc:	430a      	orrs	r2, r1
   1c4ce:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1c4d0:	2318      	movs	r3, #24
   1c4d2:	18fb      	adds	r3, r7, r3
   1c4d4:	781a      	ldrb	r2, [r3, #0]
   1c4d6:	2314      	movs	r3, #20
   1c4d8:	18fb      	adds	r3, r7, r3
   1c4da:	0011      	movs	r1, r2
   1c4dc:	0018      	movs	r0, r3
   1c4de:	4b0a      	ldr	r3, [pc, #40]	; (1c508 <MQTTSerialize_zero+0x88>)
   1c4e0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   1c4e2:	697b      	ldr	r3, [r7, #20]
   1c4e4:	2100      	movs	r1, #0
   1c4e6:	0018      	movs	r0, r3
   1c4e8:	4b08      	ldr	r3, [pc, #32]	; (1c50c <MQTTSerialize_zero+0x8c>)
   1c4ea:	4798      	blx	r3
   1c4ec:	0002      	movs	r2, r0
   1c4ee:	697b      	ldr	r3, [r7, #20]
   1c4f0:	189b      	adds	r3, r3, r2
   1c4f2:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   1c4f4:	697b      	ldr	r3, [r7, #20]
   1c4f6:	001a      	movs	r2, r3
   1c4f8:	68fb      	ldr	r3, [r7, #12]
   1c4fa:	1ad3      	subs	r3, r2, r3
   1c4fc:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1c4fe:	69fb      	ldr	r3, [r7, #28]
}
   1c500:	0018      	movs	r0, r3
   1c502:	46bd      	mov	sp, r7
   1c504:	b008      	add	sp, #32
   1c506:	bd80      	pop	{r7, pc}
   1c508:	0001c92b 	.word	0x0001c92b
   1c50c:	0001c711 	.word	0x0001c711

0001c510 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   1c510:	b580      	push	{r7, lr}
   1c512:	b082      	sub	sp, #8
   1c514:	af00      	add	r7, sp, #0
   1c516:	6078      	str	r0, [r7, #4]
   1c518:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   1c51a:	6839      	ldr	r1, [r7, #0]
   1c51c:	687b      	ldr	r3, [r7, #4]
   1c51e:	220e      	movs	r2, #14
   1c520:	0018      	movs	r0, r3
   1c522:	4b03      	ldr	r3, [pc, #12]	; (1c530 <MQTTSerialize_disconnect+0x20>)
   1c524:	4798      	blx	r3
   1c526:	0003      	movs	r3, r0
}
   1c528:	0018      	movs	r0, r3
   1c52a:	46bd      	mov	sp, r7
   1c52c:	b002      	add	sp, #8
   1c52e:	bd80      	pop	{r7, pc}
   1c530:	0001c481 	.word	0x0001c481

0001c534 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   1c534:	b580      	push	{r7, lr}
   1c536:	b082      	sub	sp, #8
   1c538:	af00      	add	r7, sp, #0
   1c53a:	6078      	str	r0, [r7, #4]
   1c53c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   1c53e:	6839      	ldr	r1, [r7, #0]
   1c540:	687b      	ldr	r3, [r7, #4]
   1c542:	220c      	movs	r2, #12
   1c544:	0018      	movs	r0, r3
   1c546:	4b03      	ldr	r3, [pc, #12]	; (1c554 <MQTTSerialize_pingreq+0x20>)
   1c548:	4798      	blx	r3
   1c54a:	0003      	movs	r3, r0
}
   1c54c:	0018      	movs	r0, r3
   1c54e:	46bd      	mov	sp, r7
   1c550:	b002      	add	sp, #8
   1c552:	bd80      	pop	{r7, pc}
   1c554:	0001c481 	.word	0x0001c481

0001c558 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   1c558:	b580      	push	{r7, lr}
   1c55a:	b08a      	sub	sp, #40	; 0x28
   1c55c:	af00      	add	r7, sp, #0
   1c55e:	60f8      	str	r0, [r7, #12]
   1c560:	60b9      	str	r1, [r7, #8]
   1c562:	607a      	str	r2, [r7, #4]
   1c564:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1c566:	2300      	movs	r3, #0
   1c568:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1c56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c56c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1c56e:	2300      	movs	r3, #0
   1c570:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1c572:	2300      	movs	r3, #0
   1c574:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   1c576:	2300      	movs	r3, #0
   1c578:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1c57a:	2318      	movs	r3, #24
   1c57c:	18fb      	adds	r3, r7, r3
   1c57e:	0018      	movs	r0, r3
   1c580:	4b32      	ldr	r3, [pc, #200]	; (1c64c <MQTTDeserialize_publish+0xf4>)
   1c582:	4798      	blx	r3
   1c584:	0003      	movs	r3, r0
   1c586:	001a      	movs	r2, r3
   1c588:	231c      	movs	r3, #28
   1c58a:	18fb      	adds	r3, r7, r3
   1c58c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   1c58e:	231c      	movs	r3, #28
   1c590:	18fb      	adds	r3, r7, r3
   1c592:	781b      	ldrb	r3, [r3, #0]
   1c594:	220f      	movs	r2, #15
   1c596:	4393      	bics	r3, r2
   1c598:	b2db      	uxtb	r3, r3
   1c59a:	2b30      	cmp	r3, #48	; 0x30
   1c59c:	d150      	bne.n	1c640 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   1c59e:	231c      	movs	r3, #28
   1c5a0:	18fb      	adds	r3, r7, r3
   1c5a2:	781b      	ldrb	r3, [r3, #0]
   1c5a4:	071b      	lsls	r3, r3, #28
   1c5a6:	0fdb      	lsrs	r3, r3, #31
   1c5a8:	b2db      	uxtb	r3, r3
   1c5aa:	001a      	movs	r2, r3
   1c5ac:	68fb      	ldr	r3, [r7, #12]
   1c5ae:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   1c5b0:	231c      	movs	r3, #28
   1c5b2:	18fb      	adds	r3, r7, r3
   1c5b4:	781b      	ldrb	r3, [r3, #0]
   1c5b6:	075b      	lsls	r3, r3, #29
   1c5b8:	0f9b      	lsrs	r3, r3, #30
   1c5ba:	b2db      	uxtb	r3, r3
   1c5bc:	001a      	movs	r2, r3
   1c5be:	68bb      	ldr	r3, [r7, #8]
   1c5c0:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   1c5c2:	231c      	movs	r3, #28
   1c5c4:	18fb      	adds	r3, r7, r3
   1c5c6:	781b      	ldrb	r3, [r3, #0]
   1c5c8:	07db      	lsls	r3, r3, #31
   1c5ca:	0fdb      	lsrs	r3, r3, #31
   1c5cc:	b2db      	uxtb	r3, r3
   1c5ce:	001a      	movs	r2, r3
   1c5d0:	687b      	ldr	r3, [r7, #4]
   1c5d2:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1c5d4:	69bb      	ldr	r3, [r7, #24]
   1c5d6:	2214      	movs	r2, #20
   1c5d8:	18ba      	adds	r2, r7, r2
   1c5da:	0011      	movs	r1, r2
   1c5dc:	0018      	movs	r0, r3
   1c5de:	4b1c      	ldr	r3, [pc, #112]	; (1c650 <MQTTDeserialize_publish+0xf8>)
   1c5e0:	4798      	blx	r3
   1c5e2:	0003      	movs	r3, r0
   1c5e4:	627b      	str	r3, [r7, #36]	; 0x24
   1c5e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c5e8:	69bb      	ldr	r3, [r7, #24]
   1c5ea:	189b      	adds	r3, r3, r2
   1c5ec:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1c5ee:	69bb      	ldr	r3, [r7, #24]
   1c5f0:	697a      	ldr	r2, [r7, #20]
   1c5f2:	189b      	adds	r3, r3, r2
   1c5f4:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1c5f6:	6a3a      	ldr	r2, [r7, #32]
   1c5f8:	2318      	movs	r3, #24
   1c5fa:	18f9      	adds	r1, r7, r3
   1c5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c5fe:	0018      	movs	r0, r3
   1c600:	4b14      	ldr	r3, [pc, #80]	; (1c654 <MQTTDeserialize_publish+0xfc>)
   1c602:	4798      	blx	r3
   1c604:	1e03      	subs	r3, r0, #0
   1c606:	d01c      	beq.n	1c642 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   1c608:	6a3b      	ldr	r3, [r7, #32]
   1c60a:	69ba      	ldr	r2, [r7, #24]
   1c60c:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1c60e:	d418      	bmi.n	1c642 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   1c610:	68bb      	ldr	r3, [r7, #8]
   1c612:	681b      	ldr	r3, [r3, #0]
   1c614:	2b00      	cmp	r3, #0
   1c616:	dd08      	ble.n	1c62a <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   1c618:	2318      	movs	r3, #24
   1c61a:	18fb      	adds	r3, r7, r3
   1c61c:	0018      	movs	r0, r3
   1c61e:	4b0e      	ldr	r3, [pc, #56]	; (1c658 <MQTTDeserialize_publish+0x100>)
   1c620:	4798      	blx	r3
   1c622:	0003      	movs	r3, r0
   1c624:	b29a      	uxth	r2, r3
   1c626:	683b      	ldr	r3, [r7, #0]
   1c628:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   1c62a:	6a3b      	ldr	r3, [r7, #32]
   1c62c:	69ba      	ldr	r2, [r7, #24]
   1c62e:	1a9a      	subs	r2, r3, r2
   1c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c632:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   1c634:	69ba      	ldr	r2, [r7, #24]
   1c636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c638:	601a      	str	r2, [r3, #0]
	rc = 1;
   1c63a:	2301      	movs	r3, #1
   1c63c:	627b      	str	r3, [r7, #36]	; 0x24
   1c63e:	e000      	b.n	1c642 <MQTTDeserialize_publish+0xea>
		goto exit;
   1c640:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1c642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c644:	0018      	movs	r0, r3
   1c646:	46bd      	mov	sp, r7
   1c648:	b00a      	add	sp, #40	; 0x28
   1c64a:	bd80      	pop	{r7, pc}
   1c64c:	0001c8ff 	.word	0x0001c8ff
   1c650:	0001c899 	.word	0x0001c899
   1c654:	0001ca7d 	.word	0x0001ca7d
   1c658:	0001c8cd 	.word	0x0001c8cd

0001c65c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   1c65c:	b580      	push	{r7, lr}
   1c65e:	b08a      	sub	sp, #40	; 0x28
   1c660:	af00      	add	r7, sp, #0
   1c662:	60f8      	str	r0, [r7, #12]
   1c664:	60b9      	str	r1, [r7, #8]
   1c666:	607a      	str	r2, [r7, #4]
   1c668:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1c66a:	2300      	movs	r3, #0
   1c66c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1c66e:	683b      	ldr	r3, [r7, #0]
   1c670:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1c672:	2300      	movs	r3, #0
   1c674:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1c676:	2300      	movs	r3, #0
   1c678:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1c67a:	2318      	movs	r3, #24
   1c67c:	18fb      	adds	r3, r7, r3
   1c67e:	0018      	movs	r0, r3
   1c680:	4b20      	ldr	r3, [pc, #128]	; (1c704 <MQTTDeserialize_ack+0xa8>)
   1c682:	4798      	blx	r3
   1c684:	0003      	movs	r3, r0
   1c686:	001a      	movs	r2, r3
   1c688:	231c      	movs	r3, #28
   1c68a:	18fb      	adds	r3, r7, r3
   1c68c:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   1c68e:	231c      	movs	r3, #28
   1c690:	18fb      	adds	r3, r7, r3
   1c692:	781b      	ldrb	r3, [r3, #0]
   1c694:	071b      	lsls	r3, r3, #28
   1c696:	0fdb      	lsrs	r3, r3, #31
   1c698:	b2db      	uxtb	r3, r3
   1c69a:	001a      	movs	r2, r3
   1c69c:	68bb      	ldr	r3, [r7, #8]
   1c69e:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   1c6a0:	231c      	movs	r3, #28
   1c6a2:	18fb      	adds	r3, r7, r3
   1c6a4:	781b      	ldrb	r3, [r3, #0]
   1c6a6:	061b      	lsls	r3, r3, #24
   1c6a8:	0f1b      	lsrs	r3, r3, #28
   1c6aa:	b2db      	uxtb	r3, r3
   1c6ac:	001a      	movs	r2, r3
   1c6ae:	68fb      	ldr	r3, [r7, #12]
   1c6b0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1c6b2:	69bb      	ldr	r3, [r7, #24]
   1c6b4:	2214      	movs	r2, #20
   1c6b6:	18ba      	adds	r2, r7, r2
   1c6b8:	0011      	movs	r1, r2
   1c6ba:	0018      	movs	r0, r3
   1c6bc:	4b12      	ldr	r3, [pc, #72]	; (1c708 <MQTTDeserialize_ack+0xac>)
   1c6be:	4798      	blx	r3
   1c6c0:	0003      	movs	r3, r0
   1c6c2:	627b      	str	r3, [r7, #36]	; 0x24
   1c6c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c6c6:	69bb      	ldr	r3, [r7, #24]
   1c6c8:	189b      	adds	r3, r3, r2
   1c6ca:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1c6cc:	69bb      	ldr	r3, [r7, #24]
   1c6ce:	697a      	ldr	r2, [r7, #20]
   1c6d0:	189b      	adds	r3, r3, r2
   1c6d2:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   1c6d4:	6a3b      	ldr	r3, [r7, #32]
   1c6d6:	69ba      	ldr	r2, [r7, #24]
   1c6d8:	1a9b      	subs	r3, r3, r2
   1c6da:	2b01      	cmp	r3, #1
   1c6dc:	dd0b      	ble.n	1c6f6 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   1c6de:	2318      	movs	r3, #24
   1c6e0:	18fb      	adds	r3, r7, r3
   1c6e2:	0018      	movs	r0, r3
   1c6e4:	4b09      	ldr	r3, [pc, #36]	; (1c70c <MQTTDeserialize_ack+0xb0>)
   1c6e6:	4798      	blx	r3
   1c6e8:	0003      	movs	r3, r0
   1c6ea:	b29a      	uxth	r2, r3
   1c6ec:	687b      	ldr	r3, [r7, #4]
   1c6ee:	801a      	strh	r2, [r3, #0]

	rc = 1;
   1c6f0:	2301      	movs	r3, #1
   1c6f2:	627b      	str	r3, [r7, #36]	; 0x24
   1c6f4:	e000      	b.n	1c6f8 <MQTTDeserialize_ack+0x9c>
		goto exit;
   1c6f6:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1c6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c6fa:	0018      	movs	r0, r3
   1c6fc:	46bd      	mov	sp, r7
   1c6fe:	b00a      	add	sp, #40	; 0x28
   1c700:	bd80      	pop	{r7, pc}
   1c702:	46c0      	nop			; (mov r8, r8)
   1c704:	0001c8ff 	.word	0x0001c8ff
   1c708:	0001c899 	.word	0x0001c899
   1c70c:	0001c8cd 	.word	0x0001c8cd

0001c710 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   1c710:	b580      	push	{r7, lr}
   1c712:	b084      	sub	sp, #16
   1c714:	af00      	add	r7, sp, #0
   1c716:	6078      	str	r0, [r7, #4]
   1c718:	6039      	str	r1, [r7, #0]
	int rc = 0;
   1c71a:	2300      	movs	r3, #0
   1c71c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   1c71e:	683b      	ldr	r3, [r7, #0]
   1c720:	4a17      	ldr	r2, [pc, #92]	; (1c780 <MQTTPacket_encode+0x70>)
   1c722:	4013      	ands	r3, r2
   1c724:	d504      	bpl.n	1c730 <MQTTPacket_encode+0x20>
   1c726:	3b01      	subs	r3, #1
   1c728:	2280      	movs	r2, #128	; 0x80
   1c72a:	4252      	negs	r2, r2
   1c72c:	4313      	orrs	r3, r2
   1c72e:	3301      	adds	r3, #1
   1c730:	001a      	movs	r2, r3
   1c732:	230b      	movs	r3, #11
   1c734:	18fb      	adds	r3, r7, r3
   1c736:	701a      	strb	r2, [r3, #0]
		length /= 128;
   1c738:	683b      	ldr	r3, [r7, #0]
   1c73a:	2b00      	cmp	r3, #0
   1c73c:	da00      	bge.n	1c740 <MQTTPacket_encode+0x30>
   1c73e:	337f      	adds	r3, #127	; 0x7f
   1c740:	11db      	asrs	r3, r3, #7
   1c742:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   1c744:	683b      	ldr	r3, [r7, #0]
   1c746:	2b00      	cmp	r3, #0
   1c748:	dd08      	ble.n	1c75c <MQTTPacket_encode+0x4c>
			d |= 0x80;
   1c74a:	230b      	movs	r3, #11
   1c74c:	18fb      	adds	r3, r7, r3
   1c74e:	220b      	movs	r2, #11
   1c750:	18ba      	adds	r2, r7, r2
   1c752:	7812      	ldrb	r2, [r2, #0]
   1c754:	2180      	movs	r1, #128	; 0x80
   1c756:	4249      	negs	r1, r1
   1c758:	430a      	orrs	r2, r1
   1c75a:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   1c75c:	68fb      	ldr	r3, [r7, #12]
   1c75e:	1c5a      	adds	r2, r3, #1
   1c760:	60fa      	str	r2, [r7, #12]
   1c762:	001a      	movs	r2, r3
   1c764:	687b      	ldr	r3, [r7, #4]
   1c766:	189b      	adds	r3, r3, r2
   1c768:	220b      	movs	r2, #11
   1c76a:	18ba      	adds	r2, r7, r2
   1c76c:	7812      	ldrb	r2, [r2, #0]
   1c76e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   1c770:	683b      	ldr	r3, [r7, #0]
   1c772:	2b00      	cmp	r3, #0
   1c774:	dcd3      	bgt.n	1c71e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   1c776:	68fb      	ldr	r3, [r7, #12]
}
   1c778:	0018      	movs	r0, r3
   1c77a:	46bd      	mov	sp, r7
   1c77c:	b004      	add	sp, #16
   1c77e:	bd80      	pop	{r7, pc}
   1c780:	8000007f 	.word	0x8000007f

0001c784 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   1c784:	b580      	push	{r7, lr}
   1c786:	b086      	sub	sp, #24
   1c788:	af00      	add	r7, sp, #0
   1c78a:	6078      	str	r0, [r7, #4]
   1c78c:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   1c78e:	2301      	movs	r3, #1
   1c790:	617b      	str	r3, [r7, #20]
	int len = 0;
   1c792:	2300      	movs	r3, #0
   1c794:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   1c796:	683b      	ldr	r3, [r7, #0]
   1c798:	2200      	movs	r2, #0
   1c79a:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   1c79c:	2301      	movs	r3, #1
   1c79e:	425b      	negs	r3, r3
   1c7a0:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1c7a2:	693b      	ldr	r3, [r7, #16]
   1c7a4:	3301      	adds	r3, #1
   1c7a6:	613b      	str	r3, [r7, #16]
   1c7a8:	693b      	ldr	r3, [r7, #16]
   1c7aa:	2b04      	cmp	r3, #4
   1c7ac:	dd03      	ble.n	1c7b6 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   1c7ae:	2301      	movs	r3, #1
   1c7b0:	425b      	negs	r3, r3
   1c7b2:	60fb      	str	r3, [r7, #12]
			goto exit;
   1c7b4:	e022      	b.n	1c7fc <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   1c7b6:	230b      	movs	r3, #11
   1c7b8:	18fa      	adds	r2, r7, r3
   1c7ba:	687b      	ldr	r3, [r7, #4]
   1c7bc:	2101      	movs	r1, #1
   1c7be:	0010      	movs	r0, r2
   1c7c0:	4798      	blx	r3
   1c7c2:	0003      	movs	r3, r0
   1c7c4:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   1c7c6:	68fb      	ldr	r3, [r7, #12]
   1c7c8:	2b01      	cmp	r3, #1
   1c7ca:	d116      	bne.n	1c7fa <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   1c7cc:	683b      	ldr	r3, [r7, #0]
   1c7ce:	681a      	ldr	r2, [r3, #0]
   1c7d0:	230b      	movs	r3, #11
   1c7d2:	18fb      	adds	r3, r7, r3
   1c7d4:	781b      	ldrb	r3, [r3, #0]
   1c7d6:	0019      	movs	r1, r3
   1c7d8:	237f      	movs	r3, #127	; 0x7f
   1c7da:	400b      	ands	r3, r1
   1c7dc:	6979      	ldr	r1, [r7, #20]
   1c7de:	434b      	muls	r3, r1
   1c7e0:	18d2      	adds	r2, r2, r3
   1c7e2:	683b      	ldr	r3, [r7, #0]
   1c7e4:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   1c7e6:	697b      	ldr	r3, [r7, #20]
   1c7e8:	01db      	lsls	r3, r3, #7
   1c7ea:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   1c7ec:	230b      	movs	r3, #11
   1c7ee:	18fb      	adds	r3, r7, r3
   1c7f0:	781b      	ldrb	r3, [r3, #0]
   1c7f2:	b25b      	sxtb	r3, r3
   1c7f4:	2b00      	cmp	r3, #0
   1c7f6:	dbd1      	blt.n	1c79c <MQTTPacket_decode+0x18>
   1c7f8:	e000      	b.n	1c7fc <MQTTPacket_decode+0x78>
			goto exit;
   1c7fa:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   1c7fc:	693b      	ldr	r3, [r7, #16]
}
   1c7fe:	0018      	movs	r0, r3
   1c800:	46bd      	mov	sp, r7
   1c802:	b006      	add	sp, #24
   1c804:	bd80      	pop	{r7, pc}
	...

0001c808 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   1c808:	b580      	push	{r7, lr}
   1c80a:	b082      	sub	sp, #8
   1c80c:	af00      	add	r7, sp, #0
   1c80e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   1c810:	687b      	ldr	r3, [r7, #4]
   1c812:	3301      	adds	r3, #1
   1c814:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   1c816:	687b      	ldr	r3, [r7, #4]
   1c818:	2b7f      	cmp	r3, #127	; 0x7f
   1c81a:	dc03      	bgt.n	1c824 <MQTTPacket_len+0x1c>
		rem_len += 1;
   1c81c:	687b      	ldr	r3, [r7, #4]
   1c81e:	3301      	adds	r3, #1
   1c820:	607b      	str	r3, [r7, #4]
   1c822:	e012      	b.n	1c84a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   1c824:	687b      	ldr	r3, [r7, #4]
   1c826:	4a0b      	ldr	r2, [pc, #44]	; (1c854 <MQTTPacket_len+0x4c>)
   1c828:	4293      	cmp	r3, r2
   1c82a:	dc03      	bgt.n	1c834 <MQTTPacket_len+0x2c>
		rem_len += 2;
   1c82c:	687b      	ldr	r3, [r7, #4]
   1c82e:	3302      	adds	r3, #2
   1c830:	607b      	str	r3, [r7, #4]
   1c832:	e00a      	b.n	1c84a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   1c834:	687b      	ldr	r3, [r7, #4]
   1c836:	4a08      	ldr	r2, [pc, #32]	; (1c858 <MQTTPacket_len+0x50>)
   1c838:	4293      	cmp	r3, r2
   1c83a:	dc03      	bgt.n	1c844 <MQTTPacket_len+0x3c>
		rem_len += 3;
   1c83c:	687b      	ldr	r3, [r7, #4]
   1c83e:	3303      	adds	r3, #3
   1c840:	607b      	str	r3, [r7, #4]
   1c842:	e002      	b.n	1c84a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   1c844:	687b      	ldr	r3, [r7, #4]
   1c846:	3304      	adds	r3, #4
   1c848:	607b      	str	r3, [r7, #4]
	return rem_len;
   1c84a:	687b      	ldr	r3, [r7, #4]
}
   1c84c:	0018      	movs	r0, r3
   1c84e:	46bd      	mov	sp, r7
   1c850:	b002      	add	sp, #8
   1c852:	bd80      	pop	{r7, pc}
   1c854:	00003fff 	.word	0x00003fff
   1c858:	001ffffe 	.word	0x001ffffe

0001c85c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   1c85c:	b580      	push	{r7, lr}
   1c85e:	b084      	sub	sp, #16
   1c860:	af00      	add	r7, sp, #0
   1c862:	6078      	str	r0, [r7, #4]
   1c864:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   1c866:	2300      	movs	r3, #0
   1c868:	60fb      	str	r3, [r7, #12]
   1c86a:	e00a      	b.n	1c882 <bufchar+0x26>
		*c = *bufptr++;
   1c86c:	4b09      	ldr	r3, [pc, #36]	; (1c894 <bufchar+0x38>)
   1c86e:	681b      	ldr	r3, [r3, #0]
   1c870:	1c59      	adds	r1, r3, #1
   1c872:	4a08      	ldr	r2, [pc, #32]	; (1c894 <bufchar+0x38>)
   1c874:	6011      	str	r1, [r2, #0]
   1c876:	781a      	ldrb	r2, [r3, #0]
   1c878:	687b      	ldr	r3, [r7, #4]
   1c87a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   1c87c:	68fb      	ldr	r3, [r7, #12]
   1c87e:	3301      	adds	r3, #1
   1c880:	60fb      	str	r3, [r7, #12]
   1c882:	68fa      	ldr	r2, [r7, #12]
   1c884:	683b      	ldr	r3, [r7, #0]
   1c886:	429a      	cmp	r2, r3
   1c888:	dbf0      	blt.n	1c86c <bufchar+0x10>
	return count;
   1c88a:	683b      	ldr	r3, [r7, #0]
}
   1c88c:	0018      	movs	r0, r3
   1c88e:	46bd      	mov	sp, r7
   1c890:	b004      	add	sp, #16
   1c892:	bd80      	pop	{r7, pc}
   1c894:	2000417c 	.word	0x2000417c

0001c898 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   1c898:	b580      	push	{r7, lr}
   1c89a:	b082      	sub	sp, #8
   1c89c:	af00      	add	r7, sp, #0
   1c89e:	6078      	str	r0, [r7, #4]
   1c8a0:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   1c8a2:	4b07      	ldr	r3, [pc, #28]	; (1c8c0 <MQTTPacket_decodeBuf+0x28>)
   1c8a4:	687a      	ldr	r2, [r7, #4]
   1c8a6:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   1c8a8:	683a      	ldr	r2, [r7, #0]
   1c8aa:	4b06      	ldr	r3, [pc, #24]	; (1c8c4 <MQTTPacket_decodeBuf+0x2c>)
   1c8ac:	0011      	movs	r1, r2
   1c8ae:	0018      	movs	r0, r3
   1c8b0:	4b05      	ldr	r3, [pc, #20]	; (1c8c8 <MQTTPacket_decodeBuf+0x30>)
   1c8b2:	4798      	blx	r3
   1c8b4:	0003      	movs	r3, r0
}
   1c8b6:	0018      	movs	r0, r3
   1c8b8:	46bd      	mov	sp, r7
   1c8ba:	b002      	add	sp, #8
   1c8bc:	bd80      	pop	{r7, pc}
   1c8be:	46c0      	nop			; (mov r8, r8)
   1c8c0:	2000417c 	.word	0x2000417c
   1c8c4:	0001c85d 	.word	0x0001c85d
   1c8c8:	0001c785 	.word	0x0001c785

0001c8cc <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   1c8cc:	b580      	push	{r7, lr}
   1c8ce:	b084      	sub	sp, #16
   1c8d0:	af00      	add	r7, sp, #0
   1c8d2:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   1c8d4:	687b      	ldr	r3, [r7, #4]
   1c8d6:	681b      	ldr	r3, [r3, #0]
   1c8d8:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   1c8da:	68fb      	ldr	r3, [r7, #12]
   1c8dc:	781b      	ldrb	r3, [r3, #0]
   1c8de:	021b      	lsls	r3, r3, #8
   1c8e0:	68fa      	ldr	r2, [r7, #12]
   1c8e2:	3201      	adds	r2, #1
   1c8e4:	7812      	ldrb	r2, [r2, #0]
   1c8e6:	189b      	adds	r3, r3, r2
   1c8e8:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   1c8ea:	687b      	ldr	r3, [r7, #4]
   1c8ec:	681b      	ldr	r3, [r3, #0]
   1c8ee:	1c9a      	adds	r2, r3, #2
   1c8f0:	687b      	ldr	r3, [r7, #4]
   1c8f2:	601a      	str	r2, [r3, #0]
	return len;
   1c8f4:	68bb      	ldr	r3, [r7, #8]
}
   1c8f6:	0018      	movs	r0, r3
   1c8f8:	46bd      	mov	sp, r7
   1c8fa:	b004      	add	sp, #16
   1c8fc:	bd80      	pop	{r7, pc}

0001c8fe <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   1c8fe:	b580      	push	{r7, lr}
   1c900:	b084      	sub	sp, #16
   1c902:	af00      	add	r7, sp, #0
   1c904:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   1c906:	687b      	ldr	r3, [r7, #4]
   1c908:	681a      	ldr	r2, [r3, #0]
   1c90a:	230f      	movs	r3, #15
   1c90c:	18fb      	adds	r3, r7, r3
   1c90e:	7812      	ldrb	r2, [r2, #0]
   1c910:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   1c912:	687b      	ldr	r3, [r7, #4]
   1c914:	681b      	ldr	r3, [r3, #0]
   1c916:	1c5a      	adds	r2, r3, #1
   1c918:	687b      	ldr	r3, [r7, #4]
   1c91a:	601a      	str	r2, [r3, #0]
	return c;
   1c91c:	230f      	movs	r3, #15
   1c91e:	18fb      	adds	r3, r7, r3
   1c920:	781b      	ldrb	r3, [r3, #0]
}
   1c922:	0018      	movs	r0, r3
   1c924:	46bd      	mov	sp, r7
   1c926:	b004      	add	sp, #16
   1c928:	bd80      	pop	{r7, pc}

0001c92a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   1c92a:	b580      	push	{r7, lr}
   1c92c:	b082      	sub	sp, #8
   1c92e:	af00      	add	r7, sp, #0
   1c930:	6078      	str	r0, [r7, #4]
   1c932:	000a      	movs	r2, r1
   1c934:	1cfb      	adds	r3, r7, #3
   1c936:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   1c938:	687b      	ldr	r3, [r7, #4]
   1c93a:	681b      	ldr	r3, [r3, #0]
   1c93c:	1cfa      	adds	r2, r7, #3
   1c93e:	7812      	ldrb	r2, [r2, #0]
   1c940:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   1c942:	687b      	ldr	r3, [r7, #4]
   1c944:	681b      	ldr	r3, [r3, #0]
   1c946:	1c5a      	adds	r2, r3, #1
   1c948:	687b      	ldr	r3, [r7, #4]
   1c94a:	601a      	str	r2, [r3, #0]
}
   1c94c:	46c0      	nop			; (mov r8, r8)
   1c94e:	46bd      	mov	sp, r7
   1c950:	b002      	add	sp, #8
   1c952:	bd80      	pop	{r7, pc}

0001c954 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   1c954:	b580      	push	{r7, lr}
   1c956:	b082      	sub	sp, #8
   1c958:	af00      	add	r7, sp, #0
   1c95a:	6078      	str	r0, [r7, #4]
   1c95c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   1c95e:	687b      	ldr	r3, [r7, #4]
   1c960:	681a      	ldr	r2, [r3, #0]
   1c962:	683b      	ldr	r3, [r7, #0]
   1c964:	2b00      	cmp	r3, #0
   1c966:	da00      	bge.n	1c96a <writeInt+0x16>
   1c968:	33ff      	adds	r3, #255	; 0xff
   1c96a:	121b      	asrs	r3, r3, #8
   1c96c:	b2db      	uxtb	r3, r3
   1c96e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   1c970:	687b      	ldr	r3, [r7, #4]
   1c972:	681b      	ldr	r3, [r3, #0]
   1c974:	1c5a      	adds	r2, r3, #1
   1c976:	687b      	ldr	r3, [r7, #4]
   1c978:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   1c97a:	687b      	ldr	r3, [r7, #4]
   1c97c:	681a      	ldr	r2, [r3, #0]
   1c97e:	683b      	ldr	r3, [r7, #0]
   1c980:	4908      	ldr	r1, [pc, #32]	; (1c9a4 <writeInt+0x50>)
   1c982:	400b      	ands	r3, r1
   1c984:	d503      	bpl.n	1c98e <writeInt+0x3a>
   1c986:	3b01      	subs	r3, #1
   1c988:	4907      	ldr	r1, [pc, #28]	; (1c9a8 <writeInt+0x54>)
   1c98a:	430b      	orrs	r3, r1
   1c98c:	3301      	adds	r3, #1
   1c98e:	b2db      	uxtb	r3, r3
   1c990:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   1c992:	687b      	ldr	r3, [r7, #4]
   1c994:	681b      	ldr	r3, [r3, #0]
   1c996:	1c5a      	adds	r2, r3, #1
   1c998:	687b      	ldr	r3, [r7, #4]
   1c99a:	601a      	str	r2, [r3, #0]
}
   1c99c:	46c0      	nop			; (mov r8, r8)
   1c99e:	46bd      	mov	sp, r7
   1c9a0:	b002      	add	sp, #8
   1c9a2:	bd80      	pop	{r7, pc}
   1c9a4:	800000ff 	.word	0x800000ff
   1c9a8:	ffffff00 	.word	0xffffff00

0001c9ac <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   1c9ac:	b580      	push	{r7, lr}
   1c9ae:	b084      	sub	sp, #16
   1c9b0:	af00      	add	r7, sp, #0
   1c9b2:	6078      	str	r0, [r7, #4]
   1c9b4:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   1c9b6:	683b      	ldr	r3, [r7, #0]
   1c9b8:	0018      	movs	r0, r3
   1c9ba:	4b0d      	ldr	r3, [pc, #52]	; (1c9f0 <writeCString+0x44>)
   1c9bc:	4798      	blx	r3
   1c9be:	0003      	movs	r3, r0
   1c9c0:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   1c9c2:	68fa      	ldr	r2, [r7, #12]
   1c9c4:	687b      	ldr	r3, [r7, #4]
   1c9c6:	0011      	movs	r1, r2
   1c9c8:	0018      	movs	r0, r3
   1c9ca:	4b0a      	ldr	r3, [pc, #40]	; (1c9f4 <writeCString+0x48>)
   1c9cc:	4798      	blx	r3
	memcpy(*pptr, string, len);
   1c9ce:	687b      	ldr	r3, [r7, #4]
   1c9d0:	681b      	ldr	r3, [r3, #0]
   1c9d2:	68fa      	ldr	r2, [r7, #12]
   1c9d4:	6839      	ldr	r1, [r7, #0]
   1c9d6:	0018      	movs	r0, r3
   1c9d8:	4b07      	ldr	r3, [pc, #28]	; (1c9f8 <writeCString+0x4c>)
   1c9da:	4798      	blx	r3
	*pptr += len;
   1c9dc:	687b      	ldr	r3, [r7, #4]
   1c9de:	681a      	ldr	r2, [r3, #0]
   1c9e0:	68fb      	ldr	r3, [r7, #12]
   1c9e2:	18d2      	adds	r2, r2, r3
   1c9e4:	687b      	ldr	r3, [r7, #4]
   1c9e6:	601a      	str	r2, [r3, #0]
}
   1c9e8:	46c0      	nop			; (mov r8, r8)
   1c9ea:	46bd      	mov	sp, r7
   1c9ec:	b004      	add	sp, #16
   1c9ee:	bd80      	pop	{r7, pc}
   1c9f0:	000212d7 	.word	0x000212d7
   1c9f4:	0001c955 	.word	0x0001c955
   1c9f8:	00020ee9 	.word	0x00020ee9

0001c9fc <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   1c9fc:	b580      	push	{r7, lr}
   1c9fe:	b084      	sub	sp, #16
   1ca00:	af00      	add	r7, sp, #0
   1ca02:	60f8      	str	r0, [r7, #12]
   1ca04:	0038      	movs	r0, r7
   1ca06:	6001      	str	r1, [r0, #0]
   1ca08:	6042      	str	r2, [r0, #4]
   1ca0a:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   1ca0c:	003b      	movs	r3, r7
   1ca0e:	685b      	ldr	r3, [r3, #4]
   1ca10:	2b00      	cmp	r3, #0
   1ca12:	dd17      	ble.n	1ca44 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   1ca14:	003b      	movs	r3, r7
   1ca16:	685a      	ldr	r2, [r3, #4]
   1ca18:	68fb      	ldr	r3, [r7, #12]
   1ca1a:	0011      	movs	r1, r2
   1ca1c:	0018      	movs	r0, r3
   1ca1e:	4b14      	ldr	r3, [pc, #80]	; (1ca70 <writeMQTTString+0x74>)
   1ca20:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   1ca22:	68fb      	ldr	r3, [r7, #12]
   1ca24:	6818      	ldr	r0, [r3, #0]
   1ca26:	003b      	movs	r3, r7
   1ca28:	6899      	ldr	r1, [r3, #8]
   1ca2a:	003b      	movs	r3, r7
   1ca2c:	685b      	ldr	r3, [r3, #4]
   1ca2e:	001a      	movs	r2, r3
   1ca30:	4b10      	ldr	r3, [pc, #64]	; (1ca74 <writeMQTTString+0x78>)
   1ca32:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   1ca34:	68fb      	ldr	r3, [r7, #12]
   1ca36:	681a      	ldr	r2, [r3, #0]
   1ca38:	003b      	movs	r3, r7
   1ca3a:	685b      	ldr	r3, [r3, #4]
   1ca3c:	18d2      	adds	r2, r2, r3
   1ca3e:	68fb      	ldr	r3, [r7, #12]
   1ca40:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   1ca42:	e010      	b.n	1ca66 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   1ca44:	003b      	movs	r3, r7
   1ca46:	681b      	ldr	r3, [r3, #0]
   1ca48:	2b00      	cmp	r3, #0
   1ca4a:	d007      	beq.n	1ca5c <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   1ca4c:	003b      	movs	r3, r7
   1ca4e:	681a      	ldr	r2, [r3, #0]
   1ca50:	68fb      	ldr	r3, [r7, #12]
   1ca52:	0011      	movs	r1, r2
   1ca54:	0018      	movs	r0, r3
   1ca56:	4b08      	ldr	r3, [pc, #32]	; (1ca78 <writeMQTTString+0x7c>)
   1ca58:	4798      	blx	r3
}
   1ca5a:	e004      	b.n	1ca66 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   1ca5c:	68fb      	ldr	r3, [r7, #12]
   1ca5e:	2100      	movs	r1, #0
   1ca60:	0018      	movs	r0, r3
   1ca62:	4b03      	ldr	r3, [pc, #12]	; (1ca70 <writeMQTTString+0x74>)
   1ca64:	4798      	blx	r3
}
   1ca66:	46c0      	nop			; (mov r8, r8)
   1ca68:	46bd      	mov	sp, r7
   1ca6a:	b004      	add	sp, #16
   1ca6c:	bd80      	pop	{r7, pc}
   1ca6e:	46c0      	nop			; (mov r8, r8)
   1ca70:	0001c955 	.word	0x0001c955
   1ca74:	00020ee9 	.word	0x00020ee9
   1ca78:	0001c9ad 	.word	0x0001c9ad

0001ca7c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   1ca7c:	b580      	push	{r7, lr}
   1ca7e:	b086      	sub	sp, #24
   1ca80:	af00      	add	r7, sp, #0
   1ca82:	60f8      	str	r0, [r7, #12]
   1ca84:	60b9      	str	r1, [r7, #8]
   1ca86:	607a      	str	r2, [r7, #4]
	int rc = 0;
   1ca88:	2300      	movs	r3, #0
   1ca8a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   1ca8c:	687a      	ldr	r2, [r7, #4]
   1ca8e:	68bb      	ldr	r3, [r7, #8]
   1ca90:	681b      	ldr	r3, [r3, #0]
   1ca92:	1ad3      	subs	r3, r2, r3
   1ca94:	2b01      	cmp	r3, #1
   1ca96:	dd1b      	ble.n	1cad0 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   1ca98:	68bb      	ldr	r3, [r7, #8]
   1ca9a:	0018      	movs	r0, r3
   1ca9c:	4b10      	ldr	r3, [pc, #64]	; (1cae0 <readMQTTLenString+0x64>)
   1ca9e:	4798      	blx	r3
   1caa0:	0002      	movs	r2, r0
   1caa2:	68fb      	ldr	r3, [r7, #12]
   1caa4:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   1caa6:	68bb      	ldr	r3, [r7, #8]
   1caa8:	681a      	ldr	r2, [r3, #0]
   1caaa:	68fb      	ldr	r3, [r7, #12]
   1caac:	685b      	ldr	r3, [r3, #4]
   1caae:	18d2      	adds	r2, r2, r3
   1cab0:	687b      	ldr	r3, [r7, #4]
   1cab2:	429a      	cmp	r2, r3
   1cab4:	d80c      	bhi.n	1cad0 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   1cab6:	68bb      	ldr	r3, [r7, #8]
   1cab8:	681a      	ldr	r2, [r3, #0]
   1caba:	68fb      	ldr	r3, [r7, #12]
   1cabc:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   1cabe:	68bb      	ldr	r3, [r7, #8]
   1cac0:	681a      	ldr	r2, [r3, #0]
   1cac2:	68fb      	ldr	r3, [r7, #12]
   1cac4:	685b      	ldr	r3, [r3, #4]
   1cac6:	18d2      	adds	r2, r2, r3
   1cac8:	68bb      	ldr	r3, [r7, #8]
   1caca:	601a      	str	r2, [r3, #0]
			rc = 1;
   1cacc:	2301      	movs	r3, #1
   1cace:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   1cad0:	68fb      	ldr	r3, [r7, #12]
   1cad2:	2200      	movs	r2, #0
   1cad4:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   1cad6:	697b      	ldr	r3, [r7, #20]
}
   1cad8:	0018      	movs	r0, r3
   1cada:	46bd      	mov	sp, r7
   1cadc:	b006      	add	sp, #24
   1cade:	bd80      	pop	{r7, pc}
   1cae0:	0001c8cd 	.word	0x0001c8cd

0001cae4 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   1cae4:	b580      	push	{r7, lr}
   1cae6:	b086      	sub	sp, #24
   1cae8:	af00      	add	r7, sp, #0
   1caea:	1d3b      	adds	r3, r7, #4
   1caec:	6018      	str	r0, [r3, #0]
   1caee:	6059      	str	r1, [r3, #4]
   1caf0:	609a      	str	r2, [r3, #8]
	int rc = 0;
   1caf2:	2300      	movs	r3, #0
   1caf4:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   1caf6:	1d3b      	adds	r3, r7, #4
   1caf8:	681b      	ldr	r3, [r3, #0]
   1cafa:	2b00      	cmp	r3, #0
   1cafc:	d007      	beq.n	1cb0e <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   1cafe:	1d3b      	adds	r3, r7, #4
   1cb00:	681b      	ldr	r3, [r3, #0]
   1cb02:	0018      	movs	r0, r3
   1cb04:	4b06      	ldr	r3, [pc, #24]	; (1cb20 <MQTTstrlen+0x3c>)
   1cb06:	4798      	blx	r3
   1cb08:	0003      	movs	r3, r0
   1cb0a:	617b      	str	r3, [r7, #20]
   1cb0c:	e002      	b.n	1cb14 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   1cb0e:	1d3b      	adds	r3, r7, #4
   1cb10:	685b      	ldr	r3, [r3, #4]
   1cb12:	617b      	str	r3, [r7, #20]
	return rc;
   1cb14:	697b      	ldr	r3, [r7, #20]
}
   1cb16:	0018      	movs	r0, r3
   1cb18:	46bd      	mov	sp, r7
   1cb1a:	b006      	add	sp, #24
   1cb1c:	bd80      	pop	{r7, pc}
   1cb1e:	46c0      	nop			; (mov r8, r8)
   1cb20:	000212d7 	.word	0x000212d7

0001cb24 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   1cb24:	b580      	push	{r7, lr}
   1cb26:	b086      	sub	sp, #24
   1cb28:	af00      	add	r7, sp, #0
   1cb2a:	6078      	str	r0, [r7, #4]
   1cb2c:	6039      	str	r1, [r7, #0]
	int alen = 0,
   1cb2e:	2300      	movs	r3, #0
   1cb30:	617b      	str	r3, [r7, #20]
		blen = 0;
   1cb32:	2300      	movs	r3, #0
   1cb34:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   1cb36:	687b      	ldr	r3, [r7, #4]
   1cb38:	681b      	ldr	r3, [r3, #0]
   1cb3a:	2b00      	cmp	r3, #0
   1cb3c:	d00a      	beq.n	1cb54 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   1cb3e:	687b      	ldr	r3, [r7, #4]
   1cb40:	681b      	ldr	r3, [r3, #0]
   1cb42:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   1cb44:	687b      	ldr	r3, [r7, #4]
   1cb46:	681b      	ldr	r3, [r3, #0]
   1cb48:	0018      	movs	r0, r3
   1cb4a:	4b12      	ldr	r3, [pc, #72]	; (1cb94 <MQTTPacket_equals+0x70>)
   1cb4c:	4798      	blx	r3
   1cb4e:	0003      	movs	r3, r0
   1cb50:	617b      	str	r3, [r7, #20]
   1cb52:	e005      	b.n	1cb60 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   1cb54:	687b      	ldr	r3, [r7, #4]
   1cb56:	689b      	ldr	r3, [r3, #8]
   1cb58:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   1cb5a:	687b      	ldr	r3, [r7, #4]
   1cb5c:	685b      	ldr	r3, [r3, #4]
   1cb5e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   1cb60:	683b      	ldr	r3, [r7, #0]
   1cb62:	0018      	movs	r0, r3
   1cb64:	4b0b      	ldr	r3, [pc, #44]	; (1cb94 <MQTTPacket_equals+0x70>)
   1cb66:	4798      	blx	r3
   1cb68:	0003      	movs	r3, r0
   1cb6a:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   1cb6c:	697a      	ldr	r2, [r7, #20]
   1cb6e:	68fb      	ldr	r3, [r7, #12]
   1cb70:	429a      	cmp	r2, r3
   1cb72:	d109      	bne.n	1cb88 <MQTTPacket_equals+0x64>
   1cb74:	697a      	ldr	r2, [r7, #20]
   1cb76:	6839      	ldr	r1, [r7, #0]
   1cb78:	693b      	ldr	r3, [r7, #16]
   1cb7a:	0018      	movs	r0, r3
   1cb7c:	4b06      	ldr	r3, [pc, #24]	; (1cb98 <MQTTPacket_equals+0x74>)
   1cb7e:	4798      	blx	r3
   1cb80:	1e03      	subs	r3, r0, #0
   1cb82:	d101      	bne.n	1cb88 <MQTTPacket_equals+0x64>
   1cb84:	2301      	movs	r3, #1
   1cb86:	e000      	b.n	1cb8a <MQTTPacket_equals+0x66>
   1cb88:	2300      	movs	r3, #0
}
   1cb8a:	0018      	movs	r0, r3
   1cb8c:	46bd      	mov	sp, r7
   1cb8e:	b006      	add	sp, #24
   1cb90:	bd80      	pop	{r7, pc}
   1cb92:	46c0      	nop			; (mov r8, r8)
   1cb94:	000212d7 	.word	0x000212d7
   1cb98:	000212e5 	.word	0x000212e5

0001cb9c <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   1cb9c:	b580      	push	{r7, lr}
   1cb9e:	b086      	sub	sp, #24
   1cba0:	af00      	add	r7, sp, #0
   1cba2:	60f8      	str	r0, [r7, #12]
   1cba4:	0038      	movs	r0, r7
   1cba6:	6001      	str	r1, [r0, #0]
   1cba8:	6042      	str	r2, [r0, #4]
   1cbaa:	6083      	str	r3, [r0, #8]
	int len = 0;
   1cbac:	2300      	movs	r3, #0
   1cbae:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   1cbb0:	003b      	movs	r3, r7
   1cbb2:	6818      	ldr	r0, [r3, #0]
   1cbb4:	6859      	ldr	r1, [r3, #4]
   1cbb6:	689a      	ldr	r2, [r3, #8]
   1cbb8:	4b09      	ldr	r3, [pc, #36]	; (1cbe0 <MQTTSerialize_publishLength+0x44>)
   1cbba:	4798      	blx	r3
   1cbbc:	0003      	movs	r3, r0
   1cbbe:	1c9a      	adds	r2, r3, #2
   1cbc0:	6a3b      	ldr	r3, [r7, #32]
   1cbc2:	18d3      	adds	r3, r2, r3
   1cbc4:	697a      	ldr	r2, [r7, #20]
   1cbc6:	18d3      	adds	r3, r2, r3
   1cbc8:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   1cbca:	68fb      	ldr	r3, [r7, #12]
   1cbcc:	2b00      	cmp	r3, #0
   1cbce:	dd02      	ble.n	1cbd6 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   1cbd0:	697b      	ldr	r3, [r7, #20]
   1cbd2:	3302      	adds	r3, #2
   1cbd4:	617b      	str	r3, [r7, #20]
	return len;
   1cbd6:	697b      	ldr	r3, [r7, #20]
}
   1cbd8:	0018      	movs	r0, r3
   1cbda:	46bd      	mov	sp, r7
   1cbdc:	b006      	add	sp, #24
   1cbde:	bd80      	pop	{r7, pc}
   1cbe0:	0001cae5 	.word	0x0001cae5

0001cbe4 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   1cbe4:	b590      	push	{r4, r7, lr}
   1cbe6:	b08b      	sub	sp, #44	; 0x2c
   1cbe8:	af02      	add	r7, sp, #8
   1cbea:	60f8      	str	r0, [r7, #12]
   1cbec:	60b9      	str	r1, [r7, #8]
   1cbee:	603b      	str	r3, [r7, #0]
   1cbf0:	1dfb      	adds	r3, r7, #7
   1cbf2:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   1cbf4:	68fb      	ldr	r3, [r7, #12]
   1cbf6:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   1cbf8:	2300      	movs	r3, #0
   1cbfa:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   1cbfc:	2300      	movs	r3, #0
   1cbfe:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1cc00:	2300      	movs	r3, #0
   1cc02:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   1cc04:	2308      	movs	r3, #8
   1cc06:	2230      	movs	r2, #48	; 0x30
   1cc08:	4694      	mov	ip, r2
   1cc0a:	44bc      	add	ip, r7
   1cc0c:	4463      	add	r3, ip
   1cc0e:	6838      	ldr	r0, [r7, #0]
   1cc10:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1cc12:	9200      	str	r2, [sp, #0]
   1cc14:	6819      	ldr	r1, [r3, #0]
   1cc16:	685a      	ldr	r2, [r3, #4]
   1cc18:	689b      	ldr	r3, [r3, #8]
   1cc1a:	4c46      	ldr	r4, [pc, #280]	; (1cd34 <MQTTSerialize_publish+0x150>)
   1cc1c:	47a0      	blx	r4
   1cc1e:	0003      	movs	r3, r0
   1cc20:	61bb      	str	r3, [r7, #24]
   1cc22:	69bb      	ldr	r3, [r7, #24]
   1cc24:	0018      	movs	r0, r3
   1cc26:	4b44      	ldr	r3, [pc, #272]	; (1cd38 <MQTTSerialize_publish+0x154>)
   1cc28:	4798      	blx	r3
   1cc2a:	0002      	movs	r2, r0
   1cc2c:	68bb      	ldr	r3, [r7, #8]
   1cc2e:	429a      	cmp	r2, r3
   1cc30:	dd03      	ble.n	1cc3a <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1cc32:	2302      	movs	r3, #2
   1cc34:	425b      	negs	r3, r3
   1cc36:	61fb      	str	r3, [r7, #28]
		goto exit;
   1cc38:	e077      	b.n	1cd2a <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   1cc3a:	2310      	movs	r3, #16
   1cc3c:	18fb      	adds	r3, r7, r3
   1cc3e:	781a      	ldrb	r2, [r3, #0]
   1cc40:	210f      	movs	r1, #15
   1cc42:	400a      	ands	r2, r1
   1cc44:	1c11      	adds	r1, r2, #0
   1cc46:	2230      	movs	r2, #48	; 0x30
   1cc48:	430a      	orrs	r2, r1
   1cc4a:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1cc4c:	1dfb      	adds	r3, r7, #7
   1cc4e:	781b      	ldrb	r3, [r3, #0]
   1cc50:	2201      	movs	r2, #1
   1cc52:	4013      	ands	r3, r2
   1cc54:	b2da      	uxtb	r2, r3
   1cc56:	2310      	movs	r3, #16
   1cc58:	18fb      	adds	r3, r7, r3
   1cc5a:	2101      	movs	r1, #1
   1cc5c:	400a      	ands	r2, r1
   1cc5e:	00d0      	lsls	r0, r2, #3
   1cc60:	781a      	ldrb	r2, [r3, #0]
   1cc62:	2108      	movs	r1, #8
   1cc64:	438a      	bics	r2, r1
   1cc66:	1c11      	adds	r1, r2, #0
   1cc68:	1c02      	adds	r2, r0, #0
   1cc6a:	430a      	orrs	r2, r1
   1cc6c:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   1cc6e:	683b      	ldr	r3, [r7, #0]
   1cc70:	b2db      	uxtb	r3, r3
   1cc72:	1c1a      	adds	r2, r3, #0
   1cc74:	2303      	movs	r3, #3
   1cc76:	4013      	ands	r3, r2
   1cc78:	b2da      	uxtb	r2, r3
   1cc7a:	2310      	movs	r3, #16
   1cc7c:	18fb      	adds	r3, r7, r3
   1cc7e:	2103      	movs	r1, #3
   1cc80:	400a      	ands	r2, r1
   1cc82:	1890      	adds	r0, r2, r2
   1cc84:	781a      	ldrb	r2, [r3, #0]
   1cc86:	2106      	movs	r1, #6
   1cc88:	438a      	bics	r2, r1
   1cc8a:	1c11      	adds	r1, r2, #0
   1cc8c:	1c02      	adds	r2, r0, #0
   1cc8e:	430a      	orrs	r2, r1
   1cc90:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   1cc92:	2330      	movs	r3, #48	; 0x30
   1cc94:	18fb      	adds	r3, r7, r3
   1cc96:	781b      	ldrb	r3, [r3, #0]
   1cc98:	2201      	movs	r2, #1
   1cc9a:	4013      	ands	r3, r2
   1cc9c:	b2da      	uxtb	r2, r3
   1cc9e:	2310      	movs	r3, #16
   1cca0:	18fb      	adds	r3, r7, r3
   1cca2:	2101      	movs	r1, #1
   1cca4:	400a      	ands	r2, r1
   1cca6:	0010      	movs	r0, r2
   1cca8:	781a      	ldrb	r2, [r3, #0]
   1ccaa:	2101      	movs	r1, #1
   1ccac:	438a      	bics	r2, r1
   1ccae:	1c11      	adds	r1, r2, #0
   1ccb0:	1c02      	adds	r2, r0, #0
   1ccb2:	430a      	orrs	r2, r1
   1ccb4:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1ccb6:	2310      	movs	r3, #16
   1ccb8:	18fb      	adds	r3, r7, r3
   1ccba:	781a      	ldrb	r2, [r3, #0]
   1ccbc:	2314      	movs	r3, #20
   1ccbe:	18fb      	adds	r3, r7, r3
   1ccc0:	0011      	movs	r1, r2
   1ccc2:	0018      	movs	r0, r3
   1ccc4:	4b1d      	ldr	r3, [pc, #116]	; (1cd3c <MQTTSerialize_publish+0x158>)
   1ccc6:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1ccc8:	697b      	ldr	r3, [r7, #20]
   1ccca:	69ba      	ldr	r2, [r7, #24]
   1cccc:	0011      	movs	r1, r2
   1ccce:	0018      	movs	r0, r3
   1ccd0:	4b1b      	ldr	r3, [pc, #108]	; (1cd40 <MQTTSerialize_publish+0x15c>)
   1ccd2:	4798      	blx	r3
   1ccd4:	0002      	movs	r2, r0
   1ccd6:	697b      	ldr	r3, [r7, #20]
   1ccd8:	189b      	adds	r3, r3, r2
   1ccda:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   1ccdc:	2308      	movs	r3, #8
   1ccde:	2230      	movs	r2, #48	; 0x30
   1cce0:	4694      	mov	ip, r2
   1cce2:	44bc      	add	ip, r7
   1cce4:	4463      	add	r3, ip
   1cce6:	2214      	movs	r2, #20
   1cce8:	18b8      	adds	r0, r7, r2
   1ccea:	6819      	ldr	r1, [r3, #0]
   1ccec:	685a      	ldr	r2, [r3, #4]
   1ccee:	689b      	ldr	r3, [r3, #8]
   1ccf0:	4c14      	ldr	r4, [pc, #80]	; (1cd44 <MQTTSerialize_publish+0x160>)
   1ccf2:	47a0      	blx	r4

	if (qos > 0)
   1ccf4:	683b      	ldr	r3, [r7, #0]
   1ccf6:	2b00      	cmp	r3, #0
   1ccf8:	dd08      	ble.n	1cd0c <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   1ccfa:	2334      	movs	r3, #52	; 0x34
   1ccfc:	18fb      	adds	r3, r7, r3
   1ccfe:	881a      	ldrh	r2, [r3, #0]
   1cd00:	2314      	movs	r3, #20
   1cd02:	18fb      	adds	r3, r7, r3
   1cd04:	0011      	movs	r1, r2
   1cd06:	0018      	movs	r0, r3
   1cd08:	4b0f      	ldr	r3, [pc, #60]	; (1cd48 <MQTTSerialize_publish+0x164>)
   1cd0a:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   1cd0c:	697b      	ldr	r3, [r7, #20]
   1cd0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1cd10:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1cd12:	0018      	movs	r0, r3
   1cd14:	4b0d      	ldr	r3, [pc, #52]	; (1cd4c <MQTTSerialize_publish+0x168>)
   1cd16:	4798      	blx	r3
	ptr += payloadlen;
   1cd18:	697a      	ldr	r2, [r7, #20]
   1cd1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1cd1c:	18d3      	adds	r3, r2, r3
   1cd1e:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   1cd20:	697b      	ldr	r3, [r7, #20]
   1cd22:	001a      	movs	r2, r3
   1cd24:	68fb      	ldr	r3, [r7, #12]
   1cd26:	1ad3      	subs	r3, r2, r3
   1cd28:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1cd2a:	69fb      	ldr	r3, [r7, #28]
}
   1cd2c:	0018      	movs	r0, r3
   1cd2e:	46bd      	mov	sp, r7
   1cd30:	b009      	add	sp, #36	; 0x24
   1cd32:	bd90      	pop	{r4, r7, pc}
   1cd34:	0001cb9d 	.word	0x0001cb9d
   1cd38:	0001c809 	.word	0x0001c809
   1cd3c:	0001c92b 	.word	0x0001c92b
   1cd40:	0001c711 	.word	0x0001c711
   1cd44:	0001c9fd 	.word	0x0001c9fd
   1cd48:	0001c955 	.word	0x0001c955
   1cd4c:	00020ee9 	.word	0x00020ee9

0001cd50 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   1cd50:	b580      	push	{r7, lr}
   1cd52:	b088      	sub	sp, #32
   1cd54:	af00      	add	r7, sp, #0
   1cd56:	60f8      	str	r0, [r7, #12]
   1cd58:	60b9      	str	r1, [r7, #8]
   1cd5a:	0019      	movs	r1, r3
   1cd5c:	1dfb      	adds	r3, r7, #7
   1cd5e:	701a      	strb	r2, [r3, #0]
   1cd60:	1dbb      	adds	r3, r7, #6
   1cd62:	1c0a      	adds	r2, r1, #0
   1cd64:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1cd66:	2300      	movs	r3, #0
   1cd68:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1cd6a:	2300      	movs	r3, #0
   1cd6c:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   1cd6e:	68fb      	ldr	r3, [r7, #12]
   1cd70:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   1cd72:	68bb      	ldr	r3, [r7, #8]
   1cd74:	2b03      	cmp	r3, #3
   1cd76:	dc03      	bgt.n	1cd80 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1cd78:	2302      	movs	r3, #2
   1cd7a:	425b      	negs	r3, r3
   1cd7c:	61fb      	str	r3, [r7, #28]
		goto exit;
   1cd7e:	e055      	b.n	1ce2c <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   1cd80:	1dfb      	adds	r3, r7, #7
   1cd82:	781b      	ldrb	r3, [r3, #0]
   1cd84:	220f      	movs	r2, #15
   1cd86:	4013      	ands	r3, r2
   1cd88:	b2da      	uxtb	r2, r3
   1cd8a:	2318      	movs	r3, #24
   1cd8c:	18fb      	adds	r3, r7, r3
   1cd8e:	0110      	lsls	r0, r2, #4
   1cd90:	781a      	ldrb	r2, [r3, #0]
   1cd92:	210f      	movs	r1, #15
   1cd94:	400a      	ands	r2, r1
   1cd96:	1c11      	adds	r1, r2, #0
   1cd98:	1c02      	adds	r2, r0, #0
   1cd9a:	430a      	orrs	r2, r1
   1cd9c:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1cd9e:	1dbb      	adds	r3, r7, #6
   1cda0:	781b      	ldrb	r3, [r3, #0]
   1cda2:	2201      	movs	r2, #1
   1cda4:	4013      	ands	r3, r2
   1cda6:	b2da      	uxtb	r2, r3
   1cda8:	2318      	movs	r3, #24
   1cdaa:	18fb      	adds	r3, r7, r3
   1cdac:	2101      	movs	r1, #1
   1cdae:	400a      	ands	r2, r1
   1cdb0:	00d0      	lsls	r0, r2, #3
   1cdb2:	781a      	ldrb	r2, [r3, #0]
   1cdb4:	2108      	movs	r1, #8
   1cdb6:	438a      	bics	r2, r1
   1cdb8:	1c11      	adds	r1, r2, #0
   1cdba:	1c02      	adds	r2, r0, #0
   1cdbc:	430a      	orrs	r2, r1
   1cdbe:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   1cdc0:	1dfb      	adds	r3, r7, #7
   1cdc2:	781b      	ldrb	r3, [r3, #0]
   1cdc4:	3b06      	subs	r3, #6
   1cdc6:	425a      	negs	r2, r3
   1cdc8:	4153      	adcs	r3, r2
   1cdca:	b2db      	uxtb	r3, r3
   1cdcc:	1c1a      	adds	r2, r3, #0
   1cdce:	2303      	movs	r3, #3
   1cdd0:	4013      	ands	r3, r2
   1cdd2:	b2da      	uxtb	r2, r3
   1cdd4:	2318      	movs	r3, #24
   1cdd6:	18fb      	adds	r3, r7, r3
   1cdd8:	2103      	movs	r1, #3
   1cdda:	400a      	ands	r2, r1
   1cddc:	1890      	adds	r0, r2, r2
   1cdde:	781a      	ldrb	r2, [r3, #0]
   1cde0:	2106      	movs	r1, #6
   1cde2:	438a      	bics	r2, r1
   1cde4:	1c11      	adds	r1, r2, #0
   1cde6:	1c02      	adds	r2, r0, #0
   1cde8:	430a      	orrs	r2, r1
   1cdea:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1cdec:	2318      	movs	r3, #24
   1cdee:	18fb      	adds	r3, r7, r3
   1cdf0:	781a      	ldrb	r2, [r3, #0]
   1cdf2:	2314      	movs	r3, #20
   1cdf4:	18fb      	adds	r3, r7, r3
   1cdf6:	0011      	movs	r1, r2
   1cdf8:	0018      	movs	r0, r3
   1cdfa:	4b0f      	ldr	r3, [pc, #60]	; (1ce38 <MQTTSerialize_ack+0xe8>)
   1cdfc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   1cdfe:	697b      	ldr	r3, [r7, #20]
   1ce00:	2102      	movs	r1, #2
   1ce02:	0018      	movs	r0, r3
   1ce04:	4b0d      	ldr	r3, [pc, #52]	; (1ce3c <MQTTSerialize_ack+0xec>)
   1ce06:	4798      	blx	r3
   1ce08:	0002      	movs	r2, r0
   1ce0a:	697b      	ldr	r3, [r7, #20]
   1ce0c:	189b      	adds	r3, r3, r2
   1ce0e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   1ce10:	2328      	movs	r3, #40	; 0x28
   1ce12:	18fb      	adds	r3, r7, r3
   1ce14:	881a      	ldrh	r2, [r3, #0]
   1ce16:	2314      	movs	r3, #20
   1ce18:	18fb      	adds	r3, r7, r3
   1ce1a:	0011      	movs	r1, r2
   1ce1c:	0018      	movs	r0, r3
   1ce1e:	4b08      	ldr	r3, [pc, #32]	; (1ce40 <MQTTSerialize_ack+0xf0>)
   1ce20:	4798      	blx	r3
	rc = ptr - buf;
   1ce22:	697b      	ldr	r3, [r7, #20]
   1ce24:	001a      	movs	r2, r3
   1ce26:	68fb      	ldr	r3, [r7, #12]
   1ce28:	1ad3      	subs	r3, r2, r3
   1ce2a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1ce2c:	69fb      	ldr	r3, [r7, #28]
}
   1ce2e:	0018      	movs	r0, r3
   1ce30:	46bd      	mov	sp, r7
   1ce32:	b008      	add	sp, #32
   1ce34:	bd80      	pop	{r7, pc}
   1ce36:	46c0      	nop			; (mov r8, r8)
   1ce38:	0001c92b 	.word	0x0001c92b
   1ce3c:	0001c711 	.word	0x0001c711
   1ce40:	0001c955 	.word	0x0001c955

0001ce44 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   1ce44:	b580      	push	{r7, lr}
   1ce46:	b084      	sub	sp, #16
   1ce48:	af00      	add	r7, sp, #0
   1ce4a:	6078      	str	r0, [r7, #4]
   1ce4c:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   1ce4e:	2302      	movs	r3, #2
   1ce50:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   1ce52:	2300      	movs	r3, #0
   1ce54:	60fb      	str	r3, [r7, #12]
   1ce56:	e014      	b.n	1ce82 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   1ce58:	68fa      	ldr	r2, [r7, #12]
   1ce5a:	0013      	movs	r3, r2
   1ce5c:	005b      	lsls	r3, r3, #1
   1ce5e:	189b      	adds	r3, r3, r2
   1ce60:	009b      	lsls	r3, r3, #2
   1ce62:	001a      	movs	r2, r3
   1ce64:	683b      	ldr	r3, [r7, #0]
   1ce66:	189b      	adds	r3, r3, r2
   1ce68:	6818      	ldr	r0, [r3, #0]
   1ce6a:	6859      	ldr	r1, [r3, #4]
   1ce6c:	689a      	ldr	r2, [r3, #8]
   1ce6e:	4b09      	ldr	r3, [pc, #36]	; (1ce94 <MQTTSerialize_subscribeLength+0x50>)
   1ce70:	4798      	blx	r3
   1ce72:	0003      	movs	r3, r0
   1ce74:	3303      	adds	r3, #3
   1ce76:	68ba      	ldr	r2, [r7, #8]
   1ce78:	18d3      	adds	r3, r2, r3
   1ce7a:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   1ce7c:	68fb      	ldr	r3, [r7, #12]
   1ce7e:	3301      	adds	r3, #1
   1ce80:	60fb      	str	r3, [r7, #12]
   1ce82:	68fa      	ldr	r2, [r7, #12]
   1ce84:	687b      	ldr	r3, [r7, #4]
   1ce86:	429a      	cmp	r2, r3
   1ce88:	dbe6      	blt.n	1ce58 <MQTTSerialize_subscribeLength+0x14>
	return len;
   1ce8a:	68bb      	ldr	r3, [r7, #8]
}
   1ce8c:	0018      	movs	r0, r3
   1ce8e:	46bd      	mov	sp, r7
   1ce90:	b004      	add	sp, #16
   1ce92:	bd80      	pop	{r7, pc}
   1ce94:	0001cae5 	.word	0x0001cae5

0001ce98 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   1ce98:	b590      	push	{r4, r7, lr}
   1ce9a:	b08b      	sub	sp, #44	; 0x2c
   1ce9c:	af00      	add	r7, sp, #0
   1ce9e:	60f8      	str	r0, [r7, #12]
   1cea0:	60b9      	str	r1, [r7, #8]
   1cea2:	0019      	movs	r1, r3
   1cea4:	1dfb      	adds	r3, r7, #7
   1cea6:	701a      	strb	r2, [r3, #0]
   1cea8:	1d3b      	adds	r3, r7, #4
   1ceaa:	1c0a      	adds	r2, r1, #0
   1ceac:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   1ceae:	68fb      	ldr	r3, [r7, #12]
   1ceb0:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   1ceb2:	2300      	movs	r3, #0
   1ceb4:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   1ceb6:	2300      	movs	r3, #0
   1ceb8:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   1ceba:	2300      	movs	r3, #0
   1cebc:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   1cebe:	2300      	movs	r3, #0
   1cec0:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   1cec2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1cec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cec6:	0011      	movs	r1, r2
   1cec8:	0018      	movs	r0, r3
   1ceca:	4b41      	ldr	r3, [pc, #260]	; (1cfd0 <MQTTSerialize_subscribe+0x138>)
   1cecc:	4798      	blx	r3
   1cece:	0003      	movs	r3, r0
   1ced0:	61fb      	str	r3, [r7, #28]
   1ced2:	69fb      	ldr	r3, [r7, #28]
   1ced4:	0018      	movs	r0, r3
   1ced6:	4b3f      	ldr	r3, [pc, #252]	; (1cfd4 <MQTTSerialize_subscribe+0x13c>)
   1ced8:	4798      	blx	r3
   1ceda:	0002      	movs	r2, r0
   1cedc:	68bb      	ldr	r3, [r7, #8]
   1cede:	429a      	cmp	r2, r3
   1cee0:	dd03      	ble.n	1ceea <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1cee2:	2302      	movs	r3, #2
   1cee4:	425b      	negs	r3, r3
   1cee6:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1cee8:	e06c      	b.n	1cfc4 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   1ceea:	2314      	movs	r3, #20
   1ceec:	18fb      	adds	r3, r7, r3
   1ceee:	2200      	movs	r2, #0
   1cef0:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   1cef2:	2314      	movs	r3, #20
   1cef4:	18fb      	adds	r3, r7, r3
   1cef6:	781a      	ldrb	r2, [r3, #0]
   1cef8:	210f      	movs	r1, #15
   1cefa:	400a      	ands	r2, r1
   1cefc:	1c11      	adds	r1, r2, #0
   1cefe:	2280      	movs	r2, #128	; 0x80
   1cf00:	4252      	negs	r2, r2
   1cf02:	430a      	orrs	r2, r1
   1cf04:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1cf06:	1dfb      	adds	r3, r7, #7
   1cf08:	781b      	ldrb	r3, [r3, #0]
   1cf0a:	2201      	movs	r2, #1
   1cf0c:	4013      	ands	r3, r2
   1cf0e:	b2da      	uxtb	r2, r3
   1cf10:	2314      	movs	r3, #20
   1cf12:	18fb      	adds	r3, r7, r3
   1cf14:	2101      	movs	r1, #1
   1cf16:	400a      	ands	r2, r1
   1cf18:	00d0      	lsls	r0, r2, #3
   1cf1a:	781a      	ldrb	r2, [r3, #0]
   1cf1c:	2108      	movs	r1, #8
   1cf1e:	438a      	bics	r2, r1
   1cf20:	1c11      	adds	r1, r2, #0
   1cf22:	1c02      	adds	r2, r0, #0
   1cf24:	430a      	orrs	r2, r1
   1cf26:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   1cf28:	2314      	movs	r3, #20
   1cf2a:	18fb      	adds	r3, r7, r3
   1cf2c:	781a      	ldrb	r2, [r3, #0]
   1cf2e:	2106      	movs	r1, #6
   1cf30:	438a      	bics	r2, r1
   1cf32:	1c11      	adds	r1, r2, #0
   1cf34:	2202      	movs	r2, #2
   1cf36:	430a      	orrs	r2, r1
   1cf38:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1cf3a:	2314      	movs	r3, #20
   1cf3c:	18fb      	adds	r3, r7, r3
   1cf3e:	781a      	ldrb	r2, [r3, #0]
   1cf40:	2318      	movs	r3, #24
   1cf42:	18fb      	adds	r3, r7, r3
   1cf44:	0011      	movs	r1, r2
   1cf46:	0018      	movs	r0, r3
   1cf48:	4b23      	ldr	r3, [pc, #140]	; (1cfd8 <MQTTSerialize_subscribe+0x140>)
   1cf4a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1cf4c:	69bb      	ldr	r3, [r7, #24]
   1cf4e:	69fa      	ldr	r2, [r7, #28]
   1cf50:	0011      	movs	r1, r2
   1cf52:	0018      	movs	r0, r3
   1cf54:	4b21      	ldr	r3, [pc, #132]	; (1cfdc <MQTTSerialize_subscribe+0x144>)
   1cf56:	4798      	blx	r3
   1cf58:	0002      	movs	r2, r0
   1cf5a:	69bb      	ldr	r3, [r7, #24]
   1cf5c:	189b      	adds	r3, r3, r2
   1cf5e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   1cf60:	1d3b      	adds	r3, r7, #4
   1cf62:	881a      	ldrh	r2, [r3, #0]
   1cf64:	2318      	movs	r3, #24
   1cf66:	18fb      	adds	r3, r7, r3
   1cf68:	0011      	movs	r1, r2
   1cf6a:	0018      	movs	r0, r3
   1cf6c:	4b1c      	ldr	r3, [pc, #112]	; (1cfe0 <MQTTSerialize_subscribe+0x148>)
   1cf6e:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   1cf70:	2300      	movs	r3, #0
   1cf72:	623b      	str	r3, [r7, #32]
   1cf74:	e01d      	b.n	1cfb2 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   1cf76:	6a3a      	ldr	r2, [r7, #32]
   1cf78:	0013      	movs	r3, r2
   1cf7a:	005b      	lsls	r3, r3, #1
   1cf7c:	189b      	adds	r3, r3, r2
   1cf7e:	009b      	lsls	r3, r3, #2
   1cf80:	001a      	movs	r2, r3
   1cf82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1cf84:	189b      	adds	r3, r3, r2
   1cf86:	2218      	movs	r2, #24
   1cf88:	18b8      	adds	r0, r7, r2
   1cf8a:	6819      	ldr	r1, [r3, #0]
   1cf8c:	685a      	ldr	r2, [r3, #4]
   1cf8e:	689b      	ldr	r3, [r3, #8]
   1cf90:	4c14      	ldr	r4, [pc, #80]	; (1cfe4 <MQTTSerialize_subscribe+0x14c>)
   1cf92:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   1cf94:	6a3b      	ldr	r3, [r7, #32]
   1cf96:	009b      	lsls	r3, r3, #2
   1cf98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1cf9a:	18d3      	adds	r3, r2, r3
   1cf9c:	681b      	ldr	r3, [r3, #0]
   1cf9e:	b2da      	uxtb	r2, r3
   1cfa0:	2318      	movs	r3, #24
   1cfa2:	18fb      	adds	r3, r7, r3
   1cfa4:	0011      	movs	r1, r2
   1cfa6:	0018      	movs	r0, r3
   1cfa8:	4b0b      	ldr	r3, [pc, #44]	; (1cfd8 <MQTTSerialize_subscribe+0x140>)
   1cfaa:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   1cfac:	6a3b      	ldr	r3, [r7, #32]
   1cfae:	3301      	adds	r3, #1
   1cfb0:	623b      	str	r3, [r7, #32]
   1cfb2:	6a3a      	ldr	r2, [r7, #32]
   1cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cfb6:	429a      	cmp	r2, r3
   1cfb8:	dbdd      	blt.n	1cf76 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   1cfba:	69bb      	ldr	r3, [r7, #24]
   1cfbc:	001a      	movs	r2, r3
   1cfbe:	68fb      	ldr	r3, [r7, #12]
   1cfc0:	1ad3      	subs	r3, r2, r3
   1cfc2:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1cfc6:	0018      	movs	r0, r3
   1cfc8:	46bd      	mov	sp, r7
   1cfca:	b00b      	add	sp, #44	; 0x2c
   1cfcc:	bd90      	pop	{r4, r7, pc}
   1cfce:	46c0      	nop			; (mov r8, r8)
   1cfd0:	0001ce45 	.word	0x0001ce45
   1cfd4:	0001c809 	.word	0x0001c809
   1cfd8:	0001c92b 	.word	0x0001c92b
   1cfdc:	0001c711 	.word	0x0001c711
   1cfe0:	0001c955 	.word	0x0001c955
   1cfe4:	0001c9fd 	.word	0x0001c9fd

0001cfe8 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   1cfe8:	b590      	push	{r4, r7, lr}
   1cfea:	b08b      	sub	sp, #44	; 0x2c
   1cfec:	af00      	add	r7, sp, #0
   1cfee:	60f8      	str	r0, [r7, #12]
   1cff0:	60b9      	str	r1, [r7, #8]
   1cff2:	607a      	str	r2, [r7, #4]
   1cff4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1cff6:	2300      	movs	r3, #0
   1cff8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1cffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cffc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1cffe:	2300      	movs	r3, #0
   1d000:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1d002:	2300      	movs	r3, #0
   1d004:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1d006:	2318      	movs	r3, #24
   1d008:	18fb      	adds	r3, r7, r3
   1d00a:	0018      	movs	r0, r3
   1d00c:	4b2c      	ldr	r3, [pc, #176]	; (1d0c0 <MQTTDeserialize_suback+0xd8>)
   1d00e:	4798      	blx	r3
   1d010:	0003      	movs	r3, r0
   1d012:	001a      	movs	r2, r3
   1d014:	231c      	movs	r3, #28
   1d016:	18fb      	adds	r3, r7, r3
   1d018:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   1d01a:	231c      	movs	r3, #28
   1d01c:	18fb      	adds	r3, r7, r3
   1d01e:	781b      	ldrb	r3, [r3, #0]
   1d020:	220f      	movs	r2, #15
   1d022:	4393      	bics	r3, r2
   1d024:	b2db      	uxtb	r3, r3
   1d026:	2b90      	cmp	r3, #144	; 0x90
   1d028:	d142      	bne.n	1d0b0 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1d02a:	69bb      	ldr	r3, [r7, #24]
   1d02c:	2214      	movs	r2, #20
   1d02e:	18ba      	adds	r2, r7, r2
   1d030:	0011      	movs	r1, r2
   1d032:	0018      	movs	r0, r3
   1d034:	4b23      	ldr	r3, [pc, #140]	; (1d0c4 <MQTTDeserialize_suback+0xdc>)
   1d036:	4798      	blx	r3
   1d038:	0003      	movs	r3, r0
   1d03a:	627b      	str	r3, [r7, #36]	; 0x24
   1d03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d03e:	69bb      	ldr	r3, [r7, #24]
   1d040:	189b      	adds	r3, r3, r2
   1d042:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1d044:	69bb      	ldr	r3, [r7, #24]
   1d046:	697a      	ldr	r2, [r7, #20]
   1d048:	189b      	adds	r3, r3, r2
   1d04a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1d04c:	6a3b      	ldr	r3, [r7, #32]
   1d04e:	69ba      	ldr	r2, [r7, #24]
   1d050:	1a9b      	subs	r3, r3, r2
   1d052:	2b01      	cmp	r3, #1
   1d054:	dd2e      	ble.n	1d0b4 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   1d056:	2318      	movs	r3, #24
   1d058:	18fb      	adds	r3, r7, r3
   1d05a:	0018      	movs	r0, r3
   1d05c:	4b1a      	ldr	r3, [pc, #104]	; (1d0c8 <MQTTDeserialize_suback+0xe0>)
   1d05e:	4798      	blx	r3
   1d060:	0003      	movs	r3, r0
   1d062:	b29a      	uxth	r2, r3
   1d064:	68fb      	ldr	r3, [r7, #12]
   1d066:	801a      	strh	r2, [r3, #0]

	*count = 0;
   1d068:	687b      	ldr	r3, [r7, #4]
   1d06a:	2200      	movs	r2, #0
   1d06c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   1d06e:	e018      	b.n	1d0a2 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   1d070:	687b      	ldr	r3, [r7, #4]
   1d072:	681a      	ldr	r2, [r3, #0]
   1d074:	68bb      	ldr	r3, [r7, #8]
   1d076:	429a      	cmp	r2, r3
   1d078:	dd03      	ble.n	1d082 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   1d07a:	2301      	movs	r3, #1
   1d07c:	425b      	negs	r3, r3
   1d07e:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   1d080:	e019      	b.n	1d0b6 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   1d082:	687b      	ldr	r3, [r7, #4]
   1d084:	681a      	ldr	r2, [r3, #0]
   1d086:	1c51      	adds	r1, r2, #1
   1d088:	687b      	ldr	r3, [r7, #4]
   1d08a:	6019      	str	r1, [r3, #0]
   1d08c:	0013      	movs	r3, r2
   1d08e:	009b      	lsls	r3, r3, #2
   1d090:	683a      	ldr	r2, [r7, #0]
   1d092:	18d4      	adds	r4, r2, r3
   1d094:	2318      	movs	r3, #24
   1d096:	18fb      	adds	r3, r7, r3
   1d098:	0018      	movs	r0, r3
   1d09a:	4b09      	ldr	r3, [pc, #36]	; (1d0c0 <MQTTDeserialize_suback+0xd8>)
   1d09c:	4798      	blx	r3
   1d09e:	0003      	movs	r3, r0
   1d0a0:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   1d0a2:	69ba      	ldr	r2, [r7, #24]
   1d0a4:	6a3b      	ldr	r3, [r7, #32]
   1d0a6:	429a      	cmp	r2, r3
   1d0a8:	d3e2      	bcc.n	1d070 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   1d0aa:	2301      	movs	r3, #1
   1d0ac:	627b      	str	r3, [r7, #36]	; 0x24
   1d0ae:	e002      	b.n	1d0b6 <MQTTDeserialize_suback+0xce>
		goto exit;
   1d0b0:	46c0      	nop			; (mov r8, r8)
   1d0b2:	e000      	b.n	1d0b6 <MQTTDeserialize_suback+0xce>
		goto exit;
   1d0b4:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1d0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d0b8:	0018      	movs	r0, r3
   1d0ba:	46bd      	mov	sp, r7
   1d0bc:	b00b      	add	sp, #44	; 0x2c
   1d0be:	bd90      	pop	{r4, r7, pc}
   1d0c0:	0001c8ff 	.word	0x0001c8ff
   1d0c4:	0001c899 	.word	0x0001c899
   1d0c8:	0001c8cd 	.word	0x0001c8cd

0001d0cc <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   1d0cc:	b580      	push	{r7, lr}
   1d0ce:	b082      	sub	sp, #8
   1d0d0:	af00      	add	r7, sp, #0
   1d0d2:	6078      	str	r0, [r7, #4]
	config->port = 80;
   1d0d4:	687b      	ldr	r3, [r7, #4]
   1d0d6:	2250      	movs	r2, #80	; 0x50
   1d0d8:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   1d0da:	687b      	ldr	r3, [r7, #4]
   1d0dc:	2200      	movs	r2, #0
   1d0de:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   1d0e0:	687b      	ldr	r3, [r7, #4]
   1d0e2:	4a0b      	ldr	r2, [pc, #44]	; (1d110 <http_client_get_config_defaults+0x44>)
   1d0e4:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   1d0e6:	687b      	ldr	r3, [r7, #4]
   1d0e8:	2200      	movs	r2, #0
   1d0ea:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   1d0ec:	687b      	ldr	r3, [r7, #4]
   1d0ee:	2200      	movs	r2, #0
   1d0f0:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   1d0f2:	687b      	ldr	r3, [r7, #4]
   1d0f4:	2280      	movs	r2, #128	; 0x80
   1d0f6:	0052      	lsls	r2, r2, #1
   1d0f8:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   1d0fa:	687b      	ldr	r3, [r7, #4]
   1d0fc:	2252      	movs	r2, #82	; 0x52
   1d0fe:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   1d100:	687b      	ldr	r3, [r7, #4]
   1d102:	4a04      	ldr	r2, [pc, #16]	; (1d114 <http_client_get_config_defaults+0x48>)
   1d104:	619a      	str	r2, [r3, #24]
}
   1d106:	46c0      	nop			; (mov r8, r8)
   1d108:	46bd      	mov	sp, r7
   1d10a:	b002      	add	sp, #8
   1d10c:	bd80      	pop	{r7, pc}
   1d10e:	46c0      	nop			; (mov r8, r8)
   1d110:	00004e20 	.word	0x00004e20
   1d114:	00025eac 	.word	0x00025eac

0001d118 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   1d118:	b590      	push	{r4, r7, lr}
   1d11a:	b083      	sub	sp, #12
   1d11c:	af00      	add	r7, sp, #0
   1d11e:	6078      	str	r0, [r7, #4]
   1d120:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   1d122:	687b      	ldr	r3, [r7, #4]
   1d124:	2b00      	cmp	r3, #0
   1d126:	d002      	beq.n	1d12e <http_client_init+0x16>
   1d128:	683b      	ldr	r3, [r7, #0]
   1d12a:	2b00      	cmp	r3, #0
   1d12c:	d102      	bne.n	1d134 <http_client_init+0x1c>
		return -EINVAL;
   1d12e:	2316      	movs	r3, #22
   1d130:	425b      	negs	r3, r3
   1d132:	e058      	b.n	1d1e6 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   1d134:	683b      	ldr	r3, [r7, #0]
   1d136:	691b      	ldr	r3, [r3, #16]
   1d138:	2b00      	cmp	r3, #0
   1d13a:	d102      	bne.n	1d142 <http_client_init+0x2a>
		return -EINVAL;
   1d13c:	2316      	movs	r3, #22
   1d13e:	425b      	negs	r3, r3
   1d140:	e051      	b.n	1d1e6 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   1d142:	683b      	ldr	r3, [r7, #0]
   1d144:	685b      	ldr	r3, [r3, #4]
   1d146:	2b00      	cmp	r3, #0
   1d148:	d102      	bne.n	1d150 <http_client_init+0x38>
		return -EINVAL;
   1d14a:	2316      	movs	r3, #22
   1d14c:	425b      	negs	r3, r3
   1d14e:	e04a      	b.n	1d1e6 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   1d150:	683b      	ldr	r3, [r7, #0]
   1d152:	695b      	ldr	r3, [r3, #20]
   1d154:	2b51      	cmp	r3, #81	; 0x51
   1d156:	d802      	bhi.n	1d15e <http_client_init+0x46>
		return -EINVAL;
   1d158:	2316      	movs	r3, #22
   1d15a:	425b      	negs	r3, r3
   1d15c:	e043      	b.n	1d1e6 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   1d15e:	687b      	ldr	r3, [r7, #4]
   1d160:	22e8      	movs	r2, #232	; 0xe8
   1d162:	2100      	movs	r1, #0
   1d164:	0018      	movs	r0, r3
   1d166:	4b22      	ldr	r3, [pc, #136]	; (1d1f0 <http_client_init+0xd8>)
   1d168:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   1d16a:	687b      	ldr	r3, [r7, #4]
   1d16c:	3350      	adds	r3, #80	; 0x50
   1d16e:	6839      	ldr	r1, [r7, #0]
   1d170:	221c      	movs	r2, #28
   1d172:	0018      	movs	r0, r3
   1d174:	4b1f      	ldr	r3, [pc, #124]	; (1d1f4 <http_client_init+0xdc>)
   1d176:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   1d178:	687b      	ldr	r3, [r7, #4]
   1d17a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1d17c:	2b00      	cmp	r3, #0
   1d17e:	d115      	bne.n	1d1ac <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   1d180:	683b      	ldr	r3, [r7, #0]
   1d182:	691b      	ldr	r3, [r3, #16]
   1d184:	0018      	movs	r0, r3
   1d186:	4b1c      	ldr	r3, [pc, #112]	; (1d1f8 <http_client_init+0xe0>)
   1d188:	4798      	blx	r3
   1d18a:	0003      	movs	r3, r0
   1d18c:	001a      	movs	r2, r3
   1d18e:	687b      	ldr	r3, [r7, #4]
   1d190:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   1d192:	687b      	ldr	r3, [r7, #4]
   1d194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1d196:	2b00      	cmp	r3, #0
   1d198:	d102      	bne.n	1d1a0 <http_client_init+0x88>
			return -ENOMEM;
   1d19a:	230c      	movs	r3, #12
   1d19c:	425b      	negs	r3, r3
   1d19e:	e022      	b.n	1d1e6 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   1d1a0:	687b      	ldr	r3, [r7, #4]
   1d1a2:	2241      	movs	r2, #65	; 0x41
   1d1a4:	5c99      	ldrb	r1, [r3, r2]
   1d1a6:	2004      	movs	r0, #4
   1d1a8:	4301      	orrs	r1, r0
   1d1aa:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   1d1ac:	683b      	ldr	r3, [r7, #0]
   1d1ae:	891b      	ldrh	r3, [r3, #8]
   1d1b0:	2b00      	cmp	r3, #0
   1d1b2:	d010      	beq.n	1d1d6 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   1d1b4:	683b      	ldr	r3, [r7, #0]
   1d1b6:	6858      	ldr	r0, [r3, #4]
   1d1b8:	687a      	ldr	r2, [r7, #4]
   1d1ba:	4910      	ldr	r1, [pc, #64]	; (1d1fc <http_client_init+0xe4>)
   1d1bc:	2300      	movs	r3, #0
   1d1be:	4c10      	ldr	r4, [pc, #64]	; (1d200 <http_client_init+0xe8>)
   1d1c0:	47a0      	blx	r4
   1d1c2:	0002      	movs	r2, r0
   1d1c4:	687b      	ldr	r3, [r7, #4]
   1d1c6:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   1d1c8:	687b      	ldr	r3, [r7, #4]
   1d1ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d1cc:	2b00      	cmp	r3, #0
   1d1ce:	da02      	bge.n	1d1d6 <http_client_init+0xbe>
			return -ENOSPC;
   1d1d0:	231c      	movs	r3, #28
   1d1d2:	425b      	negs	r3, r3
   1d1d4:	e007      	b.n	1d1e6 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   1d1d6:	687b      	ldr	r3, [r7, #4]
   1d1d8:	2200      	movs	r2, #0
   1d1da:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1d1dc:	687b      	ldr	r3, [r7, #4]
   1d1de:	22d8      	movs	r2, #216	; 0xd8
   1d1e0:	2100      	movs	r1, #0
   1d1e2:	5099      	str	r1, [r3, r2]

	return 0;
   1d1e4:	2300      	movs	r3, #0
}
   1d1e6:	0018      	movs	r0, r3
   1d1e8:	46bd      	mov	sp, r7
   1d1ea:	b003      	add	sp, #12
   1d1ec:	bd90      	pop	{r4, r7, pc}
   1d1ee:	46c0      	nop			; (mov r8, r8)
   1d1f0:	00020f1f 	.word	0x00020f1f
   1d1f4:	00020ee9 	.word	0x00020ee9
   1d1f8:	00020ec1 	.word	0x00020ec1
   1d1fc:	0001d4c9 	.word	0x0001d4c9
   1d200:	0001eb6d 	.word	0x0001eb6d

0001d204 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   1d204:	b580      	push	{r7, lr}
   1d206:	b082      	sub	sp, #8
   1d208:	af00      	add	r7, sp, #0
   1d20a:	6078      	str	r0, [r7, #4]
   1d20c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   1d20e:	687b      	ldr	r3, [r7, #4]
   1d210:	2b00      	cmp	r3, #0
   1d212:	d102      	bne.n	1d21a <http_client_register_callback+0x16>
		return -EINVAL;
   1d214:	2316      	movs	r3, #22
   1d216:	425b      	negs	r3, r3
   1d218:	e003      	b.n	1d222 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   1d21a:	687b      	ldr	r3, [r7, #4]
   1d21c:	683a      	ldr	r2, [r7, #0]
   1d21e:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   1d220:	2300      	movs	r3, #0
}
   1d222:	0018      	movs	r0, r3
   1d224:	46bd      	mov	sp, r7
   1d226:	b002      	add	sp, #8
   1d228:	bd80      	pop	{r7, pc}
	...

0001d22c <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   1d22c:	b580      	push	{r7, lr}
   1d22e:	b082      	sub	sp, #8
   1d230:	af00      	add	r7, sp, #0
   1d232:	6078      	str	r0, [r7, #4]
	switch (err) {
   1d234:	687b      	ldr	r3, [r7, #4]
   1d236:	330e      	adds	r3, #14
   1d238:	2b0e      	cmp	r3, #14
   1d23a:	d825      	bhi.n	1d288 <_hwerr_to_stderr+0x5c>
   1d23c:	009a      	lsls	r2, r3, #2
   1d23e:	4b18      	ldr	r3, [pc, #96]	; (1d2a0 <_hwerr_to_stderr+0x74>)
   1d240:	18d3      	adds	r3, r2, r3
   1d242:	681b      	ldr	r3, [r3, #0]
   1d244:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   1d246:	2305      	movs	r3, #5
   1d248:	425b      	negs	r3, r3
   1d24a:	e024      	b.n	1d296 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   1d24c:	2302      	movs	r3, #2
   1d24e:	425b      	negs	r3, r3
   1d250:	e021      	b.n	1d296 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   1d252:	2370      	movs	r3, #112	; 0x70
   1d254:	425b      	negs	r3, r3
   1d256:	e01e      	b.n	1d296 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   1d258:	230c      	movs	r3, #12
   1d25a:	425b      	negs	r3, r3
   1d25c:	e01b      	b.n	1d296 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   1d25e:	2316      	movs	r3, #22
   1d260:	425b      	negs	r3, r3
   1d262:	e018      	b.n	1d296 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   1d264:	230c      	movs	r3, #12
   1d266:	425b      	negs	r3, r3
   1d268:	e015      	b.n	1d296 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   1d26a:	2305      	movs	r3, #5
   1d26c:	425b      	negs	r3, r3
   1d26e:	e012      	b.n	1d296 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   1d270:	2379      	movs	r3, #121	; 0x79
   1d272:	425b      	negs	r3, r3
   1d274:	e00f      	b.n	1d296 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   1d276:	2368      	movs	r3, #104	; 0x68
   1d278:	425b      	negs	r3, r3
   1d27a:	e00c      	b.n	1d296 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   1d27c:	230b      	movs	r3, #11
   1d27e:	425b      	negs	r3, r3
   1d280:	e009      	b.n	1d296 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   1d282:	2310      	movs	r3, #16
   1d284:	425b      	negs	r3, r3
   1d286:	e006      	b.n	1d296 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   1d288:	687b      	ldr	r3, [r7, #4]
   1d28a:	2b00      	cmp	r3, #0
   1d28c:	da02      	bge.n	1d294 <_hwerr_to_stderr+0x68>
				return -EIO;
   1d28e:	2305      	movs	r3, #5
   1d290:	425b      	negs	r3, r3
   1d292:	e000      	b.n	1d296 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   1d294:	2300      	movs	r3, #0
	}
}
   1d296:	0018      	movs	r0, r3
   1d298:	46bd      	mov	sp, r7
   1d29a:	b002      	add	sp, #8
   1d29c:	bd80      	pop	{r7, pc}
   1d29e:	46c0      	nop			; (mov r8, r8)
   1d2a0:	00025fe8 	.word	0x00025fe8

0001d2a4 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1d2a4:	b580      	push	{r7, lr}
   1d2a6:	b08a      	sub	sp, #40	; 0x28
   1d2a8:	af00      	add	r7, sp, #0
   1d2aa:	603a      	str	r2, [r7, #0]
   1d2ac:	1dfb      	adds	r3, r7, #7
   1d2ae:	1c02      	adds	r2, r0, #0
   1d2b0:	701a      	strb	r2, [r3, #0]
   1d2b2:	1dbb      	adds	r3, r7, #6
   1d2b4:	1c0a      	adds	r2, r1, #0
   1d2b6:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   1d2b8:	1dfb      	adds	r3, r7, #7
   1d2ba:	2200      	movs	r2, #0
   1d2bc:	569a      	ldrsb	r2, [r3, r2]
   1d2be:	4b4b      	ldr	r3, [pc, #300]	; (1d3ec <http_client_socket_event_handler+0x148>)
   1d2c0:	0092      	lsls	r2, r2, #2
   1d2c2:	58d3      	ldr	r3, [r2, r3]
   1d2c4:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   1d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d2c8:	2b00      	cmp	r3, #0
   1d2ca:	d100      	bne.n	1d2ce <http_client_socket_event_handler+0x2a>
   1d2cc:	e08a      	b.n	1d3e4 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   1d2ce:	1dbb      	adds	r3, r7, #6
   1d2d0:	781b      	ldrb	r3, [r3, #0]
   1d2d2:	2b06      	cmp	r3, #6
   1d2d4:	d040      	beq.n	1d358 <http_client_socket_event_handler+0xb4>
   1d2d6:	2b07      	cmp	r3, #7
   1d2d8:	d060      	beq.n	1d39c <http_client_socket_event_handler+0xf8>
   1d2da:	2b05      	cmp	r3, #5
   1d2dc:	d000      	beq.n	1d2e0 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   1d2de:	e082      	b.n	1d3e6 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   1d2e0:	683b      	ldr	r3, [r7, #0]
   1d2e2:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   1d2e4:	6a3b      	ldr	r3, [r7, #32]
   1d2e6:	785b      	ldrb	r3, [r3, #1]
   1d2e8:	b25b      	sxtb	r3, r3
   1d2ea:	001a      	movs	r2, r3
   1d2ec:	230c      	movs	r3, #12
   1d2ee:	18fb      	adds	r3, r7, r3
   1d2f0:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   1d2f2:	6a3b      	ldr	r3, [r7, #32]
   1d2f4:	785b      	ldrb	r3, [r3, #1]
   1d2f6:	b25b      	sxtb	r3, r3
   1d2f8:	2b00      	cmp	r3, #0
   1d2fa:	da0c      	bge.n	1d316 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   1d2fc:	6a3b      	ldr	r3, [r7, #32]
   1d2fe:	785b      	ldrb	r3, [r3, #1]
   1d300:	b25b      	sxtb	r3, r3
   1d302:	0018      	movs	r0, r3
   1d304:	4b3a      	ldr	r3, [pc, #232]	; (1d3f0 <http_client_socket_event_handler+0x14c>)
   1d306:	4798      	blx	r3
   1d308:	0002      	movs	r2, r0
   1d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d30c:	0011      	movs	r1, r2
   1d30e:	0018      	movs	r0, r3
   1d310:	4b38      	ldr	r3, [pc, #224]	; (1d3f4 <http_client_socket_event_handler+0x150>)
   1d312:	4798      	blx	r3
    	break;
   1d314:	e067      	b.n	1d3e6 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   1d316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d31a:	2b00      	cmp	r3, #0
   1d31c:	d006      	beq.n	1d32c <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   1d31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d322:	220c      	movs	r2, #12
   1d324:	18ba      	adds	r2, r7, r2
   1d326:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1d328:	2100      	movs	r1, #0
   1d32a:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   1d32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d32e:	2203      	movs	r2, #3
   1d330:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   1d332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d334:	6d58      	ldr	r0, [r3, #84]	; 0x54
   1d336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d338:	6c99      	ldr	r1, [r3, #72]	; 0x48
   1d33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d33c:	2258      	movs	r2, #88	; 0x58
   1d33e:	5a9b      	ldrh	r3, [r3, r2]
   1d340:	001a      	movs	r2, r3
   1d342:	4b2d      	ldr	r3, [pc, #180]	; (1d3f8 <http_client_socket_event_handler+0x154>)
   1d344:	4798      	blx	r3
    		_http_client_recv_packet(module);
   1d346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d348:	0018      	movs	r0, r3
   1d34a:	4b2c      	ldr	r3, [pc, #176]	; (1d3fc <http_client_socket_event_handler+0x158>)
   1d34c:	4798      	blx	r3
			_http_client_request(module);
   1d34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d350:	0018      	movs	r0, r3
   1d352:	4b2b      	ldr	r3, [pc, #172]	; (1d400 <http_client_socket_event_handler+0x15c>)
   1d354:	4798      	blx	r3
    	break;
   1d356:	e046      	b.n	1d3e6 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   1d358:	683b      	ldr	r3, [r7, #0]
   1d35a:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   1d35c:	69fb      	ldr	r3, [r7, #28]
   1d35e:	2204      	movs	r2, #4
   1d360:	5e9b      	ldrsh	r3, [r3, r2]
   1d362:	2b00      	cmp	r3, #0
   1d364:	dd09      	ble.n	1d37a <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   1d366:	69fb      	ldr	r3, [r7, #28]
   1d368:	2204      	movs	r2, #4
   1d36a:	5e9b      	ldrsh	r3, [r3, r2]
   1d36c:	001a      	movs	r2, r3
   1d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d370:	0011      	movs	r1, r2
   1d372:	0018      	movs	r0, r3
   1d374:	4b23      	ldr	r3, [pc, #140]	; (1d404 <http_client_socket_event_handler+0x160>)
   1d376:	4798      	blx	r3
   1d378:	e00b      	b.n	1d392 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   1d37a:	69fb      	ldr	r3, [r7, #28]
   1d37c:	2204      	movs	r2, #4
   1d37e:	5e9b      	ldrsh	r3, [r3, r2]
   1d380:	0018      	movs	r0, r3
   1d382:	4b1b      	ldr	r3, [pc, #108]	; (1d3f0 <http_client_socket_event_handler+0x14c>)
   1d384:	4798      	blx	r3
   1d386:	0002      	movs	r2, r0
   1d388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d38a:	0011      	movs	r1, r2
   1d38c:	0018      	movs	r0, r3
   1d38e:	4b19      	ldr	r3, [pc, #100]	; (1d3f4 <http_client_socket_event_handler+0x150>)
   1d390:	4798      	blx	r3
		_http_client_recv_packet(module);
   1d392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d394:	0018      	movs	r0, r3
   1d396:	4b19      	ldr	r3, [pc, #100]	; (1d3fc <http_client_socket_event_handler+0x158>)
   1d398:	4798      	blx	r3
		break;
   1d39a:	e024      	b.n	1d3e6 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   1d39c:	231a      	movs	r3, #26
   1d39e:	18fb      	adds	r3, r7, r3
   1d3a0:	683a      	ldr	r2, [r7, #0]
   1d3a2:	8812      	ldrh	r2, [r2, #0]
   1d3a4:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   1d3a6:	231a      	movs	r3, #26
   1d3a8:	18fb      	adds	r3, r7, r3
   1d3aa:	2200      	movs	r2, #0
   1d3ac:	5e9b      	ldrsh	r3, [r3, r2]
   1d3ae:	2b00      	cmp	r3, #0
   1d3b0:	da0d      	bge.n	1d3ce <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   1d3b2:	231a      	movs	r3, #26
   1d3b4:	18fb      	adds	r3, r7, r3
   1d3b6:	2200      	movs	r2, #0
   1d3b8:	5e9b      	ldrsh	r3, [r3, r2]
   1d3ba:	0018      	movs	r0, r3
   1d3bc:	4b0c      	ldr	r3, [pc, #48]	; (1d3f0 <http_client_socket_event_handler+0x14c>)
   1d3be:	4798      	blx	r3
   1d3c0:	0002      	movs	r2, r0
   1d3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d3c4:	0011      	movs	r1, r2
   1d3c6:	0018      	movs	r0, r3
   1d3c8:	4b0a      	ldr	r3, [pc, #40]	; (1d3f4 <http_client_socket_event_handler+0x150>)
   1d3ca:	4798      	blx	r3
   1d3cc:	e003      	b.n	1d3d6 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   1d3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d3d0:	0018      	movs	r0, r3
   1d3d2:	4b0b      	ldr	r3, [pc, #44]	; (1d400 <http_client_socket_event_handler+0x15c>)
   1d3d4:	4798      	blx	r3
		module->sending = 0;
   1d3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d3d8:	2241      	movs	r2, #65	; 0x41
   1d3da:	5c99      	ldrb	r1, [r3, r2]
   1d3dc:	2001      	movs	r0, #1
   1d3de:	4381      	bics	r1, r0
   1d3e0:	5499      	strb	r1, [r3, r2]
    	break;
   1d3e2:	e000      	b.n	1d3e6 <http_client_socket_event_handler+0x142>
		return;
   1d3e4:	46c0      	nop			; (mov r8, r8)
	}

}
   1d3e6:	46bd      	mov	sp, r7
   1d3e8:	b00a      	add	sp, #40	; 0x28
   1d3ea:	bd80      	pop	{r7, pc}
   1d3ec:	20004180 	.word	0x20004180
   1d3f0:	0001d22d 	.word	0x0001d22d
   1d3f4:	0001d8a1 	.word	0x0001d8a1
   1d3f8:	0001ebfd 	.word	0x0001ebfd
   1d3fc:	0001e12d 	.word	0x0001e12d
   1d400:	0001d9f5 	.word	0x0001d9f5
   1d404:	0001e191 	.word	0x0001e191

0001d408 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   1d408:	b580      	push	{r7, lr}
   1d40a:	b088      	sub	sp, #32
   1d40c:	af00      	add	r7, sp, #0
   1d40e:	6078      	str	r0, [r7, #4]
   1d410:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1d412:	2300      	movs	r3, #0
   1d414:	61fb      	str	r3, [r7, #28]
   1d416:	e048      	b.n	1d4aa <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   1d418:	4b27      	ldr	r3, [pc, #156]	; (1d4b8 <http_client_socket_resolve_handler+0xb0>)
   1d41a:	69fa      	ldr	r2, [r7, #28]
   1d41c:	0092      	lsls	r2, r2, #2
   1d41e:	58d3      	ldr	r3, [r2, r3]
   1d420:	2b00      	cmp	r3, #0
   1d422:	d03f      	beq.n	1d4a4 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   1d424:	4b24      	ldr	r3, [pc, #144]	; (1d4b8 <http_client_socket_resolve_handler+0xb0>)
   1d426:	69fa      	ldr	r2, [r7, #28]
   1d428:	0092      	lsls	r2, r2, #2
   1d42a:	58d3      	ldr	r3, [r2, r3]
   1d42c:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   1d42e:	69bb      	ldr	r3, [r7, #24]
   1d430:	1c5a      	adds	r2, r3, #1
   1d432:	687b      	ldr	r3, [r7, #4]
   1d434:	0011      	movs	r1, r2
   1d436:	0018      	movs	r0, r3
   1d438:	4b20      	ldr	r3, [pc, #128]	; (1d4bc <http_client_socket_resolve_handler+0xb4>)
   1d43a:	4798      	blx	r3
   1d43c:	1e03      	subs	r3, r0, #0
   1d43e:	d131      	bne.n	1d4a4 <http_client_socket_resolve_handler+0x9c>
   1d440:	69bb      	ldr	r3, [r7, #24]
   1d442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1d444:	2b01      	cmp	r3, #1
   1d446:	d12d      	bne.n	1d4a4 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   1d448:	683b      	ldr	r3, [r7, #0]
   1d44a:	2b00      	cmp	r3, #0
   1d44c:	d107      	bne.n	1d45e <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   1d44e:	2376      	movs	r3, #118	; 0x76
   1d450:	425a      	negs	r2, r3
   1d452:	69bb      	ldr	r3, [r7, #24]
   1d454:	0011      	movs	r1, r2
   1d456:	0018      	movs	r0, r3
   1d458:	4b19      	ldr	r3, [pc, #100]	; (1d4c0 <http_client_socket_resolve_handler+0xb8>)
   1d45a:	4798      	blx	r3
					return;
   1d45c:	e028      	b.n	1d4b0 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   1d45e:	2308      	movs	r3, #8
   1d460:	18fb      	adds	r3, r7, r3
   1d462:	2202      	movs	r2, #2
   1d464:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   1d466:	69bb      	ldr	r3, [r7, #24]
   1d468:	2250      	movs	r2, #80	; 0x50
   1d46a:	5a9b      	ldrh	r3, [r3, r2]
   1d46c:	021b      	lsls	r3, r3, #8
   1d46e:	b21a      	sxth	r2, r3
   1d470:	69bb      	ldr	r3, [r7, #24]
   1d472:	2150      	movs	r1, #80	; 0x50
   1d474:	5a5b      	ldrh	r3, [r3, r1]
   1d476:	0a1b      	lsrs	r3, r3, #8
   1d478:	b29b      	uxth	r3, r3
   1d47a:	b21b      	sxth	r3, r3
   1d47c:	4313      	orrs	r3, r2
   1d47e:	b21b      	sxth	r3, r3
   1d480:	b29a      	uxth	r2, r3
   1d482:	2308      	movs	r3, #8
   1d484:	18fb      	adds	r3, r7, r3
   1d486:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   1d488:	2308      	movs	r3, #8
   1d48a:	18fb      	adds	r3, r7, r3
   1d48c:	683a      	ldr	r2, [r7, #0]
   1d48e:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1d490:	69bb      	ldr	r3, [r7, #24]
   1d492:	781b      	ldrb	r3, [r3, #0]
   1d494:	b25b      	sxtb	r3, r3
   1d496:	2208      	movs	r2, #8
   1d498:	18b9      	adds	r1, r7, r2
   1d49a:	2210      	movs	r2, #16
   1d49c:	0018      	movs	r0, r3
   1d49e:	4b09      	ldr	r3, [pc, #36]	; (1d4c4 <http_client_socket_resolve_handler+0xbc>)
   1d4a0:	4798      	blx	r3
				return;
   1d4a2:	e005      	b.n	1d4b0 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1d4a4:	69fb      	ldr	r3, [r7, #28]
   1d4a6:	3301      	adds	r3, #1
   1d4a8:	61fb      	str	r3, [r7, #28]
   1d4aa:	69fb      	ldr	r3, [r7, #28]
   1d4ac:	2b06      	cmp	r3, #6
   1d4ae:	ddb3      	ble.n	1d418 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   1d4b0:	46bd      	mov	sp, r7
   1d4b2:	b008      	add	sp, #32
   1d4b4:	bd80      	pop	{r7, pc}
   1d4b6:	46c0      	nop			; (mov r8, r8)
   1d4b8:	20004180 	.word	0x20004180
   1d4bc:	00021277 	.word	0x00021277
   1d4c0:	0001d8a1 	.word	0x0001d8a1
   1d4c4:	00011dc5 	.word	0x00011dc5

0001d4c8 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   1d4c8:	b580      	push	{r7, lr}
   1d4ca:	b086      	sub	sp, #24
   1d4cc:	af00      	add	r7, sp, #0
   1d4ce:	60f8      	str	r0, [r7, #12]
   1d4d0:	60b9      	str	r1, [r7, #8]
   1d4d2:	607a      	str	r2, [r7, #4]
   1d4d4:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   1d4d6:	687b      	ldr	r3, [r7, #4]
   1d4d8:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   1d4da:	697b      	ldr	r3, [r7, #20]
   1d4dc:	2b00      	cmp	r3, #0
   1d4de:	d007      	beq.n	1d4f0 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   1d4e0:	233e      	movs	r3, #62	; 0x3e
   1d4e2:	425a      	negs	r2, r3
   1d4e4:	697b      	ldr	r3, [r7, #20]
   1d4e6:	0011      	movs	r1, r2
   1d4e8:	0018      	movs	r0, r3
   1d4ea:	4b03      	ldr	r3, [pc, #12]	; (1d4f8 <http_client_timer_callback+0x30>)
   1d4ec:	4798      	blx	r3
   1d4ee:	e000      	b.n	1d4f2 <http_client_timer_callback+0x2a>
		return;
   1d4f0:	46c0      	nop			; (mov r8, r8)
}
   1d4f2:	46bd      	mov	sp, r7
   1d4f4:	b006      	add	sp, #24
   1d4f6:	bd80      	pop	{r7, pc}
   1d4f8:	0001d8a1 	.word	0x0001d8a1

0001d4fc <_is_ip>:

static int _is_ip(const char *host)
{
   1d4fc:	b580      	push	{r7, lr}
   1d4fe:	b084      	sub	sp, #16
   1d500:	af00      	add	r7, sp, #0
   1d502:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   1d504:	2300      	movs	r3, #0
   1d506:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   1d508:	e03a      	b.n	1d580 <_is_ip+0x84>
		ch = *host++;
   1d50a:	687b      	ldr	r3, [r7, #4]
   1d50c:	1c5a      	adds	r2, r3, #1
   1d50e:	607a      	str	r2, [r7, #4]
   1d510:	220b      	movs	r2, #11
   1d512:	18ba      	adds	r2, r7, r2
   1d514:	781b      	ldrb	r3, [r3, #0]
   1d516:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   1d518:	230b      	movs	r3, #11
   1d51a:	18fb      	adds	r3, r7, r3
   1d51c:	781b      	ldrb	r3, [r3, #0]
   1d51e:	2b60      	cmp	r3, #96	; 0x60
   1d520:	d904      	bls.n	1d52c <_is_ip+0x30>
   1d522:	230b      	movs	r3, #11
   1d524:	18fb      	adds	r3, r7, r3
   1d526:	781b      	ldrb	r3, [r3, #0]
   1d528:	2b66      	cmp	r3, #102	; 0x66
   1d52a:	d913      	bls.n	1d554 <_is_ip+0x58>
   1d52c:	230b      	movs	r3, #11
   1d52e:	18fb      	adds	r3, r7, r3
   1d530:	781b      	ldrb	r3, [r3, #0]
   1d532:	2b40      	cmp	r3, #64	; 0x40
   1d534:	d904      	bls.n	1d540 <_is_ip+0x44>
   1d536:	230b      	movs	r3, #11
   1d538:	18fb      	adds	r3, r7, r3
   1d53a:	781b      	ldrb	r3, [r3, #0]
   1d53c:	2b46      	cmp	r3, #70	; 0x46
   1d53e:	d909      	bls.n	1d554 <_is_ip+0x58>
   1d540:	230b      	movs	r3, #11
   1d542:	18fb      	adds	r3, r7, r3
   1d544:	781b      	ldrb	r3, [r3, #0]
   1d546:	2b3a      	cmp	r3, #58	; 0x3a
   1d548:	d004      	beq.n	1d554 <_is_ip+0x58>
   1d54a:	230b      	movs	r3, #11
   1d54c:	18fb      	adds	r3, r7, r3
   1d54e:	781b      	ldrb	r3, [r3, #0]
   1d550:	2b2f      	cmp	r3, #47	; 0x2f
   1d552:	d102      	bne.n	1d55a <_is_ip+0x5e>
			isv6 = 1;
   1d554:	2301      	movs	r3, #1
   1d556:	60fb      	str	r3, [r7, #12]
   1d558:	e012      	b.n	1d580 <_is_ip+0x84>
		} else if (ch == '.') {
   1d55a:	230b      	movs	r3, #11
   1d55c:	18fb      	adds	r3, r7, r3
   1d55e:	781b      	ldrb	r3, [r3, #0]
   1d560:	2b2e      	cmp	r3, #46	; 0x2e
   1d562:	d104      	bne.n	1d56e <_is_ip+0x72>
			if (isv6) {
   1d564:	68fb      	ldr	r3, [r7, #12]
   1d566:	2b00      	cmp	r3, #0
   1d568:	d00a      	beq.n	1d580 <_is_ip+0x84>
				return 0;
   1d56a:	2300      	movs	r3, #0
   1d56c:	e00d      	b.n	1d58a <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   1d56e:	230b      	movs	r3, #11
   1d570:	18fb      	adds	r3, r7, r3
   1d572:	781b      	ldrb	r3, [r3, #0]
   1d574:	2230      	movs	r2, #48	; 0x30
   1d576:	4013      	ands	r3, r2
   1d578:	2b30      	cmp	r3, #48	; 0x30
   1d57a:	d001      	beq.n	1d580 <_is_ip+0x84>
			return 0;
   1d57c:	2300      	movs	r3, #0
   1d57e:	e004      	b.n	1d58a <_is_ip+0x8e>
	while (*host != '\0') {
   1d580:	687b      	ldr	r3, [r7, #4]
   1d582:	781b      	ldrb	r3, [r3, #0]
   1d584:	2b00      	cmp	r3, #0
   1d586:	d1c0      	bne.n	1d50a <_is_ip+0xe>
		}
	}
	return 1;
   1d588:	2301      	movs	r3, #1
}
   1d58a:	0018      	movs	r0, r3
   1d58c:	46bd      	mov	sp, r7
   1d58e:	b004      	add	sp, #16
   1d590:	bd80      	pop	{r7, pc}
	...

0001d594 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   1d594:	b5b0      	push	{r4, r5, r7, lr}
   1d596:	b08e      	sub	sp, #56	; 0x38
   1d598:	af00      	add	r7, sp, #0
   1d59a:	60f8      	str	r0, [r7, #12]
   1d59c:	60b9      	str	r1, [r7, #8]
   1d59e:	603b      	str	r3, [r7, #0]
   1d5a0:	1dfb      	adds	r3, r7, #7
   1d5a2:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   1d5a4:	2337      	movs	r3, #55	; 0x37
   1d5a6:	18fb      	adds	r3, r7, r3
   1d5a8:	2200      	movs	r2, #0
   1d5aa:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   1d5ac:	2300      	movs	r3, #0
   1d5ae:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   1d5b0:	2300      	movs	r3, #0
   1d5b2:	633b      	str	r3, [r7, #48]	; 0x30
   1d5b4:	2300      	movs	r3, #0
   1d5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d5b8:	2300      	movs	r3, #0
   1d5ba:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   1d5bc:	68fb      	ldr	r3, [r7, #12]
   1d5be:	2b00      	cmp	r3, #0
   1d5c0:	d102      	bne.n	1d5c8 <http_client_send_request+0x34>
		return -EINVAL;
   1d5c2:	2316      	movs	r3, #22
   1d5c4:	425b      	negs	r3, r3
   1d5c6:	e145      	b.n	1d854 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   1d5c8:	68fb      	ldr	r3, [r7, #12]
   1d5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1d5cc:	2b02      	cmp	r3, #2
   1d5ce:	d902      	bls.n	1d5d6 <http_client_send_request+0x42>
		return -EBUSY;
   1d5d0:	2310      	movs	r3, #16
   1d5d2:	425b      	negs	r3, r3
   1d5d4:	e13e      	b.n	1d854 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   1d5d6:	49a1      	ldr	r1, [pc, #644]	; (1d85c <http_client_send_request+0x2c8>)
   1d5d8:	68bb      	ldr	r3, [r7, #8]
   1d5da:	2207      	movs	r2, #7
   1d5dc:	0018      	movs	r0, r3
   1d5de:	4ba0      	ldr	r3, [pc, #640]	; (1d860 <http_client_send_request+0x2cc>)
   1d5e0:	4798      	blx	r3
   1d5e2:	1e03      	subs	r3, r0, #0
   1d5e4:	d102      	bne.n	1d5ec <http_client_send_request+0x58>
		i = 7;
   1d5e6:	2307      	movs	r3, #7
   1d5e8:	633b      	str	r3, [r7, #48]	; 0x30
   1d5ea:	e009      	b.n	1d600 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   1d5ec:	499d      	ldr	r1, [pc, #628]	; (1d864 <http_client_send_request+0x2d0>)
   1d5ee:	68bb      	ldr	r3, [r7, #8]
   1d5f0:	2208      	movs	r2, #8
   1d5f2:	0018      	movs	r0, r3
   1d5f4:	4b9a      	ldr	r3, [pc, #616]	; (1d860 <http_client_send_request+0x2cc>)
   1d5f6:	4798      	blx	r3
   1d5f8:	1e03      	subs	r3, r0, #0
   1d5fa:	d101      	bne.n	1d600 <http_client_send_request+0x6c>
		i = 8;
   1d5fc:	2308      	movs	r3, #8
   1d5fe:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   1d600:	68fb      	ldr	r3, [r7, #12]
   1d602:	1c5c      	adds	r4, r3, #1
   1d604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d606:	68ba      	ldr	r2, [r7, #8]
   1d608:	18d5      	adds	r5, r2, r3
   1d60a:	68fb      	ldr	r3, [r7, #12]
   1d60c:	3301      	adds	r3, #1
   1d60e:	0018      	movs	r0, r3
   1d610:	4b95      	ldr	r3, [pc, #596]	; (1d868 <http_client_send_request+0x2d4>)
   1d612:	4798      	blx	r3
   1d614:	0003      	movs	r3, r0
   1d616:	001a      	movs	r2, r3
   1d618:	0029      	movs	r1, r5
   1d61a:	0020      	movs	r0, r4
   1d61c:	4b90      	ldr	r3, [pc, #576]	; (1d860 <http_client_send_request+0x2cc>)
   1d61e:	4798      	blx	r3
   1d620:	0003      	movs	r3, r0
   1d622:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1d624:	e00d      	b.n	1d642 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   1d626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d628:	1c5a      	adds	r2, r3, #1
   1d62a:	62fa      	str	r2, [r7, #44]	; 0x2c
   1d62c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d62e:	68b9      	ldr	r1, [r7, #8]
   1d630:	188a      	adds	r2, r1, r2
   1d632:	7811      	ldrb	r1, [r2, #0]
   1d634:	68fa      	ldr	r2, [r7, #12]
   1d636:	18d3      	adds	r3, r2, r3
   1d638:	1c0a      	adds	r2, r1, #0
   1d63a:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1d63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d63e:	3301      	adds	r3, #1
   1d640:	633b      	str	r3, [r7, #48]	; 0x30
   1d642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d644:	68ba      	ldr	r2, [r7, #8]
   1d646:	18d3      	adds	r3, r2, r3
   1d648:	781b      	ldrb	r3, [r3, #0]
   1d64a:	2b00      	cmp	r3, #0
   1d64c:	d005      	beq.n	1d65a <http_client_send_request+0xc6>
   1d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d650:	68ba      	ldr	r2, [r7, #8]
   1d652:	18d3      	adds	r3, r2, r3
   1d654:	781b      	ldrb	r3, [r3, #0]
   1d656:	2b2f      	cmp	r3, #47	; 0x2f
   1d658:	d1e5      	bne.n	1d626 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   1d65a:	68fa      	ldr	r2, [r7, #12]
   1d65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d65e:	18d3      	adds	r3, r2, r3
   1d660:	3301      	adds	r3, #1
   1d662:	2200      	movs	r2, #0
   1d664:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   1d666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d668:	68ba      	ldr	r2, [r7, #8]
   1d66a:	18d3      	adds	r3, r2, r3
   1d66c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   1d66e:	68fb      	ldr	r3, [r7, #12]
   1d670:	3301      	adds	r3, #1
   1d672:	781b      	ldrb	r3, [r3, #0]
   1d674:	2b00      	cmp	r3, #0
   1d676:	d102      	bne.n	1d67e <http_client_send_request+0xea>
		return -EINVAL;
   1d678:	2316      	movs	r3, #22
   1d67a:	425b      	negs	r3, r3
   1d67c:	e0ea      	b.n	1d854 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   1d67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d680:	0018      	movs	r0, r3
   1d682:	4b79      	ldr	r3, [pc, #484]	; (1d868 <http_client_send_request+0x2d4>)
   1d684:	4798      	blx	r3
   1d686:	0003      	movs	r3, r0
   1d688:	2b3f      	cmp	r3, #63	; 0x3f
   1d68a:	d902      	bls.n	1d692 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   1d68c:	235b      	movs	r3, #91	; 0x5b
   1d68e:	425b      	negs	r3, r3
   1d690:	e0e0      	b.n	1d854 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   1d692:	68fb      	ldr	r3, [r7, #12]
   1d694:	22d4      	movs	r2, #212	; 0xd4
   1d696:	589b      	ldr	r3, [r3, r2]
   1d698:	2b00      	cmp	r3, #0
   1d69a:	d005      	beq.n	1d6a8 <http_client_send_request+0x114>
		free(module->req.ext_header);
   1d69c:	68fb      	ldr	r3, [r7, #12]
   1d69e:	22d4      	movs	r2, #212	; 0xd4
   1d6a0:	589b      	ldr	r3, [r3, r2]
   1d6a2:	0018      	movs	r0, r3
   1d6a4:	4b71      	ldr	r3, [pc, #452]	; (1d86c <http_client_send_request+0x2d8>)
   1d6a6:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   1d6a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1d6aa:	2b00      	cmp	r3, #0
   1d6ac:	d010      	beq.n	1d6d0 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   1d6ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1d6b0:	0018      	movs	r0, r3
   1d6b2:	4b6f      	ldr	r3, [pc, #444]	; (1d870 <http_client_send_request+0x2dc>)
   1d6b4:	4798      	blx	r3
   1d6b6:	0003      	movs	r3, r0
   1d6b8:	0019      	movs	r1, r3
   1d6ba:	68fb      	ldr	r3, [r7, #12]
   1d6bc:	22d4      	movs	r2, #212	; 0xd4
   1d6be:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   1d6c0:	68fb      	ldr	r3, [r7, #12]
   1d6c2:	22d4      	movs	r2, #212	; 0xd4
   1d6c4:	589b      	ldr	r3, [r3, r2]
   1d6c6:	2b00      	cmp	r3, #0
   1d6c8:	d106      	bne.n	1d6d8 <http_client_send_request+0x144>
			return -ENOMEM;
   1d6ca:	230c      	movs	r3, #12
   1d6cc:	425b      	negs	r3, r3
   1d6ce:	e0c1      	b.n	1d854 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   1d6d0:	68fb      	ldr	r3, [r7, #12]
   1d6d2:	22d4      	movs	r2, #212	; 0xd4
   1d6d4:	2100      	movs	r1, #0
   1d6d6:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   1d6d8:	68fb      	ldr	r3, [r7, #12]
   1d6da:	2241      	movs	r2, #65	; 0x41
   1d6dc:	5c99      	ldrb	r1, [r3, r2]
   1d6de:	2001      	movs	r0, #1
   1d6e0:	4381      	bics	r1, r0
   1d6e2:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   1d6e4:	68fb      	ldr	r3, [r7, #12]
   1d6e6:	2200      	movs	r2, #0
   1d6e8:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   1d6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d6ec:	781b      	ldrb	r3, [r3, #0]
   1d6ee:	2b2f      	cmp	r3, #47	; 0x2f
   1d6f0:	d107      	bne.n	1d702 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   1d6f2:	68fb      	ldr	r3, [r7, #12]
   1d6f4:	3370      	adds	r3, #112	; 0x70
   1d6f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d6f8:	0011      	movs	r1, r2
   1d6fa:	0018      	movs	r0, r3
   1d6fc:	4b5d      	ldr	r3, [pc, #372]	; (1d874 <http_client_send_request+0x2e0>)
   1d6fe:	4798      	blx	r3
   1d700:	e00f      	b.n	1d722 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   1d702:	68fb      	ldr	r3, [r7, #12]
   1d704:	2270      	movs	r2, #112	; 0x70
   1d706:	212f      	movs	r1, #47	; 0x2f
   1d708:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   1d70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d70c:	781b      	ldrb	r3, [r3, #0]
   1d70e:	2b00      	cmp	r3, #0
   1d710:	d007      	beq.n	1d722 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   1d712:	68fb      	ldr	r3, [r7, #12]
   1d714:	3370      	adds	r3, #112	; 0x70
   1d716:	3301      	adds	r3, #1
   1d718:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d71a:	0011      	movs	r1, r2
   1d71c:	0018      	movs	r0, r3
   1d71e:	4b55      	ldr	r3, [pc, #340]	; (1d874 <http_client_send_request+0x2e0>)
   1d720:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   1d722:	683b      	ldr	r3, [r7, #0]
   1d724:	2b00      	cmp	r3, #0
   1d726:	d007      	beq.n	1d738 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   1d728:	68fb      	ldr	r3, [r7, #12]
   1d72a:	33b0      	adds	r3, #176	; 0xb0
   1d72c:	6839      	ldr	r1, [r7, #0]
   1d72e:	2218      	movs	r2, #24
   1d730:	0018      	movs	r0, r3
   1d732:	4b51      	ldr	r3, [pc, #324]	; (1d878 <http_client_send_request+0x2e4>)
   1d734:	4798      	blx	r3
   1d736:	e006      	b.n	1d746 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   1d738:	68fb      	ldr	r3, [r7, #12]
   1d73a:	33b0      	adds	r3, #176	; 0xb0
   1d73c:	2218      	movs	r2, #24
   1d73e:	2100      	movs	r1, #0
   1d740:	0018      	movs	r0, r3
   1d742:	4b4e      	ldr	r3, [pc, #312]	; (1d87c <http_client_send_request+0x2e8>)
   1d744:	4798      	blx	r3
	}

	module->req.method = method;
   1d746:	68fb      	ldr	r3, [r7, #12]
   1d748:	1dfa      	adds	r2, r7, #7
   1d74a:	21c8      	movs	r1, #200	; 0xc8
   1d74c:	7812      	ldrb	r2, [r2, #0]
   1d74e:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   1d750:	68fb      	ldr	r3, [r7, #12]
   1d752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1d754:	2b01      	cmp	r3, #1
   1d756:	d003      	beq.n	1d760 <http_client_send_request+0x1cc>
   1d758:	d316      	bcc.n	1d788 <http_client_send_request+0x1f4>
   1d75a:	2b02      	cmp	r3, #2
   1d75c:	d004      	beq.n	1d768 <http_client_send_request+0x1d4>
   1d75e:	e074      	b.n	1d84a <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   1d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d762:	2b00      	cmp	r3, #0
   1d764:	d100      	bne.n	1d768 <http_client_send_request+0x1d4>
   1d766:	e073      	b.n	1d850 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   1d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d76a:	2b00      	cmp	r3, #0
   1d76c:	d107      	bne.n	1d77e <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   1d76e:	68fb      	ldr	r3, [r7, #12]
   1d770:	2203      	movs	r2, #3
   1d772:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   1d774:	68fb      	ldr	r3, [r7, #12]
   1d776:	0018      	movs	r0, r3
   1d778:	4b41      	ldr	r3, [pc, #260]	; (1d880 <http_client_send_request+0x2ec>)
   1d77a:	4798      	blx	r3
			break;
   1d77c:	e069      	b.n	1d852 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   1d77e:	68fb      	ldr	r3, [r7, #12]
   1d780:	2100      	movs	r1, #0
   1d782:	0018      	movs	r0, r3
   1d784:	4b3f      	ldr	r3, [pc, #252]	; (1d884 <http_client_send_request+0x2f0>)
   1d786:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   1d788:	68fb      	ldr	r3, [r7, #12]
   1d78a:	2252      	movs	r2, #82	; 0x52
   1d78c:	5c9b      	ldrb	r3, [r3, r2]
   1d78e:	2b00      	cmp	r3, #0
   1d790:	d007      	beq.n	1d7a2 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   1d792:	2337      	movs	r3, #55	; 0x37
   1d794:	18fb      	adds	r3, r7, r3
   1d796:	2237      	movs	r2, #55	; 0x37
   1d798:	18ba      	adds	r2, r7, r2
   1d79a:	7812      	ldrb	r2, [r2, #0]
   1d79c:	2101      	movs	r1, #1
   1d79e:	430a      	orrs	r2, r1
   1d7a0:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   1d7a2:	2337      	movs	r3, #55	; 0x37
   1d7a4:	18fb      	adds	r3, r7, r3
   1d7a6:	781b      	ldrb	r3, [r3, #0]
   1d7a8:	001a      	movs	r2, r3
   1d7aa:	2101      	movs	r1, #1
   1d7ac:	2002      	movs	r0, #2
   1d7ae:	4b36      	ldr	r3, [pc, #216]	; (1d888 <http_client_send_request+0x2f4>)
   1d7b0:	4798      	blx	r3
   1d7b2:	0003      	movs	r3, r0
   1d7b4:	001a      	movs	r2, r3
   1d7b6:	68fb      	ldr	r3, [r7, #12]
   1d7b8:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   1d7ba:	68fb      	ldr	r3, [r7, #12]
   1d7bc:	781b      	ldrb	r3, [r3, #0]
   1d7be:	b25b      	sxtb	r3, r3
   1d7c0:	2b00      	cmp	r3, #0
   1d7c2:	db3f      	blt.n	1d844 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   1d7c4:	68fb      	ldr	r3, [r7, #12]
   1d7c6:	781b      	ldrb	r3, [r3, #0]
   1d7c8:	b25b      	sxtb	r3, r3
   1d7ca:	001a      	movs	r2, r3
   1d7cc:	4b2f      	ldr	r3, [pc, #188]	; (1d88c <http_client_send_request+0x2f8>)
   1d7ce:	0092      	lsls	r2, r2, #2
   1d7d0:	68f9      	ldr	r1, [r7, #12]
   1d7d2:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   1d7d4:	68fb      	ldr	r3, [r7, #12]
   1d7d6:	3301      	adds	r3, #1
   1d7d8:	0018      	movs	r0, r3
   1d7da:	4b2d      	ldr	r3, [pc, #180]	; (1d890 <http_client_send_request+0x2fc>)
   1d7dc:	4798      	blx	r3
   1d7de:	1e03      	subs	r3, r0, #0
   1d7e0:	d027      	beq.n	1d832 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   1d7e2:	2314      	movs	r3, #20
   1d7e4:	18fb      	adds	r3, r7, r3
   1d7e6:	2202      	movs	r2, #2
   1d7e8:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   1d7ea:	68fb      	ldr	r3, [r7, #12]
   1d7ec:	2250      	movs	r2, #80	; 0x50
   1d7ee:	5a9b      	ldrh	r3, [r3, r2]
   1d7f0:	021b      	lsls	r3, r3, #8
   1d7f2:	b21a      	sxth	r2, r3
   1d7f4:	68fb      	ldr	r3, [r7, #12]
   1d7f6:	2150      	movs	r1, #80	; 0x50
   1d7f8:	5a5b      	ldrh	r3, [r3, r1]
   1d7fa:	0a1b      	lsrs	r3, r3, #8
   1d7fc:	b29b      	uxth	r3, r3
   1d7fe:	b21b      	sxth	r3, r3
   1d800:	4313      	orrs	r3, r2
   1d802:	b21b      	sxth	r3, r3
   1d804:	b29a      	uxth	r2, r3
   1d806:	2314      	movs	r3, #20
   1d808:	18fb      	adds	r3, r7, r3
   1d80a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   1d80c:	68fb      	ldr	r3, [r7, #12]
   1d80e:	3301      	adds	r3, #1
   1d810:	0018      	movs	r0, r3
   1d812:	4b20      	ldr	r3, [pc, #128]	; (1d894 <http_client_send_request+0x300>)
   1d814:	4798      	blx	r3
   1d816:	0002      	movs	r2, r0
   1d818:	2314      	movs	r3, #20
   1d81a:	18fb      	adds	r3, r7, r3
   1d81c:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1d81e:	68fb      	ldr	r3, [r7, #12]
   1d820:	781b      	ldrb	r3, [r3, #0]
   1d822:	b25b      	sxtb	r3, r3
   1d824:	2214      	movs	r2, #20
   1d826:	18b9      	adds	r1, r7, r2
   1d828:	2210      	movs	r2, #16
   1d82a:	0018      	movs	r0, r3
   1d82c:	4b1a      	ldr	r3, [pc, #104]	; (1d898 <http_client_send_request+0x304>)
   1d82e:	4798      	blx	r3
   1d830:	e004      	b.n	1d83c <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   1d832:	68fb      	ldr	r3, [r7, #12]
   1d834:	3301      	adds	r3, #1
   1d836:	0018      	movs	r0, r3
   1d838:	4b18      	ldr	r3, [pc, #96]	; (1d89c <http_client_send_request+0x308>)
   1d83a:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   1d83c:	68fb      	ldr	r3, [r7, #12]
   1d83e:	2201      	movs	r2, #1
   1d840:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   1d842:	e006      	b.n	1d852 <http_client_send_request+0x2be>
			return -ENOSPC;
   1d844:	231c      	movs	r3, #28
   1d846:	425b      	negs	r3, r3
   1d848:	e004      	b.n	1d854 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   1d84a:	230b      	movs	r3, #11
   1d84c:	425b      	negs	r3, r3
   1d84e:	e001      	b.n	1d854 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   1d850:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   1d852:	2300      	movs	r3, #0
}
   1d854:	0018      	movs	r0, r3
   1d856:	46bd      	mov	sp, r7
   1d858:	b00e      	add	sp, #56	; 0x38
   1d85a:	bdb0      	pop	{r4, r5, r7, pc}
   1d85c:	00025eb8 	.word	0x00025eb8
   1d860:	000212e5 	.word	0x000212e5
   1d864:	00025ec0 	.word	0x00025ec0
   1d868:	000212d7 	.word	0x000212d7
   1d86c:	00020ed5 	.word	0x00020ed5
   1d870:	0002129d 	.word	0x0002129d
   1d874:	0002128b 	.word	0x0002128b
   1d878:	00020ee9 	.word	0x00020ee9
   1d87c:	00020f1f 	.word	0x00020f1f
   1d880:	0001d9f5 	.word	0x0001d9f5
   1d884:	0001d8a1 	.word	0x0001d8a1
   1d888:	00011bb1 	.word	0x00011bb1
   1d88c:	20004180 	.word	0x20004180
   1d890:	0001d4fd 	.word	0x0001d4fd
   1d894:	000122fd 	.word	0x000122fd
   1d898:	00011dc5 	.word	0x00011dc5
   1d89c:	00012405 	.word	0x00012405

0001d8a0 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   1d8a0:	b580      	push	{r7, lr}
   1d8a2:	b086      	sub	sp, #24
   1d8a4:	af00      	add	r7, sp, #0
   1d8a6:	6078      	str	r0, [r7, #4]
   1d8a8:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   1d8aa:	687b      	ldr	r3, [r7, #4]
   1d8ac:	22c0      	movs	r2, #192	; 0xc0
   1d8ae:	589b      	ldr	r3, [r3, r2]
   1d8b0:	2b00      	cmp	r3, #0
   1d8b2:	d007      	beq.n	1d8c4 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   1d8b4:	687b      	ldr	r3, [r7, #4]
   1d8b6:	22c0      	movs	r2, #192	; 0xc0
   1d8b8:	589b      	ldr	r3, [r3, r2]
   1d8ba:	687a      	ldr	r2, [r7, #4]
   1d8bc:	21c4      	movs	r1, #196	; 0xc4
   1d8be:	5852      	ldr	r2, [r2, r1]
   1d8c0:	0010      	movs	r0, r2
   1d8c2:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   1d8c4:	687b      	ldr	r3, [r7, #4]
   1d8c6:	33b0      	adds	r3, #176	; 0xb0
   1d8c8:	2218      	movs	r2, #24
   1d8ca:	2100      	movs	r1, #0
   1d8cc:	0018      	movs	r0, r3
   1d8ce:	4b24      	ldr	r3, [pc, #144]	; (1d960 <_http_client_clear_conn+0xc0>)
   1d8d0:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   1d8d2:	687b      	ldr	r3, [r7, #4]
   1d8d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1d8d6:	2b00      	cmp	r3, #0
   1d8d8:	d005      	beq.n	1d8e6 <_http_client_clear_conn+0x46>
		close(module->sock);
   1d8da:	687b      	ldr	r3, [r7, #4]
   1d8dc:	781b      	ldrb	r3, [r3, #0]
   1d8de:	b25b      	sxtb	r3, r3
   1d8e0:	0018      	movs	r0, r3
   1d8e2:	4b20      	ldr	r3, [pc, #128]	; (1d964 <_http_client_clear_conn+0xc4>)
   1d8e4:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   1d8e6:	687b      	ldr	r3, [r7, #4]
   1d8e8:	781b      	ldrb	r3, [r3, #0]
   1d8ea:	b25b      	sxtb	r3, r3
   1d8ec:	001a      	movs	r2, r3
   1d8ee:	4b1e      	ldr	r3, [pc, #120]	; (1d968 <_http_client_clear_conn+0xc8>)
   1d8f0:	0092      	lsls	r2, r2, #2
   1d8f2:	2100      	movs	r1, #0
   1d8f4:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   1d8f6:	687b      	ldr	r3, [r7, #4]
   1d8f8:	336c      	adds	r3, #108	; 0x6c
   1d8fa:	226c      	movs	r2, #108	; 0x6c
   1d8fc:	2100      	movs	r1, #0
   1d8fe:	0018      	movs	r0, r3
   1d900:	4b17      	ldr	r3, [pc, #92]	; (1d960 <_http_client_clear_conn+0xc0>)
   1d902:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   1d904:	687b      	ldr	r3, [r7, #4]
   1d906:	33d8      	adds	r3, #216	; 0xd8
   1d908:	2210      	movs	r2, #16
   1d90a:	2100      	movs	r1, #0
   1d90c:	0018      	movs	r0, r3
   1d90e:	4b14      	ldr	r3, [pc, #80]	; (1d960 <_http_client_clear_conn+0xc0>)
   1d910:	4798      	blx	r3
	module->req.state = STATE_INIT;
   1d912:	687b      	ldr	r3, [r7, #4]
   1d914:	2200      	movs	r2, #0
   1d916:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1d918:	687b      	ldr	r3, [r7, #4]
   1d91a:	22d8      	movs	r2, #216	; 0xd8
   1d91c:	2100      	movs	r1, #0
   1d91e:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   1d920:	687b      	ldr	r3, [r7, #4]
   1d922:	2241      	movs	r2, #65	; 0x41
   1d924:	5c99      	ldrb	r1, [r3, r2]
   1d926:	2001      	movs	r0, #1
   1d928:	4381      	bics	r1, r0
   1d92a:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   1d92c:	687b      	ldr	r3, [r7, #4]
   1d92e:	2241      	movs	r2, #65	; 0x41
   1d930:	5c99      	ldrb	r1, [r3, r2]
   1d932:	2002      	movs	r0, #2
   1d934:	4381      	bics	r1, r0
   1d936:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   1d938:	230c      	movs	r3, #12
   1d93a:	18fb      	adds	r3, r7, r3
   1d93c:	683a      	ldr	r2, [r7, #0]
   1d93e:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   1d940:	687b      	ldr	r3, [r7, #4]
   1d942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d944:	2b00      	cmp	r3, #0
   1d946:	d006      	beq.n	1d956 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   1d948:	687b      	ldr	r3, [r7, #4]
   1d94a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d94c:	220c      	movs	r2, #12
   1d94e:	18ba      	adds	r2, r7, r2
   1d950:	6878      	ldr	r0, [r7, #4]
   1d952:	2104      	movs	r1, #4
   1d954:	4798      	blx	r3
	}
}
   1d956:	46c0      	nop			; (mov r8, r8)
   1d958:	46bd      	mov	sp, r7
   1d95a:	b006      	add	sp, #24
   1d95c:	bd80      	pop	{r7, pc}
   1d95e:	46c0      	nop			; (mov r8, r8)
   1d960:	00020f1f 	.word	0x00020f1f
   1d964:	000121bd 	.word	0x000121bd
   1d968:	20004180 	.word	0x20004180

0001d96c <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   1d96c:	b590      	push	{r4, r7, lr}
   1d96e:	b087      	sub	sp, #28
   1d970:	af00      	add	r7, sp, #0
   1d972:	60f8      	str	r0, [r7, #12]
   1d974:	60b9      	str	r1, [r7, #8]
   1d976:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   1d978:	68fb      	ldr	r3, [r7, #12]
   1d97a:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   1d97c:	697b      	ldr	r3, [r7, #20]
   1d97e:	2241      	movs	r2, #65	; 0x41
   1d980:	5c99      	ldrb	r1, [r3, r2]
   1d982:	2001      	movs	r0, #1
   1d984:	4301      	orrs	r1, r0
   1d986:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   1d988:	697b      	ldr	r3, [r7, #20]
   1d98a:	2000      	movs	r0, #0
   1d98c:	5618      	ldrsb	r0, [r3, r0]
   1d98e:	687b      	ldr	r3, [r7, #4]
   1d990:	b29a      	uxth	r2, r3
   1d992:	68b9      	ldr	r1, [r7, #8]
   1d994:	2300      	movs	r3, #0
   1d996:	4c14      	ldr	r4, [pc, #80]	; (1d9e8 <_http_client_send_wait+0x7c>)
   1d998:	47a0      	blx	r4
   1d99a:	0003      	movs	r3, r0
   1d99c:	613b      	str	r3, [r7, #16]
   1d99e:	693b      	ldr	r3, [r7, #16]
   1d9a0:	2b00      	cmp	r3, #0
   1d9a2:	da0f      	bge.n	1d9c4 <_http_client_send_wait+0x58>
		module->sending = 0;
   1d9a4:	697b      	ldr	r3, [r7, #20]
   1d9a6:	2241      	movs	r2, #65	; 0x41
   1d9a8:	5c99      	ldrb	r1, [r3, r2]
   1d9aa:	2001      	movs	r0, #1
   1d9ac:	4381      	bics	r1, r0
   1d9ae:	5499      	strb	r1, [r3, r2]
		return result;
   1d9b0:	693b      	ldr	r3, [r7, #16]
   1d9b2:	e014      	b.n	1d9de <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   1d9b4:	2000      	movs	r0, #0
   1d9b6:	4b0d      	ldr	r3, [pc, #52]	; (1d9ec <_http_client_send_wait+0x80>)
   1d9b8:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   1d9ba:	697b      	ldr	r3, [r7, #20]
   1d9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1d9be:	0018      	movs	r0, r3
   1d9c0:	4b0b      	ldr	r3, [pc, #44]	; (1d9f0 <_http_client_send_wait+0x84>)
   1d9c2:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   1d9c4:	697b      	ldr	r3, [r7, #20]
   1d9c6:	2241      	movs	r2, #65	; 0x41
   1d9c8:	5c9b      	ldrb	r3, [r3, r2]
   1d9ca:	2201      	movs	r2, #1
   1d9cc:	4013      	ands	r3, r2
   1d9ce:	b2db      	uxtb	r3, r3
   1d9d0:	2b00      	cmp	r3, #0
   1d9d2:	d003      	beq.n	1d9dc <_http_client_send_wait+0x70>
   1d9d4:	697b      	ldr	r3, [r7, #20]
   1d9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1d9d8:	2b02      	cmp	r3, #2
   1d9da:	d8eb      	bhi.n	1d9b4 <_http_client_send_wait+0x48>
	}

	return 0;
   1d9dc:	2300      	movs	r3, #0
}
   1d9de:	0018      	movs	r0, r3
   1d9e0:	46bd      	mov	sp, r7
   1d9e2:	b007      	add	sp, #28
   1d9e4:	bd90      	pop	{r4, r7, pc}
   1d9e6:	46c0      	nop			; (mov r8, r8)
   1d9e8:	00011ed9 	.word	0x00011ed9
   1d9ec:	0000e585 	.word	0x0000e585
   1d9f0:	0001ec79 	.word	0x0001ec79

0001d9f4 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   1d9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9f6:	46c6      	mov	lr, r8
   1d9f8:	b500      	push	{lr}
   1d9fa:	b0a0      	sub	sp, #128	; 0x80
   1d9fc:	af02      	add	r7, sp, #8
   1d9fe:	61f8      	str	r0, [r7, #28]
   1da00:	4668      	mov	r0, sp
   1da02:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   1da04:	2318      	movs	r3, #24
   1da06:	2218      	movs	r2, #24
   1da08:	18ba      	adds	r2, r7, r2
   1da0a:	18d0      	adds	r0, r2, r3
   1da0c:	4bbd      	ldr	r3, [pc, #756]	; (1dd04 <_http_client_request+0x310>)
   1da0e:	469c      	mov	ip, r3
   1da10:	4663      	mov	r3, ip
   1da12:	cb16      	ldmia	r3!, {r1, r2, r4}
   1da14:	c016      	stmia	r0!, {r1, r2, r4}
   1da16:	469c      	mov	ip, r3
   1da18:	4663      	mov	r3, ip
   1da1a:	681b      	ldr	r3, [r3, #0]
   1da1c:	469c      	mov	ip, r3
   1da1e:	4663      	mov	r3, ip
   1da20:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   1da22:	69f8      	ldr	r0, [r7, #28]
   1da24:	6e40      	ldr	r0, [r0, #100]	; 0x64
   1da26:	4684      	mov	ip, r0
   1da28:	2301      	movs	r3, #1
   1da2a:	425b      	negs	r3, r3
   1da2c:	4698      	mov	r8, r3
   1da2e:	44c4      	add	ip, r8
   1da30:	4663      	mov	r3, ip
   1da32:	66fb      	str	r3, [r7, #108]	; 0x6c
   1da34:	6038      	str	r0, [r7, #0]
   1da36:	2300      	movs	r3, #0
   1da38:	607b      	str	r3, [r7, #4]
   1da3a:	6839      	ldr	r1, [r7, #0]
   1da3c:	687a      	ldr	r2, [r7, #4]
   1da3e:	000b      	movs	r3, r1
   1da40:	0f5b      	lsrs	r3, r3, #29
   1da42:	469c      	mov	ip, r3
   1da44:	0013      	movs	r3, r2
   1da46:	00db      	lsls	r3, r3, #3
   1da48:	617b      	str	r3, [r7, #20]
   1da4a:	4663      	mov	r3, ip
   1da4c:	697c      	ldr	r4, [r7, #20]
   1da4e:	431c      	orrs	r4, r3
   1da50:	617c      	str	r4, [r7, #20]
   1da52:	000b      	movs	r3, r1
   1da54:	00db      	lsls	r3, r3, #3
   1da56:	613b      	str	r3, [r7, #16]
   1da58:	0005      	movs	r5, r0
   1da5a:	2200      	movs	r2, #0
   1da5c:	0016      	movs	r6, r2
   1da5e:	0f6a      	lsrs	r2, r5, #29
   1da60:	00f3      	lsls	r3, r6, #3
   1da62:	60fb      	str	r3, [r7, #12]
   1da64:	68fb      	ldr	r3, [r7, #12]
   1da66:	4313      	orrs	r3, r2
   1da68:	60fb      	str	r3, [r7, #12]
   1da6a:	00eb      	lsls	r3, r5, #3
   1da6c:	60bb      	str	r3, [r7, #8]
   1da6e:	1dc3      	adds	r3, r0, #7
   1da70:	08db      	lsrs	r3, r3, #3
   1da72:	00db      	lsls	r3, r3, #3
   1da74:	466a      	mov	r2, sp
   1da76:	1ad3      	subs	r3, r2, r3
   1da78:	469d      	mov	sp, r3
   1da7a:	ab02      	add	r3, sp, #8
   1da7c:	3300      	adds	r3, #0
   1da7e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   1da80:	69fb      	ldr	r3, [r7, #28]
   1da82:	2b00      	cmp	r3, #0
   1da84:	d100      	bne.n	1da88 <_http_client_request+0x94>
   1da86:	e346      	b.n	1e116 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   1da88:	69fb      	ldr	r3, [r7, #28]
   1da8a:	2241      	movs	r2, #65	; 0x41
   1da8c:	5c9b      	ldrb	r3, [r3, r2]
   1da8e:	2201      	movs	r2, #1
   1da90:	4013      	ands	r3, r2
   1da92:	b2db      	uxtb	r3, r3
   1da94:	2b00      	cmp	r3, #0
   1da96:	d000      	beq.n	1da9a <_http_client_request+0xa6>
   1da98:	e33f      	b.n	1e11a <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   1da9a:	69fb      	ldr	r3, [r7, #28]
   1da9c:	33b0      	adds	r3, #176	; 0xb0
   1da9e:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   1daa0:	69fb      	ldr	r3, [r7, #28]
   1daa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1daa4:	2b03      	cmp	r3, #3
   1daa6:	d003      	beq.n	1dab0 <_http_client_request+0xbc>
   1daa8:	2b04      	cmp	r3, #4
   1daaa:	d100      	bne.n	1daae <_http_client_request+0xba>
   1daac:	e1b3      	b.n	1de16 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   1daae:	e32f      	b.n	1e110 <_http_client_request+0x71c>
		module->req.content_length = 0;
   1dab0:	69fb      	ldr	r3, [r7, #28]
   1dab2:	22cc      	movs	r2, #204	; 0xcc
   1dab4:	2100      	movs	r1, #0
   1dab6:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   1dab8:	69fb      	ldr	r3, [r7, #28]
   1daba:	22d0      	movs	r2, #208	; 0xd0
   1dabc:	2100      	movs	r1, #0
   1dabe:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   1dac0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1dac2:	69fb      	ldr	r3, [r7, #28]
   1dac4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1dac6:	4c90      	ldr	r4, [pc, #576]	; (1dd08 <_http_client_request+0x314>)
   1dac8:	2334      	movs	r3, #52	; 0x34
   1daca:	2018      	movs	r0, #24
   1dacc:	1838      	adds	r0, r7, r0
   1dace:	18c0      	adds	r0, r0, r3
   1dad0:	69fb      	ldr	r3, [r7, #28]
   1dad2:	9300      	str	r3, [sp, #0]
   1dad4:	0023      	movs	r3, r4
   1dad6:	4c8d      	ldr	r4, [pc, #564]	; (1dd0c <_http_client_request+0x318>)
   1dad8:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   1dada:	69fb      	ldr	r3, [r7, #28]
   1dadc:	22c8      	movs	r2, #200	; 0xc8
   1dade:	5c9b      	ldrb	r3, [r3, r2]
   1dae0:	2b01      	cmp	r3, #1
   1dae2:	d10a      	bne.n	1dafa <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   1dae4:	498a      	ldr	r1, [pc, #552]	; (1dd10 <_http_client_request+0x31c>)
   1dae6:	2334      	movs	r3, #52	; 0x34
   1dae8:	2218      	movs	r2, #24
   1daea:	4694      	mov	ip, r2
   1daec:	44bc      	add	ip, r7
   1daee:	4463      	add	r3, ip
   1daf0:	2204      	movs	r2, #4
   1daf2:	0018      	movs	r0, r3
   1daf4:	4b87      	ldr	r3, [pc, #540]	; (1dd14 <_http_client_request+0x320>)
   1daf6:	4798      	blx	r3
   1daf8:	e04e      	b.n	1db98 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   1dafa:	69fb      	ldr	r3, [r7, #28]
   1dafc:	22c8      	movs	r2, #200	; 0xc8
   1dafe:	5c9b      	ldrb	r3, [r3, r2]
   1db00:	2b02      	cmp	r3, #2
   1db02:	d10a      	bne.n	1db1a <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   1db04:	4984      	ldr	r1, [pc, #528]	; (1dd18 <_http_client_request+0x324>)
   1db06:	2334      	movs	r3, #52	; 0x34
   1db08:	2218      	movs	r2, #24
   1db0a:	4694      	mov	ip, r2
   1db0c:	44bc      	add	ip, r7
   1db0e:	4463      	add	r3, ip
   1db10:	2205      	movs	r2, #5
   1db12:	0018      	movs	r0, r3
   1db14:	4b7f      	ldr	r3, [pc, #508]	; (1dd14 <_http_client_request+0x320>)
   1db16:	4798      	blx	r3
   1db18:	e03e      	b.n	1db98 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   1db1a:	69fb      	ldr	r3, [r7, #28]
   1db1c:	22c8      	movs	r2, #200	; 0xc8
   1db1e:	5c9b      	ldrb	r3, [r3, r2]
   1db20:	2b03      	cmp	r3, #3
   1db22:	d10a      	bne.n	1db3a <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   1db24:	497d      	ldr	r1, [pc, #500]	; (1dd1c <_http_client_request+0x328>)
   1db26:	2334      	movs	r3, #52	; 0x34
   1db28:	2218      	movs	r2, #24
   1db2a:	4694      	mov	ip, r2
   1db2c:	44bc      	add	ip, r7
   1db2e:	4463      	add	r3, ip
   1db30:	2207      	movs	r2, #7
   1db32:	0018      	movs	r0, r3
   1db34:	4b77      	ldr	r3, [pc, #476]	; (1dd14 <_http_client_request+0x320>)
   1db36:	4798      	blx	r3
   1db38:	e02e      	b.n	1db98 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   1db3a:	69fb      	ldr	r3, [r7, #28]
   1db3c:	22c8      	movs	r2, #200	; 0xc8
   1db3e:	5c9b      	ldrb	r3, [r3, r2]
   1db40:	2b04      	cmp	r3, #4
   1db42:	d10a      	bne.n	1db5a <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   1db44:	4976      	ldr	r1, [pc, #472]	; (1dd20 <_http_client_request+0x32c>)
   1db46:	2334      	movs	r3, #52	; 0x34
   1db48:	2218      	movs	r2, #24
   1db4a:	4694      	mov	ip, r2
   1db4c:	44bc      	add	ip, r7
   1db4e:	4463      	add	r3, ip
   1db50:	2204      	movs	r2, #4
   1db52:	0018      	movs	r0, r3
   1db54:	4b6f      	ldr	r3, [pc, #444]	; (1dd14 <_http_client_request+0x320>)
   1db56:	4798      	blx	r3
   1db58:	e01e      	b.n	1db98 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   1db5a:	69fb      	ldr	r3, [r7, #28]
   1db5c:	22c8      	movs	r2, #200	; 0xc8
   1db5e:	5c9b      	ldrb	r3, [r3, r2]
   1db60:	2b05      	cmp	r3, #5
   1db62:	d10a      	bne.n	1db7a <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   1db64:	496f      	ldr	r1, [pc, #444]	; (1dd24 <_http_client_request+0x330>)
   1db66:	2334      	movs	r3, #52	; 0x34
   1db68:	2218      	movs	r2, #24
   1db6a:	4694      	mov	ip, r2
   1db6c:	44bc      	add	ip, r7
   1db6e:	4463      	add	r3, ip
   1db70:	2208      	movs	r2, #8
   1db72:	0018      	movs	r0, r3
   1db74:	4b67      	ldr	r3, [pc, #412]	; (1dd14 <_http_client_request+0x320>)
   1db76:	4798      	blx	r3
   1db78:	e00e      	b.n	1db98 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   1db7a:	69fb      	ldr	r3, [r7, #28]
   1db7c:	22c8      	movs	r2, #200	; 0xc8
   1db7e:	5c9b      	ldrb	r3, [r3, r2]
   1db80:	2b06      	cmp	r3, #6
   1db82:	d109      	bne.n	1db98 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   1db84:	4968      	ldr	r1, [pc, #416]	; (1dd28 <_http_client_request+0x334>)
   1db86:	2334      	movs	r3, #52	; 0x34
   1db88:	2218      	movs	r2, #24
   1db8a:	4694      	mov	ip, r2
   1db8c:	44bc      	add	ip, r7
   1db8e:	4463      	add	r3, ip
   1db90:	2205      	movs	r2, #5
   1db92:	0018      	movs	r0, r3
   1db94:	4b5f      	ldr	r3, [pc, #380]	; (1dd14 <_http_client_request+0x320>)
   1db96:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   1db98:	69fb      	ldr	r3, [r7, #28]
   1db9a:	3370      	adds	r3, #112	; 0x70
   1db9c:	001c      	movs	r4, r3
   1db9e:	69fb      	ldr	r3, [r7, #28]
   1dba0:	3370      	adds	r3, #112	; 0x70
   1dba2:	0018      	movs	r0, r3
   1dba4:	4b61      	ldr	r3, [pc, #388]	; (1dd2c <_http_client_request+0x338>)
   1dba6:	4798      	blx	r3
   1dba8:	0002      	movs	r2, r0
   1dbaa:	2334      	movs	r3, #52	; 0x34
   1dbac:	2118      	movs	r1, #24
   1dbae:	468c      	mov	ip, r1
   1dbb0:	44bc      	add	ip, r7
   1dbb2:	4463      	add	r3, ip
   1dbb4:	0021      	movs	r1, r4
   1dbb6:	0018      	movs	r0, r3
   1dbb8:	4b56      	ldr	r3, [pc, #344]	; (1dd14 <_http_client_request+0x320>)
   1dbba:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   1dbbc:	495c      	ldr	r1, [pc, #368]	; (1dd30 <_http_client_request+0x33c>)
   1dbbe:	2334      	movs	r3, #52	; 0x34
   1dbc0:	2218      	movs	r2, #24
   1dbc2:	4694      	mov	ip, r2
   1dbc4:	44bc      	add	ip, r7
   1dbc6:	4463      	add	r3, ip
   1dbc8:	220b      	movs	r2, #11
   1dbca:	0018      	movs	r0, r3
   1dbcc:	4b51      	ldr	r3, [pc, #324]	; (1dd14 <_http_client_request+0x320>)
   1dbce:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   1dbd0:	4958      	ldr	r1, [pc, #352]	; (1dd34 <_http_client_request+0x340>)
   1dbd2:	2334      	movs	r3, #52	; 0x34
   1dbd4:	2218      	movs	r2, #24
   1dbd6:	4694      	mov	ip, r2
   1dbd8:	44bc      	add	ip, r7
   1dbda:	4463      	add	r3, ip
   1dbdc:	220c      	movs	r2, #12
   1dbde:	0018      	movs	r0, r3
   1dbe0:	4b4c      	ldr	r3, [pc, #304]	; (1dd14 <_http_client_request+0x320>)
   1dbe2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   1dbe4:	69fb      	ldr	r3, [r7, #28]
   1dbe6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   1dbe8:	69fb      	ldr	r3, [r7, #28]
   1dbea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1dbec:	0018      	movs	r0, r3
   1dbee:	4b4f      	ldr	r3, [pc, #316]	; (1dd2c <_http_client_request+0x338>)
   1dbf0:	4798      	blx	r3
   1dbf2:	0002      	movs	r2, r0
   1dbf4:	2334      	movs	r3, #52	; 0x34
   1dbf6:	2118      	movs	r1, #24
   1dbf8:	468c      	mov	ip, r1
   1dbfa:	44bc      	add	ip, r7
   1dbfc:	4463      	add	r3, ip
   1dbfe:	0021      	movs	r1, r4
   1dc00:	0018      	movs	r0, r3
   1dc02:	4b44      	ldr	r3, [pc, #272]	; (1dd14 <_http_client_request+0x320>)
   1dc04:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1dc06:	494c      	ldr	r1, [pc, #304]	; (1dd38 <_http_client_request+0x344>)
   1dc08:	2334      	movs	r3, #52	; 0x34
   1dc0a:	2218      	movs	r2, #24
   1dc0c:	4694      	mov	ip, r2
   1dc0e:	44bc      	add	ip, r7
   1dc10:	4463      	add	r3, ip
   1dc12:	2202      	movs	r2, #2
   1dc14:	0018      	movs	r0, r3
   1dc16:	4b3f      	ldr	r3, [pc, #252]	; (1dd14 <_http_client_request+0x320>)
   1dc18:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   1dc1a:	4948      	ldr	r1, [pc, #288]	; (1dd3c <_http_client_request+0x348>)
   1dc1c:	2334      	movs	r3, #52	; 0x34
   1dc1e:	2218      	movs	r2, #24
   1dc20:	4694      	mov	ip, r2
   1dc22:	44bc      	add	ip, r7
   1dc24:	4463      	add	r3, ip
   1dc26:	2206      	movs	r2, #6
   1dc28:	0018      	movs	r0, r3
   1dc2a:	4b3a      	ldr	r3, [pc, #232]	; (1dd14 <_http_client_request+0x320>)
   1dc2c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   1dc2e:	69fb      	ldr	r3, [r7, #28]
   1dc30:	1c5c      	adds	r4, r3, #1
   1dc32:	69fb      	ldr	r3, [r7, #28]
   1dc34:	3301      	adds	r3, #1
   1dc36:	0018      	movs	r0, r3
   1dc38:	4b3c      	ldr	r3, [pc, #240]	; (1dd2c <_http_client_request+0x338>)
   1dc3a:	4798      	blx	r3
   1dc3c:	0002      	movs	r2, r0
   1dc3e:	2334      	movs	r3, #52	; 0x34
   1dc40:	2118      	movs	r1, #24
   1dc42:	468c      	mov	ip, r1
   1dc44:	44bc      	add	ip, r7
   1dc46:	4463      	add	r3, ip
   1dc48:	0021      	movs	r1, r4
   1dc4a:	0018      	movs	r0, r3
   1dc4c:	4b31      	ldr	r3, [pc, #196]	; (1dd14 <_http_client_request+0x320>)
   1dc4e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1dc50:	4939      	ldr	r1, [pc, #228]	; (1dd38 <_http_client_request+0x344>)
   1dc52:	2334      	movs	r3, #52	; 0x34
   1dc54:	2218      	movs	r2, #24
   1dc56:	4694      	mov	ip, r2
   1dc58:	44bc      	add	ip, r7
   1dc5a:	4463      	add	r3, ip
   1dc5c:	2202      	movs	r2, #2
   1dc5e:	0018      	movs	r0, r3
   1dc60:	4b2c      	ldr	r3, [pc, #176]	; (1dd14 <_http_client_request+0x320>)
   1dc62:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   1dc64:	4936      	ldr	r1, [pc, #216]	; (1dd40 <_http_client_request+0x34c>)
   1dc66:	2334      	movs	r3, #52	; 0x34
   1dc68:	2218      	movs	r2, #24
   1dc6a:	4694      	mov	ip, r2
   1dc6c:	44bc      	add	ip, r7
   1dc6e:	4463      	add	r3, ip
   1dc70:	2218      	movs	r2, #24
   1dc72:	0018      	movs	r0, r3
   1dc74:	4b27      	ldr	r3, [pc, #156]	; (1dd14 <_http_client_request+0x320>)
   1dc76:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   1dc78:	4932      	ldr	r1, [pc, #200]	; (1dd44 <_http_client_request+0x350>)
   1dc7a:	2334      	movs	r3, #52	; 0x34
   1dc7c:	2218      	movs	r2, #24
   1dc7e:	4694      	mov	ip, r2
   1dc80:	44bc      	add	ip, r7
   1dc82:	4463      	add	r3, ip
   1dc84:	2213      	movs	r2, #19
   1dc86:	0018      	movs	r0, r3
   1dc88:	4b22      	ldr	r3, [pc, #136]	; (1dd14 <_http_client_request+0x320>)
   1dc8a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   1dc8c:	492e      	ldr	r1, [pc, #184]	; (1dd48 <_http_client_request+0x354>)
   1dc8e:	2334      	movs	r3, #52	; 0x34
   1dc90:	2218      	movs	r2, #24
   1dc92:	4694      	mov	ip, r2
   1dc94:	44bc      	add	ip, r7
   1dc96:	4463      	add	r3, ip
   1dc98:	2217      	movs	r2, #23
   1dc9a:	0018      	movs	r0, r3
   1dc9c:	4b1d      	ldr	r3, [pc, #116]	; (1dd14 <_http_client_request+0x320>)
   1dc9e:	4798      	blx	r3
		if (entity->read != NULL) {
   1dca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1dca2:	68db      	ldr	r3, [r3, #12]
   1dca4:	2b00      	cmp	r3, #0
   1dca6:	d100      	bne.n	1dcaa <_http_client_request+0x2b6>
   1dca8:	e088      	b.n	1ddbc <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   1dcaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1dcac:	781b      	ldrb	r3, [r3, #0]
   1dcae:	2b00      	cmp	r3, #0
   1dcb0:	d00f      	beq.n	1dcd2 <_http_client_request+0x2de>
				module->req.content_length = -1;
   1dcb2:	69fb      	ldr	r3, [r7, #28]
   1dcb4:	21cc      	movs	r1, #204	; 0xcc
   1dcb6:	2201      	movs	r2, #1
   1dcb8:	4252      	negs	r2, r2
   1dcba:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   1dcbc:	4923      	ldr	r1, [pc, #140]	; (1dd4c <_http_client_request+0x358>)
   1dcbe:	2334      	movs	r3, #52	; 0x34
   1dcc0:	2218      	movs	r2, #24
   1dcc2:	4694      	mov	ip, r2
   1dcc4:	44bc      	add	ip, r7
   1dcc6:	4463      	add	r3, ip
   1dcc8:	221c      	movs	r2, #28
   1dcca:	0018      	movs	r0, r3
   1dccc:	4b11      	ldr	r3, [pc, #68]	; (1dd14 <_http_client_request+0x320>)
   1dcce:	4798      	blx	r3
   1dcd0:	e074      	b.n	1ddbc <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   1dcd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1dcd4:	689b      	ldr	r3, [r3, #8]
   1dcd6:	2b00      	cmp	r3, #0
   1dcd8:	d070      	beq.n	1ddbc <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   1dcda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1dcdc:	689a      	ldr	r2, [r3, #8]
   1dcde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1dce0:	695b      	ldr	r3, [r3, #20]
   1dce2:	0018      	movs	r0, r3
   1dce4:	4790      	blx	r2
   1dce6:	0001      	movs	r1, r0
   1dce8:	69fb      	ldr	r3, [r7, #28]
   1dcea:	22cc      	movs	r2, #204	; 0xcc
   1dcec:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   1dcee:	69fb      	ldr	r3, [r7, #28]
   1dcf0:	22cc      	movs	r2, #204	; 0xcc
   1dcf2:	589b      	ldr	r3, [r3, r2]
   1dcf4:	2b00      	cmp	r3, #0
   1dcf6:	da2b      	bge.n	1dd50 <_http_client_request+0x35c>
					module->req.content_length = 0;
   1dcf8:	69fb      	ldr	r3, [r7, #28]
   1dcfa:	22cc      	movs	r2, #204	; 0xcc
   1dcfc:	2100      	movs	r1, #0
   1dcfe:	5099      	str	r1, [r3, r2]
   1dd00:	e05c      	b.n	1ddbc <_http_client_request+0x3c8>
   1dd02:	46c0      	nop			; (mov r8, r8)
   1dd04:	00025fa8 	.word	0x00025fa8
   1dd08:	0001d96d 	.word	0x0001d96d
   1dd0c:	0001e8d5 	.word	0x0001e8d5
   1dd10:	00025ecc 	.word	0x00025ecc
   1dd14:	0001e955 	.word	0x0001e955
   1dd18:	00025ed4 	.word	0x00025ed4
   1dd1c:	00025edc 	.word	0x00025edc
   1dd20:	00025ee4 	.word	0x00025ee4
   1dd24:	00025eec 	.word	0x00025eec
   1dd28:	00025ef8 	.word	0x00025ef8
   1dd2c:	000212d7 	.word	0x000212d7
   1dd30:	00025f00 	.word	0x00025f00
   1dd34:	00025f0c 	.word	0x00025f0c
   1dd38:	00025f1c 	.word	0x00025f1c
   1dd3c:	00025f20 	.word	0x00025f20
   1dd40:	00025f28 	.word	0x00025f28
   1dd44:	00025f44 	.word	0x00025f44
   1dd48:	00025f58 	.word	0x00025f58
   1dd4c:	00025f70 	.word	0x00025f70
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   1dd50:	69fb      	ldr	r3, [r7, #28]
   1dd52:	22cc      	movs	r2, #204	; 0xcc
   1dd54:	589b      	ldr	r3, [r3, r2]
   1dd56:	001a      	movs	r2, r3
   1dd58:	49e0      	ldr	r1, [pc, #896]	; (1e0dc <_http_client_request+0x6e8>)
   1dd5a:	2328      	movs	r3, #40	; 0x28
   1dd5c:	2018      	movs	r0, #24
   1dd5e:	4684      	mov	ip, r0
   1dd60:	44bc      	add	ip, r7
   1dd62:	4463      	add	r3, ip
   1dd64:	0018      	movs	r0, r3
   1dd66:	4bde      	ldr	r3, [pc, #888]	; (1e0e0 <_http_client_request+0x6ec>)
   1dd68:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   1dd6a:	49de      	ldr	r1, [pc, #888]	; (1e0e4 <_http_client_request+0x6f0>)
   1dd6c:	2334      	movs	r3, #52	; 0x34
   1dd6e:	2218      	movs	r2, #24
   1dd70:	4694      	mov	ip, r2
   1dd72:	44bc      	add	ip, r7
   1dd74:	4463      	add	r3, ip
   1dd76:	2210      	movs	r2, #16
   1dd78:	0018      	movs	r0, r3
   1dd7a:	4bdb      	ldr	r3, [pc, #876]	; (1e0e8 <_http_client_request+0x6f4>)
   1dd7c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   1dd7e:	2328      	movs	r3, #40	; 0x28
   1dd80:	2218      	movs	r2, #24
   1dd82:	4694      	mov	ip, r2
   1dd84:	44bc      	add	ip, r7
   1dd86:	4463      	add	r3, ip
   1dd88:	0018      	movs	r0, r3
   1dd8a:	4bd8      	ldr	r3, [pc, #864]	; (1e0ec <_http_client_request+0x6f8>)
   1dd8c:	4798      	blx	r3
   1dd8e:	0002      	movs	r2, r0
   1dd90:	2328      	movs	r3, #40	; 0x28
   1dd92:	2118      	movs	r1, #24
   1dd94:	1879      	adds	r1, r7, r1
   1dd96:	18c9      	adds	r1, r1, r3
   1dd98:	2334      	movs	r3, #52	; 0x34
   1dd9a:	2018      	movs	r0, #24
   1dd9c:	4684      	mov	ip, r0
   1dd9e:	44bc      	add	ip, r7
   1dda0:	4463      	add	r3, ip
   1dda2:	0018      	movs	r0, r3
   1dda4:	4bd0      	ldr	r3, [pc, #832]	; (1e0e8 <_http_client_request+0x6f4>)
   1dda6:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1dda8:	49d1      	ldr	r1, [pc, #836]	; (1e0f0 <_http_client_request+0x6fc>)
   1ddaa:	2334      	movs	r3, #52	; 0x34
   1ddac:	2218      	movs	r2, #24
   1ddae:	4694      	mov	ip, r2
   1ddb0:	44bc      	add	ip, r7
   1ddb2:	4463      	add	r3, ip
   1ddb4:	2202      	movs	r2, #2
   1ddb6:	0018      	movs	r0, r3
   1ddb8:	4bcb      	ldr	r3, [pc, #812]	; (1e0e8 <_http_client_request+0x6f4>)
   1ddba:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   1ddbc:	69fb      	ldr	r3, [r7, #28]
   1ddbe:	22d4      	movs	r2, #212	; 0xd4
   1ddc0:	589b      	ldr	r3, [r3, r2]
   1ddc2:	2b00      	cmp	r3, #0
   1ddc4:	d012      	beq.n	1ddec <_http_client_request+0x3f8>
				module->req.ext_header,
   1ddc6:	69fb      	ldr	r3, [r7, #28]
   1ddc8:	22d4      	movs	r2, #212	; 0xd4
   1ddca:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   1ddcc:	69fb      	ldr	r3, [r7, #28]
   1ddce:	22d4      	movs	r2, #212	; 0xd4
   1ddd0:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   1ddd2:	0018      	movs	r0, r3
   1ddd4:	4bc5      	ldr	r3, [pc, #788]	; (1e0ec <_http_client_request+0x6f8>)
   1ddd6:	4798      	blx	r3
   1ddd8:	0002      	movs	r2, r0
   1ddda:	2334      	movs	r3, #52	; 0x34
   1dddc:	2118      	movs	r1, #24
   1ddde:	468c      	mov	ip, r1
   1dde0:	44bc      	add	ip, r7
   1dde2:	4463      	add	r3, ip
   1dde4:	0021      	movs	r1, r4
   1dde6:	0018      	movs	r0, r3
   1dde8:	4bbf      	ldr	r3, [pc, #764]	; (1e0e8 <_http_client_request+0x6f4>)
   1ddea:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1ddec:	49c0      	ldr	r1, [pc, #768]	; (1e0f0 <_http_client_request+0x6fc>)
   1ddee:	2334      	movs	r3, #52	; 0x34
   1ddf0:	2218      	movs	r2, #24
   1ddf2:	4694      	mov	ip, r2
   1ddf4:	44bc      	add	ip, r7
   1ddf6:	4463      	add	r3, ip
   1ddf8:	2202      	movs	r2, #2
   1ddfa:	0018      	movs	r0, r3
   1ddfc:	4bba      	ldr	r3, [pc, #744]	; (1e0e8 <_http_client_request+0x6f4>)
   1ddfe:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   1de00:	2334      	movs	r3, #52	; 0x34
   1de02:	2218      	movs	r2, #24
   1de04:	4694      	mov	ip, r2
   1de06:	44bc      	add	ip, r7
   1de08:	4463      	add	r3, ip
   1de0a:	0018      	movs	r0, r3
   1de0c:	4bb9      	ldr	r3, [pc, #740]	; (1e0f4 <_http_client_request+0x700>)
   1de0e:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   1de10:	69fb      	ldr	r3, [r7, #28]
   1de12:	2204      	movs	r2, #4
   1de14:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   1de16:	69fb      	ldr	r3, [r7, #28]
   1de18:	22cc      	movs	r2, #204	; 0xcc
   1de1a:	589b      	ldr	r3, [r3, r2]
   1de1c:	2b00      	cmp	r3, #0
   1de1e:	db00      	blt.n	1de22 <_http_client_request+0x42e>
   1de20:	e0c6      	b.n	1dfb0 <_http_client_request+0x5bc>
   1de22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1de24:	68db      	ldr	r3, [r3, #12]
   1de26:	2b00      	cmp	r3, #0
   1de28:	d100      	bne.n	1de2c <_http_client_request+0x438>
   1de2a:	e0c1      	b.n	1dfb0 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1de2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1de2e:	68dc      	ldr	r4, [r3, #12]
   1de30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1de32:	6958      	ldr	r0, [r3, #20]
   1de34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1de36:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1de38:	69fb      	ldr	r3, [r7, #28]
   1de3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1de3c:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1de3e:	69fb      	ldr	r3, [r7, #28]
   1de40:	22d0      	movs	r2, #208	; 0xd0
   1de42:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1de44:	002a      	movs	r2, r5
   1de46:	47a0      	blx	r4
   1de48:	0003      	movs	r3, r0
   1de4a:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   1de4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1de4e:	2b00      	cmp	r3, #0
   1de50:	da01      	bge.n	1de56 <_http_client_request+0x462>
				size = 0;
   1de52:	2300      	movs	r3, #0
   1de54:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   1de56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1de58:	220a      	movs	r2, #10
   1de5a:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   1de5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1de5e:	220d      	movs	r2, #13
   1de60:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   1de62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1de64:	3305      	adds	r3, #5
   1de66:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1de68:	210d      	movs	r1, #13
   1de6a:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   1de6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1de6e:	3306      	adds	r3, #6
   1de70:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1de72:	210a      	movs	r1, #10
   1de74:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   1de76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1de78:	2b00      	cmp	r3, #0
   1de7a:	db14      	blt.n	1dea6 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   1de7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1de7e:	3302      	adds	r3, #2
   1de80:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   1de82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1de84:	4a9c      	ldr	r2, [pc, #624]	; (1e0f8 <_http_client_request+0x704>)
   1de86:	4013      	ands	r3, r2
   1de88:	d504      	bpl.n	1de94 <_http_client_request+0x4a0>
   1de8a:	3b01      	subs	r3, #1
   1de8c:	2210      	movs	r2, #16
   1de8e:	4252      	negs	r2, r2
   1de90:	4313      	orrs	r3, r2
   1de92:	3301      	adds	r3, #1
   1de94:	001a      	movs	r2, r3
   1de96:	2318      	movs	r3, #24
   1de98:	2118      	movs	r1, #24
   1de9a:	468c      	mov	ip, r1
   1de9c:	44bc      	add	ip, r7
   1de9e:	4463      	add	r3, ip
   1dea0:	5c9a      	ldrb	r2, [r3, r2]
   1dea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1dea4:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   1dea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1dea8:	2b0f      	cmp	r3, #15
   1deaa:	dd19      	ble.n	1dee0 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   1deac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1deae:	3301      	adds	r3, #1
   1deb0:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   1deb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1deb4:	2b00      	cmp	r3, #0
   1deb6:	da00      	bge.n	1deba <_http_client_request+0x4c6>
   1deb8:	330f      	adds	r3, #15
   1deba:	111b      	asrs	r3, r3, #4
   1debc:	001a      	movs	r2, r3
   1debe:	4b8e      	ldr	r3, [pc, #568]	; (1e0f8 <_http_client_request+0x704>)
   1dec0:	4013      	ands	r3, r2
   1dec2:	d504      	bpl.n	1dece <_http_client_request+0x4da>
   1dec4:	3b01      	subs	r3, #1
   1dec6:	2210      	movs	r2, #16
   1dec8:	4252      	negs	r2, r2
   1deca:	4313      	orrs	r3, r2
   1decc:	3301      	adds	r3, #1
   1dece:	001a      	movs	r2, r3
   1ded0:	2318      	movs	r3, #24
   1ded2:	2118      	movs	r1, #24
   1ded4:	468c      	mov	ip, r1
   1ded6:	44bc      	add	ip, r7
   1ded8:	4463      	add	r3, ip
   1deda:	5c9a      	ldrb	r2, [r3, r2]
   1dedc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1dede:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   1dee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1dee2:	2bff      	cmp	r3, #255	; 0xff
   1dee4:	dd18      	ble.n	1df18 <_http_client_request+0x524>
				ptr = buffer;
   1dee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1dee8:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   1deea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1deec:	2b00      	cmp	r3, #0
   1deee:	da00      	bge.n	1def2 <_http_client_request+0x4fe>
   1def0:	33ff      	adds	r3, #255	; 0xff
   1def2:	121b      	asrs	r3, r3, #8
   1def4:	001a      	movs	r2, r3
   1def6:	4b80      	ldr	r3, [pc, #512]	; (1e0f8 <_http_client_request+0x704>)
   1def8:	4013      	ands	r3, r2
   1defa:	d504      	bpl.n	1df06 <_http_client_request+0x512>
   1defc:	3b01      	subs	r3, #1
   1defe:	2210      	movs	r2, #16
   1df00:	4252      	negs	r2, r2
   1df02:	4313      	orrs	r3, r2
   1df04:	3301      	adds	r3, #1
   1df06:	001a      	movs	r2, r3
   1df08:	2318      	movs	r3, #24
   1df0a:	2118      	movs	r1, #24
   1df0c:	468c      	mov	ip, r1
   1df0e:	44bc      	add	ip, r7
   1df10:	4463      	add	r3, ip
   1df12:	5c9a      	ldrb	r2, [r3, r2]
   1df14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1df16:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   1df18:	69fb      	ldr	r3, [r7, #28]
   1df1a:	2000      	movs	r0, #0
   1df1c:	5618      	ldrsb	r0, [r3, r0]
   1df1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1df20:	3303      	adds	r3, #3
   1df22:	001a      	movs	r2, r3
   1df24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1df26:	1ad3      	subs	r3, r2, r3
   1df28:	b29a      	uxth	r2, r3
   1df2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1df2c:	b29b      	uxth	r3, r3
   1df2e:	18d3      	adds	r3, r2, r3
   1df30:	b29b      	uxth	r3, r3
   1df32:	3304      	adds	r3, #4
   1df34:	b29a      	uxth	r2, r3
   1df36:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1df38:	2300      	movs	r3, #0
   1df3a:	4c70      	ldr	r4, [pc, #448]	; (1e0fc <_http_client_request+0x708>)
   1df3c:	47a0      	blx	r4
   1df3e:	0003      	movs	r3, r0
   1df40:	663b      	str	r3, [r7, #96]	; 0x60
   1df42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1df44:	2b00      	cmp	r3, #0
   1df46:	da07      	bge.n	1df58 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   1df48:	2305      	movs	r3, #5
   1df4a:	425a      	negs	r2, r3
   1df4c:	69fb      	ldr	r3, [r7, #28]
   1df4e:	0011      	movs	r1, r2
   1df50:	0018      	movs	r0, r3
   1df52:	4b6b      	ldr	r3, [pc, #428]	; (1e100 <_http_client_request+0x70c>)
   1df54:	4798      	blx	r3
				return;
   1df56:	e0e1      	b.n	1e11c <_http_client_request+0x728>
			module->req.sent_length += size;
   1df58:	69fb      	ldr	r3, [r7, #28]
   1df5a:	22d0      	movs	r2, #208	; 0xd0
   1df5c:	589a      	ldr	r2, [r3, r2]
   1df5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1df60:	18d2      	adds	r2, r2, r3
   1df62:	69fb      	ldr	r3, [r7, #28]
   1df64:	21d0      	movs	r1, #208	; 0xd0
   1df66:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   1df68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1df6a:	2b00      	cmp	r3, #0
   1df6c:	d000      	beq.n	1df70 <_http_client_request+0x57c>
   1df6e:	e0c9      	b.n	1e104 <_http_client_request+0x710>
				if (module->req.entity.close) {
   1df70:	69fb      	ldr	r3, [r7, #28]
   1df72:	22c0      	movs	r2, #192	; 0xc0
   1df74:	589b      	ldr	r3, [r3, r2]
   1df76:	2b00      	cmp	r3, #0
   1df78:	d007      	beq.n	1df8a <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   1df7a:	69fb      	ldr	r3, [r7, #28]
   1df7c:	22c0      	movs	r2, #192	; 0xc0
   1df7e:	589b      	ldr	r3, [r3, r2]
   1df80:	69fa      	ldr	r2, [r7, #28]
   1df82:	21c4      	movs	r1, #196	; 0xc4
   1df84:	5852      	ldr	r2, [r2, r1]
   1df86:	0010      	movs	r0, r2
   1df88:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   1df8a:	69fb      	ldr	r3, [r7, #28]
   1df8c:	2202      	movs	r2, #2
   1df8e:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   1df90:	69fb      	ldr	r3, [r7, #28]
   1df92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1df94:	2b00      	cmp	r3, #0
   1df96:	d100      	bne.n	1df9a <_http_client_request+0x5a6>
   1df98:	e0b5      	b.n	1e106 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1df9a:	69fb      	ldr	r3, [r7, #28]
   1df9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1df9e:	220c      	movs	r2, #12
   1dfa0:	2118      	movs	r1, #24
   1dfa2:	468c      	mov	ip, r1
   1dfa4:	44bc      	add	ip, r7
   1dfa6:	4462      	add	r2, ip
   1dfa8:	69f8      	ldr	r0, [r7, #28]
   1dfaa:	2101      	movs	r1, #1
   1dfac:	4798      	blx	r3
				break;
   1dfae:	e0aa      	b.n	1e106 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   1dfb0:	69fb      	ldr	r3, [r7, #28]
   1dfb2:	22cc      	movs	r2, #204	; 0xcc
   1dfb4:	589b      	ldr	r3, [r3, r2]
   1dfb6:	2b00      	cmp	r3, #0
   1dfb8:	dc00      	bgt.n	1dfbc <_http_client_request+0x5c8>
   1dfba:	e07c      	b.n	1e0b6 <_http_client_request+0x6c2>
   1dfbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1dfbe:	68db      	ldr	r3, [r3, #12]
   1dfc0:	2b00      	cmp	r3, #0
   1dfc2:	d100      	bne.n	1dfc6 <_http_client_request+0x5d2>
   1dfc4:	e077      	b.n	1e0b6 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   1dfc6:	69fb      	ldr	r3, [r7, #28]
   1dfc8:	22d0      	movs	r2, #208	; 0xd0
   1dfca:	589a      	ldr	r2, [r3, r2]
   1dfcc:	69fb      	ldr	r3, [r7, #28]
   1dfce:	21cc      	movs	r1, #204	; 0xcc
   1dfd0:	585b      	ldr	r3, [r3, r1]
   1dfd2:	429a      	cmp	r2, r3
   1dfd4:	db1f      	blt.n	1e016 <_http_client_request+0x622>
				if (module->req.entity.close) {
   1dfd6:	69fb      	ldr	r3, [r7, #28]
   1dfd8:	22c0      	movs	r2, #192	; 0xc0
   1dfda:	589b      	ldr	r3, [r3, r2]
   1dfdc:	2b00      	cmp	r3, #0
   1dfde:	d007      	beq.n	1dff0 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   1dfe0:	69fb      	ldr	r3, [r7, #28]
   1dfe2:	22c0      	movs	r2, #192	; 0xc0
   1dfe4:	589b      	ldr	r3, [r3, r2]
   1dfe6:	69fa      	ldr	r2, [r7, #28]
   1dfe8:	21c4      	movs	r1, #196	; 0xc4
   1dfea:	5852      	ldr	r2, [r2, r1]
   1dfec:	0010      	movs	r0, r2
   1dfee:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   1dff0:	69fb      	ldr	r3, [r7, #28]
   1dff2:	2202      	movs	r2, #2
   1dff4:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   1dff6:	69fb      	ldr	r3, [r7, #28]
   1dff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dffa:	2b00      	cmp	r3, #0
   1dffc:	d100      	bne.n	1e000 <_http_client_request+0x60c>
   1dffe:	e084      	b.n	1e10a <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1e000:	69fb      	ldr	r3, [r7, #28]
   1e002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e004:	220c      	movs	r2, #12
   1e006:	2118      	movs	r1, #24
   1e008:	468c      	mov	ip, r1
   1e00a:	44bc      	add	ip, r7
   1e00c:	4462      	add	r2, ip
   1e00e:	69f8      	ldr	r0, [r7, #28]
   1e010:	2101      	movs	r1, #1
   1e012:	4798      	blx	r3
				break;
   1e014:	e079      	b.n	1e10a <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   1e016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e018:	68dc      	ldr	r4, [r3, #12]
   1e01a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e01c:	6958      	ldr	r0, [r3, #20]
   1e01e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1e020:	69fb      	ldr	r3, [r7, #28]
   1e022:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   1e024:	69fb      	ldr	r3, [r7, #28]
   1e026:	22d0      	movs	r2, #208	; 0xd0
   1e028:	589b      	ldr	r3, [r3, r2]
   1e02a:	002a      	movs	r2, r5
   1e02c:	47a0      	blx	r4
   1e02e:	0003      	movs	r3, r0
   1e030:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   1e032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e034:	2b00      	cmp	r3, #0
   1e036:	da0d      	bge.n	1e054 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   1e038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e03a:	2b00      	cmp	r3, #0
   1e03c:	d102      	bne.n	1e044 <_http_client_request+0x650>
   1e03e:	234d      	movs	r3, #77	; 0x4d
   1e040:	425b      	negs	r3, r3
   1e042:	e001      	b.n	1e048 <_http_client_request+0x654>
   1e044:	2305      	movs	r3, #5
   1e046:	425b      	negs	r3, r3
   1e048:	69fa      	ldr	r2, [r7, #28]
   1e04a:	0019      	movs	r1, r3
   1e04c:	0010      	movs	r0, r2
   1e04e:	4b2c      	ldr	r3, [pc, #176]	; (1e100 <_http_client_request+0x70c>)
   1e050:	4798      	blx	r3
			if (size < 0) {
   1e052:	e057      	b.n	1e104 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   1e054:	69fb      	ldr	r3, [r7, #28]
   1e056:	22cc      	movs	r2, #204	; 0xcc
   1e058:	589a      	ldr	r2, [r3, r2]
   1e05a:	69fb      	ldr	r3, [r7, #28]
   1e05c:	21d0      	movs	r1, #208	; 0xd0
   1e05e:	585b      	ldr	r3, [r3, r1]
   1e060:	1ad2      	subs	r2, r2, r3
   1e062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e064:	429a      	cmp	r2, r3
   1e066:	da07      	bge.n	1e078 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   1e068:	69fb      	ldr	r3, [r7, #28]
   1e06a:	22cc      	movs	r2, #204	; 0xcc
   1e06c:	589a      	ldr	r2, [r3, r2]
   1e06e:	69fb      	ldr	r3, [r7, #28]
   1e070:	21d0      	movs	r1, #208	; 0xd0
   1e072:	585b      	ldr	r3, [r3, r1]
   1e074:	1ad3      	subs	r3, r2, r3
   1e076:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   1e078:	69fb      	ldr	r3, [r7, #28]
   1e07a:	2000      	movs	r0, #0
   1e07c:	5618      	ldrsb	r0, [r3, r0]
   1e07e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1e080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e082:	b29a      	uxth	r2, r3
   1e084:	2300      	movs	r3, #0
   1e086:	4c1d      	ldr	r4, [pc, #116]	; (1e0fc <_http_client_request+0x708>)
   1e088:	47a0      	blx	r4
   1e08a:	0003      	movs	r3, r0
   1e08c:	663b      	str	r3, [r7, #96]	; 0x60
   1e08e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1e090:	2b00      	cmp	r3, #0
   1e092:	da07      	bge.n	1e0a4 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   1e094:	2305      	movs	r3, #5
   1e096:	425a      	negs	r2, r3
   1e098:	69fb      	ldr	r3, [r7, #28]
   1e09a:	0011      	movs	r1, r2
   1e09c:	0018      	movs	r0, r3
   1e09e:	4b18      	ldr	r3, [pc, #96]	; (1e100 <_http_client_request+0x70c>)
   1e0a0:	4798      	blx	r3
					return;
   1e0a2:	e03b      	b.n	1e11c <_http_client_request+0x728>
				module->req.sent_length += size;
   1e0a4:	69fb      	ldr	r3, [r7, #28]
   1e0a6:	22d0      	movs	r2, #208	; 0xd0
   1e0a8:	589a      	ldr	r2, [r3, r2]
   1e0aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e0ac:	18d2      	adds	r2, r2, r3
   1e0ae:	69fb      	ldr	r3, [r7, #28]
   1e0b0:	21d0      	movs	r1, #208	; 0xd0
   1e0b2:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   1e0b4:	e026      	b.n	1e104 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   1e0b6:	69fb      	ldr	r3, [r7, #28]
   1e0b8:	2202      	movs	r2, #2
   1e0ba:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   1e0bc:	69fb      	ldr	r3, [r7, #28]
   1e0be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e0c0:	2b00      	cmp	r3, #0
   1e0c2:	d024      	beq.n	1e10e <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1e0c4:	69fb      	ldr	r3, [r7, #28]
   1e0c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e0c8:	220c      	movs	r2, #12
   1e0ca:	2118      	movs	r1, #24
   1e0cc:	468c      	mov	ip, r1
   1e0ce:	44bc      	add	ip, r7
   1e0d0:	4462      	add	r2, ip
   1e0d2:	69f8      	ldr	r0, [r7, #28]
   1e0d4:	2101      	movs	r1, #1
   1e0d6:	4798      	blx	r3
			break;
   1e0d8:	e019      	b.n	1e10e <_http_client_request+0x71a>
   1e0da:	46c0      	nop			; (mov r8, r8)
   1e0dc:	00025f90 	.word	0x00025f90
   1e0e0:	000211dd 	.word	0x000211dd
   1e0e4:	00025f94 	.word	0x00025f94
   1e0e8:	0001e955 	.word	0x0001e955
   1e0ec:	000212d7 	.word	0x000212d7
   1e0f0:	00025f1c 	.word	0x00025f1c
   1e0f4:	0001e991 	.word	0x0001e991
   1e0f8:	8000000f 	.word	0x8000000f
   1e0fc:	00011ed9 	.word	0x00011ed9
   1e100:	0001d8a1 	.word	0x0001d8a1
		break;
   1e104:	e004      	b.n	1e110 <_http_client_request+0x71c>
				break;
   1e106:	46c0      	nop			; (mov r8, r8)
   1e108:	e002      	b.n	1e110 <_http_client_request+0x71c>
				break;
   1e10a:	46c0      	nop			; (mov r8, r8)
   1e10c:	e000      	b.n	1e110 <_http_client_request+0x71c>
			break;
   1e10e:	46c0      	nop			; (mov r8, r8)
   1e110:	69bb      	ldr	r3, [r7, #24]
   1e112:	469d      	mov	sp, r3
   1e114:	e004      	b.n	1e120 <_http_client_request+0x72c>
		return;
   1e116:	46c0      	nop			; (mov r8, r8)
   1e118:	e000      	b.n	1e11c <_http_client_request+0x728>
		return;
   1e11a:	46c0      	nop			; (mov r8, r8)
   1e11c:	69bb      	ldr	r3, [r7, #24]
   1e11e:	469d      	mov	sp, r3
	}
}
   1e120:	46bd      	mov	sp, r7
   1e122:	b01e      	add	sp, #120	; 0x78
   1e124:	bc04      	pop	{r2}
   1e126:	4690      	mov	r8, r2
   1e128:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e12a:	46c0      	nop			; (mov r8, r8)

0001e12c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   1e12c:	b590      	push	{r4, r7, lr}
   1e12e:	b083      	sub	sp, #12
   1e130:	af00      	add	r7, sp, #0
   1e132:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   1e134:	687b      	ldr	r3, [r7, #4]
   1e136:	2b00      	cmp	r3, #0
   1e138:	d021      	beq.n	1e17e <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   1e13a:	687b      	ldr	r3, [r7, #4]
   1e13c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1e13e:	687b      	ldr	r3, [r7, #4]
   1e140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1e142:	429a      	cmp	r2, r3
   1e144:	d307      	bcc.n	1e156 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   1e146:	238b      	movs	r3, #139	; 0x8b
   1e148:	425a      	negs	r2, r3
   1e14a:	687b      	ldr	r3, [r7, #4]
   1e14c:	0011      	movs	r1, r2
   1e14e:	0018      	movs	r0, r3
   1e150:	4b0d      	ldr	r3, [pc, #52]	; (1e188 <_http_client_recv_packet+0x5c>)
   1e152:	4798      	blx	r3
		return;
   1e154:	e014      	b.n	1e180 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   1e156:	687b      	ldr	r3, [r7, #4]
   1e158:	2000      	movs	r0, #0
   1e15a:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   1e15c:	687b      	ldr	r3, [r7, #4]
   1e15e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1e160:	687b      	ldr	r3, [r7, #4]
   1e162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e164:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   1e166:	687b      	ldr	r3, [r7, #4]
   1e168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   1e16a:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   1e16c:	687b      	ldr	r3, [r7, #4]
   1e16e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   1e170:	b29b      	uxth	r3, r3
   1e172:	1ad3      	subs	r3, r2, r3
   1e174:	b29a      	uxth	r2, r3
   1e176:	2300      	movs	r3, #0
   1e178:	4c04      	ldr	r4, [pc, #16]	; (1e18c <_http_client_recv_packet+0x60>)
   1e17a:	47a0      	blx	r4
   1e17c:	e000      	b.n	1e180 <_http_client_recv_packet+0x54>
		return;
   1e17e:	46c0      	nop			; (mov r8, r8)
}
   1e180:	46bd      	mov	sp, r7
   1e182:	b003      	add	sp, #12
   1e184:	bd90      	pop	{r4, r7, pc}
   1e186:	46c0      	nop			; (mov r8, r8)
   1e188:	0001d8a1 	.word	0x0001d8a1
   1e18c:	0001203d 	.word	0x0001203d

0001e190 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   1e190:	b580      	push	{r7, lr}
   1e192:	b082      	sub	sp, #8
   1e194:	af00      	add	r7, sp, #0
   1e196:	6078      	str	r0, [r7, #4]
   1e198:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   1e19a:	687b      	ldr	r3, [r7, #4]
   1e19c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1e19e:	683b      	ldr	r3, [r7, #0]
   1e1a0:	18d2      	adds	r2, r2, r3
   1e1a2:	687b      	ldr	r3, [r7, #4]
   1e1a4:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   1e1a6:	687b      	ldr	r3, [r7, #4]
   1e1a8:	2258      	movs	r2, #88	; 0x58
   1e1aa:	5a9b      	ldrh	r3, [r3, r2]
   1e1ac:	2b00      	cmp	r3, #0
   1e1ae:	d007      	beq.n	1e1c0 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   1e1b0:	687b      	ldr	r3, [r7, #4]
   1e1b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1e1b4:	687b      	ldr	r3, [r7, #4]
   1e1b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e1b8:	0019      	movs	r1, r3
   1e1ba:	0010      	movs	r0, r2
   1e1bc:	4b06      	ldr	r3, [pc, #24]	; (1e1d8 <_http_client_recved_packet+0x48>)
   1e1be:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   1e1c0:	46c0      	nop			; (mov r8, r8)
   1e1c2:	687b      	ldr	r3, [r7, #4]
   1e1c4:	0018      	movs	r0, r3
   1e1c6:	4b05      	ldr	r3, [pc, #20]	; (1e1dc <_http_client_recved_packet+0x4c>)
   1e1c8:	4798      	blx	r3
   1e1ca:	1e03      	subs	r3, r0, #0
   1e1cc:	d1f9      	bne.n	1e1c2 <_http_client_recved_packet+0x32>
}
   1e1ce:	46c0      	nop			; (mov r8, r8)
   1e1d0:	46bd      	mov	sp, r7
   1e1d2:	b002      	add	sp, #8
   1e1d4:	bd80      	pop	{r7, pc}
   1e1d6:	46c0      	nop			; (mov r8, r8)
   1e1d8:	0001ec4d 	.word	0x0001ec4d
   1e1dc:	0001e1e1 	.word	0x0001e1e1

0001e1e0 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   1e1e0:	b580      	push	{r7, lr}
   1e1e2:	b082      	sub	sp, #8
   1e1e4:	af00      	add	r7, sp, #0
   1e1e6:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   1e1e8:	687b      	ldr	r3, [r7, #4]
   1e1ea:	22d8      	movs	r2, #216	; 0xd8
   1e1ec:	589b      	ldr	r3, [r3, r2]
   1e1ee:	2b00      	cmp	r3, #0
   1e1f0:	d002      	beq.n	1e1f8 <_http_client_handle_response+0x18>
   1e1f2:	2b01      	cmp	r3, #1
   1e1f4:	d006      	beq.n	1e204 <_http_client_handle_response+0x24>
   1e1f6:	e00b      	b.n	1e210 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   1e1f8:	687b      	ldr	r3, [r7, #4]
   1e1fa:	0018      	movs	r0, r3
   1e1fc:	4b07      	ldr	r3, [pc, #28]	; (1e21c <_http_client_handle_response+0x3c>)
   1e1fe:	4798      	blx	r3
   1e200:	0003      	movs	r3, r0
   1e202:	e006      	b.n	1e212 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   1e204:	687b      	ldr	r3, [r7, #4]
   1e206:	0018      	movs	r0, r3
   1e208:	4b05      	ldr	r3, [pc, #20]	; (1e220 <_http_client_handle_response+0x40>)
   1e20a:	4798      	blx	r3
   1e20c:	0003      	movs	r3, r0
   1e20e:	e000      	b.n	1e212 <_http_client_handle_response+0x32>
	}
	return 0;
   1e210:	2300      	movs	r3, #0
}
   1e212:	0018      	movs	r0, r3
   1e214:	46bd      	mov	sp, r7
   1e216:	b002      	add	sp, #8
   1e218:	bd80      	pop	{r7, pc}
   1e21a:	46c0      	nop			; (mov r8, r8)
   1e21c:	0001e225 	.word	0x0001e225
   1e220:	0001e6dd 	.word	0x0001e6dd

0001e224 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   1e224:	b590      	push	{r4, r7, lr}
   1e226:	b08b      	sub	sp, #44	; 0x2c
   1e228:	af00      	add	r7, sp, #0
   1e22a:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   1e22c:	687b      	ldr	r3, [r7, #4]
   1e22e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e230:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   1e232:	4b9a      	ldr	r3, [pc, #616]	; (1e49c <_http_client_handle_header+0x278>)
   1e234:	681a      	ldr	r2, [r3, #0]
   1e236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e238:	0011      	movs	r1, r2
   1e23a:	0018      	movs	r0, r3
   1e23c:	4b98      	ldr	r3, [pc, #608]	; (1e4a0 <_http_client_handle_header+0x27c>)
   1e23e:	4798      	blx	r3
   1e240:	0003      	movs	r3, r0
   1e242:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   1e244:	69bb      	ldr	r3, [r7, #24]
   1e246:	2b00      	cmp	r3, #0
   1e248:	d007      	beq.n	1e25a <_http_client_handle_header+0x36>
   1e24a:	687b      	ldr	r3, [r7, #4]
   1e24c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1e24e:	687b      	ldr	r3, [r7, #4]
   1e250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e252:	18d2      	adds	r2, r2, r3
   1e254:	69bb      	ldr	r3, [r7, #24]
   1e256:	429a      	cmp	r2, r3
   1e258:	d807      	bhi.n	1e26a <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   1e25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e25c:	687b      	ldr	r3, [r7, #4]
   1e25e:	0011      	movs	r1, r2
   1e260:	0018      	movs	r0, r3
   1e262:	4b90      	ldr	r3, [pc, #576]	; (1e4a4 <_http_client_handle_header+0x280>)
   1e264:	4798      	blx	r3
			return 0;
   1e266:	2300      	movs	r3, #0
   1e268:	e114      	b.n	1e494 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   1e26a:	4b8c      	ldr	r3, [pc, #560]	; (1e49c <_http_client_handle_header+0x278>)
   1e26c:	681c      	ldr	r4, [r3, #0]
   1e26e:	4b8b      	ldr	r3, [pc, #556]	; (1e49c <_http_client_handle_header+0x278>)
   1e270:	681b      	ldr	r3, [r3, #0]
   1e272:	0018      	movs	r0, r3
   1e274:	4b8c      	ldr	r3, [pc, #560]	; (1e4a8 <_http_client_handle_header+0x284>)
   1e276:	4798      	blx	r3
   1e278:	0002      	movs	r2, r0
   1e27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e27c:	0021      	movs	r1, r4
   1e27e:	0018      	movs	r0, r3
   1e280:	4b8a      	ldr	r3, [pc, #552]	; (1e4ac <_http_client_handle_header+0x288>)
   1e282:	4798      	blx	r3
   1e284:	1e03      	subs	r3, r0, #0
   1e286:	d15d      	bne.n	1e344 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   1e288:	4b84      	ldr	r3, [pc, #528]	; (1e49c <_http_client_handle_header+0x278>)
   1e28a:	681b      	ldr	r3, [r3, #0]
   1e28c:	0018      	movs	r0, r3
   1e28e:	4b86      	ldr	r3, [pc, #536]	; (1e4a8 <_http_client_handle_header+0x284>)
   1e290:	4798      	blx	r3
   1e292:	0002      	movs	r2, r0
   1e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e296:	189a      	adds	r2, r3, r2
   1e298:	687b      	ldr	r3, [r7, #4]
   1e29a:	0011      	movs	r1, r2
   1e29c:	0018      	movs	r0, r3
   1e29e:	4b81      	ldr	r3, [pc, #516]	; (1e4a4 <_http_client_handle_header+0x280>)
   1e2a0:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   1e2a2:	687b      	ldr	r3, [r7, #4]
   1e2a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e2a6:	2b00      	cmp	r3, #0
   1e2a8:	d046      	beq.n	1e338 <_http_client_handle_header+0x114>
   1e2aa:	687b      	ldr	r3, [r7, #4]
   1e2ac:	22e4      	movs	r2, #228	; 0xe4
   1e2ae:	5a9b      	ldrh	r3, [r3, r2]
   1e2b0:	2b00      	cmp	r3, #0
   1e2b2:	d041      	beq.n	1e338 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   1e2b4:	687b      	ldr	r3, [r7, #4]
   1e2b6:	22dc      	movs	r2, #220	; 0xdc
   1e2b8:	589b      	ldr	r3, [r3, r2]
   1e2ba:	2b00      	cmp	r3, #0
   1e2bc:	da19      	bge.n	1e2f2 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   1e2be:	687b      	ldr	r3, [r7, #4]
   1e2c0:	22e4      	movs	r2, #228	; 0xe4
   1e2c2:	5a9a      	ldrh	r2, [r3, r2]
   1e2c4:	230c      	movs	r3, #12
   1e2c6:	18fb      	adds	r3, r7, r3
   1e2c8:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   1e2ca:	230c      	movs	r3, #12
   1e2cc:	18fb      	adds	r3, r7, r3
   1e2ce:	2201      	movs	r2, #1
   1e2d0:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   1e2d2:	687b      	ldr	r3, [r7, #4]
   1e2d4:	22e0      	movs	r2, #224	; 0xe0
   1e2d6:	2100      	movs	r1, #0
   1e2d8:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   1e2da:	230c      	movs	r3, #12
   1e2dc:	18fb      	adds	r3, r7, r3
   1e2de:	2200      	movs	r2, #0
   1e2e0:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1e2e2:	687b      	ldr	r3, [r7, #4]
   1e2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e2e6:	220c      	movs	r2, #12
   1e2e8:	18ba      	adds	r2, r7, r2
   1e2ea:	6878      	ldr	r0, [r7, #4]
   1e2ec:	2102      	movs	r1, #2
   1e2ee:	4798      	blx	r3
   1e2f0:	e022      	b.n	1e338 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   1e2f2:	687b      	ldr	r3, [r7, #4]
   1e2f4:	22dc      	movs	r2, #220	; 0xdc
   1e2f6:	589a      	ldr	r2, [r3, r2]
   1e2f8:	687b      	ldr	r3, [r7, #4]
   1e2fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1e2fc:	429a      	cmp	r2, r3
   1e2fe:	dd1b      	ble.n	1e338 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   1e300:	687b      	ldr	r3, [r7, #4]
   1e302:	22e4      	movs	r2, #228	; 0xe4
   1e304:	5a9a      	ldrh	r2, [r3, r2]
   1e306:	230c      	movs	r3, #12
   1e308:	18fb      	adds	r3, r7, r3
   1e30a:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   1e30c:	687b      	ldr	r3, [r7, #4]
   1e30e:	22dc      	movs	r2, #220	; 0xdc
   1e310:	589b      	ldr	r3, [r3, r2]
   1e312:	001a      	movs	r2, r3
   1e314:	230c      	movs	r3, #12
   1e316:	18fb      	adds	r3, r7, r3
   1e318:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   1e31a:	230c      	movs	r3, #12
   1e31c:	18fb      	adds	r3, r7, r3
   1e31e:	2200      	movs	r2, #0
   1e320:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   1e322:	687b      	ldr	r3, [r7, #4]
   1e324:	22e0      	movs	r2, #224	; 0xe0
   1e326:	2100      	movs	r1, #0
   1e328:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1e32a:	687b      	ldr	r3, [r7, #4]
   1e32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e32e:	220c      	movs	r2, #12
   1e330:	18ba      	adds	r2, r7, r2
   1e332:	6878      	ldr	r0, [r7, #4]
   1e334:	2102      	movs	r1, #2
   1e336:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   1e338:	687b      	ldr	r3, [r7, #4]
   1e33a:	22d8      	movs	r2, #216	; 0xd8
   1e33c:	2101      	movs	r1, #1
   1e33e:	5099      	str	r1, [r3, r2]
			return 1;
   1e340:	2301      	movs	r3, #1
   1e342:	e0a7      	b.n	1e494 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   1e344:	495a      	ldr	r1, [pc, #360]	; (1e4b0 <_http_client_handle_header+0x28c>)
   1e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e348:	2210      	movs	r2, #16
   1e34a:	0018      	movs	r0, r3
   1e34c:	4b57      	ldr	r3, [pc, #348]	; (1e4ac <_http_client_handle_header+0x288>)
   1e34e:	4798      	blx	r3
   1e350:	1e03      	subs	r3, r0, #0
   1e352:	d109      	bne.n	1e368 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   1e354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e356:	3310      	adds	r3, #16
   1e358:	0018      	movs	r0, r3
   1e35a:	4b56      	ldr	r3, [pc, #344]	; (1e4b4 <_http_client_handle_header+0x290>)
   1e35c:	4798      	blx	r3
   1e35e:	0001      	movs	r1, r0
   1e360:	687b      	ldr	r3, [r7, #4]
   1e362:	22dc      	movs	r2, #220	; 0xdc
   1e364:	5099      	str	r1, [r3, r2]
   1e366:	e08b      	b.n	1e480 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   1e368:	4953      	ldr	r1, [pc, #332]	; (1e4b8 <_http_client_handle_header+0x294>)
   1e36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e36c:	2213      	movs	r2, #19
   1e36e:	0018      	movs	r0, r3
   1e370:	4b4e      	ldr	r3, [pc, #312]	; (1e4ac <_http_client_handle_header+0x288>)
   1e372:	4798      	blx	r3
   1e374:	1e03      	subs	r3, r0, #0
   1e376:	d127      	bne.n	1e3c8 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   1e378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e37a:	3313      	adds	r3, #19
   1e37c:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1e37e:	e01e      	b.n	1e3be <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   1e380:	6a3b      	ldr	r3, [r7, #32]
   1e382:	781b      	ldrb	r3, [r3, #0]
   1e384:	2b20      	cmp	r3, #32
   1e386:	d103      	bne.n	1e390 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1e388:	6a3b      	ldr	r3, [r7, #32]
   1e38a:	3301      	adds	r3, #1
   1e38c:	623b      	str	r3, [r7, #32]
   1e38e:	e016      	b.n	1e3be <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   1e390:	6a3b      	ldr	r3, [r7, #32]
   1e392:	781b      	ldrb	r3, [r3, #0]
   1e394:	2b43      	cmp	r3, #67	; 0x43
   1e396:	d003      	beq.n	1e3a0 <_http_client_handle_header+0x17c>
   1e398:	6a3b      	ldr	r3, [r7, #32]
   1e39a:	781b      	ldrb	r3, [r3, #0]
   1e39c:	2b63      	cmp	r3, #99	; 0x63
   1e39e:	d105      	bne.n	1e3ac <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   1e3a0:	687b      	ldr	r3, [r7, #4]
   1e3a2:	21cc      	movs	r1, #204	; 0xcc
   1e3a4:	2201      	movs	r2, #1
   1e3a6:	4252      	negs	r2, r2
   1e3a8:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   1e3aa:	e069      	b.n	1e480 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   1e3ac:	2386      	movs	r3, #134	; 0x86
   1e3ae:	425a      	negs	r2, r3
   1e3b0:	687b      	ldr	r3, [r7, #4]
   1e3b2:	0011      	movs	r1, r2
   1e3b4:	0018      	movs	r0, r3
   1e3b6:	4b41      	ldr	r3, [pc, #260]	; (1e4bc <_http_client_handle_header+0x298>)
   1e3b8:	4798      	blx	r3
					return 0;
   1e3ba:	2300      	movs	r3, #0
   1e3bc:	e06a      	b.n	1e494 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1e3be:	69ba      	ldr	r2, [r7, #24]
   1e3c0:	6a3b      	ldr	r3, [r7, #32]
   1e3c2:	429a      	cmp	r2, r3
   1e3c4:	d8dc      	bhi.n	1e380 <_http_client_handle_header+0x15c>
   1e3c6:	e05b      	b.n	1e480 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   1e3c8:	493d      	ldr	r1, [pc, #244]	; (1e4c0 <_http_client_handle_header+0x29c>)
   1e3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e3cc:	220c      	movs	r2, #12
   1e3ce:	0018      	movs	r0, r3
   1e3d0:	4b36      	ldr	r3, [pc, #216]	; (1e4ac <_http_client_handle_header+0x288>)
   1e3d2:	4798      	blx	r3
   1e3d4:	1e03      	subs	r3, r0, #0
   1e3d6:	d126      	bne.n	1e426 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   1e3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e3da:	330c      	adds	r3, #12
   1e3dc:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1e3de:	e01d      	b.n	1e41c <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   1e3e0:	69fb      	ldr	r3, [r7, #28]
   1e3e2:	781b      	ldrb	r3, [r3, #0]
   1e3e4:	2b20      	cmp	r3, #32
   1e3e6:	d103      	bne.n	1e3f0 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1e3e8:	69fb      	ldr	r3, [r7, #28]
   1e3ea:	3301      	adds	r3, #1
   1e3ec:	61fb      	str	r3, [r7, #28]
   1e3ee:	e015      	b.n	1e41c <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   1e3f0:	69fb      	ldr	r3, [r7, #28]
   1e3f2:	781b      	ldrb	r3, [r3, #0]
   1e3f4:	2b4b      	cmp	r3, #75	; 0x4b
   1e3f6:	d003      	beq.n	1e400 <_http_client_handle_header+0x1dc>
   1e3f8:	69fb      	ldr	r3, [r7, #28]
   1e3fa:	781b      	ldrb	r3, [r3, #0]
   1e3fc:	2b6b      	cmp	r3, #107	; 0x6b
   1e3fe:	d106      	bne.n	1e40e <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   1e400:	687b      	ldr	r3, [r7, #4]
   1e402:	2241      	movs	r2, #65	; 0x41
   1e404:	5c99      	ldrb	r1, [r3, r2]
   1e406:	2002      	movs	r0, #2
   1e408:	4301      	orrs	r1, r0
   1e40a:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   1e40c:	e038      	b.n	1e480 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   1e40e:	687b      	ldr	r3, [r7, #4]
   1e410:	2241      	movs	r2, #65	; 0x41
   1e412:	5c99      	ldrb	r1, [r3, r2]
   1e414:	2002      	movs	r0, #2
   1e416:	4381      	bics	r1, r0
   1e418:	5499      	strb	r1, [r3, r2]
				break;
   1e41a:	e031      	b.n	1e480 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1e41c:	69ba      	ldr	r2, [r7, #24]
   1e41e:	69fb      	ldr	r3, [r7, #28]
   1e420:	429a      	cmp	r2, r3
   1e422:	d8dd      	bhi.n	1e3e0 <_http_client_handle_header+0x1bc>
   1e424:	e02c      	b.n	1e480 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   1e426:	4927      	ldr	r1, [pc, #156]	; (1e4c4 <_http_client_handle_header+0x2a0>)
   1e428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e42a:	2205      	movs	r2, #5
   1e42c:	0018      	movs	r0, r3
   1e42e:	4b1f      	ldr	r3, [pc, #124]	; (1e4ac <_http_client_handle_header+0x288>)
   1e430:	4798      	blx	r3
   1e432:	1e03      	subs	r3, r0, #0
   1e434:	d124      	bne.n	1e480 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   1e436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e438:	3309      	adds	r3, #9
   1e43a:	0018      	movs	r0, r3
   1e43c:	4b1d      	ldr	r3, [pc, #116]	; (1e4b4 <_http_client_handle_header+0x290>)
   1e43e:	4798      	blx	r3
   1e440:	0003      	movs	r3, r0
   1e442:	b299      	uxth	r1, r3
   1e444:	687b      	ldr	r3, [r7, #4]
   1e446:	22e4      	movs	r2, #228	; 0xe4
   1e448:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   1e44a:	687b      	ldr	r3, [r7, #4]
   1e44c:	22dc      	movs	r2, #220	; 0xdc
   1e44e:	2100      	movs	r1, #0
   1e450:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   1e452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e454:	3305      	adds	r3, #5
   1e456:	781b      	ldrb	r3, [r3, #0]
   1e458:	2b31      	cmp	r3, #49	; 0x31
   1e45a:	d804      	bhi.n	1e466 <_http_client_handle_header+0x242>
   1e45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e45e:	3307      	adds	r3, #7
   1e460:	781b      	ldrb	r3, [r3, #0]
   1e462:	2b30      	cmp	r3, #48	; 0x30
   1e464:	d906      	bls.n	1e474 <_http_client_handle_header+0x250>
				module->permanent = 1;
   1e466:	687b      	ldr	r3, [r7, #4]
   1e468:	2241      	movs	r2, #65	; 0x41
   1e46a:	5c99      	ldrb	r1, [r3, r2]
   1e46c:	2002      	movs	r0, #2
   1e46e:	4301      	orrs	r1, r0
   1e470:	5499      	strb	r1, [r3, r2]
   1e472:	e005      	b.n	1e480 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   1e474:	687b      	ldr	r3, [r7, #4]
   1e476:	2241      	movs	r2, #65	; 0x41
   1e478:	5c99      	ldrb	r1, [r3, r2]
   1e47a:	2002      	movs	r0, #2
   1e47c:	4381      	bics	r1, r0
   1e47e:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   1e480:	4b06      	ldr	r3, [pc, #24]	; (1e49c <_http_client_handle_header+0x278>)
   1e482:	681b      	ldr	r3, [r3, #0]
   1e484:	0018      	movs	r0, r3
   1e486:	4b08      	ldr	r3, [pc, #32]	; (1e4a8 <_http_client_handle_header+0x284>)
   1e488:	4798      	blx	r3
   1e48a:	0002      	movs	r2, r0
   1e48c:	69bb      	ldr	r3, [r7, #24]
   1e48e:	189b      	adds	r3, r3, r2
   1e490:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   1e492:	e6ce      	b.n	1e232 <_http_client_handle_header+0xe>
	}
}
   1e494:	0018      	movs	r0, r3
   1e496:	46bd      	mov	sp, r7
   1e498:	b00b      	add	sp, #44	; 0x2c
   1e49a:	bd90      	pop	{r4, r7, pc}
   1e49c:	20000128 	.word	0x20000128
   1e4a0:	00021355 	.word	0x00021355
   1e4a4:	0001e889 	.word	0x0001e889
   1e4a8:	000212d7 	.word	0x000212d7
   1e4ac:	000212e5 	.word	0x000212e5
   1e4b0:	00025f94 	.word	0x00025f94
   1e4b4:	00020e6d 	.word	0x00020e6d
   1e4b8:	00025fb8 	.word	0x00025fb8
   1e4bc:	0001d8a1 	.word	0x0001d8a1
   1e4c0:	00025fcc 	.word	0x00025fcc
   1e4c4:	00025fdc 	.word	0x00025fdc

0001e4c8 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   1e4c8:	b580      	push	{r7, lr}
   1e4ca:	b088      	sub	sp, #32
   1e4cc:	af00      	add	r7, sp, #0
   1e4ce:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   1e4d0:	687b      	ldr	r3, [r7, #4]
   1e4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e4d4:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   1e4d6:	2300      	movs	r3, #0
   1e4d8:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   1e4da:	687b      	ldr	r3, [r7, #4]
   1e4dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e4de:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   1e4e0:	687b      	ldr	r3, [r7, #4]
   1e4e2:	22e0      	movs	r2, #224	; 0xe0
   1e4e4:	589b      	ldr	r3, [r3, r2]
   1e4e6:	2b00      	cmp	r3, #0
   1e4e8:	db71      	blt.n	1e5ce <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   1e4ea:	687b      	ldr	r3, [r7, #4]
   1e4ec:	22e0      	movs	r2, #224	; 0xe0
   1e4ee:	589b      	ldr	r3, [r3, r2]
   1e4f0:	2b00      	cmp	r3, #0
   1e4f2:	d134      	bne.n	1e55e <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   1e4f4:	687b      	ldr	r3, [r7, #4]
   1e4f6:	22d8      	movs	r2, #216	; 0xd8
   1e4f8:	2100      	movs	r1, #0
   1e4fa:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   1e4fc:	687b      	ldr	r3, [r7, #4]
   1e4fe:	22e4      	movs	r2, #228	; 0xe4
   1e500:	2100      	movs	r1, #0
   1e502:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   1e504:	2308      	movs	r3, #8
   1e506:	18fb      	adds	r3, r7, r3
   1e508:	2201      	movs	r2, #1
   1e50a:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   1e50c:	2308      	movs	r3, #8
   1e50e:	18fb      	adds	r3, r7, r3
   1e510:	2200      	movs	r2, #0
   1e512:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   1e514:	2308      	movs	r3, #8
   1e516:	18fb      	adds	r3, r7, r3
   1e518:	2200      	movs	r2, #0
   1e51a:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   1e51c:	687b      	ldr	r3, [r7, #4]
   1e51e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e520:	2b00      	cmp	r3, #0
   1e522:	d006      	beq.n	1e532 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1e524:	687b      	ldr	r3, [r7, #4]
   1e526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e528:	2208      	movs	r2, #8
   1e52a:	18ba      	adds	r2, r7, r2
   1e52c:	6878      	ldr	r0, [r7, #4]
   1e52e:	2103      	movs	r1, #3
   1e530:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   1e532:	687b      	ldr	r3, [r7, #4]
   1e534:	2241      	movs	r2, #65	; 0x41
   1e536:	5c9b      	ldrb	r3, [r3, r2]
   1e538:	2202      	movs	r2, #2
   1e53a:	4013      	ands	r3, r2
   1e53c:	b2db      	uxtb	r3, r3
   1e53e:	2b00      	cmp	r3, #0
   1e540:	d105      	bne.n	1e54e <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   1e542:	687b      	ldr	r3, [r7, #4]
   1e544:	2100      	movs	r1, #0
   1e546:	0018      	movs	r0, r3
   1e548:	4b62      	ldr	r3, [pc, #392]	; (1e6d4 <_http_client_read_chuked_entity+0x20c>)
   1e54a:	4798      	blx	r3
					return;
   1e54c:	e0bf      	b.n	1e6ce <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   1e54e:	697b      	ldr	r3, [r7, #20]
   1e550:	1c9a      	adds	r2, r3, #2
   1e552:	687b      	ldr	r3, [r7, #4]
   1e554:	0011      	movs	r1, r2
   1e556:	0018      	movs	r0, r3
   1e558:	4b5f      	ldr	r3, [pc, #380]	; (1e6d8 <_http_client_read_chuked_entity+0x210>)
   1e55a:	4798      	blx	r3
   1e55c:	e0b2      	b.n	1e6c4 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   1e55e:	687b      	ldr	r3, [r7, #4]
   1e560:	22e0      	movs	r2, #224	; 0xe0
   1e562:	589a      	ldr	r2, [r3, r2]
   1e564:	69fb      	ldr	r3, [r7, #28]
   1e566:	429a      	cmp	r2, r3
   1e568:	dd00      	ble.n	1e56c <_http_client_read_chuked_entity+0xa4>
   1e56a:	e0ab      	b.n	1e6c4 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   1e56c:	687b      	ldr	r3, [r7, #4]
   1e56e:	22e0      	movs	r2, #224	; 0xe0
   1e570:	589b      	ldr	r3, [r3, r2]
   1e572:	001a      	movs	r2, r3
   1e574:	2308      	movs	r3, #8
   1e576:	18fb      	adds	r3, r7, r3
   1e578:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   1e57a:	2308      	movs	r3, #8
   1e57c:	18fb      	adds	r3, r7, r3
   1e57e:	697a      	ldr	r2, [r7, #20]
   1e580:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   1e582:	2308      	movs	r3, #8
   1e584:	18fb      	adds	r3, r7, r3
   1e586:	2200      	movs	r2, #0
   1e588:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   1e58a:	687b      	ldr	r3, [r7, #4]
   1e58c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e58e:	2b00      	cmp	r3, #0
   1e590:	d006      	beq.n	1e5a0 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1e592:	687b      	ldr	r3, [r7, #4]
   1e594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e596:	2208      	movs	r2, #8
   1e598:	18ba      	adds	r2, r7, r2
   1e59a:	6878      	ldr	r0, [r7, #4]
   1e59c:	2103      	movs	r1, #3
   1e59e:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   1e5a0:	687b      	ldr	r3, [r7, #4]
   1e5a2:	22e0      	movs	r2, #224	; 0xe0
   1e5a4:	589b      	ldr	r3, [r3, r2]
   1e5a6:	3302      	adds	r3, #2
   1e5a8:	697a      	ldr	r2, [r7, #20]
   1e5aa:	18d2      	adds	r2, r2, r3
   1e5ac:	687b      	ldr	r3, [r7, #4]
   1e5ae:	0011      	movs	r1, r2
   1e5b0:	0018      	movs	r0, r3
   1e5b2:	4b49      	ldr	r3, [pc, #292]	; (1e6d8 <_http_client_read_chuked_entity+0x210>)
   1e5b4:	4798      	blx	r3
				length = (int)module->recved_size;
   1e5b6:	687b      	ldr	r3, [r7, #4]
   1e5b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e5ba:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   1e5bc:	687b      	ldr	r3, [r7, #4]
   1e5be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e5c0:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   1e5c2:	687b      	ldr	r3, [r7, #4]
   1e5c4:	21e0      	movs	r1, #224	; 0xe0
   1e5c6:	2201      	movs	r2, #1
   1e5c8:	4252      	negs	r2, r2
   1e5ca:	505a      	str	r2, [r3, r1]
   1e5cc:	e07a      	b.n	1e6c4 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   1e5ce:	687b      	ldr	r3, [r7, #4]
   1e5d0:	22e0      	movs	r2, #224	; 0xe0
   1e5d2:	2100      	movs	r1, #0
   1e5d4:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   1e5d6:	e05a      	b.n	1e68e <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   1e5d8:	697b      	ldr	r3, [r7, #20]
   1e5da:	781b      	ldrb	r3, [r3, #0]
   1e5dc:	2b0a      	cmp	r3, #10
   1e5de:	d106      	bne.n	1e5ee <_http_client_read_chuked_entity+0x126>
					buffer++;
   1e5e0:	697b      	ldr	r3, [r7, #20]
   1e5e2:	3301      	adds	r3, #1
   1e5e4:	617b      	str	r3, [r7, #20]
					length--;
   1e5e6:	69fb      	ldr	r3, [r7, #28]
   1e5e8:	3b01      	subs	r3, #1
   1e5ea:	61fb      	str	r3, [r7, #28]
					break;
   1e5ec:	e052      	b.n	1e694 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   1e5ee:	69bb      	ldr	r3, [r7, #24]
   1e5f0:	2b00      	cmp	r3, #0
   1e5f2:	d145      	bne.n	1e680 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   1e5f4:	697b      	ldr	r3, [r7, #20]
   1e5f6:	781b      	ldrb	r3, [r3, #0]
   1e5f8:	2b2f      	cmp	r3, #47	; 0x2f
   1e5fa:	d910      	bls.n	1e61e <_http_client_read_chuked_entity+0x156>
   1e5fc:	697b      	ldr	r3, [r7, #20]
   1e5fe:	781b      	ldrb	r3, [r3, #0]
   1e600:	2b39      	cmp	r3, #57	; 0x39
   1e602:	d80c      	bhi.n	1e61e <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   1e604:	687b      	ldr	r3, [r7, #4]
   1e606:	22e0      	movs	r2, #224	; 0xe0
   1e608:	589b      	ldr	r3, [r3, r2]
   1e60a:	011b      	lsls	r3, r3, #4
   1e60c:	697a      	ldr	r2, [r7, #20]
   1e60e:	7812      	ldrb	r2, [r2, #0]
   1e610:	189b      	adds	r3, r3, r2
   1e612:	3b30      	subs	r3, #48	; 0x30
   1e614:	001a      	movs	r2, r3
   1e616:	687b      	ldr	r3, [r7, #4]
   1e618:	21e0      	movs	r1, #224	; 0xe0
   1e61a:	505a      	str	r2, [r3, r1]
   1e61c:	e031      	b.n	1e682 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   1e61e:	697b      	ldr	r3, [r7, #20]
   1e620:	781b      	ldrb	r3, [r3, #0]
   1e622:	2b60      	cmp	r3, #96	; 0x60
   1e624:	d910      	bls.n	1e648 <_http_client_read_chuked_entity+0x180>
   1e626:	697b      	ldr	r3, [r7, #20]
   1e628:	781b      	ldrb	r3, [r3, #0]
   1e62a:	2b66      	cmp	r3, #102	; 0x66
   1e62c:	d80c      	bhi.n	1e648 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   1e62e:	687b      	ldr	r3, [r7, #4]
   1e630:	22e0      	movs	r2, #224	; 0xe0
   1e632:	589b      	ldr	r3, [r3, r2]
   1e634:	011b      	lsls	r3, r3, #4
   1e636:	697a      	ldr	r2, [r7, #20]
   1e638:	7812      	ldrb	r2, [r2, #0]
   1e63a:	189b      	adds	r3, r3, r2
   1e63c:	3b61      	subs	r3, #97	; 0x61
   1e63e:	001a      	movs	r2, r3
   1e640:	687b      	ldr	r3, [r7, #4]
   1e642:	21e0      	movs	r1, #224	; 0xe0
   1e644:	505a      	str	r2, [r3, r1]
   1e646:	e01c      	b.n	1e682 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   1e648:	697b      	ldr	r3, [r7, #20]
   1e64a:	781b      	ldrb	r3, [r3, #0]
   1e64c:	2b40      	cmp	r3, #64	; 0x40
   1e64e:	d910      	bls.n	1e672 <_http_client_read_chuked_entity+0x1aa>
   1e650:	697b      	ldr	r3, [r7, #20]
   1e652:	781b      	ldrb	r3, [r3, #0]
   1e654:	2b46      	cmp	r3, #70	; 0x46
   1e656:	d80c      	bhi.n	1e672 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   1e658:	687b      	ldr	r3, [r7, #4]
   1e65a:	22e0      	movs	r2, #224	; 0xe0
   1e65c:	589b      	ldr	r3, [r3, r2]
   1e65e:	011b      	lsls	r3, r3, #4
   1e660:	697a      	ldr	r2, [r7, #20]
   1e662:	7812      	ldrb	r2, [r2, #0]
   1e664:	189b      	adds	r3, r3, r2
   1e666:	3b41      	subs	r3, #65	; 0x41
   1e668:	001a      	movs	r2, r3
   1e66a:	687b      	ldr	r3, [r7, #4]
   1e66c:	21e0      	movs	r1, #224	; 0xe0
   1e66e:	505a      	str	r2, [r3, r1]
   1e670:	e007      	b.n	1e682 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   1e672:	697b      	ldr	r3, [r7, #20]
   1e674:	781b      	ldrb	r3, [r3, #0]
   1e676:	2b3b      	cmp	r3, #59	; 0x3b
   1e678:	d103      	bne.n	1e682 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   1e67a:	2301      	movs	r3, #1
   1e67c:	61bb      	str	r3, [r7, #24]
   1e67e:	e000      	b.n	1e682 <_http_client_read_chuked_entity+0x1ba>
					continue;
   1e680:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   1e682:	697b      	ldr	r3, [r7, #20]
   1e684:	3301      	adds	r3, #1
   1e686:	617b      	str	r3, [r7, #20]
   1e688:	69fb      	ldr	r3, [r7, #28]
   1e68a:	3b01      	subs	r3, #1
   1e68c:	61fb      	str	r3, [r7, #28]
   1e68e:	69fb      	ldr	r3, [r7, #28]
   1e690:	2b00      	cmp	r3, #0
   1e692:	dca1      	bgt.n	1e5d8 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   1e694:	687b      	ldr	r3, [r7, #4]
   1e696:	22e0      	movs	r2, #224	; 0xe0
   1e698:	589a      	ldr	r2, [r3, r2]
   1e69a:	687b      	ldr	r3, [r7, #4]
   1e69c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1e69e:	429a      	cmp	r2, r3
   1e6a0:	dd07      	ble.n	1e6b2 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   1e6a2:	238b      	movs	r3, #139	; 0x8b
   1e6a4:	425a      	negs	r2, r3
   1e6a6:	687b      	ldr	r3, [r7, #4]
   1e6a8:	0011      	movs	r1, r2
   1e6aa:	0018      	movs	r0, r3
   1e6ac:	4b09      	ldr	r3, [pc, #36]	; (1e6d4 <_http_client_read_chuked_entity+0x20c>)
   1e6ae:	4798      	blx	r3
				return;
   1e6b0:	e00d      	b.n	1e6ce <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   1e6b2:	69fb      	ldr	r3, [r7, #28]
   1e6b4:	2b00      	cmp	r3, #0
   1e6b6:	d105      	bne.n	1e6c4 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   1e6b8:	687b      	ldr	r3, [r7, #4]
   1e6ba:	21e0      	movs	r1, #224	; 0xe0
   1e6bc:	2201      	movs	r2, #1
   1e6be:	4252      	negs	r2, r2
   1e6c0:	505a      	str	r2, [r3, r1]
				return;
   1e6c2:	e004      	b.n	1e6ce <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   1e6c4:	687b      	ldr	r3, [r7, #4]
   1e6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e6c8:	2b00      	cmp	r3, #0
   1e6ca:	d000      	beq.n	1e6ce <_http_client_read_chuked_entity+0x206>
   1e6cc:	e708      	b.n	1e4e0 <_http_client_read_chuked_entity+0x18>
}
   1e6ce:	46bd      	mov	sp, r7
   1e6d0:	b008      	add	sp, #32
   1e6d2:	bd80      	pop	{r7, pc}
   1e6d4:	0001d8a1 	.word	0x0001d8a1
   1e6d8:	0001e889 	.word	0x0001e889

0001e6dc <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   1e6dc:	b580      	push	{r7, lr}
   1e6de:	b086      	sub	sp, #24
   1e6e0:	af00      	add	r7, sp, #0
   1e6e2:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   1e6e4:	687b      	ldr	r3, [r7, #4]
   1e6e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e6e8:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   1e6ea:	687b      	ldr	r3, [r7, #4]
   1e6ec:	22dc      	movs	r2, #220	; 0xdc
   1e6ee:	589b      	ldr	r3, [r3, r2]
   1e6f0:	2b00      	cmp	r3, #0
   1e6f2:	db58      	blt.n	1e7a6 <_http_client_handle_entity+0xca>
   1e6f4:	687b      	ldr	r3, [r7, #4]
   1e6f6:	22dc      	movs	r2, #220	; 0xdc
   1e6f8:	589a      	ldr	r2, [r3, r2]
   1e6fa:	687b      	ldr	r3, [r7, #4]
   1e6fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1e6fe:	429a      	cmp	r2, r3
   1e700:	dc51      	bgt.n	1e7a6 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   1e702:	687b      	ldr	r3, [r7, #4]
   1e704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e706:	0019      	movs	r1, r3
   1e708:	687b      	ldr	r3, [r7, #4]
   1e70a:	22dc      	movs	r2, #220	; 0xdc
   1e70c:	589b      	ldr	r3, [r3, r2]
   1e70e:	4299      	cmp	r1, r3
   1e710:	da00      	bge.n	1e714 <_http_client_handle_entity+0x38>
   1e712:	e0a9      	b.n	1e868 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   1e714:	687b      	ldr	r3, [r7, #4]
   1e716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e718:	2b00      	cmp	r3, #0
   1e71a:	d020      	beq.n	1e75e <_http_client_handle_entity+0x82>
   1e71c:	687b      	ldr	r3, [r7, #4]
   1e71e:	22e4      	movs	r2, #228	; 0xe4
   1e720:	5a9b      	ldrh	r3, [r3, r2]
   1e722:	2b00      	cmp	r3, #0
   1e724:	d01b      	beq.n	1e75e <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   1e726:	687b      	ldr	r3, [r7, #4]
   1e728:	22e4      	movs	r2, #228	; 0xe4
   1e72a:	5a9a      	ldrh	r2, [r3, r2]
   1e72c:	2308      	movs	r3, #8
   1e72e:	18fb      	adds	r3, r7, r3
   1e730:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   1e732:	2308      	movs	r3, #8
   1e734:	18fb      	adds	r3, r7, r3
   1e736:	2200      	movs	r2, #0
   1e738:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   1e73a:	687b      	ldr	r3, [r7, #4]
   1e73c:	22dc      	movs	r2, #220	; 0xdc
   1e73e:	589b      	ldr	r3, [r3, r2]
   1e740:	001a      	movs	r2, r3
   1e742:	2308      	movs	r3, #8
   1e744:	18fb      	adds	r3, r7, r3
   1e746:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   1e748:	2308      	movs	r3, #8
   1e74a:	18fb      	adds	r3, r7, r3
   1e74c:	697a      	ldr	r2, [r7, #20]
   1e74e:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1e750:	687b      	ldr	r3, [r7, #4]
   1e752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e754:	2208      	movs	r2, #8
   1e756:	18ba      	adds	r2, r7, r2
   1e758:	6878      	ldr	r0, [r7, #4]
   1e75a:	2102      	movs	r1, #2
   1e75c:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   1e75e:	687b      	ldr	r3, [r7, #4]
   1e760:	22d8      	movs	r2, #216	; 0xd8
   1e762:	2100      	movs	r1, #0
   1e764:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   1e766:	687b      	ldr	r3, [r7, #4]
   1e768:	22e4      	movs	r2, #228	; 0xe4
   1e76a:	2100      	movs	r1, #0
   1e76c:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   1e76e:	687b      	ldr	r3, [r7, #4]
   1e770:	2241      	movs	r2, #65	; 0x41
   1e772:	5c9b      	ldrb	r3, [r3, r2]
   1e774:	2202      	movs	r2, #2
   1e776:	4013      	ands	r3, r2
   1e778:	b2db      	uxtb	r3, r3
   1e77a:	2b00      	cmp	r3, #0
   1e77c:	d105      	bne.n	1e78a <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   1e77e:	687b      	ldr	r3, [r7, #4]
   1e780:	2100      	movs	r1, #0
   1e782:	0018      	movs	r0, r3
   1e784:	4b3b      	ldr	r3, [pc, #236]	; (1e874 <_http_client_handle_entity+0x198>)
   1e786:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   1e788:	e06e      	b.n	1e868 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   1e78a:	687b      	ldr	r3, [r7, #4]
   1e78c:	22dc      	movs	r2, #220	; 0xdc
   1e78e:	589b      	ldr	r3, [r3, r2]
   1e790:	001a      	movs	r2, r3
   1e792:	697b      	ldr	r3, [r7, #20]
   1e794:	189a      	adds	r2, r3, r2
   1e796:	687b      	ldr	r3, [r7, #4]
   1e798:	0011      	movs	r1, r2
   1e79a:	0018      	movs	r0, r3
   1e79c:	4b36      	ldr	r3, [pc, #216]	; (1e878 <_http_client_handle_entity+0x19c>)
   1e79e:	4798      	blx	r3
				return module->recved_size;
   1e7a0:	687b      	ldr	r3, [r7, #4]
   1e7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e7a4:	e061      	b.n	1e86a <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   1e7a6:	687b      	ldr	r3, [r7, #4]
   1e7a8:	22dc      	movs	r2, #220	; 0xdc
   1e7aa:	589b      	ldr	r3, [r3, r2]
   1e7ac:	2b00      	cmp	r3, #0
   1e7ae:	db57      	blt.n	1e860 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   1e7b0:	687b      	ldr	r3, [r7, #4]
   1e7b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1e7b4:	2308      	movs	r3, #8
   1e7b6:	18fb      	adds	r3, r7, r3
   1e7b8:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   1e7ba:	2308      	movs	r3, #8
   1e7bc:	18fb      	adds	r3, r7, r3
   1e7be:	697a      	ldr	r2, [r7, #20]
   1e7c0:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   1e7c2:	687b      	ldr	r3, [r7, #4]
   1e7c4:	22e0      	movs	r2, #224	; 0xe0
   1e7c6:	589a      	ldr	r2, [r3, r2]
   1e7c8:	687b      	ldr	r3, [r7, #4]
   1e7ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e7cc:	18d2      	adds	r2, r2, r3
   1e7ce:	687b      	ldr	r3, [r7, #4]
   1e7d0:	21e0      	movs	r1, #224	; 0xe0
   1e7d2:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   1e7d4:	687b      	ldr	r3, [r7, #4]
   1e7d6:	22dc      	movs	r2, #220	; 0xdc
   1e7d8:	589a      	ldr	r2, [r3, r2]
   1e7da:	687b      	ldr	r3, [r7, #4]
   1e7dc:	21e0      	movs	r1, #224	; 0xe0
   1e7de:	585b      	ldr	r3, [r3, r1]
   1e7e0:	429a      	cmp	r2, r3
   1e7e2:	dc0c      	bgt.n	1e7fe <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   1e7e4:	687b      	ldr	r3, [r7, #4]
   1e7e6:	22d8      	movs	r2, #216	; 0xd8
   1e7e8:	2100      	movs	r1, #0
   1e7ea:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   1e7ec:	687b      	ldr	r3, [r7, #4]
   1e7ee:	22e4      	movs	r2, #228	; 0xe4
   1e7f0:	2100      	movs	r1, #0
   1e7f2:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   1e7f4:	2308      	movs	r3, #8
   1e7f6:	18fb      	adds	r3, r7, r3
   1e7f8:	2201      	movs	r2, #1
   1e7fa:	721a      	strb	r2, [r3, #8]
   1e7fc:	e003      	b.n	1e806 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   1e7fe:	2308      	movs	r3, #8
   1e800:	18fb      	adds	r3, r7, r3
   1e802:	2200      	movs	r2, #0
   1e804:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   1e806:	687b      	ldr	r3, [r7, #4]
   1e808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e80a:	2b00      	cmp	r3, #0
   1e80c:	d006      	beq.n	1e81c <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1e80e:	687b      	ldr	r3, [r7, #4]
   1e810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e812:	2208      	movs	r2, #8
   1e814:	18ba      	adds	r2, r7, r2
   1e816:	6878      	ldr	r0, [r7, #4]
   1e818:	2103      	movs	r1, #3
   1e81a:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   1e81c:	2308      	movs	r3, #8
   1e81e:	18fb      	adds	r3, r7, r3
   1e820:	7a1b      	ldrb	r3, [r3, #8]
   1e822:	2b01      	cmp	r3, #1
   1e824:	d112      	bne.n	1e84c <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   1e826:	687b      	ldr	r3, [r7, #4]
   1e828:	2241      	movs	r2, #65	; 0x41
   1e82a:	5c9b      	ldrb	r3, [r3, r2]
   1e82c:	2202      	movs	r2, #2
   1e82e:	4013      	ands	r3, r2
   1e830:	b2db      	uxtb	r3, r3
   1e832:	2b00      	cmp	r3, #0
   1e834:	d10a      	bne.n	1e84c <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   1e836:	4b11      	ldr	r3, [pc, #68]	; (1e87c <_http_client_handle_entity+0x1a0>)
   1e838:	0018      	movs	r0, r3
   1e83a:	4b11      	ldr	r3, [pc, #68]	; (1e880 <_http_client_handle_entity+0x1a4>)
   1e83c:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   1e83e:	687b      	ldr	r3, [r7, #4]
   1e840:	2100      	movs	r1, #0
   1e842:	0018      	movs	r0, r3
   1e844:	4b0b      	ldr	r3, [pc, #44]	; (1e874 <_http_client_handle_entity+0x198>)
   1e846:	4798      	blx	r3
					return 0;
   1e848:	2300      	movs	r3, #0
   1e84a:	e00e      	b.n	1e86a <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   1e84c:	687b      	ldr	r3, [r7, #4]
   1e84e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e850:	697a      	ldr	r2, [r7, #20]
   1e852:	18d2      	adds	r2, r2, r3
   1e854:	687b      	ldr	r3, [r7, #4]
   1e856:	0011      	movs	r1, r2
   1e858:	0018      	movs	r0, r3
   1e85a:	4b07      	ldr	r3, [pc, #28]	; (1e878 <_http_client_handle_entity+0x19c>)
   1e85c:	4798      	blx	r3
   1e85e:	e003      	b.n	1e868 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   1e860:	687b      	ldr	r3, [r7, #4]
   1e862:	0018      	movs	r0, r3
   1e864:	4b07      	ldr	r3, [pc, #28]	; (1e884 <_http_client_handle_entity+0x1a8>)
   1e866:	4798      	blx	r3
		}
	}

	return 0;
   1e868:	2300      	movs	r3, #0
}
   1e86a:	0018      	movs	r0, r3
   1e86c:	46bd      	mov	sp, r7
   1e86e:	b006      	add	sp, #24
   1e870:	bd80      	pop	{r7, pc}
   1e872:	46c0      	nop			; (mov r8, r8)
   1e874:	0001d8a1 	.word	0x0001d8a1
   1e878:	0001e889 	.word	0x0001e889
   1e87c:	00025fe4 	.word	0x00025fe4
   1e880:	00021141 	.word	0x00021141
   1e884:	0001e4c9 	.word	0x0001e4c9

0001e888 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   1e888:	b580      	push	{r7, lr}
   1e88a:	b084      	sub	sp, #16
   1e88c:	af00      	add	r7, sp, #0
   1e88e:	6078      	str	r0, [r7, #4]
   1e890:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   1e892:	687b      	ldr	r3, [r7, #4]
   1e894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e896:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   1e898:	687b      	ldr	r3, [r7, #4]
   1e89a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e89c:	001a      	movs	r2, r3
   1e89e:	683b      	ldr	r3, [r7, #0]
   1e8a0:	1ad2      	subs	r2, r2, r3
   1e8a2:	68fb      	ldr	r3, [r7, #12]
   1e8a4:	18d3      	adds	r3, r2, r3
   1e8a6:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   1e8a8:	68bb      	ldr	r3, [r7, #8]
   1e8aa:	2b00      	cmp	r3, #0
   1e8ac:	dd09      	ble.n	1e8c2 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   1e8ae:	68ba      	ldr	r2, [r7, #8]
   1e8b0:	6839      	ldr	r1, [r7, #0]
   1e8b2:	68fb      	ldr	r3, [r7, #12]
   1e8b4:	0018      	movs	r0, r3
   1e8b6:	4b06      	ldr	r3, [pc, #24]	; (1e8d0 <_http_client_move_buffer+0x48>)
   1e8b8:	4798      	blx	r3
		module->recved_size = remain;
   1e8ba:	68ba      	ldr	r2, [r7, #8]
   1e8bc:	687b      	ldr	r3, [r7, #4]
   1e8be:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   1e8c0:	e002      	b.n	1e8c8 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   1e8c2:	687b      	ldr	r3, [r7, #4]
   1e8c4:	2200      	movs	r2, #0
   1e8c6:	645a      	str	r2, [r3, #68]	; 0x44
}
   1e8c8:	46c0      	nop			; (mov r8, r8)
   1e8ca:	46bd      	mov	sp, r7
   1e8cc:	b004      	add	sp, #16
   1e8ce:	bd80      	pop	{r7, pc}
   1e8d0:	00020efb 	.word	0x00020efb

0001e8d4 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   1e8d4:	b580      	push	{r7, lr}
   1e8d6:	b084      	sub	sp, #16
   1e8d8:	af00      	add	r7, sp, #0
   1e8da:	60f8      	str	r0, [r7, #12]
   1e8dc:	60b9      	str	r1, [r7, #8]
   1e8de:	607a      	str	r2, [r7, #4]
   1e8e0:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   1e8e2:	68fb      	ldr	r3, [r7, #12]
   1e8e4:	687a      	ldr	r2, [r7, #4]
   1e8e6:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   1e8e8:	68fb      	ldr	r3, [r7, #12]
   1e8ea:	68ba      	ldr	r2, [r7, #8]
   1e8ec:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   1e8ee:	68fb      	ldr	r3, [r7, #12]
   1e8f0:	2200      	movs	r2, #0
   1e8f2:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   1e8f4:	68fb      	ldr	r3, [r7, #12]
   1e8f6:	683a      	ldr	r2, [r7, #0]
   1e8f8:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   1e8fa:	68fb      	ldr	r3, [r7, #12]
   1e8fc:	69ba      	ldr	r2, [r7, #24]
   1e8fe:	60da      	str	r2, [r3, #12]
}
   1e900:	46c0      	nop			; (mov r8, r8)
   1e902:	46bd      	mov	sp, r7
   1e904:	b004      	add	sp, #16
   1e906:	bd80      	pop	{r7, pc}

0001e908 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   1e908:	b580      	push	{r7, lr}
   1e90a:	b084      	sub	sp, #16
   1e90c:	af00      	add	r7, sp, #0
   1e90e:	6078      	str	r0, [r7, #4]
   1e910:	000a      	movs	r2, r1
   1e912:	1cfb      	adds	r3, r7, #3
   1e914:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   1e916:	687b      	ldr	r3, [r7, #4]
   1e918:	681a      	ldr	r2, [r3, #0]
   1e91a:	687b      	ldr	r3, [r7, #4]
   1e91c:	685b      	ldr	r3, [r3, #4]
   1e91e:	1ad3      	subs	r3, r2, r3
   1e920:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   1e922:	68fb      	ldr	r3, [r7, #12]
   1e924:	2b00      	cmp	r3, #0
   1e926:	dc03      	bgt.n	1e930 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   1e928:	687b      	ldr	r3, [r7, #4]
   1e92a:	0018      	movs	r0, r3
   1e92c:	4b08      	ldr	r3, [pc, #32]	; (1e950 <stream_writer_send_8+0x48>)
   1e92e:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   1e930:	687b      	ldr	r3, [r7, #4]
   1e932:	6919      	ldr	r1, [r3, #16]
   1e934:	687b      	ldr	r3, [r7, #4]
   1e936:	685b      	ldr	r3, [r3, #4]
   1e938:	1c58      	adds	r0, r3, #1
   1e93a:	687a      	ldr	r2, [r7, #4]
   1e93c:	6050      	str	r0, [r2, #4]
   1e93e:	18cb      	adds	r3, r1, r3
   1e940:	1cfa      	adds	r2, r7, #3
   1e942:	7812      	ldrb	r2, [r2, #0]
   1e944:	701a      	strb	r2, [r3, #0]
}
   1e946:	46c0      	nop			; (mov r8, r8)
   1e948:	46bd      	mov	sp, r7
   1e94a:	b004      	add	sp, #16
   1e94c:	bd80      	pop	{r7, pc}
   1e94e:	46c0      	nop			; (mov r8, r8)
   1e950:	0001e991 	.word	0x0001e991

0001e954 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   1e954:	b580      	push	{r7, lr}
   1e956:	b084      	sub	sp, #16
   1e958:	af00      	add	r7, sp, #0
   1e95a:	60f8      	str	r0, [r7, #12]
   1e95c:	60b9      	str	r1, [r7, #8]
   1e95e:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   1e960:	e00d      	b.n	1e97e <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   1e962:	68bb      	ldr	r3, [r7, #8]
   1e964:	781b      	ldrb	r3, [r3, #0]
   1e966:	b25a      	sxtb	r2, r3
   1e968:	68fb      	ldr	r3, [r7, #12]
   1e96a:	0011      	movs	r1, r2
   1e96c:	0018      	movs	r0, r3
   1e96e:	4b07      	ldr	r3, [pc, #28]	; (1e98c <stream_writer_send_buffer+0x38>)
   1e970:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   1e972:	687b      	ldr	r3, [r7, #4]
   1e974:	3b01      	subs	r3, #1
   1e976:	607b      	str	r3, [r7, #4]
   1e978:	68bb      	ldr	r3, [r7, #8]
   1e97a:	3301      	adds	r3, #1
   1e97c:	60bb      	str	r3, [r7, #8]
   1e97e:	687b      	ldr	r3, [r7, #4]
   1e980:	2b00      	cmp	r3, #0
   1e982:	d1ee      	bne.n	1e962 <stream_writer_send_buffer+0xe>
	}
}
   1e984:	46c0      	nop			; (mov r8, r8)
   1e986:	46bd      	mov	sp, r7
   1e988:	b004      	add	sp, #16
   1e98a:	bd80      	pop	{r7, pc}
   1e98c:	0001e909 	.word	0x0001e909

0001e990 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   1e990:	b590      	push	{r4, r7, lr}
   1e992:	b083      	sub	sp, #12
   1e994:	af00      	add	r7, sp, #0
   1e996:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   1e998:	687b      	ldr	r3, [r7, #4]
   1e99a:	685b      	ldr	r3, [r3, #4]
   1e99c:	2b00      	cmp	r3, #0
   1e99e:	d00c      	beq.n	1e9ba <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   1e9a0:	687b      	ldr	r3, [r7, #4]
   1e9a2:	689c      	ldr	r4, [r3, #8]
   1e9a4:	687b      	ldr	r3, [r7, #4]
   1e9a6:	68d8      	ldr	r0, [r3, #12]
   1e9a8:	687b      	ldr	r3, [r7, #4]
   1e9aa:	6919      	ldr	r1, [r3, #16]
   1e9ac:	687b      	ldr	r3, [r7, #4]
   1e9ae:	685b      	ldr	r3, [r3, #4]
   1e9b0:	001a      	movs	r2, r3
   1e9b2:	47a0      	blx	r4
		writer->written = 0;
   1e9b4:	687b      	ldr	r3, [r7, #4]
   1e9b6:	2200      	movs	r2, #0
   1e9b8:	605a      	str	r2, [r3, #4]
	}
}
   1e9ba:	46c0      	nop			; (mov r8, r8)
   1e9bc:	46bd      	mov	sp, r7
   1e9be:	b003      	add	sp, #12
   1e9c0:	bd90      	pop	{r4, r7, pc}
	...

0001e9c4 <system_cpu_clock_get_hz>:
{
   1e9c4:	b580      	push	{r7, lr}
   1e9c6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1e9c8:	2000      	movs	r0, #0
   1e9ca:	4b05      	ldr	r3, [pc, #20]	; (1e9e0 <system_cpu_clock_get_hz+0x1c>)
   1e9cc:	4798      	blx	r3
   1e9ce:	0002      	movs	r2, r0
   1e9d0:	4b04      	ldr	r3, [pc, #16]	; (1e9e4 <system_cpu_clock_get_hz+0x20>)
   1e9d2:	7a1b      	ldrb	r3, [r3, #8]
   1e9d4:	b2db      	uxtb	r3, r3
   1e9d6:	40da      	lsrs	r2, r3
   1e9d8:	0013      	movs	r3, r2
}
   1e9da:	0018      	movs	r0, r3
   1e9dc:	46bd      	mov	sp, r7
   1e9de:	bd80      	pop	{r7, pc}
   1e9e0:	000163a5 	.word	0x000163a5
   1e9e4:	40000400 	.word	0x40000400

0001e9e8 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   1e9e8:	b580      	push	{r7, lr}
   1e9ea:	b084      	sub	sp, #16
   1e9ec:	af00      	add	r7, sp, #0
   1e9ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   1e9f0:	687b      	ldr	r3, [r7, #4]
   1e9f2:	681b      	ldr	r3, [r3, #0]
   1e9f4:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   1e9f6:	46c0      	nop			; (mov r8, r8)
   1e9f8:	68fb      	ldr	r3, [r7, #12]
   1e9fa:	689b      	ldr	r3, [r3, #8]
   1e9fc:	2202      	movs	r2, #2
   1e9fe:	4013      	ands	r3, r2
   1ea00:	d1fa      	bne.n	1e9f8 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   1ea02:	68fb      	ldr	r3, [r7, #12]
   1ea04:	681b      	ldr	r3, [r3, #0]
   1ea06:	2202      	movs	r2, #2
   1ea08:	431a      	orrs	r2, r3
   1ea0a:	68fb      	ldr	r3, [r7, #12]
   1ea0c:	601a      	str	r2, [r3, #0]
}
   1ea0e:	46c0      	nop			; (mov r8, r8)
   1ea10:	46bd      	mov	sp, r7
   1ea12:	b004      	add	sp, #16
   1ea14:	bd80      	pop	{r7, pc}
	...

0001ea18 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   1ea18:	b580      	push	{r7, lr}
   1ea1a:	b082      	sub	sp, #8
   1ea1c:	af00      	add	r7, sp, #0
   1ea1e:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   1ea20:	4b04      	ldr	r3, [pc, #16]	; (1ea34 <sw_timer_tcc_callback+0x1c>)
   1ea22:	681b      	ldr	r3, [r3, #0]
   1ea24:	1c5a      	adds	r2, r3, #1
   1ea26:	4b03      	ldr	r3, [pc, #12]	; (1ea34 <sw_timer_tcc_callback+0x1c>)
   1ea28:	601a      	str	r2, [r3, #0]
}
   1ea2a:	46c0      	nop			; (mov r8, r8)
   1ea2c:	46bd      	mov	sp, r7
   1ea2e:	b002      	add	sp, #8
   1ea30:	bd80      	pop	{r7, pc}
   1ea32:	46c0      	nop			; (mov r8, r8)
   1ea34:	2000419c 	.word	0x2000419c

0001ea38 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   1ea38:	b580      	push	{r7, lr}
   1ea3a:	b082      	sub	sp, #8
   1ea3c:	af00      	add	r7, sp, #0
   1ea3e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   1ea40:	687b      	ldr	r3, [r7, #4]
   1ea42:	2264      	movs	r2, #100	; 0x64
   1ea44:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   1ea46:	687b      	ldr	r3, [r7, #4]
   1ea48:	2200      	movs	r2, #0
   1ea4a:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   1ea4c:	687b      	ldr	r3, [r7, #4]
   1ea4e:	2200      	movs	r2, #0
   1ea50:	705a      	strb	r2, [r3, #1]
}
   1ea52:	46c0      	nop			; (mov r8, r8)
   1ea54:	46bd      	mov	sp, r7
   1ea56:	b002      	add	sp, #8
   1ea58:	bd80      	pop	{r7, pc}
	...

0001ea5c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   1ea5c:	b590      	push	{r4, r7, lr}
   1ea5e:	b0b1      	sub	sp, #196	; 0xc4
   1ea60:	af00      	add	r7, sp, #0
   1ea62:	6078      	str	r0, [r7, #4]
   1ea64:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   1ea66:	230c      	movs	r3, #12
   1ea68:	18fb      	adds	r3, r7, r3
   1ea6a:	4a2e      	ldr	r2, [pc, #184]	; (1eb24 <sw_timer_init+0xc8>)
   1ea6c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1ea6e:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   1ea70:	683b      	ldr	r3, [r7, #0]
   1ea72:	885b      	ldrh	r3, [r3, #2]
   1ea74:	001a      	movs	r2, r3
   1ea76:	687b      	ldr	r3, [r7, #4]
   1ea78:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   1ea7a:	687b      	ldr	r3, [r7, #4]
   1ea7c:	3314      	adds	r3, #20
   1ea7e:	22bc      	movs	r2, #188	; 0xbc
   1ea80:	18ba      	adds	r2, r7, r2
   1ea82:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   1ea84:	683b      	ldr	r3, [r7, #0]
   1ea86:	781b      	ldrb	r3, [r3, #0]
   1ea88:	001a      	movs	r2, r3
   1ea8a:	230c      	movs	r3, #12
   1ea8c:	18fb      	adds	r3, r7, r3
   1ea8e:	0092      	lsls	r2, r2, #2
   1ea90:	58d2      	ldr	r2, [r2, r3]
   1ea92:	2318      	movs	r3, #24
   1ea94:	18fb      	adds	r3, r7, r3
   1ea96:	0011      	movs	r1, r2
   1ea98:	0018      	movs	r0, r3
   1ea9a:	4b23      	ldr	r3, [pc, #140]	; (1eb28 <sw_timer_init+0xcc>)
   1ea9c:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   1ea9e:	4b23      	ldr	r3, [pc, #140]	; (1eb2c <sw_timer_init+0xd0>)
   1eaa0:	4798      	blx	r3
   1eaa2:	0004      	movs	r4, r0
   1eaa4:	683b      	ldr	r3, [r7, #0]
   1eaa6:	885b      	ldrh	r3, [r3, #2]
   1eaa8:	001a      	movs	r2, r3
   1eaaa:	4b21      	ldr	r3, [pc, #132]	; (1eb30 <sw_timer_init+0xd4>)
   1eaac:	0011      	movs	r1, r2
   1eaae:	22fa      	movs	r2, #250	; 0xfa
   1eab0:	0210      	lsls	r0, r2, #8
   1eab2:	4798      	blx	r3
   1eab4:	0003      	movs	r3, r0
   1eab6:	001a      	movs	r2, r3
   1eab8:	4b1e      	ldr	r3, [pc, #120]	; (1eb34 <sw_timer_init+0xd8>)
   1eaba:	0011      	movs	r1, r2
   1eabc:	0020      	movs	r0, r4
   1eabe:	4798      	blx	r3
   1eac0:	0003      	movs	r3, r0
   1eac2:	001a      	movs	r2, r3
   1eac4:	2318      	movs	r3, #24
   1eac6:	18fb      	adds	r3, r7, r3
   1eac8:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   1eaca:	2318      	movs	r3, #24
   1eacc:	18fb      	adds	r3, r7, r3
   1eace:	2205      	movs	r2, #5
   1ead0:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   1ead2:	683b      	ldr	r3, [r7, #0]
   1ead4:	781b      	ldrb	r3, [r3, #0]
   1ead6:	001a      	movs	r2, r3
   1ead8:	230c      	movs	r3, #12
   1eada:	18fb      	adds	r3, r7, r3
   1eadc:	0092      	lsls	r2, r2, #2
   1eade:	58d1      	ldr	r1, [r2, r3]
   1eae0:	2318      	movs	r3, #24
   1eae2:	18fa      	adds	r2, r7, r3
   1eae4:	23bc      	movs	r3, #188	; 0xbc
   1eae6:	18fb      	adds	r3, r7, r3
   1eae8:	681b      	ldr	r3, [r3, #0]
   1eaea:	0018      	movs	r0, r3
   1eaec:	4b12      	ldr	r3, [pc, #72]	; (1eb38 <sw_timer_init+0xdc>)
   1eaee:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1eaf0:	683b      	ldr	r3, [r7, #0]
   1eaf2:	785b      	ldrb	r3, [r3, #1]
   1eaf4:	3308      	adds	r3, #8
   1eaf6:	b2da      	uxtb	r2, r3
   1eaf8:	4910      	ldr	r1, [pc, #64]	; (1eb3c <sw_timer_init+0xe0>)
   1eafa:	23bc      	movs	r3, #188	; 0xbc
   1eafc:	18fb      	adds	r3, r7, r3
   1eafe:	681b      	ldr	r3, [r3, #0]
   1eb00:	0018      	movs	r0, r3
   1eb02:	4b0f      	ldr	r3, [pc, #60]	; (1eb40 <sw_timer_init+0xe4>)
   1eb04:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1eb06:	683b      	ldr	r3, [r7, #0]
   1eb08:	785b      	ldrb	r3, [r3, #1]
   1eb0a:	3308      	adds	r3, #8
   1eb0c:	b2da      	uxtb	r2, r3
   1eb0e:	23bc      	movs	r3, #188	; 0xbc
   1eb10:	18fb      	adds	r3, r7, r3
   1eb12:	681b      	ldr	r3, [r3, #0]
   1eb14:	0011      	movs	r1, r2
   1eb16:	0018      	movs	r0, r3
   1eb18:	4b0a      	ldr	r3, [pc, #40]	; (1eb44 <sw_timer_init+0xe8>)
   1eb1a:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   1eb1c:	46c0      	nop			; (mov r8, r8)
   1eb1e:	46bd      	mov	sp, r7
   1eb20:	b031      	add	sp, #196	; 0xc4
   1eb22:	bd90      	pop	{r4, r7, pc}
   1eb24:	00026024 	.word	0x00026024
   1eb28:	0001693d 	.word	0x0001693d
   1eb2c:	0001e9c5 	.word	0x0001e9c5
   1eb30:	0001f059 	.word	0x0001f059
   1eb34:	0001ef45 	.word	0x0001ef45
   1eb38:	00016f99 	.word	0x00016f99
   1eb3c:	0001ea19 	.word	0x0001ea19
   1eb40:	000173b1 	.word	0x000173b1
   1eb44:	000173f1 	.word	0x000173f1

0001eb48 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   1eb48:	b580      	push	{r7, lr}
   1eb4a:	b084      	sub	sp, #16
   1eb4c:	af00      	add	r7, sp, #0
   1eb4e:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   1eb50:	687b      	ldr	r3, [r7, #4]
   1eb52:	3314      	adds	r3, #20
   1eb54:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   1eb56:	68fb      	ldr	r3, [r7, #12]
   1eb58:	0018      	movs	r0, r3
   1eb5a:	4b03      	ldr	r3, [pc, #12]	; (1eb68 <sw_timer_enable+0x20>)
   1eb5c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   1eb5e:	46c0      	nop			; (mov r8, r8)
   1eb60:	46bd      	mov	sp, r7
   1eb62:	b004      	add	sp, #16
   1eb64:	bd80      	pop	{r7, pc}
   1eb66:	46c0      	nop			; (mov r8, r8)
   1eb68:	0001e9e9 	.word	0x0001e9e9

0001eb6c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   1eb6c:	b580      	push	{r7, lr}
   1eb6e:	b086      	sub	sp, #24
   1eb70:	af00      	add	r7, sp, #0
   1eb72:	60f8      	str	r0, [r7, #12]
   1eb74:	60b9      	str	r1, [r7, #8]
   1eb76:	607a      	str	r2, [r7, #4]
   1eb78:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1eb7a:	2300      	movs	r3, #0
   1eb7c:	617b      	str	r3, [r7, #20]
   1eb7e:	e032      	b.n	1ebe6 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   1eb80:	68f9      	ldr	r1, [r7, #12]
   1eb82:	697a      	ldr	r2, [r7, #20]
   1eb84:	0013      	movs	r3, r2
   1eb86:	009b      	lsls	r3, r3, #2
   1eb88:	189b      	adds	r3, r3, r2
   1eb8a:	009b      	lsls	r3, r3, #2
   1eb8c:	5c5b      	ldrb	r3, [r3, r1]
   1eb8e:	07db      	lsls	r3, r3, #31
   1eb90:	0fdb      	lsrs	r3, r3, #31
   1eb92:	b2db      	uxtb	r3, r3
   1eb94:	2b00      	cmp	r3, #0
   1eb96:	d123      	bne.n	1ebe0 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   1eb98:	697a      	ldr	r2, [r7, #20]
   1eb9a:	0013      	movs	r3, r2
   1eb9c:	009b      	lsls	r3, r3, #2
   1eb9e:	189b      	adds	r3, r3, r2
   1eba0:	009b      	lsls	r3, r3, #2
   1eba2:	68fa      	ldr	r2, [r7, #12]
   1eba4:	18d3      	adds	r3, r2, r3
   1eba6:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   1eba8:	693b      	ldr	r3, [r7, #16]
   1ebaa:	68ba      	ldr	r2, [r7, #8]
   1ebac:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   1ebae:	693b      	ldr	r3, [r7, #16]
   1ebb0:	781a      	ldrb	r2, [r3, #0]
   1ebb2:	2102      	movs	r1, #2
   1ebb4:	438a      	bics	r2, r1
   1ebb6:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   1ebb8:	693b      	ldr	r3, [r7, #16]
   1ebba:	687a      	ldr	r2, [r7, #4]
   1ebbc:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   1ebbe:	68fb      	ldr	r3, [r7, #12]
   1ebc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1ebc2:	4b0d      	ldr	r3, [pc, #52]	; (1ebf8 <sw_timer_register_callback+0x8c>)
   1ebc4:	0011      	movs	r1, r2
   1ebc6:	6838      	ldr	r0, [r7, #0]
   1ebc8:	4798      	blx	r3
   1ebca:	0003      	movs	r3, r0
   1ebcc:	001a      	movs	r2, r3
   1ebce:	693b      	ldr	r3, [r7, #16]
   1ebd0:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   1ebd2:	693b      	ldr	r3, [r7, #16]
   1ebd4:	781a      	ldrb	r2, [r3, #0]
   1ebd6:	2101      	movs	r1, #1
   1ebd8:	430a      	orrs	r2, r1
   1ebda:	701a      	strb	r2, [r3, #0]
			return index;
   1ebdc:	697b      	ldr	r3, [r7, #20]
   1ebde:	e007      	b.n	1ebf0 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1ebe0:	697b      	ldr	r3, [r7, #20]
   1ebe2:	3301      	adds	r3, #1
   1ebe4:	617b      	str	r3, [r7, #20]
   1ebe6:	697b      	ldr	r3, [r7, #20]
   1ebe8:	2b00      	cmp	r3, #0
   1ebea:	ddc9      	ble.n	1eb80 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   1ebec:	2301      	movs	r3, #1
   1ebee:	425b      	negs	r3, r3
}
   1ebf0:	0018      	movs	r0, r3
   1ebf2:	46bd      	mov	sp, r7
   1ebf4:	b006      	add	sp, #24
   1ebf6:	bd80      	pop	{r7, pc}
   1ebf8:	0001ef45 	.word	0x0001ef45

0001ebfc <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   1ebfc:	b580      	push	{r7, lr}
   1ebfe:	b086      	sub	sp, #24
   1ec00:	af00      	add	r7, sp, #0
   1ec02:	60f8      	str	r0, [r7, #12]
   1ec04:	60b9      	str	r1, [r7, #8]
   1ec06:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   1ec08:	68ba      	ldr	r2, [r7, #8]
   1ec0a:	0013      	movs	r3, r2
   1ec0c:	009b      	lsls	r3, r3, #2
   1ec0e:	189b      	adds	r3, r3, r2
   1ec10:	009b      	lsls	r3, r3, #2
   1ec12:	68fa      	ldr	r2, [r7, #12]
   1ec14:	18d3      	adds	r3, r2, r3
   1ec16:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   1ec18:	697b      	ldr	r3, [r7, #20]
   1ec1a:	781a      	ldrb	r2, [r3, #0]
   1ec1c:	2102      	movs	r1, #2
   1ec1e:	430a      	orrs	r2, r1
   1ec20:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   1ec22:	68fb      	ldr	r3, [r7, #12]
   1ec24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1ec26:	4b07      	ldr	r3, [pc, #28]	; (1ec44 <sw_timer_enable_callback+0x48>)
   1ec28:	0011      	movs	r1, r2
   1ec2a:	6878      	ldr	r0, [r7, #4]
   1ec2c:	4798      	blx	r3
   1ec2e:	0003      	movs	r3, r0
   1ec30:	001a      	movs	r2, r3
   1ec32:	4b05      	ldr	r3, [pc, #20]	; (1ec48 <sw_timer_enable_callback+0x4c>)
   1ec34:	681b      	ldr	r3, [r3, #0]
   1ec36:	18d2      	adds	r2, r2, r3
   1ec38:	697b      	ldr	r3, [r7, #20]
   1ec3a:	611a      	str	r2, [r3, #16]
}
   1ec3c:	46c0      	nop			; (mov r8, r8)
   1ec3e:	46bd      	mov	sp, r7
   1ec40:	b006      	add	sp, #24
   1ec42:	bd80      	pop	{r7, pc}
   1ec44:	0001ef45 	.word	0x0001ef45
   1ec48:	2000419c 	.word	0x2000419c

0001ec4c <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   1ec4c:	b580      	push	{r7, lr}
   1ec4e:	b084      	sub	sp, #16
   1ec50:	af00      	add	r7, sp, #0
   1ec52:	6078      	str	r0, [r7, #4]
   1ec54:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   1ec56:	683a      	ldr	r2, [r7, #0]
   1ec58:	0013      	movs	r3, r2
   1ec5a:	009b      	lsls	r3, r3, #2
   1ec5c:	189b      	adds	r3, r3, r2
   1ec5e:	009b      	lsls	r3, r3, #2
   1ec60:	687a      	ldr	r2, [r7, #4]
   1ec62:	18d3      	adds	r3, r2, r3
   1ec64:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   1ec66:	68fb      	ldr	r3, [r7, #12]
   1ec68:	781a      	ldrb	r2, [r3, #0]
   1ec6a:	2102      	movs	r1, #2
   1ec6c:	438a      	bics	r2, r1
   1ec6e:	701a      	strb	r2, [r3, #0]
}
   1ec70:	46c0      	nop			; (mov r8, r8)
   1ec72:	46bd      	mov	sp, r7
   1ec74:	b004      	add	sp, #16
   1ec76:	bd80      	pop	{r7, pc}

0001ec78 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   1ec78:	b590      	push	{r4, r7, lr}
   1ec7a:	b085      	sub	sp, #20
   1ec7c:	af00      	add	r7, sp, #0
   1ec7e:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1ec80:	2300      	movs	r3, #0
   1ec82:	60fb      	str	r3, [r7, #12]
   1ec84:	e053      	b.n	1ed2e <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   1ec86:	6879      	ldr	r1, [r7, #4]
   1ec88:	68fa      	ldr	r2, [r7, #12]
   1ec8a:	0013      	movs	r3, r2
   1ec8c:	009b      	lsls	r3, r3, #2
   1ec8e:	189b      	adds	r3, r3, r2
   1ec90:	009b      	lsls	r3, r3, #2
   1ec92:	5c5b      	ldrb	r3, [r3, r1]
   1ec94:	07db      	lsls	r3, r3, #31
   1ec96:	0fdb      	lsrs	r3, r3, #31
   1ec98:	b2db      	uxtb	r3, r3
   1ec9a:	2b00      	cmp	r3, #0
   1ec9c:	d044      	beq.n	1ed28 <sw_timer_task+0xb0>
   1ec9e:	6879      	ldr	r1, [r7, #4]
   1eca0:	68fa      	ldr	r2, [r7, #12]
   1eca2:	0013      	movs	r3, r2
   1eca4:	009b      	lsls	r3, r3, #2
   1eca6:	189b      	adds	r3, r3, r2
   1eca8:	009b      	lsls	r3, r3, #2
   1ecaa:	5c5b      	ldrb	r3, [r3, r1]
   1ecac:	079b      	lsls	r3, r3, #30
   1ecae:	0fdb      	lsrs	r3, r3, #31
   1ecb0:	b2db      	uxtb	r3, r3
   1ecb2:	2b00      	cmp	r3, #0
   1ecb4:	d038      	beq.n	1ed28 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   1ecb6:	68fa      	ldr	r2, [r7, #12]
   1ecb8:	0013      	movs	r3, r2
   1ecba:	009b      	lsls	r3, r3, #2
   1ecbc:	189b      	adds	r3, r3, r2
   1ecbe:	009b      	lsls	r3, r3, #2
   1ecc0:	687a      	ldr	r2, [r7, #4]
   1ecc2:	18d3      	adds	r3, r2, r3
   1ecc4:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   1ecc6:	68bb      	ldr	r3, [r7, #8]
   1ecc8:	691a      	ldr	r2, [r3, #16]
   1ecca:	4b1c      	ldr	r3, [pc, #112]	; (1ed3c <sw_timer_task+0xc4>)
   1eccc:	681b      	ldr	r3, [r3, #0]
   1ecce:	1ad3      	subs	r3, r2, r3
   1ecd0:	d52a      	bpl.n	1ed28 <sw_timer_task+0xb0>
   1ecd2:	68bb      	ldr	r3, [r7, #8]
   1ecd4:	781b      	ldrb	r3, [r3, #0]
   1ecd6:	2204      	movs	r2, #4
   1ecd8:	4013      	ands	r3, r2
   1ecda:	b2db      	uxtb	r3, r3
   1ecdc:	2b00      	cmp	r3, #0
   1ecde:	d123      	bne.n	1ed28 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   1ece0:	68bb      	ldr	r3, [r7, #8]
   1ece2:	781a      	ldrb	r2, [r3, #0]
   1ece4:	2104      	movs	r1, #4
   1ece6:	430a      	orrs	r2, r1
   1ece8:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   1ecea:	68bb      	ldr	r3, [r7, #8]
   1ecec:	68db      	ldr	r3, [r3, #12]
   1ecee:	2b00      	cmp	r3, #0
   1ecf0:	d007      	beq.n	1ed02 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   1ecf2:	68bb      	ldr	r3, [r7, #8]
   1ecf4:	68da      	ldr	r2, [r3, #12]
   1ecf6:	4b11      	ldr	r3, [pc, #68]	; (1ed3c <sw_timer_task+0xc4>)
   1ecf8:	681b      	ldr	r3, [r3, #0]
   1ecfa:	18d2      	adds	r2, r2, r3
   1ecfc:	68bb      	ldr	r3, [r7, #8]
   1ecfe:	611a      	str	r2, [r3, #16]
   1ed00:	e004      	b.n	1ed0c <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   1ed02:	68bb      	ldr	r3, [r7, #8]
   1ed04:	781a      	ldrb	r2, [r3, #0]
   1ed06:	2102      	movs	r1, #2
   1ed08:	438a      	bics	r2, r1
   1ed0a:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   1ed0c:	68bb      	ldr	r3, [r7, #8]
   1ed0e:	685c      	ldr	r4, [r3, #4]
   1ed10:	68bb      	ldr	r3, [r7, #8]
   1ed12:	689a      	ldr	r2, [r3, #8]
   1ed14:	68bb      	ldr	r3, [r7, #8]
   1ed16:	68db      	ldr	r3, [r3, #12]
   1ed18:	68f9      	ldr	r1, [r7, #12]
   1ed1a:	6878      	ldr	r0, [r7, #4]
   1ed1c:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   1ed1e:	68bb      	ldr	r3, [r7, #8]
   1ed20:	781a      	ldrb	r2, [r3, #0]
   1ed22:	2104      	movs	r1, #4
   1ed24:	438a      	bics	r2, r1
   1ed26:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1ed28:	68fb      	ldr	r3, [r7, #12]
   1ed2a:	3301      	adds	r3, #1
   1ed2c:	60fb      	str	r3, [r7, #12]
   1ed2e:	68fb      	ldr	r3, [r7, #12]
   1ed30:	2b00      	cmp	r3, #0
   1ed32:	dda8      	ble.n	1ec86 <sw_timer_task+0xe>
			}
		}
	}
}
   1ed34:	46c0      	nop			; (mov r8, r8)
   1ed36:	46bd      	mov	sp, r7
   1ed38:	b005      	add	sp, #20
   1ed3a:	bd90      	pop	{r4, r7, pc}
   1ed3c:	2000419c 	.word	0x2000419c

0001ed40 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   1ed40:	b580      	push	{r7, lr}
   1ed42:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   1ed44:	4b06      	ldr	r3, [pc, #24]	; (1ed60 <main+0x20>)
   1ed46:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   1ed48:	4b06      	ldr	r3, [pc, #24]	; (1ed64 <main+0x24>)
   1ed4a:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   1ed4c:	2001      	movs	r0, #1
   1ed4e:	4b06      	ldr	r3, [pc, #24]	; (1ed68 <main+0x28>)
   1ed50:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   1ed52:	4b06      	ldr	r3, [pc, #24]	; (1ed6c <main+0x2c>)
   1ed54:	4798      	blx	r3

    return 0;  // Will not get here
   1ed56:	2300      	movs	r3, #0
}
   1ed58:	0018      	movs	r0, r3
   1ed5a:	46bd      	mov	sp, r7
   1ed5c:	bd80      	pop	{r7, pc}
   1ed5e:	46c0      	nop			; (mov r8, r8)
   1ed60:	00016831 	.word	0x00016831
   1ed64:	0000a339 	.word	0x0000a339
   1ed68:	00004a09 	.word	0x00004a09
   1ed6c:	00008991 	.word	0x00008991

0001ed70 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   1ed70:	b580      	push	{r7, lr}
   1ed72:	b082      	sub	sp, #8
   1ed74:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   1ed76:	4b20      	ldr	r3, [pc, #128]	; (1edf8 <vApplicationDaemonTaskStartupHook+0x88>)
   1ed78:	0018      	movs	r0, r3
   1ed7a:	4b20      	ldr	r3, [pc, #128]	; (1edfc <vApplicationDaemonTaskStartupHook+0x8c>)
   1ed7c:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   1ed7e:	4b20      	ldr	r3, [pc, #128]	; (1ee00 <vApplicationDaemonTaskStartupHook+0x90>)
   1ed80:	0018      	movs	r0, r3
   1ed82:	4b1e      	ldr	r3, [pc, #120]	; (1edfc <vApplicationDaemonTaskStartupHook+0x8c>)
   1ed84:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   1ed86:	4b1f      	ldr	r3, [pc, #124]	; (1ee04 <vApplicationDaemonTaskStartupHook+0x94>)
   1ed88:	4798      	blx	r3
   1ed8a:	1e03      	subs	r3, r0, #0
   1ed8c:	d004      	beq.n	1ed98 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   1ed8e:	4b1e      	ldr	r3, [pc, #120]	; (1ee08 <vApplicationDaemonTaskStartupHook+0x98>)
   1ed90:	0018      	movs	r0, r3
   1ed92:	4b1a      	ldr	r3, [pc, #104]	; (1edfc <vApplicationDaemonTaskStartupHook+0x8c>)
   1ed94:	4798      	blx	r3
   1ed96:	e003      	b.n	1eda0 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   1ed98:	4b1c      	ldr	r3, [pc, #112]	; (1ee0c <vApplicationDaemonTaskStartupHook+0x9c>)
   1ed9a:	0018      	movs	r0, r3
   1ed9c:	4b17      	ldr	r3, [pc, #92]	; (1edfc <vApplicationDaemonTaskStartupHook+0x8c>)
   1ed9e:	4798      	blx	r3
    // }
    // else{
    //     SerialConsoleWriteString("Could not find IMU!!!\r\n");
    // }

    uint8_t statusExpected = 0xE0;
   1eda0:	1dfb      	adds	r3, r7, #7
   1eda2:	22e0      	movs	r2, #224	; 0xe0
   1eda4:	701a      	strb	r2, [r3, #0]
    if(drv2605_readStatusReg(GetHapStruct()) == statusExpected){
   1eda6:	4b1a      	ldr	r3, [pc, #104]	; (1ee10 <vApplicationDaemonTaskStartupHook+0xa0>)
   1eda8:	4798      	blx	r3
   1edaa:	0003      	movs	r3, r0
   1edac:	0018      	movs	r0, r3
   1edae:	4b19      	ldr	r3, [pc, #100]	; (1ee14 <vApplicationDaemonTaskStartupHook+0xa4>)
   1edb0:	4798      	blx	r3
   1edb2:	0003      	movs	r3, r0
   1edb4:	001a      	movs	r2, r3
   1edb6:	1dfb      	adds	r3, r7, #7
   1edb8:	781b      	ldrb	r3, [r3, #0]
   1edba:	4293      	cmp	r3, r2
   1edbc:	d10c      	bne.n	1edd8 <vApplicationDaemonTaskStartupHook+0x68>
        SerialConsoleWriteString("Found Haptic!!!\r\n");
   1edbe:	4b16      	ldr	r3, [pc, #88]	; (1ee18 <vApplicationDaemonTaskStartupHook+0xa8>)
   1edc0:	0018      	movs	r0, r3
   1edc2:	4b0e      	ldr	r3, [pc, #56]	; (1edfc <vApplicationDaemonTaskStartupHook+0x8c>)
   1edc4:	4798      	blx	r3
        if(InitHaptic() == 0){
   1edc6:	4b15      	ldr	r3, [pc, #84]	; (1ee1c <vApplicationDaemonTaskStartupHook+0xac>)
   1edc8:	4798      	blx	r3
   1edca:	1e03      	subs	r3, r0, #0
   1edcc:	d108      	bne.n	1ede0 <vApplicationDaemonTaskStartupHook+0x70>
            SerialConsoleWriteString("Initialized Haptic!!!\r\n");
   1edce:	4b14      	ldr	r3, [pc, #80]	; (1ee20 <vApplicationDaemonTaskStartupHook+0xb0>)
   1edd0:	0018      	movs	r0, r3
   1edd2:	4b0a      	ldr	r3, [pc, #40]	; (1edfc <vApplicationDaemonTaskStartupHook+0x8c>)
   1edd4:	4798      	blx	r3
   1edd6:	e003      	b.n	1ede0 <vApplicationDaemonTaskStartupHook+0x70>
        }
    }
    else{
        SerialConsoleWriteString("Could not find Haptic!!!\r\n");
   1edd8:	4b12      	ldr	r3, [pc, #72]	; (1ee24 <vApplicationDaemonTaskStartupHook+0xb4>)
   1edda:	0018      	movs	r0, r3
   1eddc:	4b07      	ldr	r3, [pc, #28]	; (1edfc <vApplicationDaemonTaskStartupHook+0x8c>)
   1edde:	4798      	blx	r3
    }

    StartTasks();
   1ede0:	4b11      	ldr	r3, [pc, #68]	; (1ee28 <vApplicationDaemonTaskStartupHook+0xb8>)
   1ede2:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   1ede4:	4b11      	ldr	r3, [pc, #68]	; (1ee2c <vApplicationDaemonTaskStartupHook+0xbc>)
   1ede6:	681b      	ldr	r3, [r3, #0]
   1ede8:	0018      	movs	r0, r3
   1edea:	4b11      	ldr	r3, [pc, #68]	; (1ee30 <vApplicationDaemonTaskStartupHook+0xc0>)
   1edec:	4798      	blx	r3
}
   1edee:	46c0      	nop			; (mov r8, r8)
   1edf0:	46bd      	mov	sp, r7
   1edf2:	b002      	add	sp, #8
   1edf4:	bd80      	pop	{r7, pc}
   1edf6:	46c0      	nop			; (mov r8, r8)
   1edf8:	00026030 	.word	0x00026030
   1edfc:	0000a3a9 	.word	0x0000a3a9
   1ee00:	00026054 	.word	0x00026054
   1ee04:	00001c2d 	.word	0x00001c2d
   1ee08:	0002606c 	.word	0x0002606c
   1ee0c:	00026090 	.word	0x00026090
   1ee10:	000017f9 	.word	0x000017f9
   1ee14:	00001549 	.word	0x00001549
   1ee18:	000260ac 	.word	0x000260ac
   1ee1c:	00001809 	.word	0x00001809
   1ee20:	000260c0 	.word	0x000260c0
   1ee24:	000260d8 	.word	0x000260d8
   1ee28:	0001ee35 	.word	0x0001ee35
   1ee2c:	200041a4 	.word	0x200041a4
   1ee30:	00008835 	.word	0x00008835

0001ee34 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   1ee34:	b590      	push	{r4, r7, lr}
   1ee36:	b083      	sub	sp, #12
   1ee38:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   1ee3a:	4b26      	ldr	r3, [pc, #152]	; (1eed4 <StartTasks+0xa0>)
   1ee3c:	4798      	blx	r3
   1ee3e:	0003      	movs	r3, r0
   1ee40:	4a25      	ldr	r2, [pc, #148]	; (1eed8 <StartTasks+0xa4>)
   1ee42:	4826      	ldr	r0, [pc, #152]	; (1eedc <StartTasks+0xa8>)
   1ee44:	2140      	movs	r1, #64	; 0x40
   1ee46:	4c26      	ldr	r4, [pc, #152]	; (1eee0 <StartTasks+0xac>)
   1ee48:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1ee4a:	4b24      	ldr	r3, [pc, #144]	; (1eedc <StartTasks+0xa8>)
   1ee4c:	0018      	movs	r0, r3
   1ee4e:	4b25      	ldr	r3, [pc, #148]	; (1eee4 <StartTasks+0xb0>)
   1ee50:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   1ee52:	23c8      	movs	r3, #200	; 0xc8
   1ee54:	005a      	lsls	r2, r3, #1
   1ee56:	4924      	ldr	r1, [pc, #144]	; (1eee8 <StartTasks+0xb4>)
   1ee58:	4824      	ldr	r0, [pc, #144]	; (1eeec <StartTasks+0xb8>)
   1ee5a:	4b25      	ldr	r3, [pc, #148]	; (1eef0 <StartTasks+0xbc>)
   1ee5c:	9301      	str	r3, [sp, #4]
   1ee5e:	2304      	movs	r3, #4
   1ee60:	9300      	str	r3, [sp, #0]
   1ee62:	2300      	movs	r3, #0
   1ee64:	4c23      	ldr	r4, [pc, #140]	; (1eef4 <StartTasks+0xc0>)
   1ee66:	47a0      	blx	r4
   1ee68:	0003      	movs	r3, r0
   1ee6a:	2b01      	cmp	r3, #1
   1ee6c:	d003      	beq.n	1ee76 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   1ee6e:	4b22      	ldr	r3, [pc, #136]	; (1eef8 <StartTasks+0xc4>)
   1ee70:	0018      	movs	r0, r3
   1ee72:	4b1c      	ldr	r3, [pc, #112]	; (1eee4 <StartTasks+0xb0>)
   1ee74:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   1ee76:	4b17      	ldr	r3, [pc, #92]	; (1eed4 <StartTasks+0xa0>)
   1ee78:	4798      	blx	r3
   1ee7a:	0003      	movs	r3, r0
   1ee7c:	4a1f      	ldr	r2, [pc, #124]	; (1eefc <StartTasks+0xc8>)
   1ee7e:	4817      	ldr	r0, [pc, #92]	; (1eedc <StartTasks+0xa8>)
   1ee80:	2140      	movs	r1, #64	; 0x40
   1ee82:	4c17      	ldr	r4, [pc, #92]	; (1eee0 <StartTasks+0xac>)
   1ee84:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1ee86:	4b15      	ldr	r3, [pc, #84]	; (1eedc <StartTasks+0xa8>)
   1ee88:	0018      	movs	r0, r3
   1ee8a:	4b16      	ldr	r3, [pc, #88]	; (1eee4 <StartTasks+0xb0>)
   1ee8c:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   1ee8e:	23fa      	movs	r3, #250	; 0xfa
   1ee90:	009a      	lsls	r2, r3, #2
   1ee92:	491b      	ldr	r1, [pc, #108]	; (1ef00 <StartTasks+0xcc>)
   1ee94:	481b      	ldr	r0, [pc, #108]	; (1ef04 <StartTasks+0xd0>)
   1ee96:	4b1c      	ldr	r3, [pc, #112]	; (1ef08 <StartTasks+0xd4>)
   1ee98:	9301      	str	r3, [sp, #4]
   1ee9a:	2303      	movs	r3, #3
   1ee9c:	9300      	str	r3, [sp, #0]
   1ee9e:	2300      	movs	r3, #0
   1eea0:	4c14      	ldr	r4, [pc, #80]	; (1eef4 <StartTasks+0xc0>)
   1eea2:	47a0      	blx	r4
   1eea4:	0003      	movs	r3, r0
   1eea6:	2b01      	cmp	r3, #1
   1eea8:	d003      	beq.n	1eeb2 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   1eeaa:	4b18      	ldr	r3, [pc, #96]	; (1ef0c <StartTasks+0xd8>)
   1eeac:	0018      	movs	r0, r3
   1eeae:	4b0d      	ldr	r3, [pc, #52]	; (1eee4 <StartTasks+0xb0>)
   1eeb0:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   1eeb2:	4b08      	ldr	r3, [pc, #32]	; (1eed4 <StartTasks+0xa0>)
   1eeb4:	4798      	blx	r3
   1eeb6:	0003      	movs	r3, r0
   1eeb8:	4a15      	ldr	r2, [pc, #84]	; (1ef10 <StartTasks+0xdc>)
   1eeba:	4808      	ldr	r0, [pc, #32]	; (1eedc <StartTasks+0xa8>)
   1eebc:	2140      	movs	r1, #64	; 0x40
   1eebe:	4c08      	ldr	r4, [pc, #32]	; (1eee0 <StartTasks+0xac>)
   1eec0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1eec2:	4b06      	ldr	r3, [pc, #24]	; (1eedc <StartTasks+0xa8>)
   1eec4:	0018      	movs	r0, r3
   1eec6:	4b07      	ldr	r3, [pc, #28]	; (1eee4 <StartTasks+0xb0>)
   1eec8:	4798      	blx	r3
}
   1eeca:	46c0      	nop			; (mov r8, r8)
   1eecc:	46bd      	mov	sp, r7
   1eece:	b001      	add	sp, #4
   1eed0:	bd90      	pop	{r4, r7, pc}
   1eed2:	46c0      	nop			; (mov r8, r8)
   1eed4:	00006971 	.word	0x00006971
   1eed8:	000260f4 	.word	0x000260f4
   1eedc:	20005690 	.word	0x20005690
   1eee0:	00021179 	.word	0x00021179
   1eee4:	0000a3a9 	.word	0x0000a3a9
   1eee8:	00026118 	.word	0x00026118
   1eeec:	00000e71 	.word	0x00000e71
   1eef0:	200041a0 	.word	0x200041a0
   1eef4:	000083b9 	.word	0x000083b9
   1eef8:	00026124 	.word	0x00026124
   1eefc:	00026150 	.word	0x00026150
   1ef00:	00026170 	.word	0x00026170
   1ef04:	00003841 	.word	0x00003841
   1ef08:	200041a8 	.word	0x200041a8
   1ef0c:	0002617c 	.word	0x0002617c
   1ef10:	000261a8 	.word	0x000261a8

0001ef14 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   1ef14:	b580      	push	{r7, lr}
   1ef16:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   1ef18:	4b02      	ldr	r3, [pc, #8]	; (1ef24 <vApplicationMallocFailedHook+0x10>)
   1ef1a:	0018      	movs	r0, r3
   1ef1c:	4b02      	ldr	r3, [pc, #8]	; (1ef28 <vApplicationMallocFailedHook+0x14>)
   1ef1e:	4798      	blx	r3
    while (1)
   1ef20:	e7fe      	b.n	1ef20 <vApplicationMallocFailedHook+0xc>
   1ef22:	46c0      	nop			; (mov r8, r8)
   1ef24:	000261c8 	.word	0x000261c8
   1ef28:	0000a3a9 	.word	0x0000a3a9

0001ef2c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   1ef2c:	b580      	push	{r7, lr}
   1ef2e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   1ef30:	4b02      	ldr	r3, [pc, #8]	; (1ef3c <vApplicationStackOverflowHook+0x10>)
   1ef32:	0018      	movs	r0, r3
   1ef34:	4b02      	ldr	r3, [pc, #8]	; (1ef40 <vApplicationStackOverflowHook+0x14>)
   1ef36:	4798      	blx	r3
    while (1)
   1ef38:	e7fe      	b.n	1ef38 <vApplicationStackOverflowHook+0xc>
   1ef3a:	46c0      	nop			; (mov r8, r8)
   1ef3c:	000261f4 	.word	0x000261f4
   1ef40:	0000a3a9 	.word	0x0000a3a9

0001ef44 <__udivsi3>:
   1ef44:	2200      	movs	r2, #0
   1ef46:	0843      	lsrs	r3, r0, #1
   1ef48:	428b      	cmp	r3, r1
   1ef4a:	d374      	bcc.n	1f036 <__udivsi3+0xf2>
   1ef4c:	0903      	lsrs	r3, r0, #4
   1ef4e:	428b      	cmp	r3, r1
   1ef50:	d35f      	bcc.n	1f012 <__udivsi3+0xce>
   1ef52:	0a03      	lsrs	r3, r0, #8
   1ef54:	428b      	cmp	r3, r1
   1ef56:	d344      	bcc.n	1efe2 <__udivsi3+0x9e>
   1ef58:	0b03      	lsrs	r3, r0, #12
   1ef5a:	428b      	cmp	r3, r1
   1ef5c:	d328      	bcc.n	1efb0 <__udivsi3+0x6c>
   1ef5e:	0c03      	lsrs	r3, r0, #16
   1ef60:	428b      	cmp	r3, r1
   1ef62:	d30d      	bcc.n	1ef80 <__udivsi3+0x3c>
   1ef64:	22ff      	movs	r2, #255	; 0xff
   1ef66:	0209      	lsls	r1, r1, #8
   1ef68:	ba12      	rev	r2, r2
   1ef6a:	0c03      	lsrs	r3, r0, #16
   1ef6c:	428b      	cmp	r3, r1
   1ef6e:	d302      	bcc.n	1ef76 <__udivsi3+0x32>
   1ef70:	1212      	asrs	r2, r2, #8
   1ef72:	0209      	lsls	r1, r1, #8
   1ef74:	d065      	beq.n	1f042 <__udivsi3+0xfe>
   1ef76:	0b03      	lsrs	r3, r0, #12
   1ef78:	428b      	cmp	r3, r1
   1ef7a:	d319      	bcc.n	1efb0 <__udivsi3+0x6c>
   1ef7c:	e000      	b.n	1ef80 <__udivsi3+0x3c>
   1ef7e:	0a09      	lsrs	r1, r1, #8
   1ef80:	0bc3      	lsrs	r3, r0, #15
   1ef82:	428b      	cmp	r3, r1
   1ef84:	d301      	bcc.n	1ef8a <__udivsi3+0x46>
   1ef86:	03cb      	lsls	r3, r1, #15
   1ef88:	1ac0      	subs	r0, r0, r3
   1ef8a:	4152      	adcs	r2, r2
   1ef8c:	0b83      	lsrs	r3, r0, #14
   1ef8e:	428b      	cmp	r3, r1
   1ef90:	d301      	bcc.n	1ef96 <__udivsi3+0x52>
   1ef92:	038b      	lsls	r3, r1, #14
   1ef94:	1ac0      	subs	r0, r0, r3
   1ef96:	4152      	adcs	r2, r2
   1ef98:	0b43      	lsrs	r3, r0, #13
   1ef9a:	428b      	cmp	r3, r1
   1ef9c:	d301      	bcc.n	1efa2 <__udivsi3+0x5e>
   1ef9e:	034b      	lsls	r3, r1, #13
   1efa0:	1ac0      	subs	r0, r0, r3
   1efa2:	4152      	adcs	r2, r2
   1efa4:	0b03      	lsrs	r3, r0, #12
   1efa6:	428b      	cmp	r3, r1
   1efa8:	d301      	bcc.n	1efae <__udivsi3+0x6a>
   1efaa:	030b      	lsls	r3, r1, #12
   1efac:	1ac0      	subs	r0, r0, r3
   1efae:	4152      	adcs	r2, r2
   1efb0:	0ac3      	lsrs	r3, r0, #11
   1efb2:	428b      	cmp	r3, r1
   1efb4:	d301      	bcc.n	1efba <__udivsi3+0x76>
   1efb6:	02cb      	lsls	r3, r1, #11
   1efb8:	1ac0      	subs	r0, r0, r3
   1efba:	4152      	adcs	r2, r2
   1efbc:	0a83      	lsrs	r3, r0, #10
   1efbe:	428b      	cmp	r3, r1
   1efc0:	d301      	bcc.n	1efc6 <__udivsi3+0x82>
   1efc2:	028b      	lsls	r3, r1, #10
   1efc4:	1ac0      	subs	r0, r0, r3
   1efc6:	4152      	adcs	r2, r2
   1efc8:	0a43      	lsrs	r3, r0, #9
   1efca:	428b      	cmp	r3, r1
   1efcc:	d301      	bcc.n	1efd2 <__udivsi3+0x8e>
   1efce:	024b      	lsls	r3, r1, #9
   1efd0:	1ac0      	subs	r0, r0, r3
   1efd2:	4152      	adcs	r2, r2
   1efd4:	0a03      	lsrs	r3, r0, #8
   1efd6:	428b      	cmp	r3, r1
   1efd8:	d301      	bcc.n	1efde <__udivsi3+0x9a>
   1efda:	020b      	lsls	r3, r1, #8
   1efdc:	1ac0      	subs	r0, r0, r3
   1efde:	4152      	adcs	r2, r2
   1efe0:	d2cd      	bcs.n	1ef7e <__udivsi3+0x3a>
   1efe2:	09c3      	lsrs	r3, r0, #7
   1efe4:	428b      	cmp	r3, r1
   1efe6:	d301      	bcc.n	1efec <__udivsi3+0xa8>
   1efe8:	01cb      	lsls	r3, r1, #7
   1efea:	1ac0      	subs	r0, r0, r3
   1efec:	4152      	adcs	r2, r2
   1efee:	0983      	lsrs	r3, r0, #6
   1eff0:	428b      	cmp	r3, r1
   1eff2:	d301      	bcc.n	1eff8 <__udivsi3+0xb4>
   1eff4:	018b      	lsls	r3, r1, #6
   1eff6:	1ac0      	subs	r0, r0, r3
   1eff8:	4152      	adcs	r2, r2
   1effa:	0943      	lsrs	r3, r0, #5
   1effc:	428b      	cmp	r3, r1
   1effe:	d301      	bcc.n	1f004 <__udivsi3+0xc0>
   1f000:	014b      	lsls	r3, r1, #5
   1f002:	1ac0      	subs	r0, r0, r3
   1f004:	4152      	adcs	r2, r2
   1f006:	0903      	lsrs	r3, r0, #4
   1f008:	428b      	cmp	r3, r1
   1f00a:	d301      	bcc.n	1f010 <__udivsi3+0xcc>
   1f00c:	010b      	lsls	r3, r1, #4
   1f00e:	1ac0      	subs	r0, r0, r3
   1f010:	4152      	adcs	r2, r2
   1f012:	08c3      	lsrs	r3, r0, #3
   1f014:	428b      	cmp	r3, r1
   1f016:	d301      	bcc.n	1f01c <__udivsi3+0xd8>
   1f018:	00cb      	lsls	r3, r1, #3
   1f01a:	1ac0      	subs	r0, r0, r3
   1f01c:	4152      	adcs	r2, r2
   1f01e:	0883      	lsrs	r3, r0, #2
   1f020:	428b      	cmp	r3, r1
   1f022:	d301      	bcc.n	1f028 <__udivsi3+0xe4>
   1f024:	008b      	lsls	r3, r1, #2
   1f026:	1ac0      	subs	r0, r0, r3
   1f028:	4152      	adcs	r2, r2
   1f02a:	0843      	lsrs	r3, r0, #1
   1f02c:	428b      	cmp	r3, r1
   1f02e:	d301      	bcc.n	1f034 <__udivsi3+0xf0>
   1f030:	004b      	lsls	r3, r1, #1
   1f032:	1ac0      	subs	r0, r0, r3
   1f034:	4152      	adcs	r2, r2
   1f036:	1a41      	subs	r1, r0, r1
   1f038:	d200      	bcs.n	1f03c <__udivsi3+0xf8>
   1f03a:	4601      	mov	r1, r0
   1f03c:	4152      	adcs	r2, r2
   1f03e:	4610      	mov	r0, r2
   1f040:	4770      	bx	lr
   1f042:	e7ff      	b.n	1f044 <__udivsi3+0x100>
   1f044:	b501      	push	{r0, lr}
   1f046:	2000      	movs	r0, #0
   1f048:	f000 f8f0 	bl	1f22c <__aeabi_idiv0>
   1f04c:	bd02      	pop	{r1, pc}
   1f04e:	46c0      	nop			; (mov r8, r8)

0001f050 <__aeabi_uidivmod>:
   1f050:	2900      	cmp	r1, #0
   1f052:	d0f7      	beq.n	1f044 <__udivsi3+0x100>
   1f054:	e776      	b.n	1ef44 <__udivsi3>
   1f056:	4770      	bx	lr

0001f058 <__divsi3>:
   1f058:	4603      	mov	r3, r0
   1f05a:	430b      	orrs	r3, r1
   1f05c:	d47f      	bmi.n	1f15e <__divsi3+0x106>
   1f05e:	2200      	movs	r2, #0
   1f060:	0843      	lsrs	r3, r0, #1
   1f062:	428b      	cmp	r3, r1
   1f064:	d374      	bcc.n	1f150 <__divsi3+0xf8>
   1f066:	0903      	lsrs	r3, r0, #4
   1f068:	428b      	cmp	r3, r1
   1f06a:	d35f      	bcc.n	1f12c <__divsi3+0xd4>
   1f06c:	0a03      	lsrs	r3, r0, #8
   1f06e:	428b      	cmp	r3, r1
   1f070:	d344      	bcc.n	1f0fc <__divsi3+0xa4>
   1f072:	0b03      	lsrs	r3, r0, #12
   1f074:	428b      	cmp	r3, r1
   1f076:	d328      	bcc.n	1f0ca <__divsi3+0x72>
   1f078:	0c03      	lsrs	r3, r0, #16
   1f07a:	428b      	cmp	r3, r1
   1f07c:	d30d      	bcc.n	1f09a <__divsi3+0x42>
   1f07e:	22ff      	movs	r2, #255	; 0xff
   1f080:	0209      	lsls	r1, r1, #8
   1f082:	ba12      	rev	r2, r2
   1f084:	0c03      	lsrs	r3, r0, #16
   1f086:	428b      	cmp	r3, r1
   1f088:	d302      	bcc.n	1f090 <__divsi3+0x38>
   1f08a:	1212      	asrs	r2, r2, #8
   1f08c:	0209      	lsls	r1, r1, #8
   1f08e:	d065      	beq.n	1f15c <__divsi3+0x104>
   1f090:	0b03      	lsrs	r3, r0, #12
   1f092:	428b      	cmp	r3, r1
   1f094:	d319      	bcc.n	1f0ca <__divsi3+0x72>
   1f096:	e000      	b.n	1f09a <__divsi3+0x42>
   1f098:	0a09      	lsrs	r1, r1, #8
   1f09a:	0bc3      	lsrs	r3, r0, #15
   1f09c:	428b      	cmp	r3, r1
   1f09e:	d301      	bcc.n	1f0a4 <__divsi3+0x4c>
   1f0a0:	03cb      	lsls	r3, r1, #15
   1f0a2:	1ac0      	subs	r0, r0, r3
   1f0a4:	4152      	adcs	r2, r2
   1f0a6:	0b83      	lsrs	r3, r0, #14
   1f0a8:	428b      	cmp	r3, r1
   1f0aa:	d301      	bcc.n	1f0b0 <__divsi3+0x58>
   1f0ac:	038b      	lsls	r3, r1, #14
   1f0ae:	1ac0      	subs	r0, r0, r3
   1f0b0:	4152      	adcs	r2, r2
   1f0b2:	0b43      	lsrs	r3, r0, #13
   1f0b4:	428b      	cmp	r3, r1
   1f0b6:	d301      	bcc.n	1f0bc <__divsi3+0x64>
   1f0b8:	034b      	lsls	r3, r1, #13
   1f0ba:	1ac0      	subs	r0, r0, r3
   1f0bc:	4152      	adcs	r2, r2
   1f0be:	0b03      	lsrs	r3, r0, #12
   1f0c0:	428b      	cmp	r3, r1
   1f0c2:	d301      	bcc.n	1f0c8 <__divsi3+0x70>
   1f0c4:	030b      	lsls	r3, r1, #12
   1f0c6:	1ac0      	subs	r0, r0, r3
   1f0c8:	4152      	adcs	r2, r2
   1f0ca:	0ac3      	lsrs	r3, r0, #11
   1f0cc:	428b      	cmp	r3, r1
   1f0ce:	d301      	bcc.n	1f0d4 <__divsi3+0x7c>
   1f0d0:	02cb      	lsls	r3, r1, #11
   1f0d2:	1ac0      	subs	r0, r0, r3
   1f0d4:	4152      	adcs	r2, r2
   1f0d6:	0a83      	lsrs	r3, r0, #10
   1f0d8:	428b      	cmp	r3, r1
   1f0da:	d301      	bcc.n	1f0e0 <__divsi3+0x88>
   1f0dc:	028b      	lsls	r3, r1, #10
   1f0de:	1ac0      	subs	r0, r0, r3
   1f0e0:	4152      	adcs	r2, r2
   1f0e2:	0a43      	lsrs	r3, r0, #9
   1f0e4:	428b      	cmp	r3, r1
   1f0e6:	d301      	bcc.n	1f0ec <__divsi3+0x94>
   1f0e8:	024b      	lsls	r3, r1, #9
   1f0ea:	1ac0      	subs	r0, r0, r3
   1f0ec:	4152      	adcs	r2, r2
   1f0ee:	0a03      	lsrs	r3, r0, #8
   1f0f0:	428b      	cmp	r3, r1
   1f0f2:	d301      	bcc.n	1f0f8 <__divsi3+0xa0>
   1f0f4:	020b      	lsls	r3, r1, #8
   1f0f6:	1ac0      	subs	r0, r0, r3
   1f0f8:	4152      	adcs	r2, r2
   1f0fa:	d2cd      	bcs.n	1f098 <__divsi3+0x40>
   1f0fc:	09c3      	lsrs	r3, r0, #7
   1f0fe:	428b      	cmp	r3, r1
   1f100:	d301      	bcc.n	1f106 <__divsi3+0xae>
   1f102:	01cb      	lsls	r3, r1, #7
   1f104:	1ac0      	subs	r0, r0, r3
   1f106:	4152      	adcs	r2, r2
   1f108:	0983      	lsrs	r3, r0, #6
   1f10a:	428b      	cmp	r3, r1
   1f10c:	d301      	bcc.n	1f112 <__divsi3+0xba>
   1f10e:	018b      	lsls	r3, r1, #6
   1f110:	1ac0      	subs	r0, r0, r3
   1f112:	4152      	adcs	r2, r2
   1f114:	0943      	lsrs	r3, r0, #5
   1f116:	428b      	cmp	r3, r1
   1f118:	d301      	bcc.n	1f11e <__divsi3+0xc6>
   1f11a:	014b      	lsls	r3, r1, #5
   1f11c:	1ac0      	subs	r0, r0, r3
   1f11e:	4152      	adcs	r2, r2
   1f120:	0903      	lsrs	r3, r0, #4
   1f122:	428b      	cmp	r3, r1
   1f124:	d301      	bcc.n	1f12a <__divsi3+0xd2>
   1f126:	010b      	lsls	r3, r1, #4
   1f128:	1ac0      	subs	r0, r0, r3
   1f12a:	4152      	adcs	r2, r2
   1f12c:	08c3      	lsrs	r3, r0, #3
   1f12e:	428b      	cmp	r3, r1
   1f130:	d301      	bcc.n	1f136 <__divsi3+0xde>
   1f132:	00cb      	lsls	r3, r1, #3
   1f134:	1ac0      	subs	r0, r0, r3
   1f136:	4152      	adcs	r2, r2
   1f138:	0883      	lsrs	r3, r0, #2
   1f13a:	428b      	cmp	r3, r1
   1f13c:	d301      	bcc.n	1f142 <__divsi3+0xea>
   1f13e:	008b      	lsls	r3, r1, #2
   1f140:	1ac0      	subs	r0, r0, r3
   1f142:	4152      	adcs	r2, r2
   1f144:	0843      	lsrs	r3, r0, #1
   1f146:	428b      	cmp	r3, r1
   1f148:	d301      	bcc.n	1f14e <__divsi3+0xf6>
   1f14a:	004b      	lsls	r3, r1, #1
   1f14c:	1ac0      	subs	r0, r0, r3
   1f14e:	4152      	adcs	r2, r2
   1f150:	1a41      	subs	r1, r0, r1
   1f152:	d200      	bcs.n	1f156 <__divsi3+0xfe>
   1f154:	4601      	mov	r1, r0
   1f156:	4152      	adcs	r2, r2
   1f158:	4610      	mov	r0, r2
   1f15a:	4770      	bx	lr
   1f15c:	e05d      	b.n	1f21a <__divsi3+0x1c2>
   1f15e:	0fca      	lsrs	r2, r1, #31
   1f160:	d000      	beq.n	1f164 <__divsi3+0x10c>
   1f162:	4249      	negs	r1, r1
   1f164:	1003      	asrs	r3, r0, #32
   1f166:	d300      	bcc.n	1f16a <__divsi3+0x112>
   1f168:	4240      	negs	r0, r0
   1f16a:	4053      	eors	r3, r2
   1f16c:	2200      	movs	r2, #0
   1f16e:	469c      	mov	ip, r3
   1f170:	0903      	lsrs	r3, r0, #4
   1f172:	428b      	cmp	r3, r1
   1f174:	d32d      	bcc.n	1f1d2 <__divsi3+0x17a>
   1f176:	0a03      	lsrs	r3, r0, #8
   1f178:	428b      	cmp	r3, r1
   1f17a:	d312      	bcc.n	1f1a2 <__divsi3+0x14a>
   1f17c:	22fc      	movs	r2, #252	; 0xfc
   1f17e:	0189      	lsls	r1, r1, #6
   1f180:	ba12      	rev	r2, r2
   1f182:	0a03      	lsrs	r3, r0, #8
   1f184:	428b      	cmp	r3, r1
   1f186:	d30c      	bcc.n	1f1a2 <__divsi3+0x14a>
   1f188:	0189      	lsls	r1, r1, #6
   1f18a:	1192      	asrs	r2, r2, #6
   1f18c:	428b      	cmp	r3, r1
   1f18e:	d308      	bcc.n	1f1a2 <__divsi3+0x14a>
   1f190:	0189      	lsls	r1, r1, #6
   1f192:	1192      	asrs	r2, r2, #6
   1f194:	428b      	cmp	r3, r1
   1f196:	d304      	bcc.n	1f1a2 <__divsi3+0x14a>
   1f198:	0189      	lsls	r1, r1, #6
   1f19a:	d03a      	beq.n	1f212 <__divsi3+0x1ba>
   1f19c:	1192      	asrs	r2, r2, #6
   1f19e:	e000      	b.n	1f1a2 <__divsi3+0x14a>
   1f1a0:	0989      	lsrs	r1, r1, #6
   1f1a2:	09c3      	lsrs	r3, r0, #7
   1f1a4:	428b      	cmp	r3, r1
   1f1a6:	d301      	bcc.n	1f1ac <__divsi3+0x154>
   1f1a8:	01cb      	lsls	r3, r1, #7
   1f1aa:	1ac0      	subs	r0, r0, r3
   1f1ac:	4152      	adcs	r2, r2
   1f1ae:	0983      	lsrs	r3, r0, #6
   1f1b0:	428b      	cmp	r3, r1
   1f1b2:	d301      	bcc.n	1f1b8 <__divsi3+0x160>
   1f1b4:	018b      	lsls	r3, r1, #6
   1f1b6:	1ac0      	subs	r0, r0, r3
   1f1b8:	4152      	adcs	r2, r2
   1f1ba:	0943      	lsrs	r3, r0, #5
   1f1bc:	428b      	cmp	r3, r1
   1f1be:	d301      	bcc.n	1f1c4 <__divsi3+0x16c>
   1f1c0:	014b      	lsls	r3, r1, #5
   1f1c2:	1ac0      	subs	r0, r0, r3
   1f1c4:	4152      	adcs	r2, r2
   1f1c6:	0903      	lsrs	r3, r0, #4
   1f1c8:	428b      	cmp	r3, r1
   1f1ca:	d301      	bcc.n	1f1d0 <__divsi3+0x178>
   1f1cc:	010b      	lsls	r3, r1, #4
   1f1ce:	1ac0      	subs	r0, r0, r3
   1f1d0:	4152      	adcs	r2, r2
   1f1d2:	08c3      	lsrs	r3, r0, #3
   1f1d4:	428b      	cmp	r3, r1
   1f1d6:	d301      	bcc.n	1f1dc <__divsi3+0x184>
   1f1d8:	00cb      	lsls	r3, r1, #3
   1f1da:	1ac0      	subs	r0, r0, r3
   1f1dc:	4152      	adcs	r2, r2
   1f1de:	0883      	lsrs	r3, r0, #2
   1f1e0:	428b      	cmp	r3, r1
   1f1e2:	d301      	bcc.n	1f1e8 <__divsi3+0x190>
   1f1e4:	008b      	lsls	r3, r1, #2
   1f1e6:	1ac0      	subs	r0, r0, r3
   1f1e8:	4152      	adcs	r2, r2
   1f1ea:	d2d9      	bcs.n	1f1a0 <__divsi3+0x148>
   1f1ec:	0843      	lsrs	r3, r0, #1
   1f1ee:	428b      	cmp	r3, r1
   1f1f0:	d301      	bcc.n	1f1f6 <__divsi3+0x19e>
   1f1f2:	004b      	lsls	r3, r1, #1
   1f1f4:	1ac0      	subs	r0, r0, r3
   1f1f6:	4152      	adcs	r2, r2
   1f1f8:	1a41      	subs	r1, r0, r1
   1f1fa:	d200      	bcs.n	1f1fe <__divsi3+0x1a6>
   1f1fc:	4601      	mov	r1, r0
   1f1fe:	4663      	mov	r3, ip
   1f200:	4152      	adcs	r2, r2
   1f202:	105b      	asrs	r3, r3, #1
   1f204:	4610      	mov	r0, r2
   1f206:	d301      	bcc.n	1f20c <__divsi3+0x1b4>
   1f208:	4240      	negs	r0, r0
   1f20a:	2b00      	cmp	r3, #0
   1f20c:	d500      	bpl.n	1f210 <__divsi3+0x1b8>
   1f20e:	4249      	negs	r1, r1
   1f210:	4770      	bx	lr
   1f212:	4663      	mov	r3, ip
   1f214:	105b      	asrs	r3, r3, #1
   1f216:	d300      	bcc.n	1f21a <__divsi3+0x1c2>
   1f218:	4240      	negs	r0, r0
   1f21a:	b501      	push	{r0, lr}
   1f21c:	2000      	movs	r0, #0
   1f21e:	f000 f805 	bl	1f22c <__aeabi_idiv0>
   1f222:	bd02      	pop	{r1, pc}

0001f224 <__aeabi_idivmod>:
   1f224:	2900      	cmp	r1, #0
   1f226:	d0f8      	beq.n	1f21a <__divsi3+0x1c2>
   1f228:	e716      	b.n	1f058 <__divsi3>
   1f22a:	4770      	bx	lr

0001f22c <__aeabi_idiv0>:
   1f22c:	4770      	bx	lr
   1f22e:	46c0      	nop			; (mov r8, r8)

0001f230 <__aeabi_lmul>:
   1f230:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f232:	46ce      	mov	lr, r9
   1f234:	4647      	mov	r7, r8
   1f236:	0415      	lsls	r5, r2, #16
   1f238:	0c2d      	lsrs	r5, r5, #16
   1f23a:	002e      	movs	r6, r5
   1f23c:	b580      	push	{r7, lr}
   1f23e:	0407      	lsls	r7, r0, #16
   1f240:	0c14      	lsrs	r4, r2, #16
   1f242:	0c3f      	lsrs	r7, r7, #16
   1f244:	4699      	mov	r9, r3
   1f246:	0c03      	lsrs	r3, r0, #16
   1f248:	437e      	muls	r6, r7
   1f24a:	435d      	muls	r5, r3
   1f24c:	4367      	muls	r7, r4
   1f24e:	4363      	muls	r3, r4
   1f250:	197f      	adds	r7, r7, r5
   1f252:	0c34      	lsrs	r4, r6, #16
   1f254:	19e4      	adds	r4, r4, r7
   1f256:	469c      	mov	ip, r3
   1f258:	42a5      	cmp	r5, r4
   1f25a:	d903      	bls.n	1f264 <__aeabi_lmul+0x34>
   1f25c:	2380      	movs	r3, #128	; 0x80
   1f25e:	025b      	lsls	r3, r3, #9
   1f260:	4698      	mov	r8, r3
   1f262:	44c4      	add	ip, r8
   1f264:	464b      	mov	r3, r9
   1f266:	4351      	muls	r1, r2
   1f268:	4343      	muls	r3, r0
   1f26a:	0436      	lsls	r6, r6, #16
   1f26c:	0c36      	lsrs	r6, r6, #16
   1f26e:	0c25      	lsrs	r5, r4, #16
   1f270:	0424      	lsls	r4, r4, #16
   1f272:	4465      	add	r5, ip
   1f274:	19a4      	adds	r4, r4, r6
   1f276:	1859      	adds	r1, r3, r1
   1f278:	1949      	adds	r1, r1, r5
   1f27a:	0020      	movs	r0, r4
   1f27c:	bc0c      	pop	{r2, r3}
   1f27e:	4690      	mov	r8, r2
   1f280:	4699      	mov	r9, r3
   1f282:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f284 <__aeabi_fmul>:
   1f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f286:	4657      	mov	r7, sl
   1f288:	464e      	mov	r6, r9
   1f28a:	4645      	mov	r5, r8
   1f28c:	46de      	mov	lr, fp
   1f28e:	b5e0      	push	{r5, r6, r7, lr}
   1f290:	0247      	lsls	r7, r0, #9
   1f292:	0046      	lsls	r6, r0, #1
   1f294:	4688      	mov	r8, r1
   1f296:	0a7f      	lsrs	r7, r7, #9
   1f298:	0e36      	lsrs	r6, r6, #24
   1f29a:	0fc4      	lsrs	r4, r0, #31
   1f29c:	2e00      	cmp	r6, #0
   1f29e:	d047      	beq.n	1f330 <__aeabi_fmul+0xac>
   1f2a0:	2eff      	cmp	r6, #255	; 0xff
   1f2a2:	d024      	beq.n	1f2ee <__aeabi_fmul+0x6a>
   1f2a4:	00fb      	lsls	r3, r7, #3
   1f2a6:	2780      	movs	r7, #128	; 0x80
   1f2a8:	04ff      	lsls	r7, r7, #19
   1f2aa:	431f      	orrs	r7, r3
   1f2ac:	2300      	movs	r3, #0
   1f2ae:	4699      	mov	r9, r3
   1f2b0:	469a      	mov	sl, r3
   1f2b2:	3e7f      	subs	r6, #127	; 0x7f
   1f2b4:	4643      	mov	r3, r8
   1f2b6:	025d      	lsls	r5, r3, #9
   1f2b8:	0058      	lsls	r0, r3, #1
   1f2ba:	0fdb      	lsrs	r3, r3, #31
   1f2bc:	0a6d      	lsrs	r5, r5, #9
   1f2be:	0e00      	lsrs	r0, r0, #24
   1f2c0:	4698      	mov	r8, r3
   1f2c2:	d043      	beq.n	1f34c <__aeabi_fmul+0xc8>
   1f2c4:	28ff      	cmp	r0, #255	; 0xff
   1f2c6:	d03b      	beq.n	1f340 <__aeabi_fmul+0xbc>
   1f2c8:	00eb      	lsls	r3, r5, #3
   1f2ca:	2580      	movs	r5, #128	; 0x80
   1f2cc:	2200      	movs	r2, #0
   1f2ce:	04ed      	lsls	r5, r5, #19
   1f2d0:	431d      	orrs	r5, r3
   1f2d2:	387f      	subs	r0, #127	; 0x7f
   1f2d4:	1836      	adds	r6, r6, r0
   1f2d6:	1c73      	adds	r3, r6, #1
   1f2d8:	4641      	mov	r1, r8
   1f2da:	469b      	mov	fp, r3
   1f2dc:	464b      	mov	r3, r9
   1f2de:	4061      	eors	r1, r4
   1f2e0:	4313      	orrs	r3, r2
   1f2e2:	2b0f      	cmp	r3, #15
   1f2e4:	d864      	bhi.n	1f3b0 <__aeabi_fmul+0x12c>
   1f2e6:	4875      	ldr	r0, [pc, #468]	; (1f4bc <__aeabi_fmul+0x238>)
   1f2e8:	009b      	lsls	r3, r3, #2
   1f2ea:	58c3      	ldr	r3, [r0, r3]
   1f2ec:	469f      	mov	pc, r3
   1f2ee:	2f00      	cmp	r7, #0
   1f2f0:	d142      	bne.n	1f378 <__aeabi_fmul+0xf4>
   1f2f2:	2308      	movs	r3, #8
   1f2f4:	4699      	mov	r9, r3
   1f2f6:	3b06      	subs	r3, #6
   1f2f8:	26ff      	movs	r6, #255	; 0xff
   1f2fa:	469a      	mov	sl, r3
   1f2fc:	e7da      	b.n	1f2b4 <__aeabi_fmul+0x30>
   1f2fe:	4641      	mov	r1, r8
   1f300:	2a02      	cmp	r2, #2
   1f302:	d028      	beq.n	1f356 <__aeabi_fmul+0xd2>
   1f304:	2a03      	cmp	r2, #3
   1f306:	d100      	bne.n	1f30a <__aeabi_fmul+0x86>
   1f308:	e0ce      	b.n	1f4a8 <__aeabi_fmul+0x224>
   1f30a:	2a01      	cmp	r2, #1
   1f30c:	d000      	beq.n	1f310 <__aeabi_fmul+0x8c>
   1f30e:	e0ac      	b.n	1f46a <__aeabi_fmul+0x1e6>
   1f310:	4011      	ands	r1, r2
   1f312:	2000      	movs	r0, #0
   1f314:	2200      	movs	r2, #0
   1f316:	b2cc      	uxtb	r4, r1
   1f318:	0240      	lsls	r0, r0, #9
   1f31a:	05d2      	lsls	r2, r2, #23
   1f31c:	0a40      	lsrs	r0, r0, #9
   1f31e:	07e4      	lsls	r4, r4, #31
   1f320:	4310      	orrs	r0, r2
   1f322:	4320      	orrs	r0, r4
   1f324:	bc3c      	pop	{r2, r3, r4, r5}
   1f326:	4690      	mov	r8, r2
   1f328:	4699      	mov	r9, r3
   1f32a:	46a2      	mov	sl, r4
   1f32c:	46ab      	mov	fp, r5
   1f32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f330:	2f00      	cmp	r7, #0
   1f332:	d115      	bne.n	1f360 <__aeabi_fmul+0xdc>
   1f334:	2304      	movs	r3, #4
   1f336:	4699      	mov	r9, r3
   1f338:	3b03      	subs	r3, #3
   1f33a:	2600      	movs	r6, #0
   1f33c:	469a      	mov	sl, r3
   1f33e:	e7b9      	b.n	1f2b4 <__aeabi_fmul+0x30>
   1f340:	20ff      	movs	r0, #255	; 0xff
   1f342:	2202      	movs	r2, #2
   1f344:	2d00      	cmp	r5, #0
   1f346:	d0c5      	beq.n	1f2d4 <__aeabi_fmul+0x50>
   1f348:	2203      	movs	r2, #3
   1f34a:	e7c3      	b.n	1f2d4 <__aeabi_fmul+0x50>
   1f34c:	2d00      	cmp	r5, #0
   1f34e:	d119      	bne.n	1f384 <__aeabi_fmul+0x100>
   1f350:	2000      	movs	r0, #0
   1f352:	2201      	movs	r2, #1
   1f354:	e7be      	b.n	1f2d4 <__aeabi_fmul+0x50>
   1f356:	2401      	movs	r4, #1
   1f358:	22ff      	movs	r2, #255	; 0xff
   1f35a:	400c      	ands	r4, r1
   1f35c:	2000      	movs	r0, #0
   1f35e:	e7db      	b.n	1f318 <__aeabi_fmul+0x94>
   1f360:	0038      	movs	r0, r7
   1f362:	f001 fd65 	bl	20e30 <__clzsi2>
   1f366:	2676      	movs	r6, #118	; 0x76
   1f368:	1f43      	subs	r3, r0, #5
   1f36a:	409f      	lsls	r7, r3
   1f36c:	2300      	movs	r3, #0
   1f36e:	4276      	negs	r6, r6
   1f370:	1a36      	subs	r6, r6, r0
   1f372:	4699      	mov	r9, r3
   1f374:	469a      	mov	sl, r3
   1f376:	e79d      	b.n	1f2b4 <__aeabi_fmul+0x30>
   1f378:	230c      	movs	r3, #12
   1f37a:	4699      	mov	r9, r3
   1f37c:	3b09      	subs	r3, #9
   1f37e:	26ff      	movs	r6, #255	; 0xff
   1f380:	469a      	mov	sl, r3
   1f382:	e797      	b.n	1f2b4 <__aeabi_fmul+0x30>
   1f384:	0028      	movs	r0, r5
   1f386:	f001 fd53 	bl	20e30 <__clzsi2>
   1f38a:	1f43      	subs	r3, r0, #5
   1f38c:	409d      	lsls	r5, r3
   1f38e:	2376      	movs	r3, #118	; 0x76
   1f390:	425b      	negs	r3, r3
   1f392:	1a18      	subs	r0, r3, r0
   1f394:	2200      	movs	r2, #0
   1f396:	e79d      	b.n	1f2d4 <__aeabi_fmul+0x50>
   1f398:	2080      	movs	r0, #128	; 0x80
   1f39a:	2400      	movs	r4, #0
   1f39c:	03c0      	lsls	r0, r0, #15
   1f39e:	22ff      	movs	r2, #255	; 0xff
   1f3a0:	e7ba      	b.n	1f318 <__aeabi_fmul+0x94>
   1f3a2:	003d      	movs	r5, r7
   1f3a4:	4652      	mov	r2, sl
   1f3a6:	e7ab      	b.n	1f300 <__aeabi_fmul+0x7c>
   1f3a8:	003d      	movs	r5, r7
   1f3aa:	0021      	movs	r1, r4
   1f3ac:	4652      	mov	r2, sl
   1f3ae:	e7a7      	b.n	1f300 <__aeabi_fmul+0x7c>
   1f3b0:	0c3b      	lsrs	r3, r7, #16
   1f3b2:	469c      	mov	ip, r3
   1f3b4:	042a      	lsls	r2, r5, #16
   1f3b6:	0c12      	lsrs	r2, r2, #16
   1f3b8:	0c2b      	lsrs	r3, r5, #16
   1f3ba:	0014      	movs	r4, r2
   1f3bc:	4660      	mov	r0, ip
   1f3be:	4665      	mov	r5, ip
   1f3c0:	043f      	lsls	r7, r7, #16
   1f3c2:	0c3f      	lsrs	r7, r7, #16
   1f3c4:	437c      	muls	r4, r7
   1f3c6:	4342      	muls	r2, r0
   1f3c8:	435d      	muls	r5, r3
   1f3ca:	437b      	muls	r3, r7
   1f3cc:	0c27      	lsrs	r7, r4, #16
   1f3ce:	189b      	adds	r3, r3, r2
   1f3d0:	18ff      	adds	r7, r7, r3
   1f3d2:	42ba      	cmp	r2, r7
   1f3d4:	d903      	bls.n	1f3de <__aeabi_fmul+0x15a>
   1f3d6:	2380      	movs	r3, #128	; 0x80
   1f3d8:	025b      	lsls	r3, r3, #9
   1f3da:	469c      	mov	ip, r3
   1f3dc:	4465      	add	r5, ip
   1f3de:	0424      	lsls	r4, r4, #16
   1f3e0:	043a      	lsls	r2, r7, #16
   1f3e2:	0c24      	lsrs	r4, r4, #16
   1f3e4:	1912      	adds	r2, r2, r4
   1f3e6:	0193      	lsls	r3, r2, #6
   1f3e8:	1e5c      	subs	r4, r3, #1
   1f3ea:	41a3      	sbcs	r3, r4
   1f3ec:	0c3f      	lsrs	r7, r7, #16
   1f3ee:	0e92      	lsrs	r2, r2, #26
   1f3f0:	197d      	adds	r5, r7, r5
   1f3f2:	431a      	orrs	r2, r3
   1f3f4:	01ad      	lsls	r5, r5, #6
   1f3f6:	4315      	orrs	r5, r2
   1f3f8:	012b      	lsls	r3, r5, #4
   1f3fa:	d504      	bpl.n	1f406 <__aeabi_fmul+0x182>
   1f3fc:	2301      	movs	r3, #1
   1f3fe:	465e      	mov	r6, fp
   1f400:	086a      	lsrs	r2, r5, #1
   1f402:	401d      	ands	r5, r3
   1f404:	4315      	orrs	r5, r2
   1f406:	0032      	movs	r2, r6
   1f408:	327f      	adds	r2, #127	; 0x7f
   1f40a:	2a00      	cmp	r2, #0
   1f40c:	dd25      	ble.n	1f45a <__aeabi_fmul+0x1d6>
   1f40e:	076b      	lsls	r3, r5, #29
   1f410:	d004      	beq.n	1f41c <__aeabi_fmul+0x198>
   1f412:	230f      	movs	r3, #15
   1f414:	402b      	ands	r3, r5
   1f416:	2b04      	cmp	r3, #4
   1f418:	d000      	beq.n	1f41c <__aeabi_fmul+0x198>
   1f41a:	3504      	adds	r5, #4
   1f41c:	012b      	lsls	r3, r5, #4
   1f41e:	d503      	bpl.n	1f428 <__aeabi_fmul+0x1a4>
   1f420:	0032      	movs	r2, r6
   1f422:	4b27      	ldr	r3, [pc, #156]	; (1f4c0 <__aeabi_fmul+0x23c>)
   1f424:	3280      	adds	r2, #128	; 0x80
   1f426:	401d      	ands	r5, r3
   1f428:	2afe      	cmp	r2, #254	; 0xfe
   1f42a:	dc94      	bgt.n	1f356 <__aeabi_fmul+0xd2>
   1f42c:	2401      	movs	r4, #1
   1f42e:	01a8      	lsls	r0, r5, #6
   1f430:	0a40      	lsrs	r0, r0, #9
   1f432:	b2d2      	uxtb	r2, r2
   1f434:	400c      	ands	r4, r1
   1f436:	e76f      	b.n	1f318 <__aeabi_fmul+0x94>
   1f438:	2080      	movs	r0, #128	; 0x80
   1f43a:	03c0      	lsls	r0, r0, #15
   1f43c:	4207      	tst	r7, r0
   1f43e:	d007      	beq.n	1f450 <__aeabi_fmul+0x1cc>
   1f440:	4205      	tst	r5, r0
   1f442:	d105      	bne.n	1f450 <__aeabi_fmul+0x1cc>
   1f444:	4328      	orrs	r0, r5
   1f446:	0240      	lsls	r0, r0, #9
   1f448:	0a40      	lsrs	r0, r0, #9
   1f44a:	4644      	mov	r4, r8
   1f44c:	22ff      	movs	r2, #255	; 0xff
   1f44e:	e763      	b.n	1f318 <__aeabi_fmul+0x94>
   1f450:	4338      	orrs	r0, r7
   1f452:	0240      	lsls	r0, r0, #9
   1f454:	0a40      	lsrs	r0, r0, #9
   1f456:	22ff      	movs	r2, #255	; 0xff
   1f458:	e75e      	b.n	1f318 <__aeabi_fmul+0x94>
   1f45a:	2401      	movs	r4, #1
   1f45c:	1aa3      	subs	r3, r4, r2
   1f45e:	2b1b      	cmp	r3, #27
   1f460:	dd05      	ble.n	1f46e <__aeabi_fmul+0x1ea>
   1f462:	400c      	ands	r4, r1
   1f464:	2200      	movs	r2, #0
   1f466:	2000      	movs	r0, #0
   1f468:	e756      	b.n	1f318 <__aeabi_fmul+0x94>
   1f46a:	465e      	mov	r6, fp
   1f46c:	e7cb      	b.n	1f406 <__aeabi_fmul+0x182>
   1f46e:	002a      	movs	r2, r5
   1f470:	2020      	movs	r0, #32
   1f472:	40da      	lsrs	r2, r3
   1f474:	1ac3      	subs	r3, r0, r3
   1f476:	409d      	lsls	r5, r3
   1f478:	002b      	movs	r3, r5
   1f47a:	1e5d      	subs	r5, r3, #1
   1f47c:	41ab      	sbcs	r3, r5
   1f47e:	4313      	orrs	r3, r2
   1f480:	075a      	lsls	r2, r3, #29
   1f482:	d004      	beq.n	1f48e <__aeabi_fmul+0x20a>
   1f484:	220f      	movs	r2, #15
   1f486:	401a      	ands	r2, r3
   1f488:	2a04      	cmp	r2, #4
   1f48a:	d000      	beq.n	1f48e <__aeabi_fmul+0x20a>
   1f48c:	3304      	adds	r3, #4
   1f48e:	015a      	lsls	r2, r3, #5
   1f490:	d504      	bpl.n	1f49c <__aeabi_fmul+0x218>
   1f492:	2401      	movs	r4, #1
   1f494:	2201      	movs	r2, #1
   1f496:	400c      	ands	r4, r1
   1f498:	2000      	movs	r0, #0
   1f49a:	e73d      	b.n	1f318 <__aeabi_fmul+0x94>
   1f49c:	2401      	movs	r4, #1
   1f49e:	019b      	lsls	r3, r3, #6
   1f4a0:	0a58      	lsrs	r0, r3, #9
   1f4a2:	400c      	ands	r4, r1
   1f4a4:	2200      	movs	r2, #0
   1f4a6:	e737      	b.n	1f318 <__aeabi_fmul+0x94>
   1f4a8:	2080      	movs	r0, #128	; 0x80
   1f4aa:	2401      	movs	r4, #1
   1f4ac:	03c0      	lsls	r0, r0, #15
   1f4ae:	4328      	orrs	r0, r5
   1f4b0:	0240      	lsls	r0, r0, #9
   1f4b2:	0a40      	lsrs	r0, r0, #9
   1f4b4:	400c      	ands	r4, r1
   1f4b6:	22ff      	movs	r2, #255	; 0xff
   1f4b8:	e72e      	b.n	1f318 <__aeabi_fmul+0x94>
   1f4ba:	46c0      	nop			; (mov r8, r8)
   1f4bc:	0002621c 	.word	0x0002621c
   1f4c0:	f7ffffff 	.word	0xf7ffffff

0001f4c4 <__aeabi_f2iz>:
   1f4c4:	0241      	lsls	r1, r0, #9
   1f4c6:	0043      	lsls	r3, r0, #1
   1f4c8:	0fc2      	lsrs	r2, r0, #31
   1f4ca:	0a49      	lsrs	r1, r1, #9
   1f4cc:	0e1b      	lsrs	r3, r3, #24
   1f4ce:	2000      	movs	r0, #0
   1f4d0:	2b7e      	cmp	r3, #126	; 0x7e
   1f4d2:	dd0d      	ble.n	1f4f0 <__aeabi_f2iz+0x2c>
   1f4d4:	2b9d      	cmp	r3, #157	; 0x9d
   1f4d6:	dc0c      	bgt.n	1f4f2 <__aeabi_f2iz+0x2e>
   1f4d8:	2080      	movs	r0, #128	; 0x80
   1f4da:	0400      	lsls	r0, r0, #16
   1f4dc:	4301      	orrs	r1, r0
   1f4de:	2b95      	cmp	r3, #149	; 0x95
   1f4e0:	dc0a      	bgt.n	1f4f8 <__aeabi_f2iz+0x34>
   1f4e2:	2096      	movs	r0, #150	; 0x96
   1f4e4:	1ac3      	subs	r3, r0, r3
   1f4e6:	40d9      	lsrs	r1, r3
   1f4e8:	4248      	negs	r0, r1
   1f4ea:	2a00      	cmp	r2, #0
   1f4ec:	d100      	bne.n	1f4f0 <__aeabi_f2iz+0x2c>
   1f4ee:	0008      	movs	r0, r1
   1f4f0:	4770      	bx	lr
   1f4f2:	4b03      	ldr	r3, [pc, #12]	; (1f500 <__aeabi_f2iz+0x3c>)
   1f4f4:	18d0      	adds	r0, r2, r3
   1f4f6:	e7fb      	b.n	1f4f0 <__aeabi_f2iz+0x2c>
   1f4f8:	3b96      	subs	r3, #150	; 0x96
   1f4fa:	4099      	lsls	r1, r3
   1f4fc:	e7f4      	b.n	1f4e8 <__aeabi_f2iz+0x24>
   1f4fe:	46c0      	nop			; (mov r8, r8)
   1f500:	7fffffff 	.word	0x7fffffff

0001f504 <__aeabi_i2f>:
   1f504:	b570      	push	{r4, r5, r6, lr}
   1f506:	2800      	cmp	r0, #0
   1f508:	d030      	beq.n	1f56c <__aeabi_i2f+0x68>
   1f50a:	17c3      	asrs	r3, r0, #31
   1f50c:	18c4      	adds	r4, r0, r3
   1f50e:	405c      	eors	r4, r3
   1f510:	0fc5      	lsrs	r5, r0, #31
   1f512:	0020      	movs	r0, r4
   1f514:	f001 fc8c 	bl	20e30 <__clzsi2>
   1f518:	239e      	movs	r3, #158	; 0x9e
   1f51a:	1a1b      	subs	r3, r3, r0
   1f51c:	2b96      	cmp	r3, #150	; 0x96
   1f51e:	dc0d      	bgt.n	1f53c <__aeabi_i2f+0x38>
   1f520:	2296      	movs	r2, #150	; 0x96
   1f522:	1ad2      	subs	r2, r2, r3
   1f524:	4094      	lsls	r4, r2
   1f526:	002a      	movs	r2, r5
   1f528:	0264      	lsls	r4, r4, #9
   1f52a:	0a64      	lsrs	r4, r4, #9
   1f52c:	b2db      	uxtb	r3, r3
   1f52e:	0264      	lsls	r4, r4, #9
   1f530:	05db      	lsls	r3, r3, #23
   1f532:	0a60      	lsrs	r0, r4, #9
   1f534:	07d2      	lsls	r2, r2, #31
   1f536:	4318      	orrs	r0, r3
   1f538:	4310      	orrs	r0, r2
   1f53a:	bd70      	pop	{r4, r5, r6, pc}
   1f53c:	2b99      	cmp	r3, #153	; 0x99
   1f53e:	dc19      	bgt.n	1f574 <__aeabi_i2f+0x70>
   1f540:	2299      	movs	r2, #153	; 0x99
   1f542:	1ad2      	subs	r2, r2, r3
   1f544:	2a00      	cmp	r2, #0
   1f546:	dd29      	ble.n	1f59c <__aeabi_i2f+0x98>
   1f548:	4094      	lsls	r4, r2
   1f54a:	0022      	movs	r2, r4
   1f54c:	4c14      	ldr	r4, [pc, #80]	; (1f5a0 <__aeabi_i2f+0x9c>)
   1f54e:	4014      	ands	r4, r2
   1f550:	0751      	lsls	r1, r2, #29
   1f552:	d004      	beq.n	1f55e <__aeabi_i2f+0x5a>
   1f554:	210f      	movs	r1, #15
   1f556:	400a      	ands	r2, r1
   1f558:	2a04      	cmp	r2, #4
   1f55a:	d000      	beq.n	1f55e <__aeabi_i2f+0x5a>
   1f55c:	3404      	adds	r4, #4
   1f55e:	0162      	lsls	r2, r4, #5
   1f560:	d413      	bmi.n	1f58a <__aeabi_i2f+0x86>
   1f562:	01a4      	lsls	r4, r4, #6
   1f564:	0a64      	lsrs	r4, r4, #9
   1f566:	b2db      	uxtb	r3, r3
   1f568:	002a      	movs	r2, r5
   1f56a:	e7e0      	b.n	1f52e <__aeabi_i2f+0x2a>
   1f56c:	2200      	movs	r2, #0
   1f56e:	2300      	movs	r3, #0
   1f570:	2400      	movs	r4, #0
   1f572:	e7dc      	b.n	1f52e <__aeabi_i2f+0x2a>
   1f574:	2205      	movs	r2, #5
   1f576:	0021      	movs	r1, r4
   1f578:	1a12      	subs	r2, r2, r0
   1f57a:	40d1      	lsrs	r1, r2
   1f57c:	22b9      	movs	r2, #185	; 0xb9
   1f57e:	1ad2      	subs	r2, r2, r3
   1f580:	4094      	lsls	r4, r2
   1f582:	1e62      	subs	r2, r4, #1
   1f584:	4194      	sbcs	r4, r2
   1f586:	430c      	orrs	r4, r1
   1f588:	e7da      	b.n	1f540 <__aeabi_i2f+0x3c>
   1f58a:	4b05      	ldr	r3, [pc, #20]	; (1f5a0 <__aeabi_i2f+0x9c>)
   1f58c:	002a      	movs	r2, r5
   1f58e:	401c      	ands	r4, r3
   1f590:	239f      	movs	r3, #159	; 0x9f
   1f592:	01a4      	lsls	r4, r4, #6
   1f594:	1a1b      	subs	r3, r3, r0
   1f596:	0a64      	lsrs	r4, r4, #9
   1f598:	b2db      	uxtb	r3, r3
   1f59a:	e7c8      	b.n	1f52e <__aeabi_i2f+0x2a>
   1f59c:	0022      	movs	r2, r4
   1f59e:	e7d5      	b.n	1f54c <__aeabi_i2f+0x48>
   1f5a0:	fbffffff 	.word	0xfbffffff

0001f5a4 <__aeabi_dadd>:
   1f5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f5a6:	4645      	mov	r5, r8
   1f5a8:	46de      	mov	lr, fp
   1f5aa:	4657      	mov	r7, sl
   1f5ac:	464e      	mov	r6, r9
   1f5ae:	030c      	lsls	r4, r1, #12
   1f5b0:	b5e0      	push	{r5, r6, r7, lr}
   1f5b2:	004e      	lsls	r6, r1, #1
   1f5b4:	0fc9      	lsrs	r1, r1, #31
   1f5b6:	4688      	mov	r8, r1
   1f5b8:	000d      	movs	r5, r1
   1f5ba:	0a61      	lsrs	r1, r4, #9
   1f5bc:	0f44      	lsrs	r4, r0, #29
   1f5be:	430c      	orrs	r4, r1
   1f5c0:	00c7      	lsls	r7, r0, #3
   1f5c2:	0319      	lsls	r1, r3, #12
   1f5c4:	0058      	lsls	r0, r3, #1
   1f5c6:	0fdb      	lsrs	r3, r3, #31
   1f5c8:	469b      	mov	fp, r3
   1f5ca:	0a4b      	lsrs	r3, r1, #9
   1f5cc:	0f51      	lsrs	r1, r2, #29
   1f5ce:	430b      	orrs	r3, r1
   1f5d0:	0d76      	lsrs	r6, r6, #21
   1f5d2:	0d40      	lsrs	r0, r0, #21
   1f5d4:	0019      	movs	r1, r3
   1f5d6:	00d2      	lsls	r2, r2, #3
   1f5d8:	45d8      	cmp	r8, fp
   1f5da:	d100      	bne.n	1f5de <__aeabi_dadd+0x3a>
   1f5dc:	e0ae      	b.n	1f73c <__aeabi_dadd+0x198>
   1f5de:	1a35      	subs	r5, r6, r0
   1f5e0:	2d00      	cmp	r5, #0
   1f5e2:	dc00      	bgt.n	1f5e6 <__aeabi_dadd+0x42>
   1f5e4:	e0f6      	b.n	1f7d4 <__aeabi_dadd+0x230>
   1f5e6:	2800      	cmp	r0, #0
   1f5e8:	d10f      	bne.n	1f60a <__aeabi_dadd+0x66>
   1f5ea:	4313      	orrs	r3, r2
   1f5ec:	d100      	bne.n	1f5f0 <__aeabi_dadd+0x4c>
   1f5ee:	e0db      	b.n	1f7a8 <__aeabi_dadd+0x204>
   1f5f0:	1e6b      	subs	r3, r5, #1
   1f5f2:	2b00      	cmp	r3, #0
   1f5f4:	d000      	beq.n	1f5f8 <__aeabi_dadd+0x54>
   1f5f6:	e137      	b.n	1f868 <__aeabi_dadd+0x2c4>
   1f5f8:	1aba      	subs	r2, r7, r2
   1f5fa:	4297      	cmp	r7, r2
   1f5fc:	41bf      	sbcs	r7, r7
   1f5fe:	1a64      	subs	r4, r4, r1
   1f600:	427f      	negs	r7, r7
   1f602:	1be4      	subs	r4, r4, r7
   1f604:	2601      	movs	r6, #1
   1f606:	0017      	movs	r7, r2
   1f608:	e024      	b.n	1f654 <__aeabi_dadd+0xb0>
   1f60a:	4bc6      	ldr	r3, [pc, #792]	; (1f924 <__aeabi_dadd+0x380>)
   1f60c:	429e      	cmp	r6, r3
   1f60e:	d04d      	beq.n	1f6ac <__aeabi_dadd+0x108>
   1f610:	2380      	movs	r3, #128	; 0x80
   1f612:	041b      	lsls	r3, r3, #16
   1f614:	4319      	orrs	r1, r3
   1f616:	2d38      	cmp	r5, #56	; 0x38
   1f618:	dd00      	ble.n	1f61c <__aeabi_dadd+0x78>
   1f61a:	e107      	b.n	1f82c <__aeabi_dadd+0x288>
   1f61c:	2d1f      	cmp	r5, #31
   1f61e:	dd00      	ble.n	1f622 <__aeabi_dadd+0x7e>
   1f620:	e138      	b.n	1f894 <__aeabi_dadd+0x2f0>
   1f622:	2020      	movs	r0, #32
   1f624:	1b43      	subs	r3, r0, r5
   1f626:	469a      	mov	sl, r3
   1f628:	000b      	movs	r3, r1
   1f62a:	4650      	mov	r0, sl
   1f62c:	4083      	lsls	r3, r0
   1f62e:	4699      	mov	r9, r3
   1f630:	0013      	movs	r3, r2
   1f632:	4648      	mov	r0, r9
   1f634:	40eb      	lsrs	r3, r5
   1f636:	4318      	orrs	r0, r3
   1f638:	0003      	movs	r3, r0
   1f63a:	4650      	mov	r0, sl
   1f63c:	4082      	lsls	r2, r0
   1f63e:	1e50      	subs	r0, r2, #1
   1f640:	4182      	sbcs	r2, r0
   1f642:	40e9      	lsrs	r1, r5
   1f644:	431a      	orrs	r2, r3
   1f646:	1aba      	subs	r2, r7, r2
   1f648:	1a61      	subs	r1, r4, r1
   1f64a:	4297      	cmp	r7, r2
   1f64c:	41a4      	sbcs	r4, r4
   1f64e:	0017      	movs	r7, r2
   1f650:	4264      	negs	r4, r4
   1f652:	1b0c      	subs	r4, r1, r4
   1f654:	0223      	lsls	r3, r4, #8
   1f656:	d562      	bpl.n	1f71e <__aeabi_dadd+0x17a>
   1f658:	0264      	lsls	r4, r4, #9
   1f65a:	0a65      	lsrs	r5, r4, #9
   1f65c:	2d00      	cmp	r5, #0
   1f65e:	d100      	bne.n	1f662 <__aeabi_dadd+0xbe>
   1f660:	e0df      	b.n	1f822 <__aeabi_dadd+0x27e>
   1f662:	0028      	movs	r0, r5
   1f664:	f001 fbe4 	bl	20e30 <__clzsi2>
   1f668:	0003      	movs	r3, r0
   1f66a:	3b08      	subs	r3, #8
   1f66c:	2b1f      	cmp	r3, #31
   1f66e:	dd00      	ble.n	1f672 <__aeabi_dadd+0xce>
   1f670:	e0d2      	b.n	1f818 <__aeabi_dadd+0x274>
   1f672:	2220      	movs	r2, #32
   1f674:	003c      	movs	r4, r7
   1f676:	1ad2      	subs	r2, r2, r3
   1f678:	409d      	lsls	r5, r3
   1f67a:	40d4      	lsrs	r4, r2
   1f67c:	409f      	lsls	r7, r3
   1f67e:	4325      	orrs	r5, r4
   1f680:	429e      	cmp	r6, r3
   1f682:	dd00      	ble.n	1f686 <__aeabi_dadd+0xe2>
   1f684:	e0c4      	b.n	1f810 <__aeabi_dadd+0x26c>
   1f686:	1b9e      	subs	r6, r3, r6
   1f688:	1c73      	adds	r3, r6, #1
   1f68a:	2b1f      	cmp	r3, #31
   1f68c:	dd00      	ble.n	1f690 <__aeabi_dadd+0xec>
   1f68e:	e0f1      	b.n	1f874 <__aeabi_dadd+0x2d0>
   1f690:	2220      	movs	r2, #32
   1f692:	0038      	movs	r0, r7
   1f694:	0029      	movs	r1, r5
   1f696:	1ad2      	subs	r2, r2, r3
   1f698:	40d8      	lsrs	r0, r3
   1f69a:	4091      	lsls	r1, r2
   1f69c:	4097      	lsls	r7, r2
   1f69e:	002c      	movs	r4, r5
   1f6a0:	4301      	orrs	r1, r0
   1f6a2:	1e78      	subs	r0, r7, #1
   1f6a4:	4187      	sbcs	r7, r0
   1f6a6:	40dc      	lsrs	r4, r3
   1f6a8:	2600      	movs	r6, #0
   1f6aa:	430f      	orrs	r7, r1
   1f6ac:	077b      	lsls	r3, r7, #29
   1f6ae:	d009      	beq.n	1f6c4 <__aeabi_dadd+0x120>
   1f6b0:	230f      	movs	r3, #15
   1f6b2:	403b      	ands	r3, r7
   1f6b4:	2b04      	cmp	r3, #4
   1f6b6:	d005      	beq.n	1f6c4 <__aeabi_dadd+0x120>
   1f6b8:	1d3b      	adds	r3, r7, #4
   1f6ba:	42bb      	cmp	r3, r7
   1f6bc:	41bf      	sbcs	r7, r7
   1f6be:	427f      	negs	r7, r7
   1f6c0:	19e4      	adds	r4, r4, r7
   1f6c2:	001f      	movs	r7, r3
   1f6c4:	0223      	lsls	r3, r4, #8
   1f6c6:	d52c      	bpl.n	1f722 <__aeabi_dadd+0x17e>
   1f6c8:	4b96      	ldr	r3, [pc, #600]	; (1f924 <__aeabi_dadd+0x380>)
   1f6ca:	3601      	adds	r6, #1
   1f6cc:	429e      	cmp	r6, r3
   1f6ce:	d100      	bne.n	1f6d2 <__aeabi_dadd+0x12e>
   1f6d0:	e09a      	b.n	1f808 <__aeabi_dadd+0x264>
   1f6d2:	4645      	mov	r5, r8
   1f6d4:	4b94      	ldr	r3, [pc, #592]	; (1f928 <__aeabi_dadd+0x384>)
   1f6d6:	08ff      	lsrs	r7, r7, #3
   1f6d8:	401c      	ands	r4, r3
   1f6da:	0760      	lsls	r0, r4, #29
   1f6dc:	0576      	lsls	r6, r6, #21
   1f6de:	0264      	lsls	r4, r4, #9
   1f6e0:	4307      	orrs	r7, r0
   1f6e2:	0b24      	lsrs	r4, r4, #12
   1f6e4:	0d76      	lsrs	r6, r6, #21
   1f6e6:	2100      	movs	r1, #0
   1f6e8:	0324      	lsls	r4, r4, #12
   1f6ea:	0b23      	lsrs	r3, r4, #12
   1f6ec:	0d0c      	lsrs	r4, r1, #20
   1f6ee:	4a8f      	ldr	r2, [pc, #572]	; (1f92c <__aeabi_dadd+0x388>)
   1f6f0:	0524      	lsls	r4, r4, #20
   1f6f2:	431c      	orrs	r4, r3
   1f6f4:	4014      	ands	r4, r2
   1f6f6:	0533      	lsls	r3, r6, #20
   1f6f8:	4323      	orrs	r3, r4
   1f6fa:	005b      	lsls	r3, r3, #1
   1f6fc:	07ed      	lsls	r5, r5, #31
   1f6fe:	085b      	lsrs	r3, r3, #1
   1f700:	432b      	orrs	r3, r5
   1f702:	0038      	movs	r0, r7
   1f704:	0019      	movs	r1, r3
   1f706:	bc3c      	pop	{r2, r3, r4, r5}
   1f708:	4690      	mov	r8, r2
   1f70a:	4699      	mov	r9, r3
   1f70c:	46a2      	mov	sl, r4
   1f70e:	46ab      	mov	fp, r5
   1f710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f712:	4664      	mov	r4, ip
   1f714:	4304      	orrs	r4, r0
   1f716:	d100      	bne.n	1f71a <__aeabi_dadd+0x176>
   1f718:	e211      	b.n	1fb3e <__aeabi_dadd+0x59a>
   1f71a:	0004      	movs	r4, r0
   1f71c:	4667      	mov	r7, ip
   1f71e:	077b      	lsls	r3, r7, #29
   1f720:	d1c6      	bne.n	1f6b0 <__aeabi_dadd+0x10c>
   1f722:	4645      	mov	r5, r8
   1f724:	0760      	lsls	r0, r4, #29
   1f726:	08ff      	lsrs	r7, r7, #3
   1f728:	4307      	orrs	r7, r0
   1f72a:	08e4      	lsrs	r4, r4, #3
   1f72c:	4b7d      	ldr	r3, [pc, #500]	; (1f924 <__aeabi_dadd+0x380>)
   1f72e:	429e      	cmp	r6, r3
   1f730:	d030      	beq.n	1f794 <__aeabi_dadd+0x1f0>
   1f732:	0324      	lsls	r4, r4, #12
   1f734:	0576      	lsls	r6, r6, #21
   1f736:	0b24      	lsrs	r4, r4, #12
   1f738:	0d76      	lsrs	r6, r6, #21
   1f73a:	e7d4      	b.n	1f6e6 <__aeabi_dadd+0x142>
   1f73c:	1a33      	subs	r3, r6, r0
   1f73e:	469a      	mov	sl, r3
   1f740:	2b00      	cmp	r3, #0
   1f742:	dd78      	ble.n	1f836 <__aeabi_dadd+0x292>
   1f744:	2800      	cmp	r0, #0
   1f746:	d031      	beq.n	1f7ac <__aeabi_dadd+0x208>
   1f748:	4876      	ldr	r0, [pc, #472]	; (1f924 <__aeabi_dadd+0x380>)
   1f74a:	4286      	cmp	r6, r0
   1f74c:	d0ae      	beq.n	1f6ac <__aeabi_dadd+0x108>
   1f74e:	2080      	movs	r0, #128	; 0x80
   1f750:	0400      	lsls	r0, r0, #16
   1f752:	4301      	orrs	r1, r0
   1f754:	4653      	mov	r3, sl
   1f756:	2b38      	cmp	r3, #56	; 0x38
   1f758:	dc00      	bgt.n	1f75c <__aeabi_dadd+0x1b8>
   1f75a:	e0e9      	b.n	1f930 <__aeabi_dadd+0x38c>
   1f75c:	430a      	orrs	r2, r1
   1f75e:	1e51      	subs	r1, r2, #1
   1f760:	418a      	sbcs	r2, r1
   1f762:	2100      	movs	r1, #0
   1f764:	19d2      	adds	r2, r2, r7
   1f766:	42ba      	cmp	r2, r7
   1f768:	41bf      	sbcs	r7, r7
   1f76a:	1909      	adds	r1, r1, r4
   1f76c:	427c      	negs	r4, r7
   1f76e:	0017      	movs	r7, r2
   1f770:	190c      	adds	r4, r1, r4
   1f772:	0223      	lsls	r3, r4, #8
   1f774:	d5d3      	bpl.n	1f71e <__aeabi_dadd+0x17a>
   1f776:	4b6b      	ldr	r3, [pc, #428]	; (1f924 <__aeabi_dadd+0x380>)
   1f778:	3601      	adds	r6, #1
   1f77a:	429e      	cmp	r6, r3
   1f77c:	d100      	bne.n	1f780 <__aeabi_dadd+0x1dc>
   1f77e:	e13a      	b.n	1f9f6 <__aeabi_dadd+0x452>
   1f780:	2001      	movs	r0, #1
   1f782:	4b69      	ldr	r3, [pc, #420]	; (1f928 <__aeabi_dadd+0x384>)
   1f784:	401c      	ands	r4, r3
   1f786:	087b      	lsrs	r3, r7, #1
   1f788:	4007      	ands	r7, r0
   1f78a:	431f      	orrs	r7, r3
   1f78c:	07e0      	lsls	r0, r4, #31
   1f78e:	4307      	orrs	r7, r0
   1f790:	0864      	lsrs	r4, r4, #1
   1f792:	e78b      	b.n	1f6ac <__aeabi_dadd+0x108>
   1f794:	0023      	movs	r3, r4
   1f796:	433b      	orrs	r3, r7
   1f798:	d100      	bne.n	1f79c <__aeabi_dadd+0x1f8>
   1f79a:	e1cb      	b.n	1fb34 <__aeabi_dadd+0x590>
   1f79c:	2280      	movs	r2, #128	; 0x80
   1f79e:	0312      	lsls	r2, r2, #12
   1f7a0:	4314      	orrs	r4, r2
   1f7a2:	0324      	lsls	r4, r4, #12
   1f7a4:	0b24      	lsrs	r4, r4, #12
   1f7a6:	e79e      	b.n	1f6e6 <__aeabi_dadd+0x142>
   1f7a8:	002e      	movs	r6, r5
   1f7aa:	e77f      	b.n	1f6ac <__aeabi_dadd+0x108>
   1f7ac:	0008      	movs	r0, r1
   1f7ae:	4310      	orrs	r0, r2
   1f7b0:	d100      	bne.n	1f7b4 <__aeabi_dadd+0x210>
   1f7b2:	e0b4      	b.n	1f91e <__aeabi_dadd+0x37a>
   1f7b4:	1e58      	subs	r0, r3, #1
   1f7b6:	2800      	cmp	r0, #0
   1f7b8:	d000      	beq.n	1f7bc <__aeabi_dadd+0x218>
   1f7ba:	e0de      	b.n	1f97a <__aeabi_dadd+0x3d6>
   1f7bc:	18ba      	adds	r2, r7, r2
   1f7be:	42ba      	cmp	r2, r7
   1f7c0:	419b      	sbcs	r3, r3
   1f7c2:	1864      	adds	r4, r4, r1
   1f7c4:	425b      	negs	r3, r3
   1f7c6:	18e4      	adds	r4, r4, r3
   1f7c8:	0017      	movs	r7, r2
   1f7ca:	2601      	movs	r6, #1
   1f7cc:	0223      	lsls	r3, r4, #8
   1f7ce:	d5a6      	bpl.n	1f71e <__aeabi_dadd+0x17a>
   1f7d0:	2602      	movs	r6, #2
   1f7d2:	e7d5      	b.n	1f780 <__aeabi_dadd+0x1dc>
   1f7d4:	2d00      	cmp	r5, #0
   1f7d6:	d16e      	bne.n	1f8b6 <__aeabi_dadd+0x312>
   1f7d8:	1c70      	adds	r0, r6, #1
   1f7da:	0540      	lsls	r0, r0, #21
   1f7dc:	0d40      	lsrs	r0, r0, #21
   1f7de:	2801      	cmp	r0, #1
   1f7e0:	dc00      	bgt.n	1f7e4 <__aeabi_dadd+0x240>
   1f7e2:	e0f9      	b.n	1f9d8 <__aeabi_dadd+0x434>
   1f7e4:	1ab8      	subs	r0, r7, r2
   1f7e6:	4684      	mov	ip, r0
   1f7e8:	4287      	cmp	r7, r0
   1f7ea:	4180      	sbcs	r0, r0
   1f7ec:	1ae5      	subs	r5, r4, r3
   1f7ee:	4240      	negs	r0, r0
   1f7f0:	1a2d      	subs	r5, r5, r0
   1f7f2:	0228      	lsls	r0, r5, #8
   1f7f4:	d400      	bmi.n	1f7f8 <__aeabi_dadd+0x254>
   1f7f6:	e089      	b.n	1f90c <__aeabi_dadd+0x368>
   1f7f8:	1bd7      	subs	r7, r2, r7
   1f7fa:	42ba      	cmp	r2, r7
   1f7fc:	4192      	sbcs	r2, r2
   1f7fe:	1b1c      	subs	r4, r3, r4
   1f800:	4252      	negs	r2, r2
   1f802:	1aa5      	subs	r5, r4, r2
   1f804:	46d8      	mov	r8, fp
   1f806:	e729      	b.n	1f65c <__aeabi_dadd+0xb8>
   1f808:	4645      	mov	r5, r8
   1f80a:	2400      	movs	r4, #0
   1f80c:	2700      	movs	r7, #0
   1f80e:	e76a      	b.n	1f6e6 <__aeabi_dadd+0x142>
   1f810:	4c45      	ldr	r4, [pc, #276]	; (1f928 <__aeabi_dadd+0x384>)
   1f812:	1af6      	subs	r6, r6, r3
   1f814:	402c      	ands	r4, r5
   1f816:	e749      	b.n	1f6ac <__aeabi_dadd+0x108>
   1f818:	003d      	movs	r5, r7
   1f81a:	3828      	subs	r0, #40	; 0x28
   1f81c:	4085      	lsls	r5, r0
   1f81e:	2700      	movs	r7, #0
   1f820:	e72e      	b.n	1f680 <__aeabi_dadd+0xdc>
   1f822:	0038      	movs	r0, r7
   1f824:	f001 fb04 	bl	20e30 <__clzsi2>
   1f828:	3020      	adds	r0, #32
   1f82a:	e71d      	b.n	1f668 <__aeabi_dadd+0xc4>
   1f82c:	430a      	orrs	r2, r1
   1f82e:	1e51      	subs	r1, r2, #1
   1f830:	418a      	sbcs	r2, r1
   1f832:	2100      	movs	r1, #0
   1f834:	e707      	b.n	1f646 <__aeabi_dadd+0xa2>
   1f836:	2b00      	cmp	r3, #0
   1f838:	d000      	beq.n	1f83c <__aeabi_dadd+0x298>
   1f83a:	e0f3      	b.n	1fa24 <__aeabi_dadd+0x480>
   1f83c:	1c70      	adds	r0, r6, #1
   1f83e:	0543      	lsls	r3, r0, #21
   1f840:	0d5b      	lsrs	r3, r3, #21
   1f842:	2b01      	cmp	r3, #1
   1f844:	dc00      	bgt.n	1f848 <__aeabi_dadd+0x2a4>
   1f846:	e0ad      	b.n	1f9a4 <__aeabi_dadd+0x400>
   1f848:	4b36      	ldr	r3, [pc, #216]	; (1f924 <__aeabi_dadd+0x380>)
   1f84a:	4298      	cmp	r0, r3
   1f84c:	d100      	bne.n	1f850 <__aeabi_dadd+0x2ac>
   1f84e:	e0d1      	b.n	1f9f4 <__aeabi_dadd+0x450>
   1f850:	18ba      	adds	r2, r7, r2
   1f852:	42ba      	cmp	r2, r7
   1f854:	41bf      	sbcs	r7, r7
   1f856:	1864      	adds	r4, r4, r1
   1f858:	427f      	negs	r7, r7
   1f85a:	19e4      	adds	r4, r4, r7
   1f85c:	07e7      	lsls	r7, r4, #31
   1f85e:	0852      	lsrs	r2, r2, #1
   1f860:	4317      	orrs	r7, r2
   1f862:	0864      	lsrs	r4, r4, #1
   1f864:	0006      	movs	r6, r0
   1f866:	e721      	b.n	1f6ac <__aeabi_dadd+0x108>
   1f868:	482e      	ldr	r0, [pc, #184]	; (1f924 <__aeabi_dadd+0x380>)
   1f86a:	4285      	cmp	r5, r0
   1f86c:	d100      	bne.n	1f870 <__aeabi_dadd+0x2cc>
   1f86e:	e093      	b.n	1f998 <__aeabi_dadd+0x3f4>
   1f870:	001d      	movs	r5, r3
   1f872:	e6d0      	b.n	1f616 <__aeabi_dadd+0x72>
   1f874:	0029      	movs	r1, r5
   1f876:	3e1f      	subs	r6, #31
   1f878:	40f1      	lsrs	r1, r6
   1f87a:	2b20      	cmp	r3, #32
   1f87c:	d100      	bne.n	1f880 <__aeabi_dadd+0x2dc>
   1f87e:	e08d      	b.n	1f99c <__aeabi_dadd+0x3f8>
   1f880:	2240      	movs	r2, #64	; 0x40
   1f882:	1ad3      	subs	r3, r2, r3
   1f884:	409d      	lsls	r5, r3
   1f886:	432f      	orrs	r7, r5
   1f888:	1e7d      	subs	r5, r7, #1
   1f88a:	41af      	sbcs	r7, r5
   1f88c:	2400      	movs	r4, #0
   1f88e:	430f      	orrs	r7, r1
   1f890:	2600      	movs	r6, #0
   1f892:	e744      	b.n	1f71e <__aeabi_dadd+0x17a>
   1f894:	002b      	movs	r3, r5
   1f896:	0008      	movs	r0, r1
   1f898:	3b20      	subs	r3, #32
   1f89a:	40d8      	lsrs	r0, r3
   1f89c:	0003      	movs	r3, r0
   1f89e:	2d20      	cmp	r5, #32
   1f8a0:	d100      	bne.n	1f8a4 <__aeabi_dadd+0x300>
   1f8a2:	e07d      	b.n	1f9a0 <__aeabi_dadd+0x3fc>
   1f8a4:	2040      	movs	r0, #64	; 0x40
   1f8a6:	1b45      	subs	r5, r0, r5
   1f8a8:	40a9      	lsls	r1, r5
   1f8aa:	430a      	orrs	r2, r1
   1f8ac:	1e51      	subs	r1, r2, #1
   1f8ae:	418a      	sbcs	r2, r1
   1f8b0:	2100      	movs	r1, #0
   1f8b2:	431a      	orrs	r2, r3
   1f8b4:	e6c7      	b.n	1f646 <__aeabi_dadd+0xa2>
   1f8b6:	2e00      	cmp	r6, #0
   1f8b8:	d050      	beq.n	1f95c <__aeabi_dadd+0x3b8>
   1f8ba:	4e1a      	ldr	r6, [pc, #104]	; (1f924 <__aeabi_dadd+0x380>)
   1f8bc:	42b0      	cmp	r0, r6
   1f8be:	d057      	beq.n	1f970 <__aeabi_dadd+0x3cc>
   1f8c0:	2680      	movs	r6, #128	; 0x80
   1f8c2:	426b      	negs	r3, r5
   1f8c4:	4699      	mov	r9, r3
   1f8c6:	0436      	lsls	r6, r6, #16
   1f8c8:	4334      	orrs	r4, r6
   1f8ca:	464b      	mov	r3, r9
   1f8cc:	2b38      	cmp	r3, #56	; 0x38
   1f8ce:	dd00      	ble.n	1f8d2 <__aeabi_dadd+0x32e>
   1f8d0:	e0d6      	b.n	1fa80 <__aeabi_dadd+0x4dc>
   1f8d2:	2b1f      	cmp	r3, #31
   1f8d4:	dd00      	ble.n	1f8d8 <__aeabi_dadd+0x334>
   1f8d6:	e135      	b.n	1fb44 <__aeabi_dadd+0x5a0>
   1f8d8:	2620      	movs	r6, #32
   1f8da:	1af5      	subs	r5, r6, r3
   1f8dc:	0026      	movs	r6, r4
   1f8de:	40ae      	lsls	r6, r5
   1f8e0:	46b2      	mov	sl, r6
   1f8e2:	003e      	movs	r6, r7
   1f8e4:	40de      	lsrs	r6, r3
   1f8e6:	46ac      	mov	ip, r5
   1f8e8:	0035      	movs	r5, r6
   1f8ea:	4656      	mov	r6, sl
   1f8ec:	432e      	orrs	r6, r5
   1f8ee:	4665      	mov	r5, ip
   1f8f0:	40af      	lsls	r7, r5
   1f8f2:	1e7d      	subs	r5, r7, #1
   1f8f4:	41af      	sbcs	r7, r5
   1f8f6:	40dc      	lsrs	r4, r3
   1f8f8:	4337      	orrs	r7, r6
   1f8fa:	1bd7      	subs	r7, r2, r7
   1f8fc:	42ba      	cmp	r2, r7
   1f8fe:	4192      	sbcs	r2, r2
   1f900:	1b0c      	subs	r4, r1, r4
   1f902:	4252      	negs	r2, r2
   1f904:	1aa4      	subs	r4, r4, r2
   1f906:	0006      	movs	r6, r0
   1f908:	46d8      	mov	r8, fp
   1f90a:	e6a3      	b.n	1f654 <__aeabi_dadd+0xb0>
   1f90c:	4664      	mov	r4, ip
   1f90e:	4667      	mov	r7, ip
   1f910:	432c      	orrs	r4, r5
   1f912:	d000      	beq.n	1f916 <__aeabi_dadd+0x372>
   1f914:	e6a2      	b.n	1f65c <__aeabi_dadd+0xb8>
   1f916:	2500      	movs	r5, #0
   1f918:	2600      	movs	r6, #0
   1f91a:	2700      	movs	r7, #0
   1f91c:	e706      	b.n	1f72c <__aeabi_dadd+0x188>
   1f91e:	001e      	movs	r6, r3
   1f920:	e6c4      	b.n	1f6ac <__aeabi_dadd+0x108>
   1f922:	46c0      	nop			; (mov r8, r8)
   1f924:	000007ff 	.word	0x000007ff
   1f928:	ff7fffff 	.word	0xff7fffff
   1f92c:	800fffff 	.word	0x800fffff
   1f930:	2b1f      	cmp	r3, #31
   1f932:	dc63      	bgt.n	1f9fc <__aeabi_dadd+0x458>
   1f934:	2020      	movs	r0, #32
   1f936:	1ac3      	subs	r3, r0, r3
   1f938:	0008      	movs	r0, r1
   1f93a:	4098      	lsls	r0, r3
   1f93c:	469c      	mov	ip, r3
   1f93e:	4683      	mov	fp, r0
   1f940:	4653      	mov	r3, sl
   1f942:	0010      	movs	r0, r2
   1f944:	40d8      	lsrs	r0, r3
   1f946:	0003      	movs	r3, r0
   1f948:	4658      	mov	r0, fp
   1f94a:	4318      	orrs	r0, r3
   1f94c:	4663      	mov	r3, ip
   1f94e:	409a      	lsls	r2, r3
   1f950:	1e53      	subs	r3, r2, #1
   1f952:	419a      	sbcs	r2, r3
   1f954:	4653      	mov	r3, sl
   1f956:	4302      	orrs	r2, r0
   1f958:	40d9      	lsrs	r1, r3
   1f95a:	e703      	b.n	1f764 <__aeabi_dadd+0x1c0>
   1f95c:	0026      	movs	r6, r4
   1f95e:	433e      	orrs	r6, r7
   1f960:	d006      	beq.n	1f970 <__aeabi_dadd+0x3cc>
   1f962:	43eb      	mvns	r3, r5
   1f964:	4699      	mov	r9, r3
   1f966:	2b00      	cmp	r3, #0
   1f968:	d0c7      	beq.n	1f8fa <__aeabi_dadd+0x356>
   1f96a:	4e94      	ldr	r6, [pc, #592]	; (1fbbc <__aeabi_dadd+0x618>)
   1f96c:	42b0      	cmp	r0, r6
   1f96e:	d1ac      	bne.n	1f8ca <__aeabi_dadd+0x326>
   1f970:	000c      	movs	r4, r1
   1f972:	0017      	movs	r7, r2
   1f974:	0006      	movs	r6, r0
   1f976:	46d8      	mov	r8, fp
   1f978:	e698      	b.n	1f6ac <__aeabi_dadd+0x108>
   1f97a:	4b90      	ldr	r3, [pc, #576]	; (1fbbc <__aeabi_dadd+0x618>)
   1f97c:	459a      	cmp	sl, r3
   1f97e:	d00b      	beq.n	1f998 <__aeabi_dadd+0x3f4>
   1f980:	4682      	mov	sl, r0
   1f982:	e6e7      	b.n	1f754 <__aeabi_dadd+0x1b0>
   1f984:	2800      	cmp	r0, #0
   1f986:	d000      	beq.n	1f98a <__aeabi_dadd+0x3e6>
   1f988:	e09e      	b.n	1fac8 <__aeabi_dadd+0x524>
   1f98a:	0018      	movs	r0, r3
   1f98c:	4310      	orrs	r0, r2
   1f98e:	d100      	bne.n	1f992 <__aeabi_dadd+0x3ee>
   1f990:	e0e9      	b.n	1fb66 <__aeabi_dadd+0x5c2>
   1f992:	001c      	movs	r4, r3
   1f994:	0017      	movs	r7, r2
   1f996:	46d8      	mov	r8, fp
   1f998:	4e88      	ldr	r6, [pc, #544]	; (1fbbc <__aeabi_dadd+0x618>)
   1f99a:	e687      	b.n	1f6ac <__aeabi_dadd+0x108>
   1f99c:	2500      	movs	r5, #0
   1f99e:	e772      	b.n	1f886 <__aeabi_dadd+0x2e2>
   1f9a0:	2100      	movs	r1, #0
   1f9a2:	e782      	b.n	1f8aa <__aeabi_dadd+0x306>
   1f9a4:	0023      	movs	r3, r4
   1f9a6:	433b      	orrs	r3, r7
   1f9a8:	2e00      	cmp	r6, #0
   1f9aa:	d000      	beq.n	1f9ae <__aeabi_dadd+0x40a>
   1f9ac:	e0ab      	b.n	1fb06 <__aeabi_dadd+0x562>
   1f9ae:	2b00      	cmp	r3, #0
   1f9b0:	d100      	bne.n	1f9b4 <__aeabi_dadd+0x410>
   1f9b2:	e0e7      	b.n	1fb84 <__aeabi_dadd+0x5e0>
   1f9b4:	000b      	movs	r3, r1
   1f9b6:	4313      	orrs	r3, r2
   1f9b8:	d100      	bne.n	1f9bc <__aeabi_dadd+0x418>
   1f9ba:	e677      	b.n	1f6ac <__aeabi_dadd+0x108>
   1f9bc:	18ba      	adds	r2, r7, r2
   1f9be:	42ba      	cmp	r2, r7
   1f9c0:	41bf      	sbcs	r7, r7
   1f9c2:	1864      	adds	r4, r4, r1
   1f9c4:	427f      	negs	r7, r7
   1f9c6:	19e4      	adds	r4, r4, r7
   1f9c8:	0223      	lsls	r3, r4, #8
   1f9ca:	d400      	bmi.n	1f9ce <__aeabi_dadd+0x42a>
   1f9cc:	e0f2      	b.n	1fbb4 <__aeabi_dadd+0x610>
   1f9ce:	4b7c      	ldr	r3, [pc, #496]	; (1fbc0 <__aeabi_dadd+0x61c>)
   1f9d0:	0017      	movs	r7, r2
   1f9d2:	401c      	ands	r4, r3
   1f9d4:	0006      	movs	r6, r0
   1f9d6:	e669      	b.n	1f6ac <__aeabi_dadd+0x108>
   1f9d8:	0020      	movs	r0, r4
   1f9da:	4338      	orrs	r0, r7
   1f9dc:	2e00      	cmp	r6, #0
   1f9de:	d1d1      	bne.n	1f984 <__aeabi_dadd+0x3e0>
   1f9e0:	2800      	cmp	r0, #0
   1f9e2:	d15b      	bne.n	1fa9c <__aeabi_dadd+0x4f8>
   1f9e4:	001c      	movs	r4, r3
   1f9e6:	4314      	orrs	r4, r2
   1f9e8:	d100      	bne.n	1f9ec <__aeabi_dadd+0x448>
   1f9ea:	e0a8      	b.n	1fb3e <__aeabi_dadd+0x59a>
   1f9ec:	001c      	movs	r4, r3
   1f9ee:	0017      	movs	r7, r2
   1f9f0:	46d8      	mov	r8, fp
   1f9f2:	e65b      	b.n	1f6ac <__aeabi_dadd+0x108>
   1f9f4:	0006      	movs	r6, r0
   1f9f6:	2400      	movs	r4, #0
   1f9f8:	2700      	movs	r7, #0
   1f9fa:	e697      	b.n	1f72c <__aeabi_dadd+0x188>
   1f9fc:	4650      	mov	r0, sl
   1f9fe:	000b      	movs	r3, r1
   1fa00:	3820      	subs	r0, #32
   1fa02:	40c3      	lsrs	r3, r0
   1fa04:	4699      	mov	r9, r3
   1fa06:	4653      	mov	r3, sl
   1fa08:	2b20      	cmp	r3, #32
   1fa0a:	d100      	bne.n	1fa0e <__aeabi_dadd+0x46a>
   1fa0c:	e095      	b.n	1fb3a <__aeabi_dadd+0x596>
   1fa0e:	2340      	movs	r3, #64	; 0x40
   1fa10:	4650      	mov	r0, sl
   1fa12:	1a1b      	subs	r3, r3, r0
   1fa14:	4099      	lsls	r1, r3
   1fa16:	430a      	orrs	r2, r1
   1fa18:	1e51      	subs	r1, r2, #1
   1fa1a:	418a      	sbcs	r2, r1
   1fa1c:	464b      	mov	r3, r9
   1fa1e:	2100      	movs	r1, #0
   1fa20:	431a      	orrs	r2, r3
   1fa22:	e69f      	b.n	1f764 <__aeabi_dadd+0x1c0>
   1fa24:	2e00      	cmp	r6, #0
   1fa26:	d130      	bne.n	1fa8a <__aeabi_dadd+0x4e6>
   1fa28:	0026      	movs	r6, r4
   1fa2a:	433e      	orrs	r6, r7
   1fa2c:	d067      	beq.n	1fafe <__aeabi_dadd+0x55a>
   1fa2e:	43db      	mvns	r3, r3
   1fa30:	469a      	mov	sl, r3
   1fa32:	2b00      	cmp	r3, #0
   1fa34:	d01c      	beq.n	1fa70 <__aeabi_dadd+0x4cc>
   1fa36:	4e61      	ldr	r6, [pc, #388]	; (1fbbc <__aeabi_dadd+0x618>)
   1fa38:	42b0      	cmp	r0, r6
   1fa3a:	d060      	beq.n	1fafe <__aeabi_dadd+0x55a>
   1fa3c:	4653      	mov	r3, sl
   1fa3e:	2b38      	cmp	r3, #56	; 0x38
   1fa40:	dd00      	ble.n	1fa44 <__aeabi_dadd+0x4a0>
   1fa42:	e096      	b.n	1fb72 <__aeabi_dadd+0x5ce>
   1fa44:	2b1f      	cmp	r3, #31
   1fa46:	dd00      	ble.n	1fa4a <__aeabi_dadd+0x4a6>
   1fa48:	e09f      	b.n	1fb8a <__aeabi_dadd+0x5e6>
   1fa4a:	2620      	movs	r6, #32
   1fa4c:	1af3      	subs	r3, r6, r3
   1fa4e:	0026      	movs	r6, r4
   1fa50:	409e      	lsls	r6, r3
   1fa52:	469c      	mov	ip, r3
   1fa54:	46b3      	mov	fp, r6
   1fa56:	4653      	mov	r3, sl
   1fa58:	003e      	movs	r6, r7
   1fa5a:	40de      	lsrs	r6, r3
   1fa5c:	0033      	movs	r3, r6
   1fa5e:	465e      	mov	r6, fp
   1fa60:	431e      	orrs	r6, r3
   1fa62:	4663      	mov	r3, ip
   1fa64:	409f      	lsls	r7, r3
   1fa66:	1e7b      	subs	r3, r7, #1
   1fa68:	419f      	sbcs	r7, r3
   1fa6a:	4653      	mov	r3, sl
   1fa6c:	40dc      	lsrs	r4, r3
   1fa6e:	4337      	orrs	r7, r6
   1fa70:	18bf      	adds	r7, r7, r2
   1fa72:	4297      	cmp	r7, r2
   1fa74:	4192      	sbcs	r2, r2
   1fa76:	1864      	adds	r4, r4, r1
   1fa78:	4252      	negs	r2, r2
   1fa7a:	18a4      	adds	r4, r4, r2
   1fa7c:	0006      	movs	r6, r0
   1fa7e:	e678      	b.n	1f772 <__aeabi_dadd+0x1ce>
   1fa80:	4327      	orrs	r7, r4
   1fa82:	1e7c      	subs	r4, r7, #1
   1fa84:	41a7      	sbcs	r7, r4
   1fa86:	2400      	movs	r4, #0
   1fa88:	e737      	b.n	1f8fa <__aeabi_dadd+0x356>
   1fa8a:	4e4c      	ldr	r6, [pc, #304]	; (1fbbc <__aeabi_dadd+0x618>)
   1fa8c:	42b0      	cmp	r0, r6
   1fa8e:	d036      	beq.n	1fafe <__aeabi_dadd+0x55a>
   1fa90:	2680      	movs	r6, #128	; 0x80
   1fa92:	425b      	negs	r3, r3
   1fa94:	0436      	lsls	r6, r6, #16
   1fa96:	469a      	mov	sl, r3
   1fa98:	4334      	orrs	r4, r6
   1fa9a:	e7cf      	b.n	1fa3c <__aeabi_dadd+0x498>
   1fa9c:	0018      	movs	r0, r3
   1fa9e:	4310      	orrs	r0, r2
   1faa0:	d100      	bne.n	1faa4 <__aeabi_dadd+0x500>
   1faa2:	e603      	b.n	1f6ac <__aeabi_dadd+0x108>
   1faa4:	1ab8      	subs	r0, r7, r2
   1faa6:	4684      	mov	ip, r0
   1faa8:	4567      	cmp	r7, ip
   1faaa:	41ad      	sbcs	r5, r5
   1faac:	1ae0      	subs	r0, r4, r3
   1faae:	426d      	negs	r5, r5
   1fab0:	1b40      	subs	r0, r0, r5
   1fab2:	0205      	lsls	r5, r0, #8
   1fab4:	d400      	bmi.n	1fab8 <__aeabi_dadd+0x514>
   1fab6:	e62c      	b.n	1f712 <__aeabi_dadd+0x16e>
   1fab8:	1bd7      	subs	r7, r2, r7
   1faba:	42ba      	cmp	r2, r7
   1fabc:	4192      	sbcs	r2, r2
   1fabe:	1b1c      	subs	r4, r3, r4
   1fac0:	4252      	negs	r2, r2
   1fac2:	1aa4      	subs	r4, r4, r2
   1fac4:	46d8      	mov	r8, fp
   1fac6:	e5f1      	b.n	1f6ac <__aeabi_dadd+0x108>
   1fac8:	0018      	movs	r0, r3
   1faca:	4310      	orrs	r0, r2
   1facc:	d100      	bne.n	1fad0 <__aeabi_dadd+0x52c>
   1face:	e763      	b.n	1f998 <__aeabi_dadd+0x3f4>
   1fad0:	08f8      	lsrs	r0, r7, #3
   1fad2:	0767      	lsls	r7, r4, #29
   1fad4:	4307      	orrs	r7, r0
   1fad6:	2080      	movs	r0, #128	; 0x80
   1fad8:	08e4      	lsrs	r4, r4, #3
   1fada:	0300      	lsls	r0, r0, #12
   1fadc:	4204      	tst	r4, r0
   1fade:	d008      	beq.n	1faf2 <__aeabi_dadd+0x54e>
   1fae0:	08dd      	lsrs	r5, r3, #3
   1fae2:	4205      	tst	r5, r0
   1fae4:	d105      	bne.n	1faf2 <__aeabi_dadd+0x54e>
   1fae6:	08d2      	lsrs	r2, r2, #3
   1fae8:	0759      	lsls	r1, r3, #29
   1faea:	4311      	orrs	r1, r2
   1faec:	000f      	movs	r7, r1
   1faee:	002c      	movs	r4, r5
   1faf0:	46d8      	mov	r8, fp
   1faf2:	0f7b      	lsrs	r3, r7, #29
   1faf4:	00e4      	lsls	r4, r4, #3
   1faf6:	431c      	orrs	r4, r3
   1faf8:	00ff      	lsls	r7, r7, #3
   1fafa:	4e30      	ldr	r6, [pc, #192]	; (1fbbc <__aeabi_dadd+0x618>)
   1fafc:	e5d6      	b.n	1f6ac <__aeabi_dadd+0x108>
   1fafe:	000c      	movs	r4, r1
   1fb00:	0017      	movs	r7, r2
   1fb02:	0006      	movs	r6, r0
   1fb04:	e5d2      	b.n	1f6ac <__aeabi_dadd+0x108>
   1fb06:	2b00      	cmp	r3, #0
   1fb08:	d038      	beq.n	1fb7c <__aeabi_dadd+0x5d8>
   1fb0a:	000b      	movs	r3, r1
   1fb0c:	4313      	orrs	r3, r2
   1fb0e:	d100      	bne.n	1fb12 <__aeabi_dadd+0x56e>
   1fb10:	e742      	b.n	1f998 <__aeabi_dadd+0x3f4>
   1fb12:	08f8      	lsrs	r0, r7, #3
   1fb14:	0767      	lsls	r7, r4, #29
   1fb16:	4307      	orrs	r7, r0
   1fb18:	2080      	movs	r0, #128	; 0x80
   1fb1a:	08e4      	lsrs	r4, r4, #3
   1fb1c:	0300      	lsls	r0, r0, #12
   1fb1e:	4204      	tst	r4, r0
   1fb20:	d0e7      	beq.n	1faf2 <__aeabi_dadd+0x54e>
   1fb22:	08cb      	lsrs	r3, r1, #3
   1fb24:	4203      	tst	r3, r0
   1fb26:	d1e4      	bne.n	1faf2 <__aeabi_dadd+0x54e>
   1fb28:	08d2      	lsrs	r2, r2, #3
   1fb2a:	0749      	lsls	r1, r1, #29
   1fb2c:	4311      	orrs	r1, r2
   1fb2e:	000f      	movs	r7, r1
   1fb30:	001c      	movs	r4, r3
   1fb32:	e7de      	b.n	1faf2 <__aeabi_dadd+0x54e>
   1fb34:	2700      	movs	r7, #0
   1fb36:	2400      	movs	r4, #0
   1fb38:	e5d5      	b.n	1f6e6 <__aeabi_dadd+0x142>
   1fb3a:	2100      	movs	r1, #0
   1fb3c:	e76b      	b.n	1fa16 <__aeabi_dadd+0x472>
   1fb3e:	2500      	movs	r5, #0
   1fb40:	2700      	movs	r7, #0
   1fb42:	e5f3      	b.n	1f72c <__aeabi_dadd+0x188>
   1fb44:	464e      	mov	r6, r9
   1fb46:	0025      	movs	r5, r4
   1fb48:	3e20      	subs	r6, #32
   1fb4a:	40f5      	lsrs	r5, r6
   1fb4c:	464b      	mov	r3, r9
   1fb4e:	002e      	movs	r6, r5
   1fb50:	2b20      	cmp	r3, #32
   1fb52:	d02d      	beq.n	1fbb0 <__aeabi_dadd+0x60c>
   1fb54:	2540      	movs	r5, #64	; 0x40
   1fb56:	1aed      	subs	r5, r5, r3
   1fb58:	40ac      	lsls	r4, r5
   1fb5a:	4327      	orrs	r7, r4
   1fb5c:	1e7c      	subs	r4, r7, #1
   1fb5e:	41a7      	sbcs	r7, r4
   1fb60:	2400      	movs	r4, #0
   1fb62:	4337      	orrs	r7, r6
   1fb64:	e6c9      	b.n	1f8fa <__aeabi_dadd+0x356>
   1fb66:	2480      	movs	r4, #128	; 0x80
   1fb68:	2500      	movs	r5, #0
   1fb6a:	0324      	lsls	r4, r4, #12
   1fb6c:	4e13      	ldr	r6, [pc, #76]	; (1fbbc <__aeabi_dadd+0x618>)
   1fb6e:	2700      	movs	r7, #0
   1fb70:	e5dc      	b.n	1f72c <__aeabi_dadd+0x188>
   1fb72:	4327      	orrs	r7, r4
   1fb74:	1e7c      	subs	r4, r7, #1
   1fb76:	41a7      	sbcs	r7, r4
   1fb78:	2400      	movs	r4, #0
   1fb7a:	e779      	b.n	1fa70 <__aeabi_dadd+0x4cc>
   1fb7c:	000c      	movs	r4, r1
   1fb7e:	0017      	movs	r7, r2
   1fb80:	4e0e      	ldr	r6, [pc, #56]	; (1fbbc <__aeabi_dadd+0x618>)
   1fb82:	e593      	b.n	1f6ac <__aeabi_dadd+0x108>
   1fb84:	000c      	movs	r4, r1
   1fb86:	0017      	movs	r7, r2
   1fb88:	e590      	b.n	1f6ac <__aeabi_dadd+0x108>
   1fb8a:	4656      	mov	r6, sl
   1fb8c:	0023      	movs	r3, r4
   1fb8e:	3e20      	subs	r6, #32
   1fb90:	40f3      	lsrs	r3, r6
   1fb92:	4699      	mov	r9, r3
   1fb94:	4653      	mov	r3, sl
   1fb96:	2b20      	cmp	r3, #32
   1fb98:	d00e      	beq.n	1fbb8 <__aeabi_dadd+0x614>
   1fb9a:	2340      	movs	r3, #64	; 0x40
   1fb9c:	4656      	mov	r6, sl
   1fb9e:	1b9b      	subs	r3, r3, r6
   1fba0:	409c      	lsls	r4, r3
   1fba2:	4327      	orrs	r7, r4
   1fba4:	1e7c      	subs	r4, r7, #1
   1fba6:	41a7      	sbcs	r7, r4
   1fba8:	464b      	mov	r3, r9
   1fbaa:	2400      	movs	r4, #0
   1fbac:	431f      	orrs	r7, r3
   1fbae:	e75f      	b.n	1fa70 <__aeabi_dadd+0x4cc>
   1fbb0:	2400      	movs	r4, #0
   1fbb2:	e7d2      	b.n	1fb5a <__aeabi_dadd+0x5b6>
   1fbb4:	0017      	movs	r7, r2
   1fbb6:	e5b2      	b.n	1f71e <__aeabi_dadd+0x17a>
   1fbb8:	2400      	movs	r4, #0
   1fbba:	e7f2      	b.n	1fba2 <__aeabi_dadd+0x5fe>
   1fbbc:	000007ff 	.word	0x000007ff
   1fbc0:	ff7fffff 	.word	0xff7fffff

0001fbc4 <__aeabi_ddiv>:
   1fbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fbc6:	4657      	mov	r7, sl
   1fbc8:	4645      	mov	r5, r8
   1fbca:	46de      	mov	lr, fp
   1fbcc:	464e      	mov	r6, r9
   1fbce:	b5e0      	push	{r5, r6, r7, lr}
   1fbd0:	004c      	lsls	r4, r1, #1
   1fbd2:	030e      	lsls	r6, r1, #12
   1fbd4:	b087      	sub	sp, #28
   1fbd6:	4683      	mov	fp, r0
   1fbd8:	4692      	mov	sl, r2
   1fbda:	001d      	movs	r5, r3
   1fbdc:	4680      	mov	r8, r0
   1fbde:	0b36      	lsrs	r6, r6, #12
   1fbe0:	0d64      	lsrs	r4, r4, #21
   1fbe2:	0fcf      	lsrs	r7, r1, #31
   1fbe4:	2c00      	cmp	r4, #0
   1fbe6:	d04f      	beq.n	1fc88 <__aeabi_ddiv+0xc4>
   1fbe8:	4b6f      	ldr	r3, [pc, #444]	; (1fda8 <__aeabi_ddiv+0x1e4>)
   1fbea:	429c      	cmp	r4, r3
   1fbec:	d035      	beq.n	1fc5a <__aeabi_ddiv+0x96>
   1fbee:	2380      	movs	r3, #128	; 0x80
   1fbf0:	0f42      	lsrs	r2, r0, #29
   1fbf2:	041b      	lsls	r3, r3, #16
   1fbf4:	00f6      	lsls	r6, r6, #3
   1fbf6:	4313      	orrs	r3, r2
   1fbf8:	4333      	orrs	r3, r6
   1fbfa:	4699      	mov	r9, r3
   1fbfc:	00c3      	lsls	r3, r0, #3
   1fbfe:	4698      	mov	r8, r3
   1fc00:	4b6a      	ldr	r3, [pc, #424]	; (1fdac <__aeabi_ddiv+0x1e8>)
   1fc02:	2600      	movs	r6, #0
   1fc04:	469c      	mov	ip, r3
   1fc06:	2300      	movs	r3, #0
   1fc08:	4464      	add	r4, ip
   1fc0a:	9303      	str	r3, [sp, #12]
   1fc0c:	032b      	lsls	r3, r5, #12
   1fc0e:	0b1b      	lsrs	r3, r3, #12
   1fc10:	469b      	mov	fp, r3
   1fc12:	006b      	lsls	r3, r5, #1
   1fc14:	0fed      	lsrs	r5, r5, #31
   1fc16:	4650      	mov	r0, sl
   1fc18:	0d5b      	lsrs	r3, r3, #21
   1fc1a:	9501      	str	r5, [sp, #4]
   1fc1c:	d05e      	beq.n	1fcdc <__aeabi_ddiv+0x118>
   1fc1e:	4a62      	ldr	r2, [pc, #392]	; (1fda8 <__aeabi_ddiv+0x1e4>)
   1fc20:	4293      	cmp	r3, r2
   1fc22:	d053      	beq.n	1fccc <__aeabi_ddiv+0x108>
   1fc24:	465a      	mov	r2, fp
   1fc26:	00d1      	lsls	r1, r2, #3
   1fc28:	2280      	movs	r2, #128	; 0x80
   1fc2a:	0f40      	lsrs	r0, r0, #29
   1fc2c:	0412      	lsls	r2, r2, #16
   1fc2e:	4302      	orrs	r2, r0
   1fc30:	430a      	orrs	r2, r1
   1fc32:	4693      	mov	fp, r2
   1fc34:	4652      	mov	r2, sl
   1fc36:	00d1      	lsls	r1, r2, #3
   1fc38:	4a5c      	ldr	r2, [pc, #368]	; (1fdac <__aeabi_ddiv+0x1e8>)
   1fc3a:	4694      	mov	ip, r2
   1fc3c:	2200      	movs	r2, #0
   1fc3e:	4463      	add	r3, ip
   1fc40:	0038      	movs	r0, r7
   1fc42:	4068      	eors	r0, r5
   1fc44:	4684      	mov	ip, r0
   1fc46:	9002      	str	r0, [sp, #8]
   1fc48:	1ae4      	subs	r4, r4, r3
   1fc4a:	4316      	orrs	r6, r2
   1fc4c:	2e0f      	cmp	r6, #15
   1fc4e:	d900      	bls.n	1fc52 <__aeabi_ddiv+0x8e>
   1fc50:	e0b4      	b.n	1fdbc <__aeabi_ddiv+0x1f8>
   1fc52:	4b57      	ldr	r3, [pc, #348]	; (1fdb0 <__aeabi_ddiv+0x1ec>)
   1fc54:	00b6      	lsls	r6, r6, #2
   1fc56:	599b      	ldr	r3, [r3, r6]
   1fc58:	469f      	mov	pc, r3
   1fc5a:	0003      	movs	r3, r0
   1fc5c:	4333      	orrs	r3, r6
   1fc5e:	4699      	mov	r9, r3
   1fc60:	d16c      	bne.n	1fd3c <__aeabi_ddiv+0x178>
   1fc62:	2300      	movs	r3, #0
   1fc64:	4698      	mov	r8, r3
   1fc66:	3302      	adds	r3, #2
   1fc68:	2608      	movs	r6, #8
   1fc6a:	9303      	str	r3, [sp, #12]
   1fc6c:	e7ce      	b.n	1fc0c <__aeabi_ddiv+0x48>
   1fc6e:	46cb      	mov	fp, r9
   1fc70:	4641      	mov	r1, r8
   1fc72:	9a03      	ldr	r2, [sp, #12]
   1fc74:	9701      	str	r7, [sp, #4]
   1fc76:	2a02      	cmp	r2, #2
   1fc78:	d165      	bne.n	1fd46 <__aeabi_ddiv+0x182>
   1fc7a:	9b01      	ldr	r3, [sp, #4]
   1fc7c:	4c4a      	ldr	r4, [pc, #296]	; (1fda8 <__aeabi_ddiv+0x1e4>)
   1fc7e:	469c      	mov	ip, r3
   1fc80:	2300      	movs	r3, #0
   1fc82:	2200      	movs	r2, #0
   1fc84:	4698      	mov	r8, r3
   1fc86:	e06b      	b.n	1fd60 <__aeabi_ddiv+0x19c>
   1fc88:	0003      	movs	r3, r0
   1fc8a:	4333      	orrs	r3, r6
   1fc8c:	4699      	mov	r9, r3
   1fc8e:	d04e      	beq.n	1fd2e <__aeabi_ddiv+0x16a>
   1fc90:	2e00      	cmp	r6, #0
   1fc92:	d100      	bne.n	1fc96 <__aeabi_ddiv+0xd2>
   1fc94:	e1bc      	b.n	20010 <__aeabi_ddiv+0x44c>
   1fc96:	0030      	movs	r0, r6
   1fc98:	f001 f8ca 	bl	20e30 <__clzsi2>
   1fc9c:	0003      	movs	r3, r0
   1fc9e:	3b0b      	subs	r3, #11
   1fca0:	2b1c      	cmp	r3, #28
   1fca2:	dd00      	ble.n	1fca6 <__aeabi_ddiv+0xe2>
   1fca4:	e1ac      	b.n	20000 <__aeabi_ddiv+0x43c>
   1fca6:	221d      	movs	r2, #29
   1fca8:	1ad3      	subs	r3, r2, r3
   1fcaa:	465a      	mov	r2, fp
   1fcac:	0001      	movs	r1, r0
   1fcae:	40da      	lsrs	r2, r3
   1fcb0:	3908      	subs	r1, #8
   1fcb2:	408e      	lsls	r6, r1
   1fcb4:	0013      	movs	r3, r2
   1fcb6:	4333      	orrs	r3, r6
   1fcb8:	4699      	mov	r9, r3
   1fcba:	465b      	mov	r3, fp
   1fcbc:	408b      	lsls	r3, r1
   1fcbe:	4698      	mov	r8, r3
   1fcc0:	2300      	movs	r3, #0
   1fcc2:	4c3c      	ldr	r4, [pc, #240]	; (1fdb4 <__aeabi_ddiv+0x1f0>)
   1fcc4:	2600      	movs	r6, #0
   1fcc6:	1a24      	subs	r4, r4, r0
   1fcc8:	9303      	str	r3, [sp, #12]
   1fcca:	e79f      	b.n	1fc0c <__aeabi_ddiv+0x48>
   1fccc:	4651      	mov	r1, sl
   1fcce:	465a      	mov	r2, fp
   1fcd0:	4311      	orrs	r1, r2
   1fcd2:	d129      	bne.n	1fd28 <__aeabi_ddiv+0x164>
   1fcd4:	2200      	movs	r2, #0
   1fcd6:	4693      	mov	fp, r2
   1fcd8:	3202      	adds	r2, #2
   1fcda:	e7b1      	b.n	1fc40 <__aeabi_ddiv+0x7c>
   1fcdc:	4659      	mov	r1, fp
   1fcde:	4301      	orrs	r1, r0
   1fce0:	d01e      	beq.n	1fd20 <__aeabi_ddiv+0x15c>
   1fce2:	465b      	mov	r3, fp
   1fce4:	2b00      	cmp	r3, #0
   1fce6:	d100      	bne.n	1fcea <__aeabi_ddiv+0x126>
   1fce8:	e19e      	b.n	20028 <__aeabi_ddiv+0x464>
   1fcea:	4658      	mov	r0, fp
   1fcec:	f001 f8a0 	bl	20e30 <__clzsi2>
   1fcf0:	0003      	movs	r3, r0
   1fcf2:	3b0b      	subs	r3, #11
   1fcf4:	2b1c      	cmp	r3, #28
   1fcf6:	dd00      	ble.n	1fcfa <__aeabi_ddiv+0x136>
   1fcf8:	e18f      	b.n	2001a <__aeabi_ddiv+0x456>
   1fcfa:	0002      	movs	r2, r0
   1fcfc:	4659      	mov	r1, fp
   1fcfe:	3a08      	subs	r2, #8
   1fd00:	4091      	lsls	r1, r2
   1fd02:	468b      	mov	fp, r1
   1fd04:	211d      	movs	r1, #29
   1fd06:	1acb      	subs	r3, r1, r3
   1fd08:	4651      	mov	r1, sl
   1fd0a:	40d9      	lsrs	r1, r3
   1fd0c:	000b      	movs	r3, r1
   1fd0e:	4659      	mov	r1, fp
   1fd10:	430b      	orrs	r3, r1
   1fd12:	4651      	mov	r1, sl
   1fd14:	469b      	mov	fp, r3
   1fd16:	4091      	lsls	r1, r2
   1fd18:	4b26      	ldr	r3, [pc, #152]	; (1fdb4 <__aeabi_ddiv+0x1f0>)
   1fd1a:	2200      	movs	r2, #0
   1fd1c:	1a1b      	subs	r3, r3, r0
   1fd1e:	e78f      	b.n	1fc40 <__aeabi_ddiv+0x7c>
   1fd20:	2300      	movs	r3, #0
   1fd22:	2201      	movs	r2, #1
   1fd24:	469b      	mov	fp, r3
   1fd26:	e78b      	b.n	1fc40 <__aeabi_ddiv+0x7c>
   1fd28:	4651      	mov	r1, sl
   1fd2a:	2203      	movs	r2, #3
   1fd2c:	e788      	b.n	1fc40 <__aeabi_ddiv+0x7c>
   1fd2e:	2300      	movs	r3, #0
   1fd30:	4698      	mov	r8, r3
   1fd32:	3301      	adds	r3, #1
   1fd34:	2604      	movs	r6, #4
   1fd36:	2400      	movs	r4, #0
   1fd38:	9303      	str	r3, [sp, #12]
   1fd3a:	e767      	b.n	1fc0c <__aeabi_ddiv+0x48>
   1fd3c:	2303      	movs	r3, #3
   1fd3e:	46b1      	mov	r9, r6
   1fd40:	9303      	str	r3, [sp, #12]
   1fd42:	260c      	movs	r6, #12
   1fd44:	e762      	b.n	1fc0c <__aeabi_ddiv+0x48>
   1fd46:	2a03      	cmp	r2, #3
   1fd48:	d100      	bne.n	1fd4c <__aeabi_ddiv+0x188>
   1fd4a:	e25c      	b.n	20206 <__aeabi_ddiv+0x642>
   1fd4c:	9b01      	ldr	r3, [sp, #4]
   1fd4e:	2a01      	cmp	r2, #1
   1fd50:	d000      	beq.n	1fd54 <__aeabi_ddiv+0x190>
   1fd52:	e1e4      	b.n	2011e <__aeabi_ddiv+0x55a>
   1fd54:	4013      	ands	r3, r2
   1fd56:	469c      	mov	ip, r3
   1fd58:	2300      	movs	r3, #0
   1fd5a:	2400      	movs	r4, #0
   1fd5c:	2200      	movs	r2, #0
   1fd5e:	4698      	mov	r8, r3
   1fd60:	2100      	movs	r1, #0
   1fd62:	0312      	lsls	r2, r2, #12
   1fd64:	0b13      	lsrs	r3, r2, #12
   1fd66:	0d0a      	lsrs	r2, r1, #20
   1fd68:	0512      	lsls	r2, r2, #20
   1fd6a:	431a      	orrs	r2, r3
   1fd6c:	0523      	lsls	r3, r4, #20
   1fd6e:	4c12      	ldr	r4, [pc, #72]	; (1fdb8 <__aeabi_ddiv+0x1f4>)
   1fd70:	4640      	mov	r0, r8
   1fd72:	4022      	ands	r2, r4
   1fd74:	4313      	orrs	r3, r2
   1fd76:	4662      	mov	r2, ip
   1fd78:	005b      	lsls	r3, r3, #1
   1fd7a:	07d2      	lsls	r2, r2, #31
   1fd7c:	085b      	lsrs	r3, r3, #1
   1fd7e:	4313      	orrs	r3, r2
   1fd80:	0019      	movs	r1, r3
   1fd82:	b007      	add	sp, #28
   1fd84:	bc3c      	pop	{r2, r3, r4, r5}
   1fd86:	4690      	mov	r8, r2
   1fd88:	4699      	mov	r9, r3
   1fd8a:	46a2      	mov	sl, r4
   1fd8c:	46ab      	mov	fp, r5
   1fd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fd90:	2300      	movs	r3, #0
   1fd92:	2280      	movs	r2, #128	; 0x80
   1fd94:	469c      	mov	ip, r3
   1fd96:	0312      	lsls	r2, r2, #12
   1fd98:	4698      	mov	r8, r3
   1fd9a:	4c03      	ldr	r4, [pc, #12]	; (1fda8 <__aeabi_ddiv+0x1e4>)
   1fd9c:	e7e0      	b.n	1fd60 <__aeabi_ddiv+0x19c>
   1fd9e:	2300      	movs	r3, #0
   1fda0:	4c01      	ldr	r4, [pc, #4]	; (1fda8 <__aeabi_ddiv+0x1e4>)
   1fda2:	2200      	movs	r2, #0
   1fda4:	4698      	mov	r8, r3
   1fda6:	e7db      	b.n	1fd60 <__aeabi_ddiv+0x19c>
   1fda8:	000007ff 	.word	0x000007ff
   1fdac:	fffffc01 	.word	0xfffffc01
   1fdb0:	0002625c 	.word	0x0002625c
   1fdb4:	fffffc0d 	.word	0xfffffc0d
   1fdb8:	800fffff 	.word	0x800fffff
   1fdbc:	45d9      	cmp	r9, fp
   1fdbe:	d900      	bls.n	1fdc2 <__aeabi_ddiv+0x1fe>
   1fdc0:	e139      	b.n	20036 <__aeabi_ddiv+0x472>
   1fdc2:	d100      	bne.n	1fdc6 <__aeabi_ddiv+0x202>
   1fdc4:	e134      	b.n	20030 <__aeabi_ddiv+0x46c>
   1fdc6:	2300      	movs	r3, #0
   1fdc8:	4646      	mov	r6, r8
   1fdca:	464d      	mov	r5, r9
   1fdcc:	469a      	mov	sl, r3
   1fdce:	3c01      	subs	r4, #1
   1fdd0:	465b      	mov	r3, fp
   1fdd2:	0e0a      	lsrs	r2, r1, #24
   1fdd4:	021b      	lsls	r3, r3, #8
   1fdd6:	431a      	orrs	r2, r3
   1fdd8:	020b      	lsls	r3, r1, #8
   1fdda:	0c17      	lsrs	r7, r2, #16
   1fddc:	9303      	str	r3, [sp, #12]
   1fdde:	0413      	lsls	r3, r2, #16
   1fde0:	0c1b      	lsrs	r3, r3, #16
   1fde2:	0039      	movs	r1, r7
   1fde4:	0028      	movs	r0, r5
   1fde6:	4690      	mov	r8, r2
   1fde8:	9301      	str	r3, [sp, #4]
   1fdea:	f7ff f8ab 	bl	1ef44 <__udivsi3>
   1fdee:	0002      	movs	r2, r0
   1fdf0:	9b01      	ldr	r3, [sp, #4]
   1fdf2:	4683      	mov	fp, r0
   1fdf4:	435a      	muls	r2, r3
   1fdf6:	0028      	movs	r0, r5
   1fdf8:	0039      	movs	r1, r7
   1fdfa:	4691      	mov	r9, r2
   1fdfc:	f7ff f928 	bl	1f050 <__aeabi_uidivmod>
   1fe00:	0c35      	lsrs	r5, r6, #16
   1fe02:	0409      	lsls	r1, r1, #16
   1fe04:	430d      	orrs	r5, r1
   1fe06:	45a9      	cmp	r9, r5
   1fe08:	d90d      	bls.n	1fe26 <__aeabi_ddiv+0x262>
   1fe0a:	465b      	mov	r3, fp
   1fe0c:	4445      	add	r5, r8
   1fe0e:	3b01      	subs	r3, #1
   1fe10:	45a8      	cmp	r8, r5
   1fe12:	d900      	bls.n	1fe16 <__aeabi_ddiv+0x252>
   1fe14:	e13a      	b.n	2008c <__aeabi_ddiv+0x4c8>
   1fe16:	45a9      	cmp	r9, r5
   1fe18:	d800      	bhi.n	1fe1c <__aeabi_ddiv+0x258>
   1fe1a:	e137      	b.n	2008c <__aeabi_ddiv+0x4c8>
   1fe1c:	2302      	movs	r3, #2
   1fe1e:	425b      	negs	r3, r3
   1fe20:	469c      	mov	ip, r3
   1fe22:	4445      	add	r5, r8
   1fe24:	44e3      	add	fp, ip
   1fe26:	464b      	mov	r3, r9
   1fe28:	1aeb      	subs	r3, r5, r3
   1fe2a:	0039      	movs	r1, r7
   1fe2c:	0018      	movs	r0, r3
   1fe2e:	9304      	str	r3, [sp, #16]
   1fe30:	f7ff f888 	bl	1ef44 <__udivsi3>
   1fe34:	9b01      	ldr	r3, [sp, #4]
   1fe36:	0005      	movs	r5, r0
   1fe38:	4343      	muls	r3, r0
   1fe3a:	0039      	movs	r1, r7
   1fe3c:	9804      	ldr	r0, [sp, #16]
   1fe3e:	4699      	mov	r9, r3
   1fe40:	f7ff f906 	bl	1f050 <__aeabi_uidivmod>
   1fe44:	0433      	lsls	r3, r6, #16
   1fe46:	0409      	lsls	r1, r1, #16
   1fe48:	0c1b      	lsrs	r3, r3, #16
   1fe4a:	430b      	orrs	r3, r1
   1fe4c:	4599      	cmp	r9, r3
   1fe4e:	d909      	bls.n	1fe64 <__aeabi_ddiv+0x2a0>
   1fe50:	4443      	add	r3, r8
   1fe52:	1e6a      	subs	r2, r5, #1
   1fe54:	4598      	cmp	r8, r3
   1fe56:	d900      	bls.n	1fe5a <__aeabi_ddiv+0x296>
   1fe58:	e11a      	b.n	20090 <__aeabi_ddiv+0x4cc>
   1fe5a:	4599      	cmp	r9, r3
   1fe5c:	d800      	bhi.n	1fe60 <__aeabi_ddiv+0x29c>
   1fe5e:	e117      	b.n	20090 <__aeabi_ddiv+0x4cc>
   1fe60:	3d02      	subs	r5, #2
   1fe62:	4443      	add	r3, r8
   1fe64:	464a      	mov	r2, r9
   1fe66:	1a9b      	subs	r3, r3, r2
   1fe68:	465a      	mov	r2, fp
   1fe6a:	0412      	lsls	r2, r2, #16
   1fe6c:	432a      	orrs	r2, r5
   1fe6e:	9903      	ldr	r1, [sp, #12]
   1fe70:	4693      	mov	fp, r2
   1fe72:	0c10      	lsrs	r0, r2, #16
   1fe74:	0c0a      	lsrs	r2, r1, #16
   1fe76:	4691      	mov	r9, r2
   1fe78:	0409      	lsls	r1, r1, #16
   1fe7a:	465a      	mov	r2, fp
   1fe7c:	0c09      	lsrs	r1, r1, #16
   1fe7e:	464e      	mov	r6, r9
   1fe80:	000d      	movs	r5, r1
   1fe82:	0412      	lsls	r2, r2, #16
   1fe84:	0c12      	lsrs	r2, r2, #16
   1fe86:	4345      	muls	r5, r0
   1fe88:	9105      	str	r1, [sp, #20]
   1fe8a:	4351      	muls	r1, r2
   1fe8c:	4372      	muls	r2, r6
   1fe8e:	4370      	muls	r0, r6
   1fe90:	1952      	adds	r2, r2, r5
   1fe92:	0c0e      	lsrs	r6, r1, #16
   1fe94:	18b2      	adds	r2, r6, r2
   1fe96:	4295      	cmp	r5, r2
   1fe98:	d903      	bls.n	1fea2 <__aeabi_ddiv+0x2de>
   1fe9a:	2580      	movs	r5, #128	; 0x80
   1fe9c:	026d      	lsls	r5, r5, #9
   1fe9e:	46ac      	mov	ip, r5
   1fea0:	4460      	add	r0, ip
   1fea2:	0c15      	lsrs	r5, r2, #16
   1fea4:	0409      	lsls	r1, r1, #16
   1fea6:	0412      	lsls	r2, r2, #16
   1fea8:	0c09      	lsrs	r1, r1, #16
   1feaa:	1828      	adds	r0, r5, r0
   1feac:	1852      	adds	r2, r2, r1
   1feae:	4283      	cmp	r3, r0
   1feb0:	d200      	bcs.n	1feb4 <__aeabi_ddiv+0x2f0>
   1feb2:	e0ce      	b.n	20052 <__aeabi_ddiv+0x48e>
   1feb4:	d100      	bne.n	1feb8 <__aeabi_ddiv+0x2f4>
   1feb6:	e0c8      	b.n	2004a <__aeabi_ddiv+0x486>
   1feb8:	1a1d      	subs	r5, r3, r0
   1feba:	4653      	mov	r3, sl
   1febc:	1a9e      	subs	r6, r3, r2
   1febe:	45b2      	cmp	sl, r6
   1fec0:	4192      	sbcs	r2, r2
   1fec2:	4252      	negs	r2, r2
   1fec4:	1aab      	subs	r3, r5, r2
   1fec6:	469a      	mov	sl, r3
   1fec8:	4598      	cmp	r8, r3
   1feca:	d100      	bne.n	1fece <__aeabi_ddiv+0x30a>
   1fecc:	e117      	b.n	200fe <__aeabi_ddiv+0x53a>
   1fece:	0039      	movs	r1, r7
   1fed0:	0018      	movs	r0, r3
   1fed2:	f7ff f837 	bl	1ef44 <__udivsi3>
   1fed6:	9b01      	ldr	r3, [sp, #4]
   1fed8:	0005      	movs	r5, r0
   1feda:	4343      	muls	r3, r0
   1fedc:	0039      	movs	r1, r7
   1fede:	4650      	mov	r0, sl
   1fee0:	9304      	str	r3, [sp, #16]
   1fee2:	f7ff f8b5 	bl	1f050 <__aeabi_uidivmod>
   1fee6:	9804      	ldr	r0, [sp, #16]
   1fee8:	040b      	lsls	r3, r1, #16
   1feea:	0c31      	lsrs	r1, r6, #16
   1feec:	4319      	orrs	r1, r3
   1feee:	4288      	cmp	r0, r1
   1fef0:	d909      	bls.n	1ff06 <__aeabi_ddiv+0x342>
   1fef2:	4441      	add	r1, r8
   1fef4:	1e6b      	subs	r3, r5, #1
   1fef6:	4588      	cmp	r8, r1
   1fef8:	d900      	bls.n	1fefc <__aeabi_ddiv+0x338>
   1fefa:	e107      	b.n	2010c <__aeabi_ddiv+0x548>
   1fefc:	4288      	cmp	r0, r1
   1fefe:	d800      	bhi.n	1ff02 <__aeabi_ddiv+0x33e>
   1ff00:	e104      	b.n	2010c <__aeabi_ddiv+0x548>
   1ff02:	3d02      	subs	r5, #2
   1ff04:	4441      	add	r1, r8
   1ff06:	9b04      	ldr	r3, [sp, #16]
   1ff08:	1acb      	subs	r3, r1, r3
   1ff0a:	0018      	movs	r0, r3
   1ff0c:	0039      	movs	r1, r7
   1ff0e:	9304      	str	r3, [sp, #16]
   1ff10:	f7ff f818 	bl	1ef44 <__udivsi3>
   1ff14:	9b01      	ldr	r3, [sp, #4]
   1ff16:	4682      	mov	sl, r0
   1ff18:	4343      	muls	r3, r0
   1ff1a:	0039      	movs	r1, r7
   1ff1c:	9804      	ldr	r0, [sp, #16]
   1ff1e:	9301      	str	r3, [sp, #4]
   1ff20:	f7ff f896 	bl	1f050 <__aeabi_uidivmod>
   1ff24:	9801      	ldr	r0, [sp, #4]
   1ff26:	040b      	lsls	r3, r1, #16
   1ff28:	0431      	lsls	r1, r6, #16
   1ff2a:	0c09      	lsrs	r1, r1, #16
   1ff2c:	4319      	orrs	r1, r3
   1ff2e:	4288      	cmp	r0, r1
   1ff30:	d90d      	bls.n	1ff4e <__aeabi_ddiv+0x38a>
   1ff32:	4653      	mov	r3, sl
   1ff34:	4441      	add	r1, r8
   1ff36:	3b01      	subs	r3, #1
   1ff38:	4588      	cmp	r8, r1
   1ff3a:	d900      	bls.n	1ff3e <__aeabi_ddiv+0x37a>
   1ff3c:	e0e8      	b.n	20110 <__aeabi_ddiv+0x54c>
   1ff3e:	4288      	cmp	r0, r1
   1ff40:	d800      	bhi.n	1ff44 <__aeabi_ddiv+0x380>
   1ff42:	e0e5      	b.n	20110 <__aeabi_ddiv+0x54c>
   1ff44:	2302      	movs	r3, #2
   1ff46:	425b      	negs	r3, r3
   1ff48:	469c      	mov	ip, r3
   1ff4a:	4441      	add	r1, r8
   1ff4c:	44e2      	add	sl, ip
   1ff4e:	9b01      	ldr	r3, [sp, #4]
   1ff50:	042d      	lsls	r5, r5, #16
   1ff52:	1ace      	subs	r6, r1, r3
   1ff54:	4651      	mov	r1, sl
   1ff56:	4329      	orrs	r1, r5
   1ff58:	9d05      	ldr	r5, [sp, #20]
   1ff5a:	464f      	mov	r7, r9
   1ff5c:	002a      	movs	r2, r5
   1ff5e:	040b      	lsls	r3, r1, #16
   1ff60:	0c08      	lsrs	r0, r1, #16
   1ff62:	0c1b      	lsrs	r3, r3, #16
   1ff64:	435a      	muls	r2, r3
   1ff66:	4345      	muls	r5, r0
   1ff68:	437b      	muls	r3, r7
   1ff6a:	4378      	muls	r0, r7
   1ff6c:	195b      	adds	r3, r3, r5
   1ff6e:	0c17      	lsrs	r7, r2, #16
   1ff70:	18fb      	adds	r3, r7, r3
   1ff72:	429d      	cmp	r5, r3
   1ff74:	d903      	bls.n	1ff7e <__aeabi_ddiv+0x3ba>
   1ff76:	2580      	movs	r5, #128	; 0x80
   1ff78:	026d      	lsls	r5, r5, #9
   1ff7a:	46ac      	mov	ip, r5
   1ff7c:	4460      	add	r0, ip
   1ff7e:	0c1d      	lsrs	r5, r3, #16
   1ff80:	0412      	lsls	r2, r2, #16
   1ff82:	041b      	lsls	r3, r3, #16
   1ff84:	0c12      	lsrs	r2, r2, #16
   1ff86:	1828      	adds	r0, r5, r0
   1ff88:	189b      	adds	r3, r3, r2
   1ff8a:	4286      	cmp	r6, r0
   1ff8c:	d200      	bcs.n	1ff90 <__aeabi_ddiv+0x3cc>
   1ff8e:	e093      	b.n	200b8 <__aeabi_ddiv+0x4f4>
   1ff90:	d100      	bne.n	1ff94 <__aeabi_ddiv+0x3d0>
   1ff92:	e08e      	b.n	200b2 <__aeabi_ddiv+0x4ee>
   1ff94:	2301      	movs	r3, #1
   1ff96:	4319      	orrs	r1, r3
   1ff98:	4ba0      	ldr	r3, [pc, #640]	; (2021c <__aeabi_ddiv+0x658>)
   1ff9a:	18e3      	adds	r3, r4, r3
   1ff9c:	2b00      	cmp	r3, #0
   1ff9e:	dc00      	bgt.n	1ffa2 <__aeabi_ddiv+0x3de>
   1ffa0:	e099      	b.n	200d6 <__aeabi_ddiv+0x512>
   1ffa2:	074a      	lsls	r2, r1, #29
   1ffa4:	d000      	beq.n	1ffa8 <__aeabi_ddiv+0x3e4>
   1ffa6:	e09e      	b.n	200e6 <__aeabi_ddiv+0x522>
   1ffa8:	465a      	mov	r2, fp
   1ffaa:	01d2      	lsls	r2, r2, #7
   1ffac:	d506      	bpl.n	1ffbc <__aeabi_ddiv+0x3f8>
   1ffae:	465a      	mov	r2, fp
   1ffb0:	4b9b      	ldr	r3, [pc, #620]	; (20220 <__aeabi_ddiv+0x65c>)
   1ffb2:	401a      	ands	r2, r3
   1ffb4:	2380      	movs	r3, #128	; 0x80
   1ffb6:	4693      	mov	fp, r2
   1ffb8:	00db      	lsls	r3, r3, #3
   1ffba:	18e3      	adds	r3, r4, r3
   1ffbc:	4a99      	ldr	r2, [pc, #612]	; (20224 <__aeabi_ddiv+0x660>)
   1ffbe:	4293      	cmp	r3, r2
   1ffc0:	dd68      	ble.n	20094 <__aeabi_ddiv+0x4d0>
   1ffc2:	2301      	movs	r3, #1
   1ffc4:	9a02      	ldr	r2, [sp, #8]
   1ffc6:	4c98      	ldr	r4, [pc, #608]	; (20228 <__aeabi_ddiv+0x664>)
   1ffc8:	401a      	ands	r2, r3
   1ffca:	2300      	movs	r3, #0
   1ffcc:	4694      	mov	ip, r2
   1ffce:	4698      	mov	r8, r3
   1ffd0:	2200      	movs	r2, #0
   1ffd2:	e6c5      	b.n	1fd60 <__aeabi_ddiv+0x19c>
   1ffd4:	2280      	movs	r2, #128	; 0x80
   1ffd6:	464b      	mov	r3, r9
   1ffd8:	0312      	lsls	r2, r2, #12
   1ffda:	4213      	tst	r3, r2
   1ffdc:	d00a      	beq.n	1fff4 <__aeabi_ddiv+0x430>
   1ffde:	465b      	mov	r3, fp
   1ffe0:	4213      	tst	r3, r2
   1ffe2:	d106      	bne.n	1fff2 <__aeabi_ddiv+0x42e>
   1ffe4:	431a      	orrs	r2, r3
   1ffe6:	0312      	lsls	r2, r2, #12
   1ffe8:	0b12      	lsrs	r2, r2, #12
   1ffea:	46ac      	mov	ip, r5
   1ffec:	4688      	mov	r8, r1
   1ffee:	4c8e      	ldr	r4, [pc, #568]	; (20228 <__aeabi_ddiv+0x664>)
   1fff0:	e6b6      	b.n	1fd60 <__aeabi_ddiv+0x19c>
   1fff2:	464b      	mov	r3, r9
   1fff4:	431a      	orrs	r2, r3
   1fff6:	0312      	lsls	r2, r2, #12
   1fff8:	0b12      	lsrs	r2, r2, #12
   1fffa:	46bc      	mov	ip, r7
   1fffc:	4c8a      	ldr	r4, [pc, #552]	; (20228 <__aeabi_ddiv+0x664>)
   1fffe:	e6af      	b.n	1fd60 <__aeabi_ddiv+0x19c>
   20000:	0003      	movs	r3, r0
   20002:	465a      	mov	r2, fp
   20004:	3b28      	subs	r3, #40	; 0x28
   20006:	409a      	lsls	r2, r3
   20008:	2300      	movs	r3, #0
   2000a:	4691      	mov	r9, r2
   2000c:	4698      	mov	r8, r3
   2000e:	e657      	b.n	1fcc0 <__aeabi_ddiv+0xfc>
   20010:	4658      	mov	r0, fp
   20012:	f000 ff0d 	bl	20e30 <__clzsi2>
   20016:	3020      	adds	r0, #32
   20018:	e640      	b.n	1fc9c <__aeabi_ddiv+0xd8>
   2001a:	0003      	movs	r3, r0
   2001c:	4652      	mov	r2, sl
   2001e:	3b28      	subs	r3, #40	; 0x28
   20020:	409a      	lsls	r2, r3
   20022:	2100      	movs	r1, #0
   20024:	4693      	mov	fp, r2
   20026:	e677      	b.n	1fd18 <__aeabi_ddiv+0x154>
   20028:	f000 ff02 	bl	20e30 <__clzsi2>
   2002c:	3020      	adds	r0, #32
   2002e:	e65f      	b.n	1fcf0 <__aeabi_ddiv+0x12c>
   20030:	4588      	cmp	r8, r1
   20032:	d200      	bcs.n	20036 <__aeabi_ddiv+0x472>
   20034:	e6c7      	b.n	1fdc6 <__aeabi_ddiv+0x202>
   20036:	464b      	mov	r3, r9
   20038:	07de      	lsls	r6, r3, #31
   2003a:	085d      	lsrs	r5, r3, #1
   2003c:	4643      	mov	r3, r8
   2003e:	085b      	lsrs	r3, r3, #1
   20040:	431e      	orrs	r6, r3
   20042:	4643      	mov	r3, r8
   20044:	07db      	lsls	r3, r3, #31
   20046:	469a      	mov	sl, r3
   20048:	e6c2      	b.n	1fdd0 <__aeabi_ddiv+0x20c>
   2004a:	2500      	movs	r5, #0
   2004c:	4592      	cmp	sl, r2
   2004e:	d300      	bcc.n	20052 <__aeabi_ddiv+0x48e>
   20050:	e733      	b.n	1feba <__aeabi_ddiv+0x2f6>
   20052:	9e03      	ldr	r6, [sp, #12]
   20054:	4659      	mov	r1, fp
   20056:	46b4      	mov	ip, r6
   20058:	44e2      	add	sl, ip
   2005a:	45b2      	cmp	sl, r6
   2005c:	41ad      	sbcs	r5, r5
   2005e:	426d      	negs	r5, r5
   20060:	4445      	add	r5, r8
   20062:	18eb      	adds	r3, r5, r3
   20064:	3901      	subs	r1, #1
   20066:	4598      	cmp	r8, r3
   20068:	d207      	bcs.n	2007a <__aeabi_ddiv+0x4b6>
   2006a:	4298      	cmp	r0, r3
   2006c:	d900      	bls.n	20070 <__aeabi_ddiv+0x4ac>
   2006e:	e07f      	b.n	20170 <__aeabi_ddiv+0x5ac>
   20070:	d100      	bne.n	20074 <__aeabi_ddiv+0x4b0>
   20072:	e0bc      	b.n	201ee <__aeabi_ddiv+0x62a>
   20074:	1a1d      	subs	r5, r3, r0
   20076:	468b      	mov	fp, r1
   20078:	e71f      	b.n	1feba <__aeabi_ddiv+0x2f6>
   2007a:	4598      	cmp	r8, r3
   2007c:	d1fa      	bne.n	20074 <__aeabi_ddiv+0x4b0>
   2007e:	9d03      	ldr	r5, [sp, #12]
   20080:	4555      	cmp	r5, sl
   20082:	d9f2      	bls.n	2006a <__aeabi_ddiv+0x4a6>
   20084:	4643      	mov	r3, r8
   20086:	468b      	mov	fp, r1
   20088:	1a1d      	subs	r5, r3, r0
   2008a:	e716      	b.n	1feba <__aeabi_ddiv+0x2f6>
   2008c:	469b      	mov	fp, r3
   2008e:	e6ca      	b.n	1fe26 <__aeabi_ddiv+0x262>
   20090:	0015      	movs	r5, r2
   20092:	e6e7      	b.n	1fe64 <__aeabi_ddiv+0x2a0>
   20094:	465a      	mov	r2, fp
   20096:	08c9      	lsrs	r1, r1, #3
   20098:	0752      	lsls	r2, r2, #29
   2009a:	430a      	orrs	r2, r1
   2009c:	055b      	lsls	r3, r3, #21
   2009e:	4690      	mov	r8, r2
   200a0:	0d5c      	lsrs	r4, r3, #21
   200a2:	465a      	mov	r2, fp
   200a4:	2301      	movs	r3, #1
   200a6:	9902      	ldr	r1, [sp, #8]
   200a8:	0252      	lsls	r2, r2, #9
   200aa:	4019      	ands	r1, r3
   200ac:	0b12      	lsrs	r2, r2, #12
   200ae:	468c      	mov	ip, r1
   200b0:	e656      	b.n	1fd60 <__aeabi_ddiv+0x19c>
   200b2:	2b00      	cmp	r3, #0
   200b4:	d100      	bne.n	200b8 <__aeabi_ddiv+0x4f4>
   200b6:	e76f      	b.n	1ff98 <__aeabi_ddiv+0x3d4>
   200b8:	4446      	add	r6, r8
   200ba:	1e4a      	subs	r2, r1, #1
   200bc:	45b0      	cmp	r8, r6
   200be:	d929      	bls.n	20114 <__aeabi_ddiv+0x550>
   200c0:	0011      	movs	r1, r2
   200c2:	4286      	cmp	r6, r0
   200c4:	d000      	beq.n	200c8 <__aeabi_ddiv+0x504>
   200c6:	e765      	b.n	1ff94 <__aeabi_ddiv+0x3d0>
   200c8:	9a03      	ldr	r2, [sp, #12]
   200ca:	4293      	cmp	r3, r2
   200cc:	d000      	beq.n	200d0 <__aeabi_ddiv+0x50c>
   200ce:	e761      	b.n	1ff94 <__aeabi_ddiv+0x3d0>
   200d0:	e762      	b.n	1ff98 <__aeabi_ddiv+0x3d4>
   200d2:	2101      	movs	r1, #1
   200d4:	4249      	negs	r1, r1
   200d6:	2001      	movs	r0, #1
   200d8:	1ac2      	subs	r2, r0, r3
   200da:	2a38      	cmp	r2, #56	; 0x38
   200dc:	dd21      	ble.n	20122 <__aeabi_ddiv+0x55e>
   200de:	9b02      	ldr	r3, [sp, #8]
   200e0:	4003      	ands	r3, r0
   200e2:	469c      	mov	ip, r3
   200e4:	e638      	b.n	1fd58 <__aeabi_ddiv+0x194>
   200e6:	220f      	movs	r2, #15
   200e8:	400a      	ands	r2, r1
   200ea:	2a04      	cmp	r2, #4
   200ec:	d100      	bne.n	200f0 <__aeabi_ddiv+0x52c>
   200ee:	e75b      	b.n	1ffa8 <__aeabi_ddiv+0x3e4>
   200f0:	000a      	movs	r2, r1
   200f2:	1d11      	adds	r1, r2, #4
   200f4:	4291      	cmp	r1, r2
   200f6:	4192      	sbcs	r2, r2
   200f8:	4252      	negs	r2, r2
   200fa:	4493      	add	fp, r2
   200fc:	e754      	b.n	1ffa8 <__aeabi_ddiv+0x3e4>
   200fe:	4b47      	ldr	r3, [pc, #284]	; (2021c <__aeabi_ddiv+0x658>)
   20100:	18e3      	adds	r3, r4, r3
   20102:	2b00      	cmp	r3, #0
   20104:	dde5      	ble.n	200d2 <__aeabi_ddiv+0x50e>
   20106:	2201      	movs	r2, #1
   20108:	4252      	negs	r2, r2
   2010a:	e7f2      	b.n	200f2 <__aeabi_ddiv+0x52e>
   2010c:	001d      	movs	r5, r3
   2010e:	e6fa      	b.n	1ff06 <__aeabi_ddiv+0x342>
   20110:	469a      	mov	sl, r3
   20112:	e71c      	b.n	1ff4e <__aeabi_ddiv+0x38a>
   20114:	42b0      	cmp	r0, r6
   20116:	d839      	bhi.n	2018c <__aeabi_ddiv+0x5c8>
   20118:	d06e      	beq.n	201f8 <__aeabi_ddiv+0x634>
   2011a:	0011      	movs	r1, r2
   2011c:	e73a      	b.n	1ff94 <__aeabi_ddiv+0x3d0>
   2011e:	9302      	str	r3, [sp, #8]
   20120:	e73a      	b.n	1ff98 <__aeabi_ddiv+0x3d4>
   20122:	2a1f      	cmp	r2, #31
   20124:	dc3c      	bgt.n	201a0 <__aeabi_ddiv+0x5dc>
   20126:	2320      	movs	r3, #32
   20128:	1a9b      	subs	r3, r3, r2
   2012a:	000c      	movs	r4, r1
   2012c:	4658      	mov	r0, fp
   2012e:	4099      	lsls	r1, r3
   20130:	4098      	lsls	r0, r3
   20132:	1e4b      	subs	r3, r1, #1
   20134:	4199      	sbcs	r1, r3
   20136:	465b      	mov	r3, fp
   20138:	40d4      	lsrs	r4, r2
   2013a:	40d3      	lsrs	r3, r2
   2013c:	4320      	orrs	r0, r4
   2013e:	4308      	orrs	r0, r1
   20140:	001a      	movs	r2, r3
   20142:	0743      	lsls	r3, r0, #29
   20144:	d009      	beq.n	2015a <__aeabi_ddiv+0x596>
   20146:	230f      	movs	r3, #15
   20148:	4003      	ands	r3, r0
   2014a:	2b04      	cmp	r3, #4
   2014c:	d005      	beq.n	2015a <__aeabi_ddiv+0x596>
   2014e:	0001      	movs	r1, r0
   20150:	1d08      	adds	r0, r1, #4
   20152:	4288      	cmp	r0, r1
   20154:	419b      	sbcs	r3, r3
   20156:	425b      	negs	r3, r3
   20158:	18d2      	adds	r2, r2, r3
   2015a:	0213      	lsls	r3, r2, #8
   2015c:	d53a      	bpl.n	201d4 <__aeabi_ddiv+0x610>
   2015e:	2301      	movs	r3, #1
   20160:	9a02      	ldr	r2, [sp, #8]
   20162:	2401      	movs	r4, #1
   20164:	401a      	ands	r2, r3
   20166:	2300      	movs	r3, #0
   20168:	4694      	mov	ip, r2
   2016a:	4698      	mov	r8, r3
   2016c:	2200      	movs	r2, #0
   2016e:	e5f7      	b.n	1fd60 <__aeabi_ddiv+0x19c>
   20170:	2102      	movs	r1, #2
   20172:	4249      	negs	r1, r1
   20174:	468c      	mov	ip, r1
   20176:	9d03      	ldr	r5, [sp, #12]
   20178:	44e3      	add	fp, ip
   2017a:	46ac      	mov	ip, r5
   2017c:	44e2      	add	sl, ip
   2017e:	45aa      	cmp	sl, r5
   20180:	41ad      	sbcs	r5, r5
   20182:	426d      	negs	r5, r5
   20184:	4445      	add	r5, r8
   20186:	18ed      	adds	r5, r5, r3
   20188:	1a2d      	subs	r5, r5, r0
   2018a:	e696      	b.n	1feba <__aeabi_ddiv+0x2f6>
   2018c:	1e8a      	subs	r2, r1, #2
   2018e:	9903      	ldr	r1, [sp, #12]
   20190:	004d      	lsls	r5, r1, #1
   20192:	428d      	cmp	r5, r1
   20194:	4189      	sbcs	r1, r1
   20196:	4249      	negs	r1, r1
   20198:	4441      	add	r1, r8
   2019a:	1876      	adds	r6, r6, r1
   2019c:	9503      	str	r5, [sp, #12]
   2019e:	e78f      	b.n	200c0 <__aeabi_ddiv+0x4fc>
   201a0:	201f      	movs	r0, #31
   201a2:	4240      	negs	r0, r0
   201a4:	1ac3      	subs	r3, r0, r3
   201a6:	4658      	mov	r0, fp
   201a8:	40d8      	lsrs	r0, r3
   201aa:	0003      	movs	r3, r0
   201ac:	2a20      	cmp	r2, #32
   201ae:	d028      	beq.n	20202 <__aeabi_ddiv+0x63e>
   201b0:	2040      	movs	r0, #64	; 0x40
   201b2:	465d      	mov	r5, fp
   201b4:	1a82      	subs	r2, r0, r2
   201b6:	4095      	lsls	r5, r2
   201b8:	4329      	orrs	r1, r5
   201ba:	1e4a      	subs	r2, r1, #1
   201bc:	4191      	sbcs	r1, r2
   201be:	4319      	orrs	r1, r3
   201c0:	2307      	movs	r3, #7
   201c2:	2200      	movs	r2, #0
   201c4:	400b      	ands	r3, r1
   201c6:	d009      	beq.n	201dc <__aeabi_ddiv+0x618>
   201c8:	230f      	movs	r3, #15
   201ca:	2200      	movs	r2, #0
   201cc:	400b      	ands	r3, r1
   201ce:	0008      	movs	r0, r1
   201d0:	2b04      	cmp	r3, #4
   201d2:	d1bd      	bne.n	20150 <__aeabi_ddiv+0x58c>
   201d4:	0001      	movs	r1, r0
   201d6:	0753      	lsls	r3, r2, #29
   201d8:	0252      	lsls	r2, r2, #9
   201da:	0b12      	lsrs	r2, r2, #12
   201dc:	08c9      	lsrs	r1, r1, #3
   201de:	4319      	orrs	r1, r3
   201e0:	2301      	movs	r3, #1
   201e2:	4688      	mov	r8, r1
   201e4:	9902      	ldr	r1, [sp, #8]
   201e6:	2400      	movs	r4, #0
   201e8:	4019      	ands	r1, r3
   201ea:	468c      	mov	ip, r1
   201ec:	e5b8      	b.n	1fd60 <__aeabi_ddiv+0x19c>
   201ee:	4552      	cmp	r2, sl
   201f0:	d8be      	bhi.n	20170 <__aeabi_ddiv+0x5ac>
   201f2:	468b      	mov	fp, r1
   201f4:	2500      	movs	r5, #0
   201f6:	e660      	b.n	1feba <__aeabi_ddiv+0x2f6>
   201f8:	9d03      	ldr	r5, [sp, #12]
   201fa:	429d      	cmp	r5, r3
   201fc:	d3c6      	bcc.n	2018c <__aeabi_ddiv+0x5c8>
   201fe:	0011      	movs	r1, r2
   20200:	e762      	b.n	200c8 <__aeabi_ddiv+0x504>
   20202:	2500      	movs	r5, #0
   20204:	e7d8      	b.n	201b8 <__aeabi_ddiv+0x5f4>
   20206:	2280      	movs	r2, #128	; 0x80
   20208:	465b      	mov	r3, fp
   2020a:	0312      	lsls	r2, r2, #12
   2020c:	431a      	orrs	r2, r3
   2020e:	9b01      	ldr	r3, [sp, #4]
   20210:	0312      	lsls	r2, r2, #12
   20212:	0b12      	lsrs	r2, r2, #12
   20214:	469c      	mov	ip, r3
   20216:	4688      	mov	r8, r1
   20218:	4c03      	ldr	r4, [pc, #12]	; (20228 <__aeabi_ddiv+0x664>)
   2021a:	e5a1      	b.n	1fd60 <__aeabi_ddiv+0x19c>
   2021c:	000003ff 	.word	0x000003ff
   20220:	feffffff 	.word	0xfeffffff
   20224:	000007fe 	.word	0x000007fe
   20228:	000007ff 	.word	0x000007ff

0002022c <__aeabi_dmul>:
   2022c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2022e:	4657      	mov	r7, sl
   20230:	4645      	mov	r5, r8
   20232:	46de      	mov	lr, fp
   20234:	464e      	mov	r6, r9
   20236:	b5e0      	push	{r5, r6, r7, lr}
   20238:	030c      	lsls	r4, r1, #12
   2023a:	4698      	mov	r8, r3
   2023c:	004e      	lsls	r6, r1, #1
   2023e:	0b23      	lsrs	r3, r4, #12
   20240:	b087      	sub	sp, #28
   20242:	0007      	movs	r7, r0
   20244:	4692      	mov	sl, r2
   20246:	469b      	mov	fp, r3
   20248:	0d76      	lsrs	r6, r6, #21
   2024a:	0fcd      	lsrs	r5, r1, #31
   2024c:	2e00      	cmp	r6, #0
   2024e:	d06b      	beq.n	20328 <__aeabi_dmul+0xfc>
   20250:	4b6d      	ldr	r3, [pc, #436]	; (20408 <__aeabi_dmul+0x1dc>)
   20252:	429e      	cmp	r6, r3
   20254:	d035      	beq.n	202c2 <__aeabi_dmul+0x96>
   20256:	2480      	movs	r4, #128	; 0x80
   20258:	465b      	mov	r3, fp
   2025a:	0f42      	lsrs	r2, r0, #29
   2025c:	0424      	lsls	r4, r4, #16
   2025e:	00db      	lsls	r3, r3, #3
   20260:	4314      	orrs	r4, r2
   20262:	431c      	orrs	r4, r3
   20264:	00c3      	lsls	r3, r0, #3
   20266:	4699      	mov	r9, r3
   20268:	4b68      	ldr	r3, [pc, #416]	; (2040c <__aeabi_dmul+0x1e0>)
   2026a:	46a3      	mov	fp, r4
   2026c:	469c      	mov	ip, r3
   2026e:	2300      	movs	r3, #0
   20270:	2700      	movs	r7, #0
   20272:	4466      	add	r6, ip
   20274:	9302      	str	r3, [sp, #8]
   20276:	4643      	mov	r3, r8
   20278:	031c      	lsls	r4, r3, #12
   2027a:	005a      	lsls	r2, r3, #1
   2027c:	0fdb      	lsrs	r3, r3, #31
   2027e:	4650      	mov	r0, sl
   20280:	0b24      	lsrs	r4, r4, #12
   20282:	0d52      	lsrs	r2, r2, #21
   20284:	4698      	mov	r8, r3
   20286:	d100      	bne.n	2028a <__aeabi_dmul+0x5e>
   20288:	e076      	b.n	20378 <__aeabi_dmul+0x14c>
   2028a:	4b5f      	ldr	r3, [pc, #380]	; (20408 <__aeabi_dmul+0x1dc>)
   2028c:	429a      	cmp	r2, r3
   2028e:	d06d      	beq.n	2036c <__aeabi_dmul+0x140>
   20290:	2380      	movs	r3, #128	; 0x80
   20292:	0f41      	lsrs	r1, r0, #29
   20294:	041b      	lsls	r3, r3, #16
   20296:	430b      	orrs	r3, r1
   20298:	495c      	ldr	r1, [pc, #368]	; (2040c <__aeabi_dmul+0x1e0>)
   2029a:	00e4      	lsls	r4, r4, #3
   2029c:	468c      	mov	ip, r1
   2029e:	431c      	orrs	r4, r3
   202a0:	00c3      	lsls	r3, r0, #3
   202a2:	2000      	movs	r0, #0
   202a4:	4462      	add	r2, ip
   202a6:	4641      	mov	r1, r8
   202a8:	18b6      	adds	r6, r6, r2
   202aa:	4069      	eors	r1, r5
   202ac:	1c72      	adds	r2, r6, #1
   202ae:	9101      	str	r1, [sp, #4]
   202b0:	4694      	mov	ip, r2
   202b2:	4307      	orrs	r7, r0
   202b4:	2f0f      	cmp	r7, #15
   202b6:	d900      	bls.n	202ba <__aeabi_dmul+0x8e>
   202b8:	e0b0      	b.n	2041c <__aeabi_dmul+0x1f0>
   202ba:	4a55      	ldr	r2, [pc, #340]	; (20410 <__aeabi_dmul+0x1e4>)
   202bc:	00bf      	lsls	r7, r7, #2
   202be:	59d2      	ldr	r2, [r2, r7]
   202c0:	4697      	mov	pc, r2
   202c2:	465b      	mov	r3, fp
   202c4:	4303      	orrs	r3, r0
   202c6:	4699      	mov	r9, r3
   202c8:	d000      	beq.n	202cc <__aeabi_dmul+0xa0>
   202ca:	e087      	b.n	203dc <__aeabi_dmul+0x1b0>
   202cc:	2300      	movs	r3, #0
   202ce:	469b      	mov	fp, r3
   202d0:	3302      	adds	r3, #2
   202d2:	2708      	movs	r7, #8
   202d4:	9302      	str	r3, [sp, #8]
   202d6:	e7ce      	b.n	20276 <__aeabi_dmul+0x4a>
   202d8:	4642      	mov	r2, r8
   202da:	9201      	str	r2, [sp, #4]
   202dc:	2802      	cmp	r0, #2
   202de:	d067      	beq.n	203b0 <__aeabi_dmul+0x184>
   202e0:	2803      	cmp	r0, #3
   202e2:	d100      	bne.n	202e6 <__aeabi_dmul+0xba>
   202e4:	e20e      	b.n	20704 <__aeabi_dmul+0x4d8>
   202e6:	2801      	cmp	r0, #1
   202e8:	d000      	beq.n	202ec <__aeabi_dmul+0xc0>
   202ea:	e162      	b.n	205b2 <__aeabi_dmul+0x386>
   202ec:	2300      	movs	r3, #0
   202ee:	2400      	movs	r4, #0
   202f0:	2200      	movs	r2, #0
   202f2:	4699      	mov	r9, r3
   202f4:	9901      	ldr	r1, [sp, #4]
   202f6:	4001      	ands	r1, r0
   202f8:	b2cd      	uxtb	r5, r1
   202fa:	2100      	movs	r1, #0
   202fc:	0312      	lsls	r2, r2, #12
   202fe:	0d0b      	lsrs	r3, r1, #20
   20300:	0b12      	lsrs	r2, r2, #12
   20302:	051b      	lsls	r3, r3, #20
   20304:	4313      	orrs	r3, r2
   20306:	4a43      	ldr	r2, [pc, #268]	; (20414 <__aeabi_dmul+0x1e8>)
   20308:	0524      	lsls	r4, r4, #20
   2030a:	4013      	ands	r3, r2
   2030c:	431c      	orrs	r4, r3
   2030e:	0064      	lsls	r4, r4, #1
   20310:	07ed      	lsls	r5, r5, #31
   20312:	0864      	lsrs	r4, r4, #1
   20314:	432c      	orrs	r4, r5
   20316:	4648      	mov	r0, r9
   20318:	0021      	movs	r1, r4
   2031a:	b007      	add	sp, #28
   2031c:	bc3c      	pop	{r2, r3, r4, r5}
   2031e:	4690      	mov	r8, r2
   20320:	4699      	mov	r9, r3
   20322:	46a2      	mov	sl, r4
   20324:	46ab      	mov	fp, r5
   20326:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20328:	4303      	orrs	r3, r0
   2032a:	4699      	mov	r9, r3
   2032c:	d04f      	beq.n	203ce <__aeabi_dmul+0x1a2>
   2032e:	465b      	mov	r3, fp
   20330:	2b00      	cmp	r3, #0
   20332:	d100      	bne.n	20336 <__aeabi_dmul+0x10a>
   20334:	e189      	b.n	2064a <__aeabi_dmul+0x41e>
   20336:	4658      	mov	r0, fp
   20338:	f000 fd7a 	bl	20e30 <__clzsi2>
   2033c:	0003      	movs	r3, r0
   2033e:	3b0b      	subs	r3, #11
   20340:	2b1c      	cmp	r3, #28
   20342:	dd00      	ble.n	20346 <__aeabi_dmul+0x11a>
   20344:	e17a      	b.n	2063c <__aeabi_dmul+0x410>
   20346:	221d      	movs	r2, #29
   20348:	1ad3      	subs	r3, r2, r3
   2034a:	003a      	movs	r2, r7
   2034c:	0001      	movs	r1, r0
   2034e:	465c      	mov	r4, fp
   20350:	40da      	lsrs	r2, r3
   20352:	3908      	subs	r1, #8
   20354:	408c      	lsls	r4, r1
   20356:	0013      	movs	r3, r2
   20358:	408f      	lsls	r7, r1
   2035a:	4323      	orrs	r3, r4
   2035c:	469b      	mov	fp, r3
   2035e:	46b9      	mov	r9, r7
   20360:	2300      	movs	r3, #0
   20362:	4e2d      	ldr	r6, [pc, #180]	; (20418 <__aeabi_dmul+0x1ec>)
   20364:	2700      	movs	r7, #0
   20366:	1a36      	subs	r6, r6, r0
   20368:	9302      	str	r3, [sp, #8]
   2036a:	e784      	b.n	20276 <__aeabi_dmul+0x4a>
   2036c:	4653      	mov	r3, sl
   2036e:	4323      	orrs	r3, r4
   20370:	d12a      	bne.n	203c8 <__aeabi_dmul+0x19c>
   20372:	2400      	movs	r4, #0
   20374:	2002      	movs	r0, #2
   20376:	e796      	b.n	202a6 <__aeabi_dmul+0x7a>
   20378:	4653      	mov	r3, sl
   2037a:	4323      	orrs	r3, r4
   2037c:	d020      	beq.n	203c0 <__aeabi_dmul+0x194>
   2037e:	2c00      	cmp	r4, #0
   20380:	d100      	bne.n	20384 <__aeabi_dmul+0x158>
   20382:	e157      	b.n	20634 <__aeabi_dmul+0x408>
   20384:	0020      	movs	r0, r4
   20386:	f000 fd53 	bl	20e30 <__clzsi2>
   2038a:	0003      	movs	r3, r0
   2038c:	3b0b      	subs	r3, #11
   2038e:	2b1c      	cmp	r3, #28
   20390:	dd00      	ble.n	20394 <__aeabi_dmul+0x168>
   20392:	e149      	b.n	20628 <__aeabi_dmul+0x3fc>
   20394:	211d      	movs	r1, #29
   20396:	1acb      	subs	r3, r1, r3
   20398:	4651      	mov	r1, sl
   2039a:	0002      	movs	r2, r0
   2039c:	40d9      	lsrs	r1, r3
   2039e:	4653      	mov	r3, sl
   203a0:	3a08      	subs	r2, #8
   203a2:	4094      	lsls	r4, r2
   203a4:	4093      	lsls	r3, r2
   203a6:	430c      	orrs	r4, r1
   203a8:	4a1b      	ldr	r2, [pc, #108]	; (20418 <__aeabi_dmul+0x1ec>)
   203aa:	1a12      	subs	r2, r2, r0
   203ac:	2000      	movs	r0, #0
   203ae:	e77a      	b.n	202a6 <__aeabi_dmul+0x7a>
   203b0:	2501      	movs	r5, #1
   203b2:	9b01      	ldr	r3, [sp, #4]
   203b4:	4c14      	ldr	r4, [pc, #80]	; (20408 <__aeabi_dmul+0x1dc>)
   203b6:	401d      	ands	r5, r3
   203b8:	2300      	movs	r3, #0
   203ba:	2200      	movs	r2, #0
   203bc:	4699      	mov	r9, r3
   203be:	e79c      	b.n	202fa <__aeabi_dmul+0xce>
   203c0:	2400      	movs	r4, #0
   203c2:	2200      	movs	r2, #0
   203c4:	2001      	movs	r0, #1
   203c6:	e76e      	b.n	202a6 <__aeabi_dmul+0x7a>
   203c8:	4653      	mov	r3, sl
   203ca:	2003      	movs	r0, #3
   203cc:	e76b      	b.n	202a6 <__aeabi_dmul+0x7a>
   203ce:	2300      	movs	r3, #0
   203d0:	469b      	mov	fp, r3
   203d2:	3301      	adds	r3, #1
   203d4:	2704      	movs	r7, #4
   203d6:	2600      	movs	r6, #0
   203d8:	9302      	str	r3, [sp, #8]
   203da:	e74c      	b.n	20276 <__aeabi_dmul+0x4a>
   203dc:	2303      	movs	r3, #3
   203de:	4681      	mov	r9, r0
   203e0:	270c      	movs	r7, #12
   203e2:	9302      	str	r3, [sp, #8]
   203e4:	e747      	b.n	20276 <__aeabi_dmul+0x4a>
   203e6:	2280      	movs	r2, #128	; 0x80
   203e8:	2300      	movs	r3, #0
   203ea:	2500      	movs	r5, #0
   203ec:	0312      	lsls	r2, r2, #12
   203ee:	4699      	mov	r9, r3
   203f0:	4c05      	ldr	r4, [pc, #20]	; (20408 <__aeabi_dmul+0x1dc>)
   203f2:	e782      	b.n	202fa <__aeabi_dmul+0xce>
   203f4:	465c      	mov	r4, fp
   203f6:	464b      	mov	r3, r9
   203f8:	9802      	ldr	r0, [sp, #8]
   203fa:	e76f      	b.n	202dc <__aeabi_dmul+0xb0>
   203fc:	465c      	mov	r4, fp
   203fe:	464b      	mov	r3, r9
   20400:	9501      	str	r5, [sp, #4]
   20402:	9802      	ldr	r0, [sp, #8]
   20404:	e76a      	b.n	202dc <__aeabi_dmul+0xb0>
   20406:	46c0      	nop			; (mov r8, r8)
   20408:	000007ff 	.word	0x000007ff
   2040c:	fffffc01 	.word	0xfffffc01
   20410:	0002629c 	.word	0x0002629c
   20414:	800fffff 	.word	0x800fffff
   20418:	fffffc0d 	.word	0xfffffc0d
   2041c:	464a      	mov	r2, r9
   2041e:	4649      	mov	r1, r9
   20420:	0c17      	lsrs	r7, r2, #16
   20422:	0c1a      	lsrs	r2, r3, #16
   20424:	041b      	lsls	r3, r3, #16
   20426:	0c1b      	lsrs	r3, r3, #16
   20428:	0408      	lsls	r0, r1, #16
   2042a:	0019      	movs	r1, r3
   2042c:	0c00      	lsrs	r0, r0, #16
   2042e:	4341      	muls	r1, r0
   20430:	0015      	movs	r5, r2
   20432:	4688      	mov	r8, r1
   20434:	0019      	movs	r1, r3
   20436:	437d      	muls	r5, r7
   20438:	4379      	muls	r1, r7
   2043a:	9503      	str	r5, [sp, #12]
   2043c:	4689      	mov	r9, r1
   2043e:	0029      	movs	r1, r5
   20440:	0015      	movs	r5, r2
   20442:	4345      	muls	r5, r0
   20444:	444d      	add	r5, r9
   20446:	9502      	str	r5, [sp, #8]
   20448:	4645      	mov	r5, r8
   2044a:	0c2d      	lsrs	r5, r5, #16
   2044c:	46aa      	mov	sl, r5
   2044e:	9d02      	ldr	r5, [sp, #8]
   20450:	4455      	add	r5, sl
   20452:	45a9      	cmp	r9, r5
   20454:	d906      	bls.n	20464 <__aeabi_dmul+0x238>
   20456:	468a      	mov	sl, r1
   20458:	2180      	movs	r1, #128	; 0x80
   2045a:	0249      	lsls	r1, r1, #9
   2045c:	4689      	mov	r9, r1
   2045e:	44ca      	add	sl, r9
   20460:	4651      	mov	r1, sl
   20462:	9103      	str	r1, [sp, #12]
   20464:	0c29      	lsrs	r1, r5, #16
   20466:	9104      	str	r1, [sp, #16]
   20468:	4641      	mov	r1, r8
   2046a:	0409      	lsls	r1, r1, #16
   2046c:	042d      	lsls	r5, r5, #16
   2046e:	0c09      	lsrs	r1, r1, #16
   20470:	4688      	mov	r8, r1
   20472:	0029      	movs	r1, r5
   20474:	0c25      	lsrs	r5, r4, #16
   20476:	0424      	lsls	r4, r4, #16
   20478:	4441      	add	r1, r8
   2047a:	0c24      	lsrs	r4, r4, #16
   2047c:	9105      	str	r1, [sp, #20]
   2047e:	0021      	movs	r1, r4
   20480:	4341      	muls	r1, r0
   20482:	4688      	mov	r8, r1
   20484:	0021      	movs	r1, r4
   20486:	4379      	muls	r1, r7
   20488:	468a      	mov	sl, r1
   2048a:	4368      	muls	r0, r5
   2048c:	4641      	mov	r1, r8
   2048e:	4450      	add	r0, sl
   20490:	4681      	mov	r9, r0
   20492:	0c08      	lsrs	r0, r1, #16
   20494:	4448      	add	r0, r9
   20496:	436f      	muls	r7, r5
   20498:	4582      	cmp	sl, r0
   2049a:	d903      	bls.n	204a4 <__aeabi_dmul+0x278>
   2049c:	2180      	movs	r1, #128	; 0x80
   2049e:	0249      	lsls	r1, r1, #9
   204a0:	4689      	mov	r9, r1
   204a2:	444f      	add	r7, r9
   204a4:	0c01      	lsrs	r1, r0, #16
   204a6:	4689      	mov	r9, r1
   204a8:	0039      	movs	r1, r7
   204aa:	4449      	add	r1, r9
   204ac:	9102      	str	r1, [sp, #8]
   204ae:	4641      	mov	r1, r8
   204b0:	040f      	lsls	r7, r1, #16
   204b2:	9904      	ldr	r1, [sp, #16]
   204b4:	0c3f      	lsrs	r7, r7, #16
   204b6:	4688      	mov	r8, r1
   204b8:	0400      	lsls	r0, r0, #16
   204ba:	19c0      	adds	r0, r0, r7
   204bc:	4480      	add	r8, r0
   204be:	4641      	mov	r1, r8
   204c0:	9104      	str	r1, [sp, #16]
   204c2:	4659      	mov	r1, fp
   204c4:	0c0f      	lsrs	r7, r1, #16
   204c6:	0409      	lsls	r1, r1, #16
   204c8:	0c09      	lsrs	r1, r1, #16
   204ca:	4688      	mov	r8, r1
   204cc:	4359      	muls	r1, r3
   204ce:	468a      	mov	sl, r1
   204d0:	0039      	movs	r1, r7
   204d2:	4351      	muls	r1, r2
   204d4:	4689      	mov	r9, r1
   204d6:	4641      	mov	r1, r8
   204d8:	434a      	muls	r2, r1
   204da:	4651      	mov	r1, sl
   204dc:	0c09      	lsrs	r1, r1, #16
   204de:	468b      	mov	fp, r1
   204e0:	437b      	muls	r3, r7
   204e2:	18d2      	adds	r2, r2, r3
   204e4:	445a      	add	r2, fp
   204e6:	4293      	cmp	r3, r2
   204e8:	d903      	bls.n	204f2 <__aeabi_dmul+0x2c6>
   204ea:	2380      	movs	r3, #128	; 0x80
   204ec:	025b      	lsls	r3, r3, #9
   204ee:	469b      	mov	fp, r3
   204f0:	44d9      	add	r9, fp
   204f2:	4651      	mov	r1, sl
   204f4:	0409      	lsls	r1, r1, #16
   204f6:	0c09      	lsrs	r1, r1, #16
   204f8:	468a      	mov	sl, r1
   204fa:	4641      	mov	r1, r8
   204fc:	4361      	muls	r1, r4
   204fe:	437c      	muls	r4, r7
   20500:	0c13      	lsrs	r3, r2, #16
   20502:	0412      	lsls	r2, r2, #16
   20504:	444b      	add	r3, r9
   20506:	4452      	add	r2, sl
   20508:	46a1      	mov	r9, r4
   2050a:	468a      	mov	sl, r1
   2050c:	003c      	movs	r4, r7
   2050e:	4641      	mov	r1, r8
   20510:	436c      	muls	r4, r5
   20512:	434d      	muls	r5, r1
   20514:	4651      	mov	r1, sl
   20516:	444d      	add	r5, r9
   20518:	0c0f      	lsrs	r7, r1, #16
   2051a:	197d      	adds	r5, r7, r5
   2051c:	45a9      	cmp	r9, r5
   2051e:	d903      	bls.n	20528 <__aeabi_dmul+0x2fc>
   20520:	2180      	movs	r1, #128	; 0x80
   20522:	0249      	lsls	r1, r1, #9
   20524:	4688      	mov	r8, r1
   20526:	4444      	add	r4, r8
   20528:	9f04      	ldr	r7, [sp, #16]
   2052a:	9903      	ldr	r1, [sp, #12]
   2052c:	46b8      	mov	r8, r7
   2052e:	4441      	add	r1, r8
   20530:	468b      	mov	fp, r1
   20532:	4583      	cmp	fp, r0
   20534:	4180      	sbcs	r0, r0
   20536:	4241      	negs	r1, r0
   20538:	4688      	mov	r8, r1
   2053a:	4651      	mov	r1, sl
   2053c:	0408      	lsls	r0, r1, #16
   2053e:	042f      	lsls	r7, r5, #16
   20540:	0c00      	lsrs	r0, r0, #16
   20542:	183f      	adds	r7, r7, r0
   20544:	4658      	mov	r0, fp
   20546:	9902      	ldr	r1, [sp, #8]
   20548:	1810      	adds	r0, r2, r0
   2054a:	4689      	mov	r9, r1
   2054c:	4290      	cmp	r0, r2
   2054e:	4192      	sbcs	r2, r2
   20550:	444f      	add	r7, r9
   20552:	46ba      	mov	sl, r7
   20554:	4252      	negs	r2, r2
   20556:	4699      	mov	r9, r3
   20558:	4693      	mov	fp, r2
   2055a:	44c2      	add	sl, r8
   2055c:	44d1      	add	r9, sl
   2055e:	44cb      	add	fp, r9
   20560:	428f      	cmp	r7, r1
   20562:	41bf      	sbcs	r7, r7
   20564:	45c2      	cmp	sl, r8
   20566:	4189      	sbcs	r1, r1
   20568:	4599      	cmp	r9, r3
   2056a:	419b      	sbcs	r3, r3
   2056c:	4593      	cmp	fp, r2
   2056e:	4192      	sbcs	r2, r2
   20570:	427f      	negs	r7, r7
   20572:	4249      	negs	r1, r1
   20574:	0c2d      	lsrs	r5, r5, #16
   20576:	4252      	negs	r2, r2
   20578:	430f      	orrs	r7, r1
   2057a:	425b      	negs	r3, r3
   2057c:	4313      	orrs	r3, r2
   2057e:	197f      	adds	r7, r7, r5
   20580:	18ff      	adds	r7, r7, r3
   20582:	465b      	mov	r3, fp
   20584:	193c      	adds	r4, r7, r4
   20586:	0ddb      	lsrs	r3, r3, #23
   20588:	9a05      	ldr	r2, [sp, #20]
   2058a:	0264      	lsls	r4, r4, #9
   2058c:	431c      	orrs	r4, r3
   2058e:	0243      	lsls	r3, r0, #9
   20590:	4313      	orrs	r3, r2
   20592:	1e5d      	subs	r5, r3, #1
   20594:	41ab      	sbcs	r3, r5
   20596:	465a      	mov	r2, fp
   20598:	0dc0      	lsrs	r0, r0, #23
   2059a:	4303      	orrs	r3, r0
   2059c:	0252      	lsls	r2, r2, #9
   2059e:	4313      	orrs	r3, r2
   205a0:	01e2      	lsls	r2, r4, #7
   205a2:	d556      	bpl.n	20652 <__aeabi_dmul+0x426>
   205a4:	2001      	movs	r0, #1
   205a6:	085a      	lsrs	r2, r3, #1
   205a8:	4003      	ands	r3, r0
   205aa:	4313      	orrs	r3, r2
   205ac:	07e2      	lsls	r2, r4, #31
   205ae:	4313      	orrs	r3, r2
   205b0:	0864      	lsrs	r4, r4, #1
   205b2:	485a      	ldr	r0, [pc, #360]	; (2071c <__aeabi_dmul+0x4f0>)
   205b4:	4460      	add	r0, ip
   205b6:	2800      	cmp	r0, #0
   205b8:	dd4d      	ble.n	20656 <__aeabi_dmul+0x42a>
   205ba:	075a      	lsls	r2, r3, #29
   205bc:	d009      	beq.n	205d2 <__aeabi_dmul+0x3a6>
   205be:	220f      	movs	r2, #15
   205c0:	401a      	ands	r2, r3
   205c2:	2a04      	cmp	r2, #4
   205c4:	d005      	beq.n	205d2 <__aeabi_dmul+0x3a6>
   205c6:	1d1a      	adds	r2, r3, #4
   205c8:	429a      	cmp	r2, r3
   205ca:	419b      	sbcs	r3, r3
   205cc:	425b      	negs	r3, r3
   205ce:	18e4      	adds	r4, r4, r3
   205d0:	0013      	movs	r3, r2
   205d2:	01e2      	lsls	r2, r4, #7
   205d4:	d504      	bpl.n	205e0 <__aeabi_dmul+0x3b4>
   205d6:	2080      	movs	r0, #128	; 0x80
   205d8:	4a51      	ldr	r2, [pc, #324]	; (20720 <__aeabi_dmul+0x4f4>)
   205da:	00c0      	lsls	r0, r0, #3
   205dc:	4014      	ands	r4, r2
   205de:	4460      	add	r0, ip
   205e0:	4a50      	ldr	r2, [pc, #320]	; (20724 <__aeabi_dmul+0x4f8>)
   205e2:	4290      	cmp	r0, r2
   205e4:	dd00      	ble.n	205e8 <__aeabi_dmul+0x3bc>
   205e6:	e6e3      	b.n	203b0 <__aeabi_dmul+0x184>
   205e8:	2501      	movs	r5, #1
   205ea:	08db      	lsrs	r3, r3, #3
   205ec:	0762      	lsls	r2, r4, #29
   205ee:	431a      	orrs	r2, r3
   205f0:	0264      	lsls	r4, r4, #9
   205f2:	9b01      	ldr	r3, [sp, #4]
   205f4:	4691      	mov	r9, r2
   205f6:	0b22      	lsrs	r2, r4, #12
   205f8:	0544      	lsls	r4, r0, #21
   205fa:	0d64      	lsrs	r4, r4, #21
   205fc:	401d      	ands	r5, r3
   205fe:	e67c      	b.n	202fa <__aeabi_dmul+0xce>
   20600:	2280      	movs	r2, #128	; 0x80
   20602:	4659      	mov	r1, fp
   20604:	0312      	lsls	r2, r2, #12
   20606:	4211      	tst	r1, r2
   20608:	d008      	beq.n	2061c <__aeabi_dmul+0x3f0>
   2060a:	4214      	tst	r4, r2
   2060c:	d106      	bne.n	2061c <__aeabi_dmul+0x3f0>
   2060e:	4322      	orrs	r2, r4
   20610:	0312      	lsls	r2, r2, #12
   20612:	0b12      	lsrs	r2, r2, #12
   20614:	4645      	mov	r5, r8
   20616:	4699      	mov	r9, r3
   20618:	4c43      	ldr	r4, [pc, #268]	; (20728 <__aeabi_dmul+0x4fc>)
   2061a:	e66e      	b.n	202fa <__aeabi_dmul+0xce>
   2061c:	465b      	mov	r3, fp
   2061e:	431a      	orrs	r2, r3
   20620:	0312      	lsls	r2, r2, #12
   20622:	0b12      	lsrs	r2, r2, #12
   20624:	4c40      	ldr	r4, [pc, #256]	; (20728 <__aeabi_dmul+0x4fc>)
   20626:	e668      	b.n	202fa <__aeabi_dmul+0xce>
   20628:	0003      	movs	r3, r0
   2062a:	4654      	mov	r4, sl
   2062c:	3b28      	subs	r3, #40	; 0x28
   2062e:	409c      	lsls	r4, r3
   20630:	2300      	movs	r3, #0
   20632:	e6b9      	b.n	203a8 <__aeabi_dmul+0x17c>
   20634:	f000 fbfc 	bl	20e30 <__clzsi2>
   20638:	3020      	adds	r0, #32
   2063a:	e6a6      	b.n	2038a <__aeabi_dmul+0x15e>
   2063c:	0003      	movs	r3, r0
   2063e:	3b28      	subs	r3, #40	; 0x28
   20640:	409f      	lsls	r7, r3
   20642:	2300      	movs	r3, #0
   20644:	46bb      	mov	fp, r7
   20646:	4699      	mov	r9, r3
   20648:	e68a      	b.n	20360 <__aeabi_dmul+0x134>
   2064a:	f000 fbf1 	bl	20e30 <__clzsi2>
   2064e:	3020      	adds	r0, #32
   20650:	e674      	b.n	2033c <__aeabi_dmul+0x110>
   20652:	46b4      	mov	ip, r6
   20654:	e7ad      	b.n	205b2 <__aeabi_dmul+0x386>
   20656:	2501      	movs	r5, #1
   20658:	1a2a      	subs	r2, r5, r0
   2065a:	2a38      	cmp	r2, #56	; 0x38
   2065c:	dd06      	ble.n	2066c <__aeabi_dmul+0x440>
   2065e:	9b01      	ldr	r3, [sp, #4]
   20660:	2400      	movs	r4, #0
   20662:	401d      	ands	r5, r3
   20664:	2300      	movs	r3, #0
   20666:	2200      	movs	r2, #0
   20668:	4699      	mov	r9, r3
   2066a:	e646      	b.n	202fa <__aeabi_dmul+0xce>
   2066c:	2a1f      	cmp	r2, #31
   2066e:	dc21      	bgt.n	206b4 <__aeabi_dmul+0x488>
   20670:	2520      	movs	r5, #32
   20672:	0020      	movs	r0, r4
   20674:	1aad      	subs	r5, r5, r2
   20676:	001e      	movs	r6, r3
   20678:	40ab      	lsls	r3, r5
   2067a:	40a8      	lsls	r0, r5
   2067c:	40d6      	lsrs	r6, r2
   2067e:	1e5d      	subs	r5, r3, #1
   20680:	41ab      	sbcs	r3, r5
   20682:	4330      	orrs	r0, r6
   20684:	4318      	orrs	r0, r3
   20686:	40d4      	lsrs	r4, r2
   20688:	0743      	lsls	r3, r0, #29
   2068a:	d009      	beq.n	206a0 <__aeabi_dmul+0x474>
   2068c:	230f      	movs	r3, #15
   2068e:	4003      	ands	r3, r0
   20690:	2b04      	cmp	r3, #4
   20692:	d005      	beq.n	206a0 <__aeabi_dmul+0x474>
   20694:	0003      	movs	r3, r0
   20696:	1d18      	adds	r0, r3, #4
   20698:	4298      	cmp	r0, r3
   2069a:	419b      	sbcs	r3, r3
   2069c:	425b      	negs	r3, r3
   2069e:	18e4      	adds	r4, r4, r3
   206a0:	0223      	lsls	r3, r4, #8
   206a2:	d521      	bpl.n	206e8 <__aeabi_dmul+0x4bc>
   206a4:	2501      	movs	r5, #1
   206a6:	9b01      	ldr	r3, [sp, #4]
   206a8:	2401      	movs	r4, #1
   206aa:	401d      	ands	r5, r3
   206ac:	2300      	movs	r3, #0
   206ae:	2200      	movs	r2, #0
   206b0:	4699      	mov	r9, r3
   206b2:	e622      	b.n	202fa <__aeabi_dmul+0xce>
   206b4:	251f      	movs	r5, #31
   206b6:	0021      	movs	r1, r4
   206b8:	426d      	negs	r5, r5
   206ba:	1a28      	subs	r0, r5, r0
   206bc:	40c1      	lsrs	r1, r0
   206be:	0008      	movs	r0, r1
   206c0:	2a20      	cmp	r2, #32
   206c2:	d01d      	beq.n	20700 <__aeabi_dmul+0x4d4>
   206c4:	355f      	adds	r5, #95	; 0x5f
   206c6:	1aaa      	subs	r2, r5, r2
   206c8:	4094      	lsls	r4, r2
   206ca:	4323      	orrs	r3, r4
   206cc:	1e5c      	subs	r4, r3, #1
   206ce:	41a3      	sbcs	r3, r4
   206d0:	2507      	movs	r5, #7
   206d2:	4303      	orrs	r3, r0
   206d4:	401d      	ands	r5, r3
   206d6:	2200      	movs	r2, #0
   206d8:	2d00      	cmp	r5, #0
   206da:	d009      	beq.n	206f0 <__aeabi_dmul+0x4c4>
   206dc:	220f      	movs	r2, #15
   206de:	2400      	movs	r4, #0
   206e0:	401a      	ands	r2, r3
   206e2:	0018      	movs	r0, r3
   206e4:	2a04      	cmp	r2, #4
   206e6:	d1d6      	bne.n	20696 <__aeabi_dmul+0x46a>
   206e8:	0003      	movs	r3, r0
   206ea:	0765      	lsls	r5, r4, #29
   206ec:	0264      	lsls	r4, r4, #9
   206ee:	0b22      	lsrs	r2, r4, #12
   206f0:	08db      	lsrs	r3, r3, #3
   206f2:	432b      	orrs	r3, r5
   206f4:	2501      	movs	r5, #1
   206f6:	4699      	mov	r9, r3
   206f8:	9b01      	ldr	r3, [sp, #4]
   206fa:	2400      	movs	r4, #0
   206fc:	401d      	ands	r5, r3
   206fe:	e5fc      	b.n	202fa <__aeabi_dmul+0xce>
   20700:	2400      	movs	r4, #0
   20702:	e7e2      	b.n	206ca <__aeabi_dmul+0x49e>
   20704:	2280      	movs	r2, #128	; 0x80
   20706:	2501      	movs	r5, #1
   20708:	0312      	lsls	r2, r2, #12
   2070a:	4322      	orrs	r2, r4
   2070c:	9901      	ldr	r1, [sp, #4]
   2070e:	0312      	lsls	r2, r2, #12
   20710:	0b12      	lsrs	r2, r2, #12
   20712:	400d      	ands	r5, r1
   20714:	4699      	mov	r9, r3
   20716:	4c04      	ldr	r4, [pc, #16]	; (20728 <__aeabi_dmul+0x4fc>)
   20718:	e5ef      	b.n	202fa <__aeabi_dmul+0xce>
   2071a:	46c0      	nop			; (mov r8, r8)
   2071c:	000003ff 	.word	0x000003ff
   20720:	feffffff 	.word	0xfeffffff
   20724:	000007fe 	.word	0x000007fe
   20728:	000007ff 	.word	0x000007ff

0002072c <__aeabi_dsub>:
   2072c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2072e:	4646      	mov	r6, r8
   20730:	46d6      	mov	lr, sl
   20732:	464f      	mov	r7, r9
   20734:	030c      	lsls	r4, r1, #12
   20736:	b5c0      	push	{r6, r7, lr}
   20738:	0fcd      	lsrs	r5, r1, #31
   2073a:	004e      	lsls	r6, r1, #1
   2073c:	0a61      	lsrs	r1, r4, #9
   2073e:	0f44      	lsrs	r4, r0, #29
   20740:	430c      	orrs	r4, r1
   20742:	00c1      	lsls	r1, r0, #3
   20744:	0058      	lsls	r0, r3, #1
   20746:	0d40      	lsrs	r0, r0, #21
   20748:	4684      	mov	ip, r0
   2074a:	468a      	mov	sl, r1
   2074c:	000f      	movs	r7, r1
   2074e:	0319      	lsls	r1, r3, #12
   20750:	0f50      	lsrs	r0, r2, #29
   20752:	0a49      	lsrs	r1, r1, #9
   20754:	4301      	orrs	r1, r0
   20756:	48c6      	ldr	r0, [pc, #792]	; (20a70 <__aeabi_dsub+0x344>)
   20758:	0d76      	lsrs	r6, r6, #21
   2075a:	46a8      	mov	r8, r5
   2075c:	0fdb      	lsrs	r3, r3, #31
   2075e:	00d2      	lsls	r2, r2, #3
   20760:	4584      	cmp	ip, r0
   20762:	d100      	bne.n	20766 <__aeabi_dsub+0x3a>
   20764:	e0d8      	b.n	20918 <__aeabi_dsub+0x1ec>
   20766:	2001      	movs	r0, #1
   20768:	4043      	eors	r3, r0
   2076a:	42ab      	cmp	r3, r5
   2076c:	d100      	bne.n	20770 <__aeabi_dsub+0x44>
   2076e:	e0a6      	b.n	208be <__aeabi_dsub+0x192>
   20770:	4660      	mov	r0, ip
   20772:	1a35      	subs	r5, r6, r0
   20774:	2d00      	cmp	r5, #0
   20776:	dc00      	bgt.n	2077a <__aeabi_dsub+0x4e>
   20778:	e105      	b.n	20986 <__aeabi_dsub+0x25a>
   2077a:	2800      	cmp	r0, #0
   2077c:	d110      	bne.n	207a0 <__aeabi_dsub+0x74>
   2077e:	000b      	movs	r3, r1
   20780:	4313      	orrs	r3, r2
   20782:	d100      	bne.n	20786 <__aeabi_dsub+0x5a>
   20784:	e0d7      	b.n	20936 <__aeabi_dsub+0x20a>
   20786:	1e6b      	subs	r3, r5, #1
   20788:	2b00      	cmp	r3, #0
   2078a:	d000      	beq.n	2078e <__aeabi_dsub+0x62>
   2078c:	e14b      	b.n	20a26 <__aeabi_dsub+0x2fa>
   2078e:	4653      	mov	r3, sl
   20790:	1a9f      	subs	r7, r3, r2
   20792:	45ba      	cmp	sl, r7
   20794:	4180      	sbcs	r0, r0
   20796:	1a64      	subs	r4, r4, r1
   20798:	4240      	negs	r0, r0
   2079a:	1a24      	subs	r4, r4, r0
   2079c:	2601      	movs	r6, #1
   2079e:	e01e      	b.n	207de <__aeabi_dsub+0xb2>
   207a0:	4bb3      	ldr	r3, [pc, #716]	; (20a70 <__aeabi_dsub+0x344>)
   207a2:	429e      	cmp	r6, r3
   207a4:	d048      	beq.n	20838 <__aeabi_dsub+0x10c>
   207a6:	2380      	movs	r3, #128	; 0x80
   207a8:	041b      	lsls	r3, r3, #16
   207aa:	4319      	orrs	r1, r3
   207ac:	2d38      	cmp	r5, #56	; 0x38
   207ae:	dd00      	ble.n	207b2 <__aeabi_dsub+0x86>
   207b0:	e119      	b.n	209e6 <__aeabi_dsub+0x2ba>
   207b2:	2d1f      	cmp	r5, #31
   207b4:	dd00      	ble.n	207b8 <__aeabi_dsub+0x8c>
   207b6:	e14c      	b.n	20a52 <__aeabi_dsub+0x326>
   207b8:	2320      	movs	r3, #32
   207ba:	000f      	movs	r7, r1
   207bc:	1b5b      	subs	r3, r3, r5
   207be:	0010      	movs	r0, r2
   207c0:	409a      	lsls	r2, r3
   207c2:	409f      	lsls	r7, r3
   207c4:	40e8      	lsrs	r0, r5
   207c6:	1e53      	subs	r3, r2, #1
   207c8:	419a      	sbcs	r2, r3
   207ca:	40e9      	lsrs	r1, r5
   207cc:	4307      	orrs	r7, r0
   207ce:	4317      	orrs	r7, r2
   207d0:	4653      	mov	r3, sl
   207d2:	1bdf      	subs	r7, r3, r7
   207d4:	1a61      	subs	r1, r4, r1
   207d6:	45ba      	cmp	sl, r7
   207d8:	41a4      	sbcs	r4, r4
   207da:	4264      	negs	r4, r4
   207dc:	1b0c      	subs	r4, r1, r4
   207de:	0223      	lsls	r3, r4, #8
   207e0:	d400      	bmi.n	207e4 <__aeabi_dsub+0xb8>
   207e2:	e0c5      	b.n	20970 <__aeabi_dsub+0x244>
   207e4:	0264      	lsls	r4, r4, #9
   207e6:	0a65      	lsrs	r5, r4, #9
   207e8:	2d00      	cmp	r5, #0
   207ea:	d100      	bne.n	207ee <__aeabi_dsub+0xc2>
   207ec:	e0f6      	b.n	209dc <__aeabi_dsub+0x2b0>
   207ee:	0028      	movs	r0, r5
   207f0:	f000 fb1e 	bl	20e30 <__clzsi2>
   207f4:	0003      	movs	r3, r0
   207f6:	3b08      	subs	r3, #8
   207f8:	2b1f      	cmp	r3, #31
   207fa:	dd00      	ble.n	207fe <__aeabi_dsub+0xd2>
   207fc:	e0e9      	b.n	209d2 <__aeabi_dsub+0x2a6>
   207fe:	2220      	movs	r2, #32
   20800:	003c      	movs	r4, r7
   20802:	1ad2      	subs	r2, r2, r3
   20804:	409d      	lsls	r5, r3
   20806:	40d4      	lsrs	r4, r2
   20808:	409f      	lsls	r7, r3
   2080a:	4325      	orrs	r5, r4
   2080c:	429e      	cmp	r6, r3
   2080e:	dd00      	ble.n	20812 <__aeabi_dsub+0xe6>
   20810:	e0db      	b.n	209ca <__aeabi_dsub+0x29e>
   20812:	1b9e      	subs	r6, r3, r6
   20814:	1c73      	adds	r3, r6, #1
   20816:	2b1f      	cmp	r3, #31
   20818:	dd00      	ble.n	2081c <__aeabi_dsub+0xf0>
   2081a:	e10a      	b.n	20a32 <__aeabi_dsub+0x306>
   2081c:	2220      	movs	r2, #32
   2081e:	0038      	movs	r0, r7
   20820:	1ad2      	subs	r2, r2, r3
   20822:	0029      	movs	r1, r5
   20824:	4097      	lsls	r7, r2
   20826:	002c      	movs	r4, r5
   20828:	4091      	lsls	r1, r2
   2082a:	40d8      	lsrs	r0, r3
   2082c:	1e7a      	subs	r2, r7, #1
   2082e:	4197      	sbcs	r7, r2
   20830:	40dc      	lsrs	r4, r3
   20832:	2600      	movs	r6, #0
   20834:	4301      	orrs	r1, r0
   20836:	430f      	orrs	r7, r1
   20838:	077b      	lsls	r3, r7, #29
   2083a:	d009      	beq.n	20850 <__aeabi_dsub+0x124>
   2083c:	230f      	movs	r3, #15
   2083e:	403b      	ands	r3, r7
   20840:	2b04      	cmp	r3, #4
   20842:	d005      	beq.n	20850 <__aeabi_dsub+0x124>
   20844:	1d3b      	adds	r3, r7, #4
   20846:	42bb      	cmp	r3, r7
   20848:	41bf      	sbcs	r7, r7
   2084a:	427f      	negs	r7, r7
   2084c:	19e4      	adds	r4, r4, r7
   2084e:	001f      	movs	r7, r3
   20850:	0223      	lsls	r3, r4, #8
   20852:	d525      	bpl.n	208a0 <__aeabi_dsub+0x174>
   20854:	4b86      	ldr	r3, [pc, #536]	; (20a70 <__aeabi_dsub+0x344>)
   20856:	3601      	adds	r6, #1
   20858:	429e      	cmp	r6, r3
   2085a:	d100      	bne.n	2085e <__aeabi_dsub+0x132>
   2085c:	e0af      	b.n	209be <__aeabi_dsub+0x292>
   2085e:	4b85      	ldr	r3, [pc, #532]	; (20a74 <__aeabi_dsub+0x348>)
   20860:	2501      	movs	r5, #1
   20862:	401c      	ands	r4, r3
   20864:	4643      	mov	r3, r8
   20866:	0762      	lsls	r2, r4, #29
   20868:	08ff      	lsrs	r7, r7, #3
   2086a:	0264      	lsls	r4, r4, #9
   2086c:	0576      	lsls	r6, r6, #21
   2086e:	4317      	orrs	r7, r2
   20870:	0b24      	lsrs	r4, r4, #12
   20872:	0d76      	lsrs	r6, r6, #21
   20874:	401d      	ands	r5, r3
   20876:	2100      	movs	r1, #0
   20878:	0324      	lsls	r4, r4, #12
   2087a:	0b23      	lsrs	r3, r4, #12
   2087c:	0d0c      	lsrs	r4, r1, #20
   2087e:	4a7e      	ldr	r2, [pc, #504]	; (20a78 <__aeabi_dsub+0x34c>)
   20880:	0524      	lsls	r4, r4, #20
   20882:	431c      	orrs	r4, r3
   20884:	4014      	ands	r4, r2
   20886:	0533      	lsls	r3, r6, #20
   20888:	4323      	orrs	r3, r4
   2088a:	005b      	lsls	r3, r3, #1
   2088c:	07ed      	lsls	r5, r5, #31
   2088e:	085b      	lsrs	r3, r3, #1
   20890:	432b      	orrs	r3, r5
   20892:	0038      	movs	r0, r7
   20894:	0019      	movs	r1, r3
   20896:	bc1c      	pop	{r2, r3, r4}
   20898:	4690      	mov	r8, r2
   2089a:	4699      	mov	r9, r3
   2089c:	46a2      	mov	sl, r4
   2089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   208a0:	2501      	movs	r5, #1
   208a2:	4643      	mov	r3, r8
   208a4:	0762      	lsls	r2, r4, #29
   208a6:	08ff      	lsrs	r7, r7, #3
   208a8:	4317      	orrs	r7, r2
   208aa:	08e4      	lsrs	r4, r4, #3
   208ac:	401d      	ands	r5, r3
   208ae:	4b70      	ldr	r3, [pc, #448]	; (20a70 <__aeabi_dsub+0x344>)
   208b0:	429e      	cmp	r6, r3
   208b2:	d036      	beq.n	20922 <__aeabi_dsub+0x1f6>
   208b4:	0324      	lsls	r4, r4, #12
   208b6:	0576      	lsls	r6, r6, #21
   208b8:	0b24      	lsrs	r4, r4, #12
   208ba:	0d76      	lsrs	r6, r6, #21
   208bc:	e7db      	b.n	20876 <__aeabi_dsub+0x14a>
   208be:	4663      	mov	r3, ip
   208c0:	1af3      	subs	r3, r6, r3
   208c2:	2b00      	cmp	r3, #0
   208c4:	dc00      	bgt.n	208c8 <__aeabi_dsub+0x19c>
   208c6:	e094      	b.n	209f2 <__aeabi_dsub+0x2c6>
   208c8:	4660      	mov	r0, ip
   208ca:	2800      	cmp	r0, #0
   208cc:	d035      	beq.n	2093a <__aeabi_dsub+0x20e>
   208ce:	4868      	ldr	r0, [pc, #416]	; (20a70 <__aeabi_dsub+0x344>)
   208d0:	4286      	cmp	r6, r0
   208d2:	d0b1      	beq.n	20838 <__aeabi_dsub+0x10c>
   208d4:	2780      	movs	r7, #128	; 0x80
   208d6:	043f      	lsls	r7, r7, #16
   208d8:	4339      	orrs	r1, r7
   208da:	2b38      	cmp	r3, #56	; 0x38
   208dc:	dc00      	bgt.n	208e0 <__aeabi_dsub+0x1b4>
   208de:	e0fd      	b.n	20adc <__aeabi_dsub+0x3b0>
   208e0:	430a      	orrs	r2, r1
   208e2:	0017      	movs	r7, r2
   208e4:	2100      	movs	r1, #0
   208e6:	1e7a      	subs	r2, r7, #1
   208e8:	4197      	sbcs	r7, r2
   208ea:	4457      	add	r7, sl
   208ec:	4557      	cmp	r7, sl
   208ee:	4180      	sbcs	r0, r0
   208f0:	1909      	adds	r1, r1, r4
   208f2:	4244      	negs	r4, r0
   208f4:	190c      	adds	r4, r1, r4
   208f6:	0223      	lsls	r3, r4, #8
   208f8:	d53a      	bpl.n	20970 <__aeabi_dsub+0x244>
   208fa:	4b5d      	ldr	r3, [pc, #372]	; (20a70 <__aeabi_dsub+0x344>)
   208fc:	3601      	adds	r6, #1
   208fe:	429e      	cmp	r6, r3
   20900:	d100      	bne.n	20904 <__aeabi_dsub+0x1d8>
   20902:	e14b      	b.n	20b9c <__aeabi_dsub+0x470>
   20904:	2201      	movs	r2, #1
   20906:	4b5b      	ldr	r3, [pc, #364]	; (20a74 <__aeabi_dsub+0x348>)
   20908:	401c      	ands	r4, r3
   2090a:	087b      	lsrs	r3, r7, #1
   2090c:	4017      	ands	r7, r2
   2090e:	431f      	orrs	r7, r3
   20910:	07e2      	lsls	r2, r4, #31
   20912:	4317      	orrs	r7, r2
   20914:	0864      	lsrs	r4, r4, #1
   20916:	e78f      	b.n	20838 <__aeabi_dsub+0x10c>
   20918:	0008      	movs	r0, r1
   2091a:	4310      	orrs	r0, r2
   2091c:	d000      	beq.n	20920 <__aeabi_dsub+0x1f4>
   2091e:	e724      	b.n	2076a <__aeabi_dsub+0x3e>
   20920:	e721      	b.n	20766 <__aeabi_dsub+0x3a>
   20922:	0023      	movs	r3, r4
   20924:	433b      	orrs	r3, r7
   20926:	d100      	bne.n	2092a <__aeabi_dsub+0x1fe>
   20928:	e1b9      	b.n	20c9e <__aeabi_dsub+0x572>
   2092a:	2280      	movs	r2, #128	; 0x80
   2092c:	0312      	lsls	r2, r2, #12
   2092e:	4314      	orrs	r4, r2
   20930:	0324      	lsls	r4, r4, #12
   20932:	0b24      	lsrs	r4, r4, #12
   20934:	e79f      	b.n	20876 <__aeabi_dsub+0x14a>
   20936:	002e      	movs	r6, r5
   20938:	e77e      	b.n	20838 <__aeabi_dsub+0x10c>
   2093a:	0008      	movs	r0, r1
   2093c:	4310      	orrs	r0, r2
   2093e:	d100      	bne.n	20942 <__aeabi_dsub+0x216>
   20940:	e0ca      	b.n	20ad8 <__aeabi_dsub+0x3ac>
   20942:	1e58      	subs	r0, r3, #1
   20944:	4684      	mov	ip, r0
   20946:	2800      	cmp	r0, #0
   20948:	d000      	beq.n	2094c <__aeabi_dsub+0x220>
   2094a:	e0e7      	b.n	20b1c <__aeabi_dsub+0x3f0>
   2094c:	4452      	add	r2, sl
   2094e:	4552      	cmp	r2, sl
   20950:	4180      	sbcs	r0, r0
   20952:	1864      	adds	r4, r4, r1
   20954:	4240      	negs	r0, r0
   20956:	1824      	adds	r4, r4, r0
   20958:	0017      	movs	r7, r2
   2095a:	2601      	movs	r6, #1
   2095c:	0223      	lsls	r3, r4, #8
   2095e:	d507      	bpl.n	20970 <__aeabi_dsub+0x244>
   20960:	2602      	movs	r6, #2
   20962:	e7cf      	b.n	20904 <__aeabi_dsub+0x1d8>
   20964:	4664      	mov	r4, ip
   20966:	432c      	orrs	r4, r5
   20968:	d100      	bne.n	2096c <__aeabi_dsub+0x240>
   2096a:	e1b3      	b.n	20cd4 <__aeabi_dsub+0x5a8>
   2096c:	002c      	movs	r4, r5
   2096e:	4667      	mov	r7, ip
   20970:	077b      	lsls	r3, r7, #29
   20972:	d000      	beq.n	20976 <__aeabi_dsub+0x24a>
   20974:	e762      	b.n	2083c <__aeabi_dsub+0x110>
   20976:	0763      	lsls	r3, r4, #29
   20978:	08ff      	lsrs	r7, r7, #3
   2097a:	431f      	orrs	r7, r3
   2097c:	2501      	movs	r5, #1
   2097e:	4643      	mov	r3, r8
   20980:	08e4      	lsrs	r4, r4, #3
   20982:	401d      	ands	r5, r3
   20984:	e793      	b.n	208ae <__aeabi_dsub+0x182>
   20986:	2d00      	cmp	r5, #0
   20988:	d178      	bne.n	20a7c <__aeabi_dsub+0x350>
   2098a:	1c75      	adds	r5, r6, #1
   2098c:	056d      	lsls	r5, r5, #21
   2098e:	0d6d      	lsrs	r5, r5, #21
   20990:	2d01      	cmp	r5, #1
   20992:	dc00      	bgt.n	20996 <__aeabi_dsub+0x26a>
   20994:	e0f2      	b.n	20b7c <__aeabi_dsub+0x450>
   20996:	4650      	mov	r0, sl
   20998:	1a80      	subs	r0, r0, r2
   2099a:	4582      	cmp	sl, r0
   2099c:	41bf      	sbcs	r7, r7
   2099e:	1a65      	subs	r5, r4, r1
   209a0:	427f      	negs	r7, r7
   209a2:	1bed      	subs	r5, r5, r7
   209a4:	4684      	mov	ip, r0
   209a6:	0228      	lsls	r0, r5, #8
   209a8:	d400      	bmi.n	209ac <__aeabi_dsub+0x280>
   209aa:	e08c      	b.n	20ac6 <__aeabi_dsub+0x39a>
   209ac:	4650      	mov	r0, sl
   209ae:	1a17      	subs	r7, r2, r0
   209b0:	42ba      	cmp	r2, r7
   209b2:	4192      	sbcs	r2, r2
   209b4:	1b0c      	subs	r4, r1, r4
   209b6:	4255      	negs	r5, r2
   209b8:	1b65      	subs	r5, r4, r5
   209ba:	4698      	mov	r8, r3
   209bc:	e714      	b.n	207e8 <__aeabi_dsub+0xbc>
   209be:	2501      	movs	r5, #1
   209c0:	4643      	mov	r3, r8
   209c2:	2400      	movs	r4, #0
   209c4:	401d      	ands	r5, r3
   209c6:	2700      	movs	r7, #0
   209c8:	e755      	b.n	20876 <__aeabi_dsub+0x14a>
   209ca:	4c2a      	ldr	r4, [pc, #168]	; (20a74 <__aeabi_dsub+0x348>)
   209cc:	1af6      	subs	r6, r6, r3
   209ce:	402c      	ands	r4, r5
   209d0:	e732      	b.n	20838 <__aeabi_dsub+0x10c>
   209d2:	003d      	movs	r5, r7
   209d4:	3828      	subs	r0, #40	; 0x28
   209d6:	4085      	lsls	r5, r0
   209d8:	2700      	movs	r7, #0
   209da:	e717      	b.n	2080c <__aeabi_dsub+0xe0>
   209dc:	0038      	movs	r0, r7
   209de:	f000 fa27 	bl	20e30 <__clzsi2>
   209e2:	3020      	adds	r0, #32
   209e4:	e706      	b.n	207f4 <__aeabi_dsub+0xc8>
   209e6:	430a      	orrs	r2, r1
   209e8:	0017      	movs	r7, r2
   209ea:	2100      	movs	r1, #0
   209ec:	1e7a      	subs	r2, r7, #1
   209ee:	4197      	sbcs	r7, r2
   209f0:	e6ee      	b.n	207d0 <__aeabi_dsub+0xa4>
   209f2:	2b00      	cmp	r3, #0
   209f4:	d000      	beq.n	209f8 <__aeabi_dsub+0x2cc>
   209f6:	e0e5      	b.n	20bc4 <__aeabi_dsub+0x498>
   209f8:	1c73      	adds	r3, r6, #1
   209fa:	469c      	mov	ip, r3
   209fc:	055b      	lsls	r3, r3, #21
   209fe:	0d5b      	lsrs	r3, r3, #21
   20a00:	2b01      	cmp	r3, #1
   20a02:	dc00      	bgt.n	20a06 <__aeabi_dsub+0x2da>
   20a04:	e09f      	b.n	20b46 <__aeabi_dsub+0x41a>
   20a06:	4b1a      	ldr	r3, [pc, #104]	; (20a70 <__aeabi_dsub+0x344>)
   20a08:	459c      	cmp	ip, r3
   20a0a:	d100      	bne.n	20a0e <__aeabi_dsub+0x2e2>
   20a0c:	e0c5      	b.n	20b9a <__aeabi_dsub+0x46e>
   20a0e:	4452      	add	r2, sl
   20a10:	4552      	cmp	r2, sl
   20a12:	4180      	sbcs	r0, r0
   20a14:	1864      	adds	r4, r4, r1
   20a16:	4240      	negs	r0, r0
   20a18:	1824      	adds	r4, r4, r0
   20a1a:	07e7      	lsls	r7, r4, #31
   20a1c:	0852      	lsrs	r2, r2, #1
   20a1e:	4317      	orrs	r7, r2
   20a20:	0864      	lsrs	r4, r4, #1
   20a22:	4666      	mov	r6, ip
   20a24:	e708      	b.n	20838 <__aeabi_dsub+0x10c>
   20a26:	4812      	ldr	r0, [pc, #72]	; (20a70 <__aeabi_dsub+0x344>)
   20a28:	4285      	cmp	r5, r0
   20a2a:	d100      	bne.n	20a2e <__aeabi_dsub+0x302>
   20a2c:	e085      	b.n	20b3a <__aeabi_dsub+0x40e>
   20a2e:	001d      	movs	r5, r3
   20a30:	e6bc      	b.n	207ac <__aeabi_dsub+0x80>
   20a32:	0029      	movs	r1, r5
   20a34:	3e1f      	subs	r6, #31
   20a36:	40f1      	lsrs	r1, r6
   20a38:	2b20      	cmp	r3, #32
   20a3a:	d100      	bne.n	20a3e <__aeabi_dsub+0x312>
   20a3c:	e07f      	b.n	20b3e <__aeabi_dsub+0x412>
   20a3e:	2240      	movs	r2, #64	; 0x40
   20a40:	1ad3      	subs	r3, r2, r3
   20a42:	409d      	lsls	r5, r3
   20a44:	432f      	orrs	r7, r5
   20a46:	1e7d      	subs	r5, r7, #1
   20a48:	41af      	sbcs	r7, r5
   20a4a:	2400      	movs	r4, #0
   20a4c:	430f      	orrs	r7, r1
   20a4e:	2600      	movs	r6, #0
   20a50:	e78e      	b.n	20970 <__aeabi_dsub+0x244>
   20a52:	002b      	movs	r3, r5
   20a54:	000f      	movs	r7, r1
   20a56:	3b20      	subs	r3, #32
   20a58:	40df      	lsrs	r7, r3
   20a5a:	2d20      	cmp	r5, #32
   20a5c:	d071      	beq.n	20b42 <__aeabi_dsub+0x416>
   20a5e:	2340      	movs	r3, #64	; 0x40
   20a60:	1b5d      	subs	r5, r3, r5
   20a62:	40a9      	lsls	r1, r5
   20a64:	430a      	orrs	r2, r1
   20a66:	1e51      	subs	r1, r2, #1
   20a68:	418a      	sbcs	r2, r1
   20a6a:	2100      	movs	r1, #0
   20a6c:	4317      	orrs	r7, r2
   20a6e:	e6af      	b.n	207d0 <__aeabi_dsub+0xa4>
   20a70:	000007ff 	.word	0x000007ff
   20a74:	ff7fffff 	.word	0xff7fffff
   20a78:	800fffff 	.word	0x800fffff
   20a7c:	2e00      	cmp	r6, #0
   20a7e:	d03e      	beq.n	20afe <__aeabi_dsub+0x3d2>
   20a80:	4eb3      	ldr	r6, [pc, #716]	; (20d50 <__aeabi_dsub+0x624>)
   20a82:	45b4      	cmp	ip, r6
   20a84:	d045      	beq.n	20b12 <__aeabi_dsub+0x3e6>
   20a86:	2680      	movs	r6, #128	; 0x80
   20a88:	0436      	lsls	r6, r6, #16
   20a8a:	426d      	negs	r5, r5
   20a8c:	4334      	orrs	r4, r6
   20a8e:	2d38      	cmp	r5, #56	; 0x38
   20a90:	dd00      	ble.n	20a94 <__aeabi_dsub+0x368>
   20a92:	e0a8      	b.n	20be6 <__aeabi_dsub+0x4ba>
   20a94:	2d1f      	cmp	r5, #31
   20a96:	dd00      	ble.n	20a9a <__aeabi_dsub+0x36e>
   20a98:	e11f      	b.n	20cda <__aeabi_dsub+0x5ae>
   20a9a:	2620      	movs	r6, #32
   20a9c:	0027      	movs	r7, r4
   20a9e:	4650      	mov	r0, sl
   20aa0:	1b76      	subs	r6, r6, r5
   20aa2:	40b7      	lsls	r7, r6
   20aa4:	40e8      	lsrs	r0, r5
   20aa6:	4307      	orrs	r7, r0
   20aa8:	4650      	mov	r0, sl
   20aaa:	40b0      	lsls	r0, r6
   20aac:	1e46      	subs	r6, r0, #1
   20aae:	41b0      	sbcs	r0, r6
   20ab0:	40ec      	lsrs	r4, r5
   20ab2:	4338      	orrs	r0, r7
   20ab4:	1a17      	subs	r7, r2, r0
   20ab6:	42ba      	cmp	r2, r7
   20ab8:	4192      	sbcs	r2, r2
   20aba:	1b0c      	subs	r4, r1, r4
   20abc:	4252      	negs	r2, r2
   20abe:	1aa4      	subs	r4, r4, r2
   20ac0:	4666      	mov	r6, ip
   20ac2:	4698      	mov	r8, r3
   20ac4:	e68b      	b.n	207de <__aeabi_dsub+0xb2>
   20ac6:	4664      	mov	r4, ip
   20ac8:	4667      	mov	r7, ip
   20aca:	432c      	orrs	r4, r5
   20acc:	d000      	beq.n	20ad0 <__aeabi_dsub+0x3a4>
   20ace:	e68b      	b.n	207e8 <__aeabi_dsub+0xbc>
   20ad0:	2500      	movs	r5, #0
   20ad2:	2600      	movs	r6, #0
   20ad4:	2700      	movs	r7, #0
   20ad6:	e6ea      	b.n	208ae <__aeabi_dsub+0x182>
   20ad8:	001e      	movs	r6, r3
   20ada:	e6ad      	b.n	20838 <__aeabi_dsub+0x10c>
   20adc:	2b1f      	cmp	r3, #31
   20ade:	dc60      	bgt.n	20ba2 <__aeabi_dsub+0x476>
   20ae0:	2720      	movs	r7, #32
   20ae2:	1af8      	subs	r0, r7, r3
   20ae4:	000f      	movs	r7, r1
   20ae6:	4684      	mov	ip, r0
   20ae8:	4087      	lsls	r7, r0
   20aea:	0010      	movs	r0, r2
   20aec:	40d8      	lsrs	r0, r3
   20aee:	4307      	orrs	r7, r0
   20af0:	4660      	mov	r0, ip
   20af2:	4082      	lsls	r2, r0
   20af4:	1e50      	subs	r0, r2, #1
   20af6:	4182      	sbcs	r2, r0
   20af8:	40d9      	lsrs	r1, r3
   20afa:	4317      	orrs	r7, r2
   20afc:	e6f5      	b.n	208ea <__aeabi_dsub+0x1be>
   20afe:	0026      	movs	r6, r4
   20b00:	4650      	mov	r0, sl
   20b02:	4306      	orrs	r6, r0
   20b04:	d005      	beq.n	20b12 <__aeabi_dsub+0x3e6>
   20b06:	43ed      	mvns	r5, r5
   20b08:	2d00      	cmp	r5, #0
   20b0a:	d0d3      	beq.n	20ab4 <__aeabi_dsub+0x388>
   20b0c:	4e90      	ldr	r6, [pc, #576]	; (20d50 <__aeabi_dsub+0x624>)
   20b0e:	45b4      	cmp	ip, r6
   20b10:	d1bd      	bne.n	20a8e <__aeabi_dsub+0x362>
   20b12:	000c      	movs	r4, r1
   20b14:	0017      	movs	r7, r2
   20b16:	4666      	mov	r6, ip
   20b18:	4698      	mov	r8, r3
   20b1a:	e68d      	b.n	20838 <__aeabi_dsub+0x10c>
   20b1c:	488c      	ldr	r0, [pc, #560]	; (20d50 <__aeabi_dsub+0x624>)
   20b1e:	4283      	cmp	r3, r0
   20b20:	d00b      	beq.n	20b3a <__aeabi_dsub+0x40e>
   20b22:	4663      	mov	r3, ip
   20b24:	e6d9      	b.n	208da <__aeabi_dsub+0x1ae>
   20b26:	2d00      	cmp	r5, #0
   20b28:	d000      	beq.n	20b2c <__aeabi_dsub+0x400>
   20b2a:	e096      	b.n	20c5a <__aeabi_dsub+0x52e>
   20b2c:	0008      	movs	r0, r1
   20b2e:	4310      	orrs	r0, r2
   20b30:	d100      	bne.n	20b34 <__aeabi_dsub+0x408>
   20b32:	e0e2      	b.n	20cfa <__aeabi_dsub+0x5ce>
   20b34:	000c      	movs	r4, r1
   20b36:	0017      	movs	r7, r2
   20b38:	4698      	mov	r8, r3
   20b3a:	4e85      	ldr	r6, [pc, #532]	; (20d50 <__aeabi_dsub+0x624>)
   20b3c:	e67c      	b.n	20838 <__aeabi_dsub+0x10c>
   20b3e:	2500      	movs	r5, #0
   20b40:	e780      	b.n	20a44 <__aeabi_dsub+0x318>
   20b42:	2100      	movs	r1, #0
   20b44:	e78e      	b.n	20a64 <__aeabi_dsub+0x338>
   20b46:	0023      	movs	r3, r4
   20b48:	4650      	mov	r0, sl
   20b4a:	4303      	orrs	r3, r0
   20b4c:	2e00      	cmp	r6, #0
   20b4e:	d000      	beq.n	20b52 <__aeabi_dsub+0x426>
   20b50:	e0a8      	b.n	20ca4 <__aeabi_dsub+0x578>
   20b52:	2b00      	cmp	r3, #0
   20b54:	d100      	bne.n	20b58 <__aeabi_dsub+0x42c>
   20b56:	e0de      	b.n	20d16 <__aeabi_dsub+0x5ea>
   20b58:	000b      	movs	r3, r1
   20b5a:	4313      	orrs	r3, r2
   20b5c:	d100      	bne.n	20b60 <__aeabi_dsub+0x434>
   20b5e:	e66b      	b.n	20838 <__aeabi_dsub+0x10c>
   20b60:	4452      	add	r2, sl
   20b62:	4552      	cmp	r2, sl
   20b64:	4180      	sbcs	r0, r0
   20b66:	1864      	adds	r4, r4, r1
   20b68:	4240      	negs	r0, r0
   20b6a:	1824      	adds	r4, r4, r0
   20b6c:	0017      	movs	r7, r2
   20b6e:	0223      	lsls	r3, r4, #8
   20b70:	d400      	bmi.n	20b74 <__aeabi_dsub+0x448>
   20b72:	e6fd      	b.n	20970 <__aeabi_dsub+0x244>
   20b74:	4b77      	ldr	r3, [pc, #476]	; (20d54 <__aeabi_dsub+0x628>)
   20b76:	4666      	mov	r6, ip
   20b78:	401c      	ands	r4, r3
   20b7a:	e65d      	b.n	20838 <__aeabi_dsub+0x10c>
   20b7c:	0025      	movs	r5, r4
   20b7e:	4650      	mov	r0, sl
   20b80:	4305      	orrs	r5, r0
   20b82:	2e00      	cmp	r6, #0
   20b84:	d1cf      	bne.n	20b26 <__aeabi_dsub+0x3fa>
   20b86:	2d00      	cmp	r5, #0
   20b88:	d14f      	bne.n	20c2a <__aeabi_dsub+0x4fe>
   20b8a:	000c      	movs	r4, r1
   20b8c:	4314      	orrs	r4, r2
   20b8e:	d100      	bne.n	20b92 <__aeabi_dsub+0x466>
   20b90:	e0a0      	b.n	20cd4 <__aeabi_dsub+0x5a8>
   20b92:	000c      	movs	r4, r1
   20b94:	0017      	movs	r7, r2
   20b96:	4698      	mov	r8, r3
   20b98:	e64e      	b.n	20838 <__aeabi_dsub+0x10c>
   20b9a:	4666      	mov	r6, ip
   20b9c:	2400      	movs	r4, #0
   20b9e:	2700      	movs	r7, #0
   20ba0:	e685      	b.n	208ae <__aeabi_dsub+0x182>
   20ba2:	001f      	movs	r7, r3
   20ba4:	0008      	movs	r0, r1
   20ba6:	3f20      	subs	r7, #32
   20ba8:	40f8      	lsrs	r0, r7
   20baa:	0007      	movs	r7, r0
   20bac:	2b20      	cmp	r3, #32
   20bae:	d100      	bne.n	20bb2 <__aeabi_dsub+0x486>
   20bb0:	e08e      	b.n	20cd0 <__aeabi_dsub+0x5a4>
   20bb2:	2040      	movs	r0, #64	; 0x40
   20bb4:	1ac3      	subs	r3, r0, r3
   20bb6:	4099      	lsls	r1, r3
   20bb8:	430a      	orrs	r2, r1
   20bba:	1e51      	subs	r1, r2, #1
   20bbc:	418a      	sbcs	r2, r1
   20bbe:	2100      	movs	r1, #0
   20bc0:	4317      	orrs	r7, r2
   20bc2:	e692      	b.n	208ea <__aeabi_dsub+0x1be>
   20bc4:	2e00      	cmp	r6, #0
   20bc6:	d114      	bne.n	20bf2 <__aeabi_dsub+0x4c6>
   20bc8:	0026      	movs	r6, r4
   20bca:	4650      	mov	r0, sl
   20bcc:	4306      	orrs	r6, r0
   20bce:	d062      	beq.n	20c96 <__aeabi_dsub+0x56a>
   20bd0:	43db      	mvns	r3, r3
   20bd2:	2b00      	cmp	r3, #0
   20bd4:	d15c      	bne.n	20c90 <__aeabi_dsub+0x564>
   20bd6:	1887      	adds	r7, r0, r2
   20bd8:	4297      	cmp	r7, r2
   20bda:	4192      	sbcs	r2, r2
   20bdc:	1864      	adds	r4, r4, r1
   20bde:	4252      	negs	r2, r2
   20be0:	18a4      	adds	r4, r4, r2
   20be2:	4666      	mov	r6, ip
   20be4:	e687      	b.n	208f6 <__aeabi_dsub+0x1ca>
   20be6:	4650      	mov	r0, sl
   20be8:	4320      	orrs	r0, r4
   20bea:	1e44      	subs	r4, r0, #1
   20bec:	41a0      	sbcs	r0, r4
   20bee:	2400      	movs	r4, #0
   20bf0:	e760      	b.n	20ab4 <__aeabi_dsub+0x388>
   20bf2:	4e57      	ldr	r6, [pc, #348]	; (20d50 <__aeabi_dsub+0x624>)
   20bf4:	45b4      	cmp	ip, r6
   20bf6:	d04e      	beq.n	20c96 <__aeabi_dsub+0x56a>
   20bf8:	2680      	movs	r6, #128	; 0x80
   20bfa:	0436      	lsls	r6, r6, #16
   20bfc:	425b      	negs	r3, r3
   20bfe:	4334      	orrs	r4, r6
   20c00:	2b38      	cmp	r3, #56	; 0x38
   20c02:	dd00      	ble.n	20c06 <__aeabi_dsub+0x4da>
   20c04:	e07f      	b.n	20d06 <__aeabi_dsub+0x5da>
   20c06:	2b1f      	cmp	r3, #31
   20c08:	dd00      	ble.n	20c0c <__aeabi_dsub+0x4e0>
   20c0a:	e08b      	b.n	20d24 <__aeabi_dsub+0x5f8>
   20c0c:	2620      	movs	r6, #32
   20c0e:	0027      	movs	r7, r4
   20c10:	4650      	mov	r0, sl
   20c12:	1af6      	subs	r6, r6, r3
   20c14:	40b7      	lsls	r7, r6
   20c16:	40d8      	lsrs	r0, r3
   20c18:	4307      	orrs	r7, r0
   20c1a:	4650      	mov	r0, sl
   20c1c:	40b0      	lsls	r0, r6
   20c1e:	1e46      	subs	r6, r0, #1
   20c20:	41b0      	sbcs	r0, r6
   20c22:	4307      	orrs	r7, r0
   20c24:	40dc      	lsrs	r4, r3
   20c26:	18bf      	adds	r7, r7, r2
   20c28:	e7d6      	b.n	20bd8 <__aeabi_dsub+0x4ac>
   20c2a:	000d      	movs	r5, r1
   20c2c:	4315      	orrs	r5, r2
   20c2e:	d100      	bne.n	20c32 <__aeabi_dsub+0x506>
   20c30:	e602      	b.n	20838 <__aeabi_dsub+0x10c>
   20c32:	4650      	mov	r0, sl
   20c34:	1a80      	subs	r0, r0, r2
   20c36:	4582      	cmp	sl, r0
   20c38:	41bf      	sbcs	r7, r7
   20c3a:	1a65      	subs	r5, r4, r1
   20c3c:	427f      	negs	r7, r7
   20c3e:	1bed      	subs	r5, r5, r7
   20c40:	4684      	mov	ip, r0
   20c42:	0228      	lsls	r0, r5, #8
   20c44:	d400      	bmi.n	20c48 <__aeabi_dsub+0x51c>
   20c46:	e68d      	b.n	20964 <__aeabi_dsub+0x238>
   20c48:	4650      	mov	r0, sl
   20c4a:	1a17      	subs	r7, r2, r0
   20c4c:	42ba      	cmp	r2, r7
   20c4e:	4192      	sbcs	r2, r2
   20c50:	1b0c      	subs	r4, r1, r4
   20c52:	4252      	negs	r2, r2
   20c54:	1aa4      	subs	r4, r4, r2
   20c56:	4698      	mov	r8, r3
   20c58:	e5ee      	b.n	20838 <__aeabi_dsub+0x10c>
   20c5a:	000d      	movs	r5, r1
   20c5c:	4315      	orrs	r5, r2
   20c5e:	d100      	bne.n	20c62 <__aeabi_dsub+0x536>
   20c60:	e76b      	b.n	20b3a <__aeabi_dsub+0x40e>
   20c62:	4650      	mov	r0, sl
   20c64:	0767      	lsls	r7, r4, #29
   20c66:	08c0      	lsrs	r0, r0, #3
   20c68:	4307      	orrs	r7, r0
   20c6a:	2080      	movs	r0, #128	; 0x80
   20c6c:	08e4      	lsrs	r4, r4, #3
   20c6e:	0300      	lsls	r0, r0, #12
   20c70:	4204      	tst	r4, r0
   20c72:	d007      	beq.n	20c84 <__aeabi_dsub+0x558>
   20c74:	08cd      	lsrs	r5, r1, #3
   20c76:	4205      	tst	r5, r0
   20c78:	d104      	bne.n	20c84 <__aeabi_dsub+0x558>
   20c7a:	002c      	movs	r4, r5
   20c7c:	4698      	mov	r8, r3
   20c7e:	08d7      	lsrs	r7, r2, #3
   20c80:	0749      	lsls	r1, r1, #29
   20c82:	430f      	orrs	r7, r1
   20c84:	0f7b      	lsrs	r3, r7, #29
   20c86:	00e4      	lsls	r4, r4, #3
   20c88:	431c      	orrs	r4, r3
   20c8a:	00ff      	lsls	r7, r7, #3
   20c8c:	4e30      	ldr	r6, [pc, #192]	; (20d50 <__aeabi_dsub+0x624>)
   20c8e:	e5d3      	b.n	20838 <__aeabi_dsub+0x10c>
   20c90:	4e2f      	ldr	r6, [pc, #188]	; (20d50 <__aeabi_dsub+0x624>)
   20c92:	45b4      	cmp	ip, r6
   20c94:	d1b4      	bne.n	20c00 <__aeabi_dsub+0x4d4>
   20c96:	000c      	movs	r4, r1
   20c98:	0017      	movs	r7, r2
   20c9a:	4666      	mov	r6, ip
   20c9c:	e5cc      	b.n	20838 <__aeabi_dsub+0x10c>
   20c9e:	2700      	movs	r7, #0
   20ca0:	2400      	movs	r4, #0
   20ca2:	e5e8      	b.n	20876 <__aeabi_dsub+0x14a>
   20ca4:	2b00      	cmp	r3, #0
   20ca6:	d039      	beq.n	20d1c <__aeabi_dsub+0x5f0>
   20ca8:	000b      	movs	r3, r1
   20caa:	4313      	orrs	r3, r2
   20cac:	d100      	bne.n	20cb0 <__aeabi_dsub+0x584>
   20cae:	e744      	b.n	20b3a <__aeabi_dsub+0x40e>
   20cb0:	08c0      	lsrs	r0, r0, #3
   20cb2:	0767      	lsls	r7, r4, #29
   20cb4:	4307      	orrs	r7, r0
   20cb6:	2080      	movs	r0, #128	; 0x80
   20cb8:	08e4      	lsrs	r4, r4, #3
   20cba:	0300      	lsls	r0, r0, #12
   20cbc:	4204      	tst	r4, r0
   20cbe:	d0e1      	beq.n	20c84 <__aeabi_dsub+0x558>
   20cc0:	08cb      	lsrs	r3, r1, #3
   20cc2:	4203      	tst	r3, r0
   20cc4:	d1de      	bne.n	20c84 <__aeabi_dsub+0x558>
   20cc6:	08d7      	lsrs	r7, r2, #3
   20cc8:	0749      	lsls	r1, r1, #29
   20cca:	430f      	orrs	r7, r1
   20ccc:	001c      	movs	r4, r3
   20cce:	e7d9      	b.n	20c84 <__aeabi_dsub+0x558>
   20cd0:	2100      	movs	r1, #0
   20cd2:	e771      	b.n	20bb8 <__aeabi_dsub+0x48c>
   20cd4:	2500      	movs	r5, #0
   20cd6:	2700      	movs	r7, #0
   20cd8:	e5e9      	b.n	208ae <__aeabi_dsub+0x182>
   20cda:	002e      	movs	r6, r5
   20cdc:	0027      	movs	r7, r4
   20cde:	3e20      	subs	r6, #32
   20ce0:	40f7      	lsrs	r7, r6
   20ce2:	2d20      	cmp	r5, #32
   20ce4:	d02f      	beq.n	20d46 <__aeabi_dsub+0x61a>
   20ce6:	2640      	movs	r6, #64	; 0x40
   20ce8:	1b75      	subs	r5, r6, r5
   20cea:	40ac      	lsls	r4, r5
   20cec:	4650      	mov	r0, sl
   20cee:	4320      	orrs	r0, r4
   20cf0:	1e44      	subs	r4, r0, #1
   20cf2:	41a0      	sbcs	r0, r4
   20cf4:	2400      	movs	r4, #0
   20cf6:	4338      	orrs	r0, r7
   20cf8:	e6dc      	b.n	20ab4 <__aeabi_dsub+0x388>
   20cfa:	2480      	movs	r4, #128	; 0x80
   20cfc:	2500      	movs	r5, #0
   20cfe:	0324      	lsls	r4, r4, #12
   20d00:	4e13      	ldr	r6, [pc, #76]	; (20d50 <__aeabi_dsub+0x624>)
   20d02:	2700      	movs	r7, #0
   20d04:	e5d3      	b.n	208ae <__aeabi_dsub+0x182>
   20d06:	4650      	mov	r0, sl
   20d08:	4320      	orrs	r0, r4
   20d0a:	0007      	movs	r7, r0
   20d0c:	1e78      	subs	r0, r7, #1
   20d0e:	4187      	sbcs	r7, r0
   20d10:	2400      	movs	r4, #0
   20d12:	18bf      	adds	r7, r7, r2
   20d14:	e760      	b.n	20bd8 <__aeabi_dsub+0x4ac>
   20d16:	000c      	movs	r4, r1
   20d18:	0017      	movs	r7, r2
   20d1a:	e58d      	b.n	20838 <__aeabi_dsub+0x10c>
   20d1c:	000c      	movs	r4, r1
   20d1e:	0017      	movs	r7, r2
   20d20:	4e0b      	ldr	r6, [pc, #44]	; (20d50 <__aeabi_dsub+0x624>)
   20d22:	e589      	b.n	20838 <__aeabi_dsub+0x10c>
   20d24:	001e      	movs	r6, r3
   20d26:	0027      	movs	r7, r4
   20d28:	3e20      	subs	r6, #32
   20d2a:	40f7      	lsrs	r7, r6
   20d2c:	2b20      	cmp	r3, #32
   20d2e:	d00c      	beq.n	20d4a <__aeabi_dsub+0x61e>
   20d30:	2640      	movs	r6, #64	; 0x40
   20d32:	1af3      	subs	r3, r6, r3
   20d34:	409c      	lsls	r4, r3
   20d36:	4650      	mov	r0, sl
   20d38:	4320      	orrs	r0, r4
   20d3a:	1e44      	subs	r4, r0, #1
   20d3c:	41a0      	sbcs	r0, r4
   20d3e:	4307      	orrs	r7, r0
   20d40:	2400      	movs	r4, #0
   20d42:	18bf      	adds	r7, r7, r2
   20d44:	e748      	b.n	20bd8 <__aeabi_dsub+0x4ac>
   20d46:	2400      	movs	r4, #0
   20d48:	e7d0      	b.n	20cec <__aeabi_dsub+0x5c0>
   20d4a:	2400      	movs	r4, #0
   20d4c:	e7f3      	b.n	20d36 <__aeabi_dsub+0x60a>
   20d4e:	46c0      	nop			; (mov r8, r8)
   20d50:	000007ff 	.word	0x000007ff
   20d54:	ff7fffff 	.word	0xff7fffff

00020d58 <__aeabi_d2iz>:
   20d58:	b530      	push	{r4, r5, lr}
   20d5a:	4d13      	ldr	r5, [pc, #76]	; (20da8 <__aeabi_d2iz+0x50>)
   20d5c:	030a      	lsls	r2, r1, #12
   20d5e:	004b      	lsls	r3, r1, #1
   20d60:	0b12      	lsrs	r2, r2, #12
   20d62:	0d5b      	lsrs	r3, r3, #21
   20d64:	0fc9      	lsrs	r1, r1, #31
   20d66:	2400      	movs	r4, #0
   20d68:	42ab      	cmp	r3, r5
   20d6a:	dd10      	ble.n	20d8e <__aeabi_d2iz+0x36>
   20d6c:	4c0f      	ldr	r4, [pc, #60]	; (20dac <__aeabi_d2iz+0x54>)
   20d6e:	42a3      	cmp	r3, r4
   20d70:	dc0f      	bgt.n	20d92 <__aeabi_d2iz+0x3a>
   20d72:	2480      	movs	r4, #128	; 0x80
   20d74:	4d0e      	ldr	r5, [pc, #56]	; (20db0 <__aeabi_d2iz+0x58>)
   20d76:	0364      	lsls	r4, r4, #13
   20d78:	4322      	orrs	r2, r4
   20d7a:	1aed      	subs	r5, r5, r3
   20d7c:	2d1f      	cmp	r5, #31
   20d7e:	dd0b      	ble.n	20d98 <__aeabi_d2iz+0x40>
   20d80:	480c      	ldr	r0, [pc, #48]	; (20db4 <__aeabi_d2iz+0x5c>)
   20d82:	1ac3      	subs	r3, r0, r3
   20d84:	40da      	lsrs	r2, r3
   20d86:	4254      	negs	r4, r2
   20d88:	2900      	cmp	r1, #0
   20d8a:	d100      	bne.n	20d8e <__aeabi_d2iz+0x36>
   20d8c:	0014      	movs	r4, r2
   20d8e:	0020      	movs	r0, r4
   20d90:	bd30      	pop	{r4, r5, pc}
   20d92:	4b09      	ldr	r3, [pc, #36]	; (20db8 <__aeabi_d2iz+0x60>)
   20d94:	18cc      	adds	r4, r1, r3
   20d96:	e7fa      	b.n	20d8e <__aeabi_d2iz+0x36>
   20d98:	4c08      	ldr	r4, [pc, #32]	; (20dbc <__aeabi_d2iz+0x64>)
   20d9a:	40e8      	lsrs	r0, r5
   20d9c:	46a4      	mov	ip, r4
   20d9e:	4463      	add	r3, ip
   20da0:	409a      	lsls	r2, r3
   20da2:	4302      	orrs	r2, r0
   20da4:	e7ef      	b.n	20d86 <__aeabi_d2iz+0x2e>
   20da6:	46c0      	nop			; (mov r8, r8)
   20da8:	000003fe 	.word	0x000003fe
   20dac:	0000041d 	.word	0x0000041d
   20db0:	00000433 	.word	0x00000433
   20db4:	00000413 	.word	0x00000413
   20db8:	7fffffff 	.word	0x7fffffff
   20dbc:	fffffbed 	.word	0xfffffbed

00020dc0 <__aeabi_ui2d>:
   20dc0:	b510      	push	{r4, lr}
   20dc2:	1e04      	subs	r4, r0, #0
   20dc4:	d028      	beq.n	20e18 <__aeabi_ui2d+0x58>
   20dc6:	f000 f833 	bl	20e30 <__clzsi2>
   20dca:	4b15      	ldr	r3, [pc, #84]	; (20e20 <__aeabi_ui2d+0x60>)
   20dcc:	4a15      	ldr	r2, [pc, #84]	; (20e24 <__aeabi_ui2d+0x64>)
   20dce:	1a1b      	subs	r3, r3, r0
   20dd0:	1ad2      	subs	r2, r2, r3
   20dd2:	2a1f      	cmp	r2, #31
   20dd4:	dd15      	ble.n	20e02 <__aeabi_ui2d+0x42>
   20dd6:	4a14      	ldr	r2, [pc, #80]	; (20e28 <__aeabi_ui2d+0x68>)
   20dd8:	1ad2      	subs	r2, r2, r3
   20dda:	4094      	lsls	r4, r2
   20ddc:	2200      	movs	r2, #0
   20dde:	0324      	lsls	r4, r4, #12
   20de0:	055b      	lsls	r3, r3, #21
   20de2:	0b24      	lsrs	r4, r4, #12
   20de4:	0d5b      	lsrs	r3, r3, #21
   20de6:	2100      	movs	r1, #0
   20de8:	0010      	movs	r0, r2
   20dea:	0324      	lsls	r4, r4, #12
   20dec:	0d0a      	lsrs	r2, r1, #20
   20dee:	0b24      	lsrs	r4, r4, #12
   20df0:	0512      	lsls	r2, r2, #20
   20df2:	4322      	orrs	r2, r4
   20df4:	4c0d      	ldr	r4, [pc, #52]	; (20e2c <__aeabi_ui2d+0x6c>)
   20df6:	051b      	lsls	r3, r3, #20
   20df8:	4022      	ands	r2, r4
   20dfa:	4313      	orrs	r3, r2
   20dfc:	005b      	lsls	r3, r3, #1
   20dfe:	0859      	lsrs	r1, r3, #1
   20e00:	bd10      	pop	{r4, pc}
   20e02:	0021      	movs	r1, r4
   20e04:	4091      	lsls	r1, r2
   20e06:	000a      	movs	r2, r1
   20e08:	210b      	movs	r1, #11
   20e0a:	1a08      	subs	r0, r1, r0
   20e0c:	40c4      	lsrs	r4, r0
   20e0e:	055b      	lsls	r3, r3, #21
   20e10:	0324      	lsls	r4, r4, #12
   20e12:	0b24      	lsrs	r4, r4, #12
   20e14:	0d5b      	lsrs	r3, r3, #21
   20e16:	e7e6      	b.n	20de6 <__aeabi_ui2d+0x26>
   20e18:	2300      	movs	r3, #0
   20e1a:	2400      	movs	r4, #0
   20e1c:	2200      	movs	r2, #0
   20e1e:	e7e2      	b.n	20de6 <__aeabi_ui2d+0x26>
   20e20:	0000041e 	.word	0x0000041e
   20e24:	00000433 	.word	0x00000433
   20e28:	00000413 	.word	0x00000413
   20e2c:	800fffff 	.word	0x800fffff

00020e30 <__clzsi2>:
   20e30:	211c      	movs	r1, #28
   20e32:	2301      	movs	r3, #1
   20e34:	041b      	lsls	r3, r3, #16
   20e36:	4298      	cmp	r0, r3
   20e38:	d301      	bcc.n	20e3e <__clzsi2+0xe>
   20e3a:	0c00      	lsrs	r0, r0, #16
   20e3c:	3910      	subs	r1, #16
   20e3e:	0a1b      	lsrs	r3, r3, #8
   20e40:	4298      	cmp	r0, r3
   20e42:	d301      	bcc.n	20e48 <__clzsi2+0x18>
   20e44:	0a00      	lsrs	r0, r0, #8
   20e46:	3908      	subs	r1, #8
   20e48:	091b      	lsrs	r3, r3, #4
   20e4a:	4298      	cmp	r0, r3
   20e4c:	d301      	bcc.n	20e52 <__clzsi2+0x22>
   20e4e:	0900      	lsrs	r0, r0, #4
   20e50:	3904      	subs	r1, #4
   20e52:	a202      	add	r2, pc, #8	; (adr r2, 20e5c <__clzsi2+0x2c>)
   20e54:	5c10      	ldrb	r0, [r2, r0]
   20e56:	1840      	adds	r0, r0, r1
   20e58:	4770      	bx	lr
   20e5a:	46c0      	nop			; (mov r8, r8)
   20e5c:	02020304 	.word	0x02020304
   20e60:	01010101 	.word	0x01010101
	...

00020e6c <atoi>:
   20e6c:	b510      	push	{r4, lr}
   20e6e:	220a      	movs	r2, #10
   20e70:	2100      	movs	r1, #0
   20e72:	f000 fb0d 	bl	21490 <strtol>
   20e76:	bd10      	pop	{r4, pc}

00020e78 <__libc_init_array>:
   20e78:	b570      	push	{r4, r5, r6, lr}
   20e7a:	2600      	movs	r6, #0
   20e7c:	4d0c      	ldr	r5, [pc, #48]	; (20eb0 <__libc_init_array+0x38>)
   20e7e:	4c0d      	ldr	r4, [pc, #52]	; (20eb4 <__libc_init_array+0x3c>)
   20e80:	1b64      	subs	r4, r4, r5
   20e82:	10a4      	asrs	r4, r4, #2
   20e84:	42a6      	cmp	r6, r4
   20e86:	d109      	bne.n	20e9c <__libc_init_array+0x24>
   20e88:	2600      	movs	r6, #0
   20e8a:	f005 faf9 	bl	26480 <_init>
   20e8e:	4d0a      	ldr	r5, [pc, #40]	; (20eb8 <__libc_init_array+0x40>)
   20e90:	4c0a      	ldr	r4, [pc, #40]	; (20ebc <__libc_init_array+0x44>)
   20e92:	1b64      	subs	r4, r4, r5
   20e94:	10a4      	asrs	r4, r4, #2
   20e96:	42a6      	cmp	r6, r4
   20e98:	d105      	bne.n	20ea6 <__libc_init_array+0x2e>
   20e9a:	bd70      	pop	{r4, r5, r6, pc}
   20e9c:	00b3      	lsls	r3, r6, #2
   20e9e:	58eb      	ldr	r3, [r5, r3]
   20ea0:	4798      	blx	r3
   20ea2:	3601      	adds	r6, #1
   20ea4:	e7ee      	b.n	20e84 <__libc_init_array+0xc>
   20ea6:	00b3      	lsls	r3, r6, #2
   20ea8:	58eb      	ldr	r3, [r5, r3]
   20eaa:	4798      	blx	r3
   20eac:	3601      	adds	r6, #1
   20eae:	e7f2      	b.n	20e96 <__libc_init_array+0x1e>
   20eb0:	0002648c 	.word	0x0002648c
   20eb4:	0002648c 	.word	0x0002648c
   20eb8:	0002648c 	.word	0x0002648c
   20ebc:	00026490 	.word	0x00026490

00020ec0 <malloc>:
   20ec0:	b510      	push	{r4, lr}
   20ec2:	4b03      	ldr	r3, [pc, #12]	; (20ed0 <malloc+0x10>)
   20ec4:	0001      	movs	r1, r0
   20ec6:	6818      	ldr	r0, [r3, #0]
   20ec8:	f000 f87c 	bl	20fc4 <_malloc_r>
   20ecc:	bd10      	pop	{r4, pc}
   20ece:	46c0      	nop			; (mov r8, r8)
   20ed0:	2000012c 	.word	0x2000012c

00020ed4 <free>:
   20ed4:	b510      	push	{r4, lr}
   20ed6:	4b03      	ldr	r3, [pc, #12]	; (20ee4 <free+0x10>)
   20ed8:	0001      	movs	r1, r0
   20eda:	6818      	ldr	r0, [r3, #0]
   20edc:	f000 f828 	bl	20f30 <_free_r>
   20ee0:	bd10      	pop	{r4, pc}
   20ee2:	46c0      	nop			; (mov r8, r8)
   20ee4:	2000012c 	.word	0x2000012c

00020ee8 <memcpy>:
   20ee8:	2300      	movs	r3, #0
   20eea:	b510      	push	{r4, lr}
   20eec:	429a      	cmp	r2, r3
   20eee:	d100      	bne.n	20ef2 <memcpy+0xa>
   20ef0:	bd10      	pop	{r4, pc}
   20ef2:	5ccc      	ldrb	r4, [r1, r3]
   20ef4:	54c4      	strb	r4, [r0, r3]
   20ef6:	3301      	adds	r3, #1
   20ef8:	e7f8      	b.n	20eec <memcpy+0x4>

00020efa <memmove>:
   20efa:	b510      	push	{r4, lr}
   20efc:	4288      	cmp	r0, r1
   20efe:	d902      	bls.n	20f06 <memmove+0xc>
   20f00:	188b      	adds	r3, r1, r2
   20f02:	4298      	cmp	r0, r3
   20f04:	d308      	bcc.n	20f18 <memmove+0x1e>
   20f06:	2300      	movs	r3, #0
   20f08:	429a      	cmp	r2, r3
   20f0a:	d007      	beq.n	20f1c <memmove+0x22>
   20f0c:	5ccc      	ldrb	r4, [r1, r3]
   20f0e:	54c4      	strb	r4, [r0, r3]
   20f10:	3301      	adds	r3, #1
   20f12:	e7f9      	b.n	20f08 <memmove+0xe>
   20f14:	5c8b      	ldrb	r3, [r1, r2]
   20f16:	5483      	strb	r3, [r0, r2]
   20f18:	3a01      	subs	r2, #1
   20f1a:	d2fb      	bcs.n	20f14 <memmove+0x1a>
   20f1c:	bd10      	pop	{r4, pc}

00020f1e <memset>:
   20f1e:	0003      	movs	r3, r0
   20f20:	1882      	adds	r2, r0, r2
   20f22:	4293      	cmp	r3, r2
   20f24:	d100      	bne.n	20f28 <memset+0xa>
   20f26:	4770      	bx	lr
   20f28:	7019      	strb	r1, [r3, #0]
   20f2a:	3301      	adds	r3, #1
   20f2c:	e7f9      	b.n	20f22 <memset+0x4>
	...

00020f30 <_free_r>:
   20f30:	b570      	push	{r4, r5, r6, lr}
   20f32:	0005      	movs	r5, r0
   20f34:	2900      	cmp	r1, #0
   20f36:	d010      	beq.n	20f5a <_free_r+0x2a>
   20f38:	1f0c      	subs	r4, r1, #4
   20f3a:	6823      	ldr	r3, [r4, #0]
   20f3c:	2b00      	cmp	r3, #0
   20f3e:	da00      	bge.n	20f42 <_free_r+0x12>
   20f40:	18e4      	adds	r4, r4, r3
   20f42:	0028      	movs	r0, r5
   20f44:	f000 fdd8 	bl	21af8 <__malloc_lock>
   20f48:	4a1d      	ldr	r2, [pc, #116]	; (20fc0 <_free_r+0x90>)
   20f4a:	6813      	ldr	r3, [r2, #0]
   20f4c:	2b00      	cmp	r3, #0
   20f4e:	d105      	bne.n	20f5c <_free_r+0x2c>
   20f50:	6063      	str	r3, [r4, #4]
   20f52:	6014      	str	r4, [r2, #0]
   20f54:	0028      	movs	r0, r5
   20f56:	f000 fdd0 	bl	21afa <__malloc_unlock>
   20f5a:	bd70      	pop	{r4, r5, r6, pc}
   20f5c:	42a3      	cmp	r3, r4
   20f5e:	d909      	bls.n	20f74 <_free_r+0x44>
   20f60:	6821      	ldr	r1, [r4, #0]
   20f62:	1860      	adds	r0, r4, r1
   20f64:	4283      	cmp	r3, r0
   20f66:	d1f3      	bne.n	20f50 <_free_r+0x20>
   20f68:	6818      	ldr	r0, [r3, #0]
   20f6a:	685b      	ldr	r3, [r3, #4]
   20f6c:	1841      	adds	r1, r0, r1
   20f6e:	6021      	str	r1, [r4, #0]
   20f70:	e7ee      	b.n	20f50 <_free_r+0x20>
   20f72:	0013      	movs	r3, r2
   20f74:	685a      	ldr	r2, [r3, #4]
   20f76:	2a00      	cmp	r2, #0
   20f78:	d001      	beq.n	20f7e <_free_r+0x4e>
   20f7a:	42a2      	cmp	r2, r4
   20f7c:	d9f9      	bls.n	20f72 <_free_r+0x42>
   20f7e:	6819      	ldr	r1, [r3, #0]
   20f80:	1858      	adds	r0, r3, r1
   20f82:	42a0      	cmp	r0, r4
   20f84:	d10b      	bne.n	20f9e <_free_r+0x6e>
   20f86:	6820      	ldr	r0, [r4, #0]
   20f88:	1809      	adds	r1, r1, r0
   20f8a:	1858      	adds	r0, r3, r1
   20f8c:	6019      	str	r1, [r3, #0]
   20f8e:	4282      	cmp	r2, r0
   20f90:	d1e0      	bne.n	20f54 <_free_r+0x24>
   20f92:	6810      	ldr	r0, [r2, #0]
   20f94:	6852      	ldr	r2, [r2, #4]
   20f96:	1841      	adds	r1, r0, r1
   20f98:	6019      	str	r1, [r3, #0]
   20f9a:	605a      	str	r2, [r3, #4]
   20f9c:	e7da      	b.n	20f54 <_free_r+0x24>
   20f9e:	42a0      	cmp	r0, r4
   20fa0:	d902      	bls.n	20fa8 <_free_r+0x78>
   20fa2:	230c      	movs	r3, #12
   20fa4:	602b      	str	r3, [r5, #0]
   20fa6:	e7d5      	b.n	20f54 <_free_r+0x24>
   20fa8:	6821      	ldr	r1, [r4, #0]
   20faa:	1860      	adds	r0, r4, r1
   20fac:	4282      	cmp	r2, r0
   20fae:	d103      	bne.n	20fb8 <_free_r+0x88>
   20fb0:	6810      	ldr	r0, [r2, #0]
   20fb2:	6852      	ldr	r2, [r2, #4]
   20fb4:	1841      	adds	r1, r0, r1
   20fb6:	6021      	str	r1, [r4, #0]
   20fb8:	6062      	str	r2, [r4, #4]
   20fba:	605c      	str	r4, [r3, #4]
   20fbc:	e7ca      	b.n	20f54 <_free_r+0x24>
   20fbe:	46c0      	nop			; (mov r8, r8)
   20fc0:	200041ac 	.word	0x200041ac

00020fc4 <_malloc_r>:
   20fc4:	2303      	movs	r3, #3
   20fc6:	b570      	push	{r4, r5, r6, lr}
   20fc8:	1ccd      	adds	r5, r1, #3
   20fca:	439d      	bics	r5, r3
   20fcc:	3508      	adds	r5, #8
   20fce:	0006      	movs	r6, r0
   20fd0:	2d0c      	cmp	r5, #12
   20fd2:	d21e      	bcs.n	21012 <_malloc_r+0x4e>
   20fd4:	250c      	movs	r5, #12
   20fd6:	42a9      	cmp	r1, r5
   20fd8:	d81d      	bhi.n	21016 <_malloc_r+0x52>
   20fda:	0030      	movs	r0, r6
   20fdc:	f000 fd8c 	bl	21af8 <__malloc_lock>
   20fe0:	4a25      	ldr	r2, [pc, #148]	; (21078 <_malloc_r+0xb4>)
   20fe2:	6814      	ldr	r4, [r2, #0]
   20fe4:	0021      	movs	r1, r4
   20fe6:	2900      	cmp	r1, #0
   20fe8:	d119      	bne.n	2101e <_malloc_r+0x5a>
   20fea:	4c24      	ldr	r4, [pc, #144]	; (2107c <_malloc_r+0xb8>)
   20fec:	6823      	ldr	r3, [r4, #0]
   20fee:	2b00      	cmp	r3, #0
   20ff0:	d103      	bne.n	20ffa <_malloc_r+0x36>
   20ff2:	0030      	movs	r0, r6
   20ff4:	f000 f8ae 	bl	21154 <_sbrk_r>
   20ff8:	6020      	str	r0, [r4, #0]
   20ffa:	0029      	movs	r1, r5
   20ffc:	0030      	movs	r0, r6
   20ffe:	f000 f8a9 	bl	21154 <_sbrk_r>
   21002:	1c43      	adds	r3, r0, #1
   21004:	d12c      	bne.n	21060 <_malloc_r+0x9c>
   21006:	230c      	movs	r3, #12
   21008:	0030      	movs	r0, r6
   2100a:	6033      	str	r3, [r6, #0]
   2100c:	f000 fd75 	bl	21afa <__malloc_unlock>
   21010:	e003      	b.n	2101a <_malloc_r+0x56>
   21012:	2d00      	cmp	r5, #0
   21014:	dadf      	bge.n	20fd6 <_malloc_r+0x12>
   21016:	230c      	movs	r3, #12
   21018:	6033      	str	r3, [r6, #0]
   2101a:	2000      	movs	r0, #0
   2101c:	bd70      	pop	{r4, r5, r6, pc}
   2101e:	680b      	ldr	r3, [r1, #0]
   21020:	1b5b      	subs	r3, r3, r5
   21022:	d41a      	bmi.n	2105a <_malloc_r+0x96>
   21024:	2b0b      	cmp	r3, #11
   21026:	d903      	bls.n	21030 <_malloc_r+0x6c>
   21028:	600b      	str	r3, [r1, #0]
   2102a:	18cc      	adds	r4, r1, r3
   2102c:	6025      	str	r5, [r4, #0]
   2102e:	e003      	b.n	21038 <_malloc_r+0x74>
   21030:	428c      	cmp	r4, r1
   21032:	d10e      	bne.n	21052 <_malloc_r+0x8e>
   21034:	6863      	ldr	r3, [r4, #4]
   21036:	6013      	str	r3, [r2, #0]
   21038:	0030      	movs	r0, r6
   2103a:	f000 fd5e 	bl	21afa <__malloc_unlock>
   2103e:	0020      	movs	r0, r4
   21040:	2207      	movs	r2, #7
   21042:	300b      	adds	r0, #11
   21044:	1d23      	adds	r3, r4, #4
   21046:	4390      	bics	r0, r2
   21048:	1ac3      	subs	r3, r0, r3
   2104a:	d0e7      	beq.n	2101c <_malloc_r+0x58>
   2104c:	425a      	negs	r2, r3
   2104e:	50e2      	str	r2, [r4, r3]
   21050:	e7e4      	b.n	2101c <_malloc_r+0x58>
   21052:	684b      	ldr	r3, [r1, #4]
   21054:	6063      	str	r3, [r4, #4]
   21056:	000c      	movs	r4, r1
   21058:	e7ee      	b.n	21038 <_malloc_r+0x74>
   2105a:	000c      	movs	r4, r1
   2105c:	6849      	ldr	r1, [r1, #4]
   2105e:	e7c2      	b.n	20fe6 <_malloc_r+0x22>
   21060:	2303      	movs	r3, #3
   21062:	1cc4      	adds	r4, r0, #3
   21064:	439c      	bics	r4, r3
   21066:	42a0      	cmp	r0, r4
   21068:	d0e0      	beq.n	2102c <_malloc_r+0x68>
   2106a:	1a21      	subs	r1, r4, r0
   2106c:	0030      	movs	r0, r6
   2106e:	f000 f871 	bl	21154 <_sbrk_r>
   21072:	1c43      	adds	r3, r0, #1
   21074:	d1da      	bne.n	2102c <_malloc_r+0x68>
   21076:	e7c6      	b.n	21006 <_malloc_r+0x42>
   21078:	200041ac 	.word	0x200041ac
   2107c:	200041b0 	.word	0x200041b0

00021080 <_puts_r>:
   21080:	b570      	push	{r4, r5, r6, lr}
   21082:	0005      	movs	r5, r0
   21084:	000e      	movs	r6, r1
   21086:	2800      	cmp	r0, #0
   21088:	d004      	beq.n	21094 <_puts_r+0x14>
   2108a:	6983      	ldr	r3, [r0, #24]
   2108c:	2b00      	cmp	r3, #0
   2108e:	d101      	bne.n	21094 <_puts_r+0x14>
   21090:	f000 fc0e 	bl	218b0 <__sinit>
   21094:	69ab      	ldr	r3, [r5, #24]
   21096:	68ac      	ldr	r4, [r5, #8]
   21098:	2b00      	cmp	r3, #0
   2109a:	d102      	bne.n	210a2 <_puts_r+0x22>
   2109c:	0028      	movs	r0, r5
   2109e:	f000 fc07 	bl	218b0 <__sinit>
   210a2:	4b24      	ldr	r3, [pc, #144]	; (21134 <_puts_r+0xb4>)
   210a4:	429c      	cmp	r4, r3
   210a6:	d10f      	bne.n	210c8 <_puts_r+0x48>
   210a8:	686c      	ldr	r4, [r5, #4]
   210aa:	89a3      	ldrh	r3, [r4, #12]
   210ac:	071b      	lsls	r3, r3, #28
   210ae:	d502      	bpl.n	210b6 <_puts_r+0x36>
   210b0:	6923      	ldr	r3, [r4, #16]
   210b2:	2b00      	cmp	r3, #0
   210b4:	d120      	bne.n	210f8 <_puts_r+0x78>
   210b6:	0021      	movs	r1, r4
   210b8:	0028      	movs	r0, r5
   210ba:	f000 fa8b 	bl	215d4 <__swsetup_r>
   210be:	2800      	cmp	r0, #0
   210c0:	d01a      	beq.n	210f8 <_puts_r+0x78>
   210c2:	2001      	movs	r0, #1
   210c4:	4240      	negs	r0, r0
   210c6:	bd70      	pop	{r4, r5, r6, pc}
   210c8:	4b1b      	ldr	r3, [pc, #108]	; (21138 <_puts_r+0xb8>)
   210ca:	429c      	cmp	r4, r3
   210cc:	d101      	bne.n	210d2 <_puts_r+0x52>
   210ce:	68ac      	ldr	r4, [r5, #8]
   210d0:	e7eb      	b.n	210aa <_puts_r+0x2a>
   210d2:	4b1a      	ldr	r3, [pc, #104]	; (2113c <_puts_r+0xbc>)
   210d4:	429c      	cmp	r4, r3
   210d6:	d1e8      	bne.n	210aa <_puts_r+0x2a>
   210d8:	68ec      	ldr	r4, [r5, #12]
   210da:	e7e6      	b.n	210aa <_puts_r+0x2a>
   210dc:	3b01      	subs	r3, #1
   210de:	3601      	adds	r6, #1
   210e0:	60a3      	str	r3, [r4, #8]
   210e2:	2b00      	cmp	r3, #0
   210e4:	da04      	bge.n	210f0 <_puts_r+0x70>
   210e6:	69a2      	ldr	r2, [r4, #24]
   210e8:	4293      	cmp	r3, r2
   210ea:	db16      	blt.n	2111a <_puts_r+0x9a>
   210ec:	290a      	cmp	r1, #10
   210ee:	d014      	beq.n	2111a <_puts_r+0x9a>
   210f0:	6823      	ldr	r3, [r4, #0]
   210f2:	1c5a      	adds	r2, r3, #1
   210f4:	6022      	str	r2, [r4, #0]
   210f6:	7019      	strb	r1, [r3, #0]
   210f8:	7831      	ldrb	r1, [r6, #0]
   210fa:	68a3      	ldr	r3, [r4, #8]
   210fc:	2900      	cmp	r1, #0
   210fe:	d1ed      	bne.n	210dc <_puts_r+0x5c>
   21100:	3b01      	subs	r3, #1
   21102:	60a3      	str	r3, [r4, #8]
   21104:	2b00      	cmp	r3, #0
   21106:	da0f      	bge.n	21128 <_puts_r+0xa8>
   21108:	0022      	movs	r2, r4
   2110a:	310a      	adds	r1, #10
   2110c:	0028      	movs	r0, r5
   2110e:	f000 fa0b 	bl	21528 <__swbuf_r>
   21112:	1c43      	adds	r3, r0, #1
   21114:	d0d5      	beq.n	210c2 <_puts_r+0x42>
   21116:	200a      	movs	r0, #10
   21118:	e7d5      	b.n	210c6 <_puts_r+0x46>
   2111a:	0022      	movs	r2, r4
   2111c:	0028      	movs	r0, r5
   2111e:	f000 fa03 	bl	21528 <__swbuf_r>
   21122:	1c43      	adds	r3, r0, #1
   21124:	d1e8      	bne.n	210f8 <_puts_r+0x78>
   21126:	e7cc      	b.n	210c2 <_puts_r+0x42>
   21128:	200a      	movs	r0, #10
   2112a:	6823      	ldr	r3, [r4, #0]
   2112c:	1c5a      	adds	r2, r3, #1
   2112e:	6022      	str	r2, [r4, #0]
   21130:	7018      	strb	r0, [r3, #0]
   21132:	e7c8      	b.n	210c6 <_puts_r+0x46>
   21134:	00026300 	.word	0x00026300
   21138:	00026320 	.word	0x00026320
   2113c:	000262e0 	.word	0x000262e0

00021140 <puts>:
   21140:	b510      	push	{r4, lr}
   21142:	4b03      	ldr	r3, [pc, #12]	; (21150 <puts+0x10>)
   21144:	0001      	movs	r1, r0
   21146:	6818      	ldr	r0, [r3, #0]
   21148:	f7ff ff9a 	bl	21080 <_puts_r>
   2114c:	bd10      	pop	{r4, pc}
   2114e:	46c0      	nop			; (mov r8, r8)
   21150:	2000012c 	.word	0x2000012c

00021154 <_sbrk_r>:
   21154:	2300      	movs	r3, #0
   21156:	b570      	push	{r4, r5, r6, lr}
   21158:	4c06      	ldr	r4, [pc, #24]	; (21174 <_sbrk_r+0x20>)
   2115a:	0005      	movs	r5, r0
   2115c:	0008      	movs	r0, r1
   2115e:	6023      	str	r3, [r4, #0]
   21160:	f7f6 fb02 	bl	17768 <_sbrk>
   21164:	1c43      	adds	r3, r0, #1
   21166:	d103      	bne.n	21170 <_sbrk_r+0x1c>
   21168:	6823      	ldr	r3, [r4, #0]
   2116a:	2b00      	cmp	r3, #0
   2116c:	d000      	beq.n	21170 <_sbrk_r+0x1c>
   2116e:	602b      	str	r3, [r5, #0]
   21170:	bd70      	pop	{r4, r5, r6, pc}
   21172:	46c0      	nop			; (mov r8, r8)
   21174:	200056d0 	.word	0x200056d0

00021178 <sniprintf>:
   21178:	b40c      	push	{r2, r3}
   2117a:	b530      	push	{r4, r5, lr}
   2117c:	4b16      	ldr	r3, [pc, #88]	; (211d8 <sniprintf+0x60>)
   2117e:	b09d      	sub	sp, #116	; 0x74
   21180:	1e0c      	subs	r4, r1, #0
   21182:	681d      	ldr	r5, [r3, #0]
   21184:	da08      	bge.n	21198 <sniprintf+0x20>
   21186:	238b      	movs	r3, #139	; 0x8b
   21188:	2001      	movs	r0, #1
   2118a:	602b      	str	r3, [r5, #0]
   2118c:	4240      	negs	r0, r0
   2118e:	b01d      	add	sp, #116	; 0x74
   21190:	bc30      	pop	{r4, r5}
   21192:	bc08      	pop	{r3}
   21194:	b002      	add	sp, #8
   21196:	4718      	bx	r3
   21198:	2382      	movs	r3, #130	; 0x82
   2119a:	a902      	add	r1, sp, #8
   2119c:	009b      	lsls	r3, r3, #2
   2119e:	818b      	strh	r3, [r1, #12]
   211a0:	2300      	movs	r3, #0
   211a2:	9002      	str	r0, [sp, #8]
   211a4:	6108      	str	r0, [r1, #16]
   211a6:	429c      	cmp	r4, r3
   211a8:	d000      	beq.n	211ac <sniprintf+0x34>
   211aa:	1e63      	subs	r3, r4, #1
   211ac:	608b      	str	r3, [r1, #8]
   211ae:	614b      	str	r3, [r1, #20]
   211b0:	2301      	movs	r3, #1
   211b2:	425b      	negs	r3, r3
   211b4:	81cb      	strh	r3, [r1, #14]
   211b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   211b8:	ab21      	add	r3, sp, #132	; 0x84
   211ba:	0028      	movs	r0, r5
   211bc:	9301      	str	r3, [sp, #4]
   211be:	f000 fcff 	bl	21bc0 <_svfiprintf_r>
   211c2:	1c43      	adds	r3, r0, #1
   211c4:	da01      	bge.n	211ca <sniprintf+0x52>
   211c6:	238b      	movs	r3, #139	; 0x8b
   211c8:	602b      	str	r3, [r5, #0]
   211ca:	2c00      	cmp	r4, #0
   211cc:	d0df      	beq.n	2118e <sniprintf+0x16>
   211ce:	2300      	movs	r3, #0
   211d0:	9a02      	ldr	r2, [sp, #8]
   211d2:	7013      	strb	r3, [r2, #0]
   211d4:	e7db      	b.n	2118e <sniprintf+0x16>
   211d6:	46c0      	nop			; (mov r8, r8)
   211d8:	2000012c 	.word	0x2000012c

000211dc <siprintf>:
   211dc:	b40e      	push	{r1, r2, r3}
   211de:	b510      	push	{r4, lr}
   211e0:	b09d      	sub	sp, #116	; 0x74
   211e2:	a902      	add	r1, sp, #8
   211e4:	9002      	str	r0, [sp, #8]
   211e6:	6108      	str	r0, [r1, #16]
   211e8:	480b      	ldr	r0, [pc, #44]	; (21218 <siprintf+0x3c>)
   211ea:	2482      	movs	r4, #130	; 0x82
   211ec:	6088      	str	r0, [r1, #8]
   211ee:	6148      	str	r0, [r1, #20]
   211f0:	2001      	movs	r0, #1
   211f2:	4240      	negs	r0, r0
   211f4:	ab1f      	add	r3, sp, #124	; 0x7c
   211f6:	81c8      	strh	r0, [r1, #14]
   211f8:	4808      	ldr	r0, [pc, #32]	; (2121c <siprintf+0x40>)
   211fa:	cb04      	ldmia	r3!, {r2}
   211fc:	00a4      	lsls	r4, r4, #2
   211fe:	6800      	ldr	r0, [r0, #0]
   21200:	9301      	str	r3, [sp, #4]
   21202:	818c      	strh	r4, [r1, #12]
   21204:	f000 fcdc 	bl	21bc0 <_svfiprintf_r>
   21208:	2300      	movs	r3, #0
   2120a:	9a02      	ldr	r2, [sp, #8]
   2120c:	7013      	strb	r3, [r2, #0]
   2120e:	b01d      	add	sp, #116	; 0x74
   21210:	bc10      	pop	{r4}
   21212:	bc08      	pop	{r3}
   21214:	b003      	add	sp, #12
   21216:	4718      	bx	r3
   21218:	7fffffff 	.word	0x7fffffff
   2121c:	2000012c 	.word	0x2000012c

00021220 <strcasecmp>:
   21220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21222:	0007      	movs	r7, r0
   21224:	000e      	movs	r6, r1
   21226:	783c      	ldrb	r4, [r7, #0]
   21228:	f000 fbda 	bl	219e0 <__locale_ctype_ptr>
   2122c:	2203      	movs	r2, #3
   2122e:	1900      	adds	r0, r0, r4
   21230:	7843      	ldrb	r3, [r0, #1]
   21232:	4013      	ands	r3, r2
   21234:	2b01      	cmp	r3, #1
   21236:	d100      	bne.n	2123a <strcasecmp+0x1a>
   21238:	3420      	adds	r4, #32
   2123a:	7835      	ldrb	r5, [r6, #0]
   2123c:	f000 fbd0 	bl	219e0 <__locale_ctype_ptr>
   21240:	2203      	movs	r2, #3
   21242:	1940      	adds	r0, r0, r5
   21244:	7843      	ldrb	r3, [r0, #1]
   21246:	4013      	ands	r3, r2
   21248:	2b01      	cmp	r3, #1
   2124a:	d100      	bne.n	2124e <strcasecmp+0x2e>
   2124c:	3520      	adds	r5, #32
   2124e:	1b60      	subs	r0, r4, r5
   21250:	d103      	bne.n	2125a <strcasecmp+0x3a>
   21252:	3701      	adds	r7, #1
   21254:	3601      	adds	r6, #1
   21256:	2d00      	cmp	r5, #0
   21258:	d1e5      	bne.n	21226 <strcasecmp+0x6>
   2125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002125c <strcat>:
   2125c:	0002      	movs	r2, r0
   2125e:	b510      	push	{r4, lr}
   21260:	7813      	ldrb	r3, [r2, #0]
   21262:	2b00      	cmp	r3, #0
   21264:	d105      	bne.n	21272 <strcat+0x16>
   21266:	5ccc      	ldrb	r4, [r1, r3]
   21268:	54d4      	strb	r4, [r2, r3]
   2126a:	3301      	adds	r3, #1
   2126c:	2c00      	cmp	r4, #0
   2126e:	d1fa      	bne.n	21266 <strcat+0xa>
   21270:	bd10      	pop	{r4, pc}
   21272:	3201      	adds	r2, #1
   21274:	e7f4      	b.n	21260 <strcat+0x4>

00021276 <strcmp>:
   21276:	7802      	ldrb	r2, [r0, #0]
   21278:	780b      	ldrb	r3, [r1, #0]
   2127a:	2a00      	cmp	r2, #0
   2127c:	d003      	beq.n	21286 <strcmp+0x10>
   2127e:	3001      	adds	r0, #1
   21280:	3101      	adds	r1, #1
   21282:	429a      	cmp	r2, r3
   21284:	d0f7      	beq.n	21276 <strcmp>
   21286:	1ad0      	subs	r0, r2, r3
   21288:	4770      	bx	lr

0002128a <strcpy>:
   2128a:	1c03      	adds	r3, r0, #0
   2128c:	780a      	ldrb	r2, [r1, #0]
   2128e:	3101      	adds	r1, #1
   21290:	701a      	strb	r2, [r3, #0]
   21292:	3301      	adds	r3, #1
   21294:	2a00      	cmp	r2, #0
   21296:	d1f9      	bne.n	2128c <strcpy+0x2>
   21298:	4770      	bx	lr
	...

0002129c <strdup>:
   2129c:	b510      	push	{r4, lr}
   2129e:	4b03      	ldr	r3, [pc, #12]	; (212ac <strdup+0x10>)
   212a0:	0001      	movs	r1, r0
   212a2:	6818      	ldr	r0, [r3, #0]
   212a4:	f000 f804 	bl	212b0 <_strdup_r>
   212a8:	bd10      	pop	{r4, pc}
   212aa:	46c0      	nop			; (mov r8, r8)
   212ac:	2000012c 	.word	0x2000012c

000212b0 <_strdup_r>:
   212b0:	b570      	push	{r4, r5, r6, lr}
   212b2:	0005      	movs	r5, r0
   212b4:	0008      	movs	r0, r1
   212b6:	000e      	movs	r6, r1
   212b8:	f000 f80d 	bl	212d6 <strlen>
   212bc:	1c44      	adds	r4, r0, #1
   212be:	0021      	movs	r1, r4
   212c0:	0028      	movs	r0, r5
   212c2:	f7ff fe7f 	bl	20fc4 <_malloc_r>
   212c6:	1e05      	subs	r5, r0, #0
   212c8:	d003      	beq.n	212d2 <_strdup_r+0x22>
   212ca:	0022      	movs	r2, r4
   212cc:	0031      	movs	r1, r6
   212ce:	f7ff fe0b 	bl	20ee8 <memcpy>
   212d2:	0028      	movs	r0, r5
   212d4:	bd70      	pop	{r4, r5, r6, pc}

000212d6 <strlen>:
   212d6:	2300      	movs	r3, #0
   212d8:	5cc2      	ldrb	r2, [r0, r3]
   212da:	3301      	adds	r3, #1
   212dc:	2a00      	cmp	r2, #0
   212de:	d1fb      	bne.n	212d8 <strlen+0x2>
   212e0:	1e58      	subs	r0, r3, #1
   212e2:	4770      	bx	lr

000212e4 <strncmp>:
   212e4:	2300      	movs	r3, #0
   212e6:	b530      	push	{r4, r5, lr}
   212e8:	429a      	cmp	r2, r3
   212ea:	d00a      	beq.n	21302 <strncmp+0x1e>
   212ec:	3a01      	subs	r2, #1
   212ee:	5cc4      	ldrb	r4, [r0, r3]
   212f0:	5ccd      	ldrb	r5, [r1, r3]
   212f2:	42ac      	cmp	r4, r5
   212f4:	d104      	bne.n	21300 <strncmp+0x1c>
   212f6:	429a      	cmp	r2, r3
   212f8:	d002      	beq.n	21300 <strncmp+0x1c>
   212fa:	3301      	adds	r3, #1
   212fc:	2c00      	cmp	r4, #0
   212fe:	d1f6      	bne.n	212ee <strncmp+0xa>
   21300:	1b63      	subs	r3, r4, r5
   21302:	0018      	movs	r0, r3
   21304:	bd30      	pop	{r4, r5, pc}

00021306 <strncpy>:
   21306:	b570      	push	{r4, r5, r6, lr}
   21308:	0004      	movs	r4, r0
   2130a:	2a00      	cmp	r2, #0
   2130c:	d100      	bne.n	21310 <strncpy+0xa>
   2130e:	bd70      	pop	{r4, r5, r6, pc}
   21310:	780d      	ldrb	r5, [r1, #0]
   21312:	1e56      	subs	r6, r2, #1
   21314:	1c63      	adds	r3, r4, #1
   21316:	7025      	strb	r5, [r4, #0]
   21318:	3101      	adds	r1, #1
   2131a:	2d00      	cmp	r5, #0
   2131c:	d105      	bne.n	2132a <strncpy+0x24>
   2131e:	18a4      	adds	r4, r4, r2
   21320:	429c      	cmp	r4, r3
   21322:	d0f4      	beq.n	2130e <strncpy+0x8>
   21324:	701d      	strb	r5, [r3, #0]
   21326:	3301      	adds	r3, #1
   21328:	e7fa      	b.n	21320 <strncpy+0x1a>
   2132a:	001c      	movs	r4, r3
   2132c:	0032      	movs	r2, r6
   2132e:	e7ec      	b.n	2130a <strncpy+0x4>

00021330 <strrchr>:
   21330:	b570      	push	{r4, r5, r6, lr}
   21332:	000d      	movs	r5, r1
   21334:	2400      	movs	r4, #0
   21336:	2900      	cmp	r1, #0
   21338:	d105      	bne.n	21346 <strrchr+0x16>
   2133a:	f000 ff19 	bl	22170 <strchr>
   2133e:	0004      	movs	r4, r0
   21340:	e006      	b.n	21350 <strrchr+0x20>
   21342:	001c      	movs	r4, r3
   21344:	1c58      	adds	r0, r3, #1
   21346:	0029      	movs	r1, r5
   21348:	f000 ff12 	bl	22170 <strchr>
   2134c:	1e03      	subs	r3, r0, #0
   2134e:	d1f8      	bne.n	21342 <strrchr+0x12>
   21350:	0020      	movs	r0, r4
   21352:	bd70      	pop	{r4, r5, r6, pc}

00021354 <strstr>:
   21354:	b510      	push	{r4, lr}
   21356:	0002      	movs	r2, r0
   21358:	7800      	ldrb	r0, [r0, #0]
   2135a:	2800      	cmp	r0, #0
   2135c:	d104      	bne.n	21368 <strstr+0x14>
   2135e:	7809      	ldrb	r1, [r1, #0]
   21360:	2900      	cmp	r1, #0
   21362:	d00d      	beq.n	21380 <strstr+0x2c>
   21364:	bd10      	pop	{r4, pc}
   21366:	3201      	adds	r2, #1
   21368:	7810      	ldrb	r0, [r2, #0]
   2136a:	2800      	cmp	r0, #0
   2136c:	d0fa      	beq.n	21364 <strstr+0x10>
   2136e:	2300      	movs	r3, #0
   21370:	5cc8      	ldrb	r0, [r1, r3]
   21372:	2800      	cmp	r0, #0
   21374:	d004      	beq.n	21380 <strstr+0x2c>
   21376:	5cd4      	ldrb	r4, [r2, r3]
   21378:	4284      	cmp	r4, r0
   2137a:	d1f4      	bne.n	21366 <strstr+0x12>
   2137c:	3301      	adds	r3, #1
   2137e:	e7f7      	b.n	21370 <strstr+0x1c>
   21380:	0010      	movs	r0, r2
   21382:	e7ef      	b.n	21364 <strstr+0x10>

00021384 <_strtol_l.isra.0>:
   21384:	b5f0      	push	{r4, r5, r6, r7, lr}
   21386:	001f      	movs	r7, r3
   21388:	000e      	movs	r6, r1
   2138a:	b087      	sub	sp, #28
   2138c:	9005      	str	r0, [sp, #20]
   2138e:	9103      	str	r1, [sp, #12]
   21390:	9202      	str	r2, [sp, #8]
   21392:	980c      	ldr	r0, [sp, #48]	; 0x30
   21394:	7834      	ldrb	r4, [r6, #0]
   21396:	f000 fb20 	bl	219da <__locale_ctype_ptr_l>
   2139a:	2208      	movs	r2, #8
   2139c:	1900      	adds	r0, r0, r4
   2139e:	7843      	ldrb	r3, [r0, #1]
   213a0:	1c75      	adds	r5, r6, #1
   213a2:	4013      	ands	r3, r2
   213a4:	d10c      	bne.n	213c0 <_strtol_l.isra.0+0x3c>
   213a6:	2c2d      	cmp	r4, #45	; 0x2d
   213a8:	d10c      	bne.n	213c4 <_strtol_l.isra.0+0x40>
   213aa:	3301      	adds	r3, #1
   213ac:	782c      	ldrb	r4, [r5, #0]
   213ae:	9301      	str	r3, [sp, #4]
   213b0:	1cb5      	adds	r5, r6, #2
   213b2:	2f00      	cmp	r7, #0
   213b4:	d00c      	beq.n	213d0 <_strtol_l.isra.0+0x4c>
   213b6:	2f10      	cmp	r7, #16
   213b8:	d114      	bne.n	213e4 <_strtol_l.isra.0+0x60>
   213ba:	2c30      	cmp	r4, #48	; 0x30
   213bc:	d00a      	beq.n	213d4 <_strtol_l.isra.0+0x50>
   213be:	e011      	b.n	213e4 <_strtol_l.isra.0+0x60>
   213c0:	002e      	movs	r6, r5
   213c2:	e7e6      	b.n	21392 <_strtol_l.isra.0+0xe>
   213c4:	9301      	str	r3, [sp, #4]
   213c6:	2c2b      	cmp	r4, #43	; 0x2b
   213c8:	d1f3      	bne.n	213b2 <_strtol_l.isra.0+0x2e>
   213ca:	782c      	ldrb	r4, [r5, #0]
   213cc:	1cb5      	adds	r5, r6, #2
   213ce:	e7f0      	b.n	213b2 <_strtol_l.isra.0+0x2e>
   213d0:	2c30      	cmp	r4, #48	; 0x30
   213d2:	d12f      	bne.n	21434 <_strtol_l.isra.0+0xb0>
   213d4:	2220      	movs	r2, #32
   213d6:	782b      	ldrb	r3, [r5, #0]
   213d8:	4393      	bics	r3, r2
   213da:	2b58      	cmp	r3, #88	; 0x58
   213dc:	d151      	bne.n	21482 <_strtol_l.isra.0+0xfe>
   213de:	2710      	movs	r7, #16
   213e0:	786c      	ldrb	r4, [r5, #1]
   213e2:	3502      	adds	r5, #2
   213e4:	9b01      	ldr	r3, [sp, #4]
   213e6:	4a29      	ldr	r2, [pc, #164]	; (2148c <_strtol_l.isra.0+0x108>)
   213e8:	0039      	movs	r1, r7
   213ea:	189e      	adds	r6, r3, r2
   213ec:	0030      	movs	r0, r6
   213ee:	f7fd fe2f 	bl	1f050 <__aeabi_uidivmod>
   213f2:	0030      	movs	r0, r6
   213f4:	9104      	str	r1, [sp, #16]
   213f6:	0039      	movs	r1, r7
   213f8:	f7fd fda4 	bl	1ef44 <__udivsi3>
   213fc:	2101      	movs	r1, #1
   213fe:	2300      	movs	r3, #0
   21400:	4249      	negs	r1, r1
   21402:	0002      	movs	r2, r0
   21404:	468c      	mov	ip, r1
   21406:	0018      	movs	r0, r3
   21408:	0021      	movs	r1, r4
   2140a:	3930      	subs	r1, #48	; 0x30
   2140c:	2909      	cmp	r1, #9
   2140e:	d813      	bhi.n	21438 <_strtol_l.isra.0+0xb4>
   21410:	000c      	movs	r4, r1
   21412:	42a7      	cmp	r7, r4
   21414:	dd1c      	ble.n	21450 <_strtol_l.isra.0+0xcc>
   21416:	1c59      	adds	r1, r3, #1
   21418:	d009      	beq.n	2142e <_strtol_l.isra.0+0xaa>
   2141a:	4663      	mov	r3, ip
   2141c:	4282      	cmp	r2, r0
   2141e:	d306      	bcc.n	2142e <_strtol_l.isra.0+0xaa>
   21420:	d102      	bne.n	21428 <_strtol_l.isra.0+0xa4>
   21422:	9904      	ldr	r1, [sp, #16]
   21424:	42a1      	cmp	r1, r4
   21426:	db02      	blt.n	2142e <_strtol_l.isra.0+0xaa>
   21428:	2301      	movs	r3, #1
   2142a:	4378      	muls	r0, r7
   2142c:	1820      	adds	r0, r4, r0
   2142e:	782c      	ldrb	r4, [r5, #0]
   21430:	3501      	adds	r5, #1
   21432:	e7e9      	b.n	21408 <_strtol_l.isra.0+0x84>
   21434:	270a      	movs	r7, #10
   21436:	e7d5      	b.n	213e4 <_strtol_l.isra.0+0x60>
   21438:	0021      	movs	r1, r4
   2143a:	3941      	subs	r1, #65	; 0x41
   2143c:	2919      	cmp	r1, #25
   2143e:	d801      	bhi.n	21444 <_strtol_l.isra.0+0xc0>
   21440:	3c37      	subs	r4, #55	; 0x37
   21442:	e7e6      	b.n	21412 <_strtol_l.isra.0+0x8e>
   21444:	0021      	movs	r1, r4
   21446:	3961      	subs	r1, #97	; 0x61
   21448:	2919      	cmp	r1, #25
   2144a:	d801      	bhi.n	21450 <_strtol_l.isra.0+0xcc>
   2144c:	3c57      	subs	r4, #87	; 0x57
   2144e:	e7e0      	b.n	21412 <_strtol_l.isra.0+0x8e>
   21450:	1c5a      	adds	r2, r3, #1
   21452:	d108      	bne.n	21466 <_strtol_l.isra.0+0xe2>
   21454:	9a05      	ldr	r2, [sp, #20]
   21456:	3323      	adds	r3, #35	; 0x23
   21458:	6013      	str	r3, [r2, #0]
   2145a:	9b02      	ldr	r3, [sp, #8]
   2145c:	0030      	movs	r0, r6
   2145e:	2b00      	cmp	r3, #0
   21460:	d10b      	bne.n	2147a <_strtol_l.isra.0+0xf6>
   21462:	b007      	add	sp, #28
   21464:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21466:	9a01      	ldr	r2, [sp, #4]
   21468:	2a00      	cmp	r2, #0
   2146a:	d000      	beq.n	2146e <_strtol_l.isra.0+0xea>
   2146c:	4240      	negs	r0, r0
   2146e:	9a02      	ldr	r2, [sp, #8]
   21470:	2a00      	cmp	r2, #0
   21472:	d0f6      	beq.n	21462 <_strtol_l.isra.0+0xde>
   21474:	9a03      	ldr	r2, [sp, #12]
   21476:	2b00      	cmp	r3, #0
   21478:	d000      	beq.n	2147c <_strtol_l.isra.0+0xf8>
   2147a:	1e6a      	subs	r2, r5, #1
   2147c:	9b02      	ldr	r3, [sp, #8]
   2147e:	601a      	str	r2, [r3, #0]
   21480:	e7ef      	b.n	21462 <_strtol_l.isra.0+0xde>
   21482:	2430      	movs	r4, #48	; 0x30
   21484:	2f00      	cmp	r7, #0
   21486:	d1ad      	bne.n	213e4 <_strtol_l.isra.0+0x60>
   21488:	3708      	adds	r7, #8
   2148a:	e7ab      	b.n	213e4 <_strtol_l.isra.0+0x60>
   2148c:	7fffffff 	.word	0x7fffffff

00021490 <strtol>:
   21490:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21492:	0013      	movs	r3, r2
   21494:	4a06      	ldr	r2, [pc, #24]	; (214b0 <strtol+0x20>)
   21496:	0005      	movs	r5, r0
   21498:	6810      	ldr	r0, [r2, #0]
   2149a:	6a04      	ldr	r4, [r0, #32]
   2149c:	2c00      	cmp	r4, #0
   2149e:	d100      	bne.n	214a2 <strtol+0x12>
   214a0:	4c04      	ldr	r4, [pc, #16]	; (214b4 <strtol+0x24>)
   214a2:	000a      	movs	r2, r1
   214a4:	9400      	str	r4, [sp, #0]
   214a6:	0029      	movs	r1, r5
   214a8:	f7ff ff6c 	bl	21384 <_strtol_l.isra.0>
   214ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   214ae:	46c0      	nop			; (mov r8, r8)
   214b0:	2000012c 	.word	0x2000012c
   214b4:	20000190 	.word	0x20000190

000214b8 <_vsniprintf_r>:
   214b8:	b530      	push	{r4, r5, lr}
   214ba:	0014      	movs	r4, r2
   214bc:	b09b      	sub	sp, #108	; 0x6c
   214be:	0005      	movs	r5, r0
   214c0:	001a      	movs	r2, r3
   214c2:	2c00      	cmp	r4, #0
   214c4:	da05      	bge.n	214d2 <_vsniprintf_r+0x1a>
   214c6:	238b      	movs	r3, #139	; 0x8b
   214c8:	6003      	str	r3, [r0, #0]
   214ca:	2001      	movs	r0, #1
   214cc:	4240      	negs	r0, r0
   214ce:	b01b      	add	sp, #108	; 0x6c
   214d0:	bd30      	pop	{r4, r5, pc}
   214d2:	2382      	movs	r3, #130	; 0x82
   214d4:	4668      	mov	r0, sp
   214d6:	009b      	lsls	r3, r3, #2
   214d8:	8183      	strh	r3, [r0, #12]
   214da:	2300      	movs	r3, #0
   214dc:	9100      	str	r1, [sp, #0]
   214de:	9104      	str	r1, [sp, #16]
   214e0:	429c      	cmp	r4, r3
   214e2:	d000      	beq.n	214e6 <_vsniprintf_r+0x2e>
   214e4:	1e63      	subs	r3, r4, #1
   214e6:	9302      	str	r3, [sp, #8]
   214e8:	9305      	str	r3, [sp, #20]
   214ea:	2301      	movs	r3, #1
   214ec:	4669      	mov	r1, sp
   214ee:	425b      	negs	r3, r3
   214f0:	81cb      	strh	r3, [r1, #14]
   214f2:	0028      	movs	r0, r5
   214f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   214f6:	f000 fb63 	bl	21bc0 <_svfiprintf_r>
   214fa:	1c43      	adds	r3, r0, #1
   214fc:	da01      	bge.n	21502 <_vsniprintf_r+0x4a>
   214fe:	238b      	movs	r3, #139	; 0x8b
   21500:	602b      	str	r3, [r5, #0]
   21502:	2c00      	cmp	r4, #0
   21504:	d0e3      	beq.n	214ce <_vsniprintf_r+0x16>
   21506:	2300      	movs	r3, #0
   21508:	9a00      	ldr	r2, [sp, #0]
   2150a:	7013      	strb	r3, [r2, #0]
   2150c:	e7df      	b.n	214ce <_vsniprintf_r+0x16>
	...

00021510 <vsniprintf>:
   21510:	b507      	push	{r0, r1, r2, lr}
   21512:	9300      	str	r3, [sp, #0]
   21514:	0013      	movs	r3, r2
   21516:	000a      	movs	r2, r1
   21518:	0001      	movs	r1, r0
   2151a:	4802      	ldr	r0, [pc, #8]	; (21524 <vsniprintf+0x14>)
   2151c:	6800      	ldr	r0, [r0, #0]
   2151e:	f7ff ffcb 	bl	214b8 <_vsniprintf_r>
   21522:	bd0e      	pop	{r1, r2, r3, pc}
   21524:	2000012c 	.word	0x2000012c

00021528 <__swbuf_r>:
   21528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2152a:	0005      	movs	r5, r0
   2152c:	000e      	movs	r6, r1
   2152e:	0014      	movs	r4, r2
   21530:	2800      	cmp	r0, #0
   21532:	d004      	beq.n	2153e <__swbuf_r+0x16>
   21534:	6983      	ldr	r3, [r0, #24]
   21536:	2b00      	cmp	r3, #0
   21538:	d101      	bne.n	2153e <__swbuf_r+0x16>
   2153a:	f000 f9b9 	bl	218b0 <__sinit>
   2153e:	4b22      	ldr	r3, [pc, #136]	; (215c8 <__swbuf_r+0xa0>)
   21540:	429c      	cmp	r4, r3
   21542:	d12d      	bne.n	215a0 <__swbuf_r+0x78>
   21544:	686c      	ldr	r4, [r5, #4]
   21546:	69a3      	ldr	r3, [r4, #24]
   21548:	60a3      	str	r3, [r4, #8]
   2154a:	89a3      	ldrh	r3, [r4, #12]
   2154c:	071b      	lsls	r3, r3, #28
   2154e:	d531      	bpl.n	215b4 <__swbuf_r+0x8c>
   21550:	6923      	ldr	r3, [r4, #16]
   21552:	2b00      	cmp	r3, #0
   21554:	d02e      	beq.n	215b4 <__swbuf_r+0x8c>
   21556:	6823      	ldr	r3, [r4, #0]
   21558:	6922      	ldr	r2, [r4, #16]
   2155a:	b2f7      	uxtb	r7, r6
   2155c:	1a98      	subs	r0, r3, r2
   2155e:	6963      	ldr	r3, [r4, #20]
   21560:	b2f6      	uxtb	r6, r6
   21562:	4298      	cmp	r0, r3
   21564:	db05      	blt.n	21572 <__swbuf_r+0x4a>
   21566:	0021      	movs	r1, r4
   21568:	0028      	movs	r0, r5
   2156a:	f000 f933 	bl	217d4 <_fflush_r>
   2156e:	2800      	cmp	r0, #0
   21570:	d126      	bne.n	215c0 <__swbuf_r+0x98>
   21572:	68a3      	ldr	r3, [r4, #8]
   21574:	3001      	adds	r0, #1
   21576:	3b01      	subs	r3, #1
   21578:	60a3      	str	r3, [r4, #8]
   2157a:	6823      	ldr	r3, [r4, #0]
   2157c:	1c5a      	adds	r2, r3, #1
   2157e:	6022      	str	r2, [r4, #0]
   21580:	701f      	strb	r7, [r3, #0]
   21582:	6963      	ldr	r3, [r4, #20]
   21584:	4298      	cmp	r0, r3
   21586:	d004      	beq.n	21592 <__swbuf_r+0x6a>
   21588:	89a3      	ldrh	r3, [r4, #12]
   2158a:	07db      	lsls	r3, r3, #31
   2158c:	d51a      	bpl.n	215c4 <__swbuf_r+0x9c>
   2158e:	2e0a      	cmp	r6, #10
   21590:	d118      	bne.n	215c4 <__swbuf_r+0x9c>
   21592:	0021      	movs	r1, r4
   21594:	0028      	movs	r0, r5
   21596:	f000 f91d 	bl	217d4 <_fflush_r>
   2159a:	2800      	cmp	r0, #0
   2159c:	d012      	beq.n	215c4 <__swbuf_r+0x9c>
   2159e:	e00f      	b.n	215c0 <__swbuf_r+0x98>
   215a0:	4b0a      	ldr	r3, [pc, #40]	; (215cc <__swbuf_r+0xa4>)
   215a2:	429c      	cmp	r4, r3
   215a4:	d101      	bne.n	215aa <__swbuf_r+0x82>
   215a6:	68ac      	ldr	r4, [r5, #8]
   215a8:	e7cd      	b.n	21546 <__swbuf_r+0x1e>
   215aa:	4b09      	ldr	r3, [pc, #36]	; (215d0 <__swbuf_r+0xa8>)
   215ac:	429c      	cmp	r4, r3
   215ae:	d1ca      	bne.n	21546 <__swbuf_r+0x1e>
   215b0:	68ec      	ldr	r4, [r5, #12]
   215b2:	e7c8      	b.n	21546 <__swbuf_r+0x1e>
   215b4:	0021      	movs	r1, r4
   215b6:	0028      	movs	r0, r5
   215b8:	f000 f80c 	bl	215d4 <__swsetup_r>
   215bc:	2800      	cmp	r0, #0
   215be:	d0ca      	beq.n	21556 <__swbuf_r+0x2e>
   215c0:	2601      	movs	r6, #1
   215c2:	4276      	negs	r6, r6
   215c4:	0030      	movs	r0, r6
   215c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   215c8:	00026300 	.word	0x00026300
   215cc:	00026320 	.word	0x00026320
   215d0:	000262e0 	.word	0x000262e0

000215d4 <__swsetup_r>:
   215d4:	4b36      	ldr	r3, [pc, #216]	; (216b0 <__swsetup_r+0xdc>)
   215d6:	b570      	push	{r4, r5, r6, lr}
   215d8:	681d      	ldr	r5, [r3, #0]
   215da:	0006      	movs	r6, r0
   215dc:	000c      	movs	r4, r1
   215de:	2d00      	cmp	r5, #0
   215e0:	d005      	beq.n	215ee <__swsetup_r+0x1a>
   215e2:	69ab      	ldr	r3, [r5, #24]
   215e4:	2b00      	cmp	r3, #0
   215e6:	d102      	bne.n	215ee <__swsetup_r+0x1a>
   215e8:	0028      	movs	r0, r5
   215ea:	f000 f961 	bl	218b0 <__sinit>
   215ee:	4b31      	ldr	r3, [pc, #196]	; (216b4 <__swsetup_r+0xe0>)
   215f0:	429c      	cmp	r4, r3
   215f2:	d10f      	bne.n	21614 <__swsetup_r+0x40>
   215f4:	686c      	ldr	r4, [r5, #4]
   215f6:	230c      	movs	r3, #12
   215f8:	5ee2      	ldrsh	r2, [r4, r3]
   215fa:	b293      	uxth	r3, r2
   215fc:	0719      	lsls	r1, r3, #28
   215fe:	d42d      	bmi.n	2165c <__swsetup_r+0x88>
   21600:	06d9      	lsls	r1, r3, #27
   21602:	d411      	bmi.n	21628 <__swsetup_r+0x54>
   21604:	2309      	movs	r3, #9
   21606:	2001      	movs	r0, #1
   21608:	6033      	str	r3, [r6, #0]
   2160a:	3337      	adds	r3, #55	; 0x37
   2160c:	4313      	orrs	r3, r2
   2160e:	81a3      	strh	r3, [r4, #12]
   21610:	4240      	negs	r0, r0
   21612:	bd70      	pop	{r4, r5, r6, pc}
   21614:	4b28      	ldr	r3, [pc, #160]	; (216b8 <__swsetup_r+0xe4>)
   21616:	429c      	cmp	r4, r3
   21618:	d101      	bne.n	2161e <__swsetup_r+0x4a>
   2161a:	68ac      	ldr	r4, [r5, #8]
   2161c:	e7eb      	b.n	215f6 <__swsetup_r+0x22>
   2161e:	4b27      	ldr	r3, [pc, #156]	; (216bc <__swsetup_r+0xe8>)
   21620:	429c      	cmp	r4, r3
   21622:	d1e8      	bne.n	215f6 <__swsetup_r+0x22>
   21624:	68ec      	ldr	r4, [r5, #12]
   21626:	e7e6      	b.n	215f6 <__swsetup_r+0x22>
   21628:	075b      	lsls	r3, r3, #29
   2162a:	d513      	bpl.n	21654 <__swsetup_r+0x80>
   2162c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2162e:	2900      	cmp	r1, #0
   21630:	d008      	beq.n	21644 <__swsetup_r+0x70>
   21632:	0023      	movs	r3, r4
   21634:	3344      	adds	r3, #68	; 0x44
   21636:	4299      	cmp	r1, r3
   21638:	d002      	beq.n	21640 <__swsetup_r+0x6c>
   2163a:	0030      	movs	r0, r6
   2163c:	f7ff fc78 	bl	20f30 <_free_r>
   21640:	2300      	movs	r3, #0
   21642:	6363      	str	r3, [r4, #52]	; 0x34
   21644:	2224      	movs	r2, #36	; 0x24
   21646:	89a3      	ldrh	r3, [r4, #12]
   21648:	4393      	bics	r3, r2
   2164a:	81a3      	strh	r3, [r4, #12]
   2164c:	2300      	movs	r3, #0
   2164e:	6063      	str	r3, [r4, #4]
   21650:	6923      	ldr	r3, [r4, #16]
   21652:	6023      	str	r3, [r4, #0]
   21654:	2308      	movs	r3, #8
   21656:	89a2      	ldrh	r2, [r4, #12]
   21658:	4313      	orrs	r3, r2
   2165a:	81a3      	strh	r3, [r4, #12]
   2165c:	6923      	ldr	r3, [r4, #16]
   2165e:	2b00      	cmp	r3, #0
   21660:	d10b      	bne.n	2167a <__swsetup_r+0xa6>
   21662:	21a0      	movs	r1, #160	; 0xa0
   21664:	2280      	movs	r2, #128	; 0x80
   21666:	89a3      	ldrh	r3, [r4, #12]
   21668:	0089      	lsls	r1, r1, #2
   2166a:	0092      	lsls	r2, r2, #2
   2166c:	400b      	ands	r3, r1
   2166e:	4293      	cmp	r3, r2
   21670:	d003      	beq.n	2167a <__swsetup_r+0xa6>
   21672:	0021      	movs	r1, r4
   21674:	0030      	movs	r0, r6
   21676:	f000 f9e9 	bl	21a4c <__smakebuf_r>
   2167a:	2301      	movs	r3, #1
   2167c:	89a2      	ldrh	r2, [r4, #12]
   2167e:	4013      	ands	r3, r2
   21680:	d011      	beq.n	216a6 <__swsetup_r+0xd2>
   21682:	2300      	movs	r3, #0
   21684:	60a3      	str	r3, [r4, #8]
   21686:	6963      	ldr	r3, [r4, #20]
   21688:	425b      	negs	r3, r3
   2168a:	61a3      	str	r3, [r4, #24]
   2168c:	2000      	movs	r0, #0
   2168e:	6923      	ldr	r3, [r4, #16]
   21690:	4283      	cmp	r3, r0
   21692:	d1be      	bne.n	21612 <__swsetup_r+0x3e>
   21694:	230c      	movs	r3, #12
   21696:	5ee2      	ldrsh	r2, [r4, r3]
   21698:	0613      	lsls	r3, r2, #24
   2169a:	d5ba      	bpl.n	21612 <__swsetup_r+0x3e>
   2169c:	2340      	movs	r3, #64	; 0x40
   2169e:	4313      	orrs	r3, r2
   216a0:	81a3      	strh	r3, [r4, #12]
   216a2:	3801      	subs	r0, #1
   216a4:	e7b5      	b.n	21612 <__swsetup_r+0x3e>
   216a6:	0792      	lsls	r2, r2, #30
   216a8:	d400      	bmi.n	216ac <__swsetup_r+0xd8>
   216aa:	6963      	ldr	r3, [r4, #20]
   216ac:	60a3      	str	r3, [r4, #8]
   216ae:	e7ed      	b.n	2168c <__swsetup_r+0xb8>
   216b0:	2000012c 	.word	0x2000012c
   216b4:	00026300 	.word	0x00026300
   216b8:	00026320 	.word	0x00026320
   216bc:	000262e0 	.word	0x000262e0

000216c0 <__sflush_r>:
   216c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   216c2:	898a      	ldrh	r2, [r1, #12]
   216c4:	0005      	movs	r5, r0
   216c6:	000c      	movs	r4, r1
   216c8:	0713      	lsls	r3, r2, #28
   216ca:	d460      	bmi.n	2178e <__sflush_r+0xce>
   216cc:	684b      	ldr	r3, [r1, #4]
   216ce:	2b00      	cmp	r3, #0
   216d0:	dc04      	bgt.n	216dc <__sflush_r+0x1c>
   216d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   216d4:	2b00      	cmp	r3, #0
   216d6:	dc01      	bgt.n	216dc <__sflush_r+0x1c>
   216d8:	2000      	movs	r0, #0
   216da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   216dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   216de:	2f00      	cmp	r7, #0
   216e0:	d0fa      	beq.n	216d8 <__sflush_r+0x18>
   216e2:	2300      	movs	r3, #0
   216e4:	682e      	ldr	r6, [r5, #0]
   216e6:	602b      	str	r3, [r5, #0]
   216e8:	2380      	movs	r3, #128	; 0x80
   216ea:	015b      	lsls	r3, r3, #5
   216ec:	401a      	ands	r2, r3
   216ee:	d034      	beq.n	2175a <__sflush_r+0x9a>
   216f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   216f2:	89a3      	ldrh	r3, [r4, #12]
   216f4:	075b      	lsls	r3, r3, #29
   216f6:	d506      	bpl.n	21706 <__sflush_r+0x46>
   216f8:	6863      	ldr	r3, [r4, #4]
   216fa:	1ac0      	subs	r0, r0, r3
   216fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   216fe:	2b00      	cmp	r3, #0
   21700:	d001      	beq.n	21706 <__sflush_r+0x46>
   21702:	6c23      	ldr	r3, [r4, #64]	; 0x40
   21704:	1ac0      	subs	r0, r0, r3
   21706:	0002      	movs	r2, r0
   21708:	6a21      	ldr	r1, [r4, #32]
   2170a:	2300      	movs	r3, #0
   2170c:	0028      	movs	r0, r5
   2170e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   21710:	47b8      	blx	r7
   21712:	89a1      	ldrh	r1, [r4, #12]
   21714:	1c43      	adds	r3, r0, #1
   21716:	d106      	bne.n	21726 <__sflush_r+0x66>
   21718:	682b      	ldr	r3, [r5, #0]
   2171a:	2b1d      	cmp	r3, #29
   2171c:	d831      	bhi.n	21782 <__sflush_r+0xc2>
   2171e:	4a2c      	ldr	r2, [pc, #176]	; (217d0 <__sflush_r+0x110>)
   21720:	40da      	lsrs	r2, r3
   21722:	07d3      	lsls	r3, r2, #31
   21724:	d52d      	bpl.n	21782 <__sflush_r+0xc2>
   21726:	2300      	movs	r3, #0
   21728:	6063      	str	r3, [r4, #4]
   2172a:	6923      	ldr	r3, [r4, #16]
   2172c:	6023      	str	r3, [r4, #0]
   2172e:	04cb      	lsls	r3, r1, #19
   21730:	d505      	bpl.n	2173e <__sflush_r+0x7e>
   21732:	1c43      	adds	r3, r0, #1
   21734:	d102      	bne.n	2173c <__sflush_r+0x7c>
   21736:	682b      	ldr	r3, [r5, #0]
   21738:	2b00      	cmp	r3, #0
   2173a:	d100      	bne.n	2173e <__sflush_r+0x7e>
   2173c:	6560      	str	r0, [r4, #84]	; 0x54
   2173e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   21740:	602e      	str	r6, [r5, #0]
   21742:	2900      	cmp	r1, #0
   21744:	d0c8      	beq.n	216d8 <__sflush_r+0x18>
   21746:	0023      	movs	r3, r4
   21748:	3344      	adds	r3, #68	; 0x44
   2174a:	4299      	cmp	r1, r3
   2174c:	d002      	beq.n	21754 <__sflush_r+0x94>
   2174e:	0028      	movs	r0, r5
   21750:	f7ff fbee 	bl	20f30 <_free_r>
   21754:	2000      	movs	r0, #0
   21756:	6360      	str	r0, [r4, #52]	; 0x34
   21758:	e7bf      	b.n	216da <__sflush_r+0x1a>
   2175a:	2301      	movs	r3, #1
   2175c:	6a21      	ldr	r1, [r4, #32]
   2175e:	0028      	movs	r0, r5
   21760:	47b8      	blx	r7
   21762:	1c43      	adds	r3, r0, #1
   21764:	d1c5      	bne.n	216f2 <__sflush_r+0x32>
   21766:	682b      	ldr	r3, [r5, #0]
   21768:	2b00      	cmp	r3, #0
   2176a:	d0c2      	beq.n	216f2 <__sflush_r+0x32>
   2176c:	2b1d      	cmp	r3, #29
   2176e:	d001      	beq.n	21774 <__sflush_r+0xb4>
   21770:	2b16      	cmp	r3, #22
   21772:	d101      	bne.n	21778 <__sflush_r+0xb8>
   21774:	602e      	str	r6, [r5, #0]
   21776:	e7af      	b.n	216d8 <__sflush_r+0x18>
   21778:	2340      	movs	r3, #64	; 0x40
   2177a:	89a2      	ldrh	r2, [r4, #12]
   2177c:	4313      	orrs	r3, r2
   2177e:	81a3      	strh	r3, [r4, #12]
   21780:	e7ab      	b.n	216da <__sflush_r+0x1a>
   21782:	2340      	movs	r3, #64	; 0x40
   21784:	430b      	orrs	r3, r1
   21786:	2001      	movs	r0, #1
   21788:	81a3      	strh	r3, [r4, #12]
   2178a:	4240      	negs	r0, r0
   2178c:	e7a5      	b.n	216da <__sflush_r+0x1a>
   2178e:	690f      	ldr	r7, [r1, #16]
   21790:	2f00      	cmp	r7, #0
   21792:	d0a1      	beq.n	216d8 <__sflush_r+0x18>
   21794:	680b      	ldr	r3, [r1, #0]
   21796:	600f      	str	r7, [r1, #0]
   21798:	1bdb      	subs	r3, r3, r7
   2179a:	9301      	str	r3, [sp, #4]
   2179c:	2300      	movs	r3, #0
   2179e:	0792      	lsls	r2, r2, #30
   217a0:	d100      	bne.n	217a4 <__sflush_r+0xe4>
   217a2:	694b      	ldr	r3, [r1, #20]
   217a4:	60a3      	str	r3, [r4, #8]
   217a6:	9b01      	ldr	r3, [sp, #4]
   217a8:	2b00      	cmp	r3, #0
   217aa:	dc00      	bgt.n	217ae <__sflush_r+0xee>
   217ac:	e794      	b.n	216d8 <__sflush_r+0x18>
   217ae:	9b01      	ldr	r3, [sp, #4]
   217b0:	003a      	movs	r2, r7
   217b2:	6a21      	ldr	r1, [r4, #32]
   217b4:	0028      	movs	r0, r5
   217b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   217b8:	47b0      	blx	r6
   217ba:	2800      	cmp	r0, #0
   217bc:	dc03      	bgt.n	217c6 <__sflush_r+0x106>
   217be:	2340      	movs	r3, #64	; 0x40
   217c0:	89a2      	ldrh	r2, [r4, #12]
   217c2:	4313      	orrs	r3, r2
   217c4:	e7df      	b.n	21786 <__sflush_r+0xc6>
   217c6:	9b01      	ldr	r3, [sp, #4]
   217c8:	183f      	adds	r7, r7, r0
   217ca:	1a1b      	subs	r3, r3, r0
   217cc:	9301      	str	r3, [sp, #4]
   217ce:	e7ea      	b.n	217a6 <__sflush_r+0xe6>
   217d0:	20400001 	.word	0x20400001

000217d4 <_fflush_r>:
   217d4:	690b      	ldr	r3, [r1, #16]
   217d6:	b570      	push	{r4, r5, r6, lr}
   217d8:	0005      	movs	r5, r0
   217da:	000c      	movs	r4, r1
   217dc:	2b00      	cmp	r3, #0
   217de:	d101      	bne.n	217e4 <_fflush_r+0x10>
   217e0:	2000      	movs	r0, #0
   217e2:	bd70      	pop	{r4, r5, r6, pc}
   217e4:	2800      	cmp	r0, #0
   217e6:	d004      	beq.n	217f2 <_fflush_r+0x1e>
   217e8:	6983      	ldr	r3, [r0, #24]
   217ea:	2b00      	cmp	r3, #0
   217ec:	d101      	bne.n	217f2 <_fflush_r+0x1e>
   217ee:	f000 f85f 	bl	218b0 <__sinit>
   217f2:	4b0b      	ldr	r3, [pc, #44]	; (21820 <_fflush_r+0x4c>)
   217f4:	429c      	cmp	r4, r3
   217f6:	d109      	bne.n	2180c <_fflush_r+0x38>
   217f8:	686c      	ldr	r4, [r5, #4]
   217fa:	220c      	movs	r2, #12
   217fc:	5ea3      	ldrsh	r3, [r4, r2]
   217fe:	2b00      	cmp	r3, #0
   21800:	d0ee      	beq.n	217e0 <_fflush_r+0xc>
   21802:	0021      	movs	r1, r4
   21804:	0028      	movs	r0, r5
   21806:	f7ff ff5b 	bl	216c0 <__sflush_r>
   2180a:	e7ea      	b.n	217e2 <_fflush_r+0xe>
   2180c:	4b05      	ldr	r3, [pc, #20]	; (21824 <_fflush_r+0x50>)
   2180e:	429c      	cmp	r4, r3
   21810:	d101      	bne.n	21816 <_fflush_r+0x42>
   21812:	68ac      	ldr	r4, [r5, #8]
   21814:	e7f1      	b.n	217fa <_fflush_r+0x26>
   21816:	4b04      	ldr	r3, [pc, #16]	; (21828 <_fflush_r+0x54>)
   21818:	429c      	cmp	r4, r3
   2181a:	d1ee      	bne.n	217fa <_fflush_r+0x26>
   2181c:	68ec      	ldr	r4, [r5, #12]
   2181e:	e7ec      	b.n	217fa <_fflush_r+0x26>
   21820:	00026300 	.word	0x00026300
   21824:	00026320 	.word	0x00026320
   21828:	000262e0 	.word	0x000262e0

0002182c <_cleanup_r>:
   2182c:	b510      	push	{r4, lr}
   2182e:	4902      	ldr	r1, [pc, #8]	; (21838 <_cleanup_r+0xc>)
   21830:	f000 f8b2 	bl	21998 <_fwalk_reent>
   21834:	bd10      	pop	{r4, pc}
   21836:	46c0      	nop			; (mov r8, r8)
   21838:	000217d5 	.word	0x000217d5

0002183c <std.isra.0>:
   2183c:	2300      	movs	r3, #0
   2183e:	b510      	push	{r4, lr}
   21840:	0004      	movs	r4, r0
   21842:	6003      	str	r3, [r0, #0]
   21844:	6043      	str	r3, [r0, #4]
   21846:	6083      	str	r3, [r0, #8]
   21848:	8181      	strh	r1, [r0, #12]
   2184a:	6643      	str	r3, [r0, #100]	; 0x64
   2184c:	81c2      	strh	r2, [r0, #14]
   2184e:	6103      	str	r3, [r0, #16]
   21850:	6143      	str	r3, [r0, #20]
   21852:	6183      	str	r3, [r0, #24]
   21854:	0019      	movs	r1, r3
   21856:	2208      	movs	r2, #8
   21858:	305c      	adds	r0, #92	; 0x5c
   2185a:	f7ff fb60 	bl	20f1e <memset>
   2185e:	4b05      	ldr	r3, [pc, #20]	; (21874 <std.isra.0+0x38>)
   21860:	6224      	str	r4, [r4, #32]
   21862:	6263      	str	r3, [r4, #36]	; 0x24
   21864:	4b04      	ldr	r3, [pc, #16]	; (21878 <std.isra.0+0x3c>)
   21866:	62a3      	str	r3, [r4, #40]	; 0x28
   21868:	4b04      	ldr	r3, [pc, #16]	; (2187c <std.isra.0+0x40>)
   2186a:	62e3      	str	r3, [r4, #44]	; 0x2c
   2186c:	4b04      	ldr	r3, [pc, #16]	; (21880 <std.isra.0+0x44>)
   2186e:	6323      	str	r3, [r4, #48]	; 0x30
   21870:	bd10      	pop	{r4, pc}
   21872:	46c0      	nop			; (mov r8, r8)
   21874:	000220d9 	.word	0x000220d9
   21878:	00022101 	.word	0x00022101
   2187c:	00022139 	.word	0x00022139
   21880:	00022165 	.word	0x00022165

00021884 <__sfmoreglue>:
   21884:	b570      	push	{r4, r5, r6, lr}
   21886:	2568      	movs	r5, #104	; 0x68
   21888:	1e4a      	subs	r2, r1, #1
   2188a:	4355      	muls	r5, r2
   2188c:	000e      	movs	r6, r1
   2188e:	0029      	movs	r1, r5
   21890:	3174      	adds	r1, #116	; 0x74
   21892:	f7ff fb97 	bl	20fc4 <_malloc_r>
   21896:	1e04      	subs	r4, r0, #0
   21898:	d008      	beq.n	218ac <__sfmoreglue+0x28>
   2189a:	2100      	movs	r1, #0
   2189c:	002a      	movs	r2, r5
   2189e:	6001      	str	r1, [r0, #0]
   218a0:	6046      	str	r6, [r0, #4]
   218a2:	300c      	adds	r0, #12
   218a4:	60a0      	str	r0, [r4, #8]
   218a6:	3268      	adds	r2, #104	; 0x68
   218a8:	f7ff fb39 	bl	20f1e <memset>
   218ac:	0020      	movs	r0, r4
   218ae:	bd70      	pop	{r4, r5, r6, pc}

000218b0 <__sinit>:
   218b0:	6983      	ldr	r3, [r0, #24]
   218b2:	b513      	push	{r0, r1, r4, lr}
   218b4:	0004      	movs	r4, r0
   218b6:	2b00      	cmp	r3, #0
   218b8:	d128      	bne.n	2190c <__sinit+0x5c>
   218ba:	6483      	str	r3, [r0, #72]	; 0x48
   218bc:	64c3      	str	r3, [r0, #76]	; 0x4c
   218be:	6503      	str	r3, [r0, #80]	; 0x50
   218c0:	4b13      	ldr	r3, [pc, #76]	; (21910 <__sinit+0x60>)
   218c2:	4a14      	ldr	r2, [pc, #80]	; (21914 <__sinit+0x64>)
   218c4:	681b      	ldr	r3, [r3, #0]
   218c6:	6282      	str	r2, [r0, #40]	; 0x28
   218c8:	9301      	str	r3, [sp, #4]
   218ca:	4298      	cmp	r0, r3
   218cc:	d101      	bne.n	218d2 <__sinit+0x22>
   218ce:	2301      	movs	r3, #1
   218d0:	6183      	str	r3, [r0, #24]
   218d2:	0020      	movs	r0, r4
   218d4:	f000 f820 	bl	21918 <__sfp>
   218d8:	6060      	str	r0, [r4, #4]
   218da:	0020      	movs	r0, r4
   218dc:	f000 f81c 	bl	21918 <__sfp>
   218e0:	60a0      	str	r0, [r4, #8]
   218e2:	0020      	movs	r0, r4
   218e4:	f000 f818 	bl	21918 <__sfp>
   218e8:	2200      	movs	r2, #0
   218ea:	60e0      	str	r0, [r4, #12]
   218ec:	2104      	movs	r1, #4
   218ee:	6860      	ldr	r0, [r4, #4]
   218f0:	f7ff ffa4 	bl	2183c <std.isra.0>
   218f4:	2201      	movs	r2, #1
   218f6:	2109      	movs	r1, #9
   218f8:	68a0      	ldr	r0, [r4, #8]
   218fa:	f7ff ff9f 	bl	2183c <std.isra.0>
   218fe:	2202      	movs	r2, #2
   21900:	2112      	movs	r1, #18
   21902:	68e0      	ldr	r0, [r4, #12]
   21904:	f7ff ff9a 	bl	2183c <std.isra.0>
   21908:	2301      	movs	r3, #1
   2190a:	61a3      	str	r3, [r4, #24]
   2190c:	bd13      	pop	{r0, r1, r4, pc}
   2190e:	46c0      	nop			; (mov r8, r8)
   21910:	000262dc 	.word	0x000262dc
   21914:	0002182d 	.word	0x0002182d

00021918 <__sfp>:
   21918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2191a:	4b1e      	ldr	r3, [pc, #120]	; (21994 <__sfp+0x7c>)
   2191c:	0007      	movs	r7, r0
   2191e:	681e      	ldr	r6, [r3, #0]
   21920:	69b3      	ldr	r3, [r6, #24]
   21922:	2b00      	cmp	r3, #0
   21924:	d102      	bne.n	2192c <__sfp+0x14>
   21926:	0030      	movs	r0, r6
   21928:	f7ff ffc2 	bl	218b0 <__sinit>
   2192c:	3648      	adds	r6, #72	; 0x48
   2192e:	68b4      	ldr	r4, [r6, #8]
   21930:	6873      	ldr	r3, [r6, #4]
   21932:	3b01      	subs	r3, #1
   21934:	d504      	bpl.n	21940 <__sfp+0x28>
   21936:	6833      	ldr	r3, [r6, #0]
   21938:	2b00      	cmp	r3, #0
   2193a:	d007      	beq.n	2194c <__sfp+0x34>
   2193c:	6836      	ldr	r6, [r6, #0]
   2193e:	e7f6      	b.n	2192e <__sfp+0x16>
   21940:	220c      	movs	r2, #12
   21942:	5ea5      	ldrsh	r5, [r4, r2]
   21944:	2d00      	cmp	r5, #0
   21946:	d00d      	beq.n	21964 <__sfp+0x4c>
   21948:	3468      	adds	r4, #104	; 0x68
   2194a:	e7f2      	b.n	21932 <__sfp+0x1a>
   2194c:	2104      	movs	r1, #4
   2194e:	0038      	movs	r0, r7
   21950:	f7ff ff98 	bl	21884 <__sfmoreglue>
   21954:	6030      	str	r0, [r6, #0]
   21956:	2800      	cmp	r0, #0
   21958:	d1f0      	bne.n	2193c <__sfp+0x24>
   2195a:	230c      	movs	r3, #12
   2195c:	0004      	movs	r4, r0
   2195e:	603b      	str	r3, [r7, #0]
   21960:	0020      	movs	r0, r4
   21962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21964:	2301      	movs	r3, #1
   21966:	0020      	movs	r0, r4
   21968:	425b      	negs	r3, r3
   2196a:	81e3      	strh	r3, [r4, #14]
   2196c:	3302      	adds	r3, #2
   2196e:	81a3      	strh	r3, [r4, #12]
   21970:	6665      	str	r5, [r4, #100]	; 0x64
   21972:	6025      	str	r5, [r4, #0]
   21974:	60a5      	str	r5, [r4, #8]
   21976:	6065      	str	r5, [r4, #4]
   21978:	6125      	str	r5, [r4, #16]
   2197a:	6165      	str	r5, [r4, #20]
   2197c:	61a5      	str	r5, [r4, #24]
   2197e:	2208      	movs	r2, #8
   21980:	0029      	movs	r1, r5
   21982:	305c      	adds	r0, #92	; 0x5c
   21984:	f7ff facb 	bl	20f1e <memset>
   21988:	6365      	str	r5, [r4, #52]	; 0x34
   2198a:	63a5      	str	r5, [r4, #56]	; 0x38
   2198c:	64a5      	str	r5, [r4, #72]	; 0x48
   2198e:	64e5      	str	r5, [r4, #76]	; 0x4c
   21990:	e7e6      	b.n	21960 <__sfp+0x48>
   21992:	46c0      	nop			; (mov r8, r8)
   21994:	000262dc 	.word	0x000262dc

00021998 <_fwalk_reent>:
   21998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2199a:	0004      	movs	r4, r0
   2199c:	0007      	movs	r7, r0
   2199e:	2600      	movs	r6, #0
   219a0:	9101      	str	r1, [sp, #4]
   219a2:	3448      	adds	r4, #72	; 0x48
   219a4:	2c00      	cmp	r4, #0
   219a6:	d101      	bne.n	219ac <_fwalk_reent+0x14>
   219a8:	0030      	movs	r0, r6
   219aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   219ac:	6863      	ldr	r3, [r4, #4]
   219ae:	68a5      	ldr	r5, [r4, #8]
   219b0:	9300      	str	r3, [sp, #0]
   219b2:	9b00      	ldr	r3, [sp, #0]
   219b4:	3b01      	subs	r3, #1
   219b6:	9300      	str	r3, [sp, #0]
   219b8:	d501      	bpl.n	219be <_fwalk_reent+0x26>
   219ba:	6824      	ldr	r4, [r4, #0]
   219bc:	e7f2      	b.n	219a4 <_fwalk_reent+0xc>
   219be:	89ab      	ldrh	r3, [r5, #12]
   219c0:	2b01      	cmp	r3, #1
   219c2:	d908      	bls.n	219d6 <_fwalk_reent+0x3e>
   219c4:	220e      	movs	r2, #14
   219c6:	5eab      	ldrsh	r3, [r5, r2]
   219c8:	3301      	adds	r3, #1
   219ca:	d004      	beq.n	219d6 <_fwalk_reent+0x3e>
   219cc:	0029      	movs	r1, r5
   219ce:	0038      	movs	r0, r7
   219d0:	9b01      	ldr	r3, [sp, #4]
   219d2:	4798      	blx	r3
   219d4:	4306      	orrs	r6, r0
   219d6:	3568      	adds	r5, #104	; 0x68
   219d8:	e7eb      	b.n	219b2 <_fwalk_reent+0x1a>

000219da <__locale_ctype_ptr_l>:
   219da:	30ec      	adds	r0, #236	; 0xec
   219dc:	6800      	ldr	r0, [r0, #0]
   219de:	4770      	bx	lr

000219e0 <__locale_ctype_ptr>:
   219e0:	4b04      	ldr	r3, [pc, #16]	; (219f4 <__locale_ctype_ptr+0x14>)
   219e2:	681b      	ldr	r3, [r3, #0]
   219e4:	6a1b      	ldr	r3, [r3, #32]
   219e6:	2b00      	cmp	r3, #0
   219e8:	d100      	bne.n	219ec <__locale_ctype_ptr+0xc>
   219ea:	4b03      	ldr	r3, [pc, #12]	; (219f8 <__locale_ctype_ptr+0x18>)
   219ec:	33ec      	adds	r3, #236	; 0xec
   219ee:	6818      	ldr	r0, [r3, #0]
   219f0:	4770      	bx	lr
   219f2:	46c0      	nop			; (mov r8, r8)
   219f4:	2000012c 	.word	0x2000012c
   219f8:	20000190 	.word	0x20000190

000219fc <__swhatbuf_r>:
   219fc:	b570      	push	{r4, r5, r6, lr}
   219fe:	000e      	movs	r6, r1
   21a00:	001d      	movs	r5, r3
   21a02:	230e      	movs	r3, #14
   21a04:	5ec9      	ldrsh	r1, [r1, r3]
   21a06:	b090      	sub	sp, #64	; 0x40
   21a08:	0014      	movs	r4, r2
   21a0a:	2900      	cmp	r1, #0
   21a0c:	da07      	bge.n	21a1e <__swhatbuf_r+0x22>
   21a0e:	2300      	movs	r3, #0
   21a10:	602b      	str	r3, [r5, #0]
   21a12:	89b3      	ldrh	r3, [r6, #12]
   21a14:	061b      	lsls	r3, r3, #24
   21a16:	d411      	bmi.n	21a3c <__swhatbuf_r+0x40>
   21a18:	2380      	movs	r3, #128	; 0x80
   21a1a:	00db      	lsls	r3, r3, #3
   21a1c:	e00f      	b.n	21a3e <__swhatbuf_r+0x42>
   21a1e:	aa01      	add	r2, sp, #4
   21a20:	f000 fbe6 	bl	221f0 <_fstat_r>
   21a24:	2800      	cmp	r0, #0
   21a26:	dbf2      	blt.n	21a0e <__swhatbuf_r+0x12>
   21a28:	22f0      	movs	r2, #240	; 0xf0
   21a2a:	9b02      	ldr	r3, [sp, #8]
   21a2c:	0212      	lsls	r2, r2, #8
   21a2e:	4013      	ands	r3, r2
   21a30:	4a05      	ldr	r2, [pc, #20]	; (21a48 <__swhatbuf_r+0x4c>)
   21a32:	189b      	adds	r3, r3, r2
   21a34:	425a      	negs	r2, r3
   21a36:	4153      	adcs	r3, r2
   21a38:	602b      	str	r3, [r5, #0]
   21a3a:	e7ed      	b.n	21a18 <__swhatbuf_r+0x1c>
   21a3c:	2340      	movs	r3, #64	; 0x40
   21a3e:	2000      	movs	r0, #0
   21a40:	6023      	str	r3, [r4, #0]
   21a42:	b010      	add	sp, #64	; 0x40
   21a44:	bd70      	pop	{r4, r5, r6, pc}
   21a46:	46c0      	nop			; (mov r8, r8)
   21a48:	ffffe000 	.word	0xffffe000

00021a4c <__smakebuf_r>:
   21a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21a4e:	2602      	movs	r6, #2
   21a50:	898b      	ldrh	r3, [r1, #12]
   21a52:	0005      	movs	r5, r0
   21a54:	000c      	movs	r4, r1
   21a56:	4233      	tst	r3, r6
   21a58:	d006      	beq.n	21a68 <__smakebuf_r+0x1c>
   21a5a:	0023      	movs	r3, r4
   21a5c:	3347      	adds	r3, #71	; 0x47
   21a5e:	6023      	str	r3, [r4, #0]
   21a60:	6123      	str	r3, [r4, #16]
   21a62:	2301      	movs	r3, #1
   21a64:	6163      	str	r3, [r4, #20]
   21a66:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   21a68:	ab01      	add	r3, sp, #4
   21a6a:	466a      	mov	r2, sp
   21a6c:	f7ff ffc6 	bl	219fc <__swhatbuf_r>
   21a70:	9900      	ldr	r1, [sp, #0]
   21a72:	0007      	movs	r7, r0
   21a74:	0028      	movs	r0, r5
   21a76:	f7ff faa5 	bl	20fc4 <_malloc_r>
   21a7a:	2800      	cmp	r0, #0
   21a7c:	d108      	bne.n	21a90 <__smakebuf_r+0x44>
   21a7e:	220c      	movs	r2, #12
   21a80:	5ea3      	ldrsh	r3, [r4, r2]
   21a82:	059a      	lsls	r2, r3, #22
   21a84:	d4ef      	bmi.n	21a66 <__smakebuf_r+0x1a>
   21a86:	2203      	movs	r2, #3
   21a88:	4393      	bics	r3, r2
   21a8a:	431e      	orrs	r6, r3
   21a8c:	81a6      	strh	r6, [r4, #12]
   21a8e:	e7e4      	b.n	21a5a <__smakebuf_r+0xe>
   21a90:	4b0f      	ldr	r3, [pc, #60]	; (21ad0 <__smakebuf_r+0x84>)
   21a92:	62ab      	str	r3, [r5, #40]	; 0x28
   21a94:	2380      	movs	r3, #128	; 0x80
   21a96:	89a2      	ldrh	r2, [r4, #12]
   21a98:	6020      	str	r0, [r4, #0]
   21a9a:	4313      	orrs	r3, r2
   21a9c:	81a3      	strh	r3, [r4, #12]
   21a9e:	9b00      	ldr	r3, [sp, #0]
   21aa0:	6120      	str	r0, [r4, #16]
   21aa2:	6163      	str	r3, [r4, #20]
   21aa4:	9b01      	ldr	r3, [sp, #4]
   21aa6:	2b00      	cmp	r3, #0
   21aa8:	d00d      	beq.n	21ac6 <__smakebuf_r+0x7a>
   21aaa:	230e      	movs	r3, #14
   21aac:	5ee1      	ldrsh	r1, [r4, r3]
   21aae:	0028      	movs	r0, r5
   21ab0:	f000 fbb0 	bl	22214 <_isatty_r>
   21ab4:	2800      	cmp	r0, #0
   21ab6:	d006      	beq.n	21ac6 <__smakebuf_r+0x7a>
   21ab8:	2203      	movs	r2, #3
   21aba:	89a3      	ldrh	r3, [r4, #12]
   21abc:	4393      	bics	r3, r2
   21abe:	001a      	movs	r2, r3
   21ac0:	2301      	movs	r3, #1
   21ac2:	4313      	orrs	r3, r2
   21ac4:	81a3      	strh	r3, [r4, #12]
   21ac6:	89a0      	ldrh	r0, [r4, #12]
   21ac8:	4338      	orrs	r0, r7
   21aca:	81a0      	strh	r0, [r4, #12]
   21acc:	e7cb      	b.n	21a66 <__smakebuf_r+0x1a>
   21ace:	46c0      	nop			; (mov r8, r8)
   21ad0:	0002182d 	.word	0x0002182d

00021ad4 <__ascii_mbtowc>:
   21ad4:	b082      	sub	sp, #8
   21ad6:	2900      	cmp	r1, #0
   21ad8:	d100      	bne.n	21adc <__ascii_mbtowc+0x8>
   21ada:	a901      	add	r1, sp, #4
   21adc:	1e10      	subs	r0, r2, #0
   21ade:	d006      	beq.n	21aee <__ascii_mbtowc+0x1a>
   21ae0:	2b00      	cmp	r3, #0
   21ae2:	d006      	beq.n	21af2 <__ascii_mbtowc+0x1e>
   21ae4:	7813      	ldrb	r3, [r2, #0]
   21ae6:	600b      	str	r3, [r1, #0]
   21ae8:	7810      	ldrb	r0, [r2, #0]
   21aea:	1e43      	subs	r3, r0, #1
   21aec:	4198      	sbcs	r0, r3
   21aee:	b002      	add	sp, #8
   21af0:	4770      	bx	lr
   21af2:	2002      	movs	r0, #2
   21af4:	4240      	negs	r0, r0
   21af6:	e7fa      	b.n	21aee <__ascii_mbtowc+0x1a>

00021af8 <__malloc_lock>:
   21af8:	4770      	bx	lr

00021afa <__malloc_unlock>:
   21afa:	4770      	bx	lr

00021afc <__ssputs_r>:
   21afc:	b5f0      	push	{r4, r5, r6, r7, lr}
   21afe:	688e      	ldr	r6, [r1, #8]
   21b00:	b085      	sub	sp, #20
   21b02:	0007      	movs	r7, r0
   21b04:	000c      	movs	r4, r1
   21b06:	9203      	str	r2, [sp, #12]
   21b08:	9301      	str	r3, [sp, #4]
   21b0a:	429e      	cmp	r6, r3
   21b0c:	d839      	bhi.n	21b82 <__ssputs_r+0x86>
   21b0e:	2390      	movs	r3, #144	; 0x90
   21b10:	898a      	ldrh	r2, [r1, #12]
   21b12:	00db      	lsls	r3, r3, #3
   21b14:	421a      	tst	r2, r3
   21b16:	d034      	beq.n	21b82 <__ssputs_r+0x86>
   21b18:	2503      	movs	r5, #3
   21b1a:	6909      	ldr	r1, [r1, #16]
   21b1c:	6823      	ldr	r3, [r4, #0]
   21b1e:	1a5b      	subs	r3, r3, r1
   21b20:	9302      	str	r3, [sp, #8]
   21b22:	6963      	ldr	r3, [r4, #20]
   21b24:	9802      	ldr	r0, [sp, #8]
   21b26:	435d      	muls	r5, r3
   21b28:	0feb      	lsrs	r3, r5, #31
   21b2a:	195d      	adds	r5, r3, r5
   21b2c:	9b01      	ldr	r3, [sp, #4]
   21b2e:	106d      	asrs	r5, r5, #1
   21b30:	3301      	adds	r3, #1
   21b32:	181b      	adds	r3, r3, r0
   21b34:	42ab      	cmp	r3, r5
   21b36:	d900      	bls.n	21b3a <__ssputs_r+0x3e>
   21b38:	001d      	movs	r5, r3
   21b3a:	0553      	lsls	r3, r2, #21
   21b3c:	d532      	bpl.n	21ba4 <__ssputs_r+0xa8>
   21b3e:	0029      	movs	r1, r5
   21b40:	0038      	movs	r0, r7
   21b42:	f7ff fa3f 	bl	20fc4 <_malloc_r>
   21b46:	1e06      	subs	r6, r0, #0
   21b48:	d109      	bne.n	21b5e <__ssputs_r+0x62>
   21b4a:	230c      	movs	r3, #12
   21b4c:	603b      	str	r3, [r7, #0]
   21b4e:	2340      	movs	r3, #64	; 0x40
   21b50:	2001      	movs	r0, #1
   21b52:	89a2      	ldrh	r2, [r4, #12]
   21b54:	4240      	negs	r0, r0
   21b56:	4313      	orrs	r3, r2
   21b58:	81a3      	strh	r3, [r4, #12]
   21b5a:	b005      	add	sp, #20
   21b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21b5e:	9a02      	ldr	r2, [sp, #8]
   21b60:	6921      	ldr	r1, [r4, #16]
   21b62:	f7ff f9c1 	bl	20ee8 <memcpy>
   21b66:	89a3      	ldrh	r3, [r4, #12]
   21b68:	4a14      	ldr	r2, [pc, #80]	; (21bbc <__ssputs_r+0xc0>)
   21b6a:	401a      	ands	r2, r3
   21b6c:	2380      	movs	r3, #128	; 0x80
   21b6e:	4313      	orrs	r3, r2
   21b70:	81a3      	strh	r3, [r4, #12]
   21b72:	9b02      	ldr	r3, [sp, #8]
   21b74:	6126      	str	r6, [r4, #16]
   21b76:	18f6      	adds	r6, r6, r3
   21b78:	6026      	str	r6, [r4, #0]
   21b7a:	6165      	str	r5, [r4, #20]
   21b7c:	9e01      	ldr	r6, [sp, #4]
   21b7e:	1aed      	subs	r5, r5, r3
   21b80:	60a5      	str	r5, [r4, #8]
   21b82:	9b01      	ldr	r3, [sp, #4]
   21b84:	42b3      	cmp	r3, r6
   21b86:	d200      	bcs.n	21b8a <__ssputs_r+0x8e>
   21b88:	001e      	movs	r6, r3
   21b8a:	0032      	movs	r2, r6
   21b8c:	9903      	ldr	r1, [sp, #12]
   21b8e:	6820      	ldr	r0, [r4, #0]
   21b90:	f7ff f9b3 	bl	20efa <memmove>
   21b94:	68a3      	ldr	r3, [r4, #8]
   21b96:	2000      	movs	r0, #0
   21b98:	1b9b      	subs	r3, r3, r6
   21b9a:	60a3      	str	r3, [r4, #8]
   21b9c:	6823      	ldr	r3, [r4, #0]
   21b9e:	199e      	adds	r6, r3, r6
   21ba0:	6026      	str	r6, [r4, #0]
   21ba2:	e7da      	b.n	21b5a <__ssputs_r+0x5e>
   21ba4:	002a      	movs	r2, r5
   21ba6:	0038      	movs	r0, r7
   21ba8:	f000 fb65 	bl	22276 <_realloc_r>
   21bac:	1e06      	subs	r6, r0, #0
   21bae:	d1e0      	bne.n	21b72 <__ssputs_r+0x76>
   21bb0:	6921      	ldr	r1, [r4, #16]
   21bb2:	0038      	movs	r0, r7
   21bb4:	f7ff f9bc 	bl	20f30 <_free_r>
   21bb8:	e7c7      	b.n	21b4a <__ssputs_r+0x4e>
   21bba:	46c0      	nop			; (mov r8, r8)
   21bbc:	fffffb7f 	.word	0xfffffb7f

00021bc0 <_svfiprintf_r>:
   21bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   21bc2:	b09f      	sub	sp, #124	; 0x7c
   21bc4:	9002      	str	r0, [sp, #8]
   21bc6:	9305      	str	r3, [sp, #20]
   21bc8:	898b      	ldrh	r3, [r1, #12]
   21bca:	000f      	movs	r7, r1
   21bcc:	0016      	movs	r6, r2
   21bce:	061b      	lsls	r3, r3, #24
   21bd0:	d511      	bpl.n	21bf6 <_svfiprintf_r+0x36>
   21bd2:	690b      	ldr	r3, [r1, #16]
   21bd4:	2b00      	cmp	r3, #0
   21bd6:	d10e      	bne.n	21bf6 <_svfiprintf_r+0x36>
   21bd8:	2140      	movs	r1, #64	; 0x40
   21bda:	f7ff f9f3 	bl	20fc4 <_malloc_r>
   21bde:	6038      	str	r0, [r7, #0]
   21be0:	6138      	str	r0, [r7, #16]
   21be2:	2800      	cmp	r0, #0
   21be4:	d105      	bne.n	21bf2 <_svfiprintf_r+0x32>
   21be6:	230c      	movs	r3, #12
   21be8:	9a02      	ldr	r2, [sp, #8]
   21bea:	3801      	subs	r0, #1
   21bec:	6013      	str	r3, [r2, #0]
   21bee:	b01f      	add	sp, #124	; 0x7c
   21bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21bf2:	2340      	movs	r3, #64	; 0x40
   21bf4:	617b      	str	r3, [r7, #20]
   21bf6:	2300      	movs	r3, #0
   21bf8:	ad06      	add	r5, sp, #24
   21bfa:	616b      	str	r3, [r5, #20]
   21bfc:	3320      	adds	r3, #32
   21bfe:	766b      	strb	r3, [r5, #25]
   21c00:	3310      	adds	r3, #16
   21c02:	76ab      	strb	r3, [r5, #26]
   21c04:	0034      	movs	r4, r6
   21c06:	7823      	ldrb	r3, [r4, #0]
   21c08:	2b00      	cmp	r3, #0
   21c0a:	d147      	bne.n	21c9c <_svfiprintf_r+0xdc>
   21c0c:	1ba3      	subs	r3, r4, r6
   21c0e:	9304      	str	r3, [sp, #16]
   21c10:	d00d      	beq.n	21c2e <_svfiprintf_r+0x6e>
   21c12:	1ba3      	subs	r3, r4, r6
   21c14:	0032      	movs	r2, r6
   21c16:	0039      	movs	r1, r7
   21c18:	9802      	ldr	r0, [sp, #8]
   21c1a:	f7ff ff6f 	bl	21afc <__ssputs_r>
   21c1e:	1c43      	adds	r3, r0, #1
   21c20:	d100      	bne.n	21c24 <_svfiprintf_r+0x64>
   21c22:	e0b5      	b.n	21d90 <_svfiprintf_r+0x1d0>
   21c24:	696a      	ldr	r2, [r5, #20]
   21c26:	9b04      	ldr	r3, [sp, #16]
   21c28:	4694      	mov	ip, r2
   21c2a:	4463      	add	r3, ip
   21c2c:	616b      	str	r3, [r5, #20]
   21c2e:	7823      	ldrb	r3, [r4, #0]
   21c30:	2b00      	cmp	r3, #0
   21c32:	d100      	bne.n	21c36 <_svfiprintf_r+0x76>
   21c34:	e0ac      	b.n	21d90 <_svfiprintf_r+0x1d0>
   21c36:	2201      	movs	r2, #1
   21c38:	2300      	movs	r3, #0
   21c3a:	4252      	negs	r2, r2
   21c3c:	606a      	str	r2, [r5, #4]
   21c3e:	a902      	add	r1, sp, #8
   21c40:	3254      	adds	r2, #84	; 0x54
   21c42:	1852      	adds	r2, r2, r1
   21c44:	3401      	adds	r4, #1
   21c46:	602b      	str	r3, [r5, #0]
   21c48:	60eb      	str	r3, [r5, #12]
   21c4a:	60ab      	str	r3, [r5, #8]
   21c4c:	7013      	strb	r3, [r2, #0]
   21c4e:	65ab      	str	r3, [r5, #88]	; 0x58
   21c50:	4e58      	ldr	r6, [pc, #352]	; (21db4 <_svfiprintf_r+0x1f4>)
   21c52:	2205      	movs	r2, #5
   21c54:	7821      	ldrb	r1, [r4, #0]
   21c56:	0030      	movs	r0, r6
   21c58:	f000 fb02 	bl	22260 <memchr>
   21c5c:	1c62      	adds	r2, r4, #1
   21c5e:	2800      	cmp	r0, #0
   21c60:	d120      	bne.n	21ca4 <_svfiprintf_r+0xe4>
   21c62:	6829      	ldr	r1, [r5, #0]
   21c64:	06cb      	lsls	r3, r1, #27
   21c66:	d504      	bpl.n	21c72 <_svfiprintf_r+0xb2>
   21c68:	2353      	movs	r3, #83	; 0x53
   21c6a:	ae02      	add	r6, sp, #8
   21c6c:	3020      	adds	r0, #32
   21c6e:	199b      	adds	r3, r3, r6
   21c70:	7018      	strb	r0, [r3, #0]
   21c72:	070b      	lsls	r3, r1, #28
   21c74:	d504      	bpl.n	21c80 <_svfiprintf_r+0xc0>
   21c76:	2353      	movs	r3, #83	; 0x53
   21c78:	202b      	movs	r0, #43	; 0x2b
   21c7a:	ae02      	add	r6, sp, #8
   21c7c:	199b      	adds	r3, r3, r6
   21c7e:	7018      	strb	r0, [r3, #0]
   21c80:	7823      	ldrb	r3, [r4, #0]
   21c82:	2b2a      	cmp	r3, #42	; 0x2a
   21c84:	d016      	beq.n	21cb4 <_svfiprintf_r+0xf4>
   21c86:	2000      	movs	r0, #0
   21c88:	210a      	movs	r1, #10
   21c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21c8c:	7822      	ldrb	r2, [r4, #0]
   21c8e:	3a30      	subs	r2, #48	; 0x30
   21c90:	2a09      	cmp	r2, #9
   21c92:	d955      	bls.n	21d40 <_svfiprintf_r+0x180>
   21c94:	2800      	cmp	r0, #0
   21c96:	d015      	beq.n	21cc4 <_svfiprintf_r+0x104>
   21c98:	9309      	str	r3, [sp, #36]	; 0x24
   21c9a:	e013      	b.n	21cc4 <_svfiprintf_r+0x104>
   21c9c:	2b25      	cmp	r3, #37	; 0x25
   21c9e:	d0b5      	beq.n	21c0c <_svfiprintf_r+0x4c>
   21ca0:	3401      	adds	r4, #1
   21ca2:	e7b0      	b.n	21c06 <_svfiprintf_r+0x46>
   21ca4:	2301      	movs	r3, #1
   21ca6:	1b80      	subs	r0, r0, r6
   21ca8:	4083      	lsls	r3, r0
   21caa:	6829      	ldr	r1, [r5, #0]
   21cac:	0014      	movs	r4, r2
   21cae:	430b      	orrs	r3, r1
   21cb0:	602b      	str	r3, [r5, #0]
   21cb2:	e7cd      	b.n	21c50 <_svfiprintf_r+0x90>
   21cb4:	9b05      	ldr	r3, [sp, #20]
   21cb6:	1d18      	adds	r0, r3, #4
   21cb8:	681b      	ldr	r3, [r3, #0]
   21cba:	9005      	str	r0, [sp, #20]
   21cbc:	2b00      	cmp	r3, #0
   21cbe:	db39      	blt.n	21d34 <_svfiprintf_r+0x174>
   21cc0:	9309      	str	r3, [sp, #36]	; 0x24
   21cc2:	0014      	movs	r4, r2
   21cc4:	7823      	ldrb	r3, [r4, #0]
   21cc6:	2b2e      	cmp	r3, #46	; 0x2e
   21cc8:	d10b      	bne.n	21ce2 <_svfiprintf_r+0x122>
   21cca:	7863      	ldrb	r3, [r4, #1]
   21ccc:	1c62      	adds	r2, r4, #1
   21cce:	2b2a      	cmp	r3, #42	; 0x2a
   21cd0:	d13e      	bne.n	21d50 <_svfiprintf_r+0x190>
   21cd2:	9b05      	ldr	r3, [sp, #20]
   21cd4:	3402      	adds	r4, #2
   21cd6:	1d1a      	adds	r2, r3, #4
   21cd8:	681b      	ldr	r3, [r3, #0]
   21cda:	9205      	str	r2, [sp, #20]
   21cdc:	2b00      	cmp	r3, #0
   21cde:	db34      	blt.n	21d4a <_svfiprintf_r+0x18a>
   21ce0:	9307      	str	r3, [sp, #28]
   21ce2:	4e35      	ldr	r6, [pc, #212]	; (21db8 <_svfiprintf_r+0x1f8>)
   21ce4:	7821      	ldrb	r1, [r4, #0]
   21ce6:	2203      	movs	r2, #3
   21ce8:	0030      	movs	r0, r6
   21cea:	f000 fab9 	bl	22260 <memchr>
   21cee:	2800      	cmp	r0, #0
   21cf0:	d006      	beq.n	21d00 <_svfiprintf_r+0x140>
   21cf2:	2340      	movs	r3, #64	; 0x40
   21cf4:	1b80      	subs	r0, r0, r6
   21cf6:	4083      	lsls	r3, r0
   21cf8:	682a      	ldr	r2, [r5, #0]
   21cfa:	3401      	adds	r4, #1
   21cfc:	4313      	orrs	r3, r2
   21cfe:	602b      	str	r3, [r5, #0]
   21d00:	7821      	ldrb	r1, [r4, #0]
   21d02:	2206      	movs	r2, #6
   21d04:	482d      	ldr	r0, [pc, #180]	; (21dbc <_svfiprintf_r+0x1fc>)
   21d06:	1c66      	adds	r6, r4, #1
   21d08:	7629      	strb	r1, [r5, #24]
   21d0a:	f000 faa9 	bl	22260 <memchr>
   21d0e:	2800      	cmp	r0, #0
   21d10:	d046      	beq.n	21da0 <_svfiprintf_r+0x1e0>
   21d12:	4b2b      	ldr	r3, [pc, #172]	; (21dc0 <_svfiprintf_r+0x200>)
   21d14:	2b00      	cmp	r3, #0
   21d16:	d12f      	bne.n	21d78 <_svfiprintf_r+0x1b8>
   21d18:	6829      	ldr	r1, [r5, #0]
   21d1a:	9b05      	ldr	r3, [sp, #20]
   21d1c:	2207      	movs	r2, #7
   21d1e:	05c9      	lsls	r1, r1, #23
   21d20:	d528      	bpl.n	21d74 <_svfiprintf_r+0x1b4>
   21d22:	189b      	adds	r3, r3, r2
   21d24:	4393      	bics	r3, r2
   21d26:	3308      	adds	r3, #8
   21d28:	9305      	str	r3, [sp, #20]
   21d2a:	696b      	ldr	r3, [r5, #20]
   21d2c:	9a03      	ldr	r2, [sp, #12]
   21d2e:	189b      	adds	r3, r3, r2
   21d30:	616b      	str	r3, [r5, #20]
   21d32:	e767      	b.n	21c04 <_svfiprintf_r+0x44>
   21d34:	425b      	negs	r3, r3
   21d36:	60eb      	str	r3, [r5, #12]
   21d38:	2302      	movs	r3, #2
   21d3a:	430b      	orrs	r3, r1
   21d3c:	602b      	str	r3, [r5, #0]
   21d3e:	e7c0      	b.n	21cc2 <_svfiprintf_r+0x102>
   21d40:	434b      	muls	r3, r1
   21d42:	3401      	adds	r4, #1
   21d44:	189b      	adds	r3, r3, r2
   21d46:	2001      	movs	r0, #1
   21d48:	e7a0      	b.n	21c8c <_svfiprintf_r+0xcc>
   21d4a:	2301      	movs	r3, #1
   21d4c:	425b      	negs	r3, r3
   21d4e:	e7c7      	b.n	21ce0 <_svfiprintf_r+0x120>
   21d50:	2300      	movs	r3, #0
   21d52:	0014      	movs	r4, r2
   21d54:	200a      	movs	r0, #10
   21d56:	001a      	movs	r2, r3
   21d58:	606b      	str	r3, [r5, #4]
   21d5a:	7821      	ldrb	r1, [r4, #0]
   21d5c:	3930      	subs	r1, #48	; 0x30
   21d5e:	2909      	cmp	r1, #9
   21d60:	d903      	bls.n	21d6a <_svfiprintf_r+0x1aa>
   21d62:	2b00      	cmp	r3, #0
   21d64:	d0bd      	beq.n	21ce2 <_svfiprintf_r+0x122>
   21d66:	9207      	str	r2, [sp, #28]
   21d68:	e7bb      	b.n	21ce2 <_svfiprintf_r+0x122>
   21d6a:	4342      	muls	r2, r0
   21d6c:	3401      	adds	r4, #1
   21d6e:	1852      	adds	r2, r2, r1
   21d70:	2301      	movs	r3, #1
   21d72:	e7f2      	b.n	21d5a <_svfiprintf_r+0x19a>
   21d74:	3307      	adds	r3, #7
   21d76:	e7d5      	b.n	21d24 <_svfiprintf_r+0x164>
   21d78:	ab05      	add	r3, sp, #20
   21d7a:	9300      	str	r3, [sp, #0]
   21d7c:	003a      	movs	r2, r7
   21d7e:	4b11      	ldr	r3, [pc, #68]	; (21dc4 <_svfiprintf_r+0x204>)
   21d80:	0029      	movs	r1, r5
   21d82:	9802      	ldr	r0, [sp, #8]
   21d84:	e000      	b.n	21d88 <_svfiprintf_r+0x1c8>
   21d86:	bf00      	nop
   21d88:	9003      	str	r0, [sp, #12]
   21d8a:	9b03      	ldr	r3, [sp, #12]
   21d8c:	3301      	adds	r3, #1
   21d8e:	d1cc      	bne.n	21d2a <_svfiprintf_r+0x16a>
   21d90:	89bb      	ldrh	r3, [r7, #12]
   21d92:	980b      	ldr	r0, [sp, #44]	; 0x2c
   21d94:	065b      	lsls	r3, r3, #25
   21d96:	d400      	bmi.n	21d9a <_svfiprintf_r+0x1da>
   21d98:	e729      	b.n	21bee <_svfiprintf_r+0x2e>
   21d9a:	2001      	movs	r0, #1
   21d9c:	4240      	negs	r0, r0
   21d9e:	e726      	b.n	21bee <_svfiprintf_r+0x2e>
   21da0:	ab05      	add	r3, sp, #20
   21da2:	9300      	str	r3, [sp, #0]
   21da4:	003a      	movs	r2, r7
   21da6:	4b07      	ldr	r3, [pc, #28]	; (21dc4 <_svfiprintf_r+0x204>)
   21da8:	0029      	movs	r1, r5
   21daa:	9802      	ldr	r0, [sp, #8]
   21dac:	f000 f87a 	bl	21ea4 <_printf_i>
   21db0:	e7ea      	b.n	21d88 <_svfiprintf_r+0x1c8>
   21db2:	46c0      	nop			; (mov r8, r8)
   21db4:	0002634a 	.word	0x0002634a
   21db8:	00026350 	.word	0x00026350
   21dbc:	00026354 	.word	0x00026354
   21dc0:	00000000 	.word	0x00000000
   21dc4:	00021afd 	.word	0x00021afd

00021dc8 <_printf_common>:
   21dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21dca:	0015      	movs	r5, r2
   21dcc:	9301      	str	r3, [sp, #4]
   21dce:	688a      	ldr	r2, [r1, #8]
   21dd0:	690b      	ldr	r3, [r1, #16]
   21dd2:	9000      	str	r0, [sp, #0]
   21dd4:	000c      	movs	r4, r1
   21dd6:	4293      	cmp	r3, r2
   21dd8:	da00      	bge.n	21ddc <_printf_common+0x14>
   21dda:	0013      	movs	r3, r2
   21ddc:	0022      	movs	r2, r4
   21dde:	602b      	str	r3, [r5, #0]
   21de0:	3243      	adds	r2, #67	; 0x43
   21de2:	7812      	ldrb	r2, [r2, #0]
   21de4:	2a00      	cmp	r2, #0
   21de6:	d001      	beq.n	21dec <_printf_common+0x24>
   21de8:	3301      	adds	r3, #1
   21dea:	602b      	str	r3, [r5, #0]
   21dec:	6823      	ldr	r3, [r4, #0]
   21dee:	069b      	lsls	r3, r3, #26
   21df0:	d502      	bpl.n	21df8 <_printf_common+0x30>
   21df2:	682b      	ldr	r3, [r5, #0]
   21df4:	3302      	adds	r3, #2
   21df6:	602b      	str	r3, [r5, #0]
   21df8:	2706      	movs	r7, #6
   21dfa:	6823      	ldr	r3, [r4, #0]
   21dfc:	401f      	ands	r7, r3
   21dfe:	d027      	beq.n	21e50 <_printf_common+0x88>
   21e00:	0023      	movs	r3, r4
   21e02:	3343      	adds	r3, #67	; 0x43
   21e04:	781b      	ldrb	r3, [r3, #0]
   21e06:	1e5a      	subs	r2, r3, #1
   21e08:	4193      	sbcs	r3, r2
   21e0a:	6822      	ldr	r2, [r4, #0]
   21e0c:	0692      	lsls	r2, r2, #26
   21e0e:	d430      	bmi.n	21e72 <_printf_common+0xaa>
   21e10:	0022      	movs	r2, r4
   21e12:	9901      	ldr	r1, [sp, #4]
   21e14:	3243      	adds	r2, #67	; 0x43
   21e16:	9800      	ldr	r0, [sp, #0]
   21e18:	9e08      	ldr	r6, [sp, #32]
   21e1a:	47b0      	blx	r6
   21e1c:	1c43      	adds	r3, r0, #1
   21e1e:	d025      	beq.n	21e6c <_printf_common+0xa4>
   21e20:	2306      	movs	r3, #6
   21e22:	6820      	ldr	r0, [r4, #0]
   21e24:	682a      	ldr	r2, [r5, #0]
   21e26:	68e1      	ldr	r1, [r4, #12]
   21e28:	4003      	ands	r3, r0
   21e2a:	2500      	movs	r5, #0
   21e2c:	2b04      	cmp	r3, #4
   21e2e:	d103      	bne.n	21e38 <_printf_common+0x70>
   21e30:	1a8d      	subs	r5, r1, r2
   21e32:	43eb      	mvns	r3, r5
   21e34:	17db      	asrs	r3, r3, #31
   21e36:	401d      	ands	r5, r3
   21e38:	68a3      	ldr	r3, [r4, #8]
   21e3a:	6922      	ldr	r2, [r4, #16]
   21e3c:	4293      	cmp	r3, r2
   21e3e:	dd01      	ble.n	21e44 <_printf_common+0x7c>
   21e40:	1a9b      	subs	r3, r3, r2
   21e42:	18ed      	adds	r5, r5, r3
   21e44:	2700      	movs	r7, #0
   21e46:	42bd      	cmp	r5, r7
   21e48:	d120      	bne.n	21e8c <_printf_common+0xc4>
   21e4a:	2000      	movs	r0, #0
   21e4c:	e010      	b.n	21e70 <_printf_common+0xa8>
   21e4e:	3701      	adds	r7, #1
   21e50:	68e3      	ldr	r3, [r4, #12]
   21e52:	682a      	ldr	r2, [r5, #0]
   21e54:	1a9b      	subs	r3, r3, r2
   21e56:	429f      	cmp	r7, r3
   21e58:	dad2      	bge.n	21e00 <_printf_common+0x38>
   21e5a:	0022      	movs	r2, r4
   21e5c:	2301      	movs	r3, #1
   21e5e:	3219      	adds	r2, #25
   21e60:	9901      	ldr	r1, [sp, #4]
   21e62:	9800      	ldr	r0, [sp, #0]
   21e64:	9e08      	ldr	r6, [sp, #32]
   21e66:	47b0      	blx	r6
   21e68:	1c43      	adds	r3, r0, #1
   21e6a:	d1f0      	bne.n	21e4e <_printf_common+0x86>
   21e6c:	2001      	movs	r0, #1
   21e6e:	4240      	negs	r0, r0
   21e70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   21e72:	2030      	movs	r0, #48	; 0x30
   21e74:	18e1      	adds	r1, r4, r3
   21e76:	3143      	adds	r1, #67	; 0x43
   21e78:	7008      	strb	r0, [r1, #0]
   21e7a:	0021      	movs	r1, r4
   21e7c:	1c5a      	adds	r2, r3, #1
   21e7e:	3145      	adds	r1, #69	; 0x45
   21e80:	7809      	ldrb	r1, [r1, #0]
   21e82:	18a2      	adds	r2, r4, r2
   21e84:	3243      	adds	r2, #67	; 0x43
   21e86:	3302      	adds	r3, #2
   21e88:	7011      	strb	r1, [r2, #0]
   21e8a:	e7c1      	b.n	21e10 <_printf_common+0x48>
   21e8c:	0022      	movs	r2, r4
   21e8e:	2301      	movs	r3, #1
   21e90:	321a      	adds	r2, #26
   21e92:	9901      	ldr	r1, [sp, #4]
   21e94:	9800      	ldr	r0, [sp, #0]
   21e96:	9e08      	ldr	r6, [sp, #32]
   21e98:	47b0      	blx	r6
   21e9a:	1c43      	adds	r3, r0, #1
   21e9c:	d0e6      	beq.n	21e6c <_printf_common+0xa4>
   21e9e:	3701      	adds	r7, #1
   21ea0:	e7d1      	b.n	21e46 <_printf_common+0x7e>
	...

00021ea4 <_printf_i>:
   21ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21ea6:	b08b      	sub	sp, #44	; 0x2c
   21ea8:	9206      	str	r2, [sp, #24]
   21eaa:	000a      	movs	r2, r1
   21eac:	3243      	adds	r2, #67	; 0x43
   21eae:	9307      	str	r3, [sp, #28]
   21eb0:	9005      	str	r0, [sp, #20]
   21eb2:	9204      	str	r2, [sp, #16]
   21eb4:	7e0a      	ldrb	r2, [r1, #24]
   21eb6:	000c      	movs	r4, r1
   21eb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21eba:	2a6e      	cmp	r2, #110	; 0x6e
   21ebc:	d100      	bne.n	21ec0 <_printf_i+0x1c>
   21ebe:	e08f      	b.n	21fe0 <_printf_i+0x13c>
   21ec0:	d817      	bhi.n	21ef2 <_printf_i+0x4e>
   21ec2:	2a63      	cmp	r2, #99	; 0x63
   21ec4:	d02c      	beq.n	21f20 <_printf_i+0x7c>
   21ec6:	d808      	bhi.n	21eda <_printf_i+0x36>
   21ec8:	2a00      	cmp	r2, #0
   21eca:	d100      	bne.n	21ece <_printf_i+0x2a>
   21ecc:	e099      	b.n	22002 <_printf_i+0x15e>
   21ece:	2a58      	cmp	r2, #88	; 0x58
   21ed0:	d054      	beq.n	21f7c <_printf_i+0xd8>
   21ed2:	0026      	movs	r6, r4
   21ed4:	3642      	adds	r6, #66	; 0x42
   21ed6:	7032      	strb	r2, [r6, #0]
   21ed8:	e029      	b.n	21f2e <_printf_i+0x8a>
   21eda:	2a64      	cmp	r2, #100	; 0x64
   21edc:	d001      	beq.n	21ee2 <_printf_i+0x3e>
   21ede:	2a69      	cmp	r2, #105	; 0x69
   21ee0:	d1f7      	bne.n	21ed2 <_printf_i+0x2e>
   21ee2:	6821      	ldr	r1, [r4, #0]
   21ee4:	681a      	ldr	r2, [r3, #0]
   21ee6:	0608      	lsls	r0, r1, #24
   21ee8:	d523      	bpl.n	21f32 <_printf_i+0x8e>
   21eea:	1d11      	adds	r1, r2, #4
   21eec:	6019      	str	r1, [r3, #0]
   21eee:	6815      	ldr	r5, [r2, #0]
   21ef0:	e025      	b.n	21f3e <_printf_i+0x9a>
   21ef2:	2a73      	cmp	r2, #115	; 0x73
   21ef4:	d100      	bne.n	21ef8 <_printf_i+0x54>
   21ef6:	e088      	b.n	2200a <_printf_i+0x166>
   21ef8:	d808      	bhi.n	21f0c <_printf_i+0x68>
   21efa:	2a6f      	cmp	r2, #111	; 0x6f
   21efc:	d029      	beq.n	21f52 <_printf_i+0xae>
   21efe:	2a70      	cmp	r2, #112	; 0x70
   21f00:	d1e7      	bne.n	21ed2 <_printf_i+0x2e>
   21f02:	2220      	movs	r2, #32
   21f04:	6809      	ldr	r1, [r1, #0]
   21f06:	430a      	orrs	r2, r1
   21f08:	6022      	str	r2, [r4, #0]
   21f0a:	e003      	b.n	21f14 <_printf_i+0x70>
   21f0c:	2a75      	cmp	r2, #117	; 0x75
   21f0e:	d020      	beq.n	21f52 <_printf_i+0xae>
   21f10:	2a78      	cmp	r2, #120	; 0x78
   21f12:	d1de      	bne.n	21ed2 <_printf_i+0x2e>
   21f14:	0022      	movs	r2, r4
   21f16:	2178      	movs	r1, #120	; 0x78
   21f18:	3245      	adds	r2, #69	; 0x45
   21f1a:	7011      	strb	r1, [r2, #0]
   21f1c:	4a6c      	ldr	r2, [pc, #432]	; (220d0 <_printf_i+0x22c>)
   21f1e:	e030      	b.n	21f82 <_printf_i+0xde>
   21f20:	000e      	movs	r6, r1
   21f22:	681a      	ldr	r2, [r3, #0]
   21f24:	3642      	adds	r6, #66	; 0x42
   21f26:	1d11      	adds	r1, r2, #4
   21f28:	6019      	str	r1, [r3, #0]
   21f2a:	6813      	ldr	r3, [r2, #0]
   21f2c:	7033      	strb	r3, [r6, #0]
   21f2e:	2301      	movs	r3, #1
   21f30:	e079      	b.n	22026 <_printf_i+0x182>
   21f32:	0649      	lsls	r1, r1, #25
   21f34:	d5d9      	bpl.n	21eea <_printf_i+0x46>
   21f36:	1d11      	adds	r1, r2, #4
   21f38:	6019      	str	r1, [r3, #0]
   21f3a:	2300      	movs	r3, #0
   21f3c:	5ed5      	ldrsh	r5, [r2, r3]
   21f3e:	2d00      	cmp	r5, #0
   21f40:	da03      	bge.n	21f4a <_printf_i+0xa6>
   21f42:	232d      	movs	r3, #45	; 0x2d
   21f44:	9a04      	ldr	r2, [sp, #16]
   21f46:	426d      	negs	r5, r5
   21f48:	7013      	strb	r3, [r2, #0]
   21f4a:	4b62      	ldr	r3, [pc, #392]	; (220d4 <_printf_i+0x230>)
   21f4c:	270a      	movs	r7, #10
   21f4e:	9303      	str	r3, [sp, #12]
   21f50:	e02f      	b.n	21fb2 <_printf_i+0x10e>
   21f52:	6820      	ldr	r0, [r4, #0]
   21f54:	6819      	ldr	r1, [r3, #0]
   21f56:	0605      	lsls	r5, r0, #24
   21f58:	d503      	bpl.n	21f62 <_printf_i+0xbe>
   21f5a:	1d08      	adds	r0, r1, #4
   21f5c:	6018      	str	r0, [r3, #0]
   21f5e:	680d      	ldr	r5, [r1, #0]
   21f60:	e005      	b.n	21f6e <_printf_i+0xca>
   21f62:	0640      	lsls	r0, r0, #25
   21f64:	d5f9      	bpl.n	21f5a <_printf_i+0xb6>
   21f66:	680d      	ldr	r5, [r1, #0]
   21f68:	1d08      	adds	r0, r1, #4
   21f6a:	6018      	str	r0, [r3, #0]
   21f6c:	b2ad      	uxth	r5, r5
   21f6e:	4b59      	ldr	r3, [pc, #356]	; (220d4 <_printf_i+0x230>)
   21f70:	2708      	movs	r7, #8
   21f72:	9303      	str	r3, [sp, #12]
   21f74:	2a6f      	cmp	r2, #111	; 0x6f
   21f76:	d018      	beq.n	21faa <_printf_i+0x106>
   21f78:	270a      	movs	r7, #10
   21f7a:	e016      	b.n	21faa <_printf_i+0x106>
   21f7c:	3145      	adds	r1, #69	; 0x45
   21f7e:	700a      	strb	r2, [r1, #0]
   21f80:	4a54      	ldr	r2, [pc, #336]	; (220d4 <_printf_i+0x230>)
   21f82:	9203      	str	r2, [sp, #12]
   21f84:	681a      	ldr	r2, [r3, #0]
   21f86:	6821      	ldr	r1, [r4, #0]
   21f88:	1d10      	adds	r0, r2, #4
   21f8a:	6018      	str	r0, [r3, #0]
   21f8c:	6815      	ldr	r5, [r2, #0]
   21f8e:	0608      	lsls	r0, r1, #24
   21f90:	d522      	bpl.n	21fd8 <_printf_i+0x134>
   21f92:	07cb      	lsls	r3, r1, #31
   21f94:	d502      	bpl.n	21f9c <_printf_i+0xf8>
   21f96:	2320      	movs	r3, #32
   21f98:	4319      	orrs	r1, r3
   21f9a:	6021      	str	r1, [r4, #0]
   21f9c:	2710      	movs	r7, #16
   21f9e:	2d00      	cmp	r5, #0
   21fa0:	d103      	bne.n	21faa <_printf_i+0x106>
   21fa2:	2320      	movs	r3, #32
   21fa4:	6822      	ldr	r2, [r4, #0]
   21fa6:	439a      	bics	r2, r3
   21fa8:	6022      	str	r2, [r4, #0]
   21faa:	0023      	movs	r3, r4
   21fac:	2200      	movs	r2, #0
   21fae:	3343      	adds	r3, #67	; 0x43
   21fb0:	701a      	strb	r2, [r3, #0]
   21fb2:	6863      	ldr	r3, [r4, #4]
   21fb4:	60a3      	str	r3, [r4, #8]
   21fb6:	2b00      	cmp	r3, #0
   21fb8:	db5c      	blt.n	22074 <_printf_i+0x1d0>
   21fba:	2204      	movs	r2, #4
   21fbc:	6821      	ldr	r1, [r4, #0]
   21fbe:	4391      	bics	r1, r2
   21fc0:	6021      	str	r1, [r4, #0]
   21fc2:	2d00      	cmp	r5, #0
   21fc4:	d158      	bne.n	22078 <_printf_i+0x1d4>
   21fc6:	9e04      	ldr	r6, [sp, #16]
   21fc8:	2b00      	cmp	r3, #0
   21fca:	d064      	beq.n	22096 <_printf_i+0x1f2>
   21fcc:	0026      	movs	r6, r4
   21fce:	9b03      	ldr	r3, [sp, #12]
   21fd0:	3642      	adds	r6, #66	; 0x42
   21fd2:	781b      	ldrb	r3, [r3, #0]
   21fd4:	7033      	strb	r3, [r6, #0]
   21fd6:	e05e      	b.n	22096 <_printf_i+0x1f2>
   21fd8:	0648      	lsls	r0, r1, #25
   21fda:	d5da      	bpl.n	21f92 <_printf_i+0xee>
   21fdc:	b2ad      	uxth	r5, r5
   21fde:	e7d8      	b.n	21f92 <_printf_i+0xee>
   21fe0:	6809      	ldr	r1, [r1, #0]
   21fe2:	681a      	ldr	r2, [r3, #0]
   21fe4:	0608      	lsls	r0, r1, #24
   21fe6:	d505      	bpl.n	21ff4 <_printf_i+0x150>
   21fe8:	1d11      	adds	r1, r2, #4
   21fea:	6019      	str	r1, [r3, #0]
   21fec:	6813      	ldr	r3, [r2, #0]
   21fee:	6962      	ldr	r2, [r4, #20]
   21ff0:	601a      	str	r2, [r3, #0]
   21ff2:	e006      	b.n	22002 <_printf_i+0x15e>
   21ff4:	0649      	lsls	r1, r1, #25
   21ff6:	d5f7      	bpl.n	21fe8 <_printf_i+0x144>
   21ff8:	1d11      	adds	r1, r2, #4
   21ffa:	6019      	str	r1, [r3, #0]
   21ffc:	6813      	ldr	r3, [r2, #0]
   21ffe:	8aa2      	ldrh	r2, [r4, #20]
   22000:	801a      	strh	r2, [r3, #0]
   22002:	2300      	movs	r3, #0
   22004:	9e04      	ldr	r6, [sp, #16]
   22006:	6123      	str	r3, [r4, #16]
   22008:	e054      	b.n	220b4 <_printf_i+0x210>
   2200a:	681a      	ldr	r2, [r3, #0]
   2200c:	1d11      	adds	r1, r2, #4
   2200e:	6019      	str	r1, [r3, #0]
   22010:	6816      	ldr	r6, [r2, #0]
   22012:	2100      	movs	r1, #0
   22014:	6862      	ldr	r2, [r4, #4]
   22016:	0030      	movs	r0, r6
   22018:	f000 f922 	bl	22260 <memchr>
   2201c:	2800      	cmp	r0, #0
   2201e:	d001      	beq.n	22024 <_printf_i+0x180>
   22020:	1b80      	subs	r0, r0, r6
   22022:	6060      	str	r0, [r4, #4]
   22024:	6863      	ldr	r3, [r4, #4]
   22026:	6123      	str	r3, [r4, #16]
   22028:	2300      	movs	r3, #0
   2202a:	9a04      	ldr	r2, [sp, #16]
   2202c:	7013      	strb	r3, [r2, #0]
   2202e:	e041      	b.n	220b4 <_printf_i+0x210>
   22030:	6923      	ldr	r3, [r4, #16]
   22032:	0032      	movs	r2, r6
   22034:	9906      	ldr	r1, [sp, #24]
   22036:	9805      	ldr	r0, [sp, #20]
   22038:	9d07      	ldr	r5, [sp, #28]
   2203a:	47a8      	blx	r5
   2203c:	1c43      	adds	r3, r0, #1
   2203e:	d043      	beq.n	220c8 <_printf_i+0x224>
   22040:	6823      	ldr	r3, [r4, #0]
   22042:	2500      	movs	r5, #0
   22044:	079b      	lsls	r3, r3, #30
   22046:	d40f      	bmi.n	22068 <_printf_i+0x1c4>
   22048:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2204a:	68e0      	ldr	r0, [r4, #12]
   2204c:	4298      	cmp	r0, r3
   2204e:	da3d      	bge.n	220cc <_printf_i+0x228>
   22050:	0018      	movs	r0, r3
   22052:	e03b      	b.n	220cc <_printf_i+0x228>
   22054:	0022      	movs	r2, r4
   22056:	2301      	movs	r3, #1
   22058:	3219      	adds	r2, #25
   2205a:	9906      	ldr	r1, [sp, #24]
   2205c:	9805      	ldr	r0, [sp, #20]
   2205e:	9e07      	ldr	r6, [sp, #28]
   22060:	47b0      	blx	r6
   22062:	1c43      	adds	r3, r0, #1
   22064:	d030      	beq.n	220c8 <_printf_i+0x224>
   22066:	3501      	adds	r5, #1
   22068:	68e3      	ldr	r3, [r4, #12]
   2206a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2206c:	1a9b      	subs	r3, r3, r2
   2206e:	429d      	cmp	r5, r3
   22070:	dbf0      	blt.n	22054 <_printf_i+0x1b0>
   22072:	e7e9      	b.n	22048 <_printf_i+0x1a4>
   22074:	2d00      	cmp	r5, #0
   22076:	d0a9      	beq.n	21fcc <_printf_i+0x128>
   22078:	9e04      	ldr	r6, [sp, #16]
   2207a:	0028      	movs	r0, r5
   2207c:	0039      	movs	r1, r7
   2207e:	f7fc ffe7 	bl	1f050 <__aeabi_uidivmod>
   22082:	9b03      	ldr	r3, [sp, #12]
   22084:	3e01      	subs	r6, #1
   22086:	5c5b      	ldrb	r3, [r3, r1]
   22088:	0028      	movs	r0, r5
   2208a:	7033      	strb	r3, [r6, #0]
   2208c:	0039      	movs	r1, r7
   2208e:	f7fc ff59 	bl	1ef44 <__udivsi3>
   22092:	1e05      	subs	r5, r0, #0
   22094:	d1f1      	bne.n	2207a <_printf_i+0x1d6>
   22096:	2f08      	cmp	r7, #8
   22098:	d109      	bne.n	220ae <_printf_i+0x20a>
   2209a:	6823      	ldr	r3, [r4, #0]
   2209c:	07db      	lsls	r3, r3, #31
   2209e:	d506      	bpl.n	220ae <_printf_i+0x20a>
   220a0:	6863      	ldr	r3, [r4, #4]
   220a2:	6922      	ldr	r2, [r4, #16]
   220a4:	4293      	cmp	r3, r2
   220a6:	dc02      	bgt.n	220ae <_printf_i+0x20a>
   220a8:	2330      	movs	r3, #48	; 0x30
   220aa:	3e01      	subs	r6, #1
   220ac:	7033      	strb	r3, [r6, #0]
   220ae:	9b04      	ldr	r3, [sp, #16]
   220b0:	1b9b      	subs	r3, r3, r6
   220b2:	6123      	str	r3, [r4, #16]
   220b4:	9b07      	ldr	r3, [sp, #28]
   220b6:	aa09      	add	r2, sp, #36	; 0x24
   220b8:	9300      	str	r3, [sp, #0]
   220ba:	0021      	movs	r1, r4
   220bc:	9b06      	ldr	r3, [sp, #24]
   220be:	9805      	ldr	r0, [sp, #20]
   220c0:	f7ff fe82 	bl	21dc8 <_printf_common>
   220c4:	1c43      	adds	r3, r0, #1
   220c6:	d1b3      	bne.n	22030 <_printf_i+0x18c>
   220c8:	2001      	movs	r0, #1
   220ca:	4240      	negs	r0, r0
   220cc:	b00b      	add	sp, #44	; 0x2c
   220ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   220d0:	0002636c 	.word	0x0002636c
   220d4:	0002635b 	.word	0x0002635b

000220d8 <__sread>:
   220d8:	b570      	push	{r4, r5, r6, lr}
   220da:	000c      	movs	r4, r1
   220dc:	250e      	movs	r5, #14
   220de:	5f49      	ldrsh	r1, [r1, r5]
   220e0:	f000 f8f0 	bl	222c4 <_read_r>
   220e4:	2800      	cmp	r0, #0
   220e6:	db03      	blt.n	220f0 <__sread+0x18>
   220e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   220ea:	181b      	adds	r3, r3, r0
   220ec:	6563      	str	r3, [r4, #84]	; 0x54
   220ee:	bd70      	pop	{r4, r5, r6, pc}
   220f0:	89a3      	ldrh	r3, [r4, #12]
   220f2:	4a02      	ldr	r2, [pc, #8]	; (220fc <__sread+0x24>)
   220f4:	4013      	ands	r3, r2
   220f6:	81a3      	strh	r3, [r4, #12]
   220f8:	e7f9      	b.n	220ee <__sread+0x16>
   220fa:	46c0      	nop			; (mov r8, r8)
   220fc:	ffffefff 	.word	0xffffefff

00022100 <__swrite>:
   22100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22102:	001f      	movs	r7, r3
   22104:	898b      	ldrh	r3, [r1, #12]
   22106:	0005      	movs	r5, r0
   22108:	000c      	movs	r4, r1
   2210a:	0016      	movs	r6, r2
   2210c:	05db      	lsls	r3, r3, #23
   2210e:	d505      	bpl.n	2211c <__swrite+0x1c>
   22110:	230e      	movs	r3, #14
   22112:	5ec9      	ldrsh	r1, [r1, r3]
   22114:	2200      	movs	r2, #0
   22116:	2302      	movs	r3, #2
   22118:	f000 f88e 	bl	22238 <_lseek_r>
   2211c:	89a3      	ldrh	r3, [r4, #12]
   2211e:	4a05      	ldr	r2, [pc, #20]	; (22134 <__swrite+0x34>)
   22120:	0028      	movs	r0, r5
   22122:	4013      	ands	r3, r2
   22124:	81a3      	strh	r3, [r4, #12]
   22126:	0032      	movs	r2, r6
   22128:	230e      	movs	r3, #14
   2212a:	5ee1      	ldrsh	r1, [r4, r3]
   2212c:	003b      	movs	r3, r7
   2212e:	f000 f839 	bl	221a4 <_write_r>
   22132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22134:	ffffefff 	.word	0xffffefff

00022138 <__sseek>:
   22138:	b570      	push	{r4, r5, r6, lr}
   2213a:	000c      	movs	r4, r1
   2213c:	250e      	movs	r5, #14
   2213e:	5f49      	ldrsh	r1, [r1, r5]
   22140:	f000 f87a 	bl	22238 <_lseek_r>
   22144:	89a3      	ldrh	r3, [r4, #12]
   22146:	1c42      	adds	r2, r0, #1
   22148:	d103      	bne.n	22152 <__sseek+0x1a>
   2214a:	4a05      	ldr	r2, [pc, #20]	; (22160 <__sseek+0x28>)
   2214c:	4013      	ands	r3, r2
   2214e:	81a3      	strh	r3, [r4, #12]
   22150:	bd70      	pop	{r4, r5, r6, pc}
   22152:	2280      	movs	r2, #128	; 0x80
   22154:	0152      	lsls	r2, r2, #5
   22156:	4313      	orrs	r3, r2
   22158:	81a3      	strh	r3, [r4, #12]
   2215a:	6560      	str	r0, [r4, #84]	; 0x54
   2215c:	e7f8      	b.n	22150 <__sseek+0x18>
   2215e:	46c0      	nop			; (mov r8, r8)
   22160:	ffffefff 	.word	0xffffefff

00022164 <__sclose>:
   22164:	b510      	push	{r4, lr}
   22166:	230e      	movs	r3, #14
   22168:	5ec9      	ldrsh	r1, [r1, r3]
   2216a:	f000 f82f 	bl	221cc <_close_r>
   2216e:	bd10      	pop	{r4, pc}

00022170 <strchr>:
   22170:	b2c9      	uxtb	r1, r1
   22172:	7803      	ldrb	r3, [r0, #0]
   22174:	2b00      	cmp	r3, #0
   22176:	d004      	beq.n	22182 <strchr+0x12>
   22178:	4299      	cmp	r1, r3
   2217a:	d100      	bne.n	2217e <strchr+0xe>
   2217c:	4770      	bx	lr
   2217e:	3001      	adds	r0, #1
   22180:	e7f7      	b.n	22172 <strchr+0x2>
   22182:	424b      	negs	r3, r1
   22184:	4159      	adcs	r1, r3
   22186:	4249      	negs	r1, r1
   22188:	4008      	ands	r0, r1
   2218a:	e7f7      	b.n	2217c <strchr+0xc>

0002218c <__ascii_wctomb>:
   2218c:	1e0b      	subs	r3, r1, #0
   2218e:	d004      	beq.n	2219a <__ascii_wctomb+0xe>
   22190:	2aff      	cmp	r2, #255	; 0xff
   22192:	d904      	bls.n	2219e <__ascii_wctomb+0x12>
   22194:	238a      	movs	r3, #138	; 0x8a
   22196:	6003      	str	r3, [r0, #0]
   22198:	3b8b      	subs	r3, #139	; 0x8b
   2219a:	0018      	movs	r0, r3
   2219c:	4770      	bx	lr
   2219e:	700a      	strb	r2, [r1, #0]
   221a0:	2301      	movs	r3, #1
   221a2:	e7fa      	b.n	2219a <__ascii_wctomb+0xe>

000221a4 <_write_r>:
   221a4:	b570      	push	{r4, r5, r6, lr}
   221a6:	0005      	movs	r5, r0
   221a8:	0008      	movs	r0, r1
   221aa:	0011      	movs	r1, r2
   221ac:	2200      	movs	r2, #0
   221ae:	4c06      	ldr	r4, [pc, #24]	; (221c8 <_write_r+0x24>)
   221b0:	6022      	str	r2, [r4, #0]
   221b2:	001a      	movs	r2, r3
   221b4:	f7f5 faa2 	bl	176fc <_write>
   221b8:	1c43      	adds	r3, r0, #1
   221ba:	d103      	bne.n	221c4 <_write_r+0x20>
   221bc:	6823      	ldr	r3, [r4, #0]
   221be:	2b00      	cmp	r3, #0
   221c0:	d000      	beq.n	221c4 <_write_r+0x20>
   221c2:	602b      	str	r3, [r5, #0]
   221c4:	bd70      	pop	{r4, r5, r6, pc}
   221c6:	46c0      	nop			; (mov r8, r8)
   221c8:	200056d0 	.word	0x200056d0

000221cc <_close_r>:
   221cc:	2300      	movs	r3, #0
   221ce:	b570      	push	{r4, r5, r6, lr}
   221d0:	4c06      	ldr	r4, [pc, #24]	; (221ec <_close_r+0x20>)
   221d2:	0005      	movs	r5, r0
   221d4:	0008      	movs	r0, r1
   221d6:	6023      	str	r3, [r4, #0]
   221d8:	f7f5 fae4 	bl	177a4 <_close>
   221dc:	1c43      	adds	r3, r0, #1
   221de:	d103      	bne.n	221e8 <_close_r+0x1c>
   221e0:	6823      	ldr	r3, [r4, #0]
   221e2:	2b00      	cmp	r3, #0
   221e4:	d000      	beq.n	221e8 <_close_r+0x1c>
   221e6:	602b      	str	r3, [r5, #0]
   221e8:	bd70      	pop	{r4, r5, r6, pc}
   221ea:	46c0      	nop			; (mov r8, r8)
   221ec:	200056d0 	.word	0x200056d0

000221f0 <_fstat_r>:
   221f0:	2300      	movs	r3, #0
   221f2:	b570      	push	{r4, r5, r6, lr}
   221f4:	4c06      	ldr	r4, [pc, #24]	; (22210 <_fstat_r+0x20>)
   221f6:	0005      	movs	r5, r0
   221f8:	0008      	movs	r0, r1
   221fa:	0011      	movs	r1, r2
   221fc:	6023      	str	r3, [r4, #0]
   221fe:	f7f5 fadb 	bl	177b8 <_fstat>
   22202:	1c43      	adds	r3, r0, #1
   22204:	d103      	bne.n	2220e <_fstat_r+0x1e>
   22206:	6823      	ldr	r3, [r4, #0]
   22208:	2b00      	cmp	r3, #0
   2220a:	d000      	beq.n	2220e <_fstat_r+0x1e>
   2220c:	602b      	str	r3, [r5, #0]
   2220e:	bd70      	pop	{r4, r5, r6, pc}
   22210:	200056d0 	.word	0x200056d0

00022214 <_isatty_r>:
   22214:	2300      	movs	r3, #0
   22216:	b570      	push	{r4, r5, r6, lr}
   22218:	4c06      	ldr	r4, [pc, #24]	; (22234 <_isatty_r+0x20>)
   2221a:	0005      	movs	r5, r0
   2221c:	0008      	movs	r0, r1
   2221e:	6023      	str	r3, [r4, #0]
   22220:	f7f5 fad8 	bl	177d4 <_isatty>
   22224:	1c43      	adds	r3, r0, #1
   22226:	d103      	bne.n	22230 <_isatty_r+0x1c>
   22228:	6823      	ldr	r3, [r4, #0]
   2222a:	2b00      	cmp	r3, #0
   2222c:	d000      	beq.n	22230 <_isatty_r+0x1c>
   2222e:	602b      	str	r3, [r5, #0]
   22230:	bd70      	pop	{r4, r5, r6, pc}
   22232:	46c0      	nop			; (mov r8, r8)
   22234:	200056d0 	.word	0x200056d0

00022238 <_lseek_r>:
   22238:	b570      	push	{r4, r5, r6, lr}
   2223a:	0005      	movs	r5, r0
   2223c:	0008      	movs	r0, r1
   2223e:	0011      	movs	r1, r2
   22240:	2200      	movs	r2, #0
   22242:	4c06      	ldr	r4, [pc, #24]	; (2225c <_lseek_r+0x24>)
   22244:	6022      	str	r2, [r4, #0]
   22246:	001a      	movs	r2, r3
   22248:	f7f5 facd 	bl	177e6 <_lseek>
   2224c:	1c43      	adds	r3, r0, #1
   2224e:	d103      	bne.n	22258 <_lseek_r+0x20>
   22250:	6823      	ldr	r3, [r4, #0]
   22252:	2b00      	cmp	r3, #0
   22254:	d000      	beq.n	22258 <_lseek_r+0x20>
   22256:	602b      	str	r3, [r5, #0]
   22258:	bd70      	pop	{r4, r5, r6, pc}
   2225a:	46c0      	nop			; (mov r8, r8)
   2225c:	200056d0 	.word	0x200056d0

00022260 <memchr>:
   22260:	b2c9      	uxtb	r1, r1
   22262:	1882      	adds	r2, r0, r2
   22264:	4290      	cmp	r0, r2
   22266:	d101      	bne.n	2226c <memchr+0xc>
   22268:	2000      	movs	r0, #0
   2226a:	4770      	bx	lr
   2226c:	7803      	ldrb	r3, [r0, #0]
   2226e:	428b      	cmp	r3, r1
   22270:	d0fb      	beq.n	2226a <memchr+0xa>
   22272:	3001      	adds	r0, #1
   22274:	e7f6      	b.n	22264 <memchr+0x4>

00022276 <_realloc_r>:
   22276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22278:	0007      	movs	r7, r0
   2227a:	000d      	movs	r5, r1
   2227c:	0016      	movs	r6, r2
   2227e:	2900      	cmp	r1, #0
   22280:	d105      	bne.n	2228e <_realloc_r+0x18>
   22282:	0011      	movs	r1, r2
   22284:	f7fe fe9e 	bl	20fc4 <_malloc_r>
   22288:	0004      	movs	r4, r0
   2228a:	0020      	movs	r0, r4
   2228c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2228e:	2a00      	cmp	r2, #0
   22290:	d103      	bne.n	2229a <_realloc_r+0x24>
   22292:	f7fe fe4d 	bl	20f30 <_free_r>
   22296:	0034      	movs	r4, r6
   22298:	e7f7      	b.n	2228a <_realloc_r+0x14>
   2229a:	f000 f827 	bl	222ec <_malloc_usable_size_r>
   2229e:	002c      	movs	r4, r5
   222a0:	4286      	cmp	r6, r0
   222a2:	d9f2      	bls.n	2228a <_realloc_r+0x14>
   222a4:	0031      	movs	r1, r6
   222a6:	0038      	movs	r0, r7
   222a8:	f7fe fe8c 	bl	20fc4 <_malloc_r>
   222ac:	1e04      	subs	r4, r0, #0
   222ae:	d0ec      	beq.n	2228a <_realloc_r+0x14>
   222b0:	0029      	movs	r1, r5
   222b2:	0032      	movs	r2, r6
   222b4:	f7fe fe18 	bl	20ee8 <memcpy>
   222b8:	0029      	movs	r1, r5
   222ba:	0038      	movs	r0, r7
   222bc:	f7fe fe38 	bl	20f30 <_free_r>
   222c0:	e7e3      	b.n	2228a <_realloc_r+0x14>
	...

000222c4 <_read_r>:
   222c4:	b570      	push	{r4, r5, r6, lr}
   222c6:	0005      	movs	r5, r0
   222c8:	0008      	movs	r0, r1
   222ca:	0011      	movs	r1, r2
   222cc:	2200      	movs	r2, #0
   222ce:	4c06      	ldr	r4, [pc, #24]	; (222e8 <_read_r+0x24>)
   222d0:	6022      	str	r2, [r4, #0]
   222d2:	001a      	movs	r2, r3
   222d4:	f7f5 f9e8 	bl	176a8 <_read>
   222d8:	1c43      	adds	r3, r0, #1
   222da:	d103      	bne.n	222e4 <_read_r+0x20>
   222dc:	6823      	ldr	r3, [r4, #0]
   222de:	2b00      	cmp	r3, #0
   222e0:	d000      	beq.n	222e4 <_read_r+0x20>
   222e2:	602b      	str	r3, [r5, #0]
   222e4:	bd70      	pop	{r4, r5, r6, pc}
   222e6:	46c0      	nop			; (mov r8, r8)
   222e8:	200056d0 	.word	0x200056d0

000222ec <_malloc_usable_size_r>:
   222ec:	1f0b      	subs	r3, r1, #4
   222ee:	681b      	ldr	r3, [r3, #0]
   222f0:	1f18      	subs	r0, r3, #4
   222f2:	2b00      	cmp	r3, #0
   222f4:	da01      	bge.n	222fa <_malloc_usable_size_r+0xe>
   222f6:	580b      	ldr	r3, [r1, r0]
   222f8:	18c0      	adds	r0, r0, r3
   222fa:	4770      	bx	lr

000222fc <pcWelcomeMessage>:
   222fc:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   2230c:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   2231c:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   2232c:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   2233c:	000a 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   2234c:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   2235c:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   2236c:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   2237c:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   2238c:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   2239c:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   223ac:	7375 0a0d 0000 0000 6576 7372 6f69 006e     us......version.
   223bc:	6576 7372 6f69 3a6e 5020 6972 746e 2073     version: Prints 
   223cc:	6874 2065 6966 6d72 6177 6572 7620 7265     the firmware ver
   223dc:	6973 6e6f 0d2e 000a 6974 6b63 0073 0000     sion....ticks...
   223ec:	6974 6b63 3a73 5020 6972 746e 2073 6874     ticks: Prints th
   223fc:	2065 756e 626d 7265 6f20 2066 6974 6b63     e number of tick
   2240c:	2073 6973 636e 2065 6874 2065 6373 6568     s since the sche
   2241c:	7564 656c 2072 7473 7261 6574 2e64 0a0d     duler started...
   2242c:	0000 0000 6d69 0075 6d69 3a75 5020 6972     ....imu.imu: Pri
   2243c:	746e 2073 3031 3030 7320 6d61 6c70 7365     nts 1000 samples
   2244c:	6f20 2066 6361 6563 656c 6172 6974 6e6f      of acceleration
   2245c:	202e 0a0d 0000 0000 6168 7470 6369 0000     . ......haptic..
   2246c:	6168 7470 6369 203a 6956 7262 7461 2065     haptic: Vibrate 
   2247c:	6f4d 6f74 2e72 0d20 000a 0000 6c63 0073     Motor. .....cls.
   2248c:	6c63 3a73 4320 656c 7261 2073 6874 2065     cls: Clears the 
   2249c:	6574 6d72 6e69 6c61 7320 7263 6565 0d6e     terminal screen.
   224ac:	000a 0000 6f43 6c75 2064 6f6e 2074 6c61     ....Could not al
   224bc:	6f6c 6163 6574 7320 6d65 7061 6f68 6572     locate semaphore
   224cc:	0a0d 0000 0a0d 0000 616f 0000 6325 325b     ........oa..%c[2
   224dc:	0d4b 003e 2008 0008 6325 325b 004a 0000     K.>.. ..%c[2J...
   224ec:	2e30 2e30 0031 0000 6946 6d72 6177 6572     0.0.1...Firmware
   224fc:	5620 7265 6973 6e6f 203a 7325 0a0d 0000      Version: %s....
   2250c:	6954 6b63 2073 6973 636e 2065 7473 7261     Ticks since star
   2251c:	3a74 2520 756c 0a0d 0000 0000 2030 3120     t: %lu......0  1
   2252c:	2020 2032 3320 2020 2034 3520 2020 2036       2  3  4  5  6 
   2253c:	3720 2020 2038 3920 2020 2061 6220 2020      7  8  9  a  b  
   2254c:	2063 6420 2020 2065 6620 0a0d 0000 0000     c  d  e  f......
   2255c:	3025 7832 203a 0000 2058 0000 7841 203a     %02x: ..X ..Ax: 
   2256c:	6425 202c 7941 203a 6425 202c 7a41 203a     %d, Ay: %d, Az: 
   2257c:	6425 0a0d 0000 0000 6f47 4320 6d6f 616d     %d......Go Comma
   2258c:	646e 5320 6e65 0d74 000a 0000               nd Sent.....

00022598 <xOTAUCommand>:
   22598:	2340 0002 2344 0002 1249 0000 0000 0000     @#..D#..I.......

000225a8 <xResetCommand>:
   225a8:	2374 0002 237c 0002 1269 0000 0000 0000     t#..|#..i.......

000225b8 <xI2cScan>:
   225b8:	2398 0002 239c 0002 12f1 0000 0000 0000     .#...#..........

000225c8 <xVersionCommand>:
   225c8:	23b4 0002 23bc 0002 1289 0000 0000 0000     .#...#..........

000225d8 <xTicksCommand>:
   225d8:	23e4 0002 23ec 0002 12b9 0000 0000 0000     .#...#..........

000225e8 <xGetIMUDataCommand>:
   225e8:	2430 0002 2434 0002 141d 0000 0000 0000     0$..4$..........

000225f8 <xGetHapticCommand>:
   225f8:	2464 0002 246c 0002 1505 0000 0000 0000     d$..l$..........

00022608 <xClearScreen>:
   22608:	2488 0002 248c 0002 1201 0000 0000 0000     .$...$..........

00022618 <main_mqtt_broker>:
   22618:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   22628:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   22638:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   22648:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   22658:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   22668:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   22678:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   22688:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   22698:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   226a8:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   226b8:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   226c8:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   226d8:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   226e8:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   226f8:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   22708:	2e2e 0d2e 000a 0000 7468 7074 2f3a 322f     ........http://2
   22718:	2e30 3332 2e31 3032 2e35 3032 2f33 6f49     0.231.205.203/Io
   22728:	2e54 6470 0066 0000 7473 726f 5f65 6966     T.pdf...store_fi
   22738:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   22748:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   22758:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   22768:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   22778:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   22788:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   22798:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   227a8:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   227b8:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   227c8:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   227d8:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   227e8:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   227f8:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   22808:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   22818:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   22828:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   22838:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   22848:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   22858:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   22868:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   22878:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   22888:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   22898:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   228a8:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   228b8:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   228c8:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   228d8:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   228e8:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   228f8:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   22908:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   22918:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   22928:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   22938:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   22948:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   22958:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   22968:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   22978:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   22988:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   22998:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   229a8:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   229b8:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   229c8:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   229d8:	7564 6b6e 6e69 616b 6b6d 6168 006f 0000     dunkinkamkhao...
   229e8:	6854 6572 2065 754d 6b73 7465 6565 7372     Three Musketeers
   229f8:	0000 0000 6977 6966 635f 3a62 4920 2050     ....wifi_cb: IP 
   22a08:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
   22a18:	252e 2e75 7525 0a0d 0000 0000 7245 6f72     .%u.%u......Erro
   22a28:	2072 6f63 6e6e 6365 6974 676e 7420 206f     r connecting to 
   22a38:	514d 5454 4220 6f72 656b 2172 0a0d 0000     MQTT Broker!....
   22a48:	6e69 7469 735f 6f74 6172 6567 203a 6c70     init_storage: pl
   22a58:	6165 6573 7020 756c 2067 6e61 5320 2f44     ease plug an SD/
   22a68:	4d4d 2043 6163 6472 6920 206e 6c73 746f     MMC card in slot
   22a78:	2e2e 0d2e 000a 0000 6e69 7469 735f 6f74     ........init_sto
   22a88:	6172 6567 203a 4453 4320 7261 2064 6e69     rage: SD Card in
   22a98:	7473 6c61 206c 6166 6c69 6465 0d2e 000a     stall failed....
   22aa8:	6e69 7469 735f 6f74 6172 6567 203a 7274     init_storage: tr
   22ab8:	2079 6e75 6c70 6775 6120 646e 7220 2d65     y unplug and re-
   22ac8:	6c70 6775 7420 6568 6320 7261 2e64 0a0d     plug the card...
   22ad8:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   22ae8:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
   22af8:	6472 2e2e 0d2e 000a 6e69 7469 735f 6f74     rd......init_sto
   22b08:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   22b18:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
   22b28:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
   22b38:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   22b48:	6e75 2074 4b4f 0d2e 000a 0000 6f63 666e     unt OK......conf
   22b58:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   22b68:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   22b78:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   22b88:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   22b98:	0000 0000 0a0d 2520 2a2e 0073 6772 2862     ...... %.*s.rgb(
   22ba8:	0000 0000 0a0d 4752 2042 6425 2520 2064     ......RGB %d %d 
   22bb8:	6425 0a0d 0000 0000 227b 6167 656d 3a22     %d......{"game":
   22bc8:	005b 0000 0a0d 6147 656d 6d20 7365 6173     [.....Game messa
   22bd8:	6567 7220 6365 6965 6576 2164 0a0d 0000     ge received!....
   22be8:	2e25 732a 0000 0000 0a0d 6150 7372 6465     %.*s......Parsed
   22bf8:	4320 6d6f 616d 646e 203a 0000 6425 002c      Command: ..%d,.
   22c08:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   22c18:	6365 6965 6576 2064 7562 2074 6f6e 2074     eceived but not 
   22c28:	6e75 6564 7372 6f74 646f 0d21 000a 0000     understood!.....
   22c38:	0a0d 4d49 2055 6f74 6970 2063 6572 6563     ..IMU topic rece
   22c48:	7669 6465 0d21 000a 0a0d 6944 7473 6e61     ived!.....Distan
   22c58:	6563 7420 706f 6369 7220 6365 6965 6576     ce topic receive
   22c68:	2164 0a0d 0000 0000 3e20 203e 0000 0000     d!...... >> ....
   22c78:	3150 4c5f 4445 455f 4553 3135 5f36 3054     P1_LED_ESE516_T0
   22c88:	0000 0000 6166 736c 0065 0000 7274 6575     ....false...true
   22c98:	0000 0000 0a0d 6f43 6e6e 6365 6974 676e     ......Connecting
   22ca8:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   22cb8:	7242 4a73 4e42 6f56 4251 376c 0000 0000     BrsJBNVoQBl7....
   22cc8:	7472 7974 626f 6a65 0000 0000 514d 5454     rttyobej....MQTT
   22cd8:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   22ce8:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   22cf8:	0d72 000a 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   22d08:	6465 7420 206f 7262 6b6f 7265 0a0d 0000     ed to broker....
   22d18:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   22d28:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   22d38:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   22d48:	796c 0d2e 000a 0000 3150 475f 4d41 5f45     ly......P1_GAME_
   22d58:	5345 3545 3631 545f 0030 0000 3150 495f     ESE516_T0...P1_I
   22d68:	554d 455f 4553 3135 5f36 3054 0000 0000     MU_ESE516_T0....
   22d78:	514d 5454 4320 6e6f 656e 7463 6465 0a0d     MQTT Connected..
   22d88:	0000 0000 514d 5454 6220 6f72 656b 2072     ....MQTT broker 
   22d98:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
   22da8:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
   22db8:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
   22dc8:	6f63 6e6e 6365 6574 0d64 000a 514d 5454     connected...MQTT
   22dd8:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
   22de8:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
   22df8:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
   22e08:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
   22e18:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
   22e28:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
   22e38:	0d29 000a 227b 2264 7b3a 7422 6d65 2270     )...{"d":{"temp"
   22e48:	253a 7d64 007d 0000 465b 4941 5d4c 7220     :%d}}...[FAIL] r
   22e58:	7365 2520 0d64 000a 6c46 6761 2e41 7874     es %d...FlagA.tx
   22e68:	2074 6461 6564 2164 0a0d 0000 3a30 6c46     t added!....0:Fl
   22e78:	6761 2e41 7874 0074 6f43 6e6e 6365 6574     agA.txt.Connecte
   22e88:	2064 6f74 4d20 5451 2054 7242 6b6f 7265     d to MQTT Broker
   22e98:	0d21 000a 227b 6d69 7875 3a22 6425 202c     !...{"imux":%d, 
   22ea8:	6922 756d 2279 203a 6425 202c 6922 756d     "imuy": %d, "imu
   22eb8:	227a 203a 6425 007d 6425 0000 7d5d 0000     z": %d}.%d..]}..
   22ec8:	0a0d 0000 3250 475f 4d41 5f45 5345 3545     ....P2_GAME_ESE5
   22ed8:	3631 545f 0030 0000 5245 4f52 2052 6e49     16_T0...ERROR In
   22ee8:	7469 6169 696c 697a 676e 5720 6669 2069     itializing Wifi 
   22ef8:	6144 6174 7120 6575 6575 2173 0a0d 0000     Data queues!....
   22f08:	5345 3545 3631 2d20 5720 6669 2069 6e49     ESE516 - Wifi In
   22f18:	7469 4320 646f 0d65 000a 0000 616d 6e69     it Code.....main
   22f28:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   22f38:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   22f48:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   22f58:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   22f68:	4120 2050 7325 2e2e 0d2e 000a 3150 545f      AP %s......P1_T
   22f78:	4d45 4550 4152 5554 4552 455f 4553 3135     EMPERATURE_ESE51
   22f88:	5f36 3054 0000 0000 514d 5454 7320 6e65     6_T0....MQTT sen
   22f98:	2064 7325 0a0d 0000 2a0c 0000 2a18 0000     d %s.....*...*..
   22fa8:	2a2a 0000 2a80 0000 2aa0 0000 6568 706c     **...*...*..help
   22fb8:	0000 0000 0a0d 6568 706c 0d3a 200a 694c     ......help:.. Li
   22fc8:	7473 2073 6c61 206c 6874 2065 6572 6967     sts all the regi
   22fd8:	7473 7265 6465 6320 6d6f 616d 646e 0d73     stered commands.
   22fe8:	0d0a 000a 6e49 6f63 7272 6365 2074 6f63     ....Incorrect co
   22ff8:	6d6d 6e61 2064 6170 6172 656d 6574 2872     mmand parameter(
   23008:	2973 202e 4520 746e 7265 2220 6568 706c     s).  Enter "help
   23018:	2022 6f74 7620 6569 2077 2061 696c 7473     " to view a list
   23028:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   23038:	6d6d 6e61 7364 0d2e 0d0a 000a 6f43 6d6d     mmands......Comm
   23048:	6e61 2064 6f6e 2074 6572 6f63 6e67 7369     and not recognis
   23058:	6465 202e 4520 746e 7265 2720 6568 706c     ed.  Enter 'help
   23068:	2027 6f74 7620 6569 2077 2061 696c 7473     ' to view a list
   23078:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   23088:	6d6d 6e61 7364 0d2e 0d0a 000a               mmands......

00023094 <xHelpCommand>:
   23094:	2fb4 0002 2fbc 0002 461d 0000 0000 0000     ./.../...F......
   230a4:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   230b4:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   230c4:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   230d4:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   230e4:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   230f4:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   23104:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   23114:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   23124:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   23134:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   23144:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   23154:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   23164:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   23174:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   23184:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   23194:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   231a4:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   231b4:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   231c4:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   231d4:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   231e4:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   231f4:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   23204:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   23214:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   23224:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   23234:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   23244:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   23254:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   23264:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   23274:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   23284:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   23294:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   232a4:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   232b4:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   232c4:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   232d4:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   232e4:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   232f4:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   23304:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   23314:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   23324:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   23334:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   23344:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   23354:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   23364:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   23374:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   23384:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   23394:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   233a4:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   233b4:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   233c4:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   233d4:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   233e4:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   233f4:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   23404:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   23414:	6365 6374 616c 7373 0021 0000 4d42 0000     ectclass!...BM..
   23424:	4d3a 0000 4d3e 0000 4d32 0000 4d36 0000     :M..>M..2M..6M..
   23434:	4d46 0000 4d4a 0000 4d4e 0000 4d52 0000     FM..JM..NM..RM..
   23444:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   23454:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   23464:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   23474:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   23484:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   23494:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   234a4:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   234b4:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   234c4:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   234d4:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   234e4:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   234f4:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   23504:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   23514:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   23524:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   23534:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   23544:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   23554:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   23564:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   23574:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   23584:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   23594:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   235a4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   235b4:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   235c4:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   235d4:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   235e4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   235f4:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   23604:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   23614:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   23624:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   23634:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   23644:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   23654:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   23664:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   23674:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   23684:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   23694:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   236a4:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   236b4:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   236c4:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   236d4:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   236e4:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   236f4:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   23704:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   23714:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   23724:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   23734:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   23744:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   23754:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   23764:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   23774:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   23784:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   23794:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   237a4:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   237b4:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   237c4:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   237d4:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   237e4:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   237f4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23804:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   23814:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   23824:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   23834:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   23844:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   23854:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   23864:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   23874:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   23884:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   23894:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   238a4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   238b4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   238c4:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   238d4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   238e4:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   238f4:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   23904:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   23914:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   23924:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23934:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   23944:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   23954:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   23964:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   23974:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   23984:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   23994:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   239a4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   239b4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   239c4:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   239d4:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   239e4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   239f4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   23a04:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   23a14:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   23a24:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   23a34:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23a44:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   23a54:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   23a64:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   23a74:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   23a84:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   23a94:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   23aa4:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   23ab4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   23ac4:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   23ad4:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   23ae4:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   23af4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23b04:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   23b14:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   23b24:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   23b34:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   23b44:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   23b54:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   23b64:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   23b74:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   23b84:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23b94:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   23ba4:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   23bb4:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   23bc4:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   23bd4:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   23be4:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   23bf4:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   23c04:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   23c14:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   23c24:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23c34:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   23c44:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   23c54:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   23c64:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   23c74:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   23c84:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   23c94:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   23ca4:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   23cb4:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   23cc4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23cd4:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   23ce4:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   23cf4:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   23d04:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   23d14:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   23d24:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   23d34:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   23d44:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   23d54:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   23d64:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23d74:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   23d84:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   23d94:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   23da4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23db4:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   23dc4:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   23dd4:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   23de4:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   23df4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23e04:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   23e14:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   23e24:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   23e34:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23e44:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   23e54:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   23e64:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   23e74:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23e84:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   23e94:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   23ea4:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   23eb4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23ec4:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   23ed4:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   23ee4:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   23ef4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23f04:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   23f14:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   23f24:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   23f34:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23f44:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   23f54:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   23f64:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   23f74:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   23f84:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   23f94:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   23fa4:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   23fb4:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   23fc4:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   23fd4:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   23fe4:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   23ff4:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   24004:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   24014:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   24024:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   24034:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   24044:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   24054:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   24064:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   24074:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   24084:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   24094:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   240a4:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   240b4:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   240c4:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   240d4:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   240e4:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   240f4:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   24104:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   24114:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   24124:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   24134:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   24144:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   24154:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   24164:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   24174:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   24184:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   24194:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   241a4:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   241b4:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   241c4:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   241d4:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   241e4:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   241f4:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   24204:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   24214:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   24224:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   24234:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   24244:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   24254:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   24264:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   24274:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   24284:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   24294:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   242a4:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   242b4:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   242c4:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   242d4:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   242e4:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   242f4:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   24304:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   24314:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   24324:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   24334:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   24344:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   24354:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   24364:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   24374:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   24384:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   24394:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   243a4:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   243b4:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   243c4:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   243d4:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   243e4:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   243f4:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   24404:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   24414:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   24424:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   24434:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   24444:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   24454:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   24464:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   24474:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   24484:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   24494:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   244a4:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   244b4:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   244c4:	0000 0000 6d54 2072 7653 0063 9ddc 0000     ....Tmr Svc.....
   244d4:	9ddc 0000 9ddc 0000 9e6a 0000 9e34 0000     ........j...4...
   244e4:	9e5e 0000 9ddc 0000 9ddc 0000 9e6a 0000     ^...........j...
   244f4:	9e34 0000                                   4...

000244f8 <sd_mmc_trans_units>:
   244f8:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00024514 <sd_trans_multipliers>:
   24514:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   24524:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   24534:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   24544:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00024554 <mmc_trans_multipliers>:
   24554:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   24564:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   24574:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   24584:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   24594:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   245a4:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   245b4:	746c 6320 646d 000a 000d 0000               lt cmd......

000245c0 <__FUNCTION__.16824>:
   245c0:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   245d0:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   245e0:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   245f0:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   24600:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   24610:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   24620:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   24630:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   24640:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   24650:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   24660:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   24670:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   24680:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   24690:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   246a0:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   246b0:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   246c0:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   246d0:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   246e0:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   246f0:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   24700:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   24710:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   24720:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   24730:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   24740:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   24750:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   24760:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   24770:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   24780:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   24790:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   247a0:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   247b0:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   247c0:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   247d0:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   247e0:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   247f0:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   24800:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   24810:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   24820:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   24830:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   24840:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   24850:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   24860:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   24870:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   24880:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   24890:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   248a0:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   248b0:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   248c0:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   248d0:	203f 6425 000a 0000 df7c 0000 df4c 0000     ? %d....|...L...
   248e0:	df44 0000 df5c 0000 df54 0000 df74 0000     D...\...T...t...
   248f0:	df64 0000 df6c 0000                         d...l...

000248f8 <__FUNCTION__.17692>:
   248f8:	6968 5f66 6573 646e 0000 0000               hif_send....

00024904 <__FUNCTION__.17702>:
   24904:	6968 5f66 7369 0072                         hif_isr.

0002490c <__FUNCTION__.17711>:
   2490c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0002491c <__FUNCTION__.17723>:
   2491c:	6968 5f66 6572 6563 7669 0065               hif_receive.

00024928 <__FUNCTION__.17739>:
   24928:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   24938:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   24948:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   24958:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   24968:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   24978:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   24988:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   24998:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   249a8:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   249b8:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   249c8:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   249d8:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   249e8:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   249f8:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   24a08:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   24a18:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   24a28:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   24a38:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   24a48:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   24a58:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   24a68:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   24a78:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   24a88:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   24a98:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   24aa8:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   24ab8:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   24ac8:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   24ad8:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   24ae8:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   24af8:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   24b08:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   24b18:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   24b28:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   24b38:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   24b48:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   24b58:	000a 0000 3731 333a 3a31 3635 0000 0000     ....17:31:56....
   24b68:	7041 2072 3720 3220 3230 0034 7244 7669     Apr  7 2024.Driv
   24b78:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   24b88:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   24b98:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   24ba8:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   24bb8:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   24bc8:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   24bd8:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   24be8:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   24bf8:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   24c08:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   24c18:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   24c28:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   24c38:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   24c48:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   24c58:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   24c68:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   24c78:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   24c88:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   24c98:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   24ca8:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   24cb8:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   24cc8:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   24cd8:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   24ce8:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   24cf8:	4220 6675 6566 0a72 0000 0000                Buffer.....

00024d04 <__FUNCTION__.17674>:
   24d04:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00024d10 <__FUNCTION__.17703>:
   24d10:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00024d20 <__FUNCTION__.17734>:
   24d20:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   24d30:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   24d40:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   24d50:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   24d60:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   24d70:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   24d80:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   24d90:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   24da0:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   24db0:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00024dc0 <__FUNCTION__.17531>:
   24dc0:	6863 7069 775f 6b61 0065 0000               chip_wake...

00024dcc <__FUNCTION__.17580>:
   24dcc:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   24ddc:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   24dec:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   24dfc:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   24e0c:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   24e1c:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   24e2c:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   24e3c:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   24e4c:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   24e5c:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   24e6c:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   24e7c:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   24e8c:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   24e9c:	6920 696e 2074 7562 0a73 0000                init bus...

00024ea8 <__FUNCTION__.17578>:
   24ea8:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00024eb4 <__FUNCTION__.17585>:
   24eb4:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00024ec4 <crc7_syndrome_table>:
   24ec4:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   24ed4:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   24ee4:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   24ef4:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   24f04:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   24f14:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   24f24:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   24f34:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   24f44:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   24f54:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   24f64:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   24f74:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   24f84:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   24f94:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   24fa4:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   24fb4:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   24fc4:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   24fd4:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   24fe4:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   24ff4:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   25004:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   25014:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   25024:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   25034:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   25044:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   25054:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   25064:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   25074:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   25084:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   25094:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   250a4:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   250b4:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   250c4:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   250d4:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   250e4:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   250f4:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   25104:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   25114:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   25124:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   25134:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   25144:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   25154:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   25164:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   25174:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   25184:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   25194:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   251a4:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   251b4:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   251c4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   251d4:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   251e4:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   251f4:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   25204:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   25214:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   25224:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   25234:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   25244:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   25254:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   25264:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   25274:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   25284:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   25294:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   252a4:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   252b4:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   252c4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   252d4:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   252e4:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   252f4:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   25304:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   25314:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   25324:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   25334:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   25344:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   25354:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   25364:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   25374:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   25384:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   25394:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   253a4:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   253b4:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   253c4:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   253d4:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   253e4:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   253f4:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   25404:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   25414:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   25424:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   25434:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   25444:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   25454:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   25464:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   25474:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   25484:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   25494:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   254a4:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   254b4:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   254c4:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   254d4:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   254e4:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   254f4:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   25504:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   25514:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   25524:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   25534:	2e2e 0a2e 0000 0000 fba4 0000 fba4 0000     ................
   25544:	fc34 0000 faf8 0000 fb3e 0000 fb60 0000     4.......>...`...
   25554:	fbe6 0000 fbe6 0000 fca0 0000 facc 0000     ................
   25564:	fcfa 0000 fcfa 0000 fcfa 0000 fcfa 0000     ................
   25574:	fb82 0000 0104 0001 0104 0001 018c 0001     ................
   25584:	0068 0001 00aa 0001 00c8 0001 0142 0001     h...........B...
   25594:	0142 0001 01ee 0001 0040 0001 023e 0001     B.......@...>...
   255a4:	023e 0001 023e 0001 023e 0001 00e6 0001     >...>...>.......

000255b4 <__FUNCTION__.16853>:
   255b4:	7073 5f69 6d63 0064                         spi_cmd.

000255bc <__FUNCTION__.16860>:
   255bc:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

000255cc <__FUNCTION__.16869>:
   255cc:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

000255d8 <__FUNCTION__.16902>:
   255d8:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   255e8:	0000 0000                                   ....

000255ec <__FUNCTION__.16948>:
   255ec:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

000255fc <__FUNCTION__.16960>:
   255fc:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0002560c <__FUNCTION__.16971>:
   2560c:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0002561c <__FUNCTION__.16983>:
   2561c:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0002562c <__FUNCTION__.16994>:
   2562c:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00025638 <__FUNCTION__.17015>:
   25638:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   25648:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   25658:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   25668:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   25678:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   25688:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   25698:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   256a8:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   256b8:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   256c8:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   256d8:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   256e8:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   256f8:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   25708:	2074 2230 0000 0000                         t 0"....

00025710 <lun_desc>:
   25710:	b801 0000 b859 0000 b8a5 0000 b8f1 0000     ....Y...........
   25720:	b921 0000 b9a5 0000 ba35 0000 56f8 0002     !.......5....V..
   25730:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   25740:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   25750:	5b22 0001 5b9c 0001 5b9c 0001 5b40 0001     "[...[...[..@[..
   25760:	5b3a 0001 5b46 0001 5b28 0001 5b4c 0001     :[..F[..([..L[..
   25770:	5b82 0001 5d84 0001 5dd4 0001 5dd4 0001     .[...]...]...]..
   25780:	5dd0 0001 5d76 0001 5d96 0001 5d66 0001     .]..v]...]..f]..
   25790:	5da8 0001 5dba 0001 5e22 0001 5e50 0001     .]...].."^..P^..
   257a0:	5e50 0001 5e4c 0001 5e1c 0001 5e28 0001     P^..L^...^..(^..
   257b0:	5e16 0001 5e2e 0001 5e34 0001               .^...^..4^..

000257bc <tcc_modules>:
   257bc:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

000257c8 <_tcc_gclk_ids>:
   257c8:	1a1a 001b                                   ....

000257cc <_tcc_apbcmasks>:
   257cc:	0100 0000 0200 0000 0400 0000               ............

000257d8 <_tcc_maxs>:
   257d8:	ffff 00ff ffff 00ff ffff 0000               ............

000257e4 <_tcc_cc_nums>:
   257e4:	0204 0002                                   ....

000257e8 <_tcc_ow_nums>:
   257e8:	0408 0002                                   ....

000257ec <_tcc_intflag>:
   257ec:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   257fc:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   2580c:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0002581c <LfnOfs>:
   2581c:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   2582c:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   2583c:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   2584c:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   2585c:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   2586c:	5441 2020 2020 0020                         AT     .

00025874 <excvt.4558>:
   25874:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   25884:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   25894:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   258a4:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   258b4:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   258c4:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   258d4:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   258e4:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

000258f4 <Tbl>:
   258f4:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   25904:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   25914:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   25924:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   25934:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   25944:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   25954:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   25964:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   25974:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   25984:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   25994:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   259a4:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   259b4:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   259c4:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   259d4:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   259e4:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

000259f4 <tbl_lower.4308>:
   259f4:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   25a04:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   25a14:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   25a24:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   25a34:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   25a44:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   25a54:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   25a64:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   25a74:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   25a84:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   25a94:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   25aa4:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   25ab4:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   25ac4:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   25ad4:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   25ae4:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   25af4:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   25b04:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   25b14:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   25b24:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   25b34:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   25b44:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   25b54:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   25b64:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   25b74:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   25b84:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   25b94:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   25ba4:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   25bb4:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   25bc4:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00025bd4 <tbl_upper.4309>:
   25bd4:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   25be4:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   25bf4:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   25c04:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   25c14:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   25c24:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   25c34:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   25c44:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   25c54:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   25c64:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   25c74:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   25c84:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   25c94:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   25ca4:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   25cb4:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   25cc4:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   25cd4:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   25ce4:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   25cf4:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   25d04:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   25d14:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   25d24:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   25d34:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   25d44:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   25d54:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   25d64:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   25d74:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   25d84:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   25d94:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   25da4:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   25db4:	b18e 0001 b18e 0001 b18e 0001 b01c 0001     ................
   25dc4:	b18e 0001 b106 0001 b18e 0001 b18e 0001     ................
   25dd4:	b18e 0001 b18e 0001 b18e 0001 b18e 0001     ................
   25de4:	b18e 0001 b180 0001 514d 4354 0000 0000     ........MQTC....
   25df4:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   25e04:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   25e44:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   25e5c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   25e9c:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   25eac:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   25ebc:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   25ecc:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   25edc:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   25eec:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   25efc:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   25f0c:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   25f1c:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   25f2c:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   25f3c:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   25f4c:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   25f5c:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   25f6c:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   25f7c:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   25f8c:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   25f9c:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   25fac:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   25fbc:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   25fcc:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   25fdc:	5448 5054 002f 0000 0d31 0000 d282 0001     HTTP/...1.......
   25fec:	d27c 0001 d276 0001 d270 0001 d288 0001     |...v...p.......
   25ffc:	d26a 0001 d288 0001 d264 0001 d25e 0001     j.......d...^...
   2600c:	d288 0001 d258 0001 d258 0001 d252 0001     ....X...X...R...
   2601c:	d24c 0001 d246 0001 2000 4200 2400 4200     L...F.... .B.$.B
   2602c:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   2603c:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   2604c:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   2605c:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   2606c:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   2607c:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   2608c:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   2609c:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   260ac:	6f46 6e75 2064 6148 7470 6369 2121 0d21     Found Haptic!!!.
   260bc:	000a 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   260cc:	6148 7470 6369 2121 0d21 000a 6f43 6c75     Haptic!!!...Coul
   260dc:	2064 6f6e 2074 6966 646e 4820 7061 6974     d not find Hapti
   260ec:	2163 2121 0a0d 0000 6548 7061 6220 6665     c!!!....Heap bef
   260fc:	726f 2065 7473 7261 6974 676e 7420 7361     ore starting tas
   2610c:	736b 203a 6425 0a0d 0000 0000 4c43 5f49     ks: %d......CLI_
   2611c:	4154 4b53 0000 0000 5245 3a52 4320 494c     TASK....ERR: CLI
   2612c:	7420 7361 206b 6f63 6c75 2064 6f6e 2074      task could not 
   2613c:	6562 6920 696e 6974 6c61 7a69 6465 0d21     be initialized!.
   2614c:	000a 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   2615c:	6174 7472 6e69 2067 4c43 3a49 2520 0d64     tarting CLI: %d.
   2616c:	000a 0000 4957 4946 545f 5341 004b 0000     ....WIFI_TASK...
   2617c:	5245 3a52 5720 4649 2049 6174 6b73 6320     ERR: WIFI task c
   2618c:	756f 646c 6e20 746f 6220 2065 6e69 7469     ould not be init
   2619c:	6169 696c 657a 2164 0a0d 0000 6548 7061     ialized!....Heap
   261ac:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   261bc:	4957 4946 203a 6425 0a0d 0000 7245 6f72     WIFI: %d....Erro
   261cc:	2072 6e6f 6d20 6d65 726f 2079 6c61 6f6c     r on memory allo
   261dc:	6163 6974 6e6f 6f20 206e 5246 4545 5452     cation on FREERT
   261ec:	534f 0d21 000a 0000 7245 6f72 2072 6e6f     OS!.....Error on
   261fc:	7320 6174 6b63 6f20 6576 6672 6f6c 2077      stack overflow 
   2620c:	6e6f 4620 4552 5245 4f54 2153 0a0d 0000     on FREERTOS!....
   2621c:	f3b0 0001 f300 0001 f300 0001 f2fe 0001     ................
   2622c:	f3a2 0001 f3a2 0001 f398 0001 f2fe 0001     ................
   2623c:	f3a2 0001 f398 0001 f3a2 0001 f2fe 0001     ................
   2624c:	f3a8 0001 f3a8 0001 f3a8 0001 f438 0001     ............8...
   2625c:	fdbc 0001 fd9e 0001 fd58 0001 fc76 0001     ........X...v...
   2626c:	fd58 0001 fd90 0001 fd58 0001 fc76 0001     X.......X...v...
   2627c:	fd9e 0001 fd9e 0001 fd90 0001 fc76 0001     ............v...
   2628c:	fc6e 0001 fc6e 0001 fc6e 0001 ffd4 0001     n...n...n.......
   2629c:	041c 0002 02dc 0002 02dc 0002 02d8 0002     ................
   262ac:	03f4 0002 03f4 0002 03e6 0002 02d8 0002     ................
   262bc:	03f4 0002 03e6 0002 03f4 0002 02d8 0002     ................
   262cc:	03fc 0002 03fc 0002 03fc 0002 0600 0002     ................

000262dc <_global_impure_ptr>:
   262dc:	0130 2000                                   0.. 

000262e0 <__sf_fake_stderr>:
	...

00026300 <__sf_fake_stdin>:
	...

00026320 <__sf_fake_stdout>:
	...
   26340:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   26350:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   26360:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   26370:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0002637d <_ctype_>:
   2637d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   2638d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   2639d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   263ad:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   263bd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   263cd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   263dd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   263ed:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   263fd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00026480 <_init>:
   26480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26482:	46c0      	nop			; (mov r8, r8)
   26484:	bcf8      	pop	{r3, r4, r5, r6, r7}
   26486:	bc08      	pop	{r3}
   26488:	469e      	mov	lr, r3
   2648a:	4770      	bx	lr

0002648c <__init_array_start>:
   2648c:	000000dd 	.word	0x000000dd

00026490 <_fini>:
   26490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26492:	46c0      	nop			; (mov r8, r8)
   26494:	bcf8      	pop	{r3, r4, r5, r6, r7}
   26496:	bc08      	pop	{r3}
   26498:	469e      	mov	lr, r3
   2649a:	4770      	bx	lr

0002649c <__fini_array_start>:
   2649c:	000000b5 	.word	0x000000b5
